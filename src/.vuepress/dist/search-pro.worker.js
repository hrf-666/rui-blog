const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":934,\"nextId\":934,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-184f4da6@0\",\"2\":\"v-8daa1a0e\",\"3\":\"v-8daa1a0e@0\",\"4\":\"v-2e3eac9e\",\"5\":\"v-2e3eac9e#幻灯片演示\",\"6\":\"v-2e3eac9e#标注幻灯片\",\"7\":\"v-2e3eac9e#标注幻灯片-1\",\"8\":\"v-2e3eac9e#markdown\",\"9\":\"v-2e3eac9e#markdown-1\",\"10\":\"v-2e3eac9e#这是一个-h3\",\"11\":\"v-2e3eac9e#markdown-2\",\"12\":\"v-2e3eac9e#markdown-3\",\"13\":\"v-2e3eac9e#markdown-4\",\"14\":\"v-2e3eac9e#markdown-5\",\"15\":\"v-2e3eac9e#布局\",\"16\":\"v-2e3eac9e#布局-1\",\"17\":\"v-2e3eac9e#布局-2\",\"18\":\"v-2e3eac9e#布局-3\",\"19\":\"v-2e3eac9e#背景\",\"20\":\"v-2e3eac9e#动画片段\",\"21\":\"v-2e3eac9e#动画片段-1\",\"22\":\"v-2e3eac9e#动画片段-2\",\"23\":\"v-2e3eac9e#动画-class\",\"24\":\"v-2e3eac9e#动画片段-3\",\"25\":\"v-2e3eac9e#动画-class-1\",\"26\":\"v-2e3eac9e#动画片段-4\",\"27\":\"v-2e3eac9e#多个动画片段\",\"28\":\"v-2e3eac9e#动画片段-5\",\"29\":\"v-2e3eac9e#顺序\",\"30\":\"v-2e3eac9e#渐变\",\"31\":\"v-2e3eac9e#渐变-1\",\"32\":\"v-2e3eac9e#渐变-2\",\"33\":\"v-2e3eac9e#过渡动画\",\"34\":\"v-2e3eac9e#功能\",\"35\":\"v-2e3eac9e#功能-1\",\"36\":\"v-2e3eac9e#代码\",\"37\":\"v-2e3eac9e#功能-2\",\"38\":\"v-2e3eac9e#预览模式\",\"39\":\"v-2e3eac9e#功能-3\",\"40\":\"v-2e3eac9e#全屏模式\",\"41\":\"v-2e3eac9e#功能-4\",\"42\":\"v-2e3eac9e#缩放\",\"43\":\"v-2e3eac9e#结束\",\"44\":\"v-2e3eac9e@0\",\"45\":\"v-372ea4e3\",\"46\":\"v-372ea4e3@0\",\"47\":\"v-fdfff52a\",\"48\":\"v-fdfff52a#java\",\"49\":\"v-fdfff52a#mybatis\",\"50\":\"v-fdfff52a#前端\",\"51\":\"v-fdfff52a@0\",\"52\":\"v-fdfff52a@1\",\"53\":\"v-82e217e4\",\"54\":\"v-82e217e4@0\",\"55\":\"v-82e217e4@1\",\"56\":\"v-576eea85\",\"57\":\"v-576eea85@0\",\"58\":\"v-576eea85@1\",\"59\":\"v-1fc918d7\",\"60\":\"v-1fc918d7@0\",\"61\":\"v-1fc918d7@1\",\"62\":\"v-b7223ffc\",\"63\":\"v-b7223ffc@0\",\"64\":\"v-e4cb1150\",\"65\":\"v-e4cb1150@0\",\"66\":\"v-e4cb1150@1\",\"67\":\"v-6f2c70ea\",\"68\":\"v-6f2c70ea@0\",\"69\":\"v-6f2c70ea@1\",\"70\":\"v-205aa070\",\"71\":\"v-205aa070#图标操作\",\"72\":\"v-205aa070#_1、加载tree\",\"73\":\"v-205aa070#_2、tree加载完成后运行\",\"74\":\"v-205aa070#_3、node展开后运行\",\"75\":\"v-205aa070#修改图标\",\"76\":\"v-205aa070#使用css\",\"77\":\"v-205aa070@0\",\"78\":\"v-205aa070@1\",\"79\":\"v-440678fa\",\"80\":\"v-440678fa@0\",\"81\":\"v-440678fa@1\",\"82\":\"v-63d53fc2\",\"83\":\"v-63d53fc2@0\",\"84\":\"v-63d53fc2@1\",\"85\":\"v-bc792482\",\"86\":\"v-bc792482#传入map类型\",\"87\":\"v-bc792482#传入list类型\",\"88\":\"v-bc792482#传入array类型\",\"89\":\"v-bc792482#传入参数为包含集合属性的pojo\",\"90\":\"v-bc792482#pojo-属性为-array\",\"91\":\"v-bc792482#pojo-属性为-map\",\"92\":\"v-bc792482@0\",\"93\":\"v-bc792482@1\",\"94\":\"v-19637c2a\",\"95\":\"v-19637c2a#返回map类型\",\"96\":\"v-19637c2a#返回list类型\",\"97\":\"v-19637c2a#返回list-类型\",\"98\":\"v-19637c2a@0\",\"99\":\"v-19637c2a@1\",\"100\":\"v-8f80a1b2\",\"101\":\"v-8f80a1b2@0\",\"102\":\"v-8f80a1b2@1\",\"103\":\"v-1d425cf8\",\"104\":\"v-1d425cf8@0\",\"105\":\"v-1d425cf8@1\",\"106\":\"v-94fcf284\",\"107\":\"v-94fcf284#下载picgo软件\",\"108\":\"v-94fcf284#安装picgo软件\",\"109\":\"v-94fcf284#gitee操作\",\"110\":\"v-94fcf284#在gitee中创建仓库\",\"111\":\"v-94fcf284#在gitee中配置私人令牌\",\"112\":\"v-94fcf284#配置picgo\",\"113\":\"v-94fcf284#在插件设置中搜索gitee插件并进行下载\",\"114\":\"v-94fcf284#typora-picgo设置\",\"115\":\"v-94fcf284#typora-下载\",\"116\":\"v-94fcf284#typora进行图像设置\",\"117\":\"v-94fcf284@0\",\"118\":\"v-94fcf284@1\",\"119\":\"v-20606c4a\",\"120\":\"v-20606c4a@0\",\"121\":\"v-20606c4a@1\",\"122\":\"v-29c60708\",\"123\":\"v-29c60708@0\",\"124\":\"v-29c60708@1\",\"125\":\"v-17ec2ccf\",\"126\":\"v-17ec2ccf@0\",\"127\":\"v-17ec2ccf@1\",\"128\":\"v-466858a7\",\"129\":\"v-466858a7@0\",\"130\":\"v-466858a7@1\",\"131\":\"v-b557a6a2\",\"132\":\"v-b557a6a2@0\",\"133\":\"v-b557a6a2@1\",\"134\":\"v-bb9b44ba\",\"135\":\"v-bb9b44ba@0\",\"136\":\"v-bb9b44ba@1\",\"137\":\"v-2497eb44\",\"138\":\"v-2497eb44@0\",\"139\":\"v-2497eb44@1\",\"140\":\"v-35196286\",\"141\":\"v-35196286@0\",\"142\":\"v-35196286@1\",\"143\":\"v-8854c3be\",\"144\":\"v-8854c3be@0\",\"145\":\"v-cba48a82\",\"146\":\"v-cba48a82@0\",\"147\":\"v-d3100382\",\"148\":\"v-d3100382@0\",\"149\":\"v-d3100382@1\",\"150\":\"v-c4fabd44\",\"151\":\"v-c4fabd44#引言\",\"152\":\"v-c4fabd44#_1-说说有哪些常见集合\",\"153\":\"v-c4fabd44#list\",\"154\":\"v-c4fabd44#_2-arraylist和linkedlist有什么区别\",\"155\":\"v-c4fabd44#_3-arraylist的扩容机制了解吗\",\"156\":\"v-c4fabd44#_4-arraylist怎么序列化的知道吗-为什么用transient修饰数组\",\"157\":\"v-c4fabd44#_5-快速失败-fail-fast-和安全失败-fail-safe-了解吗\",\"158\":\"v-c4fabd44#_6-有哪几种实现arraylist线程安全的方法\",\"159\":\"v-c4fabd44#_7-copyonwritearraylist了解多少\",\"160\":\"v-c4fabd44#map\",\"161\":\"v-c4fabd44#_8-能说一下hashmap的数据结构吗\",\"162\":\"v-c4fabd44#_9-你对红黑树了解多少-为什么不用二叉树-平衡树呢\",\"163\":\"v-c4fabd44#_10-红黑树怎么保持平衡的知道吗\",\"164\":\"v-c4fabd44#_11-hashmap的put流程知道吗\",\"165\":\"v-c4fabd44#_12-hashmap怎么查找元素的呢\",\"166\":\"v-c4fabd44#_13-hashmap的哈希-扰动函数是怎么设计的\",\"167\":\"v-c4fabd44#_14-为什么哈希-扰动函数能降hash碰撞\",\"168\":\"v-c4fabd44#_15-为什么hashmap的容量是2的倍数呢\",\"169\":\"v-c4fabd44#_16-如果初始化hashmap-传一个17的值new-hashmap-它会怎么处理\",\"170\":\"v-c4fabd44#_17-你还知道哪些哈希函数的构造方法呢\",\"171\":\"v-c4fabd44#_18-解决哈希冲突有哪些方法呢\",\"172\":\"v-c4fabd44#_19-为什么hashmap链表转红黑树的阈值为8呢\",\"173\":\"v-c4fabd44#_20-扩容在什么时候呢-为什么扩容因子是0-75\",\"174\":\"v-c4fabd44#_21-那扩容机制了解吗\",\"175\":\"v-c4fabd44#_22-jdk1-8对hashmap主要做了哪些优化呢-为什么\",\"176\":\"v-c4fabd44#_23-你能自己设计实现一个hashmap吗\",\"177\":\"v-c4fabd44#_24-hashmap-是线程安全的吗-多线程下会有什么问题\",\"178\":\"v-c4fabd44#_25-有什么办法能解决hashmap线程不安全的问题呢\",\"179\":\"v-c4fabd44#_26-能具体说一下concurrenthashmap的实现吗\",\"180\":\"v-c4fabd44#_1-7分段锁\",\"181\":\"v-c4fabd44#_1-8-cas-synchronized\",\"182\":\"v-c4fabd44#_27-hashmap-内部节点是有序的吗\",\"183\":\"v-c4fabd44#_28-讲讲-linkedhashmap-怎么实现有序的\",\"184\":\"v-c4fabd44#_29-讲讲-treemap-怎么实现有序的\",\"185\":\"v-c4fabd44#set\",\"186\":\"v-c4fabd44#_30-讲讲hashset的底层实现\",\"187\":\"v-c4fabd44@0\",\"188\":\"v-05bf5bea\",\"189\":\"v-05bf5bea#分布式理论\",\"190\":\"v-05bf5bea#_1-说说cap原则\",\"191\":\"v-05bf5bea#_2-为什么cap不可兼得呢\",\"192\":\"v-05bf5bea#_3-cap对应的模型和应用\",\"193\":\"v-05bf5bea#_4-base理论了解吗\",\"194\":\"v-05bf5bea#分布式锁\",\"195\":\"v-05bf5bea#_5-有哪些分布式锁的实现方案呢\",\"196\":\"v-05bf5bea#_5-1-mysql分布式锁如何实现呢\",\"197\":\"v-05bf5bea#_5-2-zookeeper如何实现分布式锁\",\"198\":\"v-05bf5bea#_5-3-redis怎么实现分布式锁\",\"199\":\"v-05bf5bea#分布式事务\",\"200\":\"v-05bf5bea#_6-什么是分布式事务\",\"201\":\"v-05bf5bea#_7-分布式事务有哪些常见的实现方案\",\"202\":\"v-05bf5bea#_7-1-说说2pc两阶段提交\",\"203\":\"v-05bf5bea#_7-2-3pc-三阶段提交-了解吗\",\"204\":\"v-05bf5bea#_7-3-tcc了解吗\",\"205\":\"v-05bf5bea#_7-4-本地消息表了解吗\",\"206\":\"v-05bf5bea#_7-5-mq消息事务了解吗\",\"207\":\"v-05bf5bea#_7-6-最大努力通知了解吗\",\"208\":\"v-05bf5bea#_8-你们用什么-能说一下seata吗\",\"209\":\"v-05bf5bea#分布式一致性算法\",\"210\":\"v-05bf5bea#_9-分布式算法paxos了解么\",\"211\":\"v-05bf5bea#paxos算法是什么\",\"212\":\"v-05bf5bea#paxos算法的工作流程\",\"213\":\"v-05bf5bea#角色\",\"214\":\"v-05bf5bea#算法流程\",\"215\":\"v-05bf5bea#prepare-准备-阶段\",\"216\":\"v-05bf5bea#accept-接受-阶段\",\"217\":\"v-05bf5bea#paxos算法有什么缺点吗-怎么优化\",\"218\":\"v-05bf5bea#_10-说说raft算法\",\"219\":\"v-05bf5bea#raft算法是什么\",\"220\":\"v-05bf5bea#raft算法的工作流程\",\"221\":\"v-05bf5bea#raft算法的角色\",\"222\":\"v-05bf5bea#leader选举过程\",\"223\":\"v-05bf5bea#分布式设计\",\"224\":\"v-05bf5bea#_11-说说什么是幂等性\",\"225\":\"v-05bf5bea#怎么保证接口幂等性\",\"226\":\"v-05bf5bea#分布式限流\",\"227\":\"v-05bf5bea#_12-你了解哪些限流算法\",\"228\":\"v-05bf5bea@0\",\"229\":\"v-7d12a748\",\"230\":\"v-7d12a748#java-概述\",\"231\":\"v-7d12a748#_1-什么是-java\",\"232\":\"v-7d12a748#_2-java-语言有哪些特点\",\"233\":\"v-7d12a748#_3-jvm、jdk-和-jre-有什么区别\",\"234\":\"v-7d12a748#_4-说说什么是跨平台性-原理是什么\",\"235\":\"v-7d12a748#_5-什么是字节码-采用字节码的好处是什么\",\"236\":\"v-7d12a748#_6-为什么说-java-语言-编译与解释并存\",\"237\":\"v-7d12a748#基础语法\",\"238\":\"v-7d12a748#_7-java-有哪些数据类型\",\"239\":\"v-7d12a748#_8-自动类型转换、强制类型转换-看看这几行代码\",\"240\":\"v-7d12a748#_9-什么是自动拆箱-封箱\",\"241\":\"v-7d12a748#_10-和-有什么区别\",\"242\":\"v-7d12a748#_11-switch-是否能作用在-byte-long-string-上\",\"243\":\"v-7d12a748#_12-break-continue-return-的区别及作用\",\"244\":\"v-7d12a748#_13-用最有效率的方法计算-2-乘以-8\",\"245\":\"v-7d12a748#_14-说说自增自减运算-看下这几个代码运行结果\",\"246\":\"v-7d12a748#面向对象\",\"247\":\"v-7d12a748#_15-面向对象和面向过程的区别\",\"248\":\"v-7d12a748#_16-面向对象有哪些特性\",\"249\":\"v-7d12a748#_17-重载-overload-和重写-override-的区别\",\"250\":\"v-7d12a748#_18-访问修饰符-public、private、protected、以及不写-默认-时的区别\",\"251\":\"v-7d12a748#_19-this-关键字有什么作用\",\"252\":\"v-7d12a748#_20-抽象类-abstract-class-和接口-interface-有什么区别\",\"253\":\"v-7d12a748#_21-成员变量与局部变量的区别有哪些\",\"254\":\"v-7d12a748#_22-静态变量和实例变量的区别-静态方法、实例方法呢\",\"255\":\"v-7d12a748#_24-final-关键字有什么作用\",\"256\":\"v-7d12a748#_25-final、finally、finalize-的区别\",\"257\":\"v-7d12a748#_26-和-equals-的区别\",\"258\":\"v-7d12a748#_27-hashcode-与-equals\",\"259\":\"v-7d12a748#_28-java-是值传递-还是引用传递\",\"260\":\"v-7d12a748#_29-深拷贝和浅拷贝\",\"261\":\"v-7d12a748#_30-java-创建对象有哪几种方式\",\"262\":\"v-7d12a748#string\",\"263\":\"v-7d12a748#_31-string-是-java-基本数据类型吗-可以被继承吗\",\"264\":\"v-7d12a748#_32-string-和-stringbuilder、stringbuffer-的区别\",\"265\":\"v-7d12a748#_33-string-str1-new-string-abc-和-string-str2-abc-和-区别\",\"266\":\"v-7d12a748#_34-string-不是不可变类吗-字符串拼接是如何实现的\",\"267\":\"v-7d12a748#_35-intern-方法有什么作用\",\"268\":\"v-7d12a748#integer\",\"269\":\"v-7d12a748#_36-integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗\",\"270\":\"v-7d12a748#_37-string-怎么转成-integer-的-原理\",\"271\":\"v-7d12a748#object\",\"272\":\"v-7d12a748#_38-object-类的常见方法\",\"273\":\"v-7d12a748#异常处理\",\"274\":\"v-7d12a748#_39-java-中异常处理体系\",\"275\":\"v-7d12a748#_40-异常的处理方式\",\"276\":\"v-7d12a748#_41-三道经典异常处理代码题\",\"277\":\"v-7d12a748#i-o\",\"278\":\"v-7d12a748#_42-java-中-io-流分为几种\",\"279\":\"v-7d12a748#_43-既然有了字节流-为什么还要有字符流\",\"280\":\"v-7d12a748#_44-bio、nio、aio\",\"281\":\"v-7d12a748#序列化\",\"282\":\"v-7d12a748#_45-什么是序列化-什么是反序列化\",\"283\":\"v-7d12a748#_46-说说有几种序列化方式\",\"284\":\"v-7d12a748#泛型\",\"285\":\"v-7d12a748#_47-java-泛型了解么-什么是类型擦除-介绍一下常用的通配符\",\"286\":\"v-7d12a748#注解\",\"287\":\"v-7d12a748#_48-说一下你对注解的理解\",\"288\":\"v-7d12a748#反射\",\"289\":\"v-7d12a748#_49-什么是反射-应用-原理\",\"290\":\"v-7d12a748#jdk1-8-新特性\",\"291\":\"v-7d12a748#_50-jdk1-8-都有哪些新特性\",\"292\":\"v-7d12a748#_51-lambda-表达式了解多少\",\"293\":\"v-7d12a748#_52-optional-了解吗\",\"294\":\"v-7d12a748#_53-stream-流用过吗\",\"295\":\"v-7d12a748@0\",\"296\":\"v-75fe1210\",\"297\":\"v-75fe1210#基础\",\"298\":\"v-75fe1210#_1-并行跟并发有什么区别\",\"299\":\"v-75fe1210#_2-说说什么是进程和线程\",\"300\":\"v-75fe1210#_3-说说线程有几种创建方式\",\"301\":\"v-75fe1210#_4-为什么调用start-方法时会执行run-方法-那怎么不直接调用run-方法\",\"302\":\"v-75fe1210#_5-线程有哪些常用的调度方法\",\"303\":\"v-75fe1210#_6-线程有几种状态\",\"304\":\"v-75fe1210#_7-什么是线程上下文切换\",\"305\":\"v-75fe1210#_8-守护线程了解吗\",\"306\":\"v-75fe1210#_9-线程间有哪些通信方式\",\"307\":\"v-75fe1210#threadlocal\",\"308\":\"v-75fe1210#_10-threadlocal是什么\",\"309\":\"v-75fe1210#_11-你在工作中用到过threadlocal吗\",\"310\":\"v-75fe1210#_12-threadlocal怎么实现的呢\",\"311\":\"v-75fe1210#_13-threadlocal-内存泄露是怎么回事\",\"312\":\"v-75fe1210#_14-threadlocalmap的结构了解吗\",\"313\":\"v-75fe1210#_15-threadlocalmap怎么解决hash冲突的\",\"314\":\"v-75fe1210#_16-threadlocalmap扩容机制了解吗\",\"315\":\"v-75fe1210#_17-父子线程怎么共享数据\",\"316\":\"v-75fe1210#java内存模型\",\"317\":\"v-75fe1210#_18-说一下你对java内存模型-jmm-的理解\",\"318\":\"v-75fe1210#_19-说说你对原子性、可见性、有序性的理解\",\"319\":\"v-75fe1210#_20-那说说什么是指令重排\",\"320\":\"v-75fe1210#_21-指令重排有限制吗-happens-before了解吗\",\"321\":\"v-75fe1210#_22-as-if-serial又是什么-单线程的程序一定是顺序的吗\",\"322\":\"v-75fe1210#_23-volatile实现原理了解吗\",\"323\":\"v-75fe1210#锁\",\"324\":\"v-75fe1210#_24-synchronized用过吗-怎么使用\",\"325\":\"v-75fe1210#_25-synchronized的实现原理\",\"326\":\"v-75fe1210#_26-除了原子性-synchronized可见性-有序性-可重入性怎么实现\",\"327\":\"v-75fe1210#_27-锁升级-synchronized优化了解吗\",\"328\":\"v-75fe1210#偏向锁\",\"329\":\"v-75fe1210#轻量级锁\",\"330\":\"v-75fe1210#_28-说说synchronized和reentrantlock的区别\",\"331\":\"v-75fe1210#_29-aqs了解多少\",\"332\":\"v-75fe1210#_30-reentrantlock实现原理\",\"333\":\"v-75fe1210#_31-reentrantlock怎么实现公平锁的\",\"334\":\"v-75fe1210#_32-cas呢-cas了解多少\",\"335\":\"v-75fe1210#_33-cas-有什么问题-如何解决\",\"336\":\"v-75fe1210#aba-问题\",\"337\":\"v-75fe1210#循环性能开销\",\"338\":\"v-75fe1210#只能保证一个变量的原子操作\",\"339\":\"v-75fe1210#_34-java有哪些保证原子性的方法-如何保证多线程下i-结果正确\",\"340\":\"v-75fe1210#_35-原子操作类了解多少\",\"341\":\"v-75fe1210#_36-atomicinteger-的原理\",\"342\":\"v-75fe1210#_37-线程死锁了解吗-该如何避免\",\"343\":\"v-75fe1210#_38-那死锁问题怎么排查呢\",\"344\":\"v-75fe1210#并发工具类\",\"345\":\"v-75fe1210#_39-countdownlatch-倒计数器-了解吗\",\"346\":\"v-75fe1210#_40-cyclicbarrier-同步屏障-了解吗\",\"347\":\"v-75fe1210#_41-cyclicbarrier和countdownlatch有什么区别\",\"348\":\"v-75fe1210#_42-semaphore-信号量-了解吗\",\"349\":\"v-75fe1210#_43-exchanger-了解吗\",\"350\":\"v-75fe1210#线程池\",\"351\":\"v-75fe1210#_44-什么是线程池\",\"352\":\"v-75fe1210#_45-能说说工作中线程池的应用吗\",\"353\":\"v-75fe1210#_46-能简单说一下线程池的工作流程吗\",\"354\":\"v-75fe1210#_47-线程池主要参数有哪些\",\"355\":\"v-75fe1210#_48-线程池的拒绝策略有哪些\",\"356\":\"v-75fe1210#_49-线程池有哪几种工作队列\",\"357\":\"v-75fe1210#_50-线程池提交execute和submit有什么区别\",\"358\":\"v-75fe1210#_51-线程池怎么关闭知道吗\",\"359\":\"v-75fe1210#_52-线程池的线程数应该怎么配置\",\"360\":\"v-75fe1210#_53-有哪几种常见的线程池\",\"361\":\"v-75fe1210#_54-能说一下四种常见线程池的原理吗\",\"362\":\"v-75fe1210#newsinglethreadexecutor\",\"363\":\"v-75fe1210#newfixedthreadpool\",\"364\":\"v-75fe1210#newcachedthreadpool\",\"365\":\"v-75fe1210#newscheduledthreadpool\",\"366\":\"v-75fe1210#_55-线程池异常怎么处理知道吗\",\"367\":\"v-75fe1210#_56-能说一下线程池有几种状态吗\",\"368\":\"v-75fe1210#_57-线程池如何实现参数的动态修改\",\"369\":\"v-75fe1210#线程池调优了解吗\",\"370\":\"v-75fe1210#_58-你能设计实现一个线程池吗\",\"371\":\"v-75fe1210#_59-单机线程池执行断电了应该怎么处理\",\"372\":\"v-75fe1210#并发容器和框架\",\"373\":\"v-75fe1210#_60-fork-join框架了解吗\",\"374\":\"v-75fe1210@0\",\"375\":\"v-48fe9dd5\",\"376\":\"v-48fe9dd5#一、引言\",\"377\":\"v-48fe9dd5#_1-什么是-jvm\",\"378\":\"v-48fe9dd5#二、内存管理\",\"379\":\"v-48fe9dd5#_2-能说一下-jvm-的内存区域吗\",\"380\":\"v-48fe9dd5#_3-说一下-jdk1-6、1-7、1-8-内存区域的变化\",\"381\":\"v-48fe9dd5#_4-为什么使用元空间替代永久代作为方法区的实现\",\"382\":\"v-48fe9dd5#_5-对象创建的过程了解吗\",\"383\":\"v-48fe9dd5#_6-什么是指针碰撞-什么是空闲列表\",\"384\":\"v-48fe9dd5#_7-jvm-里-new-对象时-堆会发生抢占吗-jvm-是怎么设计来保证线程安全的\",\"385\":\"v-48fe9dd5#_8-能说一下对象的内存布局吗\",\"386\":\"v-48fe9dd5#_9-对象怎么访问定位\",\"387\":\"v-48fe9dd5#_10-内存溢出和内存泄漏是什么意思\",\"388\":\"v-48fe9dd5#_11-能手写内存溢出的例子吗\",\"389\":\"v-48fe9dd5#_12-内存泄漏可能由哪些原因导致呢\",\"390\":\"v-48fe9dd5#_13-如何判断对象仍然存活\",\"391\":\"v-48fe9dd5#_14-java-中可作为-gc-roots-的对象有哪几种\",\"392\":\"v-48fe9dd5#_15-说一下对象有哪几种引用\",\"393\":\"v-48fe9dd5#_16-finalize-方法了解吗-有什么作用\",\"394\":\"v-48fe9dd5#_17-java-堆的内存分区了解吗\",\"395\":\"v-48fe9dd5#_18-垃圾收集算法了解吗\",\"396\":\"v-48fe9dd5#_19-说一下新生代的区域划分\",\"397\":\"v-48fe9dd5#_20-minor-gc-young-gc、major-gc-old-gc、mixed-gc、full-gc-都是什么意思\",\"398\":\"v-48fe9dd5#_21-minor-gc-young-gc-什么时候触发\",\"399\":\"v-48fe9dd5#_22-什么时候会触发-full-gc\",\"400\":\"v-48fe9dd5#_23-对象什么时候会进入老年代\",\"401\":\"v-48fe9dd5#_24-知道有哪些垃圾收集器吗\",\"402\":\"v-48fe9dd5#_25-什么是-stop-the-world-什么是-oopmap-什么是安全点\",\"403\":\"v-48fe9dd5#_26-能详细说一下-cms-收集器的垃圾收集过程吗\",\"404\":\"v-48fe9dd5#_27-g1-垃圾收集器了解吗\",\"405\":\"v-48fe9dd5#_28-有了-cms-为什么还要引入-g1\",\"406\":\"v-48fe9dd5#_29-你们线上用的什么垃圾收集器-为什么要用它\",\"407\":\"v-48fe9dd5#_30-垃圾收集器应该如何选择\",\"408\":\"v-48fe9dd5#_31-对象一定分配在堆中吗-有没有了解逃逸分析技术\",\"409\":\"v-48fe9dd5#三、jvm-调优\",\"410\":\"v-48fe9dd5#_32-有哪些常用的命令行性能监控和故障处理工具\",\"411\":\"v-48fe9dd5#_33-了解哪些可视化的性能监控和故障处理工具\",\"412\":\"v-48fe9dd5#_34-jvm-的常见参数配置知道哪些\",\"413\":\"v-48fe9dd5#_35-有做过-jvm-调优吗\",\"414\":\"v-48fe9dd5#_36-线上服务-cpu-占用过高怎么排查\",\"415\":\"v-48fe9dd5#_37-内存飙高问题怎么排查\",\"416\":\"v-48fe9dd5#_38-频繁-minor-gc-怎么办\",\"417\":\"v-48fe9dd5#_39-频繁-full-gc-怎么办\",\"418\":\"v-48fe9dd5#_40-有没有处理过内存泄漏问题-是如何定位的\",\"419\":\"v-48fe9dd5#_41-有没有处理过内存溢出问题\",\"420\":\"v-48fe9dd5#四、虚拟机执行\",\"421\":\"v-48fe9dd5#_42-能说一下类的生命周期吗\",\"422\":\"v-48fe9dd5#_43-类加载的过程知道吗\",\"423\":\"v-48fe9dd5#_44-类加载器有哪些\",\"424\":\"v-48fe9dd5#_45-什么是双亲委派机制\",\"425\":\"v-48fe9dd5#_46-为什么要用双亲委派机制\",\"426\":\"v-48fe9dd5#_47-如何破坏双亲委派机制\",\"427\":\"v-48fe9dd5#_48-历史上有哪几次双亲委派机制的破坏\",\"428\":\"v-48fe9dd5#_49-你觉得应该怎么实现一个热部署功能\",\"429\":\"v-48fe9dd5#_50-tomcat-的类加载机制了解吗\",\"430\":\"v-48fe9dd5@0\",\"431\":\"v-6be6253a\",\"432\":\"v-6be6253a#基础\",\"433\":\"v-6be6253a#_1-说说什么是mybatis\",\"434\":\"v-6be6253a#_2-hibernate-和-mybatis-有什么区别\",\"435\":\"v-6be6253a#_3-mybatis使用过程-生命周期\",\"436\":\"v-6be6253a#_4-在mapper中如何传递多个参数\",\"437\":\"v-6be6253a#_5-实体类属性名和表中字段名不一样-怎么办\",\"438\":\"v-6be6253a#_6-mybatis是否可以映射enum枚举类\",\"439\":\"v-6be6253a#_7-和-的区别\",\"440\":\"v-6be6253a#_8-模糊查询like语句该怎么写\",\"441\":\"v-6be6253a#_9-mybatis能执行一对一、一对多的关联查询吗\",\"442\":\"v-6be6253a#_10-mybatis是否支持延迟加载-原理\",\"443\":\"v-6be6253a#_11-如何获取生成的主键\",\"444\":\"v-6be6253a#_12-mybatis支持动态sql吗\",\"445\":\"v-6be6253a#_13-mybatis如何执行批量操作\",\"446\":\"v-6be6253a#_14-说说mybatis的一级、二级缓存\",\"447\":\"v-6be6253a#原理\",\"448\":\"v-6be6253a#_15-能说说mybatis的工作原理吗\",\"449\":\"v-6be6253a#_16-mybatis的功能架构是什么样的\",\"450\":\"v-6be6253a#_17-为什么mapper接口不需要实现类\",\"451\":\"v-6be6253a#_18-mybatis都有哪些executor执行器\",\"452\":\"v-6be6253a#插件\",\"453\":\"v-6be6253a#_19-说说mybatis的插件运行原理-如何编写一个插件\",\"454\":\"v-6be6253a#_20-mybatis是如何进行分页的-分页插件的原理是什么\",\"455\":\"v-6be6253a@0\",\"456\":\"v-3010f198\",\"457\":\"v-3010f198#基础\",\"458\":\"v-3010f198#_1-什么是内连接、外连接、交叉连接、笛卡尔积呢\",\"459\":\"v-3010f198#_2-那-mysql-的内连接、左连接、右连接有有什么区别\",\"460\":\"v-3010f198#_3-说一下数据库的三大范式\",\"461\":\"v-3010f198#_4-varchar-与-char-的区别\",\"462\":\"v-3010f198#_5-blob-和-text-有什么区别\",\"463\":\"v-3010f198#_6-datetime-和-timestamp-的异同\",\"464\":\"v-3010f198#_7-mysql-中-in-和-exists-的区别\",\"465\":\"v-3010f198#_8-mysql-里记录货币用什么字段类型比较好\",\"466\":\"v-3010f198#_9-mysql-怎么存储-emoji😊\",\"467\":\"v-3010f198#_10-drop、delete-与-truncate-的区别\",\"468\":\"v-3010f198#_11-union-与-union-all-的区别\",\"469\":\"v-3010f198#_12-count-1-、count-与-count-列名-的区别\",\"470\":\"v-3010f198#_13-一条-sql-查询语句的执行顺序\",\"471\":\"v-3010f198#数据库架构\",\"472\":\"v-3010f198#_14-说说-mysql-的基础架构\",\"473\":\"v-3010f198#_15-一条-sql-查询语句在-mysql-中如何执行的\",\"474\":\"v-3010f198#存储引擎\",\"475\":\"v-3010f198#_16-mysql-有哪些常见存储引擎\",\"476\":\"v-3010f198#_17-那存储引擎应该怎么选择\",\"477\":\"v-3010f198#_18-innodb-和-mylsam-主要有什么区别\",\"478\":\"v-3010f198#日志\",\"479\":\"v-3010f198#_19-mysql-日志文件有哪些-分别介绍下作用\",\"480\":\"v-3010f198#_20-binlog-和-redo-log-有什么区别\",\"481\":\"v-3010f198#_21-一条更新语句怎么执行的了解吗\",\"482\":\"v-3010f198#_22-那为什么要两阶段提交呢\",\"483\":\"v-3010f198#_23-redo-log-怎么刷入磁盘的知道吗\",\"484\":\"v-3010f198#sql-优化\",\"485\":\"v-3010f198#_24-慢-sql-如何定位呢\",\"486\":\"v-3010f198#_25-有哪些方式优化慢-sql\",\"487\":\"v-3010f198#避免不必要的列\",\"488\":\"v-3010f198#分页优化\",\"489\":\"v-3010f198#索引优化\",\"490\":\"v-3010f198#join-优化\",\"491\":\"v-3010f198#排序优化\",\"492\":\"v-3010f198#union-优化\",\"493\":\"v-3010f198#_26-怎么看执行计划-explain-如何理解其中各个字段的含义\",\"494\":\"v-3010f198#索引\",\"495\":\"v-3010f198#_27-能简单说一下索引的分类吗\",\"496\":\"v-3010f198#_28-为什么使用索引会加快查询\",\"497\":\"v-3010f198#_29-创建索引有哪些注意点\",\"498\":\"v-3010f198#_30-索引哪些情况下会失效呢\",\"499\":\"v-3010f198#_31-索引不适合哪些场景呢\",\"500\":\"v-3010f198#_32-索引是不是建的越多越好呢\",\"501\":\"v-3010f198#_33-mysql-索引用的什么数据结构了解吗\",\"502\":\"v-3010f198#_34-那一棵-b-树能存储多少条数据呢\",\"503\":\"v-3010f198#_35-为什么要用-b-树-而不用普通二叉树\",\"504\":\"v-3010f198#_36-为什么用-b-树而不用-b-树呢\",\"505\":\"v-3010f198#_37-hash-索引和-b-树索引区别是什么\",\"506\":\"v-3010f198#_38-聚簇索引与非聚簇索引的区别\",\"507\":\"v-3010f198#_39-回表了解吗\",\"508\":\"v-3010f198#_40-覆盖索引了解吗\",\"509\":\"v-3010f198#_41-什么是最左前缀原则-最左匹配原则\",\"510\":\"v-3010f198#_42-什么是索引下推优化\",\"511\":\"v-3010f198#锁\",\"512\":\"v-3010f198#_43-mysql-中有哪几种锁-列举一下\",\"513\":\"v-3010f198#_44-说说-innodb-里的行锁实现\",\"514\":\"v-3010f198#_45-意向锁是什么知道吗\",\"515\":\"v-3010f198#_46-mysql-的乐观锁和悲观锁了解吗\",\"516\":\"v-3010f198#_47-mysql-遇到过死锁问题吗-你是如何解决的\",\"517\":\"v-3010f198#事务\",\"518\":\"v-3010f198#_48-mysql-事务的四大特性说一下\",\"519\":\"v-3010f198#_49-那-acid-靠什么保证的呢\",\"520\":\"v-3010f198#_50-事务的隔离级别有哪些-mysql-的默认隔离级别是什么\",\"521\":\"v-3010f198#_51-什么是幻读-脏读-不可重复读呢\",\"522\":\"v-3010f198#_52-事务的各个隔离级别都是如何实现的\",\"523\":\"v-3010f198#_53-mvcc-了解吗-怎么实现的\",\"524\":\"v-3010f198#高可用-性能\",\"525\":\"v-3010f198#_54-数据库读写分离了解吗\",\"526\":\"v-3010f198#_55-那读写分离的分配怎么实现呢\",\"527\":\"v-3010f198#_56-主从复制原理了解吗\",\"528\":\"v-3010f198#_57-主从同步延迟怎么处理\",\"529\":\"v-3010f198#_58-你们一般是怎么分库的呢\",\"530\":\"v-3010f198#_59-那你们是怎么分表的\",\"531\":\"v-3010f198#_60-水平分表有哪几种路由方式\",\"532\":\"v-3010f198#_61-不停机扩容怎么实现\",\"533\":\"v-3010f198#_62-常用的分库分表中间件有哪些\",\"534\":\"v-3010f198#_63-那你觉得分库分表会带来什么问题呢\",\"535\":\"v-3010f198#运维\",\"536\":\"v-3010f198#_64-百万级别以上的数据如何删除\",\"537\":\"v-3010f198#_65-百万千万级大表如何添加字段\",\"538\":\"v-3010f198#_66-mysql-数据库-cpu-飙升的话-要怎么处理呢\",\"539\":\"v-3010f198@0\",\"540\":\"v-3c10ec30\",\"541\":\"v-3c10ec30#基础\",\"542\":\"v-3c10ec30#_1-说下计算机网络体系结构\",\"543\":\"v-3c10ec30#_2-说一下每一层对应的网络协议有哪些\",\"544\":\"v-3c10ec30#_3-那么数据在各层之间是怎么传输的呢\",\"545\":\"v-3c10ec30#网络综合\",\"546\":\"v-3c10ec30#_4-从浏览器地址栏输入-url-到显示主页的过程\",\"547\":\"v-3c10ec30#_5-说说-dns-的解析过程\",\"548\":\"v-3c10ec30#_6-说说-websocket-与-socket-的区别\",\"549\":\"v-3c10ec30#_7-说一下你了解的端口及对应的服务\",\"550\":\"v-3c10ec30#http\",\"551\":\"v-3c10ec30#_8-说说-http-常用的状态码及其含义\",\"552\":\"v-3c10ec30#_9-http-有哪些请求方式\",\"553\":\"v-3c10ec30#_10-说一下-get-和-post-的区别\",\"554\":\"v-3c10ec30#_11-get-的长度限制是多少\",\"555\":\"v-3c10ec30#_12-http-请求的过程与原理\",\"556\":\"v-3c10ec30#_13-说一下-http-的报文结构\",\"557\":\"v-3c10ec30#_14-uri-和-url-有什么区别\",\"558\":\"v-3c10ec30#_15-说下-http-1-0-1-1-2-0-的区别\",\"559\":\"v-3c10ec30#_16-http-3-了解吗\",\"560\":\"v-3c10ec30#_17-http-如何实现长连接-在什么时候会超时\",\"561\":\"v-3c10ec30#_18-说说-http-与-https-有哪些区别\",\"562\":\"v-3c10ec30#_19-为什么要用-https-解决了哪些问题\",\"563\":\"v-3c10ec30#_20-https-工作流程是怎样的\",\"564\":\"v-3c10ec30#_21-客户端怎么去校验证书的合法性\",\"565\":\"v-3c10ec30#_22-如何理解-http-协议是无状态的\",\"566\":\"v-3c10ec30#_23-说说-session-和-cookie-有什么联系和区别\",\"567\":\"v-3c10ec30#tcp\",\"568\":\"v-3c10ec30#_24-详细说一下-tcp-的三次握手机制\",\"569\":\"v-3c10ec30#_25-tcp-握手为什么是三次-为什么不能是两次-不能是四次\",\"570\":\"v-3c10ec30#_26-三次握手中每一次没收到报文会发生什么情况\",\"571\":\"v-3c10ec30#_27-第二次握手传回了-ack-为什么还要传回-syn\",\"572\":\"v-3c10ec30#_28-第-3-次握手可以携带数据吗\",\"573\":\"v-3c10ec30#_29-说说半连接队列和-syn-flood-攻击的关系\",\"574\":\"v-3c10ec30#_30-说说-tcp-四次挥手的过程\",\"575\":\"v-3c10ec30#_31-tcp-挥手为什么需要四次呢\",\"576\":\"v-3c10ec30#_32-tcp-四次挥手过程中-为什么需要等待-2msl-才进入-closed-关闭状态\",\"577\":\"v-3c10ec30#_33-保活计时器有什么用\",\"578\":\"v-3c10ec30#_34-close-wait-和-time-wait-的状态和意义\",\"579\":\"v-3c10ec30#_35-time-wait-状态过多会导致什么问题-怎么解决\",\"580\":\"v-3c10ec30#_36-说说-tcp-报文首部的格式\",\"581\":\"v-3c10ec30#_37-tcp-是如何保证可靠性的\",\"582\":\"v-3c10ec30#_38-说说-tcp-的流量控制\",\"583\":\"v-3c10ec30#_39-详细说说-tcp-的滑动窗口\",\"584\":\"v-3c10ec30#_40-了解-nagle-算法和延迟确认吗\",\"585\":\"v-3c10ec30#_41-说说-tcp-的拥塞控制\",\"586\":\"v-3c10ec30#慢启动算法\",\"587\":\"v-3c10ec30#拥塞避免算法\",\"588\":\"v-3c10ec30#拥塞发生\",\"589\":\"v-3c10ec30#快速恢复\",\"590\":\"v-3c10ec30#_42-说说-tcp-的重传机制\",\"591\":\"v-3c10ec30#超时重传\",\"592\":\"v-3c10ec30#快速重传\",\"593\":\"v-3c10ec30#带选择确认的重传-sack\",\"594\":\"v-3c10ec30#重复-sack-d-sack\",\"595\":\"v-3c10ec30#_43-说说-tcp-的粘包和拆包\",\"596\":\"v-3c10ec30#udp\",\"597\":\"v-3c10ec30#_44-说说-tcp-和-udp-的区别\",\"598\":\"v-3c10ec30#_45-为什么-qq-采用-udp-协议\",\"599\":\"v-3c10ec30#_46-udp-协议为什么不可靠\",\"600\":\"v-3c10ec30#_47-dns-为什么要用-udp\",\"601\":\"v-3c10ec30#ip\",\"602\":\"v-3c10ec30#_48-ip-协议的定义和作用\",\"603\":\"v-3c10ec30#_49-ip-地址有哪些分类\",\"604\":\"v-3c10ec30#_50-域名和-ip-的关系-一个-ip-可以对应多个域名吗\",\"605\":\"v-3c10ec30#_51-ipv4-地址不够如何解决\",\"606\":\"v-3c10ec30#_52-说下-arp-协议的工作过程\",\"607\":\"v-3c10ec30#_53-为什么既有-ip-地址-又有-mac-地址\",\"608\":\"v-3c10ec30#_54-icmp-协议的功能\",\"609\":\"v-3c10ec30#_55-说下-ping-的原理\",\"610\":\"v-3c10ec30#网络安全\",\"611\":\"v-3c10ec30#_56-说说有哪些安全攻击\",\"612\":\"v-3c10ec30#_57-dns-劫持了解吗\",\"613\":\"v-3c10ec30#_58-什么是-csrf-攻击-如何避免\",\"614\":\"v-3c10ec30#_59-什么是-dos、ddos、drdos-攻击\",\"615\":\"v-3c10ec30#_60-什么是-xss-攻击-如何避免\",\"616\":\"v-3c10ec30#_61-对称加密与非对称加密有什么区别\",\"617\":\"v-3c10ec30#_62-rsa-和-aes-算法有什么区别\",\"618\":\"v-3c10ec30@0\",\"619\":\"v-ee5945e0\",\"620\":\"v-ee5945e0#内容体系全面\",\"621\":\"v-ee5945e0#图文并貌-深入浅出\",\"622\":\"v-ee5945e0#持续迭代-不断完善\",\"623\":\"v-ee5945e0#在线版阅读\",\"624\":\"v-ee5945e0#pdf版阅读\",\"625\":\"v-ee5945e0@0\",\"626\":\"v-6576f0d8\",\"627\":\"v-6576f0d8#引论\",\"628\":\"v-6576f0d8#_01、什么是操作系统\",\"629\":\"v-6576f0d8#_02、操作系统主要有哪些功能\",\"630\":\"v-6576f0d8#操作系统结构\",\"631\":\"v-6576f0d8#_03、什么是内核\",\"632\":\"v-6576f0d8#_04、什么是用户态和内核态\",\"633\":\"v-6576f0d8#_05、用户态和内核态是如何切换的\",\"634\":\"v-6576f0d8#进程和线程\",\"635\":\"v-6576f0d8#_06、并行和并发有什么区别\",\"636\":\"v-6576f0d8#_07、什么是进程上下文切换\",\"637\":\"v-6576f0d8#_08、进程有哪些状态\",\"638\":\"v-6576f0d8#_09、什么是僵尸进程\",\"639\":\"v-6576f0d8#_10、什么是孤儿进程\",\"640\":\"v-6576f0d8#_11、进程有哪些调度算法\",\"641\":\"v-6576f0d8#_12、进程间通信有哪些方式\",\"642\":\"v-6576f0d8#_13、进程和线程的联系和区别\",\"643\":\"v-6576f0d8#_14、线程上下文切换了解吗\",\"644\":\"v-6576f0d8#_15、线程有哪些实现方式\",\"645\":\"v-6576f0d8#_16、线程间如何同步\",\"646\":\"v-6576f0d8#_17、什么是死锁\",\"647\":\"v-6576f0d8#_18、死锁产生有哪些条件\",\"648\":\"v-6576f0d8#_19、如何避免死锁呢\",\"649\":\"v-6576f0d8#_20、活锁和饥饿锁了解吗\",\"650\":\"v-6576f0d8#内存管理\",\"651\":\"v-6576f0d8#_21、什么是虚拟内存\",\"652\":\"v-6576f0d8#_22、什么是内存分段\",\"653\":\"v-6576f0d8#_23、什么是内存分页\",\"654\":\"v-6576f0d8#_24、多级页表知道吗\",\"655\":\"v-6576f0d8#_25、什么是块表\",\"656\":\"v-6576f0d8#_26、分页和分段有什么区别\",\"657\":\"v-6576f0d8#_27、什么是交换空间\",\"658\":\"v-6576f0d8#_28、页面置换算法有哪些\",\"659\":\"v-6576f0d8#文件\",\"660\":\"v-6576f0d8#_29、硬链接和软链接有什么区别\",\"661\":\"v-6576f0d8#io\",\"662\":\"v-6576f0d8#_30、零拷贝了解吗\",\"663\":\"v-6576f0d8#_31、聊聊阻塞与非阻塞-io、-同步与异步io\",\"664\":\"v-6576f0d8#_32、详细讲一讲i-o多路复用\",\"665\":\"v-6576f0d8@0\",\"666\":\"v-669c81fb\",\"667\":\"v-669c81fb#基础\",\"668\":\"v-669c81fb#_1-说说什么是redis\",\"669\":\"v-669c81fb#_2-redis可以用来干什么\",\"670\":\"v-669c81fb#_3-redis-有哪些数据结构\",\"671\":\"v-669c81fb#_4-redis为什么快呢\",\"672\":\"v-669c81fb#_5-能说一下i-o多路复用吗\",\"673\":\"v-669c81fb#_6-redis为什么早期选择单线程\",\"674\":\"v-669c81fb#_7-redis6-0使用多线程是怎么回事\",\"675\":\"v-669c81fb#持久化\",\"676\":\"v-669c81fb#_8-redis持久化方式有哪些-有什么区别\",\"677\":\"v-669c81fb#_9-rdb-和-aof-各自有什么优缺点\",\"678\":\"v-669c81fb#_10-rdb和aof如何选择\",\"679\":\"v-669c81fb#_11-redis的数据恢复\",\"680\":\"v-669c81fb#_12-redis-4-0-的混合持久化了解吗\",\"681\":\"v-669c81fb#高可用\",\"682\":\"v-669c81fb#_13-主从复制了解吗\",\"683\":\"v-669c81fb#_14-redis主从有几种常见的拓扑结构\",\"684\":\"v-669c81fb#_15-redis的主从复制原理了解吗\",\"685\":\"v-669c81fb#_16-说说主从数据同步的方式\",\"686\":\"v-669c81fb#_17-主从复制存在哪些问题呢\",\"687\":\"v-669c81fb#_18-redis-sentinel-哨兵-了解吗\",\"688\":\"v-669c81fb#_19-redis-sentinel-哨兵-实现原理知道吗\",\"689\":\"v-669c81fb#_20-领导者sentinel节点选举了解吗\",\"690\":\"v-669c81fb#_21-新的主节点是怎样被挑选出来的\",\"691\":\"v-669c81fb#_22-redis-集群了解吗\",\"692\":\"v-669c81fb#_23-集群中数据如何分区\",\"693\":\"v-669c81fb#方案一-节点取余分区\",\"694\":\"v-669c81fb#方案二-一致性哈希分区\",\"695\":\"v-669c81fb#方案三-虚拟槽分区\",\"696\":\"v-669c81fb#_24-能说说redis集群的原理吗\",\"697\":\"v-669c81fb#集群创建\",\"698\":\"v-669c81fb#故障转移\",\"699\":\"v-669c81fb#_25-说说集群的伸缩\",\"700\":\"v-669c81fb#缓存设计\",\"701\":\"v-669c81fb#_26-什么是缓存击穿、缓存穿透、缓存雪崩\",\"702\":\"v-669c81fb#缓存击穿\",\"703\":\"v-669c81fb#缓存穿透\",\"704\":\"v-669c81fb#缓存雪崩\",\"705\":\"v-669c81fb#_27-能说说布隆过滤器吗\",\"706\":\"v-669c81fb#_28-如何保证缓存和数据库数据的一致性\",\"707\":\"v-669c81fb#选择合适的缓存更新策略\",\"708\":\"v-669c81fb#缓存不一致处理\",\"709\":\"v-669c81fb#_29-如何保证本地缓存和分布式缓存的一致\",\"710\":\"v-669c81fb#_30-怎么处理热key\",\"711\":\"v-669c81fb#_31-缓存预热怎么做呢\",\"712\":\"v-669c81fb#_32-热点key重建-问题-解决\",\"713\":\"v-669c81fb#_33-无底洞问题吗-如何解决\",\"714\":\"v-669c81fb#redis运维\",\"715\":\"v-669c81fb#_34-redis报内存不足怎么处理\",\"716\":\"v-669c81fb#_35-redis的过期数据回收策略有哪些\",\"717\":\"v-669c81fb#_36-redis有哪些内存溢出控制-内存淘汰策略\",\"718\":\"v-669c81fb#_37-redis阻塞-怎么解决\",\"719\":\"v-669c81fb#_38-大key问题了解吗\",\"720\":\"v-669c81fb#_39-redis常见性能问题和解决方案\",\"721\":\"v-669c81fb#redis应用\",\"722\":\"v-669c81fb#_40-使用redis-如何实现异步队列\",\"723\":\"v-669c81fb#_41-redis-如何实现延时队列\",\"724\":\"v-669c81fb#_42-redis-支持事务吗\",\"725\":\"v-669c81fb#_43-redis和lua脚本的使用了解吗\",\"726\":\"v-669c81fb#_44-redis的管道了解吗\",\"727\":\"v-669c81fb#_45-redis实现分布式锁了解吗\",\"728\":\"v-669c81fb#底层结构\",\"729\":\"v-669c81fb#_46-说说redis底层数据结构\",\"730\":\"v-669c81fb#_47-redis-的-sds-和-c-中字符串相比有什么优势\",\"731\":\"v-669c81fb#_48-字典是如何实现的-rehash-了解吗\",\"732\":\"v-669c81fb#_49-跳跃表是如何实现的-原理\",\"733\":\"v-669c81fb#_50-压缩列表了解吗\",\"734\":\"v-669c81fb#_51-快速列表-quicklist-了解吗\",\"735\":\"v-669c81fb#其他问题\",\"736\":\"v-669c81fb#_52-假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如何将它们全部找出来\",\"737\":\"v-669c81fb@0\",\"738\":\"v-2954d4f8\",\"739\":\"v-2954d4f8#基础\",\"740\":\"v-2954d4f8#_1-为什么要使用消息队列呢\",\"741\":\"v-2954d4f8#_2-为什么要选择rocketmq\",\"742\":\"v-2954d4f8#_3-rocketmq有什么优缺点\",\"743\":\"v-2954d4f8#_4-消息队列有哪些消息模型\",\"744\":\"v-2954d4f8#_5-那rocketmq的消息模型呢\",\"745\":\"v-2954d4f8#_6-消息的消费模式了解吗\",\"746\":\"v-2954d4f8#_7-roctetmq基本架构了解吗\",\"747\":\"v-2954d4f8#_8-那能介绍一下这四部分吗\",\"748\":\"v-2954d4f8#nameserver\",\"749\":\"v-2954d4f8#broker\",\"750\":\"v-2954d4f8#producer\",\"751\":\"v-2954d4f8#consumer\",\"752\":\"v-2954d4f8#进阶\",\"753\":\"v-2954d4f8#_9-如何保证消息的可用性-可靠性-不丢失呢\",\"754\":\"v-2954d4f8#生产\",\"755\":\"v-2954d4f8#存储\",\"756\":\"v-2954d4f8#消费\",\"757\":\"v-2954d4f8#_10-如何处理消息重复的问题呢\",\"758\":\"v-2954d4f8#_11-怎么处理消息积压\",\"759\":\"v-2954d4f8#_12-顺序消息如何实现\",\"760\":\"v-2954d4f8#部分顺序消息\",\"761\":\"v-2954d4f8#全局顺序消息\",\"762\":\"v-2954d4f8#_13-如何实现消息过滤\",\"763\":\"v-2954d4f8#_14-延时消息了解吗\",\"764\":\"v-2954d4f8#rocketmq怎么实现延时消息的\",\"765\":\"v-2954d4f8#_15-怎么实现分布式消息事务的-半消息\",\"766\":\"v-2954d4f8#_16-死信队列知道吗\",\"767\":\"v-2954d4f8#_17-如何保证rocketmq的高可用\",\"768\":\"v-2954d4f8#原理\",\"769\":\"v-2954d4f8#_18-说一下rocketmq的整体工作流程\",\"770\":\"v-2954d4f8#_19-为什么rocketmq不使用zookeeper作为注册中心呢\",\"771\":\"v-2954d4f8#_20-broker是怎么保存数据的呢\",\"772\":\"v-2954d4f8#_21-说说rocketmq怎么对文件进行读写的\",\"773\":\"v-2954d4f8#说说什么是零拷贝\",\"774\":\"v-2954d4f8#_22-消息刷盘怎么实现的呢\",\"775\":\"v-2954d4f8#_22-能说下-rocketmq-的负载均衡是如何实现的\",\"776\":\"v-2954d4f8#producer的负载均衡\",\"777\":\"v-2954d4f8#consumer的负载均衡\",\"778\":\"v-2954d4f8#_23-rocketmq消息长轮询了解吗\",\"779\":\"v-2954d4f8@0\",\"780\":\"v-1b667662\",\"781\":\"v-1b667662#基础\",\"782\":\"v-1b667662#_1-spring-是什么-特性-有哪些模块\",\"783\":\"v-1b667662#_2-spring-有哪些模块呢\",\"784\":\"v-1b667662#_3-spring-有哪些常用注解呢\",\"785\":\"v-1b667662#_4-spring-中应用了哪些设计模式呢\",\"786\":\"v-1b667662#ioc\",\"787\":\"v-1b667662#_5-说一说什么是-ioc-什么是-di\",\"788\":\"v-1b667662#_6-能简单说一下-spring-ioc-的实现机制吗\",\"789\":\"v-1b667662#_7-说说-beanfactory-和-applicantcontext\",\"790\":\"v-1b667662#beanfactory-接口\",\"791\":\"v-1b667662#applicationcontext-接口\",\"792\":\"v-1b667662#_8-你知道-spring-容器启动阶段会干什么吗\",\"793\":\"v-1b667662#_9-能说一下-spring-bean-生命周期吗\",\"794\":\"v-1b667662#_10-bean-定义和依赖定义有哪些方式\",\"795\":\"v-1b667662#_11-有哪些依赖注入的方法\",\"796\":\"v-1b667662#_12-spring-有哪些自动装配的方式\",\"797\":\"v-1b667662#_13-spring-中的-bean-的作用域有哪些\",\"798\":\"v-1b667662#_14-spring-中的单例-bean-会存在线程安全问题吗\",\"799\":\"v-1b667662#_15-说说循环依赖\",\"800\":\"v-1b667662#_16-那-spring-怎么解决循环依赖的呢\",\"801\":\"v-1b667662#_17-为什么要三级缓存-二级不行吗\",\"802\":\"v-1b667662#_18-autowired-的实现原理\",\"803\":\"v-1b667662#aop\",\"804\":\"v-1b667662#_19-说说什么是-aop\",\"805\":\"v-1b667662#_20-说说你平时有用到-aop-吗\",\"806\":\"v-1b667662#_21-说说-jdk-动态代理和-cglib-代理\",\"807\":\"v-1b667662#_22-说说-spring-aop-和-aspectj-aop-区别\",\"808\":\"v-1b667662#事务\",\"809\":\"v-1b667662#_23-spring-事务的种类\",\"810\":\"v-1b667662#_24-spring-的事务隔离级别\",\"811\":\"v-1b667662#_25-spring-的事务传播机制\",\"812\":\"v-1b667662#_26-声明式事务实现原理了解吗\",\"813\":\"v-1b667662#_27-声明式事务在哪些情况下会失效\",\"814\":\"v-1b667662#mvc\",\"815\":\"v-1b667662#_28-spring-mvc-的核心组件\",\"816\":\"v-1b667662#_29-spring-mvc-的工作流程\",\"817\":\"v-1b667662#_30-springmvc-restful-风格的接口的流程是什么样的呢\",\"818\":\"v-1b667662#spring-boot\",\"819\":\"v-1b667662#_31-介绍一下-springboot-有哪些优点\",\"820\":\"v-1b667662#_32-springboot-自动配置原理了解吗\",\"821\":\"v-1b667662#_33-如何自定义一个-springboot-srarter\",\"822\":\"v-1b667662#_34-springboot-启动原理\",\"823\":\"v-1b667662#spring-cloud\",\"824\":\"v-1b667662#_35-对-springcloud-了解多少\",\"825\":\"v-1b667662@0\",\"826\":\"v-5859ca8e\",\"827\":\"v-5859ca8e#概览\",\"828\":\"v-5859ca8e#_1-什么是微服务\",\"829\":\"v-5859ca8e#_2-微服务带来了哪些挑战\",\"830\":\"v-5859ca8e#_3-现在有哪些流行的微服务解决方案\",\"831\":\"v-5859ca8e#这三种方案有什么区别吗\",\"832\":\"v-5859ca8e#_4-说下微服务有哪些组件\",\"833\":\"v-5859ca8e#注册中心\",\"834\":\"v-5859ca8e#_5-注册中心是用来干什么的\",\"835\":\"v-5859ca8e#_6-springcloud可以选择哪些注册中心\",\"836\":\"v-5859ca8e#_7-说下eureka、zookeeper、nacos的区别\",\"837\":\"v-5859ca8e#_8-eureka实现原理了解吗\",\"838\":\"v-5859ca8e#_9-eureka-server怎么保证高可用\",\"839\":\"v-5859ca8e#配置中心\",\"840\":\"v-5859ca8e#_10-为什么微服务需要配置中心\",\"841\":\"v-5859ca8e#_11-springcloud可以选择哪些配置中心\",\"842\":\"v-5859ca8e#_12-nacos配置中心的原理了解吗\",\"843\":\"v-5859ca8e#_13-nacos配置中心长轮询机制\",\"844\":\"v-5859ca8e#远程调用\",\"845\":\"v-5859ca8e#_14-能说下http和rpc的区别吗\",\"846\":\"v-5859ca8e#_15-那feign和dubbo的区别呢\",\"847\":\"v-5859ca8e#_16-说一下fegin\",\"848\":\"v-5859ca8e#_17-为什么feign第一次调用耗时很长\",\"849\":\"v-5859ca8e#_18-feign怎么实现认证传递\",\"850\":\"v-5859ca8e#_19-fegin怎么做负载均衡-ribbon\",\"851\":\"v-5859ca8e#_20-说说有哪些负载均衡算法\",\"852\":\"v-5859ca8e#服务容灾\",\"853\":\"v-5859ca8e#_21-什么是服务雪崩\",\"854\":\"v-5859ca8e#_22-什么是服务熔断-什么是服务降级\",\"855\":\"v-5859ca8e#什么是服务熔断\",\"856\":\"v-5859ca8e#什么是服务降级\",\"857\":\"v-5859ca8e#有哪些熔断降级方案实现\",\"858\":\"v-5859ca8e#_23-hystrix怎么实现服务容错\",\"859\":\"v-5859ca8e#_24-sentinel怎么实现限流的\",\"860\":\"v-5859ca8e#sentinel采用的什么限流算法\",\"861\":\"v-5859ca8e#sentinel怎么实现集群限流\",\"862\":\"v-5859ca8e#服务网关\",\"863\":\"v-5859ca8e#_25-什么是api网关\",\"864\":\"v-5859ca8e#_26-springcloud可以选择哪些api网关\",\"865\":\"v-5859ca8e#_27-spring-cloud-gateway核心概念\",\"866\":\"v-5859ca8e#链路追踪\",\"867\":\"v-5859ca8e#_28-为什么要用微服务链路追踪\",\"868\":\"v-5859ca8e#_29-springcloud可以选择哪些微服务链路追踪方案\",\"869\":\"v-5859ca8e#分布式事务\",\"870\":\"v-5859ca8e#_30-seata支持哪些模式的分布式事务\",\"871\":\"v-5859ca8e#_31-了解seata的实现原理吗\",\"872\":\"v-5859ca8e#seata的事务执行流程是什么样的\",\"873\":\"v-5859ca8e#全局事务id和分支事务id是怎么传递的\",\"874\":\"v-5859ca8e#seata的事务回滚是怎么实现的\",\"875\":\"v-5859ca8e#服务监控\",\"876\":\"v-5859ca8e#_32-你们的服务怎么做监控和告警\",\"877\":\"v-5859ca8e#_33-你们的服务怎么做日志收集\",\"878\":\"v-5859ca8e@0\",\"879\":\"v-5f1c7322\",\"880\":\"v-5f1c7322@0\",\"881\":\"v-5f1c7322@1\",\"882\":\"v-3706649a\",\"883\":\"v-3706649a@0\",\"884\":\"v-4941c9b9\",\"885\":\"v-4941c9b9@0\",\"886\":\"v-55e9fa04\",\"887\":\"v-55e9fa04@0\",\"888\":\"v-403eec06\",\"889\":\"v-403eec06@0\",\"890\":\"v-5bc93818\",\"891\":\"v-5bc93818@0\",\"892\":\"v-744d024e\",\"893\":\"v-744d024e@0\",\"894\":\"v-e52c881c\",\"895\":\"v-e52c881c@0\",\"896\":\"v-154dc4c4\",\"897\":\"v-154dc4c4@0\",\"898\":\"v-01560935\",\"899\":\"v-01560935@0\",\"900\":\"v-3c5d437a\",\"901\":\"v-3c5d437a@0\",\"902\":\"v-7329824f\",\"903\":\"v-7329824f@0\",\"904\":\"v-3b751c43\",\"905\":\"v-3b751c43@0\",\"906\":\"v-200bf6bc\",\"907\":\"v-200bf6bc@0\",\"908\":\"v-76756920\",\"909\":\"v-76756920@0\",\"910\":\"v-7661d21a\",\"911\":\"v-7661d21a@0\",\"912\":\"v-288e2c56\",\"913\":\"v-288e2c56@0\",\"914\":\"v-3b951558\",\"915\":\"v-3b951558@0\",\"916\":\"v-95f987f4\",\"917\":\"v-95f987f4@0\",\"918\":\"v-9a117b1e\",\"919\":\"v-9a117b1e@0\",\"920\":\"v-284efd1e\",\"921\":\"v-284efd1e@0\",\"922\":\"v-bb770ec4\",\"923\":\"v-bb770ec4@0\",\"924\":\"v-28a1d8bf\",\"925\":\"v-28a1d8bf@0\",\"926\":\"v-245f5676\",\"927\":\"v-245f5676@0\",\"928\":\"v-72049510\",\"929\":\"v-72049510@0\",\"930\":\"v-11d4e5d0\",\"931\":\"v-11d4e5d0@0\",\"932\":\"v-6ebee387\",\"933\":\"v-6ebee387@0\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,8],\"1\":[null,null,3],\"2\":[1,2],\"3\":[null,null,3],\"4\":[1,2],\"5\":[1,5],\"6\":[1,2],\"7\":[1,12],\"8\":[1,4],\"9\":[1,4],\"10\":[2,11],\"11\":[1,11],\"12\":[1,12],\"13\":[1,18],\"14\":[1,8],\"15\":[1,1],\"16\":[1,7],\"17\":[1,7],\"18\":[1],\"19\":[1,5],\"20\":[1,1],\"21\":[1,6],\"22\":[1],\"23\":[2,10],\"24\":[1],\"25\":[2,9],\"26\":[1],\"27\":[1,8],\"28\":[1],\"29\":[1,9],\"30\":[1,1],\"31\":[1,15],\"32\":[1],\"33\":[1,8],\"34\":[1,1],\"35\":[1],\"36\":[1,20],\"37\":[1],\"38\":[1,6],\"39\":[1],\"40\":[1,6],\"41\":[1],\"42\":[1,9],\"43\":[1,2],\"44\":[null,null,3],\"45\":[1],\"46\":[null,null,3],\"47\":[1],\"48\":[1,1],\"49\":[1,6],\"50\":[1,3],\"51\":[null,null,3],\"52\":[null,null,2],\"53\":[1,14],\"54\":[null,null,3],\"55\":[null,null,1],\"56\":[1],\"57\":[null,null,3],\"58\":[null,null,1],\"59\":[1,8],\"60\":[null,null,3],\"61\":[null,null,1],\"62\":[1],\"63\":[null,null,3],\"64\":[1,3611],\"65\":[null,null,3],\"66\":[null,null,1],\"67\":[1,2],\"68\":[null,null,3],\"69\":[null,null,3],\"70\":[3,3],\"71\":[1],\"72\":[2,31],\"73\":[2,17],\"74\":[2,13],\"75\":[1],\"76\":[1,27],\"77\":[null,null,3],\"78\":[null,null,1],\"79\":[1],\"80\":[null,null,3],\"81\":[null,null,2],\"82\":[1],\"83\":[null,null,3],\"84\":[null,null,2],\"85\":[3],\"86\":[1,54],\"87\":[1,48],\"88\":[1,54],\"89\":[1,74],\"90\":[3,73],\"91\":[3,73],\"92\":[null,null,3],\"93\":[null,null,1],\"94\":[3],\"95\":[1,17],\"96\":[1,16],\"97\":[2,19],\"98\":[null,null,3],\"99\":[null,null,1],\"100\":[1],\"101\":[null,null,3],\"102\":[null,null,2],\"103\":[1],\"104\":[null,null,3],\"105\":[null,null,2],\"106\":[1,7],\"107\":[1,12],\"108\":[1,1],\"109\":[1],\"110\":[1,3],\"111\":[1,4],\"112\":[1],\"113\":[1,12],\"114\":[1],\"115\":[2,14],\"116\":[1,6],\"117\":[null,null,3],\"118\":[null,null,1],\"119\":[1],\"120\":[null,null,3],\"121\":[null,null,2],\"122\":[1],\"123\":[null,null,3],\"124\":[null,null,2],\"125\":[1,14],\"126\":[null,null,3],\"127\":[null,null,2],\"128\":[1,14],\"129\":[null,null,3],\"130\":[null,null,2],\"131\":[1,1],\"132\":[null,null,3],\"133\":[null,null,3],\"134\":[1,1],\"135\":[null,null,3],\"136\":[null,null,3],\"137\":[1,220],\"138\":[null,null,3],\"139\":[null,null,3],\"140\":[1,220],\"141\":[null,null,3],\"142\":[null,null,3],\"143\":[1],\"144\":[null,null,3],\"145\":[1],\"146\":[null,null,3],\"147\":[1,220],\"148\":[null,null,3],\"149\":[null,null,3],\"150\":[1,23],\"151\":[1],\"152\":[3,19],\"153\":[1,5],\"154\":[3,59],\"155\":[3,13],\"156\":[4,15],\"157\":[8,65],\"158\":[3,23],\"159\":[3,52],\"160\":[1,7],\"161\":[3,23],\"162\":[5,29],\"163\":[3,7],\"164\":[3,41],\"165\":[3,12],\"166\":[4,23],\"167\":[4,85],\"168\":[3,34],\"169\":[7,59],\"170\":[3,26],\"171\":[3,27],\"172\":[3,26],\"173\":[5,41],\"174\":[3,34],\"175\":[5,58],\"176\":[3,17],\"177\":[5,49],\"178\":[3,26],\"179\":[3,5],\"180\":[2,38],\"181\":[3,116],\"182\":[4,9],\"183\":[5,18],\"184\":[5,19],\"185\":[1,3],\"186\":[3,120],\"187\":[null,null,3],\"188\":[1,20],\"189\":[1],\"190\":[3,21],\"191\":[3,46],\"192\":[3,52],\"193\":[3,82],\"194\":[1,4],\"195\":[3,5],\"196\":[4,16],\"197\":[4,21],\"198\":[4,68],\"199\":[1],\"200\":[3,13],\"201\":[3,10],\"202\":[4,60],\"203\":[6,41],\"204\":[4,43],\"205\":[4,35],\"206\":[4,35],\"207\":[4,27],\"208\":[4,93],\"209\":[1],\"210\":[3,13],\"211\":[2,10],\"212\":[2],\"213\":[1,22],\"214\":[1,8],\"215\":[3,28],\"216\":[3,18],\"217\":[3,17],\"218\":[3],\"219\":[2,22],\"220\":[2],\"221\":[1,34],\"222\":[1,84],\"223\":[1],\"224\":[3,39],\"225\":[2,125],\"226\":[1],\"227\":[3,118],\"228\":[null,null,3],\"229\":[1,19],\"230\":[2],\"231\":[4,18],\"232\":[4,34],\"233\":[7,41],\"234\":[3,15],\"235\":[4,28],\"236\":[6,71],\"237\":[1],\"238\":[4,46],\"239\":[5,54],\"240\":[4,12],\"241\":[4,39],\"242\":[8,25],\"243\":[6,15],\"244\":[6,7],\"245\":[4,124],\"246\":[1],\"247\":[3,16],\"248\":[2,29],\"249\":[7,24],\"250\":[9,28],\"251\":[4,24],\"252\":[8,56],\"253\":[3,36],\"254\":[5,33],\"255\":[4,25],\"256\":[6,45],\"257\":[5,54],\"258\":[5,77],\"259\":[5,15],\"260\":[3,34],\"261\":[4,57],\"262\":[1],\"263\":[7,30],\"264\":[7,16],\"265\":[10,33],\"266\":[5,99],\"267\":[4,85],\"268\":[1],\"269\":[11,85],\"270\":[7,102],\"271\":[1],\"272\":[4,111],\"273\":[1],\"274\":[4,22],\"275\":[3,33],\"276\":[2,70],\"277\":[2],\"278\":[6,39],\"279\":[4,15],\"280\":[5,78],\"281\":[1],\"282\":[4,67],\"283\":[3,36],\"284\":[1],\"285\":[6,151],\"286\":[1],\"287\":[3,56],\"288\":[1],\"289\":[5,62],\"290\":[3,12],\"291\":[5,66],\"292\":[4,60],\"293\":[4,37],\"294\":[4,194],\"295\":[null,null,3],\"296\":[1,23],\"297\":[1],\"298\":[3,19],\"299\":[3,28],\"300\":[3,69],\"301\":[6,12],\"302\":[3,95],\"303\":[3,34],\"304\":[3,13],\"305\":[3,27],\"306\":[3,104],\"307\":[1,8],\"308\":[3,28],\"309\":[3,29],\"310\":[3,87],\"311\":[4,54],\"312\":[3,47],\"313\":[3,32],\"314\":[3,60],\"315\":[3,93],\"316\":[1],\"317\":[5,39],\"318\":[5,44],\"319\":[3,38],\"320\":[5,50],\"321\":[6,52],\"322\":[3,77],\"323\":[1],\"324\":[4,50],\"325\":[3,131],\"326\":[6,44],\"327\":[4,67],\"328\":[2,46],\"329\":[2,41],\"330\":[3,46],\"331\":[3,68],\"332\":[4,60],\"333\":[3,51],\"334\":[4,23],\"335\":[5,2],\"336\":[2,31],\"337\":[1,11],\"338\":[1,10],\"339\":[5,10],\"340\":[3,78],\"341\":[4,31],\"342\":[4,63],\"343\":[3,52],\"344\":[1],\"345\":[5,103],\"346\":[5,52],\"347\":[3,36],\"348\":[5,104],\"349\":[4,121],\"350\":[1],\"351\":[3,22],\"352\":[3,42],\"353\":[3,87],\"354\":[3,52],\"355\":[3,16],\"356\":[3,34],\"357\":[3,40],\"358\":[3,33],\"359\":[3,37],\"360\":[3,16],\"361\":[3,2],\"362\":[1,37],\"363\":[1,37],\"364\":[1,57],\"365\":[1,41],\"366\":[3,9],\"367\":[3,42],\"368\":[3,15],\"369\":[2,15],\"370\":[3,20],\"371\":[3,12],\"372\":[1,6],\"373\":[4,197],\"374\":[null,null,3],\"375\":[1,25],\"376\":[2],\"377\":[4,23],\"378\":[2],\"379\":[5,93],\"380\":[9,18],\"381\":[3,70],\"382\":[3,26],\"383\":[4,28],\"384\":[8,37],\"385\":[3,42],\"386\":[3,39],\"387\":[3,13],\"388\":[3,67],\"389\":[3,106],\"390\":[3,32],\"391\":[7,12],\"392\":[3,65],\"393\":[5,28],\"394\":[4,22],\"395\":[3,61],\"396\":[3,23],\"397\":[10,28],\"398\":[6,10],\"399\":[5,49],\"400\":[3,39],\"401\":[3,69],\"402\":[8,48],\"403\":[5,32],\"404\":[4,74],\"405\":[6,29],\"406\":[4,58],\"407\":[3,28],\"408\":[4,101],\"409\":[3],\"410\":[3,31],\"411\":[3,27],\"412\":[4,70],\"413\":[5,96],\"414\":[5,47],\"415\":[3,51],\"416\":[6,13],\"417\":[6,104],\"418\":[4,172],\"419\":[3,43],\"420\":[2],\"421\":[3,21],\"422\":[3,31],\"423\":[3,36],\"424\":[3,9],\"425\":[3,23],\"426\":[3,11],\"427\":[3,95],\"428\":[3,66],\"429\":[4,116],\"430\":[null,null,3],\"431\":[1,30],\"432\":[1],\"433\":[3,82],\"434\":[6,58],\"435\":[4,92],\"436\":[3,64],\"437\":[4,46],\"438\":[3,14],\"439\":[4,23],\"440\":[3,49],\"441\":[4,101],\"442\":[4,29],\"443\":[3,29],\"444\":[3,96],\"445\":[3,166],\"446\":[4,73],\"447\":[1],\"448\":[3,198],\"449\":[3,19],\"450\":[3,121],\"451\":[3,92],\"452\":[1],\"453\":[4,89],\"454\":[4,98],\"455\":[null,null,3],\"456\":[1,24],\"457\":[1,15],\"458\":[6,46],\"459\":[7,18],\"460\":[3,39],\"461\":[6,39],\"462\":[6,8],\"463\":[6,58],\"464\":[8,37],\"465\":[4,38],\"466\":[5,30],\"467\":[7,26],\"468\":[6,11],\"469\":[7,37],\"470\":[5,76],\"471\":[1],\"472\":[5,36],\"473\":[7,63],\"474\":[1],\"475\":[4,31],\"476\":[3,30],\"477\":[6,115],\"478\":[1],\"479\":[5,64],\"480\":[7,30],\"481\":[3,66],\"482\":[3,48],\"483\":[5,116],\"484\":[2],\"485\":[5,21],\"486\":[4,7],\"487\":[1,9],\"488\":[1,38],\"489\":[1,98],\"490\":[2,54],\"491\":[1,34],\"492\":[2,27],\"493\":[5,176],\"494\":[1,5],\"495\":[3,20],\"496\":[3,18],\"497\":[3,55],\"498\":[3,34],\"499\":[3,5],\"500\":[3,9],\"501\":[4,43],\"502\":[4,48],\"503\":[6,27],\"504\":[7,35],\"505\":[6,21],\"506\":[3,23],\"507\":[3,17],\"508\":[3,16],\"509\":[4,66],\"510\":[3,95],\"511\":[1],\"512\":[5,40],\"513\":[5,124],\"514\":[3,27],\"515\":[4,49],\"516\":[5,62],\"517\":[1],\"518\":[4,28],\"519\":[5,130],\"520\":[5,13],\"521\":[5,38],\"522\":[3,27],\"523\":[5,172],\"524\":[2],\"525\":[3,13],\"526\":[3,36],\"527\":[3,26],\"528\":[3,55],\"529\":[3,12],\"530\":[3,13],\"531\":[3,100],\"532\":[3,27],\"533\":[3,3],\"534\":[3,127],\"535\":[1],\"536\":[3,20],\"537\":[3,31],\"538\":[7,120],\"539\":[null,null,3],\"540\":[1,32],\"541\":[1],\"542\":[2,73],\"543\":[3,2],\"544\":[3,71],\"545\":[1],\"546\":[5,33],\"547\":[5,38],\"548\":[7,26],\"549\":[3,39],\"550\":[1],\"551\":[5,37],\"552\":[4,10],\"553\":[7,57],\"554\":[4,35],\"555\":[4,22],\"556\":[5,105],\"557\":[6,45],\"558\":[8,58],\"559\":[5,55],\"560\":[5,75],\"561\":[7,32],\"562\":[5,33],\"563\":[4,37],\"564\":[3,62],\"565\":[5,18],\"566\":[7,166],\"567\":[1],\"568\":[4,72],\"569\":[6,54],\"570\":[3,35],\"571\":[6,7],\"572\":[5,19],\"573\":[6,90],\"574\":[5,87],\"575\":[4,24],\"576\":[9,66],\"577\":[3,28],\"578\":[7,43],\"579\":[6,28],\"580\":[5,80],\"581\":[4,56],\"582\":[5,60],\"583\":[5,73],\"584\":[5,75],\"585\":[5,65],\"586\":[1,61],\"587\":[1,34],\"588\":[1,32],\"589\":[1,33],\"590\":[5,7],\"591\":[1,98],\"592\":[1,76],\"593\":[3,25],\"594\":[4,47],\"595\":[5,80],\"596\":[1,6],\"597\":[7,40],\"598\":[7,51],\"599\":[4,19],\"600\":[5,67],\"601\":[1],\"602\":[4,53],\"603\":[4,40],\"604\":[7,24],\"605\":[4,63],\"606\":[5,60],\"607\":[7,54],\"608\":[4,25],\"609\":[5,104],\"610\":[1],\"611\":[3,27],\"612\":[4,56],\"613\":[6,61],\"614\":[7,62],\"615\":[6,69],\"616\":[3,17],\"617\":[6,88],\"618\":[null,null,3],\"619\":[1,15],\"620\":[1,37],\"621\":[2,42],\"622\":[2,30],\"623\":[1,38],\"624\":[1,26],\"625\":[null,null,3],\"626\":[1,22],\"627\":[1],\"628\":[3,6],\"629\":[3,60],\"630\":[1],\"631\":[3,6],\"632\":[3,21],\"633\":[3,56],\"634\":[1],\"635\":[3,19],\"636\":[3,20],\"637\":[3,29],\"638\":[3,13],\"639\":[3,17],\"640\":[3,57],\"641\":[3,147],\"642\":[3,35],\"643\":[3,13],\"644\":[3,17],\"645\":[3,75],\"646\":[3,8],\"647\":[3,35],\"648\":[3,27],\"649\":[3,55],\"650\":[1],\"651\":[3,22],\"652\":[3,23],\"653\":[3,15],\"654\":[3,12],\"655\":[3,23],\"656\":[3,15],\"657\":[3,22],\"658\":[3,127],\"659\":[1],\"660\":[3,23],\"661\":[1],\"662\":[3,50],\"663\":[5,79],\"664\":[4,206],\"665\":[null,null,3],\"666\":[1,24],\"667\":[1],\"668\":[3,39],\"669\":[3,42],\"670\":[4,55],\"671\":[3,15],\"672\":[4,53],\"673\":[3,31],\"674\":[4,48],\"675\":[1],\"676\":[4,71],\"677\":[6,50],\"678\":[3,37],\"679\":[3,21],\"680\":[6,80],\"681\":[1,5],\"682\":[3,54],\"683\":[3,24],\"684\":[3,25],\"685\":[3,77],\"686\":[3,13],\"687\":[6,51],\"688\":[6,56],\"689\":[3,26],\"690\":[3,24],\"691\":[4,23],\"692\":[3,4],\"693\":[2,17],\"694\":[2,42],\"695\":[2,44],\"696\":[3,3],\"697\":[1,29],\"698\":[1,70],\"699\":[3,54],\"700\":[1],\"701\":[5,4],\"702\":[1,15],\"703\":[1,44],\"704\":[1,40],\"705\":[3,22],\"706\":[3,6],\"707\":[1,32],\"708\":[1,46],\"709\":[3,40],\"710\":[3,43],\"711\":[3,12],\"712\":[5,47],\"713\":[4,80],\"714\":[1],\"715\":[3,18],\"716\":[3,15],\"717\":[4,31],\"718\":[4,80],\"719\":[3,57],\"720\":[3,86],\"721\":[1],\"722\":[4,36],\"723\":[4,15],\"724\":[4,56],\"725\":[3,50],\"726\":[3,54],\"727\":[3,120],\"728\":[1,4],\"729\":[3,78],\"730\":[8,80],\"731\":[5,56],\"732\":[4,88],\"733\":[3,19],\"734\":[5,72],\"735\":[1],\"736\":[5,91],\"737\":[null,null,3],\"738\":[1,23],\"739\":[1],\"740\":[3,40],\"741\":[3,42],\"742\":[3,34],\"743\":[3,47],\"744\":[3,99],\"745\":[3,12],\"746\":[3,18],\"747\":[3,17],\"748\":[1,36],\"749\":[1,23],\"750\":[1,27],\"751\":[1,65],\"752\":[1],\"753\":[5,7],\"754\":[1,21],\"755\":[1,29],\"756\":[1,12],\"757\":[3,36],\"758\":[3,27],\"759\":[3,17],\"760\":[1,20],\"761\":[1,30],\"762\":[3,78],\"763\":[3,62],\"764\":[2,15],\"765\":[4,59],\"766\":[3,38],\"767\":[3,100],\"768\":[1],\"769\":[3,31],\"770\":[3,43],\"771\":[3,101],\"772\":[3,48],\"773\":[2,17],\"774\":[3,27],\"775\":[5,4],\"776\":[1,26],\"777\":[1,122],\"778\":[3,181],\"779\":[null,null,3],\"780\":[1,24],\"781\":[1],\"782\":[6,80],\"783\":[4,51],\"784\":[4,171],\"785\":[4,84],\"786\":[1],\"787\":[6,39],\"788\":[6,232],\"789\":[6,21],\"790\":[2,54],\"791\":[2,65],\"792\":[5,30],\"793\":[6,213],\"794\":[4,18],\"795\":[3,94],\"796\":[4,70],\"797\":[6,40],\"798\":[6,54],\"799\":[3,49],\"800\":[5,89],\"801\":[4,28],\"802\":[4,152],\"803\":[1],\"804\":[4,108],\"805\":[5,168],\"806\":[7,138],\"807\":[8,113],\"808\":[1,8],\"809\":[4,26],\"810\":[4,21],\"811\":[4,33],\"812\":[3,49],\"813\":[3,210],\"814\":[1],\"815\":[5,55],\"816\":[5,46],\"817\":[5,127],\"818\":[2],\"819\":[5,72],\"820\":[4,91],\"821\":[5,94],\"822\":[4,18],\"823\":[2],\"824\":[5,137],\"825\":[null,null,3],\"826\":[1,24],\"827\":[1],\"828\":[3,64],\"829\":[3,48],\"830\":[3,67],\"831\":[2,88],\"832\":[3,101],\"833\":[1],\"834\":[3,29],\"835\":[3,45],\"836\":[5,60],\"837\":[3,37],\"838\":[4,69],\"839\":[1],\"840\":[3,12],\"841\":[3,41],\"842\":[3,27],\"843\":[3,84],\"844\":[1],\"845\":[3,73],\"846\":[3,49],\"847\":[3,44],\"848\":[3,21],\"849\":[3,34],\"850\":[4,9],\"851\":[3,87],\"852\":[1],\"853\":[3,27],\"854\":[4],\"855\":[2,14],\"856\":[2,13],\"857\":[2,32],\"858\":[3,80],\"859\":[3,78],\"860\":[2,8],\"861\":[2,48],\"862\":[1],\"863\":[3,50],\"864\":[3,52],\"865\":[5,100],\"866\":[1],\"867\":[3,14],\"868\":[3,94],\"869\":[1,2],\"870\":[3,43],\"871\":[3,57],\"872\":[2,45],\"873\":[2,5],\"874\":[2,50],\"875\":[1],\"876\":[3,15],\"877\":[3,136],\"878\":[null,null,3],\"879\":[1,220],\"880\":[null,null,3],\"881\":[null,null,3],\"882\":[1],\"883\":[null,null,3],\"884\":[1],\"885\":[null,null,3],\"886\":[1],\"887\":[null,null,3],\"888\":[1],\"889\":[null,null,3],\"890\":[1],\"891\":[null,null,3],\"892\":[1],\"893\":[null,null,3],\"894\":[1],\"895\":[null,null,3],\"896\":[1],\"897\":[null,null,3],\"898\":[1],\"899\":[null,null,3],\"900\":[2],\"901\":[null,null,3],\"902\":[2],\"903\":[null,null,3],\"904\":[2],\"905\":[null,null,3],\"906\":[2],\"907\":[null,null,3],\"908\":[2],\"909\":[null,null,3],\"910\":[2],\"911\":[null,null,3],\"912\":[2],\"913\":[null,null,3],\"914\":[2],\"915\":[null,null,3],\"916\":[2],\"917\":[null,null,3],\"918\":[2],\"919\":[null,null,3],\"920\":[2],\"921\":[null,null,3],\"922\":[2],\"923\":[null,null,3],\"924\":[2],\"925\":[null,null,3],\"926\":[2],\"927\":[null,null,3],\"928\":[2],\"929\":[null,null,3],\"930\":[2],\"931\":[null,null,3],\"932\":[2],\"933\":[null,null,3]},\"averageFieldLength\":[2.9600192618831076,49.81515355648551,2.195030596199004],\"storedFields\":{\"0\":{\"h\":\"介绍\",\"t\":[\"双子座 女 现居杭州 Java开发\\n喜欢前后端编码，喜欢看电视，喜欢听音乐.\"]},\"1\":{\"c\":[{\"icon\":\"circle-info\",\"cover\":\"/assets/images/cover3.jpg\",\"description\":\"介绍 双子座 女 现居杭州 Java开发 喜欢前后端编码，喜欢看电视，喜欢听音乐.\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/intro.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"介绍\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"介绍 双子座 女 现居杭州 Java开发 喜欢前后端编码，喜欢看电视，喜欢听音乐.\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/assets/images/cover3.jpg\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-11-21T15:30:21.000Z\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"介绍\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-11-21T15:30:21.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"介绍\\\",\\\"image\\\":[\\\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/assets/images/cover3.jpg\\\"],\\\"dateModified\\\":\\\"2023-11-21T15:30:21.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"2\":{\"h\":\"博客主页\",\"t\":[\"博客主页。\"]},\"3\":{\"c\":[{\"home\":true,\"layout\":\"BlogHome\",\"icon\":\"home\",\"title\":\"博客主页\",\"heroImage\":\"/logo.png\",\"bgImage\":\"/leaves-bg.jpg\",\"heroText\":\"Rui Blog\",\"heroFullScreen\":true,\"tagline\":\"好好生活，保持热爱\",\"projects\":[{\"icon\":\"project\",\"name\":\"项目目录\",\"desc\":\"用于分享技术，资源(暂时不填)\",\"link\":\"https://huang-ruifang.gitee.io/hrf-blog\"},{\"icon\":\"link\",\"name\":\"Hrf Blog\",\"desc\":\"使用hexo搭建的博客项目\",\"link\":\"https://hrf-666.github.io\"},{\"icon\":\"link\",\"name\":\"Rui Blog\",\"desc\":\"使用vuepress主题搭建的博客\",\"link\":\"https://huang-ruifang.gitee.io/hrf-blog\"},{\"icon\":\"book\",\"name\":\"书籍百科\",\"desc\":\"(暂时存放《英语词根词缀记忆大全.pdf》书籍的连接)\",\"link\":\"https://huang-ruifang.gitee.io/pdf-book/web/viewer.html?file=%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%A0%B9%E8%AF%8D%E7%BC%80%E8%AE%B0%E5%BF%86%E5%A4%A7%E5%85%A8.pdf\"},{\"icon\":\"friend\",\"name\":\"lautrans\",\"desc\":\"优秀的博客社区\",\"link\":\"https://www.lautrans.cn\"},{\"icon\":\"/logo.svg\",\"name\":\"Rui\",\"desc\":\"vuepress搭建的博客\",\"link\":\"https://huang-ruifang.gitee.io/vuepress-blog/navigation/\"}],\"footer\":\"Rui Blog\",\"description\":\"博客主页。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博客主页\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"博客主页。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:32:46.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:32:46.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"博客主页\\\",\\\"description\\\":\\\"博客主页。\\\"}\"]]}]},\"4\":{\"h\":\"幻灯片页\",\"t\":[\"@slidestart\"]},\"5\":{\"h\":\"幻灯片演示\",\"t\":[\"一个简单的幻灯片演示与各种小贴士。\",\"作者 Mr.Hope. 请滚动鼠标滚轮进入下一页\"]},\"6\":{\"h\":\"标注幻灯片\",\"t\":[\"👇\",\"--\"]},\"7\":{\"h\":\"标注幻灯片\",\"t\":[\"使用 --- 标注水平幻灯片\",\"在水平幻灯片中使用 -- 分割垂直幻灯片\",\"使用 <!-- .slide: ... --> 在幻灯片上添加属性\",\"使用 <!-- .element: ... --> 在前一个 HTML 元素上添加属性\"]},\"8\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"--\"]},\"9\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\"]},\"10\":{\"h\":\"这是一个 H3\",\"t\":[\"标题默认会自动转换为大写。\",\"这是一个有着 粗体, 斜体, 删除线 文字并包含 一个链接 的段落，并且它会自动换行。所以你无需担心它的长度。\",\"--\"]},\"11\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"列表默认为 inline-block\",\"项目\",\"项目\",\"项目\",\"项目 1\",\"项目 2\",\"项目 3\",\"--\"]},\"12\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"在你启用 highlight 插件后，代码块会自动高亮。\",\"const a = 1; \",\"--\"]},\"13\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"在你启用 math 插件后，你也可以使用 TEX 格式使用数学公式。\",\"$$ J(\\\\theta_0,\\\\theta_1) = \\\\sum_{i=0} $$\",\"--\"]},\"14\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"⚠请注意: 表格和分割线，以及所有不在 Markdown 标准语法中的内容均不受支持。\"]},\"15\":{\"h\":\"布局\",\"t\":[\"--\"]},\"16\":{\"h\":\"布局\",\"t\":[\"👆 r-fit-text class 会让文字在不超出幻灯片范围的情况下尽可能大。\",\"--\"]},\"17\":{\"h\":\"布局\",\"t\":[\"👆 r-stretch class 帮助你控制注入图片或视频的大小，使它们填充满幻灯片垂直方向上的剩余空间。\",\"--\"]},\"18\":{\"h\":\"布局\"},\"19\":{\"h\":\"背景\",\"t\":[\"你可以通过向特定幻灯片添加 data-background 属性自定义幻灯片背景.\"]},\"20\":{\"h\":\"动画片段\",\"t\":[\"--\"]},\"21\":{\"h\":\"动画片段\",\"t\":[\"动画片段用于高亮或显隐幻灯片中的元素。\",\"你需要在元素上添加 fragment 和动画 class。\",\"--\"]},\"22\":{\"h\":\"动画片段\"},\"23\":{\"h\":\"动画 class\",\"t\":[\"fade-in\",\"fade-out\",\"fade-up\",\"fade-down\",\"fade-left\",\"fade-right\",\"fade-in-then-out\",\"fade-in-then-semi-out\",\"--\"]},\"24\":{\"h\":\"动画片段\"},\"25\":{\"h\":\"动画 class\",\"t\":[\"grow\",\"shrink\",\"strike\",\"highlight-red\",\"highlight-green\",\"highlight-blue\",\"highlight-current-red\",\"highlight-current-green\",\"highlight-current-blue\",\"--\"]},\"26\":{\"h\":\"动画片段\"},\"27\":{\"h\":\"多个动画片段\",\"t\":[\"你可以按照顺序包裹一个 HTML 元素使其拥有多个动画片段 渐入 > 变红 > 渐出 \",\"--\"]},\"28\":{\"h\":\"动画片段\"},\"29\":{\"h\":\"顺序\",\"t\":[\"你可以使用 data-fragment-index 属性改变元素的动画顺序。\",\"不同元素可以有相同的动画顺序。\",\"最后显示\",\"第二个显示\",\"第一个显示\",\"第二个显示\"]},\"30\":{\"h\":\"渐变\",\"t\":[\"--\"]},\"31\":{\"h\":\"渐变\",\"t\":[\"Transition 可以通过配置中的 transition 选项全局设置，也可以通过在特定幻灯片添加 data-transition 属性局部设置.\",\"可能的值:\",\"none\",\"fade\",\"slide\",\"convex\",\"concave\",\"zoom\",\"--\"]},\"32\":{\"h\":\"渐变\"},\"33\":{\"h\":\"过渡动画\",\"t\":[\"你可以在相邻的幻灯片上添加 data-auto-animate 使相同的 HTML 元素产生过渡动画效果。\"]},\"34\":{\"h\":\"功能\",\"t\":[\"--\"]},\"35\":{\"h\":\"功能\"},\"36\":{\"h\":\"代码\",\"t\":[\"通过启用 highlight 插件，你可以对代码块进行高亮。\",\"你可以使用 [a-b|c-d] 语法来分布高亮特定行。\",\"let a = 1; let b = 2; let c = (x) => 1 + 2 + x; c(3); \",\"--\"]},\"37\":{\"h\":\"功能\"},\"38\":{\"h\":\"预览模式\",\"t\":[\"按下 Esc 或 O 即可在幻灯片获得焦点时进入预览模式。\",\"--\"]},\"39\":{\"h\":\"功能\"},\"40\":{\"h\":\"全屏模式\",\"t\":[\"按下 F 或 F11 即可在幻灯片获得焦点时进入全屏模式。\",\"--\"]},\"41\":{\"h\":\"功能\"},\"42\":{\"h\":\"缩放\",\"t\":[\"按下 alt (Linux 上使用 ctrl) 的同时点击幻灯片的任何元素，即可以向此元素进行放大。\",\"再次点击即可缩小。\"]},\"43\":{\"h\":\"结束\",\"t\":[\"@slideend\"]},\"44\":{\"c\":[{\"title\":\"幻灯片页\",\"icon\":\"person-chalkboard\",\"layout\":\"Slide\",\"description\":\"@slidestart 幻灯片演示 一个简单的幻灯片演示与各种小贴士。 作者 Mr.Hope. 请滚动鼠标滚轮进入下一页 标注幻灯片\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/slides.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"幻灯片页\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"@slidestart 幻灯片演示 一个简单的幻灯片演示与各种小贴士。 作者 Mr.Hope. 请滚动鼠标滚轮进入下一页 标注幻灯片\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-08-16T12:58:48.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-08-16T12:58:48.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"幻灯片页\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-08-16T12:58:48.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"45\":{\"h\":\"\"},\"46\":{\"c\":[{\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/aboutme/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"47\":{\"h\":\"博文\"},\"48\":{\"h\":\"java\",\"t\":[\"picGo+gitee设置图床\"]},\"49\":{\"h\":\"mybatis\",\"t\":[\"mybatis 查询条件List集合、map集合、Array数组\",\"mybatis 查询返回List集合、map集合、List＜Map＞集合\"]},\"50\":{\"h\":\"前端\",\"t\":[\"easyui tree combotree去掉默认图标\"]},\"51\":{\"c\":[{\"title\":\"博文\",\"tag\":[\"博文\",\"笔记\"],\"description\":\"博文 java picGo+gitee设置图床 mybatis mybatis 查询条件List集合、map集合、Array数组 mybatis 查询返回List集合、map集合、List＜Map＞集合\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"博文 java picGo+gitee设置图床 mybatis mybatis 查询条件List集合、map集合、Array数组 mybatis 查询返回List集合、map集合、List＜Map＞集合\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"博文\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"52\":{\"c\":[\"博文\",\"笔记\"]},\"53\":{\"h\":\"其他\",\"t\":[\"序号\",\"描述\",\"链接\",\"1\",\"right-aligned\",\"$1600\",\"2\",\"centered\",\"$12\",\"3\",\"are neat\",\"$1\"]},\"54\":{\"c\":[{\"title\":\"其他\",\"tag\":[\"代码Demo\"],\"description\":\"序号 描述 链接 1 right-aligned $1600 2 centered $12 3 are neat $1\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/code-demo/other.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"其他\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"序号 描述 链接 1 right-aligned $1600 2 centered $12 3 are neat $1\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"代码Demo\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"其他\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"55\":{\"c\":[\"代码Demo\"]},\"56\":{\"h\":\"代码Demo\"},\"57\":{\"c\":[{\"title\":\"代码Demo\",\"tag\":[\"其他\"],\"description\":\"代码Demo\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/code-demo/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"代码Demo\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"代码Demo\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"其他\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"代码Demo\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"58\":{\"c\":[\"其他\"]},\"59\":{\"h\":\"友链\",\"t\":[\"lautrans优秀的博客,内涵ai对话,导航，面试等\",\"yyshino优秀的前端笔记\",\"彭世瑜的博客\",\"Java 后端学习笔记\"]},\"60\":{\"c\":[{\"title\":\"友链\",\"lang\":\"en-US\",\"tag\":[\"友链\"],\"description\":\"友链 lautrans优秀的博客,内涵ai对话,导航，面试等 yyshino优秀的前端笔记 彭世瑜的博客\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/friendly-chain/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"友链\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"友链 lautrans优秀的博客,内涵ai对话,导航，面试等 yyshino优秀的前端笔记 彭世瑜的博客\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"en-US\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"友链\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"友链\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"61\":{\"c\":[\"友链\"]},\"62\":{\"h\":\"导航\"},\"63\":{\"c\":[{\"title\":\"导航\",\"layout\":\"page\",\"sidebar\":false,\"description\":\"[//]: # () [//]: # () [//]: # () [//]: # (import Navigate from \\\"@Navigate\\\";) [//]: # () [//]: # () [//]: # (// import Navigate from \\\"@Navigate\\\";) [//]: # (import Client from \\\"./...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/navigation/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"导航\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"[//]: # () [//]: # () [//]: # () [//]: # (import Navigate from \\\"@Navigate\\\";) [//]: # () [//]: # () [//]: # (// import Navigate from \\\"@Navigate\\\";) [//]: # (import Client from \\\"./...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"导航\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"64\":{\"h\":\"其他\",\"t\":[\"// Generated, don't edit\",\"\\\"100\\\": \\\"💯\\\",\\n\\\"1234\\\": \\\"🔢\\\",\\n\\\"grinning\\\": \\\"😀\\\",\\n\\\"smiley\\\": \\\"😃\\\",\\n\\\"smile\\\": \\\"😄\\\",\\n\\\"grin\\\": \\\"😁\\\",\\n\\\"laughing\\\": \\\"😆\\\",\\n\\\"satisfied\\\": \\\"😆\\\",\\n\\\"sweat_smile\\\": \\\"😅\\\",\\n\\\"rofl\\\": \\\"🤣\\\",\\n\\\"joy\\\": \\\"😂\\\",\\n\\\"slightly_smiling_face\\\": \\\"🙂\\\",\\n\\\"upside_down_face\\\": \\\"🙃\\\",\\n\\\"melting_face\\\": \\\"🫠\\\",\\n\\\"wink\\\": \\\"😉\\\",\\n\\\"blush\\\": \\\"😊\\\",\\n\\\"innocent\\\": \\\"😇\\\",\\n\\\"smiling_face_with_three_hearts\\\": \\\"🥰\\\",\\n\\\"heart_eyes\\\": \\\"😍\\\",\\n\\\"star_struck\\\": \\\"🤩\\\",\\n\\\"kissing_heart\\\": \\\"😘\\\",\\n\\\"kissing\\\": \\\"😗\\\",\\n\\\"relaxed\\\": \\\"☺️\\\",\\n\\\"kissing_closed_eyes\\\": \\\"😚\\\",\\n\\\"kissing_smiling_eyes\\\": \\\"😙\\\",\\n\\\"smiling_face_with_tear\\\": \\\"🥲\\\",\\n\\\"yum\\\": \\\"😋\\\",\\n\\\"stuck_out_tongue\\\": \\\"😛\\\",\\n\\\"stuck_out_tongue_winking_eye\\\": \\\"😜\\\",\\n\\\"zany_face\\\": \\\"🤪\\\",\\n\\\"stuck_out_tongue_closed_eyes\\\": \\\"😝\\\",\\n\\\"money_mouth_face\\\": \\\"🤑\\\",\\n\\\"hugs\\\": \\\"🤗\\\",\\n\\\"hand_over_mouth\\\": \\\"🤭\\\",\\n\\\"face_with_open_eyes_and_hand_over_mouth\\\": \\\"🫢\\\",\\n\\\"face_with_peeking_eye\\\": \\\"🫣\\\",\\n\\\"shushing_face\\\": \\\"🤫\\\",\\n\\\"thinking\\\": \\\"🤔\\\",\\n\\\"saluting_face\\\": \\\"🫡\\\",\\n\\\"zipper_mouth_face\\\": \\\"🤐\\\",\\n\\\"raised_eyebrow\\\": \\\"🤨\\\",\\n\\\"neutral_face\\\": \\\"😐\\\",\\n\\\"expressionless\\\": \\\"😑\\\",\\n\\\"no_mouth\\\": \\\"😶\\\",\\n\\\"dotted_line_face\\\": \\\"🫥\\\",\\n\\\"face_in_clouds\\\": \\\"😶‍🌫️\\\",\\n\\\"smirk\\\": \\\"😏\\\",\\n\\\"unamused\\\": \\\"😒\\\",\\n\\\"roll_eyes\\\": \\\"🙄\\\",\\n\\\"grimacing\\\": \\\"😬\\\",\\n\\\"face_exhaling\\\": \\\"😮‍💨\\\",\\n\\\"lying_face\\\": \\\"🤥\\\",\\n\\\"shaking_face\\\": \\\"🫨\\\",\\n\\\"relieved\\\": \\\"😌\\\",\\n\\\"pensive\\\": \\\"😔\\\",\\n\\\"sleepy\\\": \\\"😪\\\",\\n\\\"drooling_face\\\": \\\"🤤\\\",\\n\\\"sleeping\\\": \\\"😴\\\",\\n\\\"mask\\\": \\\"😷\\\",\\n\\\"face_with_thermometer\\\": \\\"🤒\\\",\\n\\\"face_with_head_bandage\\\": \\\"🤕\\\",\\n\\\"nauseated_face\\\": \\\"🤢\\\",\\n\\\"vomiting_face\\\": \\\"🤮\\\",\\n\\\"sneezing_face\\\": \\\"🤧\\\",\\n\\\"hot_face\\\": \\\"🥵\\\",\\n\\\"cold_face\\\": \\\"🥶\\\",\\n\\\"woozy_face\\\": \\\"🥴\\\",\\n\\\"dizzy_face\\\": \\\"😵\\\",\\n\\\"face_with_spiral_eyes\\\": \\\"😵‍💫\\\",\\n\\\"exploding_head\\\": \\\"🤯\\\",\\n\\\"cowboy_hat_face\\\": \\\"🤠\\\",\\n\\\"partying_face\\\": \\\"🥳\\\",\\n\\\"disguised_face\\\": \\\"🥸\\\",\\n\\\"sunglasses\\\": \\\"😎\\\",\\n\\\"nerd_face\\\": \\\"🤓\\\",\\n\\\"monocle_face\\\": \\\"🧐\\\",\\n\\\"confused\\\": \\\"😕\\\",\\n\\\"face_with_diagonal_mouth\\\": \\\"🫤\\\",\\n\\\"worried\\\": \\\"😟\\\",\\n\\\"slightly_frowning_face\\\": \\\"🙁\\\",\\n\\\"frowning_face\\\": \\\"☹️\\\",\\n\\\"open_mouth\\\": \\\"😮\\\",\\n\\\"hushed\\\": \\\"😯\\\",\\n\\\"astonished\\\": \\\"😲\\\",\\n\\\"flushed\\\": \\\"😳\\\",\\n\\\"pleading_face\\\": \\\"🥺\\\",\\n\\\"face_holding_back_tears\\\": \\\"🥹\\\",\\n\\\"frowning\\\": \\\"😦\\\",\\n\\\"anguished\\\": \\\"😧\\\",\\n\\\"fearful\\\": \\\"😨\\\",\\n\\\"cold_sweat\\\": \\\"😰\\\",\\n\\\"disappointed_relieved\\\": \\\"😥\\\",\\n\\\"cry\\\": \\\"😢\\\",\\n\\\"sob\\\": \\\"😭\\\",\\n\\\"scream\\\": \\\"😱\\\",\\n\\\"confounded\\\": \\\"😖\\\",\\n\\\"persevere\\\": \\\"😣\\\",\\n\\\"disappointed\\\": \\\"😞\\\",\\n\\\"sweat\\\": \\\"😓\\\",\\n\\\"weary\\\": \\\"😩\\\",\\n\\\"tired_face\\\": \\\"😫\\\",\\n\\\"yawning_face\\\": \\\"🥱\\\",\\n\\\"triumph\\\": \\\"😤\\\",\\n\\\"rage\\\": \\\"😡\\\",\\n\\\"pout\\\": \\\"😡\\\",\\n\\\"angry\\\": \\\"😠\\\",\\n\\\"cursing_face\\\": \\\"🤬\\\",\\n\\\"smiling_imp\\\": \\\"😈\\\",\\n\\\"imp\\\": \\\"👿\\\",\\n\\\"skull\\\": \\\"💀\\\",\\n\\\"skull_and_crossbones\\\": \\\"☠️\\\",\\n\\\"hankey\\\": \\\"💩\\\",\\n\\\"poop\\\": \\\"💩\\\",\\n\\\"shit\\\": \\\"💩\\\",\\n\\\"clown_face\\\": \\\"🤡\\\",\\n\\\"japanese_ogre\\\": \\\"👹\\\",\\n\\\"japanese_goblin\\\": \\\"👺\\\",\\n\\\"ghost\\\": \\\"👻\\\",\\n\\\"alien\\\": \\\"👽\\\",\\n\\\"space_invader\\\": \\\"👾\\\",\\n\\\"robot\\\": \\\"🤖\\\",\\n\\\"smiley_cat\\\": \\\"😺\\\",\\n\\\"smile_cat\\\": \\\"😸\\\",\\n\\\"joy_cat\\\": \\\"😹\\\",\\n\\\"heart_eyes_cat\\\": \\\"😻\\\",\\n\\\"smirk_cat\\\": \\\"😼\\\",\\n\\\"kissing_cat\\\": \\\"😽\\\",\\n\\\"scream_cat\\\": \\\"🙀\\\",\\n\\\"crying_cat_face\\\": \\\"😿\\\",\\n\\\"pouting_cat\\\": \\\"😾\\\",\\n\\\"see_no_evil\\\": \\\"🙈\\\",\\n\\\"hear_no_evil\\\": \\\"🙉\\\",\\n\\\"speak_no_evil\\\": \\\"🙊\\\",\\n\\\"love_letter\\\": \\\"💌\\\",\\n\\\"cupid\\\": \\\"💘\\\",\\n\\\"gift_heart\\\": \\\"💝\\\",\\n\\\"sparkling_heart\\\": \\\"💖\\\",\\n\\\"heartpulse\\\": \\\"💗\\\",\\n\\\"heartbeat\\\": \\\"💓\\\",\\n\\\"revolving_hearts\\\": \\\"💞\\\",\\n\\\"two_hearts\\\": \\\"💕\\\",\\n\\\"heart_decoration\\\": \\\"💟\\\",\\n\\\"heavy_heart_exclamation\\\": \\\"❣️\\\",\\n\\\"broken_heart\\\": \\\"💔\\\",\\n\\\"heart_on_fire\\\": \\\"❤️‍🔥\\\",\\n\\\"mending_heart\\\": \\\"❤️‍🩹\\\",\\n\\\"heart\\\": \\\"❤️\\\",\\n\\\"pink_heart\\\": \\\"🩷\\\",\\n\\\"orange_heart\\\": \\\"🧡\\\",\\n\\\"yellow_heart\\\": \\\"💛\\\",\\n\\\"green_heart\\\": \\\"💚\\\",\\n\\\"blue_heart\\\": \\\"💙\\\",\\n\\\"light_blue_heart\\\": \\\"🩵\\\",\\n\\\"purple_heart\\\": \\\"💜\\\",\\n\\\"brown_heart\\\": \\\"🤎\\\",\\n\\\"black_heart\\\": \\\"🖤\\\",\\n\\\"grey_heart\\\": \\\"🩶\\\",\\n\\\"white_heart\\\": \\\"🤍\\\",\\n\\\"kiss\\\": \\\"💋\\\",\\n\\\"anger\\\": \\\"💢\\\",\\n\\\"boom\\\": \\\"💥\\\",\\n\\\"collision\\\": \\\"💥\\\",\\n\\\"dizzy\\\": \\\"💫\\\",\\n\\\"sweat_drops\\\": \\\"💦\\\",\\n\\\"dash\\\": \\\"💨\\\",\\n\\\"hole\\\": \\\"🕳️\\\",\\n\\\"speech_balloon\\\": \\\"💬\\\",\\n\\\"eye_speech_bubble\\\": \\\"👁️‍🗨️\\\",\\n\\\"left_speech_bubble\\\": \\\"🗨️\\\",\\n\\\"right_anger_bubble\\\": \\\"🗯️\\\",\\n\\\"thought_balloon\\\": \\\"💭\\\",\\n\\\"zzz\\\": \\\"💤\\\",\\n\\\"wave\\\": \\\"👋\\\",\\n\\\"raised_back_of_hand\\\": \\\"🤚\\\",\\n\\\"raised_hand_with_fingers_splayed\\\": \\\"🖐️\\\",\\n\\\"hand\\\": \\\"✋\\\",\\n\\\"raised_hand\\\": \\\"✋\\\",\\n\\\"vulcan_salute\\\": \\\"🖖\\\",\\n\\\"rightwards_hand\\\": \\\"🫱\\\",\\n\\\"leftwards_hand\\\": \\\"🫲\\\",\\n\\\"palm_down_hand\\\": \\\"🫳\\\",\\n\\\"palm_up_hand\\\": \\\"🫴\\\",\\n\\\"leftwards_pushing_hand\\\": \\\"🫷\\\",\\n\\\"rightwards_pushing_hand\\\": \\\"🫸\\\",\\n\\\"ok_hand\\\": \\\"👌\\\",\\n\\\"pinched_fingers\\\": \\\"🤌\\\",\\n\\\"pinching_hand\\\": \\\"🤏\\\",\\n\\\"v\\\": \\\"✌️\\\",\\n\\\"crossed_fingers\\\": \\\"🤞\\\",\\n\\\"hand_with_index_finger_and_thumb_crossed\\\": \\\"🫰\\\",\\n\\\"love_you_gesture\\\": \\\"🤟\\\",\\n\\\"metal\\\": \\\"🤘\\\",\\n\\\"call_me_hand\\\": \\\"🤙\\\",\\n\\\"point_left\\\": \\\"👈\\\",\\n\\\"point_right\\\": \\\"👉\\\",\\n\\\"point_up_2\\\": \\\"👆\\\",\\n\\\"middle_finger\\\": \\\"🖕\\\",\\n\\\"fu\\\": \\\"🖕\\\",\\n\\\"point_down\\\": \\\"👇\\\",\\n\\\"point_up\\\": \\\"☝️\\\",\\n\\\"index_pointing_at_the_viewer\\\": \\\"🫵\\\",\\n\\\"+1\\\": \\\"👍\\\",\\n\\\"thumbsup\\\": \\\"👍\\\",\\n\\\"-1\\\": \\\"👎\\\",\\n\\\"thumbsdown\\\": \\\"👎\\\",\\n\\\"fist_raised\\\": \\\"✊\\\",\\n\\\"fist\\\": \\\"✊\\\",\\n\\\"fist_oncoming\\\": \\\"👊\\\",\\n\\\"facepunch\\\": \\\"👊\\\",\\n\\\"punch\\\": \\\"👊\\\",\\n\\\"fist_left\\\": \\\"🤛\\\",\\n\\\"fist_right\\\": \\\"🤜\\\",\\n\\\"clap\\\": \\\"👏\\\",\\n\\\"raised_hands\\\": \\\"🙌\\\",\\n\\\"heart_hands\\\": \\\"🫶\\\",\\n\\\"open_hands\\\": \\\"👐\\\",\\n\\\"palms_up_together\\\": \\\"🤲\\\",\\n\\\"handshake\\\": \\\"🤝\\\",\\n\\\"pray\\\": \\\"🙏\\\",\\n\\\"writing_hand\\\": \\\"✍️\\\",\\n\\\"nail_care\\\": \\\"💅\\\",\\n\\\"selfie\\\": \\\"🤳\\\",\\n\\\"muscle\\\": \\\"💪\\\",\\n\\\"mechanical_arm\\\": \\\"🦾\\\",\\n\\\"mechanical_leg\\\": \\\"🦿\\\",\\n\\\"leg\\\": \\\"🦵\\\",\\n\\\"foot\\\": \\\"🦶\\\",\\n\\\"ear\\\": \\\"👂\\\",\\n\\\"ear_with_hearing_aid\\\": \\\"🦻\\\",\\n\\\"nose\\\": \\\"👃\\\",\\n\\\"brain\\\": \\\"🧠\\\",\\n\\\"anatomical_heart\\\": \\\"🫀\\\",\\n\\\"lungs\\\": \\\"🫁\\\",\\n\\\"tooth\\\": \\\"🦷\\\",\\n\\\"bone\\\": \\\"🦴\\\",\\n\\\"eyes\\\": \\\"👀\\\",\\n\\\"eye\\\": \\\"👁️\\\",\\n\\\"tongue\\\": \\\"👅\\\",\\n\\\"lips\\\": \\\"👄\\\",\\n\\\"biting_lip\\\": \\\"🫦\\\",\\n\\\"baby\\\": \\\"👶\\\",\\n\\\"child\\\": \\\"🧒\\\",\\n\\\"boy\\\": \\\"👦\\\",\\n\\\"girl\\\": \\\"👧\\\",\\n\\\"adult\\\": \\\"🧑\\\",\\n\\\"blond_haired_person\\\": \\\"👱\\\",\\n\\\"man\\\": \\\"👨\\\",\\n\\\"bearded_person\\\": \\\"🧔\\\",\\n\\\"man_beard\\\": \\\"🧔‍♂️\\\",\\n\\\"woman_beard\\\": \\\"🧔‍♀️\\\",\\n\\\"red_haired_man\\\": \\\"👨‍🦰\\\",\\n\\\"curly_haired_man\\\": \\\"👨‍🦱\\\",\\n\\\"white_haired_man\\\": \\\"👨‍🦳\\\",\\n\\\"bald_man\\\": \\\"👨‍🦲\\\",\\n\\\"woman\\\": \\\"👩\\\",\\n\\\"red_haired_woman\\\": \\\"👩‍🦰\\\",\\n\\\"person_red_hair\\\": \\\"🧑‍🦰\\\",\\n\\\"curly_haired_woman\\\": \\\"👩‍🦱\\\",\\n\\\"person_curly_hair\\\": \\\"🧑‍🦱\\\",\\n\\\"white_haired_woman\\\": \\\"👩‍🦳\\\",\\n\\\"person_white_hair\\\": \\\"🧑‍🦳\\\",\\n\\\"bald_woman\\\": \\\"👩‍🦲\\\",\\n\\\"person_bald\\\": \\\"🧑‍🦲\\\",\\n\\\"blond_haired_woman\\\": \\\"👱‍♀️\\\",\\n\\\"blonde_woman\\\": \\\"👱‍♀️\\\",\\n\\\"blond_haired_man\\\": \\\"👱‍♂️\\\",\\n\\\"older_adult\\\": \\\"🧓\\\",\\n\\\"older_man\\\": \\\"👴\\\",\\n\\\"older_woman\\\": \\\"👵\\\",\\n\\\"frowning_person\\\": \\\"🙍\\\",\\n\\\"frowning_man\\\": \\\"🙍‍♂️\\\",\\n\\\"frowning_woman\\\": \\\"🙍‍♀️\\\",\\n\\\"pouting_face\\\": \\\"🙎\\\",\\n\\\"pouting_man\\\": \\\"🙎‍♂️\\\",\\n\\\"pouting_woman\\\": \\\"🙎‍♀️\\\",\\n\\\"no_good\\\": \\\"🙅\\\",\\n\\\"no_good_man\\\": \\\"🙅‍♂️\\\",\\n\\\"ng_man\\\": \\\"🙅‍♂️\\\",\\n\\\"no_good_woman\\\": \\\"🙅‍♀️\\\",\\n\\\"ng_woman\\\": \\\"🙅‍♀️\\\",\\n\\\"ok_person\\\": \\\"🙆\\\",\\n\\\"ok_man\\\": \\\"🙆‍♂️\\\",\\n\\\"ok_woman\\\": \\\"🙆‍♀️\\\",\\n\\\"tipping_hand_person\\\": \\\"💁\\\",\\n\\\"information_desk_person\\\": \\\"💁\\\",\\n\\\"tipping_hand_man\\\": \\\"💁‍♂️\\\",\\n\\\"sassy_man\\\": \\\"💁‍♂️\\\",\\n\\\"tipping_hand_woman\\\": \\\"💁‍♀️\\\",\\n\\\"sassy_woman\\\": \\\"💁‍♀️\\\",\\n\\\"raising_hand\\\": \\\"🙋\\\",\\n\\\"raising_hand_man\\\": \\\"🙋‍♂️\\\",\\n\\\"raising_hand_woman\\\": \\\"🙋‍♀️\\\",\\n\\\"deaf_person\\\": \\\"🧏\\\",\\n\\\"deaf_man\\\": \\\"🧏‍♂️\\\",\\n\\\"deaf_woman\\\": \\\"🧏‍♀️\\\",\\n\\\"bow\\\": \\\"🙇\\\",\\n\\\"bowing_man\\\": \\\"🙇‍♂️\\\",\\n\\\"bowing_woman\\\": \\\"🙇‍♀️\\\",\\n\\\"facepalm\\\": \\\"🤦\\\",\\n\\\"man_facepalming\\\": \\\"🤦‍♂️\\\",\\n\\\"woman_facepalming\\\": \\\"🤦‍♀️\\\",\\n\\\"shrug\\\": \\\"🤷\\\",\\n\\\"man_shrugging\\\": \\\"🤷‍♂️\\\",\\n\\\"woman_shrugging\\\": \\\"🤷‍♀️\\\",\\n\\\"health_worker\\\": \\\"🧑‍⚕️\\\",\\n\\\"man_health_worker\\\": \\\"👨‍⚕️\\\",\\n\\\"woman_health_worker\\\": \\\"👩‍⚕️\\\",\\n\\\"student\\\": \\\"🧑‍🎓\\\",\\n\\\"man_student\\\": \\\"👨‍🎓\\\",\\n\\\"woman_student\\\": \\\"👩‍🎓\\\",\\n\\\"teacher\\\": \\\"🧑‍🏫\\\",\\n\\\"man_teacher\\\": \\\"👨‍🏫\\\",\\n\\\"woman_teacher\\\": \\\"👩‍🏫\\\",\\n\\\"judge\\\": \\\"🧑‍⚖️\\\",\\n\\\"man_judge\\\": \\\"👨‍⚖️\\\",\\n\\\"woman_judge\\\": \\\"👩‍⚖️\\\",\\n\\\"farmer\\\": \\\"🧑‍🌾\\\",\\n\\\"man_farmer\\\": \\\"👨‍🌾\\\",\\n\\\"woman_farmer\\\": \\\"👩‍🌾\\\",\\n\\\"cook\\\": \\\"🧑‍🍳\\\",\\n\\\"man_cook\\\": \\\"👨‍🍳\\\",\\n\\\"woman_cook\\\": \\\"👩‍🍳\\\",\\n\\\"mechanic\\\": \\\"🧑‍🔧\\\",\\n\\\"man_mechanic\\\": \\\"👨‍🔧\\\",\\n\\\"woman_mechanic\\\": \\\"👩‍🔧\\\",\\n\\\"factory_worker\\\": \\\"🧑‍🏭\\\",\\n\\\"man_factory_worker\\\": \\\"👨‍🏭\\\",\\n\\\"woman_factory_worker\\\": \\\"👩‍🏭\\\",\\n\\\"office_worker\\\": \\\"🧑‍💼\\\",\\n\\\"man_office_worker\\\": \\\"👨‍💼\\\",\\n\\\"woman_office_worker\\\": \\\"👩‍💼\\\",\\n\\\"scientist\\\": \\\"🧑‍🔬\\\",\\n\\\"man_scientist\\\": \\\"👨‍🔬\\\",\\n\\\"woman_scientist\\\": \\\"👩‍🔬\\\",\\n\\\"technologist\\\": \\\"🧑‍💻\\\",\\n\\\"man_technologist\\\": \\\"👨‍💻\\\",\\n\\\"woman_technologist\\\": \\\"👩‍💻\\\",\\n\\\"singer\\\": \\\"🧑‍🎤\\\",\\n\\\"man_singer\\\": \\\"👨‍🎤\\\",\\n\\\"woman_singer\\\": \\\"👩‍🎤\\\",\\n\\\"artist\\\": \\\"🧑‍🎨\\\",\\n\\\"man_artist\\\": \\\"👨‍🎨\\\",\\n\\\"woman_artist\\\": \\\"👩‍🎨\\\",\\n\\\"pilot\\\": \\\"🧑‍✈️\\\",\\n\\\"man_pilot\\\": \\\"👨‍✈️\\\",\\n\\\"woman_pilot\\\": \\\"👩‍✈️\\\",\\n\\\"astronaut\\\": \\\"🧑‍🚀\\\",\\n\\\"man_astronaut\\\": \\\"👨‍🚀\\\",\\n\\\"woman_astronaut\\\": \\\"👩‍🚀\\\",\\n\\\"firefighter\\\": \\\"🧑‍🚒\\\",\\n\\\"man_firefighter\\\": \\\"👨‍🚒\\\",\\n\\\"woman_firefighter\\\": \\\"👩‍🚒\\\",\\n\\\"police_officer\\\": \\\"👮\\\",\\n\\\"cop\\\": \\\"👮\\\",\\n\\\"policeman\\\": \\\"👮‍♂️\\\",\\n\\\"policewoman\\\": \\\"👮‍♀️\\\",\\n\\\"detective\\\": \\\"🕵️\\\",\\n\\\"male_detective\\\": \\\"🕵️‍♂️\\\",\\n\\\"female_detective\\\": \\\"🕵️‍♀️\\\",\\n\\\"guard\\\": \\\"💂\\\",\\n\\\"guardsman\\\": \\\"💂‍♂️\\\",\\n\\\"guardswoman\\\": \\\"💂‍♀️\\\",\\n\\\"ninja\\\": \\\"🥷\\\",\\n\\\"construction_worker\\\": \\\"👷\\\",\\n\\\"construction_worker_man\\\": \\\"👷‍♂️\\\",\\n\\\"construction_worker_woman\\\": \\\"👷‍♀️\\\",\\n\\\"person_with_crown\\\": \\\"🫅\\\",\\n\\\"prince\\\": \\\"🤴\\\",\\n\\\"princess\\\": \\\"👸\\\",\\n\\\"person_with_turban\\\": \\\"👳\\\",\\n\\\"man_with_turban\\\": \\\"👳‍♂️\\\",\\n\\\"woman_with_turban\\\": \\\"👳‍♀️\\\",\\n\\\"man_with_gua_pi_mao\\\": \\\"👲\\\",\\n\\\"woman_with_headscarf\\\": \\\"🧕\\\",\\n\\\"person_in_tuxedo\\\": \\\"🤵\\\",\\n\\\"man_in_tuxedo\\\": \\\"🤵‍♂️\\\",\\n\\\"woman_in_tuxedo\\\": \\\"🤵‍♀️\\\",\\n\\\"person_with_veil\\\": \\\"👰\\\",\\n\\\"man_with_veil\\\": \\\"👰‍♂️\\\",\\n\\\"woman_with_veil\\\": \\\"👰‍♀️\\\",\\n\\\"bride_with_veil\\\": \\\"👰‍♀️\\\",\\n\\\"pregnant_woman\\\": \\\"🤰\\\",\\n\\\"pregnant_man\\\": \\\"🫃\\\",\\n\\\"pregnant_person\\\": \\\"🫄\\\",\\n\\\"breast_feeding\\\": \\\"🤱\\\",\\n\\\"woman_feeding_baby\\\": \\\"👩‍🍼\\\",\\n\\\"man_feeding_baby\\\": \\\"👨‍🍼\\\",\\n\\\"person_feeding_baby\\\": \\\"🧑‍🍼\\\",\\n\\\"angel\\\": \\\"👼\\\",\\n\\\"santa\\\": \\\"🎅\\\",\\n\\\"mrs_claus\\\": \\\"🤶\\\",\\n\\\"mx_claus\\\": \\\"🧑‍🎄\\\",\\n\\\"superhero\\\": \\\"🦸\\\",\\n\\\"superhero_man\\\": \\\"🦸‍♂️\\\",\\n\\\"superhero_woman\\\": \\\"🦸‍♀️\\\",\\n\\\"supervillain\\\": \\\"🦹\\\",\\n\\\"supervillain_man\\\": \\\"🦹‍♂️\\\",\\n\\\"supervillain_woman\\\": \\\"🦹‍♀️\\\",\\n\\\"mage\\\": \\\"🧙\\\",\\n\\\"mage_man\\\": \\\"🧙‍♂️\\\",\\n\\\"mage_woman\\\": \\\"🧙‍♀️\\\",\\n\\\"fairy\\\": \\\"🧚\\\",\\n\\\"fairy_man\\\": \\\"🧚‍♂️\\\",\\n\\\"fairy_woman\\\": \\\"🧚‍♀️\\\",\\n\\\"vampire\\\": \\\"🧛\\\",\\n\\\"vampire_man\\\": \\\"🧛‍♂️\\\",\\n\\\"vampire_woman\\\": \\\"🧛‍♀️\\\",\\n\\\"merperson\\\": \\\"🧜\\\",\\n\\\"merman\\\": \\\"🧜‍♂️\\\",\\n\\\"mermaid\\\": \\\"🧜‍♀️\\\",\\n\\\"elf\\\": \\\"🧝\\\",\\n\\\"elf_man\\\": \\\"🧝‍♂️\\\",\\n\\\"elf_woman\\\": \\\"🧝‍♀️\\\",\\n\\\"genie\\\": \\\"🧞\\\",\\n\\\"genie_man\\\": \\\"🧞‍♂️\\\",\\n\\\"genie_woman\\\": \\\"🧞‍♀️\\\",\\n\\\"zombie\\\": \\\"🧟\\\",\\n\\\"zombie_man\\\": \\\"🧟‍♂️\\\",\\n\\\"zombie_woman\\\": \\\"🧟‍♀️\\\",\\n\\\"troll\\\": \\\"🧌\\\",\\n\\\"massage\\\": \\\"💆\\\",\\n\\\"massage_man\\\": \\\"💆‍♂️\\\",\\n\\\"massage_woman\\\": \\\"💆‍♀️\\\",\\n\\\"haircut\\\": \\\"💇\\\",\\n\\\"haircut_man\\\": \\\"💇‍♂️\\\",\\n\\\"haircut_woman\\\": \\\"💇‍♀️\\\",\\n\\\"walking\\\": \\\"🚶\\\",\\n\\\"walking_man\\\": \\\"🚶‍♂️\\\",\\n\\\"walking_woman\\\": \\\"🚶‍♀️\\\",\\n\\\"standing_person\\\": \\\"🧍\\\",\\n\\\"standing_man\\\": \\\"🧍‍♂️\\\",\\n\\\"standing_woman\\\": \\\"🧍‍♀️\\\",\\n\\\"kneeling_person\\\": \\\"🧎\\\",\\n\\\"kneeling_man\\\": \\\"🧎‍♂️\\\",\\n\\\"kneeling_woman\\\": \\\"🧎‍♀️\\\",\\n\\\"person_with_probing_cane\\\": \\\"🧑‍🦯\\\",\\n\\\"man_with_probing_cane\\\": \\\"👨‍🦯\\\",\\n\\\"woman_with_probing_cane\\\": \\\"👩‍🦯\\\",\\n\\\"person_in_motorized_wheelchair\\\": \\\"🧑‍🦼\\\",\\n\\\"man_in_motorized_wheelchair\\\": \\\"👨‍🦼\\\",\\n\\\"woman_in_motorized_wheelchair\\\": \\\"👩‍🦼\\\",\\n\\\"person_in_manual_wheelchair\\\": \\\"🧑‍🦽\\\",\\n\\\"man_in_manual_wheelchair\\\": \\\"👨‍🦽\\\",\\n\\\"woman_in_manual_wheelchair\\\": \\\"👩‍🦽\\\",\\n\\\"runner\\\": \\\"🏃\\\",\\n\\\"running\\\": \\\"🏃\\\",\\n\\\"running_man\\\": \\\"🏃‍♂️\\\",\\n\\\"running_woman\\\": \\\"🏃‍♀️\\\",\\n\\\"woman_dancing\\\": \\\"💃\\\",\\n\\\"dancer\\\": \\\"💃\\\",\\n\\\"man_dancing\\\": \\\"🕺\\\",\\n\\\"business_suit_levitating\\\": \\\"🕴️\\\",\\n\\\"dancers\\\": \\\"👯\\\",\\n\\\"dancing_men\\\": \\\"👯‍♂️\\\",\\n\\\"dancing_women\\\": \\\"👯‍♀️\\\",\\n\\\"sauna_person\\\": \\\"🧖\\\",\\n\\\"sauna_man\\\": \\\"🧖‍♂️\\\",\\n\\\"sauna_woman\\\": \\\"🧖‍♀️\\\",\\n\\\"climbing\\\": \\\"🧗\\\",\\n\\\"climbing_man\\\": \\\"🧗‍♂️\\\",\\n\\\"climbing_woman\\\": \\\"🧗‍♀️\\\",\\n\\\"person_fencing\\\": \\\"🤺\\\",\\n\\\"horse_racing\\\": \\\"🏇\\\",\\n\\\"skier\\\": \\\"⛷️\\\",\\n\\\"snowboarder\\\": \\\"🏂\\\",\\n\\\"golfing\\\": \\\"🏌️\\\",\\n\\\"golfing_man\\\": \\\"🏌️‍♂️\\\",\\n\\\"golfing_woman\\\": \\\"🏌️‍♀️\\\",\\n\\\"surfer\\\": \\\"🏄\\\",\\n\\\"surfing_man\\\": \\\"🏄‍♂️\\\",\\n\\\"surfing_woman\\\": \\\"🏄‍♀️\\\",\\n\\\"rowboat\\\": \\\"🚣\\\",\\n\\\"rowing_man\\\": \\\"🚣‍♂️\\\",\\n\\\"rowing_woman\\\": \\\"🚣‍♀️\\\",\\n\\\"swimmer\\\": \\\"🏊\\\",\\n\\\"swimming_man\\\": \\\"🏊‍♂️\\\",\\n\\\"swimming_woman\\\": \\\"🏊‍♀️\\\",\\n\\\"bouncing_ball_person\\\": \\\"⛹️\\\",\\n\\\"bouncing_ball_man\\\": \\\"⛹️‍♂️\\\",\\n\\\"basketball_man\\\": \\\"⛹️‍♂️\\\",\\n\\\"bouncing_ball_woman\\\": \\\"⛹️‍♀️\\\",\\n\\\"basketball_woman\\\": \\\"⛹️‍♀️\\\",\\n\\\"weight_lifting\\\": \\\"🏋️\\\",\\n\\\"weight_lifting_man\\\": \\\"🏋️‍♂️\\\",\\n\\\"weight_lifting_woman\\\": \\\"🏋️‍♀️\\\",\\n\\\"bicyclist\\\": \\\"🚴\\\",\\n\\\"biking_man\\\": \\\"🚴‍♂️\\\",\\n\\\"biking_woman\\\": \\\"🚴‍♀️\\\",\\n\\\"mountain_bicyclist\\\": \\\"🚵\\\",\\n\\\"mountain_biking_man\\\": \\\"🚵‍♂️\\\",\\n\\\"mountain_biking_woman\\\": \\\"🚵‍♀️\\\",\\n\\\"cartwheeling\\\": \\\"🤸\\\",\\n\\\"man_cartwheeling\\\": \\\"🤸‍♂️\\\",\\n\\\"woman_cartwheeling\\\": \\\"🤸‍♀️\\\",\\n\\\"wrestling\\\": \\\"🤼\\\",\\n\\\"men_wrestling\\\": \\\"🤼‍♂️\\\",\\n\\\"women_wrestling\\\": \\\"🤼‍♀️\\\",\\n\\\"water_polo\\\": \\\"🤽\\\",\\n\\\"man_playing_water_polo\\\": \\\"🤽‍♂️\\\",\\n\\\"woman_playing_water_polo\\\": \\\"🤽‍♀️\\\",\\n\\\"handball_person\\\": \\\"🤾\\\",\\n\\\"man_playing_handball\\\": \\\"🤾‍♂️\\\",\\n\\\"woman_playing_handball\\\": \\\"🤾‍♀️\\\",\\n\\\"juggling_person\\\": \\\"🤹\\\",\\n\\\"man_juggling\\\": \\\"🤹‍♂️\\\",\\n\\\"woman_juggling\\\": \\\"🤹‍♀️\\\",\\n\\\"lotus_position\\\": \\\"🧘\\\",\\n\\\"lotus_position_man\\\": \\\"🧘‍♂️\\\",\\n\\\"lotus_position_woman\\\": \\\"🧘‍♀️\\\",\\n\\\"bath\\\": \\\"🛀\\\",\\n\\\"sleeping_bed\\\": \\\"🛌\\\",\\n\\\"people_holding_hands\\\": \\\"🧑‍🤝‍🧑\\\",\\n\\\"two_women_holding_hands\\\": \\\"👭\\\",\\n\\\"couple\\\": \\\"👫\\\",\\n\\\"two_men_holding_hands\\\": \\\"👬\\\",\\n\\\"couplekiss\\\": \\\"💏\\\",\\n\\\"couplekiss_man_woman\\\": \\\"👩‍❤️‍💋‍👨\\\",\\n\\\"couplekiss_man_man\\\": \\\"👨‍❤️‍💋‍👨\\\",\\n\\\"couplekiss_woman_woman\\\": \\\"👩‍❤️‍💋‍👩\\\",\\n\\\"couple_with_heart\\\": \\\"💑\\\",\\n\\\"couple_with_heart_woman_man\\\": \\\"👩‍❤️‍👨\\\",\\n\\\"couple_with_heart_man_man\\\": \\\"👨‍❤️‍👨\\\",\\n\\\"couple_with_heart_woman_woman\\\": \\\"👩‍❤️‍👩\\\",\\n\\\"family\\\": \\\"👪\\\",\\n\\\"family_man_woman_boy\\\": \\\"👨‍👩‍👦\\\",\\n\\\"family_man_woman_girl\\\": \\\"👨‍👩‍👧\\\",\\n\\\"family_man_woman_girl_boy\\\": \\\"👨‍👩‍👧‍👦\\\",\\n\\\"family_man_woman_boy_boy\\\": \\\"👨‍👩‍👦‍👦\\\",\\n\\\"family_man_woman_girl_girl\\\": \\\"👨‍👩‍👧‍👧\\\",\\n\\\"family_man_man_boy\\\": \\\"👨‍👨‍👦\\\",\\n\\\"family_man_man_girl\\\": \\\"👨‍👨‍👧\\\",\\n\\\"family_man_man_girl_boy\\\": \\\"👨‍👨‍👧‍👦\\\",\\n\\\"family_man_man_boy_boy\\\": \\\"👨‍👨‍👦‍👦\\\",\\n\\\"family_man_man_girl_girl\\\": \\\"👨‍👨‍👧‍👧\\\",\\n\\\"family_woman_woman_boy\\\": \\\"👩‍👩‍👦\\\",\\n\\\"family_woman_woman_girl\\\": \\\"👩‍👩‍👧\\\",\\n\\\"family_woman_woman_girl_boy\\\": \\\"👩‍👩‍👧‍👦\\\",\\n\\\"family_woman_woman_boy_boy\\\": \\\"👩‍👩‍👦‍👦\\\",\\n\\\"family_woman_woman_girl_girl\\\": \\\"👩‍👩‍👧‍👧\\\",\\n\\\"family_man_boy\\\": \\\"👨‍👦\\\",\\n\\\"family_man_boy_boy\\\": \\\"👨‍👦‍👦\\\",\\n\\\"family_man_girl\\\": \\\"👨‍👧\\\",\\n\\\"family_man_girl_boy\\\": \\\"👨‍👧‍👦\\\",\\n\\\"family_man_girl_girl\\\": \\\"👨‍👧‍👧\\\",\\n\\\"family_woman_boy\\\": \\\"👩‍👦\\\",\\n\\\"family_woman_boy_boy\\\": \\\"👩‍👦‍👦\\\",\\n\\\"family_woman_girl\\\": \\\"👩‍👧\\\",\\n\\\"family_woman_girl_boy\\\": \\\"👩‍👧‍👦\\\",\\n\\\"family_woman_girl_girl\\\": \\\"👩‍👧‍👧\\\",\\n\\\"speaking_head\\\": \\\"🗣️\\\",\\n\\\"bust_in_silhouette\\\": \\\"👤\\\",\\n\\\"busts_in_silhouette\\\": \\\"👥\\\",\\n\\\"people_hugging\\\": \\\"🫂\\\",\\n\\\"footprints\\\": \\\"👣\\\",\\n\\\"monkey_face\\\": \\\"🐵\\\",\\n\\\"monkey\\\": \\\"🐒\\\",\\n\\\"gorilla\\\": \\\"🦍\\\",\\n\\\"orangutan\\\": \\\"🦧\\\",\\n\\\"dog\\\": \\\"🐶\\\",\\n\\\"dog2\\\": \\\"🐕\\\",\\n\\\"guide_dog\\\": \\\"🦮\\\",\\n\\\"service_dog\\\": \\\"🐕‍🦺\\\",\\n\\\"poodle\\\": \\\"🐩\\\",\\n\\\"wolf\\\": \\\"🐺\\\",\\n\\\"fox_face\\\": \\\"🦊\\\",\\n\\\"raccoon\\\": \\\"🦝\\\",\\n\\\"cat\\\": \\\"🐱\\\",\\n\\\"cat2\\\": \\\"🐈\\\",\\n\\\"black_cat\\\": \\\"🐈‍⬛\\\",\\n\\\"lion\\\": \\\"🦁\\\",\\n\\\"tiger\\\": \\\"🐯\\\",\\n\\\"tiger2\\\": \\\"🐅\\\",\\n\\\"leopard\\\": \\\"🐆\\\",\\n\\\"horse\\\": \\\"🐴\\\",\\n\\\"moose\\\": \\\"🫎\\\",\\n\\\"donkey\\\": \\\"🫏\\\",\\n\\\"racehorse\\\": \\\"🐎\\\",\\n\\\"unicorn\\\": \\\"🦄\\\",\\n\\\"zebra\\\": \\\"🦓\\\",\\n\\\"deer\\\": \\\"🦌\\\",\\n\\\"bison\\\": \\\"🦬\\\",\\n\\\"cow\\\": \\\"🐮\\\",\\n\\\"ox\\\": \\\"🐂\\\",\\n\\\"water_buffalo\\\": \\\"🐃\\\",\\n\\\"cow2\\\": \\\"🐄\\\",\\n\\\"pig\\\": \\\"🐷\\\",\\n\\\"pig2\\\": \\\"🐖\\\",\\n\\\"boar\\\": \\\"🐗\\\",\\n\\\"pig_nose\\\": \\\"🐽\\\",\\n\\\"ram\\\": \\\"🐏\\\",\\n\\\"sheep\\\": \\\"🐑\\\",\\n\\\"goat\\\": \\\"🐐\\\",\\n\\\"dromedary_camel\\\": \\\"🐪\\\",\\n\\\"camel\\\": \\\"🐫\\\",\\n\\\"llama\\\": \\\"🦙\\\",\\n\\\"giraffe\\\": \\\"🦒\\\",\\n\\\"elephant\\\": \\\"🐘\\\",\\n\\\"mammoth\\\": \\\"🦣\\\",\\n\\\"rhinoceros\\\": \\\"🦏\\\",\\n\\\"hippopotamus\\\": \\\"🦛\\\",\\n\\\"mouse\\\": \\\"🐭\\\",\\n\\\"mouse2\\\": \\\"🐁\\\",\\n\\\"rat\\\": \\\"🐀\\\",\\n\\\"hamster\\\": \\\"🐹\\\",\\n\\\"rabbit\\\": \\\"🐰\\\",\\n\\\"rabbit2\\\": \\\"🐇\\\",\\n\\\"chipmunk\\\": \\\"🐿️\\\",\\n\\\"beaver\\\": \\\"🦫\\\",\\n\\\"hedgehog\\\": \\\"🦔\\\",\\n\\\"bat\\\": \\\"🦇\\\",\\n\\\"bear\\\": \\\"🐻\\\",\\n\\\"polar_bear\\\": \\\"🐻‍❄️\\\",\\n\\\"koala\\\": \\\"🐨\\\",\\n\\\"panda_face\\\": \\\"🐼\\\",\\n\\\"sloth\\\": \\\"🦥\\\",\\n\\\"otter\\\": \\\"🦦\\\",\\n\\\"skunk\\\": \\\"🦨\\\",\\n\\\"kangaroo\\\": \\\"🦘\\\",\\n\\\"badger\\\": \\\"🦡\\\",\\n\\\"feet\\\": \\\"🐾\\\",\\n\\\"paw_prints\\\": \\\"🐾\\\",\\n\\\"turkey\\\": \\\"🦃\\\",\\n\\\"chicken\\\": \\\"🐔\\\",\\n\\\"rooster\\\": \\\"🐓\\\",\\n\\\"hatching_chick\\\": \\\"🐣\\\",\\n\\\"baby_chick\\\": \\\"🐤\\\",\\n\\\"hatched_chick\\\": \\\"🐥\\\",\\n\\\"bird\\\": \\\"🐦\\\",\\n\\\"penguin\\\": \\\"🐧\\\",\\n\\\"dove\\\": \\\"🕊️\\\",\\n\\\"eagle\\\": \\\"🦅\\\",\\n\\\"duck\\\": \\\"🦆\\\",\\n\\\"swan\\\": \\\"🦢\\\",\\n\\\"owl\\\": \\\"🦉\\\",\\n\\\"dodo\\\": \\\"🦤\\\",\\n\\\"feather\\\": \\\"🪶\\\",\\n\\\"flamingo\\\": \\\"🦩\\\",\\n\\\"peacock\\\": \\\"🦚\\\",\\n\\\"parrot\\\": \\\"🦜\\\",\\n\\\"wing\\\": \\\"🪽\\\",\\n\\\"black_bird\\\": \\\"🐦‍⬛\\\",\\n\\\"goose\\\": \\\"🪿\\\",\\n\\\"frog\\\": \\\"🐸\\\",\\n\\\"crocodile\\\": \\\"🐊\\\",\\n\\\"turtle\\\": \\\"🐢\\\",\\n\\\"lizard\\\": \\\"🦎\\\",\\n\\\"snake\\\": \\\"🐍\\\",\\n\\\"dragon_face\\\": \\\"🐲\\\",\\n\\\"dragon\\\": \\\"🐉\\\",\\n\\\"sauropod\\\": \\\"🦕\\\",\\n\\\"t-rex\\\": \\\"🦖\\\",\\n\\\"whale\\\": \\\"🐳\\\",\\n\\\"whale2\\\": \\\"🐋\\\",\\n\\\"dolphin\\\": \\\"🐬\\\",\\n\\\"flipper\\\": \\\"🐬\\\",\\n\\\"seal\\\": \\\"🦭\\\",\\n\\\"fish\\\": \\\"🐟\\\",\\n\\\"tropical_fish\\\": \\\"🐠\\\",\\n\\\"blowfish\\\": \\\"🐡\\\",\\n\\\"shark\\\": \\\"🦈\\\",\\n\\\"octopus\\\": \\\"🐙\\\",\\n\\\"shell\\\": \\\"🐚\\\",\\n\\\"coral\\\": \\\"🪸\\\",\\n\\\"jellyfish\\\": \\\"🪼\\\",\\n\\\"snail\\\": \\\"🐌\\\",\\n\\\"butterfly\\\": \\\"🦋\\\",\\n\\\"bug\\\": \\\"🐛\\\",\\n\\\"ant\\\": \\\"🐜\\\",\\n\\\"bee\\\": \\\"🐝\\\",\\n\\\"honeybee\\\": \\\"🐝\\\",\\n\\\"beetle\\\": \\\"🪲\\\",\\n\\\"lady_beetle\\\": \\\"🐞\\\",\\n\\\"cricket\\\": \\\"🦗\\\",\\n\\\"cockroach\\\": \\\"🪳\\\",\\n\\\"spider\\\": \\\"🕷️\\\",\\n\\\"spider_web\\\": \\\"🕸️\\\",\\n\\\"scorpion\\\": \\\"🦂\\\",\\n\\\"mosquito\\\": \\\"🦟\\\",\\n\\\"fly\\\": \\\"🪰\\\",\\n\\\"worm\\\": \\\"🪱\\\",\\n\\\"microbe\\\": \\\"🦠\\\",\\n\\\"bouquet\\\": \\\"💐\\\",\\n\\\"cherry_blossom\\\": \\\"🌸\\\",\\n\\\"white_flower\\\": \\\"💮\\\",\\n\\\"lotus\\\": \\\"🪷\\\",\\n\\\"rosette\\\": \\\"🏵️\\\",\\n\\\"rose\\\": \\\"🌹\\\",\\n\\\"wilted_flower\\\": \\\"🥀\\\",\\n\\\"hibiscus\\\": \\\"🌺\\\",\\n\\\"sunflower\\\": \\\"🌻\\\",\\n\\\"blossom\\\": \\\"🌼\\\",\\n\\\"tulip\\\": \\\"🌷\\\",\\n\\\"hyacinth\\\": \\\"🪻\\\",\\n\\\"seedling\\\": \\\"🌱\\\",\\n\\\"potted_plant\\\": \\\"🪴\\\",\\n\\\"evergreen_tree\\\": \\\"🌲\\\",\\n\\\"deciduous_tree\\\": \\\"🌳\\\",\\n\\\"palm_tree\\\": \\\"🌴\\\",\\n\\\"cactus\\\": \\\"🌵\\\",\\n\\\"ear_of_rice\\\": \\\"🌾\\\",\\n\\\"herb\\\": \\\"🌿\\\",\\n\\\"shamrock\\\": \\\"☘️\\\",\\n\\\"four_leaf_clover\\\": \\\"🍀\\\",\\n\\\"maple_leaf\\\": \\\"🍁\\\",\\n\\\"fallen_leaf\\\": \\\"🍂\\\",\\n\\\"leaves\\\": \\\"🍃\\\",\\n\\\"empty_nest\\\": \\\"🪹\\\",\\n\\\"nest_with_eggs\\\": \\\"🪺\\\",\\n\\\"mushroom\\\": \\\"🍄\\\",\\n\\\"grapes\\\": \\\"🍇\\\",\\n\\\"melon\\\": \\\"🍈\\\",\\n\\\"watermelon\\\": \\\"🍉\\\",\\n\\\"tangerine\\\": \\\"🍊\\\",\\n\\\"orange\\\": \\\"🍊\\\",\\n\\\"mandarin\\\": \\\"🍊\\\",\\n\\\"lemon\\\": \\\"🍋\\\",\\n\\\"banana\\\": \\\"🍌\\\",\\n\\\"pineapple\\\": \\\"🍍\\\",\\n\\\"mango\\\": \\\"🥭\\\",\\n\\\"apple\\\": \\\"🍎\\\",\\n\\\"green_apple\\\": \\\"🍏\\\",\\n\\\"pear\\\": \\\"🍐\\\",\\n\\\"peach\\\": \\\"🍑\\\",\\n\\\"cherries\\\": \\\"🍒\\\",\\n\\\"strawberry\\\": \\\"🍓\\\",\\n\\\"blueberries\\\": \\\"🫐\\\",\\n\\\"kiwi_fruit\\\": \\\"🥝\\\",\\n\\\"tomato\\\": \\\"🍅\\\",\\n\\\"olive\\\": \\\"🫒\\\",\\n\\\"coconut\\\": \\\"🥥\\\",\\n\\\"avocado\\\": \\\"🥑\\\",\\n\\\"eggplant\\\": \\\"🍆\\\",\\n\\\"potato\\\": \\\"🥔\\\",\\n\\\"carrot\\\": \\\"🥕\\\",\\n\\\"corn\\\": \\\"🌽\\\",\\n\\\"hot_pepper\\\": \\\"🌶️\\\",\\n\\\"bell_pepper\\\": \\\"🫑\\\",\\n\\\"cucumber\\\": \\\"🥒\\\",\\n\\\"leafy_green\\\": \\\"🥬\\\",\\n\\\"broccoli\\\": \\\"🥦\\\",\\n\\\"garlic\\\": \\\"🧄\\\",\\n\\\"onion\\\": \\\"🧅\\\",\\n\\\"peanuts\\\": \\\"🥜\\\",\\n\\\"beans\\\": \\\"🫘\\\",\\n\\\"chestnut\\\": \\\"🌰\\\",\\n\\\"ginger_root\\\": \\\"🫚\\\",\\n\\\"pea_pod\\\": \\\"🫛\\\",\\n\\\"bread\\\": \\\"🍞\\\",\\n\\\"croissant\\\": \\\"🥐\\\",\\n\\\"baguette_bread\\\": \\\"🥖\\\",\\n\\\"flatbread\\\": \\\"🫓\\\",\\n\\\"pretzel\\\": \\\"🥨\\\",\\n\\\"bagel\\\": \\\"🥯\\\",\\n\\\"pancakes\\\": \\\"🥞\\\",\\n\\\"waffle\\\": \\\"🧇\\\",\\n\\\"cheese\\\": \\\"🧀\\\",\\n\\\"meat_on_bone\\\": \\\"🍖\\\",\\n\\\"poultry_leg\\\": \\\"🍗\\\",\\n\\\"cut_of_meat\\\": \\\"🥩\\\",\\n\\\"bacon\\\": \\\"🥓\\\",\\n\\\"hamburger\\\": \\\"🍔\\\",\\n\\\"fries\\\": \\\"🍟\\\",\\n\\\"pizza\\\": \\\"🍕\\\",\\n\\\"hotdog\\\": \\\"🌭\\\",\\n\\\"sandwich\\\": \\\"🥪\\\",\\n\\\"taco\\\": \\\"🌮\\\",\\n\\\"burrito\\\": \\\"🌯\\\",\\n\\\"tamale\\\": \\\"🫔\\\",\\n\\\"stuffed_flatbread\\\": \\\"🥙\\\",\\n\\\"falafel\\\": \\\"🧆\\\",\\n\\\"egg\\\": \\\"🥚\\\",\\n\\\"fried_egg\\\": \\\"🍳\\\",\\n\\\"shallow_pan_of_food\\\": \\\"🥘\\\",\\n\\\"stew\\\": \\\"🍲\\\",\\n\\\"fondue\\\": \\\"🫕\\\",\\n\\\"bowl_with_spoon\\\": \\\"🥣\\\",\\n\\\"green_salad\\\": \\\"🥗\\\",\\n\\\"popcorn\\\": \\\"🍿\\\",\\n\\\"butter\\\": \\\"🧈\\\",\\n\\\"salt\\\": \\\"🧂\\\",\\n\\\"canned_food\\\": \\\"🥫\\\",\\n\\\"bento\\\": \\\"🍱\\\",\\n\\\"rice_cracker\\\": \\\"🍘\\\",\\n\\\"rice_ball\\\": \\\"🍙\\\",\\n\\\"rice\\\": \\\"🍚\\\",\\n\\\"curry\\\": \\\"🍛\\\",\\n\\\"ramen\\\": \\\"🍜\\\",\\n\\\"spaghetti\\\": \\\"🍝\\\",\\n\\\"sweet_potato\\\": \\\"🍠\\\",\\n\\\"oden\\\": \\\"🍢\\\",\\n\\\"sushi\\\": \\\"🍣\\\",\\n\\\"fried_shrimp\\\": \\\"🍤\\\",\\n\\\"fish_cake\\\": \\\"🍥\\\",\\n\\\"moon_cake\\\": \\\"🥮\\\",\\n\\\"dango\\\": \\\"🍡\\\",\\n\\\"dumpling\\\": \\\"🥟\\\",\\n\\\"fortune_cookie\\\": \\\"🥠\\\",\\n\\\"takeout_box\\\": \\\"🥡\\\",\\n\\\"crab\\\": \\\"🦀\\\",\\n\\\"lobster\\\": \\\"🦞\\\",\\n\\\"shrimp\\\": \\\"🦐\\\",\\n\\\"squid\\\": \\\"🦑\\\",\\n\\\"oyster\\\": \\\"🦪\\\",\\n\\\"icecream\\\": \\\"🍦\\\",\\n\\\"shaved_ice\\\": \\\"🍧\\\",\\n\\\"ice_cream\\\": \\\"🍨\\\",\\n\\\"doughnut\\\": \\\"🍩\\\",\\n\\\"cookie\\\": \\\"🍪\\\",\\n\\\"birthday\\\": \\\"🎂\\\",\\n\\\"cake\\\": \\\"🍰\\\",\\n\\\"cupcake\\\": \\\"🧁\\\",\\n\\\"pie\\\": \\\"🥧\\\",\\n\\\"chocolate_bar\\\": \\\"🍫\\\",\\n\\\"candy\\\": \\\"🍬\\\",\\n\\\"lollipop\\\": \\\"🍭\\\",\\n\\\"custard\\\": \\\"🍮\\\",\\n\\\"honey_pot\\\": \\\"🍯\\\",\\n\\\"baby_bottle\\\": \\\"🍼\\\",\\n\\\"milk_glass\\\": \\\"🥛\\\",\\n\\\"coffee\\\": \\\"☕\\\",\\n\\\"teapot\\\": \\\"🫖\\\",\\n\\\"tea\\\": \\\"🍵\\\",\\n\\\"sake\\\": \\\"🍶\\\",\\n\\\"champagne\\\": \\\"🍾\\\",\\n\\\"wine_glass\\\": \\\"🍷\\\",\\n\\\"cocktail\\\": \\\"🍸\\\",\\n\\\"tropical_drink\\\": \\\"🍹\\\",\\n\\\"beer\\\": \\\"🍺\\\",\\n\\\"beers\\\": \\\"🍻\\\",\\n\\\"clinking_glasses\\\": \\\"🥂\\\",\\n\\\"tumbler_glass\\\": \\\"🥃\\\",\\n\\\"pouring_liquid\\\": \\\"🫗\\\",\\n\\\"cup_with_straw\\\": \\\"🥤\\\",\\n\\\"bubble_tea\\\": \\\"🧋\\\",\\n\\\"beverage_box\\\": \\\"🧃\\\",\\n\\\"mate\\\": \\\"🧉\\\",\\n\\\"ice_cube\\\": \\\"🧊\\\",\\n\\\"chopsticks\\\": \\\"🥢\\\",\\n\\\"plate_with_cutlery\\\": \\\"🍽️\\\",\\n\\\"fork_and_knife\\\": \\\"🍴\\\",\\n\\\"spoon\\\": \\\"🥄\\\",\\n\\\"hocho\\\": \\\"🔪\\\",\\n\\\"knife\\\": \\\"🔪\\\",\\n\\\"jar\\\": \\\"🫙\\\",\\n\\\"amphora\\\": \\\"🏺\\\",\\n\\\"earth_africa\\\": \\\"🌍\\\",\\n\\\"earth_americas\\\": \\\"🌎\\\",\\n\\\"earth_asia\\\": \\\"🌏\\\",\\n\\\"globe_with_meridians\\\": \\\"🌐\\\",\\n\\\"world_map\\\": \\\"🗺️\\\",\\n\\\"japan\\\": \\\"🗾\\\",\\n\\\"compass\\\": \\\"🧭\\\",\\n\\\"mountain_snow\\\": \\\"🏔️\\\",\\n\\\"mountain\\\": \\\"⛰️\\\",\\n\\\"volcano\\\": \\\"🌋\\\",\\n\\\"mount_fuji\\\": \\\"🗻\\\",\\n\\\"camping\\\": \\\"🏕️\\\",\\n\\\"beach_umbrella\\\": \\\"🏖️\\\",\\n\\\"desert\\\": \\\"🏜️\\\",\\n\\\"desert_island\\\": \\\"🏝️\\\",\\n\\\"national_park\\\": \\\"🏞️\\\",\\n\\\"stadium\\\": \\\"🏟️\\\",\\n\\\"classical_building\\\": \\\"🏛️\\\",\\n\\\"building_construction\\\": \\\"🏗️\\\",\\n\\\"bricks\\\": \\\"🧱\\\",\\n\\\"rock\\\": \\\"🪨\\\",\\n\\\"wood\\\": \\\"🪵\\\",\\n\\\"hut\\\": \\\"🛖\\\",\\n\\\"houses\\\": \\\"🏘️\\\",\\n\\\"derelict_house\\\": \\\"🏚️\\\",\\n\\\"house\\\": \\\"🏠\\\",\\n\\\"house_with_garden\\\": \\\"🏡\\\",\\n\\\"office\\\": \\\"🏢\\\",\\n\\\"post_office\\\": \\\"🏣\\\",\\n\\\"european_post_office\\\": \\\"🏤\\\",\\n\\\"hospital\\\": \\\"🏥\\\",\\n\\\"bank\\\": \\\"🏦\\\",\\n\\\"hotel\\\": \\\"🏨\\\",\\n\\\"love_hotel\\\": \\\"🏩\\\",\\n\\\"convenience_store\\\": \\\"🏪\\\",\\n\\\"school\\\": \\\"🏫\\\",\\n\\\"department_store\\\": \\\"🏬\\\",\\n\\\"factory\\\": \\\"🏭\\\",\\n\\\"japanese_castle\\\": \\\"🏯\\\",\\n\\\"european_castle\\\": \\\"🏰\\\",\\n\\\"wedding\\\": \\\"💒\\\",\\n\\\"tokyo_tower\\\": \\\"🗼\\\",\\n\\\"statue_of_liberty\\\": \\\"🗽\\\",\\n\\\"church\\\": \\\"⛪\\\",\\n\\\"mosque\\\": \\\"🕌\\\",\\n\\\"hindu_temple\\\": \\\"🛕\\\",\\n\\\"synagogue\\\": \\\"🕍\\\",\\n\\\"shinto_shrine\\\": \\\"⛩️\\\",\\n\\\"kaaba\\\": \\\"🕋\\\",\\n\\\"fountain\\\": \\\"⛲\\\",\\n\\\"tent\\\": \\\"⛺\\\",\\n\\\"foggy\\\": \\\"🌁\\\",\\n\\\"night_with_stars\\\": \\\"🌃\\\",\\n\\\"cityscape\\\": \\\"🏙️\\\",\\n\\\"sunrise_over_mountains\\\": \\\"🌄\\\",\\n\\\"sunrise\\\": \\\"🌅\\\",\\n\\\"city_sunset\\\": \\\"🌆\\\",\\n\\\"city_sunrise\\\": \\\"🌇\\\",\\n\\\"bridge_at_night\\\": \\\"🌉\\\",\\n\\\"hotsprings\\\": \\\"♨️\\\",\\n\\\"carousel_horse\\\": \\\"🎠\\\",\\n\\\"playground_slide\\\": \\\"🛝\\\",\\n\\\"ferris_wheel\\\": \\\"🎡\\\",\\n\\\"roller_coaster\\\": \\\"🎢\\\",\\n\\\"barber\\\": \\\"💈\\\",\\n\\\"circus_tent\\\": \\\"🎪\\\",\\n\\\"steam_locomotive\\\": \\\"🚂\\\",\\n\\\"railway_car\\\": \\\"🚃\\\",\\n\\\"bullettrain_side\\\": \\\"🚄\\\",\\n\\\"bullettrain_front\\\": \\\"🚅\\\",\\n\\\"train2\\\": \\\"🚆\\\",\\n\\\"metro\\\": \\\"🚇\\\",\\n\\\"light_rail\\\": \\\"🚈\\\",\\n\\\"station\\\": \\\"🚉\\\",\\n\\\"tram\\\": \\\"🚊\\\",\\n\\\"monorail\\\": \\\"🚝\\\",\\n\\\"mountain_railway\\\": \\\"🚞\\\",\\n\\\"train\\\": \\\"🚋\\\",\\n\\\"bus\\\": \\\"🚌\\\",\\n\\\"oncoming_bus\\\": \\\"🚍\\\",\\n\\\"trolleybus\\\": \\\"🚎\\\",\\n\\\"minibus\\\": \\\"🚐\\\",\\n\\\"ambulance\\\": \\\"🚑\\\",\\n\\\"fire_engine\\\": \\\"🚒\\\",\\n\\\"police_car\\\": \\\"🚓\\\",\\n\\\"oncoming_police_car\\\": \\\"🚔\\\",\\n\\\"taxi\\\": \\\"🚕\\\",\\n\\\"oncoming_taxi\\\": \\\"🚖\\\",\\n\\\"car\\\": \\\"🚗\\\",\\n\\\"red_car\\\": \\\"🚗\\\",\\n\\\"oncoming_automobile\\\": \\\"🚘\\\",\\n\\\"blue_car\\\": \\\"🚙\\\",\\n\\\"pickup_truck\\\": \\\"🛻\\\",\\n\\\"truck\\\": \\\"🚚\\\",\\n\\\"articulated_lorry\\\": \\\"🚛\\\",\\n\\\"tractor\\\": \\\"🚜\\\",\\n\\\"racing_car\\\": \\\"🏎️\\\",\\n\\\"motorcycle\\\": \\\"🏍️\\\",\\n\\\"motor_scooter\\\": \\\"🛵\\\",\\n\\\"manual_wheelchair\\\": \\\"🦽\\\",\\n\\\"motorized_wheelchair\\\": \\\"🦼\\\",\\n\\\"auto_rickshaw\\\": \\\"🛺\\\",\\n\\\"bike\\\": \\\"🚲\\\",\\n\\\"kick_scooter\\\": \\\"🛴\\\",\\n\\\"skateboard\\\": \\\"🛹\\\",\\n\\\"roller_skate\\\": \\\"🛼\\\",\\n\\\"busstop\\\": \\\"🚏\\\",\\n\\\"motorway\\\": \\\"🛣️\\\",\\n\\\"railway_track\\\": \\\"🛤️\\\",\\n\\\"oil_drum\\\": \\\"🛢️\\\",\\n\\\"fuelpump\\\": \\\"⛽\\\",\\n\\\"wheel\\\": \\\"🛞\\\",\\n\\\"rotating_light\\\": \\\"🚨\\\",\\n\\\"traffic_light\\\": \\\"🚥\\\",\\n\\\"vertical_traffic_light\\\": \\\"🚦\\\",\\n\\\"stop_sign\\\": \\\"🛑\\\",\\n\\\"construction\\\": \\\"🚧\\\",\\n\\\"anchor\\\": \\\"⚓\\\",\\n\\\"ring_buoy\\\": \\\"🛟\\\",\\n\\\"boat\\\": \\\"⛵\\\",\\n\\\"sailboat\\\": \\\"⛵\\\",\\n\\\"canoe\\\": \\\"🛶\\\",\\n\\\"speedboat\\\": \\\"🚤\\\",\\n\\\"passenger_ship\\\": \\\"🛳️\\\",\\n\\\"ferry\\\": \\\"⛴️\\\",\\n\\\"motor_boat\\\": \\\"🛥️\\\",\\n\\\"ship\\\": \\\"🚢\\\",\\n\\\"airplane\\\": \\\"✈️\\\",\\n\\\"small_airplane\\\": \\\"🛩️\\\",\\n\\\"flight_departure\\\": \\\"🛫\\\",\\n\\\"flight_arrival\\\": \\\"🛬\\\",\\n\\\"parachute\\\": \\\"🪂\\\",\\n\\\"seat\\\": \\\"💺\\\",\\n\\\"helicopter\\\": \\\"🚁\\\",\\n\\\"suspension_railway\\\": \\\"🚟\\\",\\n\\\"mountain_cableway\\\": \\\"🚠\\\",\\n\\\"aerial_tramway\\\": \\\"🚡\\\",\\n\\\"artificial_satellite\\\": \\\"🛰️\\\",\\n\\\"rocket\\\": \\\"🚀\\\",\\n\\\"flying_saucer\\\": \\\"🛸\\\",\\n\\\"bellhop_bell\\\": \\\"🛎️\\\",\\n\\\"luggage\\\": \\\"🧳\\\",\\n\\\"hourglass\\\": \\\"⌛\\\",\\n\\\"hourglass_flowing_sand\\\": \\\"⏳\\\",\\n\\\"watch\\\": \\\"⌚\\\",\\n\\\"alarm_clock\\\": \\\"⏰\\\",\\n\\\"stopwatch\\\": \\\"⏱️\\\",\\n\\\"timer_clock\\\": \\\"⏲️\\\",\\n\\\"mantelpiece_clock\\\": \\\"🕰️\\\",\\n\\\"clock12\\\": \\\"🕛\\\",\\n\\\"clock1230\\\": \\\"🕧\\\",\\n\\\"clock1\\\": \\\"🕐\\\",\\n\\\"clock130\\\": \\\"🕜\\\",\\n\\\"clock2\\\": \\\"🕑\\\",\\n\\\"clock230\\\": \\\"🕝\\\",\\n\\\"clock3\\\": \\\"🕒\\\",\\n\\\"clock330\\\": \\\"🕞\\\",\\n\\\"clock4\\\": \\\"🕓\\\",\\n\\\"clock430\\\": \\\"🕟\\\",\\n\\\"clock5\\\": \\\"🕔\\\",\\n\\\"clock530\\\": \\\"🕠\\\",\\n\\\"clock6\\\": \\\"🕕\\\",\\n\\\"clock630\\\": \\\"🕡\\\",\\n\\\"clock7\\\": \\\"🕖\\\",\\n\\\"clock730\\\": \\\"🕢\\\",\\n\\\"clock8\\\": \\\"🕗\\\",\\n\\\"clock830\\\": \\\"🕣\\\",\\n\\\"clock9\\\": \\\"🕘\\\",\\n\\\"clock930\\\": \\\"🕤\\\",\\n\\\"clock10\\\": \\\"🕙\\\",\\n\\\"clock1030\\\": \\\"🕥\\\",\\n\\\"clock11\\\": \\\"🕚\\\",\\n\\\"clock1130\\\": \\\"🕦\\\",\\n\\\"new_moon\\\": \\\"🌑\\\",\\n\\\"waxing_crescent_moon\\\": \\\"🌒\\\",\\n\\\"first_quarter_moon\\\": \\\"🌓\\\",\\n\\\"moon\\\": \\\"🌔\\\",\\n\\\"waxing_gibbous_moon\\\": \\\"🌔\\\",\\n\\\"full_moon\\\": \\\"🌕\\\",\\n\\\"waning_gibbous_moon\\\": \\\"🌖\\\",\\n\\\"last_quarter_moon\\\": \\\"🌗\\\",\\n\\\"waning_crescent_moon\\\": \\\"🌘\\\",\\n\\\"crescent_moon\\\": \\\"🌙\\\",\\n\\\"new_moon_with_face\\\": \\\"🌚\\\",\\n\\\"first_quarter_moon_with_face\\\": \\\"🌛\\\",\\n\\\"last_quarter_moon_with_face\\\": \\\"🌜\\\",\\n\\\"thermometer\\\": \\\"🌡️\\\",\\n\\\"sunny\\\": \\\"☀️\\\",\\n\\\"full_moon_with_face\\\": \\\"🌝\\\",\\n\\\"sun_with_face\\\": \\\"🌞\\\",\\n\\\"ringed_planet\\\": \\\"🪐\\\",\\n\\\"star\\\": \\\"⭐\\\",\\n\\\"star2\\\": \\\"🌟\\\",\\n\\\"stars\\\": \\\"🌠\\\",\\n\\\"milky_way\\\": \\\"🌌\\\",\\n\\\"cloud\\\": \\\"☁️\\\",\\n\\\"partly_sunny\\\": \\\"⛅\\\",\\n\\\"cloud_with_lightning_and_rain\\\": \\\"⛈️\\\",\\n\\\"sun_behind_small_cloud\\\": \\\"🌤️\\\",\\n\\\"sun_behind_large_cloud\\\": \\\"🌥️\\\",\\n\\\"sun_behind_rain_cloud\\\": \\\"🌦️\\\",\\n\\\"cloud_with_rain\\\": \\\"🌧️\\\",\\n\\\"cloud_with_snow\\\": \\\"🌨️\\\",\\n\\\"cloud_with_lightning\\\": \\\"🌩️\\\",\\n\\\"tornado\\\": \\\"🌪️\\\",\\n\\\"fog\\\": \\\"🌫️\\\",\\n\\\"wind_face\\\": \\\"🌬️\\\",\\n\\\"cyclone\\\": \\\"🌀\\\",\\n\\\"rainbow\\\": \\\"🌈\\\",\\n\\\"closed_umbrella\\\": \\\"🌂\\\",\\n\\\"open_umbrella\\\": \\\"☂️\\\",\\n\\\"umbrella\\\": \\\"☔\\\",\\n\\\"parasol_on_ground\\\": \\\"⛱️\\\",\\n\\\"zap\\\": \\\"⚡\\\",\\n\\\"snowflake\\\": \\\"❄️\\\",\\n\\\"snowman_with_snow\\\": \\\"☃️\\\",\\n\\\"snowman\\\": \\\"⛄\\\",\\n\\\"comet\\\": \\\"☄️\\\",\\n\\\"fire\\\": \\\"🔥\\\",\\n\\\"droplet\\\": \\\"💧\\\",\\n\\\"ocean\\\": \\\"🌊\\\",\\n\\\"jack_o_lantern\\\": \\\"🎃\\\",\\n\\\"christmas_tree\\\": \\\"🎄\\\",\\n\\\"fireworks\\\": \\\"🎆\\\",\\n\\\"sparkler\\\": \\\"🎇\\\",\\n\\\"firecracker\\\": \\\"🧨\\\",\\n\\\"sparkles\\\": \\\"✨\\\",\\n\\\"balloon\\\": \\\"🎈\\\",\\n\\\"tada\\\": \\\"🎉\\\",\\n\\\"confetti_ball\\\": \\\"🎊\\\",\\n\\\"tanabata_tree\\\": \\\"🎋\\\",\\n\\\"bamboo\\\": \\\"🎍\\\",\\n\\\"dolls\\\": \\\"🎎\\\",\\n\\\"flags\\\": \\\"🎏\\\",\\n\\\"wind_chime\\\": \\\"🎐\\\",\\n\\\"rice_scene\\\": \\\"🎑\\\",\\n\\\"red_envelope\\\": \\\"🧧\\\",\\n\\\"ribbon\\\": \\\"🎀\\\",\\n\\\"gift\\\": \\\"🎁\\\",\\n\\\"reminder_ribbon\\\": \\\"🎗️\\\",\\n\\\"tickets\\\": \\\"🎟️\\\",\\n\\\"ticket\\\": \\\"🎫\\\",\\n\\\"medal_military\\\": \\\"🎖️\\\",\\n\\\"trophy\\\": \\\"🏆\\\",\\n\\\"medal_sports\\\": \\\"🏅\\\",\\n\\\"1st_place_medal\\\": \\\"🥇\\\",\\n\\\"2nd_place_medal\\\": \\\"🥈\\\",\\n\\\"3rd_place_medal\\\": \\\"🥉\\\",\\n\\\"soccer\\\": \\\"⚽\\\",\\n\\\"baseball\\\": \\\"⚾\\\",\\n\\\"softball\\\": \\\"🥎\\\",\\n\\\"basketball\\\": \\\"🏀\\\",\\n\\\"volleyball\\\": \\\"🏐\\\",\\n\\\"football\\\": \\\"🏈\\\",\\n\\\"rugby_football\\\": \\\"🏉\\\",\\n\\\"tennis\\\": \\\"🎾\\\",\\n\\\"flying_disc\\\": \\\"🥏\\\",\\n\\\"bowling\\\": \\\"🎳\\\",\\n\\\"cricket_game\\\": \\\"🏏\\\",\\n\\\"field_hockey\\\": \\\"🏑\\\",\\n\\\"ice_hockey\\\": \\\"🏒\\\",\\n\\\"lacrosse\\\": \\\"🥍\\\",\\n\\\"ping_pong\\\": \\\"🏓\\\",\\n\\\"badminton\\\": \\\"🏸\\\",\\n\\\"boxing_glove\\\": \\\"🥊\\\",\\n\\\"martial_arts_uniform\\\": \\\"🥋\\\",\\n\\\"goal_net\\\": \\\"🥅\\\",\\n\\\"golf\\\": \\\"⛳\\\",\\n\\\"ice_skate\\\": \\\"⛸️\\\",\\n\\\"fishing_pole_and_fish\\\": \\\"🎣\\\",\\n\\\"diving_mask\\\": \\\"🤿\\\",\\n\\\"running_shirt_with_sash\\\": \\\"🎽\\\",\\n\\\"ski\\\": \\\"🎿\\\",\\n\\\"sled\\\": \\\"🛷\\\",\\n\\\"curling_stone\\\": \\\"🥌\\\",\\n\\\"dart\\\": \\\"🎯\\\",\\n\\\"yo_yo\\\": \\\"🪀\\\",\\n\\\"kite\\\": \\\"🪁\\\",\\n\\\"gun\\\": \\\"🔫\\\",\\n\\\"8ball\\\": \\\"🎱\\\",\\n\\\"crystal_ball\\\": \\\"🔮\\\",\\n\\\"magic_wand\\\": \\\"🪄\\\",\\n\\\"video_game\\\": \\\"🎮\\\",\\n\\\"joystick\\\": \\\"🕹️\\\",\\n\\\"slot_machine\\\": \\\"🎰\\\",\\n\\\"game_die\\\": \\\"🎲\\\",\\n\\\"jigsaw\\\": \\\"🧩\\\",\\n\\\"teddy_bear\\\": \\\"🧸\\\",\\n\\\"pinata\\\": \\\"🪅\\\",\\n\\\"mirror_ball\\\": \\\"🪩\\\",\\n\\\"nesting_dolls\\\": \\\"🪆\\\",\\n\\\"spades\\\": \\\"♠️\\\",\\n\\\"hearts\\\": \\\"♥️\\\",\\n\\\"diamonds\\\": \\\"♦️\\\",\\n\\\"clubs\\\": \\\"♣️\\\",\\n\\\"chess_pawn\\\": \\\"♟️\\\",\\n\\\"black_joker\\\": \\\"🃏\\\",\\n\\\"mahjong\\\": \\\"🀄\\\",\\n\\\"flower_playing_cards\\\": \\\"🎴\\\",\\n\\\"performing_arts\\\": \\\"🎭\\\",\\n\\\"framed_picture\\\": \\\"🖼️\\\",\\n\\\"art\\\": \\\"🎨\\\",\\n\\\"thread\\\": \\\"🧵\\\",\\n\\\"sewing_needle\\\": \\\"🪡\\\",\\n\\\"yarn\\\": \\\"🧶\\\",\\n\\\"knot\\\": \\\"🪢\\\",\\n\\\"eyeglasses\\\": \\\"👓\\\",\\n\\\"dark_sunglasses\\\": \\\"🕶️\\\",\\n\\\"goggles\\\": \\\"🥽\\\",\\n\\\"lab_coat\\\": \\\"🥼\\\",\\n\\\"safety_vest\\\": \\\"🦺\\\",\\n\\\"necktie\\\": \\\"👔\\\",\\n\\\"shirt\\\": \\\"👕\\\",\\n\\\"tshirt\\\": \\\"👕\\\",\\n\\\"jeans\\\": \\\"👖\\\",\\n\\\"scarf\\\": \\\"🧣\\\",\\n\\\"gloves\\\": \\\"🧤\\\",\\n\\\"coat\\\": \\\"🧥\\\",\\n\\\"socks\\\": \\\"🧦\\\",\\n\\\"dress\\\": \\\"👗\\\",\\n\\\"kimono\\\": \\\"👘\\\",\\n\\\"sari\\\": \\\"🥻\\\",\\n\\\"one_piece_swimsuit\\\": \\\"🩱\\\",\\n\\\"swim_brief\\\": \\\"🩲\\\",\\n\\\"shorts\\\": \\\"🩳\\\",\\n\\\"bikini\\\": \\\"👙\\\",\\n\\\"womans_clothes\\\": \\\"👚\\\",\\n\\\"folding_hand_fan\\\": \\\"🪭\\\",\\n\\\"purse\\\": \\\"👛\\\",\\n\\\"handbag\\\": \\\"👜\\\",\\n\\\"pouch\\\": \\\"👝\\\",\\n\\\"shopping\\\": \\\"🛍️\\\",\\n\\\"school_satchel\\\": \\\"🎒\\\",\\n\\\"thong_sandal\\\": \\\"🩴\\\",\\n\\\"mans_shoe\\\": \\\"👞\\\",\\n\\\"shoe\\\": \\\"👞\\\",\\n\\\"athletic_shoe\\\": \\\"👟\\\",\\n\\\"hiking_boot\\\": \\\"🥾\\\",\\n\\\"flat_shoe\\\": \\\"🥿\\\",\\n\\\"high_heel\\\": \\\"👠\\\",\\n\\\"sandal\\\": \\\"👡\\\",\\n\\\"ballet_shoes\\\": \\\"🩰\\\",\\n\\\"boot\\\": \\\"👢\\\",\\n\\\"hair_pick\\\": \\\"🪮\\\",\\n\\\"crown\\\": \\\"👑\\\",\\n\\\"womans_hat\\\": \\\"👒\\\",\\n\\\"tophat\\\": \\\"🎩\\\",\\n\\\"mortar_board\\\": \\\"🎓\\\",\\n\\\"billed_cap\\\": \\\"🧢\\\",\\n\\\"military_helmet\\\": \\\"🪖\\\",\\n\\\"rescue_worker_helmet\\\": \\\"⛑️\\\",\\n\\\"prayer_beads\\\": \\\"📿\\\",\\n\\\"lipstick\\\": \\\"💄\\\",\\n\\\"ring\\\": \\\"💍\\\",\\n\\\"gem\\\": \\\"💎\\\",\\n\\\"mute\\\": \\\"🔇\\\",\\n\\\"speaker\\\": \\\"🔈\\\",\\n\\\"sound\\\": \\\"🔉\\\",\\n\\\"loud_sound\\\": \\\"🔊\\\",\\n\\\"loudspeaker\\\": \\\"📢\\\",\\n\\\"mega\\\": \\\"📣\\\",\\n\\\"postal_horn\\\": \\\"📯\\\",\\n\\\"bell\\\": \\\"🔔\\\",\\n\\\"no_bell\\\": \\\"🔕\\\",\\n\\\"musical_score\\\": \\\"🎼\\\",\\n\\\"musical_note\\\": \\\"🎵\\\",\\n\\\"notes\\\": \\\"🎶\\\",\\n\\\"studio_microphone\\\": \\\"🎙️\\\",\\n\\\"level_slider\\\": \\\"🎚️\\\",\\n\\\"control_knobs\\\": \\\"🎛️\\\",\\n\\\"microphone\\\": \\\"🎤\\\",\\n\\\"headphones\\\": \\\"🎧\\\",\\n\\\"radio\\\": \\\"📻\\\",\\n\\\"saxophone\\\": \\\"🎷\\\",\\n\\\"accordion\\\": \\\"🪗\\\",\\n\\\"guitar\\\": \\\"🎸\\\",\\n\\\"musical_keyboard\\\": \\\"🎹\\\",\\n\\\"trumpet\\\": \\\"🎺\\\",\\n\\\"violin\\\": \\\"🎻\\\",\\n\\\"banjo\\\": \\\"🪕\\\",\\n\\\"drum\\\": \\\"🥁\\\",\\n\\\"long_drum\\\": \\\"🪘\\\",\\n\\\"maracas\\\": \\\"🪇\\\",\\n\\\"flute\\\": \\\"🪈\\\",\\n\\\"iphone\\\": \\\"📱\\\",\\n\\\"calling\\\": \\\"📲\\\",\\n\\\"phone\\\": \\\"☎️\\\",\\n\\\"telephone\\\": \\\"☎️\\\",\\n\\\"telephone_receiver\\\": \\\"📞\\\",\\n\\\"pager\\\": \\\"📟\\\",\\n\\\"fax\\\": \\\"📠\\\",\\n\\\"battery\\\": \\\"🔋\\\",\\n\\\"low_battery\\\": \\\"🪫\\\",\\n\\\"electric_plug\\\": \\\"🔌\\\",\\n\\\"computer\\\": \\\"💻\\\",\\n\\\"desktop_computer\\\": \\\"🖥️\\\",\\n\\\"printer\\\": \\\"🖨️\\\",\\n\\\"keyboard\\\": \\\"⌨️\\\",\\n\\\"computer_mouse\\\": \\\"🖱️\\\",\\n\\\"trackball\\\": \\\"🖲️\\\",\\n\\\"minidisc\\\": \\\"💽\\\",\\n\\\"floppy_disk\\\": \\\"💾\\\",\\n\\\"cd\\\": \\\"💿\\\",\\n\\\"dvd\\\": \\\"📀\\\",\\n\\\"abacus\\\": \\\"🧮\\\",\\n\\\"movie_camera\\\": \\\"🎥\\\",\\n\\\"film_strip\\\": \\\"🎞️\\\",\\n\\\"film_projector\\\": \\\"📽️\\\",\\n\\\"clapper\\\": \\\"🎬\\\",\\n\\\"tv\\\": \\\"📺\\\",\\n\\\"camera\\\": \\\"📷\\\",\\n\\\"camera_flash\\\": \\\"📸\\\",\\n\\\"video_camera\\\": \\\"📹\\\",\\n\\\"vhs\\\": \\\"📼\\\",\\n\\\"mag\\\": \\\"🔍\\\",\\n\\\"mag_right\\\": \\\"🔎\\\",\\n\\\"candle\\\": \\\"🕯️\\\",\\n\\\"bulb\\\": \\\"💡\\\",\\n\\\"flashlight\\\": \\\"🔦\\\",\\n\\\"izakaya_lantern\\\": \\\"🏮\\\",\\n\\\"lantern\\\": \\\"🏮\\\",\\n\\\"diya_lamp\\\": \\\"🪔\\\",\\n\\\"notebook_with_decorative_cover\\\": \\\"📔\\\",\\n\\\"closed_book\\\": \\\"📕\\\",\\n\\\"book\\\": \\\"📖\\\",\\n\\\"open_book\\\": \\\"📖\\\",\\n\\\"green_book\\\": \\\"📗\\\",\\n\\\"blue_book\\\": \\\"📘\\\",\\n\\\"orange_book\\\": \\\"📙\\\",\\n\\\"books\\\": \\\"📚\\\",\\n\\\"notebook\\\": \\\"📓\\\",\\n\\\"ledger\\\": \\\"📒\\\",\\n\\\"page_with_curl\\\": \\\"📃\\\",\\n\\\"scroll\\\": \\\"📜\\\",\\n\\\"page_facing_up\\\": \\\"📄\\\",\\n\\\"newspaper\\\": \\\"📰\\\",\\n\\\"newspaper_roll\\\": \\\"🗞️\\\",\\n\\\"bookmark_tabs\\\": \\\"📑\\\",\\n\\\"bookmark\\\": \\\"🔖\\\",\\n\\\"label\\\": \\\"🏷️\\\",\\n\\\"moneybag\\\": \\\"💰\\\",\\n\\\"coin\\\": \\\"🪙\\\",\\n\\\"yen\\\": \\\"💴\\\",\\n\\\"dollar\\\": \\\"💵\\\",\\n\\\"euro\\\": \\\"💶\\\",\\n\\\"pound\\\": \\\"💷\\\",\\n\\\"money_with_wings\\\": \\\"💸\\\",\\n\\\"credit_card\\\": \\\"💳\\\",\\n\\\"receipt\\\": \\\"🧾\\\",\\n\\\"chart\\\": \\\"💹\\\",\\n\\\"envelope\\\": \\\"✉️\\\",\\n\\\"email\\\": \\\"📧\\\",\\n\\\"e-mail\\\": \\\"📧\\\",\\n\\\"incoming_envelope\\\": \\\"📨\\\",\\n\\\"envelope_with_arrow\\\": \\\"📩\\\",\\n\\\"outbox_tray\\\": \\\"📤\\\",\\n\\\"inbox_tray\\\": \\\"📥\\\",\\n\\\"package\\\": \\\"📦\\\",\\n\\\"mailbox\\\": \\\"📫\\\",\\n\\\"mailbox_closed\\\": \\\"📪\\\",\\n\\\"mailbox_with_mail\\\": \\\"📬\\\",\\n\\\"mailbox_with_no_mail\\\": \\\"📭\\\",\\n\\\"postbox\\\": \\\"📮\\\",\\n\\\"ballot_box\\\": \\\"🗳️\\\",\\n\\\"pencil2\\\": \\\"✏️\\\",\\n\\\"black_nib\\\": \\\"✒️\\\",\\n\\\"fountain_pen\\\": \\\"🖋️\\\",\\n\\\"pen\\\": \\\"🖊️\\\",\\n\\\"paintbrush\\\": \\\"🖌️\\\",\\n\\\"crayon\\\": \\\"🖍️\\\",\\n\\\"memo\\\": \\\"📝\\\",\\n\\\"pencil\\\": \\\"📝\\\",\\n\\\"briefcase\\\": \\\"💼\\\",\\n\\\"file_folder\\\": \\\"📁\\\",\\n\\\"open_file_folder\\\": \\\"📂\\\",\\n\\\"card_index_dividers\\\": \\\"🗂️\\\",\\n\\\"date\\\": \\\"📅\\\",\\n\\\"calendar\\\": \\\"📆\\\",\\n\\\"spiral_notepad\\\": \\\"🗒️\\\",\\n\\\"spiral_calendar\\\": \\\"🗓️\\\",\\n\\\"card_index\\\": \\\"📇\\\",\\n\\\"chart_with_upwards_trend\\\": \\\"📈\\\",\\n\\\"chart_with_downwards_trend\\\": \\\"📉\\\",\\n\\\"bar_chart\\\": \\\"📊\\\",\\n\\\"clipboard\\\": \\\"📋\\\",\\n\\\"pushpin\\\": \\\"📌\\\",\\n\\\"round_pushpin\\\": \\\"📍\\\",\\n\\\"paperclip\\\": \\\"📎\\\",\\n\\\"paperclips\\\": \\\"🖇️\\\",\\n\\\"straight_ruler\\\": \\\"📏\\\",\\n\\\"triangular_ruler\\\": \\\"📐\\\",\\n\\\"scissors\\\": \\\"✂️\\\",\\n\\\"card_file_box\\\": \\\"🗃️\\\",\\n\\\"file_cabinet\\\": \\\"🗄️\\\",\\n\\\"wastebasket\\\": \\\"🗑️\\\",\\n\\\"lock\\\": \\\"🔒\\\",\\n\\\"unlock\\\": \\\"🔓\\\",\\n\\\"lock_with_ink_pen\\\": \\\"🔏\\\",\\n\\\"closed_lock_with_key\\\": \\\"🔐\\\",\\n\\\"key\\\": \\\"🔑\\\",\\n\\\"old_key\\\": \\\"🗝️\\\",\\n\\\"hammer\\\": \\\"🔨\\\",\\n\\\"axe\\\": \\\"🪓\\\",\\n\\\"pick\\\": \\\"⛏️\\\",\\n\\\"hammer_and_pick\\\": \\\"⚒️\\\",\\n\\\"hammer_and_wrench\\\": \\\"🛠️\\\",\\n\\\"dagger\\\": \\\"🗡️\\\",\\n\\\"crossed_swords\\\": \\\"⚔️\\\",\\n\\\"bomb\\\": \\\"💣\\\",\\n\\\"boomerang\\\": \\\"🪃\\\",\\n\\\"bow_and_arrow\\\": \\\"🏹\\\",\\n\\\"shield\\\": \\\"🛡️\\\",\\n\\\"carpentry_saw\\\": \\\"🪚\\\",\\n\\\"wrench\\\": \\\"🔧\\\",\\n\\\"screwdriver\\\": \\\"🪛\\\",\\n\\\"nut_and_bolt\\\": \\\"🔩\\\",\\n\\\"gear\\\": \\\"⚙️\\\",\\n\\\"clamp\\\": \\\"🗜️\\\",\\n\\\"balance_scale\\\": \\\"⚖️\\\",\\n\\\"probing_cane\\\": \\\"🦯\\\",\\n\\\"link\\\": \\\"🔗\\\",\\n\\\"chains\\\": \\\"⛓️\\\",\\n\\\"hook\\\": \\\"🪝\\\",\\n\\\"toolbox\\\": \\\"🧰\\\",\\n\\\"magnet\\\": \\\"🧲\\\",\\n\\\"ladder\\\": \\\"🪜\\\",\\n\\\"alembic\\\": \\\"⚗️\\\",\\n\\\"test_tube\\\": \\\"🧪\\\",\\n\\\"petri_dish\\\": \\\"🧫\\\",\\n\\\"dna\\\": \\\"🧬\\\",\\n\\\"microscope\\\": \\\"🔬\\\",\\n\\\"telescope\\\": \\\"🔭\\\",\\n\\\"satellite\\\": \\\"📡\\\",\\n\\\"syringe\\\": \\\"💉\\\",\\n\\\"drop_of_blood\\\": \\\"🩸\\\",\\n\\\"pill\\\": \\\"💊\\\",\\n\\\"adhesive_bandage\\\": \\\"🩹\\\",\\n\\\"crutch\\\": \\\"🩼\\\",\\n\\\"stethoscope\\\": \\\"🩺\\\",\\n\\\"x_ray\\\": \\\"🩻\\\",\\n\\\"door\\\": \\\"🚪\\\",\\n\\\"elevator\\\": \\\"🛗\\\",\\n\\\"mirror\\\": \\\"🪞\\\",\\n\\\"window\\\": \\\"🪟\\\",\\n\\\"bed\\\": \\\"🛏️\\\",\\n\\\"couch_and_lamp\\\": \\\"🛋️\\\",\\n\\\"chair\\\": \\\"🪑\\\",\\n\\\"toilet\\\": \\\"🚽\\\",\\n\\\"plunger\\\": \\\"🪠\\\",\\n\\\"shower\\\": \\\"🚿\\\",\\n\\\"bathtub\\\": \\\"🛁\\\",\\n\\\"mouse_trap\\\": \\\"🪤\\\",\\n\\\"razor\\\": \\\"🪒\\\",\\n\\\"lotion_bottle\\\": \\\"🧴\\\",\\n\\\"safety_pin\\\": \\\"🧷\\\",\\n\\\"broom\\\": \\\"🧹\\\",\\n\\\"basket\\\": \\\"🧺\\\",\\n\\\"roll_of_paper\\\": \\\"🧻\\\",\\n\\\"bucket\\\": \\\"🪣\\\",\\n\\\"soap\\\": \\\"🧼\\\",\\n\\\"bubbles\\\": \\\"🫧\\\",\\n\\\"toothbrush\\\": \\\"🪥\\\",\\n\\\"sponge\\\": \\\"🧽\\\",\\n\\\"fire_extinguisher\\\": \\\"🧯\\\",\\n\\\"shopping_cart\\\": \\\"🛒\\\",\\n\\\"smoking\\\": \\\"🚬\\\",\\n\\\"coffin\\\": \\\"⚰️\\\",\\n\\\"headstone\\\": \\\"🪦\\\",\\n\\\"funeral_urn\\\": \\\"⚱️\\\",\\n\\\"nazar_amulet\\\": \\\"🧿\\\",\\n\\\"hamsa\\\": \\\"🪬\\\",\\n\\\"moyai\\\": \\\"🗿\\\",\\n\\\"placard\\\": \\\"🪧\\\",\\n\\\"identification_card\\\": \\\"🪪\\\",\\n\\\"atm\\\": \\\"🏧\\\",\\n\\\"put_litter_in_its_place\\\": \\\"🚮\\\",\\n\\\"potable_water\\\": \\\"🚰\\\",\\n\\\"wheelchair\\\": \\\"♿\\\",\\n\\\"mens\\\": \\\"🚹\\\",\\n\\\"womens\\\": \\\"🚺\\\",\\n\\\"restroom\\\": \\\"🚻\\\",\\n\\\"baby_symbol\\\": \\\"🚼\\\",\\n\\\"wc\\\": \\\"🚾\\\",\\n\\\"passport_control\\\": \\\"🛂\\\",\\n\\\"customs\\\": \\\"🛃\\\",\\n\\\"baggage_claim\\\": \\\"🛄\\\",\\n\\\"left_luggage\\\": \\\"🛅\\\",\\n\\\"warning\\\": \\\"⚠️\\\",\\n\\\"children_crossing\\\": \\\"🚸\\\",\\n\\\"no_entry\\\": \\\"⛔\\\",\\n\\\"no_entry_sign\\\": \\\"🚫\\\",\\n\\\"no_bicycles\\\": \\\"🚳\\\",\\n\\\"no_smoking\\\": \\\"🚭\\\",\\n\\\"do_not_litter\\\": \\\"🚯\\\",\\n\\\"non-potable_water\\\": \\\"🚱\\\",\\n\\\"no_pedestrians\\\": \\\"🚷\\\",\\n\\\"no_mobile_phones\\\": \\\"📵\\\",\\n\\\"underage\\\": \\\"🔞\\\",\\n\\\"radioactive\\\": \\\"☢️\\\",\\n\\\"biohazard\\\": \\\"☣️\\\",\\n\\\"arrow_up\\\": \\\"⬆️\\\",\\n\\\"arrow_upper_right\\\": \\\"↗️\\\",\\n\\\"arrow_right\\\": \\\"➡️\\\",\\n\\\"arrow_lower_right\\\": \\\"↘️\\\",\\n\\\"arrow_down\\\": \\\"⬇️\\\",\\n\\\"arrow_lower_left\\\": \\\"↙️\\\",\\n\\\"arrow_left\\\": \\\"⬅️\\\",\\n\\\"arrow_upper_left\\\": \\\"↖️\\\",\\n\\\"arrow_up_down\\\": \\\"↕️\\\",\\n\\\"left_right_arrow\\\": \\\"↔️\\\",\\n\\\"leftwards_arrow_with_hook\\\": \\\"↩️\\\",\\n\\\"arrow_right_hook\\\": \\\"↪️\\\",\\n\\\"arrow_heading_up\\\": \\\"⤴️\\\",\\n\\\"arrow_heading_down\\\": \\\"⤵️\\\",\\n\\\"arrows_clockwise\\\": \\\"🔃\\\",\\n\\\"arrows_counterclockwise\\\": \\\"🔄\\\",\\n\\\"back\\\": \\\"🔙\\\",\\n\\\"end\\\": \\\"🔚\\\",\\n\\\"on\\\": \\\"🔛\\\",\\n\\\"soon\\\": \\\"🔜\\\",\\n\\\"top\\\": \\\"🔝\\\",\\n\\\"place_of_worship\\\": \\\"🛐\\\",\\n\\\"atom_symbol\\\": \\\"⚛️\\\",\\n\\\"om\\\": \\\"🕉️\\\",\\n\\\"star_of_david\\\": \\\"✡️\\\",\\n\\\"wheel_of_dharma\\\": \\\"☸️\\\",\\n\\\"yin_yang\\\": \\\"☯️\\\",\\n\\\"latin_cross\\\": \\\"✝️\\\",\\n\\\"orthodox_cross\\\": \\\"☦️\\\",\\n\\\"star_and_crescent\\\": \\\"☪️\\\",\\n\\\"peace_symbol\\\": \\\"☮️\\\",\\n\\\"menorah\\\": \\\"🕎\\\",\\n\\\"six_pointed_star\\\": \\\"🔯\\\",\\n\\\"khanda\\\": \\\"🪯\\\",\\n\\\"aries\\\": \\\"♈\\\",\\n\\\"taurus\\\": \\\"♉\\\",\\n\\\"gemini\\\": \\\"♊\\\",\\n\\\"cancer\\\": \\\"♋\\\",\\n\\\"leo\\\": \\\"♌\\\",\\n\\\"virgo\\\": \\\"♍\\\",\\n\\\"libra\\\": \\\"♎\\\",\\n\\\"scorpius\\\": \\\"♏\\\",\\n\\\"sagittarius\\\": \\\"♐\\\",\\n\\\"capricorn\\\": \\\"♑\\\",\\n\\\"aquarius\\\": \\\"♒\\\",\\n\\\"pisces\\\": \\\"♓\\\",\\n\\\"ophiuchus\\\": \\\"⛎\\\",\\n\\\"twisted_rightwards_arrows\\\": \\\"🔀\\\",\\n\\\"repeat\\\": \\\"🔁\\\",\\n\\\"repeat_one\\\": \\\"🔂\\\",\\n\\\"arrow_forward\\\": \\\"▶️\\\",\\n\\\"fast_forward\\\": \\\"⏩\\\",\\n\\\"next_track_button\\\": \\\"⏭️\\\",\\n\\\"play_or_pause_button\\\": \\\"⏯️\\\",\\n\\\"arrow_backward\\\": \\\"◀️\\\",\\n\\\"rewind\\\": \\\"⏪\\\",\\n\\\"previous_track_button\\\": \\\"⏮️\\\",\\n\\\"arrow_up_small\\\": \\\"🔼\\\",\\n\\\"arrow_double_up\\\": \\\"⏫\\\",\\n\\\"arrow_down_small\\\": \\\"🔽\\\",\\n\\\"arrow_double_down\\\": \\\"⏬\\\",\\n\\\"pause_button\\\": \\\"⏸️\\\",\\n\\\"stop_button\\\": \\\"⏹️\\\",\\n\\\"record_button\\\": \\\"⏺️\\\",\\n\\\"eject_button\\\": \\\"⏏️\\\",\\n\\\"cinema\\\": \\\"🎦\\\",\\n\\\"low_brightness\\\": \\\"🔅\\\",\\n\\\"high_brightness\\\": \\\"🔆\\\",\\n\\\"signal_strength\\\": \\\"📶\\\",\\n\\\"wireless\\\": \\\"🛜\\\",\\n\\\"vibration_mode\\\": \\\"📳\\\",\\n\\\"mobile_phone_off\\\": \\\"📴\\\",\\n\\\"female_sign\\\": \\\"♀️\\\",\\n\\\"male_sign\\\": \\\"♂️\\\",\\n\\\"transgender_symbol\\\": \\\"⚧️\\\",\\n\\\"heavy_multiplication_x\\\": \\\"✖️\\\",\\n\\\"heavy_plus_sign\\\": \\\"➕\\\",\\n\\\"heavy_minus_sign\\\": \\\"➖\\\",\\n\\\"heavy_division_sign\\\": \\\"➗\\\",\\n\\\"heavy_equals_sign\\\": \\\"🟰\\\",\\n\\\"infinity\\\": \\\"♾️\\\",\\n\\\"bangbang\\\": \\\"‼️\\\",\\n\\\"interrobang\\\": \\\"⁉️\\\",\\n\\\"question\\\": \\\"❓\\\",\\n\\\"grey_question\\\": \\\"❔\\\",\\n\\\"grey_exclamation\\\": \\\"❕\\\",\\n\\\"exclamation\\\": \\\"❗\\\",\\n\\\"heavy_exclamation_mark\\\": \\\"❗\\\",\\n\\\"wavy_dash\\\": \\\"〰️\\\",\\n\\\"currency_exchange\\\": \\\"💱\\\",\\n\\\"heavy_dollar_sign\\\": \\\"💲\\\",\\n\\\"medical_symbol\\\": \\\"⚕️\\\",\\n\\\"recycle\\\": \\\"♻️\\\",\\n\\\"fleur_de_lis\\\": \\\"⚜️\\\",\\n\\\"trident\\\": \\\"🔱\\\",\\n\\\"name_badge\\\": \\\"📛\\\",\\n\\\"beginner\\\": \\\"🔰\\\",\\n\\\"o\\\": \\\"⭕\\\",\\n\\\"white_check_mark\\\": \\\"✅\\\",\\n\\\"ballot_box_with_check\\\": \\\"☑️\\\",\\n\\\"heavy_check_mark\\\": \\\"✔️\\\",\\n\\\"x\\\": \\\"❌\\\",\\n\\\"negative_squared_cross_mark\\\": \\\"❎\\\",\\n\\\"curly_loop\\\": \\\"➰\\\",\\n\\\"loop\\\": \\\"➿\\\",\\n\\\"part_alternation_mark\\\": \\\"〽️\\\",\\n\\\"eight_spoked_asterisk\\\": \\\"✳️\\\",\\n\\\"eight_pointed_black_star\\\": \\\"✴️\\\",\\n\\\"sparkle\\\": \\\"❇️\\\",\\n\\\"copyright\\\": \\\"©️\\\",\\n\\\"registered\\\": \\\"®️\\\",\\n\\\"tm\\\": \\\"™️\\\",\\n\\\"hash\\\": \\\"#️⃣\\\",\\n\\\"asterisk\\\": \\\"*️⃣\\\",\\n\\\"zero\\\": \\\"0️⃣\\\",\\n\\\"one\\\": \\\"1️⃣\\\",\\n\\\"two\\\": \\\"2️⃣\\\",\\n\\\"three\\\": \\\"3️⃣\\\",\\n\\\"four\\\": \\\"4️⃣\\\",\\n\\\"five\\\": \\\"5️⃣\\\",\\n\\\"six\\\": \\\"6️⃣\\\",\\n\\\"seven\\\": \\\"7️⃣\\\",\\n\\\"eight\\\": \\\"8️⃣\\\",\\n\\\"nine\\\": \\\"9️⃣\\\",\\n\\\"keycap_ten\\\": \\\"🔟\\\",\\n\\\"capital_abcd\\\": \\\"🔠\\\",\\n\\\"abcd\\\": \\\"🔡\\\",\\n\\\"symbols\\\": \\\"🔣\\\",\\n\\\"abc\\\": \\\"🔤\\\",\\n\\\"a\\\": \\\"🅰️\\\",\\n\\\"ab\\\": \\\"🆎\\\",\\n\\\"b\\\": \\\"🅱️\\\",\\n\\\"cl\\\": \\\"🆑\\\",\\n\\\"cool\\\": \\\"🆒\\\",\\n\\\"free\\\": \\\"🆓\\\",\\n\\\"information_source\\\": \\\"ℹ️\\\",\\n\\\"id\\\": \\\"🆔\\\",\\n\\\"m\\\": \\\"Ⓜ️\\\",\\n\\\"new\\\": \\\"🆕\\\",\\n\\\"ng\\\": \\\"🆖\\\",\\n\\\"o2\\\": \\\"🅾️\\\",\\n\\\"ok\\\": \\\"🆗\\\",\\n\\\"parking\\\": \\\"🅿️\\\",\\n\\\"sos\\\": \\\"🆘\\\",\\n\\\"up\\\": \\\"🆙\\\",\\n\\\"vs\\\": \\\"🆚\\\",\\n\\\"koko\\\": \\\"🈁\\\",\\n\\\"sa\\\": \\\"🈂️\\\",\\n\\\"ideograph_advantage\\\": \\\"🉐\\\",\\n\\\"accept\\\": \\\"🉑\\\",\\n\\\"congratulations\\\": \\\"㊗️\\\",\\n\\\"secret\\\": \\\"㊙️\\\",\\n\\\"u6e80\\\": \\\"🈵\\\",\\n\\\"red_circle\\\": \\\"🔴\\\",\\n\\\"orange_circle\\\": \\\"🟠\\\",\\n\\\"yellow_circle\\\": \\\"🟡\\\",\\n\\\"green_circle\\\": \\\"🟢\\\",\\n\\\"large_blue_circle\\\": \\\"🔵\\\",\\n\\\"purple_circle\\\": \\\"🟣\\\",\\n\\\"brown_circle\\\": \\\"🟤\\\",\\n\\\"black_circle\\\": \\\"⚫\\\",\\n\\\"white_circle\\\": \\\"⚪\\\",\\n\\\"red_square\\\": \\\"🟥\\\",\\n\\\"orange_square\\\": \\\"🟧\\\",\\n\\\"yellow_square\\\": \\\"🟨\\\",\\n\\\"green_square\\\": \\\"🟩\\\",\\n\\\"blue_square\\\": \\\"🟦\\\",\\n\\\"purple_square\\\": \\\"🟪\\\",\\n\\\"brown_square\\\": \\\"🟫\\\",\\n\\\"black_large_square\\\": \\\"⬛\\\",\\n\\\"white_large_square\\\": \\\"⬜\\\",\\n\\\"black_medium_square\\\": \\\"◼️\\\",\\n\\\"white_medium_square\\\": \\\"◻️\\\",\\n\\\"black_medium_small_square\\\": \\\"◾\\\",\\n\\\"white_medium_small_square\\\": \\\"◽\\\",\\n\\\"black_small_square\\\": \\\"▪️\\\",\\n\\\"white_small_square\\\": \\\"▫️\\\",\\n\\\"large_orange_diamond\\\": \\\"🔶\\\",\\n\\\"large_blue_diamond\\\": \\\"🔷\\\",\\n\\\"small_orange_diamond\\\": \\\"🔸\\\",\\n\\\"small_blue_diamond\\\": \\\"🔹\\\",\\n\\\"small_red_triangle\\\": \\\"🔺\\\",\\n\\\"small_red_triangle_down\\\": \\\"🔻\\\",\\n\\\"diamond_shape_with_a_dot_inside\\\": \\\"💠\\\",\\n\\\"radio_button\\\": \\\"🔘\\\",\\n\\\"white_square_button\\\": \\\"🔳\\\",\\n\\\"black_square_button\\\": \\\"🔲\\\",\\n\\\"checkered_flag\\\": \\\"🏁\\\",\\n\\\"triangular_flag_on_post\\\": \\\"🚩\\\",\\n\\\"crossed_flags\\\": \\\"🎌\\\",\\n\\\"black_flag\\\": \\\"🏴\\\",\\n\\\"white_flag\\\": \\\"🏳️\\\",\\n\\\"rainbow_flag\\\": \\\"🏳️‍🌈\\\",\\n\\\"transgender_flag\\\": \\\"🏳️‍⚧️\\\",\\n\\\"pirate_flag\\\": \\\"🏴‍☠️\\\",\\n\\\"ascension_island\\\": \\\"🇦🇨\\\",\\n\\\"andorra\\\": \\\"🇦🇩\\\",\\n\\\"united_arab_emirates\\\": \\\"🇦🇪\\\",\\n\\\"afghanistan\\\": \\\"🇦🇫\\\",\\n\\\"antigua_barbuda\\\": \\\"🇦🇬\\\",\\n\\\"anguilla\\\": \\\"🇦🇮\\\",\\n\\\"albania\\\": \\\"🇦🇱\\\",\\n\\\"armenia\\\": \\\"🇦🇲\\\",\\n\\\"angola\\\": \\\"🇦🇴\\\",\\n\\\"antarctica\\\": \\\"🇦🇶\\\",\\n\\\"argentina\\\": \\\"🇦🇷\\\",\\n\\\"american_samoa\\\": \\\"🇦🇸\\\",\\n\\\"austria\\\": \\\"🇦🇹\\\",\\n\\\"australia\\\": \\\"🇦🇺\\\",\\n\\\"aruba\\\": \\\"🇦🇼\\\",\\n\\\"aland_islands\\\": \\\"🇦🇽\\\",\\n\\\"azerbaijan\\\": \\\"🇦🇿\\\",\\n\\\"bosnia_herzegovina\\\": \\\"🇧🇦\\\",\\n\\\"barbados\\\": \\\"🇧🇧\\\",\\n\\\"bangladesh\\\": \\\"🇧🇩\\\",\\n\\\"belgium\\\": \\\"🇧🇪\\\",\\n\\\"burkina_faso\\\": \\\"🇧🇫\\\",\\n\\\"bulgaria\\\": \\\"🇧🇬\\\",\\n\\\"bahrain\\\": \\\"🇧🇭\\\",\\n\\\"burundi\\\": \\\"🇧🇮\\\",\\n\\\"benin\\\": \\\"🇧🇯\\\",\\n\\\"st_barthelemy\\\": \\\"🇧🇱\\\",\\n\\\"bermuda\\\": \\\"🇧🇲\\\",\\n\\\"brunei\\\": \\\"🇧🇳\\\",\\n\\\"bolivia\\\": \\\"🇧🇴\\\",\\n\\\"caribbean_netherlands\\\": \\\"🇧🇶\\\",\\n\\\"brazil\\\": \\\"🇧🇷\\\",\\n\\\"bahamas\\\": \\\"🇧🇸\\\",\\n\\\"bhutan\\\": \\\"🇧🇹\\\",\\n\\\"bouvet_island\\\": \\\"🇧🇻\\\",\\n\\\"botswana\\\": \\\"🇧🇼\\\",\\n\\\"belarus\\\": \\\"🇧🇾\\\",\\n\\\"belize\\\": \\\"🇧🇿\\\",\\n\\\"canada\\\": \\\"🇨🇦\\\",\\n\\\"cocos_islands\\\": \\\"🇨🇨\\\",\\n\\\"congo_kinshasa\\\": \\\"🇨🇩\\\",\\n\\\"central_african_republic\\\": \\\"🇨🇫\\\",\\n\\\"congo_brazzaville\\\": \\\"🇨🇬\\\",\\n\\\"switzerland\\\": \\\"🇨🇭\\\",\\n\\\"cote_divoire\\\": \\\"🇨🇮\\\",\\n\\\"cook_islands\\\": \\\"🇨🇰\\\",\\n\\\"chile\\\": \\\"🇨🇱\\\",\\n\\\"cameroon\\\": \\\"🇨🇲\\\",\\n\\\"cn\\\": \\\"🇨🇳\\\",\\n\\\"colombia\\\": \\\"🇨🇴\\\",\\n\\\"clipperton_island\\\": \\\"🇨🇵\\\",\\n\\\"costa_rica\\\": \\\"🇨🇷\\\",\\n\\\"cuba\\\": \\\"🇨🇺\\\",\\n\\\"cape_verde\\\": \\\"🇨🇻\\\",\\n\\\"curacao\\\": \\\"🇨🇼\\\",\\n\\\"christmas_island\\\": \\\"🇨🇽\\\",\\n\\\"cyprus\\\": \\\"🇨🇾\\\",\\n\\\"czech_republic\\\": \\\"🇨🇿\\\",\\n\\\"de\\\": \\\"🇩🇪\\\",\\n\\\"diego_garcia\\\": \\\"🇩🇬\\\",\\n\\\"djibouti\\\": \\\"🇩🇯\\\",\\n\\\"denmark\\\": \\\"🇩🇰\\\",\\n\\\"dominica\\\": \\\"🇩🇲\\\",\\n\\\"dominican_republic\\\": \\\"🇩🇴\\\",\\n\\\"algeria\\\": \\\"🇩🇿\\\",\\n\\\"ceuta_melilla\\\": \\\"🇪🇦\\\",\\n\\\"ecuador\\\": \\\"🇪🇨\\\",\\n\\\"estonia\\\": \\\"🇪🇪\\\",\\n\\\"egypt\\\": \\\"🇪🇬\\\",\\n\\\"western_sahara\\\": \\\"🇪🇭\\\",\\n\\\"eritrea\\\": \\\"🇪🇷\\\",\\n\\\"es\\\": \\\"🇪🇸\\\",\\n\\\"ethiopia\\\": \\\"🇪🇹\\\",\\n\\\"eu\\\": \\\"🇪🇺\\\",\\n\\\"european_union\\\": \\\"🇪🇺\\\",\\n\\\"finland\\\": \\\"🇫🇮\\\",\\n\\\"fiji\\\": \\\"🇫🇯\\\",\\n\\\"falkland_islands\\\": \\\"🇫🇰\\\",\\n\\\"micronesia\\\": \\\"🇫🇲\\\",\\n\\\"faroe_islands\\\": \\\"🇫🇴\\\",\\n\\\"fr\\\": \\\"🇫🇷\\\",\\n\\\"gabon\\\": \\\"🇬🇦\\\",\\n\\\"gb\\\": \\\"🇬🇧\\\",\\n\\\"uk\\\": \\\"🇬🇧\\\",\\n\\\"grenada\\\": \\\"🇬🇩\\\",\\n\\\"georgia\\\": \\\"🇬🇪\\\",\\n\\\"french_guiana\\\": \\\"🇬🇫\\\",\\n\\\"guernsey\\\": \\\"🇬🇬\\\",\\n\\\"ghana\\\": \\\"🇬🇭\\\",\\n\\\"gibraltar\\\": \\\"🇬🇮\\\",\\n\\\"greenland\\\": \\\"🇬🇱\\\",\\n\\\"gambia\\\": \\\"🇬🇲\\\",\\n\\\"guinea\\\": \\\"🇬🇳\\\",\\n\\\"guadeloupe\\\": \\\"🇬🇵\\\",\\n\\\"equatorial_guinea\\\": \\\"🇬🇶\\\",\\n\\\"greece\\\": \\\"🇬🇷\\\",\\n\\\"south_georgia_south_sandwich_islands\\\": \\\"🇬🇸\\\",\\n\\\"guatemala\\\": \\\"🇬🇹\\\",\\n\\\"guam\\\": \\\"🇬🇺\\\",\\n\\\"guinea_bissau\\\": \\\"🇬🇼\\\",\\n\\\"guyana\\\": \\\"🇬🇾\\\",\\n\\\"hong_kong\\\": \\\"🇭🇰\\\",\\n\\\"heard_mcdonald_islands\\\": \\\"🇭🇲\\\",\\n\\\"honduras\\\": \\\"🇭🇳\\\",\\n\\\"croatia\\\": \\\"🇭🇷\\\",\\n\\\"haiti\\\": \\\"🇭🇹\\\",\\n\\\"hungary\\\": \\\"🇭🇺\\\",\\n\\\"canary_islands\\\": \\\"🇮🇨\\\",\\n\\\"indonesia\\\": \\\"🇮🇩\\\",\\n\\\"ireland\\\": \\\"🇮🇪\\\",\\n\\\"israel\\\": \\\"🇮🇱\\\",\\n\\\"isle_of_man\\\": \\\"🇮🇲\\\",\\n\\\"india\\\": \\\"🇮🇳\\\",\\n\\\"british_indian_ocean_territory\\\": \\\"🇮🇴\\\",\\n\\\"iraq\\\": \\\"🇮🇶\\\",\\n\\\"iran\\\": \\\"🇮🇷\\\",\\n\\\"iceland\\\": \\\"🇮🇸\\\",\\n\\\"it\\\": \\\"🇮🇹\\\",\\n\\\"jersey\\\": \\\"🇯🇪\\\",\\n\\\"jamaica\\\": \\\"🇯🇲\\\",\\n\\\"jordan\\\": \\\"🇯🇴\\\",\\n\\\"jp\\\": \\\"🇯🇵\\\",\\n\\\"kenya\\\": \\\"🇰🇪\\\",\\n\\\"kyrgyzstan\\\": \\\"🇰🇬\\\",\\n\\\"cambodia\\\": \\\"🇰🇭\\\",\\n\\\"kiribati\\\": \\\"🇰🇮\\\",\\n\\\"comoros\\\": \\\"🇰🇲\\\",\\n\\\"st_kitts_nevis\\\": \\\"🇰🇳\\\",\\n\\\"north_korea\\\": \\\"🇰🇵\\\",\\n\\\"kr\\\": \\\"🇰🇷\\\",\\n\\\"kuwait\\\": \\\"🇰🇼\\\",\\n\\\"cayman_islands\\\": \\\"🇰🇾\\\",\\n\\\"kazakhstan\\\": \\\"🇰🇿\\\",\\n\\\"laos\\\": \\\"🇱🇦\\\",\\n\\\"lebanon\\\": \\\"🇱🇧\\\",\\n\\\"st_lucia\\\": \\\"🇱🇨\\\",\\n\\\"liechtenstein\\\": \\\"🇱🇮\\\",\\n\\\"sri_lanka\\\": \\\"🇱🇰\\\",\\n\\\"liberia\\\": \\\"🇱🇷\\\",\\n\\\"lesotho\\\": \\\"🇱🇸\\\",\\n\\\"lithuania\\\": \\\"🇱🇹\\\",\\n\\\"luxembourg\\\": \\\"🇱🇺\\\",\\n\\\"latvia\\\": \\\"🇱🇻\\\",\\n\\\"libya\\\": \\\"🇱🇾\\\",\\n\\\"morocco\\\": \\\"🇲🇦\\\",\\n\\\"monaco\\\": \\\"🇲🇨\\\",\\n\\\"moldova\\\": \\\"🇲🇩\\\",\\n\\\"montenegro\\\": \\\"🇲🇪\\\",\\n\\\"st_martin\\\": \\\"🇲🇫\\\",\\n\\\"madagascar\\\": \\\"🇲🇬\\\",\\n\\\"marshall_islands\\\": \\\"🇲🇭\\\",\\n\\\"macedonia\\\": \\\"🇲🇰\\\",\\n\\\"mali\\\": \\\"🇲🇱\\\",\\n\\\"myanmar\\\": \\\"🇲🇲\\\",\\n\\\"mongolia\\\": \\\"🇲🇳\\\",\\n\\\"macau\\\": \\\"🇲🇴\\\",\\n\\\"northern_mariana_islands\\\": \\\"🇲🇵\\\",\\n\\\"martinique\\\": \\\"🇲🇶\\\",\\n\\\"mauritania\\\": \\\"🇲🇷\\\",\\n\\\"montserrat\\\": \\\"🇲🇸\\\",\\n\\\"malta\\\": \\\"🇲🇹\\\",\\n\\\"mauritius\\\": \\\"🇲🇺\\\",\\n\\\"maldives\\\": \\\"🇲🇻\\\",\\n\\\"malawi\\\": \\\"🇲🇼\\\",\\n\\\"mexico\\\": \\\"🇲🇽\\\",\\n\\\"malaysia\\\": \\\"🇲🇾\\\",\\n\\\"mozambique\\\": \\\"🇲🇿\\\",\\n\\\"namibia\\\": \\\"🇳🇦\\\",\\n\\\"new_caledonia\\\": \\\"🇳🇨\\\",\\n\\\"niger\\\": \\\"🇳🇪\\\",\\n\\\"norfolk_island\\\": \\\"🇳🇫\\\",\\n\\\"nigeria\\\": \\\"🇳🇬\\\",\\n\\\"nicaragua\\\": \\\"🇳🇮\\\",\\n\\\"netherlands\\\": \\\"🇳🇱\\\",\\n\\\"norway\\\": \\\"🇳🇴\\\",\\n\\\"nepal\\\": \\\"🇳🇵\\\",\\n\\\"nauru\\\": \\\"🇳🇷\\\",\\n\\\"niue\\\": \\\"🇳🇺\\\",\\n\\\"new_zealand\\\": \\\"🇳🇿\\\",\\n\\\"oman\\\": \\\"🇴🇲\\\",\\n\\\"panama\\\": \\\"🇵🇦\\\",\\n\\\"peru\\\": \\\"🇵🇪\\\",\\n\\\"french_polynesia\\\": \\\"🇵🇫\\\",\\n\\\"papua_new_guinea\\\": \\\"🇵🇬\\\",\\n\\\"philippines\\\": \\\"🇵🇭\\\",\\n\\\"pakistan\\\": \\\"🇵🇰\\\",\\n\\\"poland\\\": \\\"🇵🇱\\\",\\n\\\"st_pierre_miquelon\\\": \\\"🇵🇲\\\",\\n\\\"pitcairn_islands\\\": \\\"🇵🇳\\\",\\n\\\"puerto_rico\\\": \\\"🇵🇷\\\",\\n\\\"palestinian_territories\\\": \\\"🇵🇸\\\",\\n\\\"portugal\\\": \\\"🇵🇹\\\",\\n\\\"palau\\\": \\\"🇵🇼\\\",\\n\\\"paraguay\\\": \\\"🇵🇾\\\",\\n\\\"qatar\\\": \\\"🇶🇦\\\",\\n\\\"reunion\\\": \\\"🇷🇪\\\",\\n\\\"romania\\\": \\\"🇷🇴\\\",\\n\\\"serbia\\\": \\\"🇷🇸\\\",\\n\\\"ru\\\": \\\"🇷🇺\\\",\\n\\\"rwanda\\\": \\\"🇷🇼\\\",\\n\\\"saudi_arabia\\\": \\\"🇸🇦\\\",\\n\\\"solomon_islands\\\": \\\"🇸🇧\\\",\\n\\\"seychelles\\\": \\\"🇸🇨\\\",\\n\\\"sudan\\\": \\\"🇸🇩\\\",\\n\\\"sweden\\\": \\\"🇸🇪\\\",\\n\\\"singapore\\\": \\\"🇸🇬\\\",\\n\\\"st_helena\\\": \\\"🇸🇭\\\",\\n\\\"slovenia\\\": \\\"🇸🇮\\\",\\n\\\"svalbard_jan_mayen\\\": \\\"🇸🇯\\\",\\n\\\"slovakia\\\": \\\"🇸🇰\\\",\\n\\\"sierra_leone\\\": \\\"🇸🇱\\\",\\n\\\"san_marino\\\": \\\"🇸🇲\\\",\\n\\\"senegal\\\": \\\"🇸🇳\\\",\\n\\\"somalia\\\": \\\"🇸🇴\\\",\\n\\\"suriname\\\": \\\"🇸🇷\\\",\\n\\\"south_sudan\\\": \\\"🇸🇸\\\",\\n\\\"sao_tome_principe\\\": \\\"🇸🇹\\\",\\n\\\"el_salvador\\\": \\\"🇸🇻\\\",\\n\\\"sint_maarten\\\": \\\"🇸🇽\\\",\\n\\\"syria\\\": \\\"🇸🇾\\\",\\n\\\"swaziland\\\": \\\"🇸🇿\\\",\\n\\\"tristan_da_cunha\\\": \\\"🇹🇦\\\",\\n\\\"turks_caicos_islands\\\": \\\"🇹🇨\\\",\\n\\\"chad\\\": \\\"🇹🇩\\\",\\n\\\"french_southern_territories\\\": \\\"🇹🇫\\\",\\n\\\"togo\\\": \\\"🇹🇬\\\",\\n\\\"thailand\\\": \\\"🇹🇭\\\",\\n\\\"tajikistan\\\": \\\"🇹🇯\\\",\\n\\\"tokelau\\\": \\\"🇹🇰\\\",\\n\\\"timor_leste\\\": \\\"🇹🇱\\\",\\n\\\"turkmenistan\\\": \\\"🇹🇲\\\",\\n\\\"tunisia\\\": \\\"🇹🇳\\\",\\n\\\"tonga\\\": \\\"🇹🇴\\\",\\n\\\"tr\\\": \\\"🇹🇷\\\",\\n\\\"trinidad_tobago\\\": \\\"🇹🇹\\\",\\n\\\"tuvalu\\\": \\\"🇹🇻\\\",\\n\\\"taiwan\\\": \\\"🇹🇼\\\",\\n\\\"tanzania\\\": \\\"🇹🇿\\\",\\n\\\"ukraine\\\": \\\"🇺🇦\\\",\\n\\\"uganda\\\": \\\"🇺🇬\\\",\\n\\\"us_outlying_islands\\\": \\\"🇺🇲\\\",\\n\\\"united_nations\\\": \\\"🇺🇳\\\",\\n\\\"us\\\": \\\"🇺🇸\\\",\\n\\\"uruguay\\\": \\\"🇺🇾\\\",\\n\\\"uzbekistan\\\": \\\"🇺🇿\\\",\\n\\\"vatican_city\\\": \\\"🇻🇦\\\",\\n\\\"st_vincent_grenadines\\\": \\\"🇻🇨\\\",\\n\\\"venezuela\\\": \\\"🇻🇪\\\",\\n\\\"british_virgin_islands\\\": \\\"🇻🇬\\\",\\n\\\"us_virgin_islands\\\": \\\"🇻🇮\\\",\\n\\\"vietnam\\\": \\\"🇻🇳\\\",\\n\\\"vanuatu\\\": \\\"🇻🇺\\\",\\n\\\"wallis_futuna\\\": \\\"🇼🇫\\\",\\n\\\"samoa\\\": \\\"🇼🇸\\\",\\n\\\"kosovo\\\": \\\"🇽🇰\\\",\\n\\\"yemen\\\": \\\"🇾🇪\\\",\\n\\\"mayotte\\\": \\\"🇾🇹\\\",\\n\\\"south_africa\\\": \\\"🇿🇦\\\",\\n\\\"zambia\\\": \\\"🇿🇲\\\",\\n\\\"zimbabwe\\\": \\\"🇿🇼\\\",\\n\\\"england\\\": \\\"🏴󠁧󠁢󠁥󠁮󠁧󠁿\\\",\\n\\\"scotland\\\": \\\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\\\",\\n\\\"wales\\\": \\\"🏴󠁧󠁢󠁷󠁬󠁳󠁿\\\"\"]},\"65\":{\"c\":[{\"title\":\"其他\",\"tag\":[\"其他\"],\"description\":\"其他😭💯 // Generated, don't edit \\\"100\\\": \\\"💯\\\", \\\"1234\\\": \\\"🔢\\\", \\\"grinning\\\": \\\"😀\\\", \\\"smiley\\\": \\\"😃\\\", \\\"smile\\\": \\\"😄\\\", \\\"grin\\\": \\\"😁\\\", \\\"laughing\\\": \\\"😆\\\", \\\"satisfied\\\": \\\"😆\\\", \\\"sweat_smile\\\": \\\"😅\\\", \\\"rofl\\\": \\\"🤣\\\", \\\"joy\\\": \\\"😂\\\", \\\"slightly_smiling_face\\\": \\\"🙂\\\", \\\"upside_down_face\\\": \\\"🙃\\\", \\\"melting_face\\\": \\\"🫠\\\", \\\"wink\\\": \\\"😉\\\", \\\"blush\\\": \\\"😊\\\", \\\"innocent\\\": \\\"😇\\\", \\\"smiling_face_with_three_hearts\\\": \\\"🥰\\\", \\\"heart_eyes\\\": \\\"😍\\\", \\\"star_struck\\\": \\\"🤩\\\", \\\"kissing_heart\\\": \\\"😘\\\", \\\"kissing\\\": \\\"😗\\\", \\\"relaxed\\\": \\\"☺️\\\", \\\"kissing_closed_eyes\\\": \\\"😚\\\", \\\"kissing_smiling_eyes\\\": \\\"😙\\\", \\\"smiling_face_with_tear\\\": \\\"🥲\\\", \\\"yum\\\": \\\"😋\\\", \\\"stuck_out_tongue\\\": \\\"😛\\\", \\\"stuck_out_tongue_winking_eye\\\": \\\"😜\\\", \\\"zany_face\\\": \\\"🤪\\\", \\\"stuck_out_tongue_closed_eyes\\\": \\\"😝\\\", \\\"money_mouth_face\\\": \\\"🤑\\\", \\\"hugs\\\": \\\"🤗\\\", \\\"hand_over_mouth\\\": \\\"🤭\\\", \\\"face_with_open_eyes_and_hand_over_mouth\\\": \\\"🫢\\\", \\\"face_with_peeking_eye\\\": \\\"🫣\\\", \\\"shushing_face\\\": \\\"🤫\\\", \\\"thinking\\\": \\\"🤔\\\", \\\"saluting_face\\\": \\\"🫡\\\", \\\"zipper_mouth_face\\\": \\\"🤐\\\", \\\"raised_eyebrow\\\": \\\"🤨\\\", \\\"neutral_face\\\": \\\"😐\\\", \\\"expressionless\\\": \\\"😑\\\", \\\"no_mouth\\\": \\\"😶\\\", \\\"dotted_line_face\\\": \\\"🫥\\\", \\\"face_in_clouds\\\": \\\"😶‍🌫️\\\", \\\"smirk\\\": \\\"😏\\\", \\\"unamused\\\": \\\"😒\\\", \\\"roll_eyes\\\": \\\"🙄\\\", \\\"grimacing\\\": \\\"😬\\\", \\\"face_exhaling\\\": \\\"😮‍💨\\\", \\\"lying_face\\\": \\\"🤥\\\", \\\"shaking_face\\\": \\\"🫨\\\", \\\"relieved\\\": \\\"😌\\\", \\\"pensive\\\": \\\"😔\\\", \\\"sleepy\\\": \\\"😪\\\", \\\"drooling_face\\\": \\\"🤤\\\", \\\"sleeping\\\": \\\"😴\\\", \\\"mask\\\": \\\"😷\\\", \\\"face_with_thermometer\\\": \\\"🤒\\\", \\\"face_with_head_bandage\\\": \\\"🤕\\\", \\\"nauseated_face\\\": \\\"🤢\\\", \\\"vomiting_face\\\": \\\"🤮\\\", \\\"sneezing_face\\\": \\\"🤧\\\", \\\"hot_face\\\": \\\"🥵\\\", \\\"cold_face\\\": \\\"🥶\\\", \\\"woozy_face\\\": \\\"🥴\\\", \\\"dizzy_face\\\": \\\"😵\\\", \\\"face_with_spiral_eyes\\\": \\\"😵‍💫\\\", \\\"exploding_head\\\": \\\"🤯\\\", \\\"cowboy_hat_face\\\": \\\"🤠\\\", \\\"partying_face\\\": \\\"🥳\\\", \\\"disguised_face\\\": \\\"🥸\\\", \\\"sunglasses\\\": \\\"😎\\\", \\\"nerd_face\\\": \\\"🤓\\\", \\\"monocle_face\\\": \\\"🧐\\\", \\\"confused\\\": \\\"😕\\\", \\\"face_with_diagonal_mouth\\\": \\\"🫤\\\", \\\"worried\\\": \\\"😟\\\", \\\"slightly_frowning_face\\\": \\\"🙁\\\", \\\"frowning_face\\\": \\\"☹️\\\", \\\"open_mouth\\\": \\\"😮\\\", \\\"hushed\\\": \\\"😯\\\", \\\"astonished\\\": \\\"😲\\\", \\\"flushed\\\": \\\"😳\\\", \\\"pleading_face\\\": \\\"🥺\\\", \\\"face_holding_back_tears\\\": \\\"🥹\\\", \\\"frowning\\\": \\\"😦\\\", \\\"anguished\\\": \\\"😧\\\", \\\"fearful\\\": \\\"😨\\\", \\\"cold_sweat\\\": \\\"😰\\\", \\\"disappointed_relieved\\\": \\\"😥\\\", \\\"cry\\\": \\\"😢\\\", \\\"sob\\\": \\\"😭\\\", \\\"scream\\\": \\\"😱\\\", \\\"confounded\\\": \\\"😖\\\", \\\"persevere\\\": \\\"😣\\\", \\\"disappointed\\\": \\\"😞\\\", \\\"sweat\\\": \\\"😓\\\", \\\"weary\\\": \\\"😩\\\", \\\"tired_face\\\": \\\"😫\\\", \\\"yawning_face\\\": \\\"🥱\\\", \\\"triumph\\\": \\\"😤\\\", \\\"rage\\\": \\\"😡\\\", \\\"pout\\\": \\\"😡\\\", \\\"angry\\\": \\\"😠\\\", \\\"cursing_face\\\": \\\"🤬\\\", \\\"smiling_imp\\\": \\\"😈\\\", \\\"imp\\\": \\\"👿\\\", \\\"skull\\\": \\\"💀\\\", \\\"skull_and_crossbones\\\": \\\"☠️\\\", \\\"hankey\\\": \\\"💩\\\", \\\"poop\\\": \\\"💩\\\", \\\"shit\\\": \\\"💩\\\", \\\"clown_face\\\": \\\"🤡\\\", \\\"japanese_ogre\\\": \\\"👹\\\", \\\"japanese_goblin\\\": \\\"👺\\\", \\\"ghost\\\": \\\"👻\\\", \\\"alien\\\": \\\"👽\\\", \\\"space_invader\\\": \\\"👾\\\", \\\"robot\\\": \\\"🤖\\\", \\\"smiley_cat\\\": \\\"😺\\\", \\\"smile_cat\\\": \\\"😸\\\", \\\"joy_cat\\\": \\\"😹\\\", \\\"heart_eyes_cat\\\": \\\"😻\\\", \\\"smirk_cat\\\": \\\"😼\\\", \\\"kissing_cat\\\": \\\"😽\\\", \\\"scream_cat\\\": \\\"🙀\\\", \\\"crying_cat_face\\\": \\\"😿\\\", \\\"pouting_cat\\\": \\\"😾\\\", \\\"see_no_evil\\\": \\\"🙈\\\", \\\"hear_no_evil\\\": \\\"🙉\\\", \\\"speak_no_evil\\\": \\\"🙊\\\", \\\"love_letter\\\": \\\"💌\\\", \\\"cupid\\\": \\\"💘\\\", \\\"gift_heart\\\": \\\"💝\\\", \\\"sparkling_heart\\\": \\\"💖\\\", \\\"heartpulse\\\": \\\"💗\\\", \\\"heartbeat\\\": \\\"💓\\\", \\\"revolving_hearts\\\": \\\"💞\\\", \\\"two_hearts\\\": \\\"💕\\\", \\\"heart_decoration\\\": \\\"💟\\\", \\\"heavy_heart_exclamation\\\": \\\"❣️\\\", \\\"broken_heart\\\": \\\"💔\\\", \\\"heart_on_fire\\\": \\\"❤️‍🔥\\\", \\\"mending_heart\\\": \\\"❤️‍🩹\\\", \\\"heart\\\": \\\"❤️\\\", \\\"pink_heart\\\": \\\"🩷\\\", \\\"orange_heart\\\": \\\"🧡\\\", \\\"yellow_heart\\\": \\\"💛\\\", \\\"green_heart\\\": \\\"💚\\\", \\\"blue_heart\\\": \\\"💙\\\", \\\"light_blue_heart\\\": \\\"🩵\\\", \\\"purple_heart\\\": \\\"💜\\\", \\\"brown_heart\\\": \\\"🤎\\\", \\\"black_heart\\\": \\\"🖤\\\", \\\"grey_heart\\\": \\\"🩶\\\", \\\"white_heart\\\": \\\"🤍\\\", \\\"kiss\\\": \\\"💋\\\", \\\"anger\\\": \\\"💢\\\", \\\"boom\\\": \\\"💥\\\", \\\"collision\\\": \\\"💥\\\", \\\"dizzy\\\": \\\"💫\\\", \\\"sweat_drops\\\": \\\"💦\\\", \\\"dash\\\": \\\"💨\\\", \\\"hole\\\": \\\"🕳️\\\", \\\"speech_balloon\\\": \\\"💬\\\", \\\"eye_speech_bubble\\\": \\\"👁️‍🗨️\\\", \\\"left_speech_bubble\\\": \\\"🗨️\\\", \\\"right_anger_bubble\\\": \\\"🗯️\\\", \\\"thought_balloon\\\": \\\"💭\\\", \\\"zzz\\\": \\\"💤\\\", \\\"wave\\\": \\\"👋\\\", \\\"raised_back_of_hand\\\": \\\"🤚\\\", \\\"raised_hand_with_fingers_splayed\\\": \\\"🖐️\\\", \\\"hand\\\": \\\"✋\\\", \\\"raised_hand\\\": \\\"✋\\\", \\\"vulcan_salute\\\": \\\"🖖\\\", \\\"rightwards_hand\\\": \\\"🫱\\\", \\\"leftwards_hand\\\": \\\"🫲\\\", \\\"palm_down_hand\\\": \\\"🫳\\\", \\\"palm_up_hand\\\": \\\"🫴\\\", \\\"leftwards_pushing_hand\\\": \\\"🫷\\\", \\\"rightwards_pushing_hand\\\": \\\"🫸\\\", \\\"ok_hand\\\": \\\"👌\\\", \\\"pinched_fingers\\\": \\\"🤌\\\", \\\"pinching_hand\\\": \\\"🤏\\\", \\\"v\\\": \\\"✌️\\\", \\\"crossed_fingers\\\": \\\"🤞\\\", \\\"hand_with_index_finger_and_thumb_crossed\\\": \\\"🫰\\\", \\\"love_you_gesture\\\": \\\"🤟\\\", \\\"metal\\\": \\\"🤘\\\", \\\"call_me_hand\\\": \\\"🤙\\\", \\\"point_left\\\": \\\"👈\\\", \\\"point_right\\\": \\\"👉\\\", \\\"point_up_2\\\": \\\"👆\\\", \\\"middle_finger\\\": \\\"🖕\\\", \\\"fu\\\": \\\"🖕\\\", \\\"point_down\\\": \\\"👇\\\", \\\"point_up\\\": \\\"☝️\\\", \\\"index_pointing_at_the_viewer\\\": \\\"🫵\\\", \\\"+1\\\": \\\"👍\\\", \\\"thumbsup\\\": \\\"👍\\\", \\\"-1\\\": \\\"👎\\\", \\\"thumbsdown\\\": \\\"👎\\\", \\\"fist_raised\\\": \\\"✊\\\", \\\"fist\\\": \\\"✊\\\", \\\"fist_oncoming\\\": \\\"👊\\\", \\\"facepunch\\\": \\\"👊\\\", \\\"punch\\\": \\\"👊\\\", \\\"fist_left\\\": \\\"🤛\\\", \\\"fist_right\\\": \\\"🤜\\\", \\\"clap\\\": \\\"👏\\\", \\\"raised_hands\\\": \\\"🙌\\\", \\\"heart_hands\\\": \\\"🫶\\\", \\\"open_hands\\\": \\\"👐\\\", \\\"palms_up_together\\\": \\\"🤲\\\", \\\"handshake\\\": \\\"🤝\\\", \\\"pray\\\": \\\"🙏\\\", \\\"writing_hand\\\": \\\"✍️\\\", \\\"nail_care\\\": \\\"💅\\\", \\\"selfie\\\": \\\"🤳\\\", \\\"muscle\\\": \\\"💪\\\", \\\"mechanical_arm\\\": \\\"🦾\\\", \\\"mechanical_leg\\\": \\\"🦿\\\", \\\"leg\\\": \\\"🦵\\\", \\\"foot\\\": \\\"🦶\\\", \\\"ear\\\": \\\"👂\\\", \\\"ear_with_hearing_aid\\\": \\\"🦻\\\", \\\"nose\\\": \\\"👃\\\", \\\"brain\\\": \\\"🧠\\\", \\\"anatomical_heart\\\": \\\"🫀\\\", \\\"lungs\\\": \\\"🫁\\\", \\\"tooth\\\": \\\"🦷\\\", \\\"bone\\\": \\\"🦴\\\", \\\"eyes\\\": \\\"👀\\\", \\\"eye\\\": \\\"👁️\\\", \\\"tongue\\\": \\\"👅\\\", \\\"lips\\\": \\\"👄\\\", \\\"biting_lip\\\": \\\"🫦\\\", \\\"baby\\\": \\\"👶\\\", \\\"child\\\": \\\"🧒\\\", \\\"boy\\\": \\\"👦\\\", \\\"girl\\\": \\\"👧\\\", \\\"adult\\\": \\\"🧑\\\", \\\"blond_haired_person\\\": \\\"👱\\\", \\\"man\\\": \\\"👨\\\", \\\"bearded_person\\\": \\\"🧔\\\", \\\"man_beard\\\": \\\"🧔‍♂️\\\", \\\"woman_beard\\\": \\\"🧔‍♀️\\\", \\\"red_haired_man\\\": \\\"👨‍🦰\\\", \\\"curly_haired_man\\\": \\\"👨‍🦱\\\", \\\"white_haired_man\\\": \\\"👨‍🦳\\\", \\\"bald_man\\\": \\\"👨‍🦲\\\", \\\"woman\\\": \\\"👩\\\", \\\"red_haired_woman\\\": \\\"👩‍🦰\\\", \\\"person_red_hair\\\": \\\"🧑‍🦰\\\", \\\"curly_haired_woman\\\": \\\"👩‍🦱\\\", \\\"person_curly_hair\\\": \\\"🧑‍🦱\\\", \\\"white_haired_woman\\\": \\\"👩‍🦳\\\", \\\"person_white_hair\\\": \\\"🧑‍🦳\\\", \\\"bald_woman\\\": \\\"👩‍🦲\\\", \\\"person_bald\\\": \\\"🧑‍🦲\\\", \\\"blond_haired_woman\\\": \\\"👱‍♀️\\\", \\\"blonde_woman\\\": \\\"👱‍♀️\\\", \\\"blond_haired_man\\\": \\\"👱‍♂️\\\", \\\"older_adult\\\": \\\"🧓\\\", \\\"older_man\\\": \\\"👴\\\", \\\"older_woman\\\": \\\"👵\\\", \\\"frowning_person\\\": \\\"🙍\\\", \\\"frowning_man\\\": \\\"🙍‍♂️\\\", \\\"frowning_woman\\\": \\\"🙍‍♀️\\\", \\\"pouting_face\\\": \\\"🙎\\\", \\\"pouting_man\\\": \\\"🙎‍♂️\\\", \\\"pouting_woman\\\": \\\"🙎‍♀️\\\", \\\"no_good\\\": \\\"🙅\\\", \\\"no_good_man\\\": \\\"🙅‍♂️\\\", \\\"ng_man\\\": \\\"🙅‍♂️\\\", \\\"no_good_woman\\\": \\\"🙅‍♀️\\\", \\\"ng_woman\\\": \\\"🙅‍♀️\\\", \\\"ok_person\\\": \\\"🙆\\\", \\\"ok_man\\\": \\\"🙆‍♂️\\\", \\\"ok_woman\\\": \\\"🙆‍♀️\\\", \\\"tipping_hand_person\\\": \\\"💁\\\", \\\"information_desk_person\\\": \\\"💁\\\", \\\"tipping_hand_man\\\": \\\"💁‍♂️\\\", \\\"sassy_man\\\": \\\"💁‍♂️\\\", \\\"tipping_hand_woman\\\": \\\"💁‍♀️\\\", \\\"sassy_woman\\\": \\\"💁‍♀️\\\", \\\"raising_hand\\\": \\\"🙋\\\", \\\"raising_hand_man\\\": \\\"🙋‍♂️\\\", \\\"raising_hand_woman\\\": \\\"🙋‍♀️\\\", \\\"deaf_person\\\": \\\"🧏\\\", \\\"deaf_man\\\": \\\"🧏‍♂️\\\", \\\"deaf_woman\\\": \\\"🧏‍♀️\\\", \\\"bow\\\": \\\"🙇\\\", \\\"bowing_man\\\": \\\"🙇‍♂️\\\", \\\"bowing_woman\\\": \\\"🙇‍♀️\\\", \\\"facepalm\\\": \\\"🤦\\\", \\\"man_facepalming\\\": \\\"🤦‍♂️\\\", \\\"woman_facepalming\\\": \\\"🤦‍♀️\\\", \\\"shrug\\\": \\\"🤷\\\", \\\"man_shrugging\\\": \\\"🤷‍♂️\\\", \\\"woman_shrugging\\\": \\\"🤷‍♀️\\\", \\\"health_worker\\\": \\\"🧑‍⚕️\\\", \\\"man_health_worker\\\": \\\"👨‍⚕️\\\", \\\"woman_health_worker\\\": \\\"👩‍⚕️\\\", \\\"student\\\": \\\"🧑‍🎓\\\", \\\"man_student\\\": \\\"👨‍🎓\\\", \\\"woman_student\\\": \\\"👩‍🎓\\\", \\\"teacher\\\": \\\"🧑‍🏫\\\", \\\"man_teacher\\\": \\\"👨‍🏫\\\", \\\"woman_teacher\\\": \\\"👩‍🏫\\\", \\\"judge\\\": \\\"🧑‍⚖️\\\", \\\"man_judge\\\": \\\"👨‍⚖️\\\", \\\"woman_judge\\\": \\\"👩‍⚖️\\\", \\\"farmer\\\": \\\"🧑‍🌾\\\", \\\"man_farmer\\\": \\\"👨‍🌾\\\", \\\"woman_farmer\\\": \\\"👩‍🌾\\\", \\\"cook\\\": \\\"🧑‍🍳\\\", \\\"man_cook\\\": \\\"👨‍🍳\\\", \\\"woman_cook\\\": \\\"👩‍🍳\\\", \\\"mechanic\\\": \\\"🧑‍🔧\\\", \\\"man_mechanic\\\": \\\"👨‍🔧\\\", \\\"woman_mechanic\\\": \\\"👩‍🔧\\\", \\\"factory_worker\\\": \\\"🧑‍🏭\\\", \\\"man_factory_worker\\\": \\\"👨‍🏭\\\", \\\"woman_factory_worker\\\": \\\"👩‍🏭\\\", \\\"office_worker\\\": \\\"🧑‍💼\\\", \\\"man_office_worker\\\": \\\"👨‍💼\\\", \\\"woman_office_worker\\\": \\\"👩‍💼\\\", \\\"scientist\\\": \\\"🧑‍🔬\\\", \\\"man_scientist\\\": \\\"👨‍🔬\\\", \\\"woman_scientist\\\": \\\"👩‍🔬\\\", \\\"technologist\\\": \\\"🧑‍💻\\\", \\\"man_technologist\\\": \\\"👨‍💻\\\", \\\"woman_technologist\\\": \\\"👩‍💻\\\", \\\"singer\\\": \\\"🧑‍🎤\\\", \\\"man_singer\\\": \\\"👨‍🎤\\\", \\\"woman_singer\\\": \\\"👩‍🎤\\\", \\\"artist\\\": \\\"🧑‍🎨\\\", \\\"man_artist\\\": \\\"👨‍🎨\\\", \\\"woman_artist\\\": \\\"👩‍🎨\\\", \\\"pilot\\\": \\\"🧑‍✈️\\\", \\\"man_pilot\\\": \\\"👨‍✈️\\\", \\\"woman_pilot\\\": \\\"👩‍✈️\\\", \\\"astronaut\\\": \\\"🧑‍🚀\\\", \\\"man_astronaut\\\": \\\"👨‍🚀\\\", \\\"woman_astronaut\\\": \\\"👩‍🚀\\\", \\\"firefighter\\\": \\\"🧑‍🚒\\\", \\\"man_firefighter\\\": \\\"👨‍🚒\\\", \\\"woman_firefighter\\\": \\\"👩‍🚒\\\", \\\"police_officer\\\": \\\"👮\\\", \\\"cop\\\": \\\"👮\\\", \\\"policeman\\\": \\\"👮‍♂️\\\", \\\"policewoman\\\": \\\"👮‍♀️\\\", \\\"detective\\\": \\\"🕵️\\\", \\\"male_detective\\\": \\\"🕵️‍♂️\\\", \\\"female_detective\\\": \\\"🕵️‍♀️\\\", \\\"guard\\\": \\\"💂\\\", \\\"guardsman\\\": \\\"💂‍♂️\\\", \\\"guardswoman\\\": \\\"💂‍♀️\\\", \\\"ninja\\\": \\\"🥷\\\", \\\"construction_worker\\\": \\\"👷\\\", \\\"construction_worker_man\\\": \\\"👷‍♂️\\\", \\\"construction_worker_woman\\\": \\\"👷‍♀️\\\", \\\"person_with_crown\\\": \\\"🫅\\\", \\\"prince\\\": \\\"🤴\\\", \\\"princess\\\": \\\"👸\\\", \\\"person_with_turban\\\": \\\"👳\\\", \\\"man_with_turban\\\": \\\"👳‍♂️\\\", \\\"woman_with_turban\\\": \\\"👳‍♀️\\\", \\\"man_with_gua_pi_mao\\\": \\\"👲\\\", \\\"woman_with_headscarf\\\": \\\"🧕\\\", \\\"person_in_tuxedo\\\": \\\"🤵\\\", \\\"man_in_tuxedo\\\": \\\"🤵‍♂️\\\", \\\"woman_in_tuxedo\\\": \\\"🤵‍♀️\\\", \\\"person_with_veil\\\": \\\"👰\\\", \\\"man_with_veil\\\": \\\"👰‍♂️\\\", \\\"woman_with_veil\\\": \\\"👰‍♀️\\\", \\\"bride_with_veil\\\": \\\"👰‍♀️\\\", \\\"pregnant_woman\\\": \\\"🤰\\\", \\\"pregnant_man\\\": \\\"🫃\\\", \\\"pregnant_person\\\": \\\"🫄\\\", \\\"breast_feeding\\\": \\\"🤱\\\", \\\"woman_feeding_baby\\\": \\\"👩‍🍼\\\", \\\"man_feeding_baby\\\": \\\"👨‍🍼\\\", \\\"person_feeding_baby\\\": \\\"🧑‍🍼\\\", \\\"angel\\\": \\\"👼\\\", \\\"santa\\\": \\\"🎅\\\", \\\"mrs_claus\\\": \\\"🤶\\\", \\\"mx_claus\\\": \\\"🧑‍🎄\\\", \\\"superhero\\\": \\\"🦸\\\", \\\"superhero_man\\\": \\\"🦸‍♂️\\\", \\\"superhero_woman\\\": \\\"🦸‍♀️\\\", \\\"supervillain\\\": \\\"🦹\\\", \\\"supervillain_man\\\": \\\"🦹‍♂️\\\", \\\"supervillain_woman\\\": \\\"🦹‍♀️\\\", \\\"mage\\\": \\\"🧙\\\", \\\"mage_man\\\": \\\"🧙‍♂️\\\", \\\"mage_woman\\\": \\\"🧙‍♀️\\\", \\\"fairy\\\": \\\"🧚\\\", \\\"fairy_man\\\": \\\"🧚‍♂️\\\", \\\"fairy_woman\\\": \\\"🧚‍♀️\\\", \\\"vampire\\\": \\\"🧛\\\", \\\"vampire_man\\\": \\\"🧛‍♂️\\\", \\\"vampire_woman\\\": \\\"🧛‍♀️\\\", \\\"merperson\\\": \\\"🧜\\\", \\\"merman\\\": \\\"🧜‍♂️\\\", \\\"mermaid\\\": \\\"🧜‍♀️\\\", \\\"elf\\\": \\\"🧝\\\", \\\"elf_man\\\": \\\"🧝‍♂️\\\", \\\"elf_woman\\\": \\\"🧝‍♀️\\\", \\\"genie\\\": \\\"🧞\\\", \\\"genie_man\\\": \\\"🧞‍♂️\\\", \\\"genie_woman\\\": \\\"🧞‍♀️\\\", \\\"zombie\\\": \\\"🧟\\\", \\\"zombie_man\\\": \\\"🧟‍♂️\\\", \\\"zombie_woman\\\": \\\"🧟‍♀️\\\", \\\"troll\\\": \\\"🧌\\\", \\\"massage\\\": \\\"💆\\\", \\\"massage_man\\\": \\\"💆‍♂️\\\", \\\"massage_woman\\\": \\\"💆‍♀️\\\", \\\"haircut\\\": \\\"💇\\\", \\\"haircut_man\\\": \\\"💇‍♂️\\\", \\\"haircut_woman\\\": \\\"💇‍♀️\\\", \\\"walking\\\": \\\"🚶\\\", \\\"walking_man\\\": \\\"🚶‍♂️\\\", \\\"walking_woman\\\": \\\"🚶‍♀️\\\", \\\"standing_person\\\": \\\"🧍\\\", \\\"standing_man\\\": \\\"🧍‍♂️\\\", \\\"standing_woman\\\": \\\"🧍‍♀️\\\", \\\"kneeling_person\\\": \\\"🧎\\\", \\\"kneeling_man\\\": \\\"🧎‍♂️\\\", \\\"kneeling_woman\\\": \\\"🧎‍♀️\\\", \\\"person_with_probing_cane\\\": \\\"🧑‍🦯\\\", \\\"man_with_probing_cane\\\": \\\"👨‍🦯\\\", \\\"woman_with_probing_cane\\\": \\\"👩‍🦯\\\", \\\"person_in_motorized_wheelchair\\\": \\\"🧑‍🦼\\\", \\\"man_in_motorized_wheelchair\\\": \\\"👨‍🦼\\\", \\\"woman_in_motorized_wheelchair\\\": \\\"👩‍🦼\\\", \\\"person_in_manual_wheelchair\\\": \\\"🧑‍🦽\\\", \\\"man_in_manual_wheelchair\\\": \\\"👨‍🦽\\\", \\\"woman_in_manual_wheelchair\\\": \\\"👩‍🦽\\\", \\\"runner\\\": \\\"🏃\\\", \\\"running\\\": \\\"🏃\\\", \\\"running_man\\\": \\\"🏃‍♂️\\\", \\\"running_woman\\\": \\\"🏃‍♀️\\\", \\\"woman_dancing\\\": \\\"💃\\\", \\\"dancer\\\": \\\"💃\\\", \\\"man_dancing\\\": \\\"🕺\\\", \\\"business_suit_levitating\\\": \\\"🕴️\\\", \\\"dancers\\\": \\\"👯\\\", \\\"dancing_men\\\": \\\"👯‍♂️\\\", \\\"dancing_women\\\": \\\"👯‍♀️\\\", \\\"sauna_person\\\": \\\"🧖\\\", \\\"sauna_man\\\": \\\"🧖‍♂️\\\", \\\"sauna_woman\\\": \\\"🧖‍♀️\\\", \\\"climbing\\\": \\\"🧗\\\", \\\"climbing_man\\\": \\\"🧗‍♂️\\\", \\\"climbing_woman\\\": \\\"🧗‍♀️\\\", \\\"person_fencing\\\": \\\"🤺\\\", \\\"horse_racing\\\": \\\"🏇\\\", \\\"skier\\\": \\\"⛷️\\\", \\\"snowboarder\\\": \\\"🏂\\\", \\\"golfing\\\": \\\"🏌️\\\", \\\"golfing_man\\\": \\\"🏌️‍♂️\\\", \\\"golfing_woman\\\": \\\"🏌️‍♀️\\\", \\\"surfer\\\": \\\"🏄\\\", \\\"surfing_man\\\": \\\"🏄‍♂️\\\", \\\"surfing_woman\\\": \\\"🏄‍♀️\\\", \\\"rowboat\\\": \\\"🚣\\\", \\\"rowing_man\\\": \\\"🚣‍♂️\\\", \\\"rowing_woman\\\": \\\"🚣‍♀️\\\", \\\"swimmer\\\": \\\"🏊\\\", \\\"swimming_man\\\": \\\"🏊‍♂️\\\", \\\"swimming_woman\\\": \\\"🏊‍♀️\\\", \\\"bouncing_ball_person\\\": \\\"⛹️\\\", \\\"bouncing_ball_man\\\": \\\"⛹️‍♂️\\\", \\\"basketball_man\\\": \\\"⛹️‍♂️\\\", \\\"bouncing_ball_woman\\\": \\\"⛹️‍♀️\\\", \\\"basketball_woman\\\": \\\"⛹️‍♀️\\\", \\\"weight_lifting\\\": \\\"🏋️\\\", \\\"weight_lifting_man\\\": \\\"🏋️‍♂️\\\", \\\"weight_lifting_woman\\\": \\\"🏋️‍♀️\\\", \\\"bicyclist\\\": \\\"🚴\\\", \\\"biking_man\\\": \\\"🚴‍♂️\\\", \\\"biking_woman\\\": \\\"🚴‍♀️\\\", \\\"mountain_bicyclist\\\": \\\"🚵\\\", \\\"mountain_biking_man\\\": \\\"🚵‍♂️\\\", \\\"mountain_biking_woman\\\": \\\"🚵‍♀️\\\", \\\"cartwheeling\\\": \\\"🤸\\\", \\\"man_cartwheeling\\\": \\\"🤸‍♂️\\\", \\\"woman_cartwheeling\\\": \\\"🤸‍♀️\\\", \\\"wrestling\\\": \\\"🤼\\\", \\\"men_wrestling\\\": \\\"🤼‍♂️\\\", \\\"women_wrestling\\\": \\\"🤼‍♀️\\\", \\\"water_polo\\\": \\\"🤽\\\", \\\"man_playing_water_polo\\\": \\\"🤽‍♂️\\\", \\\"woman_playing_water_polo\\\": \\\"🤽‍♀️\\\", \\\"handball_person\\\": \\\"🤾\\\", \\\"man_playing_handball\\\": \\\"🤾‍♂️\\\", \\\"woman_playing_handball\\\": \\\"🤾‍♀️\\\", \\\"juggling_person\\\": \\\"🤹\\\", \\\"man_juggling\\\": \\\"🤹‍♂️\\\", \\\"woman_juggling\\\": \\\"🤹‍♀️\\\", \\\"lotus_position\\\": \\\"🧘\\\", \\\"lotus_position_man\\\": \\\"🧘‍♂️\\\", \\\"lotus_position_woman\\\": \\\"🧘‍♀️\\\", \\\"bath\\\": \\\"🛀\\\", \\\"sleeping_bed\\\": \\\"🛌\\\", \\\"people_holding_hands\\\": \\\"🧑‍🤝‍🧑\\\", \\\"two_women_holding_hands\\\": \\\"👭\\\", \\\"couple\\\": \\\"👫\\\", \\\"two_men_holding_hands\\\": \\\"👬\\\", \\\"couplekiss\\\": \\\"💏\\\", \\\"couplekiss_man_woman\\\": \\\"👩‍❤️‍💋‍👨\\\", \\\"couplekiss_man_man\\\": \\\"👨‍❤️‍💋‍👨\\\", \\\"couplekiss_woman_woman\\\": \\\"👩‍❤️‍💋‍👩\\\", \\\"couple_with_heart\\\": \\\"💑\\\", \\\"couple_with_heart_woman_man\\\": \\\"👩‍❤️‍👨\\\", \\\"couple_with_heart_man_man\\\": \\\"👨‍❤️‍👨\\\", \\\"couple_with_heart_woman_woman\\\": \\\"👩‍❤️‍👩\\\", \\\"family\\\": \\\"👪\\\", \\\"family_man_woman_boy\\\": \\\"👨‍👩‍👦\\\", \\\"family_man_woman_girl\\\": \\\"👨‍👩‍👧\\\", \\\"family_man_woman_girl_boy\\\": \\\"👨‍👩‍👧‍👦\\\", \\\"family_man_woman_boy_boy\\\": \\\"👨‍👩‍👦‍👦\\\", \\\"family_man_woman_girl_girl\\\": \\\"👨‍👩‍👧‍👧\\\", \\\"family_man_man_boy\\\": \\\"👨‍👨‍👦\\\", \\\"family_man_man_girl\\\": \\\"👨‍👨‍👧\\\", \\\"family_man_man_girl_boy\\\": \\\"👨‍👨‍👧‍👦\\\", \\\"family_man_man_boy_boy\\\": \\\"👨‍👨‍👦‍👦\\\", \\\"family_man_man_girl_girl\\\": \\\"👨‍👨‍👧‍👧\\\", \\\"family_woman_woman_boy\\\": \\\"👩‍👩‍👦\\\", \\\"family_woman_woman_girl\\\": \\\"👩‍👩‍👧\\\", \\\"family_woman_woman_girl_boy\\\": \\\"👩‍👩‍👧‍👦\\\", \\\"family_woman_woman_boy_boy\\\": \\\"👩‍👩‍👦‍👦\\\", \\\"family_woman_woman_girl_girl\\\": \\\"👩‍👩‍👧‍👧\\\", \\\"family_man_boy\\\": \\\"👨‍👦\\\", \\\"family_man_boy_boy\\\": \\\"👨‍👦‍👦\\\", \\\"family_man_girl\\\": \\\"👨‍👧\\\", \\\"family_man_girl_boy\\\": \\\"👨‍👧‍👦\\\", \\\"family_man_girl_girl\\\": \\\"👨‍👧‍👧\\\", \\\"family_woman_boy\\\": \\\"👩‍👦\\\", \\\"family_woman_boy_boy\\\": \\\"👩‍👦‍👦\\\", \\\"family_woman_girl\\\": \\\"👩‍👧\\\", \\\"family_woman_girl_boy\\\": \\\"👩‍👧‍👦\\\", \\\"family_woman_girl_girl\\\": \\\"👩‍👧‍👧\\\", \\\"speaking_head\\\": \\\"🗣️\\\", \\\"bust_in_silhouette\\\": \\\"👤\\\", \\\"busts_in_silhouette\\\": \\\"👥\\\", \\\"people_hugging\\\": \\\"🫂\\\", \\\"footprints\\\": \\\"👣\\\", \\\"monkey_face\\\": \\\"🐵\\\", \\\"monkey\\\": \\\"🐒\\\", \\\"gorilla\\\": \\\"🦍\\\", \\\"orangutan\\\": \\\"🦧\\\", \\\"dog\\\": \\\"🐶\\\", \\\"dog2\\\": \\\"🐕\\\", \\\"guide_dog\\\": \\\"🦮\\\", \\\"service_dog\\\": \\\"🐕‍🦺\\\", \\\"poodle\\\": \\\"🐩\\\", \\\"wolf\\\": \\\"🐺\\\", \\\"fox_face\\\": \\\"🦊\\\", \\\"raccoon\\\": \\\"🦝\\\", \\\"cat\\\": \\\"🐱\\\", \\\"cat2\\\": \\\"🐈\\\", \\\"black_cat\\\": \\\"🐈‍⬛\\\", \\\"lion\\\": \\\"🦁\\\", \\\"tiger\\\": \\\"🐯\\\", \\\"tiger2\\\": \\\"🐅\\\", \\\"leopard\\\": \\\"🐆\\\", \\\"horse\\\": \\\"🐴\\\", \\\"moose\\\": \\\"🫎\\\", \\\"donkey\\\": \\\"🫏\\\", \\\"racehorse\\\": \\\"🐎\\\", \\\"unicorn\\\": \\\"🦄\\\", \\\"zebra\\\": \\\"🦓\\\", \\\"deer\\\": \\\"🦌\\\", \\\"bison\\\": \\\"🦬\\\", \\\"cow\\\": \\\"🐮\\\", \\\"ox\\\": \\\"🐂\\\", \\\"water_buffalo\\\": \\\"🐃\\\", \\\"cow2\\\": \\\"🐄\\\", \\\"pig\\\": \\\"🐷\\\", \\\"pig2\\\": \\\"🐖\\\", \\\"boar\\\": \\\"🐗\\\", \\\"pig_nose\\\": \\\"🐽\\\", \\\"ram\\\": \\\"🐏\\\", \\\"sheep\\\": \\\"🐑\\\", \\\"goat\\\": \\\"🐐\\\", \\\"dromedary_camel\\\": \\\"🐪\\\", \\\"camel\\\": \\\"🐫\\\", \\\"llama\\\": \\\"🦙\\\", \\\"giraffe\\\": \\\"🦒\\\", \\\"elephant\\\": \\\"🐘\\\", \\\"mammoth\\\": \\\"🦣\\\", \\\"rhinoceros\\\": \\\"🦏\\\", \\\"hippopotamus\\\": \\\"🦛\\\", \\\"mouse\\\": \\\"🐭\\\", \\\"mouse2\\\": \\\"🐁\\\", \\\"rat\\\": \\\"🐀\\\", \\\"hamster\\\": \\\"🐹\\\", \\\"rabbit\\\": \\\"🐰\\\", \\\"rabbit2\\\": \\\"🐇\\\", \\\"chipmunk\\\": \\\"🐿️\\\", \\\"beaver\\\": \\\"🦫\\\", \\\"hedgehog\\\": \\\"🦔\\\", \\\"bat\\\": \\\"🦇\\\", \\\"bear\\\": \\\"🐻\\\", \\\"polar_bear\\\": \\\"🐻‍❄️\\\", \\\"koala\\\": \\\"🐨\\\", \\\"panda_face\\\": \\\"🐼\\\", \\\"sloth\\\": \\\"🦥\\\", \\\"otter\\\": \\\"🦦\\\", \\\"skunk\\\": \\\"🦨\\\", \\\"kangaroo\\\": \\\"🦘\\\", \\\"badger\\\": \\\"🦡\\\", \\\"feet\\\": \\\"🐾\\\", \\\"paw_prints\\\": \\\"🐾\\\", \\\"turkey\\\": \\\"🦃\\\", \\\"chicken\\\": \\\"🐔\\\", \\\"rooster\\\": \\\"🐓\\\", \\\"hatching_chick\\\": \\\"🐣\\\", \\\"baby_chick\\\": \\\"🐤\\\", \\\"hatched_chick\\\": \\\"🐥\\\", \\\"bird\\\": \\\"🐦\\\", \\\"penguin\\\": \\\"🐧\\\", \\\"dove\\\": \\\"🕊️\\\", \\\"eagle\\\": \\\"🦅\\\", \\\"duck\\\": \\\"🦆\\\", \\\"swan\\\": \\\"🦢\\\", \\\"owl\\\": \\\"🦉\\\", \\\"dodo\\\": \\\"🦤\\\", \\\"feather\\\": \\\"🪶\\\", \\\"flamingo\\\": \\\"🦩\\\", \\\"peacock\\\": \\\"🦚\\\", \\\"parrot\\\": \\\"🦜\\\", \\\"wing\\\": \\\"🪽\\\", \\\"black_bird\\\": \\\"🐦‍⬛\\\", \\\"goose\\\": \\\"🪿\\\", \\\"frog\\\": \\\"🐸\\\", \\\"crocodile\\\": \\\"🐊\\\", \\\"turtle\\\": \\\"🐢\\\", \\\"lizard\\\": \\\"🦎\\\", \\\"snake\\\": \\\"🐍\\\", \\\"dragon_face\\\": \\\"🐲\\\", \\\"dragon\\\": \\\"🐉\\\", \\\"sauropod\\\": \\\"🦕\\\", \\\"t-rex\\\": \\\"🦖\\\", \\\"whale\\\": \\\"🐳\\\", \\\"whale2\\\": \\\"🐋\\\", \\\"dolphin\\\": \\\"🐬\\\", \\\"flipper\\\": \\\"🐬\\\", \\\"seal\\\": \\\"🦭\\\", \\\"fish\\\": \\\"🐟\\\", \\\"tropical_fish\\\": \\\"🐠\\\", \\\"blowfish\\\": \\\"🐡\\\", \\\"shark\\\": \\\"🦈\\\", \\\"octopus\\\": \\\"🐙\\\", \\\"shell\\\": \\\"🐚\\\", \\\"coral\\\": \\\"🪸\\\", \\\"jellyfish\\\": \\\"🪼\\\", \\\"snail\\\": \\\"🐌\\\", \\\"butterfly\\\": \\\"🦋\\\", \\\"bug\\\": \\\"🐛\\\", \\\"ant\\\": \\\"🐜\\\", \\\"bee\\\": \\\"🐝\\\", \\\"honeybee\\\": \\\"🐝\\\", \\\"beetle\\\": \\\"🪲\\\", \\\"lady_beetle\\\": \\\"🐞\\\", \\\"cricket\\\": \\\"🦗\\\", \\\"cockroach\\\": \\\"🪳\\\", \\\"spider\\\": \\\"🕷️\\\", \\\"spider_web\\\": \\\"🕸️\\\", \\\"scorpion\\\": \\\"🦂\\\", \\\"mosquito\\\": \\\"🦟\\\", \\\"fly\\\": \\\"🪰\\\", \\\"worm\\\": \\\"🪱\\\", \\\"microbe\\\": \\\"🦠\\\", \\\"bouquet\\\": \\\"💐\\\", \\\"cherry_blossom\\\": \\\"🌸\\\", \\\"white_flower\\\": \\\"💮\\\", \\\"lotus\\\": \\\"🪷\\\", \\\"rosette\\\": \\\"🏵️\\\", \\\"rose\\\": \\\"🌹\\\", \\\"wilted_flower\\\": \\\"🥀\\\", \\\"hibiscus\\\": \\\"🌺\\\", \\\"sunflower\\\": \\\"🌻\\\", \\\"blossom\\\": \\\"🌼\\\", \\\"tulip\\\": \\\"🌷\\\", \\\"hyacinth\\\": \\\"🪻\\\", \\\"seedling\\\": \\\"🌱\\\", \\\"potted_plant\\\": \\\"🪴\\\", \\\"evergreen_tree\\\": \\\"🌲\\\", \\\"deciduous_tree\\\": \\\"🌳\\\", \\\"palm_tree\\\": \\\"🌴\\\", \\\"cactus\\\": \\\"🌵\\\", \\\"ear_of_rice\\\": \\\"🌾\\\", \\\"herb\\\": \\\"🌿\\\", \\\"shamrock\\\": \\\"☘️\\\", \\\"four_leaf_clover\\\": \\\"🍀\\\", \\\"maple_leaf\\\": \\\"🍁\\\", \\\"fallen_leaf\\\": \\\"🍂\\\", \\\"leaves\\\": \\\"🍃\\\", \\\"empty_nest\\\": \\\"🪹\\\", \\\"nest_with_eggs\\\": \\\"🪺\\\", \\\"mushroom\\\": \\\"🍄\\\", \\\"grapes\\\": \\\"🍇\\\", \\\"melon\\\": \\\"🍈\\\", \\\"watermelon\\\": \\\"🍉\\\", \\\"tangerine\\\": \\\"🍊\\\", \\\"orange\\\": \\\"🍊\\\", \\\"mandarin\\\": \\\"🍊\\\", \\\"lemon\\\": \\\"🍋\\\", \\\"banana\\\": \\\"🍌\\\", \\\"pineapple\\\": \\\"🍍\\\", \\\"mango\\\": \\\"🥭\\\", \\\"apple\\\": \\\"🍎\\\", \\\"green_apple\\\": \\\"🍏\\\", \\\"pear\\\": \\\"🍐\\\", \\\"peach\\\": \\\"🍑\\\", \\\"cherries\\\": \\\"🍒\\\", \\\"strawberry\\\": \\\"🍓\\\", \\\"blueberries\\\": \\\"🫐\\\", \\\"kiwi_fruit\\\": \\\"🥝\\\", \\\"tomato\\\": \\\"🍅\\\", \\\"olive\\\": \\\"🫒\\\", \\\"coconut\\\": \\\"🥥\\\", \\\"avocado\\\": \\\"🥑\\\", \\\"eggplant\\\": \\\"🍆\\\", \\\"potato\\\": \\\"🥔\\\", \\\"carrot\\\": \\\"🥕\\\", \\\"corn\\\": \\\"🌽\\\", \\\"hot_pepper\\\": \\\"🌶️\\\", \\\"bell_pepper\\\": \\\"🫑\\\", \\\"cucumber\\\": \\\"🥒\\\", \\\"leafy_green\\\": \\\"🥬\\\", \\\"broccoli\\\": \\\"🥦\\\", \\\"garlic\\\": \\\"🧄\\\", \\\"onion\\\": \\\"🧅\\\", \\\"peanuts\\\": \\\"🥜\\\", \\\"beans\\\": \\\"🫘\\\", \\\"chestnut\\\": \\\"🌰\\\", \\\"ginger_root\\\": \\\"🫚\\\", \\\"pea_pod\\\": \\\"🫛\\\", \\\"bread\\\": \\\"🍞\\\", \\\"croissant\\\": \\\"🥐\\\", \\\"baguette_bread\\\": \\\"🥖\\\", \\\"flatbread\\\": \\\"🫓\\\", \\\"pretzel\\\": \\\"🥨\\\", \\\"bagel\\\": \\\"🥯\\\", \\\"pancakes\\\": \\\"🥞\\\", \\\"waffle\\\": \\\"🧇\\\", \\\"cheese\\\": \\\"🧀\\\", \\\"meat_on_bone\\\": \\\"🍖\\\", \\\"poultry_leg\\\": \\\"🍗\\\", \\\"cut_of_meat\\\": \\\"🥩\\\", \\\"bacon\\\": \\\"🥓\\\", \\\"hamburger\\\": \\\"🍔\\\", \\\"fries\\\": \\\"🍟\\\", \\\"pizza\\\": \\\"🍕\\\", \\\"hotdog\\\": \\\"🌭\\\", \\\"sandwich\\\": \\\"🥪\\\", \\\"taco\\\": \\\"🌮\\\", \\\"burrito\\\": \\\"🌯\\\", \\\"tamale\\\": \\\"🫔\\\", \\\"stuffed_flatbread\\\": \\\"🥙\\\", \\\"falafel\\\": \\\"🧆\\\", \\\"egg\\\": \\\"🥚\\\", \\\"fried_egg\\\": \\\"🍳\\\", \\\"shallow_pan_of_food\\\": \\\"🥘\\\", \\\"stew\\\": \\\"🍲\\\", \\\"fondue\\\": \\\"🫕\\\", \\\"bowl_with_spoon\\\": \\\"🥣\\\", \\\"green_salad\\\": \\\"🥗\\\", \\\"popcorn\\\": \\\"🍿\\\", \\\"butter\\\": \\\"🧈\\\", \\\"salt\\\": \\\"🧂\\\", \\\"canned_food\\\": \\\"🥫\\\", \\\"bento\\\": \\\"🍱\\\", \\\"rice_cracker\\\": \\\"🍘\\\", \\\"rice_ball\\\": \\\"🍙\\\", \\\"rice\\\": \\\"🍚\\\", \\\"curry\\\": \\\"🍛\\\", \\\"ramen\\\": \\\"🍜\\\", \\\"spaghetti\\\": \\\"🍝\\\", \\\"sweet_potato\\\": \\\"🍠\\\", \\\"oden\\\": \\\"🍢\\\", \\\"sushi\\\": \\\"🍣\\\", \\\"fried_shrimp\\\": \\\"🍤\\\", \\\"fish_cake\\\": \\\"🍥\\\", \\\"moon_cake\\\": \\\"🥮\\\", \\\"dango\\\": \\\"🍡\\\", \\\"dumpling\\\": \\\"🥟\\\", \\\"fortune_cookie\\\": \\\"🥠\\\", \\\"takeout_box\\\": \\\"🥡\\\", \\\"crab\\\": \\\"🦀\\\", \\\"lobster\\\": \\\"🦞\\\", \\\"shrimp\\\": \\\"🦐\\\", \\\"squid\\\": \\\"🦑\\\", \\\"oyster\\\": \\\"🦪\\\", \\\"icecream\\\": \\\"🍦\\\", \\\"shaved_ice\\\": \\\"🍧\\\", \\\"ice_cream\\\": \\\"🍨\\\", \\\"doughnut\\\": \\\"🍩\\\", \\\"cookie\\\": \\\"🍪\\\", \\\"birthday\\\": \\\"🎂\\\", \\\"cake\\\": \\\"🍰\\\", \\\"cupcake\\\": \\\"🧁\\\", \\\"pie\\\": \\\"🥧\\\", \\\"chocolate_bar\\\": \\\"🍫\\\", \\\"candy\\\": \\\"🍬\\\", \\\"lollipop\\\": \\\"🍭\\\", \\\"custard\\\": \\\"🍮\\\", \\\"honey_pot\\\": \\\"🍯\\\", \\\"baby_bottle\\\": \\\"🍼\\\", \\\"milk_glass\\\": \\\"🥛\\\", \\\"coffee\\\": \\\"☕\\\", \\\"teapot\\\": \\\"🫖\\\", \\\"tea\\\": \\\"🍵\\\", \\\"sake\\\": \\\"🍶\\\", \\\"champagne\\\": \\\"🍾\\\", \\\"wine_glass\\\": \\\"🍷\\\", \\\"cocktail\\\": \\\"🍸\\\", \\\"tropical_drink\\\": \\\"🍹\\\", \\\"beer\\\": \\\"🍺\\\", \\\"beers\\\": \\\"🍻\\\", \\\"clinking_glasses\\\": \\\"🥂\\\", \\\"tumbler_glass\\\": \\\"🥃\\\", \\\"pouring_liquid\\\": \\\"🫗\\\", \\\"cup_with_straw\\\": \\\"🥤\\\", \\\"bubble_tea\\\": \\\"🧋\\\", \\\"beverage_box\\\": \\\"🧃\\\", \\\"mate\\\": \\\"🧉\\\", \\\"ice_cube\\\": \\\"🧊\\\", \\\"chopsticks\\\": \\\"🥢\\\", \\\"plate_with_cutlery\\\": \\\"🍽️\\\", \\\"fork_and_knife\\\": \\\"🍴\\\", \\\"spoon\\\": \\\"🥄\\\", \\\"hocho\\\": \\\"🔪\\\", \\\"knife\\\": \\\"🔪\\\", \\\"jar\\\": \\\"🫙\\\", \\\"amphora\\\": \\\"🏺\\\", \\\"earth_africa\\\": \\\"🌍\\\", \\\"earth_americas\\\": \\\"🌎\\\", \\\"earth_asia\\\": \\\"🌏\\\", \\\"globe_with_meridians\\\": \\\"🌐\\\", \\\"world_map\\\": \\\"🗺️\\\", \\\"japan\\\": \\\"🗾\\\", \\\"compass\\\": \\\"🧭\\\", \\\"mountain_snow\\\": \\\"🏔️\\\", \\\"mountain\\\": \\\"⛰️\\\", \\\"volcano\\\": \\\"🌋\\\", \\\"mount_fuji\\\": \\\"🗻\\\", \\\"camping\\\": \\\"🏕️\\\", \\\"beach_umbrella\\\": \\\"🏖️\\\", \\\"desert\\\": \\\"🏜️\\\", \\\"desert_island\\\": \\\"🏝️\\\", \\\"national_park\\\": \\\"🏞️\\\", \\\"stadium\\\": \\\"🏟️\\\", \\\"classical_building\\\": \\\"🏛️\\\", \\\"building_construction\\\": \\\"🏗️\\\", \\\"bricks\\\": \\\"🧱\\\", \\\"rock\\\": \\\"🪨\\\", \\\"wood\\\": \\\"🪵\\\", \\\"hut\\\": \\\"🛖\\\", \\\"houses\\\": \\\"🏘️\\\", \\\"derelict_house\\\": \\\"🏚️\\\", \\\"house\\\": \\\"🏠\\\", \\\"house_with_garden\\\": \\\"🏡\\\", \\\"office\\\": \\\"🏢\\\", \\\"post_office\\\": \\\"🏣\\\", \\\"european_post_office\\\": \\\"🏤\\\", \\\"hospital\\\": \\\"🏥\\\", \\\"bank\\\": \\\"🏦\\\", \\\"hotel\\\": \\\"🏨\\\", \\\"love_hotel\\\": \\\"🏩\\\", \\\"convenience_store\\\": \\\"🏪\\\", \\\"school\\\": \\\"🏫\\\", \\\"department_store\\\": \\\"🏬\\\", \\\"factory\\\": \\\"🏭\\\", \\\"japanese_castle\\\": \\\"🏯\\\", \\\"european_castle\\\": \\\"🏰\\\", \\\"wedding\\\": \\\"💒\\\", \\\"tokyo_tower\\\": \\\"🗼\\\", \\\"statue_of_liberty\\\": \\\"🗽\\\", \\\"church\\\": \\\"⛪\\\", \\\"mosque\\\": \\\"🕌\\\", \\\"hindu_temple\\\": \\\"🛕\\\", \\\"synagogue\\\": \\\"🕍\\\", \\\"shinto_shrine\\\": \\\"⛩️\\\", \\\"kaaba\\\": \\\"🕋\\\", \\\"fountain\\\": \\\"⛲\\\", \\\"tent\\\": \\\"⛺\\\", \\\"foggy\\\": \\\"🌁\\\", \\\"night_with_stars\\\": \\\"🌃\\\", \\\"cityscape\\\": \\\"🏙️\\\", \\\"sunrise_over_mountains\\\": \\\"🌄\\\", \\\"sunrise\\\": \\\"🌅\\\", \\\"city_sunset\\\": \\\"🌆\\\", \\\"city_sunrise\\\": \\\"🌇\\\", \\\"bridge_at_night\\\": \\\"🌉\\\", \\\"hotsprings\\\": \\\"♨️\\\", \\\"carousel_horse\\\": \\\"🎠\\\", \\\"playground_slide\\\": \\\"🛝\\\", \\\"ferris_wheel\\\": \\\"🎡\\\", \\\"roller_coaster\\\": \\\"🎢\\\", \\\"barber\\\": \\\"💈\\\", \\\"circus_tent\\\": \\\"🎪\\\", \\\"steam_locomotive\\\": \\\"🚂\\\", \\\"railway_car\\\": \\\"🚃\\\", \\\"bullettrain_side\\\": \\\"🚄\\\", \\\"bullettrain_front\\\": \\\"🚅\\\", \\\"train2\\\": \\\"🚆\\\", \\\"metro\\\": \\\"🚇\\\", \\\"light_rail\\\": \\\"🚈\\\", \\\"station\\\": \\\"🚉\\\", \\\"tram\\\": \\\"🚊\\\", \\\"monorail\\\": \\\"🚝\\\", \\\"mountain_railway\\\": \\\"🚞\\\", \\\"train\\\": \\\"🚋\\\", \\\"bus\\\": \\\"🚌\\\", \\\"oncoming_bus\\\": \\\"🚍\\\", \\\"trolleybus\\\": \\\"🚎\\\", \\\"minibus\\\": \\\"🚐\\\", \\\"ambulance\\\": \\\"🚑\\\", \\\"fire_engine\\\": \\\"🚒\\\", \\\"police_car\\\": \\\"🚓\\\", \\\"oncoming_police_car\\\": \\\"🚔\\\", \\\"taxi\\\": \\\"🚕\\\", \\\"oncoming_taxi\\\": \\\"🚖\\\", \\\"car\\\": \\\"🚗\\\", \\\"red_car\\\": \\\"🚗\\\", \\\"oncoming_automobile\\\": \\\"🚘\\\", \\\"blue_car\\\": \\\"🚙\\\", \\\"pickup_truck\\\": \\\"🛻\\\", \\\"truck\\\": \\\"🚚\\\", \\\"articulated_lorry\\\": \\\"🚛\\\", \\\"tractor\\\": \\\"🚜\\\", \\\"racing_car\\\": \\\"🏎️\\\", \\\"motorcycle\\\": \\\"🏍️\\\", \\\"motor_scooter\\\": \\\"🛵\\\", \\\"manual_wheelchair\\\": \\\"🦽\\\", \\\"motorized_wheelchair\\\": \\\"🦼\\\", \\\"auto_rickshaw\\\": \\\"🛺\\\", \\\"bike\\\": \\\"🚲\\\", \\\"kick_scooter\\\": \\\"🛴\\\", \\\"skateboard\\\": \\\"🛹\\\", \\\"roller_skate\\\": \\\"🛼\\\", \\\"busstop\\\": \\\"🚏\\\", \\\"motorway\\\": \\\"🛣️\\\", \\\"railway_track\\\": \\\"🛤️\\\", \\\"oil_drum\\\": \\\"🛢️\\\", \\\"fuelpump\\\": \\\"⛽\\\", \\\"wheel\\\": \\\"🛞\\\", \\\"rotating_light\\\": \\\"🚨\\\", \\\"traffic_light\\\": \\\"🚥\\\", \\\"vertical_traffic_light\\\": \\\"🚦\\\", \\\"stop_sign\\\": \\\"🛑\\\", \\\"construction\\\": \\\"🚧\\\", \\\"anchor\\\": \\\"⚓\\\", \\\"ring_buoy\\\": \\\"🛟\\\", \\\"boat\\\": \\\"⛵\\\", \\\"sailboat\\\": \\\"⛵\\\", \\\"canoe\\\": \\\"🛶\\\", \\\"speedboat\\\": \\\"🚤\\\", \\\"passenger_ship\\\": \\\"🛳️\\\", \\\"ferry\\\": \\\"⛴️\\\", \\\"motor_boat\\\": \\\"🛥️\\\", \\\"ship\\\": \\\"🚢\\\", \\\"airplane\\\": \\\"✈️\\\", \\\"small_airplane\\\": \\\"🛩️\\\", \\\"flight_departure\\\": \\\"🛫\\\", \\\"flight_arrival\\\": \\\"🛬\\\", \\\"parachute\\\": \\\"🪂\\\", \\\"seat\\\": \\\"💺\\\", \\\"helicopter\\\": \\\"🚁\\\", \\\"suspension_railway\\\": \\\"🚟\\\", \\\"mountain_cableway\\\": \\\"🚠\\\", \\\"aerial_tramway\\\": \\\"🚡\\\", \\\"artificial_satellite\\\": \\\"🛰️\\\", \\\"rocket\\\": \\\"🚀\\\", \\\"flying_saucer\\\": \\\"🛸\\\", \\\"bellhop_bell\\\": \\\"🛎️\\\", \\\"luggage\\\": \\\"🧳\\\", \\\"hourglass\\\": \\\"⌛\\\", \\\"hourglass_flowing_sand\\\": \\\"⏳\\\", \\\"watch\\\": \\\"⌚\\\", \\\"alarm_clock\\\": \\\"⏰\\\", \\\"stopwatch\\\": \\\"⏱️\\\", \\\"timer_clock\\\": \\\"⏲️\\\", \\\"mantelpiece_clock\\\": \\\"🕰️\\\", \\\"clock12\\\": \\\"🕛\\\", \\\"clock1230\\\": \\\"🕧\\\", \\\"clock1\\\": \\\"🕐\\\", \\\"clock130\\\": \\\"🕜\\\", \\\"clock2\\\": \\\"🕑\\\", \\\"clock230\\\": \\\"🕝\\\", \\\"clock3\\\": \\\"🕒\\\", \\\"clock330\\\": \\\"🕞\\\", \\\"clock4\\\": \\\"🕓\\\", \\\"clock430\\\": \\\"🕟\\\", \\\"clock5\\\": \\\"🕔\\\", \\\"clock530\\\": \\\"🕠\\\", \\\"clock6\\\": \\\"🕕\\\", \\\"clock630\\\": \\\"🕡\\\", \\\"clock7\\\": \\\"🕖\\\", \\\"clock730\\\": \\\"🕢\\\", \\\"clock8\\\": \\\"🕗\\\", \\\"clock830\\\": \\\"🕣\\\", \\\"clock9\\\": \\\"🕘\\\", \\\"clock930\\\": \\\"🕤\\\", \\\"clock10\\\": \\\"🕙\\\", \\\"clock1030\\\": \\\"🕥\\\", \\\"clock11\\\": \\\"🕚\\\", \\\"clock1130\\\": \\\"🕦\\\", \\\"new_moon\\\": \\\"🌑\\\", \\\"waxing_crescent_moon\\\": \\\"🌒\\\", \\\"first_quarter_moon\\\": \\\"🌓\\\", \\\"moon\\\": \\\"🌔\\\", \\\"waxing_gibbous_moon\\\": \\\"🌔\\\", \\\"full_moon\\\": \\\"🌕\\\", \\\"waning_gibbous_moon\\\": \\\"🌖\\\", \\\"last_quarter_moon\\\": \\\"🌗\\\", \\\"waning_crescent_moon\\\": \\\"🌘\\\", \\\"crescent_moon\\\": \\\"🌙\\\", \\\"new_moon_with_face\\\": \\\"🌚\\\", \\\"first_quarter_moon_with_face\\\": \\\"🌛\\\", \\\"last_quarter_moon_with_face\\\": \\\"🌜\\\", \\\"thermometer\\\": \\\"🌡️\\\", \\\"sunny\\\": \\\"☀️\\\", \\\"full_moon_with_face\\\": \\\"🌝\\\", \\\"sun_with_face\\\": \\\"🌞\\\", \\\"ringed_planet\\\": \\\"🪐\\\", \\\"star\\\": \\\"⭐\\\", \\\"star2\\\": \\\"🌟\\\", \\\"stars\\\": \\\"🌠\\\", \\\"milky_way\\\": \\\"🌌\\\", \\\"cloud\\\": \\\"☁️\\\", \\\"partly_sunny\\\": \\\"⛅\\\", \\\"cloud_with_lightning_and_rain\\\": \\\"⛈️\\\", \\\"sun_behind_small_cloud\\\": \\\"🌤️\\\", \\\"sun_behind_large_cloud\\\": \\\"🌥️\\\", \\\"sun_behind_rain_cloud\\\": \\\"🌦️\\\", \\\"cloud_with_rain\\\": \\\"🌧️\\\", \\\"cloud_with_snow\\\": \\\"🌨️\\\", \\\"cloud_with_lightning\\\": \\\"🌩️\\\", \\\"tornado\\\": \\\"🌪️\\\", \\\"fog\\\": \\\"🌫️\\\", \\\"wind_face\\\": \\\"🌬️\\\", \\\"cyclone\\\": \\\"🌀\\\", \\\"rainbow\\\": \\\"🌈\\\", \\\"closed_umbrella\\\": \\\"🌂\\\", \\\"open_umbrella\\\": \\\"☂️\\\", \\\"umbrella\\\": \\\"☔\\\", \\\"parasol_on_ground\\\": \\\"⛱️\\\", \\\"zap\\\": \\\"⚡\\\", \\\"snowflake\\\": \\\"❄️\\\", \\\"snowman_with_snow\\\": \\\"☃️\\\", \\\"snowman\\\": \\\"⛄\\\", \\\"comet\\\": \\\"☄️\\\", \\\"fire\\\": \\\"🔥\\\", \\\"droplet\\\": \\\"💧\\\", \\\"ocean\\\": \\\"🌊\\\", \\\"jack_o_lantern\\\": \\\"🎃\\\", \\\"christmas_tree\\\": \\\"🎄\\\", \\\"fireworks\\\": \\\"🎆\\\", \\\"sparkler\\\": \\\"🎇\\\", \\\"firecracker\\\": \\\"🧨\\\", \\\"sparkles\\\": \\\"✨\\\", \\\"balloon\\\": \\\"🎈\\\", \\\"tada\\\": \\\"🎉\\\", \\\"confetti_ball\\\": \\\"🎊\\\", \\\"tanabata_tree\\\": \\\"🎋\\\", \\\"bamboo\\\": \\\"🎍\\\", \\\"dolls\\\": \\\"🎎\\\", \\\"flags\\\": \\\"🎏\\\", \\\"wind_chime\\\": \\\"🎐\\\", \\\"rice_scene\\\": \\\"🎑\\\", \\\"red_envelope\\\": \\\"🧧\\\", \\\"ribbon\\\": \\\"🎀\\\", \\\"gift\\\": \\\"🎁\\\", \\\"reminder_ribbon\\\": \\\"🎗️\\\", \\\"tickets\\\": \\\"🎟️\\\", \\\"ticket\\\": \\\"🎫\\\", \\\"medal_military\\\": \\\"🎖️\\\", \\\"trophy\\\": \\\"🏆\\\", \\\"medal_sports\\\": \\\"🏅\\\", \\\"1st_place_medal\\\": \\\"🥇\\\", \\\"2nd_place_medal\\\": \\\"🥈\\\", \\\"3rd_place_medal\\\": \\\"🥉\\\", \\\"soccer\\\": \\\"⚽\\\", \\\"baseball\\\": \\\"⚾\\\", \\\"softball\\\": \\\"🥎\\\", \\\"basketball\\\": \\\"🏀\\\", \\\"volleyball\\\": \\\"🏐\\\", \\\"football\\\": \\\"🏈\\\", \\\"rugby_football\\\": \\\"🏉\\\", \\\"tennis\\\": \\\"🎾\\\", \\\"flying_disc\\\": \\\"🥏\\\", \\\"bowling\\\": \\\"🎳\\\", \\\"cricket_game\\\": \\\"🏏\\\", \\\"field_hockey\\\": \\\"🏑\\\", \\\"ice_hockey\\\": \\\"🏒\\\", \\\"lacrosse\\\": \\\"🥍\\\", \\\"ping_pong\\\": \\\"🏓\\\", \\\"badminton\\\": \\\"🏸\\\", \\\"boxing_glove\\\": \\\"🥊\\\", \\\"martial_arts_uniform\\\": \\\"🥋\\\", \\\"goal_net\\\": \\\"🥅\\\", \\\"golf\\\": \\\"⛳\\\", \\\"ice_skate\\\": \\\"⛸️\\\", \\\"fishing_pole_and_fish\\\": \\\"🎣\\\", \\\"diving_mask\\\": \\\"🤿\\\", \\\"running_shirt_with_sash\\\": \\\"🎽\\\", \\\"ski\\\": \\\"🎿\\\", \\\"sled\\\": \\\"🛷\\\", \\\"curling_stone\\\": \\\"🥌\\\", \\\"dart\\\": \\\"🎯\\\", \\\"yo_yo\\\": \\\"🪀\\\", \\\"kite\\\": \\\"🪁\\\", \\\"gun\\\": \\\"🔫\\\", \\\"8ball\\\": \\\"🎱\\\", \\\"crystal_ball\\\": \\\"🔮\\\", \\\"magic_wand\\\": \\\"🪄\\\", \\\"video_game\\\": \\\"🎮\\\", \\\"joystick\\\": \\\"🕹️\\\", \\\"slot_machine\\\": \\\"🎰\\\", \\\"game_die\\\": \\\"🎲\\\", \\\"jigsaw\\\": \\\"🧩\\\", \\\"teddy_bear\\\": \\\"🧸\\\", \\\"pinata\\\": \\\"🪅\\\", \\\"mirror_ball\\\": \\\"🪩\\\", \\\"nesting_dolls\\\": \\\"🪆\\\", \\\"spades\\\": \\\"♠️\\\", \\\"hearts\\\": \\\"♥️\\\", \\\"diamonds\\\": \\\"♦️\\\", \\\"clubs\\\": \\\"♣️\\\", \\\"chess_pawn\\\": \\\"♟️\\\", \\\"black_joker\\\": \\\"🃏\\\", \\\"mahjong\\\": \\\"🀄\\\", \\\"flower_playing_cards\\\": \\\"🎴\\\", \\\"performing_arts\\\": \\\"🎭\\\", \\\"framed_picture\\\": \\\"🖼️\\\", \\\"art\\\": \\\"🎨\\\", \\\"thread\\\": \\\"🧵\\\", \\\"sewing_needle\\\": \\\"🪡\\\", \\\"yarn\\\": \\\"🧶\\\", \\\"knot\\\": \\\"🪢\\\", \\\"eyeglasses\\\": \\\"👓\\\", \\\"dark_sunglasses\\\": \\\"🕶️\\\", \\\"goggles\\\": \\\"🥽\\\", \\\"lab_coat\\\": \\\"🥼\\\", \\\"safety_vest\\\": \\\"🦺\\\", \\\"necktie\\\": \\\"👔\\\", \\\"shirt\\\": \\\"👕\\\", \\\"tshirt\\\": \\\"👕\\\", \\\"jeans\\\": \\\"👖\\\", \\\"scarf\\\": \\\"🧣\\\", \\\"gloves\\\": \\\"🧤\\\", \\\"coat\\\": \\\"🧥\\\", \\\"socks\\\": \\\"🧦\\\", \\\"dress\\\": \\\"👗\\\", \\\"kimono\\\": \\\"👘\\\", \\\"sari\\\": \\\"🥻\\\", \\\"one_piece_swimsuit\\\": \\\"🩱\\\", \\\"swim_brief\\\": \\\"🩲\\\", \\\"shorts\\\": \\\"🩳\\\", \\\"bikini\\\": \\\"👙\\\", \\\"womans_clothes\\\": \\\"👚\\\", \\\"folding_hand_fan\\\": \\\"🪭\\\", \\\"purse\\\": \\\"👛\\\", \\\"handbag\\\": \\\"👜\\\", \\\"pouch\\\": \\\"👝\\\", \\\"shopping\\\": \\\"🛍️\\\", \\\"school_satchel\\\": \\\"🎒\\\", \\\"thong_sandal\\\": \\\"🩴\\\", \\\"mans_shoe\\\": \\\"👞\\\", \\\"shoe\\\": \\\"👞\\\", \\\"athletic_shoe\\\": \\\"👟\\\", \\\"hiking_boot\\\": \\\"🥾\\\", \\\"flat_shoe\\\": \\\"🥿\\\", \\\"high_heel\\\": \\\"👠\\\", \\\"sandal\\\": \\\"👡\\\", \\\"ballet_shoes\\\": \\\"🩰\\\", \\\"boot\\\": \\\"👢\\\", \\\"hair_pick\\\": \\\"🪮\\\", \\\"crown\\\": \\\"👑\\\", \\\"womans_hat\\\": \\\"👒\\\", \\\"tophat\\\": \\\"🎩\\\", \\\"mortar_board\\\": \\\"🎓\\\", \\\"billed_cap\\\": \\\"🧢\\\", \\\"military_helmet\\\": \\\"🪖\\\", \\\"rescue_worker_helmet\\\": \\\"⛑️\\\", \\\"prayer_beads\\\": \\\"📿\\\", \\\"lipstick\\\": \\\"💄\\\", \\\"ring\\\": \\\"💍\\\", \\\"gem\\\": \\\"💎\\\", \\\"mute\\\": \\\"🔇\\\", \\\"speaker\\\": \\\"🔈\\\", \\\"sound\\\": \\\"🔉\\\", \\\"loud_sound\\\": \\\"🔊\\\", \\\"loudspeaker\\\": \\\"📢\\\", \\\"mega\\\": \\\"📣\\\", \\\"postal_horn\\\": \\\"📯\\\", \\\"bell\\\": \\\"🔔\\\", \\\"no_bell\\\": \\\"🔕\\\", \\\"musical_score\\\": \\\"🎼\\\", \\\"musical_note\\\": \\\"🎵\\\", \\\"notes\\\": \\\"🎶\\\", \\\"studio_microphone\\\": \\\"🎙️\\\", \\\"level_slider\\\": \\\"🎚️\\\", \\\"control_knobs\\\": \\\"🎛️\\\", \\\"microphone\\\": \\\"🎤\\\", \\\"headphones\\\": \\\"🎧\\\", \\\"radio\\\": \\\"📻\\\", \\\"saxophone\\\": \\\"🎷\\\", \\\"accordion\\\": \\\"🪗\\\", \\\"guitar\\\": \\\"🎸\\\", \\\"musical_keyboard\\\": \\\"🎹\\\", \\\"trumpet\\\": \\\"🎺\\\", \\\"violin\\\": \\\"🎻\\\", \\\"banjo\\\": \\\"🪕\\\", \\\"drum\\\": \\\"🥁\\\", \\\"long_drum\\\": \\\"🪘\\\", \\\"maracas\\\": \\\"🪇\\\", \\\"flute\\\": \\\"🪈\\\", \\\"iphone\\\": \\\"📱\\\", \\\"calling\\\": \\\"📲\\\", \\\"phone\\\": \\\"☎️\\\", \\\"telephone\\\": \\\"☎️\\\", \\\"telephone_receiver\\\": \\\"📞\\\", \\\"pager\\\": \\\"📟\\\", \\\"fax\\\": \\\"📠\\\", \\\"battery\\\": \\\"🔋\\\", \\\"low_battery\\\": \\\"🪫\\\", \\\"electric_plug\\\": \\\"🔌\\\", \\\"computer\\\": \\\"💻\\\", \\\"desktop_computer\\\": \\\"🖥️\\\", \\\"printer\\\": \\\"🖨️\\\", \\\"keyboard\\\": \\\"⌨️\\\", \\\"computer_mouse\\\": \\\"🖱️\\\", \\\"trackball\\\": \\\"🖲️\\\", \\\"minidisc\\\": \\\"💽\\\", \\\"floppy_disk\\\": \\\"💾\\\", \\\"cd\\\": \\\"💿\\\", \\\"dvd\\\": \\\"📀\\\", \\\"abacus\\\": \\\"🧮\\\", \\\"movie_camera\\\": \\\"🎥\\\", \\\"film_strip\\\": \\\"🎞️\\\", \\\"film_projector\\\": \\\"📽️\\\", \\\"clapper\\\": \\\"🎬\\\", \\\"tv\\\": \\\"📺\\\", \\\"camera\\\": \\\"📷\\\", \\\"camera_flash\\\": \\\"📸\\\", \\\"video_camera\\\": \\\"📹\\\", \\\"vhs\\\": \\\"📼\\\", \\\"mag\\\": \\\"🔍\\\", \\\"mag_right\\\": \\\"🔎\\\", \\\"candle\\\": \\\"🕯️\\\", \\\"bulb\\\": \\\"💡\\\", \\\"flashlight\\\": \\\"🔦\\\", \\\"izakaya_lantern\\\": \\\"🏮\\\", \\\"lantern\\\": \\\"🏮\\\", \\\"diya_lamp\\\": \\\"🪔\\\", \\\"notebook_with_decorative_cover\\\": \\\"📔\\\", \\\"closed_book\\\": \\\"📕\\\", \\\"book\\\": \\\"📖\\\", \\\"open_book\\\": \\\"📖\\\", \\\"green_book\\\": \\\"📗\\\", \\\"blue_book\\\": \\\"📘\\\", \\\"orange_book\\\": \\\"📙\\\", \\\"books\\\": \\\"📚\\\", \\\"notebook\\\": \\\"📓\\\", \\\"ledger\\\": \\\"📒\\\", \\\"page_with_curl\\\": \\\"📃\\\", \\\"scroll\\\": \\\"📜\\\", \\\"page_facing_up\\\": \\\"📄\\\", \\\"newspaper\\\": \\\"📰\\\", \\\"newspaper_roll\\\": \\\"🗞️\\\", \\\"bookmark_tabs\\\": \\\"📑\\\", \\\"bookmark\\\": \\\"🔖\\\", \\\"label\\\": \\\"🏷️\\\", \\\"moneybag\\\": \\\"💰\\\", \\\"coin\\\": \\\"🪙\\\", \\\"yen\\\": \\\"💴\\\", \\\"dollar\\\": \\\"💵\\\", \\\"euro\\\": \\\"💶\\\", \\\"pound\\\": \\\"💷\\\", \\\"money_with_wings\\\": \\\"💸\\\", \\\"credit_card\\\": \\\"💳\\\", \\\"receipt\\\": \\\"🧾\\\", \\\"chart\\\": \\\"💹\\\", \\\"envelope\\\": \\\"✉️\\\", \\\"email\\\": \\\"📧\\\", \\\"e-mail\\\": \\\"📧\\\", \\\"incoming_envelope\\\": \\\"📨\\\", \\\"envelope_with_arrow\\\": \\\"📩\\\", \\\"outbox_tray\\\": \\\"📤\\\", \\\"inbox_tray\\\": \\\"📥\\\", \\\"package\\\": \\\"📦\\\", \\\"mailbox\\\": \\\"📫\\\", \\\"mailbox_closed\\\": \\\"📪\\\", \\\"mailbox_with_mail\\\": \\\"📬\\\", \\\"mailbox_with_no_mail\\\": \\\"📭\\\", \\\"postbox\\\": \\\"📮\\\", \\\"ballot_box\\\": \\\"🗳️\\\", \\\"pencil2\\\": \\\"✏️\\\", \\\"black_nib\\\": \\\"✒️\\\", \\\"fountain_pen\\\": \\\"🖋️\\\", \\\"pen\\\": \\\"🖊️\\\", \\\"paintbrush\\\": \\\"🖌️\\\", \\\"crayon\\\": \\\"🖍️\\\", \\\"memo\\\": \\\"📝\\\", \\\"pencil\\\": \\\"📝\\\", \\\"briefcase\\\": \\\"💼\\\", \\\"file_folder\\\": \\\"📁\\\", \\\"open_file_folder\\\": \\\"📂\\\", \\\"card_index_dividers\\\": \\\"🗂️\\\", \\\"date\\\": \\\"📅\\\", \\\"calendar\\\": \\\"📆\\\", \\\"spiral_notepad\\\": \\\"🗒️\\\", \\\"spiral_calendar\\\": \\\"🗓️\\\", \\\"card_index\\\": \\\"📇\\\", \\\"chart_with_upwards_trend\\\": \\\"📈\\\", \\\"chart_with_downwards_trend\\\": \\\"📉\\\", \\\"bar_chart\\\": \\\"📊\\\", \\\"clipboard\\\": \\\"📋\\\", \\\"pushpin\\\": \\\"📌\\\", \\\"round_pushpin\\\": \\\"📍\\\", \\\"paperclip\\\": \\\"📎\\\", \\\"paperclips\\\": \\\"🖇️\\\", \\\"straight_ruler\\\": \\\"📏\\\", \\\"triangular_ruler\\\": \\\"📐\\\", \\\"scissors\\\": \\\"✂️\\\", \\\"card_file_box\\\": \\\"🗃️\\\", \\\"file_cabinet\\\": \\\"🗄️\\\", \\\"wastebasket\\\": \\\"🗑️\\\", \\\"lock\\\": \\\"🔒\\\", \\\"unlock\\\": \\\"🔓\\\", \\\"lock_with_ink_pen\\\": \\\"🔏\\\", \\\"closed_lock_with_key\\\": \\\"🔐\\\", \\\"key\\\": \\\"🔑\\\", \\\"old_key\\\": \\\"🗝️\\\", \\\"hammer\\\": \\\"🔨\\\", \\\"axe\\\": \\\"🪓\\\", \\\"pick\\\": \\\"⛏️\\\", \\\"hammer_and_pick\\\": \\\"⚒️\\\", \\\"hammer_and_wrench\\\": \\\"🛠️\\\", \\\"dagger\\\": \\\"🗡️\\\", \\\"crossed_swords\\\": \\\"⚔️\\\", \\\"bomb\\\": \\\"💣\\\", \\\"boomerang\\\": \\\"🪃\\\", \\\"bow_and_arrow\\\": \\\"🏹\\\", \\\"shield\\\": \\\"🛡️\\\", \\\"carpentry_saw\\\": \\\"🪚\\\", \\\"wrench\\\": \\\"🔧\\\", \\\"screwdriver\\\": \\\"🪛\\\", \\\"nut_and_bolt\\\": \\\"🔩\\\", \\\"gear\\\": \\\"⚙️\\\", \\\"clamp\\\": \\\"🗜️\\\", \\\"balance_scale\\\": \\\"⚖️\\\", \\\"probing_cane\\\": \\\"🦯\\\", \\\"link\\\": \\\"🔗\\\", \\\"chains\\\": \\\"⛓️\\\", \\\"hook\\\": \\\"🪝\\\", \\\"toolbox\\\": \\\"🧰\\\", \\\"magnet\\\": \\\"🧲\\\", \\\"ladder\\\": \\\"🪜\\\", \\\"alembic\\\": \\\"⚗️\\\", \\\"test_tube\\\": \\\"🧪\\\", \\\"petri_dish\\\": \\\"🧫\\\", \\\"dna\\\": \\\"🧬\\\", \\\"microscope\\\": \\\"🔬\\\", \\\"telescope\\\": \\\"🔭\\\", \\\"satellite\\\": \\\"📡\\\", \\\"syringe\\\": \\\"💉\\\", \\\"drop_of_blood\\\": \\\"🩸\\\", \\\"pill\\\": \\\"💊\\\", \\\"adhesive_bandage\\\": \\\"🩹\\\", \\\"crutch\\\": \\\"🩼\\\", \\\"stethoscope\\\": \\\"🩺\\\", \\\"x_ray\\\": \\\"🩻\\\", \\\"door\\\": \\\"🚪\\\", \\\"elevator\\\": \\\"🛗\\\", \\\"mirror\\\": \\\"🪞\\\", \\\"window\\\": \\\"🪟\\\", \\\"bed\\\": \\\"🛏️\\\", \\\"couch_and_lamp\\\": \\\"🛋️\\\", \\\"chair\\\": \\\"🪑\\\", \\\"toilet\\\": \\\"🚽\\\", \\\"plunger\\\": \\\"🪠\\\", \\\"shower\\\": \\\"🚿\\\", \\\"bathtub\\\": \\\"🛁\\\", \\\"mouse_trap\\\": \\\"🪤\\\", \\\"razor\\\": \\\"🪒\\\", \\\"lotion_bottle\\\": \\\"🧴\\\", \\\"safety_pin\\\": \\\"🧷\\\", \\\"broom\\\": \\\"🧹\\\", \\\"basket\\\": \\\"🧺\\\", \\\"roll_of_paper\\\": \\\"🧻\\\", \\\"bucket\\\": \\\"🪣\\\", \\\"soap\\\": \\\"🧼\\\", \\\"bubbles\\\": \\\"🫧\\\", \\\"toothbrush\\\": \\\"🪥\\\", \\\"sponge\\\": \\\"🧽\\\", \\\"fire_extinguisher\\\": \\\"🧯\\\", \\\"shopping_cart\\\": \\\"🛒\\\", \\\"smoking\\\": \\\"🚬\\\", \\\"coffin\\\": \\\"⚰️\\\", \\\"headstone\\\": \\\"🪦\\\", \\\"funeral_urn\\\": \\\"⚱️\\\", \\\"nazar_amulet\\\": \\\"🧿\\\", \\\"hamsa\\\": \\\"🪬\\\", \\\"moyai\\\": \\\"🗿\\\", \\\"placard\\\": \\\"🪧\\\", \\\"identification_card\\\": \\\"🪪\\\", \\\"atm\\\": \\\"🏧\\\", \\\"put_litter_in_its_place\\\": \\\"🚮\\\", \\\"potable_water\\\": \\\"🚰\\\", \\\"wheelchair\\\": \\\"♿\\\", \\\"mens\\\": \\\"🚹\\\", \\\"womens\\\": \\\"🚺\\\", \\\"restroom\\\": \\\"🚻\\\", \\\"baby_symbol\\\": \\\"🚼\\\", \\\"wc\\\": \\\"🚾\\\", \\\"passport_control\\\": \\\"🛂\\\", \\\"customs\\\": \\\"🛃\\\", \\\"baggage_claim\\\": \\\"🛄\\\", \\\"left_luggage\\\": \\\"🛅\\\", \\\"warning\\\": \\\"⚠️\\\", \\\"children_crossing\\\": \\\"🚸\\\", \\\"no_entry\\\": \\\"⛔\\\", \\\"no_entry_sign\\\": \\\"🚫\\\", \\\"no_bicycles\\\": \\\"🚳\\\", \\\"no_smoking\\\": \\\"🚭\\\", \\\"do_not_litter\\\": \\\"🚯\\\", \\\"non-potable_water\\\": \\\"🚱\\\", \\\"no_pedestrians\\\": \\\"🚷\\\", \\\"no_mobile_phones\\\": \\\"📵\\\", \\\"underage\\\": \\\"🔞\\\", \\\"radioactive\\\": \\\"☢️\\\", \\\"biohazard\\\": \\\"☣️\\\", \\\"arrow_up\\\": \\\"⬆️\\\", \\\"arrow_upper_right\\\": \\\"↗️\\\", \\\"arrow_right\\\": \\\"➡️\\\", \\\"arrow_lower_right\\\": \\\"↘️\\\", \\\"arrow_down\\\": \\\"⬇️\\\", \\\"arrow_lower_left\\\": \\\"↙️\\\", \\\"arrow_left\\\": \\\"⬅️\\\", \\\"arrow_upper_left\\\": \\\"↖️\\\", \\\"arrow_up_down\\\": \\\"↕️\\\", \\\"left_right_arrow\\\": \\\"↔️\\\", \\\"leftwards_arrow_with_hook\\\": \\\"↩️\\\", \\\"arrow_right_hook\\\": \\\"↪️\\\", \\\"arrow_heading_up\\\": \\\"⤴️\\\", \\\"arrow_heading_down\\\": \\\"⤵️\\\", \\\"arrows_clockwise\\\": \\\"🔃\\\", \\\"arrows_counterclockwise\\\": \\\"🔄\\\", \\\"back\\\": \\\"🔙\\\", \\\"end\\\": \\\"🔚\\\", \\\"on\\\": \\\"🔛\\\", \\\"soon\\\": \\\"🔜\\\", \\\"top\\\": \\\"🔝\\\", \\\"place_of_worship\\\": \\\"🛐\\\", \\\"atom_symbol\\\": \\\"⚛️\\\", \\\"om\\\": \\\"🕉️\\\", \\\"star_of_david\\\": \\\"✡️\\\", \\\"wheel_of_dharma\\\": \\\"☸️\\\", \\\"yin_yang\\\": \\\"☯️\\\", \\\"latin_cross\\\": \\\"✝️\\\", \\\"orthodox_cross\\\": \\\"☦️\\\", \\\"star_and_crescent\\\": \\\"☪️\\\", \\\"peace_symbol\\\": \\\"☮️\\\", \\\"menorah\\\": \\\"🕎\\\", \\\"six_pointed_star\\\": \\\"🔯\\\", \\\"khanda\\\": \\\"🪯\\\", \\\"aries\\\": \\\"♈\\\", \\\"taurus\\\": \\\"♉\\\", \\\"gemini\\\": \\\"♊\\\", \\\"cancer\\\": \\\"♋\\\", \\\"leo\\\": \\\"♌\\\", \\\"virgo\\\": \\\"♍\\\", \\\"libra\\\": \\\"♎\\\", \\\"scorpius\\\": \\\"♏\\\", \\\"sagittarius\\\": \\\"♐\\\", \\\"capricorn\\\": \\\"♑\\\", \\\"aquarius\\\": \\\"♒\\\", \\\"pisces\\\": \\\"♓\\\", \\\"ophiuchus\\\": \\\"⛎\\\", \\\"twisted_rightwards_arrows\\\": \\\"🔀\\\", \\\"repeat\\\": \\\"🔁\\\", \\\"repeat_one\\\": \\\"🔂\\\", \\\"arrow_forward\\\": \\\"▶️\\\", \\\"fast_forward\\\": \\\"⏩\\\", \\\"next_track_button\\\": \\\"⏭️\\\", \\\"play_or_pause_button\\\": \\\"⏯️\\\", \\\"arrow_backward\\\": \\\"◀️\\\", \\\"rewind\\\": \\\"⏪\\\", \\\"previous_track_button\\\": \\\"⏮️\\\", \\\"arrow_up_small\\\": \\\"🔼\\\", \\\"arrow_double_up\\\": \\\"⏫\\\", \\\"arrow_down_small\\\": \\\"🔽\\\", \\\"arrow_double_down\\\": \\\"⏬\\\", \\\"pause_button\\\": \\\"⏸️\\\", \\\"stop_button\\\": \\\"⏹️\\\", \\\"record_button\\\": \\\"⏺️\\\", \\\"eject_button\\\": \\\"⏏️\\\", \\\"cinema\\\": \\\"🎦\\\", \\\"low_brightness\\\": \\\"🔅\\\", \\\"high_brightness\\\": \\\"🔆\\\", \\\"signal_strength\\\": \\\"📶\\\", \\\"wireless\\\": \\\"🛜\\\", \\\"vibration_mode\\\": \\\"📳\\\", \\\"mobile_phone_off\\\": \\\"📴\\\", \\\"female_sign\\\": \\\"♀️\\\", \\\"male_sign\\\": \\\"♂️\\\", \\\"transgender_symbol\\\": \\\"⚧️\\\", \\\"heavy_multiplication_x\\\": \\\"✖️\\\", \\\"heavy_plus_sign\\\": \\\"➕\\\", \\\"heavy_minus_sign\\\": \\\"➖\\\", \\\"heavy_division_sign\\\": \\\"➗\\\", \\\"heavy_equals_sign\\\": \\\"🟰\\\", \\\"infinity\\\": \\\"♾️\\\", \\\"bangbang\\\": \\\"‼️\\\", \\\"interrobang\\\": \\\"⁉️\\\", \\\"question\\\": \\\"❓\\\", \\\"grey_question\\\": \\\"❔\\\", \\\"grey_exclamation\\\": \\\"❕\\\", \\\"exclamation\\\": \\\"❗\\\", \\\"heavy_exclamation_mark\\\": \\\"❗\\\", \\\"wavy_dash\\\": \\\"〰️\\\", \\\"currency_exchange\\\": \\\"💱\\\", \\\"heavy_dollar_sign\\\": \\\"💲\\\", \\\"medical_symbol\\\": \\\"⚕️\\\", \\\"recycle\\\": \\\"♻️\\\", \\\"fleur_de_lis\\\": \\\"⚜️\\\", \\\"trident\\\": \\\"🔱\\\", \\\"name_badge\\\": \\\"📛\\\", \\\"beginner\\\": \\\"🔰\\\", \\\"o\\\": \\\"⭕\\\", \\\"white_check_mark\\\": \\\"✅\\\", \\\"ballot_box_with_check\\\": \\\"☑️\\\", \\\"heavy_check_mark\\\": \\\"✔️\\\", \\\"x\\\": \\\"❌\\\", \\\"negative_squared_cross_mark\\\": \\\"❎\\\", \\\"curly_loop\\\": \\\"➰\\\", \\\"loop\\\": \\\"➿\\\", \\\"part_alternation_mark\\\": \\\"〽️\\\", \\\"eight_spoked_asterisk\\\": \\\"✳️\\\", \\\"eight_pointed_black_star\\\": \\\"✴️\\\", \\\"sparkle\\\": \\\"❇️\\\", \\\"copyright\\\": \\\"©️\\\", \\\"registered\\\": \\\"®️\\\", \\\"tm\\\": \\\"™️\\\", \\\"hash\\\": \\\"#️⃣\\\", \\\"asterisk\\\": \\\"*️⃣\\\", \\\"zero\\\": \\\"0️⃣\\\", \\\"one\\\": \\\"1️⃣\\\", \\\"two\\\": \\\"2️⃣\\\", \\\"three\\\": \\\"3️⃣\\\", \\\"four\\\": \\\"4️⃣\\\", \\\"five\\\": \\\"5️⃣\\\", \\\"six\\\": \\\"6️⃣\\\", \\\"seven\\\": \\\"7️⃣\\\", \\\"eight\\\": \\\"8️⃣\\\", \\\"nine\\\": \\\"9️⃣\\\", \\\"keycap_ten\\\": \\\"🔟\\\", \\\"capital_abcd\\\": \\\"🔠\\\", \\\"abcd\\\": \\\"🔡\\\", \\\"symbols\\\": \\\"🔣\\\", \\\"abc\\\": \\\"🔤\\\", \\\"a\\\": \\\"🅰️\\\", \\\"ab\\\": \\\"🆎\\\", \\\"b\\\": \\\"🅱️\\\", \\\"cl\\\": \\\"🆑\\\", \\\"cool\\\": \\\"🆒\\\", \\\"free\\\": \\\"🆓\\\", \\\"information_source\\\": \\\"ℹ️\\\", \\\"id\\\": \\\"🆔\\\", \\\"m\\\": \\\"Ⓜ️\\\", \\\"new\\\": \\\"🆕\\\", \\\"ng\\\": \\\"🆖\\\", \\\"o2\\\": \\\"🅾️\\\", \\\"ok\\\": \\\"🆗\\\", \\\"parking\\\": \\\"🅿️\\\", \\\"sos\\\": \\\"🆘\\\", \\\"up\\\": \\\"🆙\\\", \\\"vs\\\": \\\"🆚\\\", \\\"koko\\\": \\\"🈁\\\", \\\"sa\\\": \\\"🈂️\\\", \\\"ideograph_advantage\\\": \\\"🉐\\\", \\\"accept\\\": \\\"🉑\\\", \\\"congratulations\\\": \\\"㊗️\\\", \\\"secret\\\": \\\"㊙️\\\", \\\"u6e80\\\": \\\"🈵\\\", \\\"red_circle\\\": \\\"🔴\\\", \\\"orange_circle\\\": \\\"🟠\\\", \\\"yellow_circle\\\": \\\"🟡\\\", \\\"green_circle\\\": \\\"🟢\\\", \\\"large_blue_circle\\\": \\\"🔵\\\", \\\"purple_circle\\\": \\\"🟣\\\", \\\"brown_circle\\\": \\\"🟤\\\", \\\"black_circle\\\": \\\"⚫\\\", \\\"white_circle\\\": \\\"⚪\\\", \\\"red_square\\\": \\\"🟥\\\", \\\"orange_square\\\": \\\"🟧\\\", \\\"yellow_square\\\": \\\"🟨\\\", \\\"green_square\\\": \\\"🟩\\\", \\\"blue_square\\\": \\\"🟦\\\", \\\"purple_square\\\": \\\"🟪\\\", \\\"brown_square\\\": \\\"🟫\\\", \\\"black_large_square\\\": \\\"⬛\\\", \\\"white_large_square\\\": \\\"⬜\\\", \\\"black_medium_square\\\": \\\"◼️\\\", \\\"white_medium_square\\\": \\\"◻️\\\", \\\"black_medium_small_square\\\": \\\"◾\\\", \\\"white_medium_small_square\\\": \\\"◽\\\", \\\"black_small_square\\\": \\\"▪️\\\", \\\"white_small_square\\\": \\\"▫️\\\", \\\"large_orange_diamond\\\": \\\"🔶\\\", \\\"large_blue_diamond\\\": \\\"🔷\\\", \\\"small_orange_diamond\\\": \\\"🔸\\\", \\\"small_blue_diamond\\\": \\\"🔹\\\", \\\"small_red_triangle\\\": \\\"🔺\\\", \\\"small_red_triangle_down\\\": \\\"🔻\\\", \\\"diamond_shape_with_a_dot_inside\\\": \\\"💠\\\", \\\"radio_button\\\": \\\"🔘\\\", \\\"white_square_button\\\": \\\"🔳\\\", \\\"black_square_button\\\": \\\"🔲\\\", \\\"checkered_flag\\\": \\\"🏁\\\", \\\"triangular_flag_on_post\\\": \\\"🚩\\\", \\\"crossed_flags\\\": \\\"🎌\\\", \\\"black_flag\\\": \\\"🏴\\\", \\\"white_flag\\\": \\\"🏳️\\\", \\\"rainbow_flag\\\": \\\"🏳️‍🌈\\\", \\\"transgender_flag\\\": \\\"🏳️‍⚧️\\\", \\\"pirate_flag\\\": \\\"🏴‍☠️\\\", \\\"ascension_island\\\": \\\"🇦🇨\\\", \\\"andorra\\\": \\\"🇦🇩\\\", \\\"united_arab_emirates\\\": \\\"🇦🇪\\\", \\\"afghanistan\\\": \\\"🇦🇫\\\", \\\"antigua_barbuda\\\": \\\"🇦🇬\\\", \\\"anguilla\\\": \\\"🇦🇮\\\", \\\"albania\\\": \\\"🇦🇱\\\", \\\"armenia\\\": \\\"🇦🇲\\\", \\\"angola\\\": \\\"🇦🇴\\\", \\\"antarctica\\\": \\\"🇦🇶\\\", \\\"argentina\\\": \\\"🇦🇷\\\", \\\"american_samoa\\\": \\\"🇦🇸\\\", \\\"austria\\\": \\\"🇦🇹\\\", \\\"australia\\\": \\\"🇦🇺\\\", \\\"aruba\\\": \\\"🇦🇼\\\", \\\"aland_islands\\\": \\\"🇦🇽\\\", \\\"azerbaijan\\\": \\\"🇦🇿\\\", \\\"bosnia_herzegovina\\\": \\\"🇧🇦\\\", \\\"barbados\\\": \\\"🇧🇧\\\", \\\"bangladesh\\\": \\\"🇧🇩\\\", \\\"belgium\\\": \\\"🇧🇪\\\", \\\"burkina_faso\\\": \\\"🇧🇫\\\", \\\"bulgaria\\\": \\\"🇧🇬\\\", \\\"bahrain\\\": \\\"🇧🇭\\\", \\\"burundi\\\": \\\"🇧🇮\\\", \\\"benin\\\": \\\"🇧🇯\\\", \\\"st_barthelemy\\\": \\\"🇧🇱\\\", \\\"bermuda\\\": \\\"🇧🇲\\\", \\\"brunei\\\": \\\"🇧🇳\\\", \\\"bolivia\\\": \\\"🇧🇴\\\", \\\"caribbean_netherlands\\\": \\\"🇧🇶\\\", \\\"brazil\\\": \\\"🇧🇷\\\", \\\"bahamas\\\": \\\"🇧🇸\\\", \\\"bhutan\\\": \\\"🇧🇹\\\", \\\"bouvet_island\\\": \\\"🇧🇻\\\", \\\"botswana\\\": \\\"🇧🇼\\\", \\\"belarus\\\": \\\"🇧🇾\\\", \\\"belize\\\": \\\"🇧🇿\\\", \\\"canada\\\": \\\"🇨🇦\\\", \\\"cocos_islands\\\": \\\"🇨🇨\\\", \\\"congo_kinshasa\\\": \\\"🇨🇩\\\", \\\"central_african_republic\\\": \\\"🇨🇫\\\", \\\"congo_brazzaville\\\": \\\"🇨🇬\\\", \\\"switzerland\\\": \\\"🇨🇭\\\", \\\"cote_divoire\\\": \\\"🇨🇮\\\", \\\"cook_islands\\\": \\\"🇨🇰\\\", \\\"chile\\\": \\\"🇨🇱\\\", \\\"cameroon\\\": \\\"🇨🇲\\\", \\\"cn\\\": \\\"🇨🇳\\\", \\\"colombia\\\": \\\"🇨🇴\\\", \\\"clipperton_island\\\": \\\"🇨🇵\\\", \\\"costa_rica\\\": \\\"🇨🇷\\\", \\\"cuba\\\": \\\"🇨🇺\\\", \\\"cape_verde\\\": \\\"🇨🇻\\\", \\\"curacao\\\": \\\"🇨🇼\\\", \\\"christmas_island\\\": \\\"🇨🇽\\\", \\\"cyprus\\\": \\\"🇨🇾\\\", \\\"czech_republic\\\": \\\"🇨🇿\\\", \\\"de\\\": \\\"🇩🇪\\\", \\\"diego_garcia\\\": \\\"🇩🇬\\\", \\\"djibouti\\\": \\\"🇩🇯\\\", \\\"denmark\\\": \\\"🇩🇰\\\", \\\"dominica\\\": \\\"🇩🇲\\\", \\\"dominican_republic\\\": \\\"🇩🇴\\\", \\\"algeria\\\": \\\"🇩🇿\\\", \\\"ceuta_melilla\\\": \\\"🇪🇦\\\", \\\"ecuador\\\": \\\"🇪🇨\\\", \\\"estonia\\\": \\\"🇪🇪\\\", \\\"egypt\\\": \\\"🇪🇬\\\", \\\"western_sahara\\\": \\\"🇪🇭\\\", \\\"eritrea\\\": \\\"🇪🇷\\\", \\\"es\\\": \\\"🇪🇸\\\", \\\"ethiopia\\\": \\\"🇪🇹\\\", \\\"eu\\\": \\\"🇪🇺\\\", \\\"european_union\\\": \\\"🇪🇺\\\", \\\"finland\\\": \\\"🇫🇮\\\", \\\"fiji\\\": \\\"🇫🇯\\\", \\\"falkland_islands\\\": \\\"🇫🇰\\\", \\\"micronesia\\\": \\\"🇫🇲\\\", \\\"faroe_islands\\\": \\\"🇫🇴\\\", \\\"fr\\\": \\\"🇫🇷\\\", \\\"gabon\\\": \\\"🇬🇦\\\", \\\"gb\\\": \\\"🇬🇧\\\", \\\"uk\\\": \\\"🇬🇧\\\", \\\"grenada\\\": \\\"🇬🇩\\\", \\\"georgia\\\": \\\"🇬🇪\\\", \\\"french_guiana\\\": \\\"🇬🇫\\\", \\\"guernsey\\\": \\\"🇬🇬\\\", \\\"ghana\\\": \\\"🇬🇭\\\", \\\"gibraltar\\\": \\\"🇬🇮\\\", \\\"greenland\\\": \\\"🇬🇱\\\", \\\"gambia\\\": \\\"🇬🇲\\\", \\\"guinea\\\": \\\"🇬🇳\\\", \\\"guadeloupe\\\": \\\"🇬🇵\\\", \\\"equatorial_guinea\\\": \\\"🇬🇶\\\", \\\"greece\\\": \\\"🇬🇷\\\", \\\"south_georgia_south_sandwich_islands\\\": \\\"🇬🇸\\\", \\\"guatemala\\\": \\\"🇬🇹\\\", \\\"guam\\\": \\\"🇬🇺\\\", \\\"guinea_bissau\\\": \\\"🇬🇼\\\", \\\"guyana\\\": \\\"🇬🇾\\\", \\\"hong_kong\\\": \\\"🇭🇰\\\", \\\"heard_mcdonald_islands\\\": \\\"🇭🇲\\\", \\\"honduras\\\": \\\"🇭🇳\\\", \\\"croatia\\\": \\\"🇭🇷\\\", \\\"haiti\\\": \\\"🇭🇹\\\", \\\"hungary\\\": \\\"🇭🇺\\\", \\\"canary_islands\\\": \\\"🇮🇨\\\", \\\"indonesia\\\": \\\"🇮🇩\\\", \\\"ireland\\\": \\\"🇮🇪\\\", \\\"israel\\\": \\\"🇮🇱\\\", \\\"isle_of_man\\\": \\\"🇮🇲\\\", \\\"india\\\": \\\"🇮🇳\\\", \\\"british_indian_ocean_territory\\\": \\\"🇮🇴\\\", \\\"iraq\\\": \\\"🇮🇶\\\", \\\"iran\\\": \\\"🇮🇷\\\", \\\"iceland\\\": \\\"🇮🇸\\\", \\\"it\\\": \\\"🇮🇹\\\", \\\"jersey\\\": \\\"🇯🇪\\\", \\\"jamaica\\\": \\\"🇯🇲\\\", \\\"jordan\\\": \\\"🇯🇴\\\", \\\"jp\\\": \\\"🇯🇵\\\", \\\"kenya\\\": \\\"🇰🇪\\\", \\\"kyrgyzstan\\\": \\\"🇰🇬\\\", \\\"cambodia\\\": \\\"🇰🇭\\\", \\\"kiribati\\\": \\\"🇰🇮\\\", \\\"comoros\\\": \\\"🇰🇲\\\", \\\"st_kitts_nevis\\\": \\\"🇰🇳\\\", \\\"north_korea\\\": \\\"🇰🇵\\\", \\\"kr\\\": \\\"🇰🇷\\\", \\\"kuwait\\\": \\\"🇰🇼\\\", \\\"cayman_islands\\\": \\\"🇰🇾\\\", \\\"kazakhstan\\\": \\\"🇰🇿\\\", \\\"laos\\\": \\\"🇱🇦\\\", \\\"lebanon\\\": \\\"🇱🇧\\\", \\\"st_lucia\\\": \\\"🇱🇨\\\", \\\"liechtenstein\\\": \\\"🇱🇮\\\", \\\"sri_lanka\\\": \\\"🇱🇰\\\", \\\"liberia\\\": \\\"🇱🇷\\\", \\\"lesotho\\\": \\\"🇱🇸\\\", \\\"lithuania\\\": \\\"🇱🇹\\\", \\\"luxembourg\\\": \\\"🇱🇺\\\", \\\"latvia\\\": \\\"🇱🇻\\\", \\\"libya\\\": \\\"🇱🇾\\\", \\\"morocco\\\": \\\"🇲🇦\\\", \\\"monaco\\\": \\\"🇲🇨\\\", \\\"moldova\\\": \\\"🇲🇩\\\", \\\"montenegro\\\": \\\"🇲🇪\\\", \\\"st_martin\\\": \\\"🇲🇫\\\", \\\"madagascar\\\": \\\"🇲🇬\\\", \\\"marshall_islands\\\": \\\"🇲🇭\\\", \\\"macedonia\\\": \\\"🇲🇰\\\", \\\"mali\\\": \\\"🇲🇱\\\", \\\"myanmar\\\": \\\"🇲🇲\\\", \\\"mongolia\\\": \\\"🇲🇳\\\", \\\"macau\\\": \\\"🇲🇴\\\", \\\"northern_mariana_islands\\\": \\\"🇲🇵\\\", \\\"martinique\\\": \\\"🇲🇶\\\", \\\"mauritania\\\": \\\"🇲🇷\\\", \\\"montserrat\\\": \\\"🇲🇸\\\", \\\"malta\\\": \\\"🇲🇹\\\", \\\"mauritius\\\": \\\"🇲🇺\\\", \\\"maldives\\\": \\\"🇲🇻\\\", \\\"malawi\\\": \\\"🇲🇼\\\", \\\"mexico\\\": \\\"🇲🇽\\\", \\\"malaysia\\\": \\\"🇲🇾\\\", \\\"mozambique\\\": \\\"🇲🇿\\\", \\\"namibia\\\": \\\"🇳🇦\\\", \\\"new_caledonia\\\": \\\"🇳🇨\\\", \\\"niger\\\": \\\"🇳🇪\\\", \\\"norfolk_island\\\": \\\"🇳🇫\\\", \\\"nigeria\\\": \\\"🇳🇬\\\", \\\"nicaragua\\\": \\\"🇳🇮\\\", \\\"netherlands\\\": \\\"🇳🇱\\\", \\\"norway\\\": \\\"🇳🇴\\\", \\\"nepal\\\": \\\"🇳🇵\\\", \\\"nauru\\\": \\\"🇳🇷\\\", \\\"niue\\\": \\\"🇳🇺\\\", \\\"new_zealand\\\": \\\"🇳🇿\\\", \\\"oman\\\": \\\"🇴🇲\\\", \\\"panama\\\": \\\"🇵🇦\\\", \\\"peru\\\": \\\"🇵🇪\\\", \\\"french_polynesia\\\": \\\"🇵🇫\\\", \\\"papua_new_guinea\\\": \\\"🇵🇬\\\", \\\"philippines\\\": \\\"🇵🇭\\\", \\\"pakistan\\\": \\\"🇵🇰\\\", \\\"poland\\\": \\\"🇵🇱\\\", \\\"st_pierre_miquelon\\\": \\\"🇵🇲\\\", \\\"pitcairn_islands\\\": \\\"🇵🇳\\\", \\\"puerto_rico\\\": \\\"🇵🇷\\\", \\\"palestinian_territories\\\": \\\"🇵🇸\\\", \\\"portugal\\\": \\\"🇵🇹\\\", \\\"palau\\\": \\\"🇵🇼\\\", \\\"paraguay\\\": \\\"🇵🇾\\\", \\\"qatar\\\": \\\"🇶🇦\\\", \\\"reunion\\\": \\\"🇷🇪\\\", \\\"romania\\\": \\\"🇷🇴\\\", \\\"serbia\\\": \\\"🇷🇸\\\", \\\"ru\\\": \\\"🇷🇺\\\", \\\"rwanda\\\": \\\"🇷🇼\\\", \\\"saudi_arabia\\\": \\\"🇸🇦\\\", \\\"solomon_islands\\\": \\\"🇸🇧\\\", \\\"seychelles\\\": \\\"🇸🇨\\\", \\\"sudan\\\": \\\"🇸🇩\\\", \\\"sweden\\\": \\\"🇸🇪\\\", \\\"singapore\\\": \\\"🇸🇬\\\", \\\"st_helena\\\": \\\"🇸🇭\\\", \\\"slovenia\\\": \\\"🇸🇮\\\", \\\"svalbard_jan_mayen\\\": \\\"🇸🇯\\\", \\\"slovakia\\\": \\\"🇸🇰\\\", \\\"sierra_leone\\\": \\\"🇸🇱\\\", \\\"san_marino\\\": \\\"🇸🇲\\\", \\\"senegal\\\": \\\"🇸🇳\\\", \\\"somalia\\\": \\\"🇸🇴\\\", \\\"suriname\\\": \\\"🇸🇷\\\", \\\"south_sudan\\\": \\\"🇸🇸\\\", \\\"sao_tome_principe\\\": \\\"🇸🇹\\\", \\\"el_salvador\\\": \\\"🇸🇻\\\", \\\"sint_maarten\\\": \\\"🇸🇽\\\", \\\"syria\\\": \\\"🇸🇾\\\", \\\"swaziland\\\": \\\"🇸🇿\\\", \\\"tristan_da_cunha\\\": \\\"🇹🇦\\\", \\\"turks_caicos_islands\\\": \\\"🇹🇨\\\", \\\"chad\\\": \\\"🇹🇩\\\", \\\"french_southern_territories\\\": \\\"🇹🇫\\\", \\\"togo\\\": \\\"🇹🇬\\\", \\\"thailand\\\": \\\"🇹🇭\\\", \\\"tajikistan\\\": \\\"🇹🇯\\\", \\\"tokelau\\\": \\\"🇹🇰\\\", \\\"timor_leste\\\": \\\"🇹🇱\\\", \\\"turkmenistan\\\": \\\"🇹🇲\\\", \\\"tunisia\\\": \\\"🇹🇳\\\", \\\"tonga\\\": \\\"🇹🇴\\\", \\\"tr\\\": \\\"🇹🇷\\\", \\\"trinidad_tobago\\\": \\\"🇹🇹\\\", \\\"tuvalu\\\": \\\"🇹🇻\\\", \\\"taiwan\\\": \\\"🇹🇼\\\", \\\"tanzania\\\": \\\"🇹🇿\\\", \\\"ukraine\\\": \\\"🇺🇦\\\", \\\"uganda\\\": \\\"🇺🇬\\\", \\\"us_outlying_islands\\\": \\\"🇺🇲\\\", \\\"united_nations\\\": \\\"🇺🇳\\\", \\\"us\\\": \\\"🇺🇸\\\", \\\"uruguay\\\": \\\"🇺🇾\\\", \\\"uzbekistan\\\": \\\"🇺🇿\\\", \\\"vatican_city\\\": \\\"🇻🇦\\\", \\\"st_vincent_grenadines\\\": \\\"🇻🇨\\\", \\\"venezuela\\\": \\\"🇻🇪\\\", \\\"british_virgin_islands\\\": \\\"🇻🇬\\\", \\\"us_virgin_islands\\\": \\\"🇻🇮\\\", \\\"vietnam\\\": \\\"🇻🇳\\\", \\\"vanuatu\\\": \\\"🇻🇺\\\", \\\"wallis_futuna\\\": \\\"🇼🇫\\\", \\\"samoa\\\": \\\"🇼🇸\\\", \\\"kosovo\\\": \\\"🇽🇰\\\", \\\"yemen\\\": \\\"🇾🇪\\\", \\\"mayotte\\\": \\\"🇾🇹\\\", \\\"south_africa\\\": \\\"🇿🇦\\\", \\\"zambia\\\": \\\"🇿🇲\\\", \\\"zimbabwe\\\": \\\"🇿🇼\\\", \\\"england\\\": \\\"🏴󠁧󠁢󠁥󠁮󠁧󠁿\\\", \\\"scotland\\\": \\\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\\\", \\\"wales\\\": \\\"🏴󠁧󠁢󠁷󠁬󠁳󠁿\\\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/other/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"其他\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"其他😭💯 // Generated, don't edit \\\"100\\\": \\\"💯\\\", \\\"1234\\\": \\\"🔢\\\", \\\"grinning\\\": \\\"😀\\\", \\\"smiley\\\": \\\"😃\\\", \\\"smile\\\": \\\"😄\\\", \\\"grin\\\": \\\"😁\\\", \\\"laughing\\\": \\\"😆\\\", \\\"satisfied\\\": \\\"😆\\\", \\\"sweat_smile\\\": \\\"😅\\\", \\\"rofl\\\": \\\"🤣\\\", \\\"joy\\\": \\\"😂\\\", \\\"slightly_smiling_face\\\": \\\"🙂\\\", \\\"upside_down_face\\\": \\\"🙃\\\", \\\"melting_face\\\": \\\"🫠\\\", \\\"wink\\\": \\\"😉\\\", \\\"blush\\\": \\\"😊\\\", \\\"innocent\\\": \\\"😇\\\", \\\"smiling_face_with_three_hearts\\\": \\\"🥰\\\", \\\"heart_eyes\\\": \\\"😍\\\", \\\"star_struck\\\": \\\"🤩\\\", \\\"kissing_heart\\\": \\\"😘\\\", \\\"kissing\\\": \\\"😗\\\", \\\"relaxed\\\": \\\"☺️\\\", \\\"kissing_closed_eyes\\\": \\\"😚\\\", \\\"kissing_smiling_eyes\\\": \\\"😙\\\", \\\"smiling_face_with_tear\\\": \\\"🥲\\\", \\\"yum\\\": \\\"😋\\\", \\\"stuck_out_tongue\\\": \\\"😛\\\", \\\"stuck_out_tongue_winking_eye\\\": \\\"😜\\\", \\\"zany_face\\\": \\\"🤪\\\", \\\"stuck_out_tongue_closed_eyes\\\": \\\"😝\\\", \\\"money_mouth_face\\\": \\\"🤑\\\", \\\"hugs\\\": \\\"🤗\\\", \\\"hand_over_mouth\\\": \\\"🤭\\\", \\\"face_with_open_eyes_and_hand_over_mouth\\\": \\\"🫢\\\", \\\"face_with_peeking_eye\\\": \\\"🫣\\\", \\\"shushing_face\\\": \\\"🤫\\\", \\\"thinking\\\": \\\"🤔\\\", \\\"saluting_face\\\": \\\"🫡\\\", \\\"zipper_mouth_face\\\": \\\"🤐\\\", \\\"raised_eyebrow\\\": \\\"🤨\\\", \\\"neutral_face\\\": \\\"😐\\\", \\\"expressionless\\\": \\\"😑\\\", \\\"no_mouth\\\": \\\"😶\\\", \\\"dotted_line_face\\\": \\\"🫥\\\", \\\"face_in_clouds\\\": \\\"😶‍🌫️\\\", \\\"smirk\\\": \\\"😏\\\", \\\"unamused\\\": \\\"😒\\\", \\\"roll_eyes\\\": \\\"🙄\\\", \\\"grimacing\\\": \\\"😬\\\", \\\"face_exhaling\\\": \\\"😮‍💨\\\", \\\"lying_face\\\": \\\"🤥\\\", \\\"shaking_face\\\": \\\"🫨\\\", \\\"relieved\\\": \\\"😌\\\", \\\"pensive\\\": \\\"😔\\\", \\\"sleepy\\\": \\\"😪\\\", \\\"drooling_face\\\": \\\"🤤\\\", \\\"sleeping\\\": \\\"😴\\\", \\\"mask\\\": \\\"😷\\\", \\\"face_with_thermometer\\\": \\\"🤒\\\", \\\"face_with_head_bandage\\\": \\\"🤕\\\", \\\"nauseated_face\\\": \\\"🤢\\\", \\\"vomiting_face\\\": \\\"🤮\\\", \\\"sneezing_face\\\": \\\"🤧\\\", \\\"hot_face\\\": \\\"🥵\\\", \\\"cold_face\\\": \\\"🥶\\\", \\\"woozy_face\\\": \\\"🥴\\\", \\\"dizzy_face\\\": \\\"😵\\\", \\\"face_with_spiral_eyes\\\": \\\"😵‍💫\\\", \\\"exploding_head\\\": \\\"🤯\\\", \\\"cowboy_hat_face\\\": \\\"🤠\\\", \\\"partying_face\\\": \\\"🥳\\\", \\\"disguised_face\\\": \\\"🥸\\\", \\\"sunglasses\\\": \\\"😎\\\", \\\"nerd_face\\\": \\\"🤓\\\", \\\"monocle_face\\\": \\\"🧐\\\", \\\"confused\\\": \\\"😕\\\", \\\"face_with_diagonal_mouth\\\": \\\"🫤\\\", \\\"worried\\\": \\\"😟\\\", \\\"slightly_frowning_face\\\": \\\"🙁\\\", \\\"frowning_face\\\": \\\"☹️\\\", \\\"open_mouth\\\": \\\"😮\\\", \\\"hushed\\\": \\\"😯\\\", \\\"astonished\\\": \\\"😲\\\", \\\"flushed\\\": \\\"😳\\\", \\\"pleading_face\\\": \\\"🥺\\\", \\\"face_holding_back_tears\\\": \\\"🥹\\\", \\\"frowning\\\": \\\"😦\\\", \\\"anguished\\\": \\\"😧\\\", \\\"fearful\\\": \\\"😨\\\", \\\"cold_sweat\\\": \\\"😰\\\", \\\"disappointed_relieved\\\": \\\"😥\\\", \\\"cry\\\": \\\"😢\\\", \\\"sob\\\": \\\"😭\\\", \\\"scream\\\": \\\"😱\\\", \\\"confounded\\\": \\\"😖\\\", \\\"persevere\\\": \\\"😣\\\", \\\"disappointed\\\": \\\"😞\\\", \\\"sweat\\\": \\\"😓\\\", \\\"weary\\\": \\\"😩\\\", \\\"tired_face\\\": \\\"😫\\\", \\\"yawning_face\\\": \\\"🥱\\\", \\\"triumph\\\": \\\"😤\\\", \\\"rage\\\": \\\"😡\\\", \\\"pout\\\": \\\"😡\\\", \\\"angry\\\": \\\"😠\\\", \\\"cursing_face\\\": \\\"🤬\\\", \\\"smiling_imp\\\": \\\"😈\\\", \\\"imp\\\": \\\"👿\\\", \\\"skull\\\": \\\"💀\\\", \\\"skull_and_crossbones\\\": \\\"☠️\\\", \\\"hankey\\\": \\\"💩\\\", \\\"poop\\\": \\\"💩\\\", \\\"shit\\\": \\\"💩\\\", \\\"clown_face\\\": \\\"🤡\\\", \\\"japanese_ogre\\\": \\\"👹\\\", \\\"japanese_goblin\\\": \\\"👺\\\", \\\"ghost\\\": \\\"👻\\\", \\\"alien\\\": \\\"👽\\\", \\\"space_invader\\\": \\\"👾\\\", \\\"robot\\\": \\\"🤖\\\", \\\"smiley_cat\\\": \\\"😺\\\", \\\"smile_cat\\\": \\\"😸\\\", \\\"joy_cat\\\": \\\"😹\\\", \\\"heart_eyes_cat\\\": \\\"😻\\\", \\\"smirk_cat\\\": \\\"😼\\\", \\\"kissing_cat\\\": \\\"😽\\\", \\\"scream_cat\\\": \\\"🙀\\\", \\\"crying_cat_face\\\": \\\"😿\\\", \\\"pouting_cat\\\": \\\"😾\\\", \\\"see_no_evil\\\": \\\"🙈\\\", \\\"hear_no_evil\\\": \\\"🙉\\\", \\\"speak_no_evil\\\": \\\"🙊\\\", \\\"love_letter\\\": \\\"💌\\\", \\\"cupid\\\": \\\"💘\\\", \\\"gift_heart\\\": \\\"💝\\\", \\\"sparkling_heart\\\": \\\"💖\\\", \\\"heartpulse\\\": \\\"💗\\\", \\\"heartbeat\\\": \\\"💓\\\", \\\"revolving_hearts\\\": \\\"💞\\\", \\\"two_hearts\\\": \\\"💕\\\", \\\"heart_decoration\\\": \\\"💟\\\", \\\"heavy_heart_exclamation\\\": \\\"❣️\\\", \\\"broken_heart\\\": \\\"💔\\\", \\\"heart_on_fire\\\": \\\"❤️‍🔥\\\", \\\"mending_heart\\\": \\\"❤️‍🩹\\\", \\\"heart\\\": \\\"❤️\\\", \\\"pink_heart\\\": \\\"🩷\\\", \\\"orange_heart\\\": \\\"🧡\\\", \\\"yellow_heart\\\": \\\"💛\\\", \\\"green_heart\\\": \\\"💚\\\", \\\"blue_heart\\\": \\\"💙\\\", \\\"light_blue_heart\\\": \\\"🩵\\\", \\\"purple_heart\\\": \\\"💜\\\", \\\"brown_heart\\\": \\\"🤎\\\", \\\"black_heart\\\": \\\"🖤\\\", \\\"grey_heart\\\": \\\"🩶\\\", \\\"white_heart\\\": \\\"🤍\\\", \\\"kiss\\\": \\\"💋\\\", \\\"anger\\\": \\\"💢\\\", \\\"boom\\\": \\\"💥\\\", \\\"collision\\\": \\\"💥\\\", \\\"dizzy\\\": \\\"💫\\\", \\\"sweat_drops\\\": \\\"💦\\\", \\\"dash\\\": \\\"💨\\\", \\\"hole\\\": \\\"🕳️\\\", \\\"speech_balloon\\\": \\\"💬\\\", \\\"eye_speech_bubble\\\": \\\"👁️‍🗨️\\\", \\\"left_speech_bubble\\\": \\\"🗨️\\\", \\\"right_anger_bubble\\\": \\\"🗯️\\\", \\\"thought_balloon\\\": \\\"💭\\\", \\\"zzz\\\": \\\"💤\\\", \\\"wave\\\": \\\"👋\\\", \\\"raised_back_of_hand\\\": \\\"🤚\\\", \\\"raised_hand_with_fingers_splayed\\\": \\\"🖐️\\\", \\\"hand\\\": \\\"✋\\\", \\\"raised_hand\\\": \\\"✋\\\", \\\"vulcan_salute\\\": \\\"🖖\\\", \\\"rightwards_hand\\\": \\\"🫱\\\", \\\"leftwards_hand\\\": \\\"🫲\\\", \\\"palm_down_hand\\\": \\\"🫳\\\", \\\"palm_up_hand\\\": \\\"🫴\\\", \\\"leftwards_pushing_hand\\\": \\\"🫷\\\", \\\"rightwards_pushing_hand\\\": \\\"🫸\\\", \\\"ok_hand\\\": \\\"👌\\\", \\\"pinched_fingers\\\": \\\"🤌\\\", \\\"pinching_hand\\\": \\\"🤏\\\", \\\"v\\\": \\\"✌️\\\", \\\"crossed_fingers\\\": \\\"🤞\\\", \\\"hand_with_index_finger_and_thumb_crossed\\\": \\\"🫰\\\", \\\"love_you_gesture\\\": \\\"🤟\\\", \\\"metal\\\": \\\"🤘\\\", \\\"call_me_hand\\\": \\\"🤙\\\", \\\"point_left\\\": \\\"👈\\\", \\\"point_right\\\": \\\"👉\\\", \\\"point_up_2\\\": \\\"👆\\\", \\\"middle_finger\\\": \\\"🖕\\\", \\\"fu\\\": \\\"🖕\\\", \\\"point_down\\\": \\\"👇\\\", \\\"point_up\\\": \\\"☝️\\\", \\\"index_pointing_at_the_viewer\\\": \\\"🫵\\\", \\\"+1\\\": \\\"👍\\\", \\\"thumbsup\\\": \\\"👍\\\", \\\"-1\\\": \\\"👎\\\", \\\"thumbsdown\\\": \\\"👎\\\", \\\"fist_raised\\\": \\\"✊\\\", \\\"fist\\\": \\\"✊\\\", \\\"fist_oncoming\\\": \\\"👊\\\", \\\"facepunch\\\": \\\"👊\\\", \\\"punch\\\": \\\"👊\\\", \\\"fist_left\\\": \\\"🤛\\\", \\\"fist_right\\\": \\\"🤜\\\", \\\"clap\\\": \\\"👏\\\", \\\"raised_hands\\\": \\\"🙌\\\", \\\"heart_hands\\\": \\\"🫶\\\", \\\"open_hands\\\": \\\"👐\\\", \\\"palms_up_together\\\": \\\"🤲\\\", \\\"handshake\\\": \\\"🤝\\\", \\\"pray\\\": \\\"🙏\\\", \\\"writing_hand\\\": \\\"✍️\\\", \\\"nail_care\\\": \\\"💅\\\", \\\"selfie\\\": \\\"🤳\\\", \\\"muscle\\\": \\\"💪\\\", \\\"mechanical_arm\\\": \\\"🦾\\\", \\\"mechanical_leg\\\": \\\"🦿\\\", \\\"leg\\\": \\\"🦵\\\", \\\"foot\\\": \\\"🦶\\\", \\\"ear\\\": \\\"👂\\\", \\\"ear_with_hearing_aid\\\": \\\"🦻\\\", \\\"nose\\\": \\\"👃\\\", \\\"brain\\\": \\\"🧠\\\", \\\"anatomical_heart\\\": \\\"🫀\\\", \\\"lungs\\\": \\\"🫁\\\", \\\"tooth\\\": \\\"🦷\\\", \\\"bone\\\": \\\"🦴\\\", \\\"eyes\\\": \\\"👀\\\", \\\"eye\\\": \\\"👁️\\\", \\\"tongue\\\": \\\"👅\\\", \\\"lips\\\": \\\"👄\\\", \\\"biting_lip\\\": \\\"🫦\\\", \\\"baby\\\": \\\"👶\\\", \\\"child\\\": \\\"🧒\\\", \\\"boy\\\": \\\"👦\\\", \\\"girl\\\": \\\"👧\\\", \\\"adult\\\": \\\"🧑\\\", \\\"blond_haired_person\\\": \\\"👱\\\", \\\"man\\\": \\\"👨\\\", \\\"bearded_person\\\": \\\"🧔\\\", \\\"man_beard\\\": \\\"🧔‍♂️\\\", \\\"woman_beard\\\": \\\"🧔‍♀️\\\", \\\"red_haired_man\\\": \\\"👨‍🦰\\\", \\\"curly_haired_man\\\": \\\"👨‍🦱\\\", \\\"white_haired_man\\\": \\\"👨‍🦳\\\", \\\"bald_man\\\": \\\"👨‍🦲\\\", \\\"woman\\\": \\\"👩\\\", \\\"red_haired_woman\\\": \\\"👩‍🦰\\\", \\\"person_red_hair\\\": \\\"🧑‍🦰\\\", \\\"curly_haired_woman\\\": \\\"👩‍🦱\\\", \\\"person_curly_hair\\\": \\\"🧑‍🦱\\\", \\\"white_haired_woman\\\": \\\"👩‍🦳\\\", \\\"person_white_hair\\\": \\\"🧑‍🦳\\\", \\\"bald_woman\\\": \\\"👩‍🦲\\\", \\\"person_bald\\\": \\\"🧑‍🦲\\\", \\\"blond_haired_woman\\\": \\\"👱‍♀️\\\", \\\"blonde_woman\\\": \\\"👱‍♀️\\\", \\\"blond_haired_man\\\": \\\"👱‍♂️\\\", \\\"older_adult\\\": \\\"🧓\\\", \\\"older_man\\\": \\\"👴\\\", \\\"older_woman\\\": \\\"👵\\\", \\\"frowning_person\\\": \\\"🙍\\\", \\\"frowning_man\\\": \\\"🙍‍♂️\\\", \\\"frowning_woman\\\": \\\"🙍‍♀️\\\", \\\"pouting_face\\\": \\\"🙎\\\", \\\"pouting_man\\\": \\\"🙎‍♂️\\\", \\\"pouting_woman\\\": \\\"🙎‍♀️\\\", \\\"no_good\\\": \\\"🙅\\\", \\\"no_good_man\\\": \\\"🙅‍♂️\\\", \\\"ng_man\\\": \\\"🙅‍♂️\\\", \\\"no_good_woman\\\": \\\"🙅‍♀️\\\", \\\"ng_woman\\\": \\\"🙅‍♀️\\\", \\\"ok_person\\\": \\\"🙆\\\", \\\"ok_man\\\": \\\"🙆‍♂️\\\", \\\"ok_woman\\\": \\\"🙆‍♀️\\\", \\\"tipping_hand_person\\\": \\\"💁\\\", \\\"information_desk_person\\\": \\\"💁\\\", \\\"tipping_hand_man\\\": \\\"💁‍♂️\\\", \\\"sassy_man\\\": \\\"💁‍♂️\\\", \\\"tipping_hand_woman\\\": \\\"💁‍♀️\\\", \\\"sassy_woman\\\": \\\"💁‍♀️\\\", \\\"raising_hand\\\": \\\"🙋\\\", \\\"raising_hand_man\\\": \\\"🙋‍♂️\\\", \\\"raising_hand_woman\\\": \\\"🙋‍♀️\\\", \\\"deaf_person\\\": \\\"🧏\\\", \\\"deaf_man\\\": \\\"🧏‍♂️\\\", \\\"deaf_woman\\\": \\\"🧏‍♀️\\\", \\\"bow\\\": \\\"🙇\\\", \\\"bowing_man\\\": \\\"🙇‍♂️\\\", \\\"bowing_woman\\\": \\\"🙇‍♀️\\\", \\\"facepalm\\\": \\\"🤦\\\", \\\"man_facepalming\\\": \\\"🤦‍♂️\\\", \\\"woman_facepalming\\\": \\\"🤦‍♀️\\\", \\\"shrug\\\": \\\"🤷\\\", \\\"man_shrugging\\\": \\\"🤷‍♂️\\\", \\\"woman_shrugging\\\": \\\"🤷‍♀️\\\", \\\"health_worker\\\": \\\"🧑‍⚕️\\\", \\\"man_health_worker\\\": \\\"👨‍⚕️\\\", \\\"woman_health_worker\\\": \\\"👩‍⚕️\\\", \\\"student\\\": \\\"🧑‍🎓\\\", \\\"man_student\\\": \\\"👨‍🎓\\\", \\\"woman_student\\\": \\\"👩‍🎓\\\", \\\"teacher\\\": \\\"🧑‍🏫\\\", \\\"man_teacher\\\": \\\"👨‍🏫\\\", \\\"woman_teacher\\\": \\\"👩‍🏫\\\", \\\"judge\\\": \\\"🧑‍⚖️\\\", \\\"man_judge\\\": \\\"👨‍⚖️\\\", \\\"woman_judge\\\": \\\"👩‍⚖️\\\", \\\"farmer\\\": \\\"🧑‍🌾\\\", \\\"man_farmer\\\": \\\"👨‍🌾\\\", \\\"woman_farmer\\\": \\\"👩‍🌾\\\", \\\"cook\\\": \\\"🧑‍🍳\\\", \\\"man_cook\\\": \\\"👨‍🍳\\\", \\\"woman_cook\\\": \\\"👩‍🍳\\\", \\\"mechanic\\\": \\\"🧑‍🔧\\\", \\\"man_mechanic\\\": \\\"👨‍🔧\\\", \\\"woman_mechanic\\\": \\\"👩‍🔧\\\", \\\"factory_worker\\\": \\\"🧑‍🏭\\\", \\\"man_factory_worker\\\": \\\"👨‍🏭\\\", \\\"woman_factory_worker\\\": \\\"👩‍🏭\\\", \\\"office_worker\\\": \\\"🧑‍💼\\\", \\\"man_office_worker\\\": \\\"👨‍💼\\\", \\\"woman_office_worker\\\": \\\"👩‍💼\\\", \\\"scientist\\\": \\\"🧑‍🔬\\\", \\\"man_scientist\\\": \\\"👨‍🔬\\\", \\\"woman_scientist\\\": \\\"👩‍🔬\\\", \\\"technologist\\\": \\\"🧑‍💻\\\", \\\"man_technologist\\\": \\\"👨‍💻\\\", \\\"woman_technologist\\\": \\\"👩‍💻\\\", \\\"singer\\\": \\\"🧑‍🎤\\\", \\\"man_singer\\\": \\\"👨‍🎤\\\", \\\"woman_singer\\\": \\\"👩‍🎤\\\", \\\"artist\\\": \\\"🧑‍🎨\\\", \\\"man_artist\\\": \\\"👨‍🎨\\\", \\\"woman_artist\\\": \\\"👩‍🎨\\\", \\\"pilot\\\": \\\"🧑‍✈️\\\", \\\"man_pilot\\\": \\\"👨‍✈️\\\", \\\"woman_pilot\\\": \\\"👩‍✈️\\\", \\\"astronaut\\\": \\\"🧑‍🚀\\\", \\\"man_astronaut\\\": \\\"👨‍🚀\\\", \\\"woman_astronaut\\\": \\\"👩‍🚀\\\", \\\"firefighter\\\": \\\"🧑‍🚒\\\", \\\"man_firefighter\\\": \\\"👨‍🚒\\\", \\\"woman_firefighter\\\": \\\"👩‍🚒\\\", \\\"police_officer\\\": \\\"👮\\\", \\\"cop\\\": \\\"👮\\\", \\\"policeman\\\": \\\"👮‍♂️\\\", \\\"policewoman\\\": \\\"👮‍♀️\\\", \\\"detective\\\": \\\"🕵️\\\", \\\"male_detective\\\": \\\"🕵️‍♂️\\\", \\\"female_detective\\\": \\\"🕵️‍♀️\\\", \\\"guard\\\": \\\"💂\\\", \\\"guardsman\\\": \\\"💂‍♂️\\\", \\\"guardswoman\\\": \\\"💂‍♀️\\\", \\\"ninja\\\": \\\"🥷\\\", \\\"construction_worker\\\": \\\"👷\\\", \\\"construction_worker_man\\\": \\\"👷‍♂️\\\", \\\"construction_worker_woman\\\": \\\"👷‍♀️\\\", \\\"person_with_crown\\\": \\\"🫅\\\", \\\"prince\\\": \\\"🤴\\\", \\\"princess\\\": \\\"👸\\\", \\\"person_with_turban\\\": \\\"👳\\\", \\\"man_with_turban\\\": \\\"👳‍♂️\\\", \\\"woman_with_turban\\\": \\\"👳‍♀️\\\", \\\"man_with_gua_pi_mao\\\": \\\"👲\\\", \\\"woman_with_headscarf\\\": \\\"🧕\\\", \\\"person_in_tuxedo\\\": \\\"🤵\\\", \\\"man_in_tuxedo\\\": \\\"🤵‍♂️\\\", \\\"woman_in_tuxedo\\\": \\\"🤵‍♀️\\\", \\\"person_with_veil\\\": \\\"👰\\\", \\\"man_with_veil\\\": \\\"👰‍♂️\\\", \\\"woman_with_veil\\\": \\\"👰‍♀️\\\", \\\"bride_with_veil\\\": \\\"👰‍♀️\\\", \\\"pregnant_woman\\\": \\\"🤰\\\", \\\"pregnant_man\\\": \\\"🫃\\\", \\\"pregnant_person\\\": \\\"🫄\\\", \\\"breast_feeding\\\": \\\"🤱\\\", \\\"woman_feeding_baby\\\": \\\"👩‍🍼\\\", \\\"man_feeding_baby\\\": \\\"👨‍🍼\\\", \\\"person_feeding_baby\\\": \\\"🧑‍🍼\\\", \\\"angel\\\": \\\"👼\\\", \\\"santa\\\": \\\"🎅\\\", \\\"mrs_claus\\\": \\\"🤶\\\", \\\"mx_claus\\\": \\\"🧑‍🎄\\\", \\\"superhero\\\": \\\"🦸\\\", \\\"superhero_man\\\": \\\"🦸‍♂️\\\", \\\"superhero_woman\\\": \\\"🦸‍♀️\\\", \\\"supervillain\\\": \\\"🦹\\\", \\\"supervillain_man\\\": \\\"🦹‍♂️\\\", \\\"supervillain_woman\\\": \\\"🦹‍♀️\\\", \\\"mage\\\": \\\"🧙\\\", \\\"mage_man\\\": \\\"🧙‍♂️\\\", \\\"mage_woman\\\": \\\"🧙‍♀️\\\", \\\"fairy\\\": \\\"🧚\\\", \\\"fairy_man\\\": \\\"🧚‍♂️\\\", \\\"fairy_woman\\\": \\\"🧚‍♀️\\\", \\\"vampire\\\": \\\"🧛\\\", \\\"vampire_man\\\": \\\"🧛‍♂️\\\", \\\"vampire_woman\\\": \\\"🧛‍♀️\\\", \\\"merperson\\\": \\\"🧜\\\", \\\"merman\\\": \\\"🧜‍♂️\\\", \\\"mermaid\\\": \\\"🧜‍♀️\\\", \\\"elf\\\": \\\"🧝\\\", \\\"elf_man\\\": \\\"🧝‍♂️\\\", \\\"elf_woman\\\": \\\"🧝‍♀️\\\", \\\"genie\\\": \\\"🧞\\\", \\\"genie_man\\\": \\\"🧞‍♂️\\\", \\\"genie_woman\\\": \\\"🧞‍♀️\\\", \\\"zombie\\\": \\\"🧟\\\", \\\"zombie_man\\\": \\\"🧟‍♂️\\\", \\\"zombie_woman\\\": \\\"🧟‍♀️\\\", \\\"troll\\\": \\\"🧌\\\", \\\"massage\\\": \\\"💆\\\", \\\"massage_man\\\": \\\"💆‍♂️\\\", \\\"massage_woman\\\": \\\"💆‍♀️\\\", \\\"haircut\\\": \\\"💇\\\", \\\"haircut_man\\\": \\\"💇‍♂️\\\", \\\"haircut_woman\\\": \\\"💇‍♀️\\\", \\\"walking\\\": \\\"🚶\\\", \\\"walking_man\\\": \\\"🚶‍♂️\\\", \\\"walking_woman\\\": \\\"🚶‍♀️\\\", \\\"standing_person\\\": \\\"🧍\\\", \\\"standing_man\\\": \\\"🧍‍♂️\\\", \\\"standing_woman\\\": \\\"🧍‍♀️\\\", \\\"kneeling_person\\\": \\\"🧎\\\", \\\"kneeling_man\\\": \\\"🧎‍♂️\\\", \\\"kneeling_woman\\\": \\\"🧎‍♀️\\\", \\\"person_with_probing_cane\\\": \\\"🧑‍🦯\\\", \\\"man_with_probing_cane\\\": \\\"👨‍🦯\\\", \\\"woman_with_probing_cane\\\": \\\"👩‍🦯\\\", \\\"person_in_motorized_wheelchair\\\": \\\"🧑‍🦼\\\", \\\"man_in_motorized_wheelchair\\\": \\\"👨‍🦼\\\", \\\"woman_in_motorized_wheelchair\\\": \\\"👩‍🦼\\\", \\\"person_in_manual_wheelchair\\\": \\\"🧑‍🦽\\\", \\\"man_in_manual_wheelchair\\\": \\\"👨‍🦽\\\", \\\"woman_in_manual_wheelchair\\\": \\\"👩‍🦽\\\", \\\"runner\\\": \\\"🏃\\\", \\\"running\\\": \\\"🏃\\\", \\\"running_man\\\": \\\"🏃‍♂️\\\", \\\"running_woman\\\": \\\"🏃‍♀️\\\", \\\"woman_dancing\\\": \\\"💃\\\", \\\"dancer\\\": \\\"💃\\\", \\\"man_dancing\\\": \\\"🕺\\\", \\\"business_suit_levitating\\\": \\\"🕴️\\\", \\\"dancers\\\": \\\"👯\\\", \\\"dancing_men\\\": \\\"👯‍♂️\\\", \\\"dancing_women\\\": \\\"👯‍♀️\\\", \\\"sauna_person\\\": \\\"🧖\\\", \\\"sauna_man\\\": \\\"🧖‍♂️\\\", \\\"sauna_woman\\\": \\\"🧖‍♀️\\\", \\\"climbing\\\": \\\"🧗\\\", \\\"climbing_man\\\": \\\"🧗‍♂️\\\", \\\"climbing_woman\\\": \\\"🧗‍♀️\\\", \\\"person_fencing\\\": \\\"🤺\\\", \\\"horse_racing\\\": \\\"🏇\\\", \\\"skier\\\": \\\"⛷️\\\", \\\"snowboarder\\\": \\\"🏂\\\", \\\"golfing\\\": \\\"🏌️\\\", \\\"golfing_man\\\": \\\"🏌️‍♂️\\\", \\\"golfing_woman\\\": \\\"🏌️‍♀️\\\", \\\"surfer\\\": \\\"🏄\\\", \\\"surfing_man\\\": \\\"🏄‍♂️\\\", \\\"surfing_woman\\\": \\\"🏄‍♀️\\\", \\\"rowboat\\\": \\\"🚣\\\", \\\"rowing_man\\\": \\\"🚣‍♂️\\\", \\\"rowing_woman\\\": \\\"🚣‍♀️\\\", \\\"swimmer\\\": \\\"🏊\\\", \\\"swimming_man\\\": \\\"🏊‍♂️\\\", \\\"swimming_woman\\\": \\\"🏊‍♀️\\\", \\\"bouncing_ball_person\\\": \\\"⛹️\\\", \\\"bouncing_ball_man\\\": \\\"⛹️‍♂️\\\", \\\"basketball_man\\\": \\\"⛹️‍♂️\\\", \\\"bouncing_ball_woman\\\": \\\"⛹️‍♀️\\\", \\\"basketball_woman\\\": \\\"⛹️‍♀️\\\", \\\"weight_lifting\\\": \\\"🏋️\\\", \\\"weight_lifting_man\\\": \\\"🏋️‍♂️\\\", \\\"weight_lifting_woman\\\": \\\"🏋️‍♀️\\\", \\\"bicyclist\\\": \\\"🚴\\\", \\\"biking_man\\\": \\\"🚴‍♂️\\\", \\\"biking_woman\\\": \\\"🚴‍♀️\\\", \\\"mountain_bicyclist\\\": \\\"🚵\\\", \\\"mountain_biking_man\\\": \\\"🚵‍♂️\\\", \\\"mountain_biking_woman\\\": \\\"🚵‍♀️\\\", \\\"cartwheeling\\\": \\\"🤸\\\", \\\"man_cartwheeling\\\": \\\"🤸‍♂️\\\", \\\"woman_cartwheeling\\\": \\\"🤸‍♀️\\\", \\\"wrestling\\\": \\\"🤼\\\", \\\"men_wrestling\\\": \\\"🤼‍♂️\\\", \\\"women_wrestling\\\": \\\"🤼‍♀️\\\", \\\"water_polo\\\": \\\"🤽\\\", \\\"man_playing_water_polo\\\": \\\"🤽‍♂️\\\", \\\"woman_playing_water_polo\\\": \\\"🤽‍♀️\\\", \\\"handball_person\\\": \\\"🤾\\\", \\\"man_playing_handball\\\": \\\"🤾‍♂️\\\", \\\"woman_playing_handball\\\": \\\"🤾‍♀️\\\", \\\"juggling_person\\\": \\\"🤹\\\", \\\"man_juggling\\\": \\\"🤹‍♂️\\\", \\\"woman_juggling\\\": \\\"🤹‍♀️\\\", \\\"lotus_position\\\": \\\"🧘\\\", \\\"lotus_position_man\\\": \\\"🧘‍♂️\\\", \\\"lotus_position_woman\\\": \\\"🧘‍♀️\\\", \\\"bath\\\": \\\"🛀\\\", \\\"sleeping_bed\\\": \\\"🛌\\\", \\\"people_holding_hands\\\": \\\"🧑‍🤝‍🧑\\\", \\\"two_women_holding_hands\\\": \\\"👭\\\", \\\"couple\\\": \\\"👫\\\", \\\"two_men_holding_hands\\\": \\\"👬\\\", \\\"couplekiss\\\": \\\"💏\\\", \\\"couplekiss_man_woman\\\": \\\"👩‍❤️‍💋‍👨\\\", \\\"couplekiss_man_man\\\": \\\"👨‍❤️‍💋‍👨\\\", \\\"couplekiss_woman_woman\\\": \\\"👩‍❤️‍💋‍👩\\\", \\\"couple_with_heart\\\": \\\"💑\\\", \\\"couple_with_heart_woman_man\\\": \\\"👩‍❤️‍👨\\\", \\\"couple_with_heart_man_man\\\": \\\"👨‍❤️‍👨\\\", \\\"couple_with_heart_woman_woman\\\": \\\"👩‍❤️‍👩\\\", \\\"family\\\": \\\"👪\\\", \\\"family_man_woman_boy\\\": \\\"👨‍👩‍👦\\\", \\\"family_man_woman_girl\\\": \\\"👨‍👩‍👧\\\", \\\"family_man_woman_girl_boy\\\": \\\"👨‍👩‍👧‍👦\\\", \\\"family_man_woman_boy_boy\\\": \\\"👨‍👩‍👦‍👦\\\", \\\"family_man_woman_girl_girl\\\": \\\"👨‍👩‍👧‍👧\\\", \\\"family_man_man_boy\\\": \\\"👨‍👨‍👦\\\", \\\"family_man_man_girl\\\": \\\"👨‍👨‍👧\\\", \\\"family_man_man_girl_boy\\\": \\\"👨‍👨‍👧‍👦\\\", \\\"family_man_man_boy_boy\\\": \\\"👨‍👨‍👦‍👦\\\", \\\"family_man_man_girl_girl\\\": \\\"👨‍👨‍👧‍👧\\\", \\\"family_woman_woman_boy\\\": \\\"👩‍👩‍👦\\\", \\\"family_woman_woman_girl\\\": \\\"👩‍👩‍👧\\\", \\\"family_woman_woman_girl_boy\\\": \\\"👩‍👩‍👧‍👦\\\", \\\"family_woman_woman_boy_boy\\\": \\\"👩‍👩‍👦‍👦\\\", \\\"family_woman_woman_girl_girl\\\": \\\"👩‍👩‍👧‍👧\\\", \\\"family_man_boy\\\": \\\"👨‍👦\\\", \\\"family_man_boy_boy\\\": \\\"👨‍👦‍👦\\\", \\\"family_man_girl\\\": \\\"👨‍👧\\\", \\\"family_man_girl_boy\\\": \\\"👨‍👧‍👦\\\", \\\"family_man_girl_girl\\\": \\\"👨‍👧‍👧\\\", \\\"family_woman_boy\\\": \\\"👩‍👦\\\", \\\"family_woman_boy_boy\\\": \\\"👩‍👦‍👦\\\", \\\"family_woman_girl\\\": \\\"👩‍👧\\\", \\\"family_woman_girl_boy\\\": \\\"👩‍👧‍👦\\\", \\\"family_woman_girl_girl\\\": \\\"👩‍👧‍👧\\\", \\\"speaking_head\\\": \\\"🗣️\\\", \\\"bust_in_silhouette\\\": \\\"👤\\\", \\\"busts_in_silhouette\\\": \\\"👥\\\", \\\"people_hugging\\\": \\\"🫂\\\", \\\"footprints\\\": \\\"👣\\\", \\\"monkey_face\\\": \\\"🐵\\\", \\\"monkey\\\": \\\"🐒\\\", \\\"gorilla\\\": \\\"🦍\\\", \\\"orangutan\\\": \\\"🦧\\\", \\\"dog\\\": \\\"🐶\\\", \\\"dog2\\\": \\\"🐕\\\", \\\"guide_dog\\\": \\\"🦮\\\", \\\"service_dog\\\": \\\"🐕‍🦺\\\", \\\"poodle\\\": \\\"🐩\\\", \\\"wolf\\\": \\\"🐺\\\", \\\"fox_face\\\": \\\"🦊\\\", \\\"raccoon\\\": \\\"🦝\\\", \\\"cat\\\": \\\"🐱\\\", \\\"cat2\\\": \\\"🐈\\\", \\\"black_cat\\\": \\\"🐈‍⬛\\\", \\\"lion\\\": \\\"🦁\\\", \\\"tiger\\\": \\\"🐯\\\", \\\"tiger2\\\": \\\"🐅\\\", \\\"leopard\\\": \\\"🐆\\\", \\\"horse\\\": \\\"🐴\\\", \\\"moose\\\": \\\"🫎\\\", \\\"donkey\\\": \\\"🫏\\\", \\\"racehorse\\\": \\\"🐎\\\", \\\"unicorn\\\": \\\"🦄\\\", \\\"zebra\\\": \\\"🦓\\\", \\\"deer\\\": \\\"🦌\\\", \\\"bison\\\": \\\"🦬\\\", \\\"cow\\\": \\\"🐮\\\", \\\"ox\\\": \\\"🐂\\\", \\\"water_buffalo\\\": \\\"🐃\\\", \\\"cow2\\\": \\\"🐄\\\", \\\"pig\\\": \\\"🐷\\\", \\\"pig2\\\": \\\"🐖\\\", \\\"boar\\\": \\\"🐗\\\", \\\"pig_nose\\\": \\\"🐽\\\", \\\"ram\\\": \\\"🐏\\\", \\\"sheep\\\": \\\"🐑\\\", \\\"goat\\\": \\\"🐐\\\", \\\"dromedary_camel\\\": \\\"🐪\\\", \\\"camel\\\": \\\"🐫\\\", \\\"llama\\\": \\\"🦙\\\", \\\"giraffe\\\": \\\"🦒\\\", \\\"elephant\\\": \\\"🐘\\\", \\\"mammoth\\\": \\\"🦣\\\", \\\"rhinoceros\\\": \\\"🦏\\\", \\\"hippopotamus\\\": \\\"🦛\\\", \\\"mouse\\\": \\\"🐭\\\", \\\"mouse2\\\": \\\"🐁\\\", \\\"rat\\\": \\\"🐀\\\", \\\"hamster\\\": \\\"🐹\\\", \\\"rabbit\\\": \\\"🐰\\\", \\\"rabbit2\\\": \\\"🐇\\\", \\\"chipmunk\\\": \\\"🐿️\\\", \\\"beaver\\\": \\\"🦫\\\", \\\"hedgehog\\\": \\\"🦔\\\", \\\"bat\\\": \\\"🦇\\\", \\\"bear\\\": \\\"🐻\\\", \\\"polar_bear\\\": \\\"🐻‍❄️\\\", \\\"koala\\\": \\\"🐨\\\", \\\"panda_face\\\": \\\"🐼\\\", \\\"sloth\\\": \\\"🦥\\\", \\\"otter\\\": \\\"🦦\\\", \\\"skunk\\\": \\\"🦨\\\", \\\"kangaroo\\\": \\\"🦘\\\", \\\"badger\\\": \\\"🦡\\\", \\\"feet\\\": \\\"🐾\\\", \\\"paw_prints\\\": \\\"🐾\\\", \\\"turkey\\\": \\\"🦃\\\", \\\"chicken\\\": \\\"🐔\\\", \\\"rooster\\\": \\\"🐓\\\", \\\"hatching_chick\\\": \\\"🐣\\\", \\\"baby_chick\\\": \\\"🐤\\\", \\\"hatched_chick\\\": \\\"🐥\\\", \\\"bird\\\": \\\"🐦\\\", \\\"penguin\\\": \\\"🐧\\\", \\\"dove\\\": \\\"🕊️\\\", \\\"eagle\\\": \\\"🦅\\\", \\\"duck\\\": \\\"🦆\\\", \\\"swan\\\": \\\"🦢\\\", \\\"owl\\\": \\\"🦉\\\", \\\"dodo\\\": \\\"🦤\\\", \\\"feather\\\": \\\"🪶\\\", \\\"flamingo\\\": \\\"🦩\\\", \\\"peacock\\\": \\\"🦚\\\", \\\"parrot\\\": \\\"🦜\\\", \\\"wing\\\": \\\"🪽\\\", \\\"black_bird\\\": \\\"🐦‍⬛\\\", \\\"goose\\\": \\\"🪿\\\", \\\"frog\\\": \\\"🐸\\\", \\\"crocodile\\\": \\\"🐊\\\", \\\"turtle\\\": \\\"🐢\\\", \\\"lizard\\\": \\\"🦎\\\", \\\"snake\\\": \\\"🐍\\\", \\\"dragon_face\\\": \\\"🐲\\\", \\\"dragon\\\": \\\"🐉\\\", \\\"sauropod\\\": \\\"🦕\\\", \\\"t-rex\\\": \\\"🦖\\\", \\\"whale\\\": \\\"🐳\\\", \\\"whale2\\\": \\\"🐋\\\", \\\"dolphin\\\": \\\"🐬\\\", \\\"flipper\\\": \\\"🐬\\\", \\\"seal\\\": \\\"🦭\\\", \\\"fish\\\": \\\"🐟\\\", \\\"tropical_fish\\\": \\\"🐠\\\", \\\"blowfish\\\": \\\"🐡\\\", \\\"shark\\\": \\\"🦈\\\", \\\"octopus\\\": \\\"🐙\\\", \\\"shell\\\": \\\"🐚\\\", \\\"coral\\\": \\\"🪸\\\", \\\"jellyfish\\\": \\\"🪼\\\", \\\"snail\\\": \\\"🐌\\\", \\\"butterfly\\\": \\\"🦋\\\", \\\"bug\\\": \\\"🐛\\\", \\\"ant\\\": \\\"🐜\\\", \\\"bee\\\": \\\"🐝\\\", \\\"honeybee\\\": \\\"🐝\\\", \\\"beetle\\\": \\\"🪲\\\", \\\"lady_beetle\\\": \\\"🐞\\\", \\\"cricket\\\": \\\"🦗\\\", \\\"cockroach\\\": \\\"🪳\\\", \\\"spider\\\": \\\"🕷️\\\", \\\"spider_web\\\": \\\"🕸️\\\", \\\"scorpion\\\": \\\"🦂\\\", \\\"mosquito\\\": \\\"🦟\\\", \\\"fly\\\": \\\"🪰\\\", \\\"worm\\\": \\\"🪱\\\", \\\"microbe\\\": \\\"🦠\\\", \\\"bouquet\\\": \\\"💐\\\", \\\"cherry_blossom\\\": \\\"🌸\\\", \\\"white_flower\\\": \\\"💮\\\", \\\"lotus\\\": \\\"🪷\\\", \\\"rosette\\\": \\\"🏵️\\\", \\\"rose\\\": \\\"🌹\\\", \\\"wilted_flower\\\": \\\"🥀\\\", \\\"hibiscus\\\": \\\"🌺\\\", \\\"sunflower\\\": \\\"🌻\\\", \\\"blossom\\\": \\\"🌼\\\", \\\"tulip\\\": \\\"🌷\\\", \\\"hyacinth\\\": \\\"🪻\\\", \\\"seedling\\\": \\\"🌱\\\", \\\"potted_plant\\\": \\\"🪴\\\", \\\"evergreen_tree\\\": \\\"🌲\\\", \\\"deciduous_tree\\\": \\\"🌳\\\", \\\"palm_tree\\\": \\\"🌴\\\", \\\"cactus\\\": \\\"🌵\\\", \\\"ear_of_rice\\\": \\\"🌾\\\", \\\"herb\\\": \\\"🌿\\\", \\\"shamrock\\\": \\\"☘️\\\", \\\"four_leaf_clover\\\": \\\"🍀\\\", \\\"maple_leaf\\\": \\\"🍁\\\", \\\"fallen_leaf\\\": \\\"🍂\\\", \\\"leaves\\\": \\\"🍃\\\", \\\"empty_nest\\\": \\\"🪹\\\", \\\"nest_with_eggs\\\": \\\"🪺\\\", \\\"mushroom\\\": \\\"🍄\\\", \\\"grapes\\\": \\\"🍇\\\", \\\"melon\\\": \\\"🍈\\\", \\\"watermelon\\\": \\\"🍉\\\", \\\"tangerine\\\": \\\"🍊\\\", \\\"orange\\\": \\\"🍊\\\", \\\"mandarin\\\": \\\"🍊\\\", \\\"lemon\\\": \\\"🍋\\\", \\\"banana\\\": \\\"🍌\\\", \\\"pineapple\\\": \\\"🍍\\\", \\\"mango\\\": \\\"🥭\\\", \\\"apple\\\": \\\"🍎\\\", \\\"green_apple\\\": \\\"🍏\\\", \\\"pear\\\": \\\"🍐\\\", \\\"peach\\\": \\\"🍑\\\", \\\"cherries\\\": \\\"🍒\\\", \\\"strawberry\\\": \\\"🍓\\\", \\\"blueberries\\\": \\\"🫐\\\", \\\"kiwi_fruit\\\": \\\"🥝\\\", \\\"tomato\\\": \\\"🍅\\\", \\\"olive\\\": \\\"🫒\\\", \\\"coconut\\\": \\\"🥥\\\", \\\"avocado\\\": \\\"🥑\\\", \\\"eggplant\\\": \\\"🍆\\\", \\\"potato\\\": \\\"🥔\\\", \\\"carrot\\\": \\\"🥕\\\", \\\"corn\\\": \\\"🌽\\\", \\\"hot_pepper\\\": \\\"🌶️\\\", \\\"bell_pepper\\\": \\\"🫑\\\", \\\"cucumber\\\": \\\"🥒\\\", \\\"leafy_green\\\": \\\"🥬\\\", \\\"broccoli\\\": \\\"🥦\\\", \\\"garlic\\\": \\\"🧄\\\", \\\"onion\\\": \\\"🧅\\\", \\\"peanuts\\\": \\\"🥜\\\", \\\"beans\\\": \\\"🫘\\\", \\\"chestnut\\\": \\\"🌰\\\", \\\"ginger_root\\\": \\\"🫚\\\", \\\"pea_pod\\\": \\\"🫛\\\", \\\"bread\\\": \\\"🍞\\\", \\\"croissant\\\": \\\"🥐\\\", \\\"baguette_bread\\\": \\\"🥖\\\", \\\"flatbread\\\": \\\"🫓\\\", \\\"pretzel\\\": \\\"🥨\\\", \\\"bagel\\\": \\\"🥯\\\", \\\"pancakes\\\": \\\"🥞\\\", \\\"waffle\\\": \\\"🧇\\\", \\\"cheese\\\": \\\"🧀\\\", \\\"meat_on_bone\\\": \\\"🍖\\\", \\\"poultry_leg\\\": \\\"🍗\\\", \\\"cut_of_meat\\\": \\\"🥩\\\", \\\"bacon\\\": \\\"🥓\\\", \\\"hamburger\\\": \\\"🍔\\\", \\\"fries\\\": \\\"🍟\\\", \\\"pizza\\\": \\\"🍕\\\", \\\"hotdog\\\": \\\"🌭\\\", \\\"sandwich\\\": \\\"🥪\\\", \\\"taco\\\": \\\"🌮\\\", \\\"burrito\\\": \\\"🌯\\\", \\\"tamale\\\": \\\"🫔\\\", \\\"stuffed_flatbread\\\": \\\"🥙\\\", \\\"falafel\\\": \\\"🧆\\\", \\\"egg\\\": \\\"🥚\\\", \\\"fried_egg\\\": \\\"🍳\\\", \\\"shallow_pan_of_food\\\": \\\"🥘\\\", \\\"stew\\\": \\\"🍲\\\", \\\"fondue\\\": \\\"🫕\\\", \\\"bowl_with_spoon\\\": \\\"🥣\\\", \\\"green_salad\\\": \\\"🥗\\\", \\\"popcorn\\\": \\\"🍿\\\", \\\"butter\\\": \\\"🧈\\\", \\\"salt\\\": \\\"🧂\\\", \\\"canned_food\\\": \\\"🥫\\\", \\\"bento\\\": \\\"🍱\\\", \\\"rice_cracker\\\": \\\"🍘\\\", \\\"rice_ball\\\": \\\"🍙\\\", \\\"rice\\\": \\\"🍚\\\", \\\"curry\\\": \\\"🍛\\\", \\\"ramen\\\": \\\"🍜\\\", \\\"spaghetti\\\": \\\"🍝\\\", \\\"sweet_potato\\\": \\\"🍠\\\", \\\"oden\\\": \\\"🍢\\\", \\\"sushi\\\": \\\"🍣\\\", \\\"fried_shrimp\\\": \\\"🍤\\\", \\\"fish_cake\\\": \\\"🍥\\\", \\\"moon_cake\\\": \\\"🥮\\\", \\\"dango\\\": \\\"🍡\\\", \\\"dumpling\\\": \\\"🥟\\\", \\\"fortune_cookie\\\": \\\"🥠\\\", \\\"takeout_box\\\": \\\"🥡\\\", \\\"crab\\\": \\\"🦀\\\", \\\"lobster\\\": \\\"🦞\\\", \\\"shrimp\\\": \\\"🦐\\\", \\\"squid\\\": \\\"🦑\\\", \\\"oyster\\\": \\\"🦪\\\", \\\"icecream\\\": \\\"🍦\\\", \\\"shaved_ice\\\": \\\"🍧\\\", \\\"ice_cream\\\": \\\"🍨\\\", \\\"doughnut\\\": \\\"🍩\\\", \\\"cookie\\\": \\\"🍪\\\", \\\"birthday\\\": \\\"🎂\\\", \\\"cake\\\": \\\"🍰\\\", \\\"cupcake\\\": \\\"🧁\\\", \\\"pie\\\": \\\"🥧\\\", \\\"chocolate_bar\\\": \\\"🍫\\\", \\\"candy\\\": \\\"🍬\\\", \\\"lollipop\\\": \\\"🍭\\\", \\\"custard\\\": \\\"🍮\\\", \\\"honey_pot\\\": \\\"🍯\\\", \\\"baby_bottle\\\": \\\"🍼\\\", \\\"milk_glass\\\": \\\"🥛\\\", \\\"coffee\\\": \\\"☕\\\", \\\"teapot\\\": \\\"🫖\\\", \\\"tea\\\": \\\"🍵\\\", \\\"sake\\\": \\\"🍶\\\", \\\"champagne\\\": \\\"🍾\\\", \\\"wine_glass\\\": \\\"🍷\\\", \\\"cocktail\\\": \\\"🍸\\\", \\\"tropical_drink\\\": \\\"🍹\\\", \\\"beer\\\": \\\"🍺\\\", \\\"beers\\\": \\\"🍻\\\", \\\"clinking_glasses\\\": \\\"🥂\\\", \\\"tumbler_glass\\\": \\\"🥃\\\", \\\"pouring_liquid\\\": \\\"🫗\\\", \\\"cup_with_straw\\\": \\\"🥤\\\", \\\"bubble_tea\\\": \\\"🧋\\\", \\\"beverage_box\\\": \\\"🧃\\\", \\\"mate\\\": \\\"🧉\\\", \\\"ice_cube\\\": \\\"🧊\\\", \\\"chopsticks\\\": \\\"🥢\\\", \\\"plate_with_cutlery\\\": \\\"🍽️\\\", \\\"fork_and_knife\\\": \\\"🍴\\\", \\\"spoon\\\": \\\"🥄\\\", \\\"hocho\\\": \\\"🔪\\\", \\\"knife\\\": \\\"🔪\\\", \\\"jar\\\": \\\"🫙\\\", \\\"amphora\\\": \\\"🏺\\\", \\\"earth_africa\\\": \\\"🌍\\\", \\\"earth_americas\\\": \\\"🌎\\\", \\\"earth_asia\\\": \\\"🌏\\\", \\\"globe_with_meridians\\\": \\\"🌐\\\", \\\"world_map\\\": \\\"🗺️\\\", \\\"japan\\\": \\\"🗾\\\", \\\"compass\\\": \\\"🧭\\\", \\\"mountain_snow\\\": \\\"🏔️\\\", \\\"mountain\\\": \\\"⛰️\\\", \\\"volcano\\\": \\\"🌋\\\", \\\"mount_fuji\\\": \\\"🗻\\\", \\\"camping\\\": \\\"🏕️\\\", \\\"beach_umbrella\\\": \\\"🏖️\\\", \\\"desert\\\": \\\"🏜️\\\", \\\"desert_island\\\": \\\"🏝️\\\", \\\"national_park\\\": \\\"🏞️\\\", \\\"stadium\\\": \\\"🏟️\\\", \\\"classical_building\\\": \\\"🏛️\\\", \\\"building_construction\\\": \\\"🏗️\\\", \\\"bricks\\\": \\\"🧱\\\", \\\"rock\\\": \\\"🪨\\\", \\\"wood\\\": \\\"🪵\\\", \\\"hut\\\": \\\"🛖\\\", \\\"houses\\\": \\\"🏘️\\\", \\\"derelict_house\\\": \\\"🏚️\\\", \\\"house\\\": \\\"🏠\\\", \\\"house_with_garden\\\": \\\"🏡\\\", \\\"office\\\": \\\"🏢\\\", \\\"post_office\\\": \\\"🏣\\\", \\\"european_post_office\\\": \\\"🏤\\\", \\\"hospital\\\": \\\"🏥\\\", \\\"bank\\\": \\\"🏦\\\", \\\"hotel\\\": \\\"🏨\\\", \\\"love_hotel\\\": \\\"🏩\\\", \\\"convenience_store\\\": \\\"🏪\\\", \\\"school\\\": \\\"🏫\\\", \\\"department_store\\\": \\\"🏬\\\", \\\"factory\\\": \\\"🏭\\\", \\\"japanese_castle\\\": \\\"🏯\\\", \\\"european_castle\\\": \\\"🏰\\\", \\\"wedding\\\": \\\"💒\\\", \\\"tokyo_tower\\\": \\\"🗼\\\", \\\"statue_of_liberty\\\": \\\"🗽\\\", \\\"church\\\": \\\"⛪\\\", \\\"mosque\\\": \\\"🕌\\\", \\\"hindu_temple\\\": \\\"🛕\\\", \\\"synagogue\\\": \\\"🕍\\\", \\\"shinto_shrine\\\": \\\"⛩️\\\", \\\"kaaba\\\": \\\"🕋\\\", \\\"fountain\\\": \\\"⛲\\\", \\\"tent\\\": \\\"⛺\\\", \\\"foggy\\\": \\\"🌁\\\", \\\"night_with_stars\\\": \\\"🌃\\\", \\\"cityscape\\\": \\\"🏙️\\\", \\\"sunrise_over_mountains\\\": \\\"🌄\\\", \\\"sunrise\\\": \\\"🌅\\\", \\\"city_sunset\\\": \\\"🌆\\\", \\\"city_sunrise\\\": \\\"🌇\\\", \\\"bridge_at_night\\\": \\\"🌉\\\", \\\"hotsprings\\\": \\\"♨️\\\", \\\"carousel_horse\\\": \\\"🎠\\\", \\\"playground_slide\\\": \\\"🛝\\\", \\\"ferris_wheel\\\": \\\"🎡\\\", \\\"roller_coaster\\\": \\\"🎢\\\", \\\"barber\\\": \\\"💈\\\", \\\"circus_tent\\\": \\\"🎪\\\", \\\"steam_locomotive\\\": \\\"🚂\\\", \\\"railway_car\\\": \\\"🚃\\\", \\\"bullettrain_side\\\": \\\"🚄\\\", \\\"bullettrain_front\\\": \\\"🚅\\\", \\\"train2\\\": \\\"🚆\\\", \\\"metro\\\": \\\"🚇\\\", \\\"light_rail\\\": \\\"🚈\\\", \\\"station\\\": \\\"🚉\\\", \\\"tram\\\": \\\"🚊\\\", \\\"monorail\\\": \\\"🚝\\\", \\\"mountain_railway\\\": \\\"🚞\\\", \\\"train\\\": \\\"🚋\\\", \\\"bus\\\": \\\"🚌\\\", \\\"oncoming_bus\\\": \\\"🚍\\\", \\\"trolleybus\\\": \\\"🚎\\\", \\\"minibus\\\": \\\"🚐\\\", \\\"ambulance\\\": \\\"🚑\\\", \\\"fire_engine\\\": \\\"🚒\\\", \\\"police_car\\\": \\\"🚓\\\", \\\"oncoming_police_car\\\": \\\"🚔\\\", \\\"taxi\\\": \\\"🚕\\\", \\\"oncoming_taxi\\\": \\\"🚖\\\", \\\"car\\\": \\\"🚗\\\", \\\"red_car\\\": \\\"🚗\\\", \\\"oncoming_automobile\\\": \\\"🚘\\\", \\\"blue_car\\\": \\\"🚙\\\", \\\"pickup_truck\\\": \\\"🛻\\\", \\\"truck\\\": \\\"🚚\\\", \\\"articulated_lorry\\\": \\\"🚛\\\", \\\"tractor\\\": \\\"🚜\\\", \\\"racing_car\\\": \\\"🏎️\\\", \\\"motorcycle\\\": \\\"🏍️\\\", \\\"motor_scooter\\\": \\\"🛵\\\", \\\"manual_wheelchair\\\": \\\"🦽\\\", \\\"motorized_wheelchair\\\": \\\"🦼\\\", \\\"auto_rickshaw\\\": \\\"🛺\\\", \\\"bike\\\": \\\"🚲\\\", \\\"kick_scooter\\\": \\\"🛴\\\", \\\"skateboard\\\": \\\"🛹\\\", \\\"roller_skate\\\": \\\"🛼\\\", \\\"busstop\\\": \\\"🚏\\\", \\\"motorway\\\": \\\"🛣️\\\", \\\"railway_track\\\": \\\"🛤️\\\", \\\"oil_drum\\\": \\\"🛢️\\\", \\\"fuelpump\\\": \\\"⛽\\\", \\\"wheel\\\": \\\"🛞\\\", \\\"rotating_light\\\": \\\"🚨\\\", \\\"traffic_light\\\": \\\"🚥\\\", \\\"vertical_traffic_light\\\": \\\"🚦\\\", \\\"stop_sign\\\": \\\"🛑\\\", \\\"construction\\\": \\\"🚧\\\", \\\"anchor\\\": \\\"⚓\\\", \\\"ring_buoy\\\": \\\"🛟\\\", \\\"boat\\\": \\\"⛵\\\", \\\"sailboat\\\": \\\"⛵\\\", \\\"canoe\\\": \\\"🛶\\\", \\\"speedboat\\\": \\\"🚤\\\", \\\"passenger_ship\\\": \\\"🛳️\\\", \\\"ferry\\\": \\\"⛴️\\\", \\\"motor_boat\\\": \\\"🛥️\\\", \\\"ship\\\": \\\"🚢\\\", \\\"airplane\\\": \\\"✈️\\\", \\\"small_airplane\\\": \\\"🛩️\\\", \\\"flight_departure\\\": \\\"🛫\\\", \\\"flight_arrival\\\": \\\"🛬\\\", \\\"parachute\\\": \\\"🪂\\\", \\\"seat\\\": \\\"💺\\\", \\\"helicopter\\\": \\\"🚁\\\", \\\"suspension_railway\\\": \\\"🚟\\\", \\\"mountain_cableway\\\": \\\"🚠\\\", \\\"aerial_tramway\\\": \\\"🚡\\\", \\\"artificial_satellite\\\": \\\"🛰️\\\", \\\"rocket\\\": \\\"🚀\\\", \\\"flying_saucer\\\": \\\"🛸\\\", \\\"bellhop_bell\\\": \\\"🛎️\\\", \\\"luggage\\\": \\\"🧳\\\", \\\"hourglass\\\": \\\"⌛\\\", \\\"hourglass_flowing_sand\\\": \\\"⏳\\\", \\\"watch\\\": \\\"⌚\\\", \\\"alarm_clock\\\": \\\"⏰\\\", \\\"stopwatch\\\": \\\"⏱️\\\", \\\"timer_clock\\\": \\\"⏲️\\\", \\\"mantelpiece_clock\\\": \\\"🕰️\\\", \\\"clock12\\\": \\\"🕛\\\", \\\"clock1230\\\": \\\"🕧\\\", \\\"clock1\\\": \\\"🕐\\\", \\\"clock130\\\": \\\"🕜\\\", \\\"clock2\\\": \\\"🕑\\\", \\\"clock230\\\": \\\"🕝\\\", \\\"clock3\\\": \\\"🕒\\\", \\\"clock330\\\": \\\"🕞\\\", \\\"clock4\\\": \\\"🕓\\\", \\\"clock430\\\": \\\"🕟\\\", \\\"clock5\\\": \\\"🕔\\\", \\\"clock530\\\": \\\"🕠\\\", \\\"clock6\\\": \\\"🕕\\\", \\\"clock630\\\": \\\"🕡\\\", \\\"clock7\\\": \\\"🕖\\\", \\\"clock730\\\": \\\"🕢\\\", \\\"clock8\\\": \\\"🕗\\\", \\\"clock830\\\": \\\"🕣\\\", \\\"clock9\\\": \\\"🕘\\\", \\\"clock930\\\": \\\"🕤\\\", \\\"clock10\\\": \\\"🕙\\\", \\\"clock1030\\\": \\\"🕥\\\", \\\"clock11\\\": \\\"🕚\\\", \\\"clock1130\\\": \\\"🕦\\\", \\\"new_moon\\\": \\\"🌑\\\", \\\"waxing_crescent_moon\\\": \\\"🌒\\\", \\\"first_quarter_moon\\\": \\\"🌓\\\", \\\"moon\\\": \\\"🌔\\\", \\\"waxing_gibbous_moon\\\": \\\"🌔\\\", \\\"full_moon\\\": \\\"🌕\\\", \\\"waning_gibbous_moon\\\": \\\"🌖\\\", \\\"last_quarter_moon\\\": \\\"🌗\\\", \\\"waning_crescent_moon\\\": \\\"🌘\\\", \\\"crescent_moon\\\": \\\"🌙\\\", \\\"new_moon_with_face\\\": \\\"🌚\\\", \\\"first_quarter_moon_with_face\\\": \\\"🌛\\\", \\\"last_quarter_moon_with_face\\\": \\\"🌜\\\", \\\"thermometer\\\": \\\"🌡️\\\", \\\"sunny\\\": \\\"☀️\\\", \\\"full_moon_with_face\\\": \\\"🌝\\\", \\\"sun_with_face\\\": \\\"🌞\\\", \\\"ringed_planet\\\": \\\"🪐\\\", \\\"star\\\": \\\"⭐\\\", \\\"star2\\\": \\\"🌟\\\", \\\"stars\\\": \\\"🌠\\\", \\\"milky_way\\\": \\\"🌌\\\", \\\"cloud\\\": \\\"☁️\\\", \\\"partly_sunny\\\": \\\"⛅\\\", \\\"cloud_with_lightning_and_rain\\\": \\\"⛈️\\\", \\\"sun_behind_small_cloud\\\": \\\"🌤️\\\", \\\"sun_behind_large_cloud\\\": \\\"🌥️\\\", \\\"sun_behind_rain_cloud\\\": \\\"🌦️\\\", \\\"cloud_with_rain\\\": \\\"🌧️\\\", \\\"cloud_with_snow\\\": \\\"🌨️\\\", \\\"cloud_with_lightning\\\": \\\"🌩️\\\", \\\"tornado\\\": \\\"🌪️\\\", \\\"fog\\\": \\\"🌫️\\\", \\\"wind_face\\\": \\\"🌬️\\\", \\\"cyclone\\\": \\\"🌀\\\", \\\"rainbow\\\": \\\"🌈\\\", \\\"closed_umbrella\\\": \\\"🌂\\\", \\\"open_umbrella\\\": \\\"☂️\\\", \\\"umbrella\\\": \\\"☔\\\", \\\"parasol_on_ground\\\": \\\"⛱️\\\", \\\"zap\\\": \\\"⚡\\\", \\\"snowflake\\\": \\\"❄️\\\", \\\"snowman_with_snow\\\": \\\"☃️\\\", \\\"snowman\\\": \\\"⛄\\\", \\\"comet\\\": \\\"☄️\\\", \\\"fire\\\": \\\"🔥\\\", \\\"droplet\\\": \\\"💧\\\", \\\"ocean\\\": \\\"🌊\\\", \\\"jack_o_lantern\\\": \\\"🎃\\\", \\\"christmas_tree\\\": \\\"🎄\\\", \\\"fireworks\\\": \\\"🎆\\\", \\\"sparkler\\\": \\\"🎇\\\", \\\"firecracker\\\": \\\"🧨\\\", \\\"sparkles\\\": \\\"✨\\\", \\\"balloon\\\": \\\"🎈\\\", \\\"tada\\\": \\\"🎉\\\", \\\"confetti_ball\\\": \\\"🎊\\\", \\\"tanabata_tree\\\": \\\"🎋\\\", \\\"bamboo\\\": \\\"🎍\\\", \\\"dolls\\\": \\\"🎎\\\", \\\"flags\\\": \\\"🎏\\\", \\\"wind_chime\\\": \\\"🎐\\\", \\\"rice_scene\\\": \\\"🎑\\\", \\\"red_envelope\\\": \\\"🧧\\\", \\\"ribbon\\\": \\\"🎀\\\", \\\"gift\\\": \\\"🎁\\\", \\\"reminder_ribbon\\\": \\\"🎗️\\\", \\\"tickets\\\": \\\"🎟️\\\", \\\"ticket\\\": \\\"🎫\\\", \\\"medal_military\\\": \\\"🎖️\\\", \\\"trophy\\\": \\\"🏆\\\", \\\"medal_sports\\\": \\\"🏅\\\", \\\"1st_place_medal\\\": \\\"🥇\\\", \\\"2nd_place_medal\\\": \\\"🥈\\\", \\\"3rd_place_medal\\\": \\\"🥉\\\", \\\"soccer\\\": \\\"⚽\\\", \\\"baseball\\\": \\\"⚾\\\", \\\"softball\\\": \\\"🥎\\\", \\\"basketball\\\": \\\"🏀\\\", \\\"volleyball\\\": \\\"🏐\\\", \\\"football\\\": \\\"🏈\\\", \\\"rugby_football\\\": \\\"🏉\\\", \\\"tennis\\\": \\\"🎾\\\", \\\"flying_disc\\\": \\\"🥏\\\", \\\"bowling\\\": \\\"🎳\\\", \\\"cricket_game\\\": \\\"🏏\\\", \\\"field_hockey\\\": \\\"🏑\\\", \\\"ice_hockey\\\": \\\"🏒\\\", \\\"lacrosse\\\": \\\"🥍\\\", \\\"ping_pong\\\": \\\"🏓\\\", \\\"badminton\\\": \\\"🏸\\\", \\\"boxing_glove\\\": \\\"🥊\\\", \\\"martial_arts_uniform\\\": \\\"🥋\\\", \\\"goal_net\\\": \\\"🥅\\\", \\\"golf\\\": \\\"⛳\\\", \\\"ice_skate\\\": \\\"⛸️\\\", \\\"fishing_pole_and_fish\\\": \\\"🎣\\\", \\\"diving_mask\\\": \\\"🤿\\\", \\\"running_shirt_with_sash\\\": \\\"🎽\\\", \\\"ski\\\": \\\"🎿\\\", \\\"sled\\\": \\\"🛷\\\", \\\"curling_stone\\\": \\\"🥌\\\", \\\"dart\\\": \\\"🎯\\\", \\\"yo_yo\\\": \\\"🪀\\\", \\\"kite\\\": \\\"🪁\\\", \\\"gun\\\": \\\"🔫\\\", \\\"8ball\\\": \\\"🎱\\\", \\\"crystal_ball\\\": \\\"🔮\\\", \\\"magic_wand\\\": \\\"🪄\\\", \\\"video_game\\\": \\\"🎮\\\", \\\"joystick\\\": \\\"🕹️\\\", \\\"slot_machine\\\": \\\"🎰\\\", \\\"game_die\\\": \\\"🎲\\\", \\\"jigsaw\\\": \\\"🧩\\\", \\\"teddy_bear\\\": \\\"🧸\\\", \\\"pinata\\\": \\\"🪅\\\", \\\"mirror_ball\\\": \\\"🪩\\\", \\\"nesting_dolls\\\": \\\"🪆\\\", \\\"spades\\\": \\\"♠️\\\", \\\"hearts\\\": \\\"♥️\\\", \\\"diamonds\\\": \\\"♦️\\\", \\\"clubs\\\": \\\"♣️\\\", \\\"chess_pawn\\\": \\\"♟️\\\", \\\"black_joker\\\": \\\"🃏\\\", \\\"mahjong\\\": \\\"🀄\\\", \\\"flower_playing_cards\\\": \\\"🎴\\\", \\\"performing_arts\\\": \\\"🎭\\\", \\\"framed_picture\\\": \\\"🖼️\\\", \\\"art\\\": \\\"🎨\\\", \\\"thread\\\": \\\"🧵\\\", \\\"sewing_needle\\\": \\\"🪡\\\", \\\"yarn\\\": \\\"🧶\\\", \\\"knot\\\": \\\"🪢\\\", \\\"eyeglasses\\\": \\\"👓\\\", \\\"dark_sunglasses\\\": \\\"🕶️\\\", \\\"goggles\\\": \\\"🥽\\\", \\\"lab_coat\\\": \\\"🥼\\\", \\\"safety_vest\\\": \\\"🦺\\\", \\\"necktie\\\": \\\"👔\\\", \\\"shirt\\\": \\\"👕\\\", \\\"tshirt\\\": \\\"👕\\\", \\\"jeans\\\": \\\"👖\\\", \\\"scarf\\\": \\\"🧣\\\", \\\"gloves\\\": \\\"🧤\\\", \\\"coat\\\": \\\"🧥\\\", \\\"socks\\\": \\\"🧦\\\", \\\"dress\\\": \\\"👗\\\", \\\"kimono\\\": \\\"👘\\\", \\\"sari\\\": \\\"🥻\\\", \\\"one_piece_swimsuit\\\": \\\"🩱\\\", \\\"swim_brief\\\": \\\"🩲\\\", \\\"shorts\\\": \\\"🩳\\\", \\\"bikini\\\": \\\"👙\\\", \\\"womans_clothes\\\": \\\"👚\\\", \\\"folding_hand_fan\\\": \\\"🪭\\\", \\\"purse\\\": \\\"👛\\\", \\\"handbag\\\": \\\"👜\\\", \\\"pouch\\\": \\\"👝\\\", \\\"shopping\\\": \\\"🛍️\\\", \\\"school_satchel\\\": \\\"🎒\\\", \\\"thong_sandal\\\": \\\"🩴\\\", \\\"mans_shoe\\\": \\\"👞\\\", \\\"shoe\\\": \\\"👞\\\", \\\"athletic_shoe\\\": \\\"👟\\\", \\\"hiking_boot\\\": \\\"🥾\\\", \\\"flat_shoe\\\": \\\"🥿\\\", \\\"high_heel\\\": \\\"👠\\\", \\\"sandal\\\": \\\"👡\\\", \\\"ballet_shoes\\\": \\\"🩰\\\", \\\"boot\\\": \\\"👢\\\", \\\"hair_pick\\\": \\\"🪮\\\", \\\"crown\\\": \\\"👑\\\", \\\"womans_hat\\\": \\\"👒\\\", \\\"tophat\\\": \\\"🎩\\\", \\\"mortar_board\\\": \\\"🎓\\\", \\\"billed_cap\\\": \\\"🧢\\\", \\\"military_helmet\\\": \\\"🪖\\\", \\\"rescue_worker_helmet\\\": \\\"⛑️\\\", \\\"prayer_beads\\\": \\\"📿\\\", \\\"lipstick\\\": \\\"💄\\\", \\\"ring\\\": \\\"💍\\\", \\\"gem\\\": \\\"💎\\\", \\\"mute\\\": \\\"🔇\\\", \\\"speaker\\\": \\\"🔈\\\", \\\"sound\\\": \\\"🔉\\\", \\\"loud_sound\\\": \\\"🔊\\\", \\\"loudspeaker\\\": \\\"📢\\\", \\\"mega\\\": \\\"📣\\\", \\\"postal_horn\\\": \\\"📯\\\", \\\"bell\\\": \\\"🔔\\\", \\\"no_bell\\\": \\\"🔕\\\", \\\"musical_score\\\": \\\"🎼\\\", \\\"musical_note\\\": \\\"🎵\\\", \\\"notes\\\": \\\"🎶\\\", \\\"studio_microphone\\\": \\\"🎙️\\\", \\\"level_slider\\\": \\\"🎚️\\\", \\\"control_knobs\\\": \\\"🎛️\\\", \\\"microphone\\\": \\\"🎤\\\", \\\"headphones\\\": \\\"🎧\\\", \\\"radio\\\": \\\"📻\\\", \\\"saxophone\\\": \\\"🎷\\\", \\\"accordion\\\": \\\"🪗\\\", \\\"guitar\\\": \\\"🎸\\\", \\\"musical_keyboard\\\": \\\"🎹\\\", \\\"trumpet\\\": \\\"🎺\\\", \\\"violin\\\": \\\"🎻\\\", \\\"banjo\\\": \\\"🪕\\\", \\\"drum\\\": \\\"🥁\\\", \\\"long_drum\\\": \\\"🪘\\\", \\\"maracas\\\": \\\"🪇\\\", \\\"flute\\\": \\\"🪈\\\", \\\"iphone\\\": \\\"📱\\\", \\\"calling\\\": \\\"📲\\\", \\\"phone\\\": \\\"☎️\\\", \\\"telephone\\\": \\\"☎️\\\", \\\"telephone_receiver\\\": \\\"📞\\\", \\\"pager\\\": \\\"📟\\\", \\\"fax\\\": \\\"📠\\\", \\\"battery\\\": \\\"🔋\\\", \\\"low_battery\\\": \\\"🪫\\\", \\\"electric_plug\\\": \\\"🔌\\\", \\\"computer\\\": \\\"💻\\\", \\\"desktop_computer\\\": \\\"🖥️\\\", \\\"printer\\\": \\\"🖨️\\\", \\\"keyboard\\\": \\\"⌨️\\\", \\\"computer_mouse\\\": \\\"🖱️\\\", \\\"trackball\\\": \\\"🖲️\\\", \\\"minidisc\\\": \\\"💽\\\", \\\"floppy_disk\\\": \\\"💾\\\", \\\"cd\\\": \\\"💿\\\", \\\"dvd\\\": \\\"📀\\\", \\\"abacus\\\": \\\"🧮\\\", \\\"movie_camera\\\": \\\"🎥\\\", \\\"film_strip\\\": \\\"🎞️\\\", \\\"film_projector\\\": \\\"📽️\\\", \\\"clapper\\\": \\\"🎬\\\", \\\"tv\\\": \\\"📺\\\", \\\"camera\\\": \\\"📷\\\", \\\"camera_flash\\\": \\\"📸\\\", \\\"video_camera\\\": \\\"📹\\\", \\\"vhs\\\": \\\"📼\\\", \\\"mag\\\": \\\"🔍\\\", \\\"mag_right\\\": \\\"🔎\\\", \\\"candle\\\": \\\"🕯️\\\", \\\"bulb\\\": \\\"💡\\\", \\\"flashlight\\\": \\\"🔦\\\", \\\"izakaya_lantern\\\": \\\"🏮\\\", \\\"lantern\\\": \\\"🏮\\\", \\\"diya_lamp\\\": \\\"🪔\\\", \\\"notebook_with_decorative_cover\\\": \\\"📔\\\", \\\"closed_book\\\": \\\"📕\\\", \\\"book\\\": \\\"📖\\\", \\\"open_book\\\": \\\"📖\\\", \\\"green_book\\\": \\\"📗\\\", \\\"blue_book\\\": \\\"📘\\\", \\\"orange_book\\\": \\\"📙\\\", \\\"books\\\": \\\"📚\\\", \\\"notebook\\\": \\\"📓\\\", \\\"ledger\\\": \\\"📒\\\", \\\"page_with_curl\\\": \\\"📃\\\", \\\"scroll\\\": \\\"📜\\\", \\\"page_facing_up\\\": \\\"📄\\\", \\\"newspaper\\\": \\\"📰\\\", \\\"newspaper_roll\\\": \\\"🗞️\\\", \\\"bookmark_tabs\\\": \\\"📑\\\", \\\"bookmark\\\": \\\"🔖\\\", \\\"label\\\": \\\"🏷️\\\", \\\"moneybag\\\": \\\"💰\\\", \\\"coin\\\": \\\"🪙\\\", \\\"yen\\\": \\\"💴\\\", \\\"dollar\\\": \\\"💵\\\", \\\"euro\\\": \\\"💶\\\", \\\"pound\\\": \\\"💷\\\", \\\"money_with_wings\\\": \\\"💸\\\", \\\"credit_card\\\": \\\"💳\\\", \\\"receipt\\\": \\\"🧾\\\", \\\"chart\\\": \\\"💹\\\", \\\"envelope\\\": \\\"✉️\\\", \\\"email\\\": \\\"📧\\\", \\\"e-mail\\\": \\\"📧\\\", \\\"incoming_envelope\\\": \\\"📨\\\", \\\"envelope_with_arrow\\\": \\\"📩\\\", \\\"outbox_tray\\\": \\\"📤\\\", \\\"inbox_tray\\\": \\\"📥\\\", \\\"package\\\": \\\"📦\\\", \\\"mailbox\\\": \\\"📫\\\", \\\"mailbox_closed\\\": \\\"📪\\\", \\\"mailbox_with_mail\\\": \\\"📬\\\", \\\"mailbox_with_no_mail\\\": \\\"📭\\\", \\\"postbox\\\": \\\"📮\\\", \\\"ballot_box\\\": \\\"🗳️\\\", \\\"pencil2\\\": \\\"✏️\\\", \\\"black_nib\\\": \\\"✒️\\\", \\\"fountain_pen\\\": \\\"🖋️\\\", \\\"pen\\\": \\\"🖊️\\\", \\\"paintbrush\\\": \\\"🖌️\\\", \\\"crayon\\\": \\\"🖍️\\\", \\\"memo\\\": \\\"📝\\\", \\\"pencil\\\": \\\"📝\\\", \\\"briefcase\\\": \\\"💼\\\", \\\"file_folder\\\": \\\"📁\\\", \\\"open_file_folder\\\": \\\"📂\\\", \\\"card_index_dividers\\\": \\\"🗂️\\\", \\\"date\\\": \\\"📅\\\", \\\"calendar\\\": \\\"📆\\\", \\\"spiral_notepad\\\": \\\"🗒️\\\", \\\"spiral_calendar\\\": \\\"🗓️\\\", \\\"card_index\\\": \\\"📇\\\", \\\"chart_with_upwards_trend\\\": \\\"📈\\\", \\\"chart_with_downwards_trend\\\": \\\"📉\\\", \\\"bar_chart\\\": \\\"📊\\\", \\\"clipboard\\\": \\\"📋\\\", \\\"pushpin\\\": \\\"📌\\\", \\\"round_pushpin\\\": \\\"📍\\\", \\\"paperclip\\\": \\\"📎\\\", \\\"paperclips\\\": \\\"🖇️\\\", \\\"straight_ruler\\\": \\\"📏\\\", \\\"triangular_ruler\\\": \\\"📐\\\", \\\"scissors\\\": \\\"✂️\\\", \\\"card_file_box\\\": \\\"🗃️\\\", \\\"file_cabinet\\\": \\\"🗄️\\\", \\\"wastebasket\\\": \\\"🗑️\\\", \\\"lock\\\": \\\"🔒\\\", \\\"unlock\\\": \\\"🔓\\\", \\\"lock_with_ink_pen\\\": \\\"🔏\\\", \\\"closed_lock_with_key\\\": \\\"🔐\\\", \\\"key\\\": \\\"🔑\\\", \\\"old_key\\\": \\\"🗝️\\\", \\\"hammer\\\": \\\"🔨\\\", \\\"axe\\\": \\\"🪓\\\", \\\"pick\\\": \\\"⛏️\\\", \\\"hammer_and_pick\\\": \\\"⚒️\\\", \\\"hammer_and_wrench\\\": \\\"🛠️\\\", \\\"dagger\\\": \\\"🗡️\\\", \\\"crossed_swords\\\": \\\"⚔️\\\", \\\"bomb\\\": \\\"💣\\\", \\\"boomerang\\\": \\\"🪃\\\", \\\"bow_and_arrow\\\": \\\"🏹\\\", \\\"shield\\\": \\\"🛡️\\\", \\\"carpentry_saw\\\": \\\"🪚\\\", \\\"wrench\\\": \\\"🔧\\\", \\\"screwdriver\\\": \\\"🪛\\\", \\\"nut_and_bolt\\\": \\\"🔩\\\", \\\"gear\\\": \\\"⚙️\\\", \\\"clamp\\\": \\\"🗜️\\\", \\\"balance_scale\\\": \\\"⚖️\\\", \\\"probing_cane\\\": \\\"🦯\\\", \\\"link\\\": \\\"🔗\\\", \\\"chains\\\": \\\"⛓️\\\", \\\"hook\\\": \\\"🪝\\\", \\\"toolbox\\\": \\\"🧰\\\", \\\"magnet\\\": \\\"🧲\\\", \\\"ladder\\\": \\\"🪜\\\", \\\"alembic\\\": \\\"⚗️\\\", \\\"test_tube\\\": \\\"🧪\\\", \\\"petri_dish\\\": \\\"🧫\\\", \\\"dna\\\": \\\"🧬\\\", \\\"microscope\\\": \\\"🔬\\\", \\\"telescope\\\": \\\"🔭\\\", \\\"satellite\\\": \\\"📡\\\", \\\"syringe\\\": \\\"💉\\\", \\\"drop_of_blood\\\": \\\"🩸\\\", \\\"pill\\\": \\\"💊\\\", \\\"adhesive_bandage\\\": \\\"🩹\\\", \\\"crutch\\\": \\\"🩼\\\", \\\"stethoscope\\\": \\\"🩺\\\", \\\"x_ray\\\": \\\"🩻\\\", \\\"door\\\": \\\"🚪\\\", \\\"elevator\\\": \\\"🛗\\\", \\\"mirror\\\": \\\"🪞\\\", \\\"window\\\": \\\"🪟\\\", \\\"bed\\\": \\\"🛏️\\\", \\\"couch_and_lamp\\\": \\\"🛋️\\\", \\\"chair\\\": \\\"🪑\\\", \\\"toilet\\\": \\\"🚽\\\", \\\"plunger\\\": \\\"🪠\\\", \\\"shower\\\": \\\"🚿\\\", \\\"bathtub\\\": \\\"🛁\\\", \\\"mouse_trap\\\": \\\"🪤\\\", \\\"razor\\\": \\\"🪒\\\", \\\"lotion_bottle\\\": \\\"🧴\\\", \\\"safety_pin\\\": \\\"🧷\\\", \\\"broom\\\": \\\"🧹\\\", \\\"basket\\\": \\\"🧺\\\", \\\"roll_of_paper\\\": \\\"🧻\\\", \\\"bucket\\\": \\\"🪣\\\", \\\"soap\\\": \\\"🧼\\\", \\\"bubbles\\\": \\\"🫧\\\", \\\"toothbrush\\\": \\\"🪥\\\", \\\"sponge\\\": \\\"🧽\\\", \\\"fire_extinguisher\\\": \\\"🧯\\\", \\\"shopping_cart\\\": \\\"🛒\\\", \\\"smoking\\\": \\\"🚬\\\", \\\"coffin\\\": \\\"⚰️\\\", \\\"headstone\\\": \\\"🪦\\\", \\\"funeral_urn\\\": \\\"⚱️\\\", \\\"nazar_amulet\\\": \\\"🧿\\\", \\\"hamsa\\\": \\\"🪬\\\", \\\"moyai\\\": \\\"🗿\\\", \\\"placard\\\": \\\"🪧\\\", \\\"identification_card\\\": \\\"🪪\\\", \\\"atm\\\": \\\"🏧\\\", \\\"put_litter_in_its_place\\\": \\\"🚮\\\", \\\"potable_water\\\": \\\"🚰\\\", \\\"wheelchair\\\": \\\"♿\\\", \\\"mens\\\": \\\"🚹\\\", \\\"womens\\\": \\\"🚺\\\", \\\"restroom\\\": \\\"🚻\\\", \\\"baby_symbol\\\": \\\"🚼\\\", \\\"wc\\\": \\\"🚾\\\", \\\"passport_control\\\": \\\"🛂\\\", \\\"customs\\\": \\\"🛃\\\", \\\"baggage_claim\\\": \\\"🛄\\\", \\\"left_luggage\\\": \\\"🛅\\\", \\\"warning\\\": \\\"⚠️\\\", \\\"children_crossing\\\": \\\"🚸\\\", \\\"no_entry\\\": \\\"⛔\\\", \\\"no_entry_sign\\\": \\\"🚫\\\", \\\"no_bicycles\\\": \\\"🚳\\\", \\\"no_smoking\\\": \\\"🚭\\\", \\\"do_not_litter\\\": \\\"🚯\\\", \\\"non-potable_water\\\": \\\"🚱\\\", \\\"no_pedestrians\\\": \\\"🚷\\\", \\\"no_mobile_phones\\\": \\\"📵\\\", \\\"underage\\\": \\\"🔞\\\", \\\"radioactive\\\": \\\"☢️\\\", \\\"biohazard\\\": \\\"☣️\\\", \\\"arrow_up\\\": \\\"⬆️\\\", \\\"arrow_upper_right\\\": \\\"↗️\\\", \\\"arrow_right\\\": \\\"➡️\\\", \\\"arrow_lower_right\\\": \\\"↘️\\\", \\\"arrow_down\\\": \\\"⬇️\\\", \\\"arrow_lower_left\\\": \\\"↙️\\\", \\\"arrow_left\\\": \\\"⬅️\\\", \\\"arrow_upper_left\\\": \\\"↖️\\\", \\\"arrow_up_down\\\": \\\"↕️\\\", \\\"left_right_arrow\\\": \\\"↔️\\\", \\\"leftwards_arrow_with_hook\\\": \\\"↩️\\\", \\\"arrow_right_hook\\\": \\\"↪️\\\", \\\"arrow_heading_up\\\": \\\"⤴️\\\", \\\"arrow_heading_down\\\": \\\"⤵️\\\", \\\"arrows_clockwise\\\": \\\"🔃\\\", \\\"arrows_counterclockwise\\\": \\\"🔄\\\", \\\"back\\\": \\\"🔙\\\", \\\"end\\\": \\\"🔚\\\", \\\"on\\\": \\\"🔛\\\", \\\"soon\\\": \\\"🔜\\\", \\\"top\\\": \\\"🔝\\\", \\\"place_of_worship\\\": \\\"🛐\\\", \\\"atom_symbol\\\": \\\"⚛️\\\", \\\"om\\\": \\\"🕉️\\\", \\\"star_of_david\\\": \\\"✡️\\\", \\\"wheel_of_dharma\\\": \\\"☸️\\\", \\\"yin_yang\\\": \\\"☯️\\\", \\\"latin_cross\\\": \\\"✝️\\\", \\\"orthodox_cross\\\": \\\"☦️\\\", \\\"star_and_crescent\\\": \\\"☪️\\\", \\\"peace_symbol\\\": \\\"☮️\\\", \\\"menorah\\\": \\\"🕎\\\", \\\"six_pointed_star\\\": \\\"🔯\\\", \\\"khanda\\\": \\\"🪯\\\", \\\"aries\\\": \\\"♈\\\", \\\"taurus\\\": \\\"♉\\\", \\\"gemini\\\": \\\"♊\\\", \\\"cancer\\\": \\\"♋\\\", \\\"leo\\\": \\\"♌\\\", \\\"virgo\\\": \\\"♍\\\", \\\"libra\\\": \\\"♎\\\", \\\"scorpius\\\": \\\"♏\\\", \\\"sagittarius\\\": \\\"♐\\\", \\\"capricorn\\\": \\\"♑\\\", \\\"aquarius\\\": \\\"♒\\\", \\\"pisces\\\": \\\"♓\\\", \\\"ophiuchus\\\": \\\"⛎\\\", \\\"twisted_rightwards_arrows\\\": \\\"🔀\\\", \\\"repeat\\\": \\\"🔁\\\", \\\"repeat_one\\\": \\\"🔂\\\", \\\"arrow_forward\\\": \\\"▶️\\\", \\\"fast_forward\\\": \\\"⏩\\\", \\\"next_track_button\\\": \\\"⏭️\\\", \\\"play_or_pause_button\\\": \\\"⏯️\\\", \\\"arrow_backward\\\": \\\"◀️\\\", \\\"rewind\\\": \\\"⏪\\\", \\\"previous_track_button\\\": \\\"⏮️\\\", \\\"arrow_up_small\\\": \\\"🔼\\\", \\\"arrow_double_up\\\": \\\"⏫\\\", \\\"arrow_down_small\\\": \\\"🔽\\\", \\\"arrow_double_down\\\": \\\"⏬\\\", \\\"pause_button\\\": \\\"⏸️\\\", \\\"stop_button\\\": \\\"⏹️\\\", \\\"record_button\\\": \\\"⏺️\\\", \\\"eject_button\\\": \\\"⏏️\\\", \\\"cinema\\\": \\\"🎦\\\", \\\"low_brightness\\\": \\\"🔅\\\", \\\"high_brightness\\\": \\\"🔆\\\", \\\"signal_strength\\\": \\\"📶\\\", \\\"wireless\\\": \\\"🛜\\\", \\\"vibration_mode\\\": \\\"📳\\\", \\\"mobile_phone_off\\\": \\\"📴\\\", \\\"female_sign\\\": \\\"♀️\\\", \\\"male_sign\\\": \\\"♂️\\\", \\\"transgender_symbol\\\": \\\"⚧️\\\", \\\"heavy_multiplication_x\\\": \\\"✖️\\\", \\\"heavy_plus_sign\\\": \\\"➕\\\", \\\"heavy_minus_sign\\\": \\\"➖\\\", \\\"heavy_division_sign\\\": \\\"➗\\\", \\\"heavy_equals_sign\\\": \\\"🟰\\\", \\\"infinity\\\": \\\"♾️\\\", \\\"bangbang\\\": \\\"‼️\\\", \\\"interrobang\\\": \\\"⁉️\\\", \\\"question\\\": \\\"❓\\\", \\\"grey_question\\\": \\\"❔\\\", \\\"grey_exclamation\\\": \\\"❕\\\", \\\"exclamation\\\": \\\"❗\\\", \\\"heavy_exclamation_mark\\\": \\\"❗\\\", \\\"wavy_dash\\\": \\\"〰️\\\", \\\"currency_exchange\\\": \\\"💱\\\", \\\"heavy_dollar_sign\\\": \\\"💲\\\", \\\"medical_symbol\\\": \\\"⚕️\\\", \\\"recycle\\\": \\\"♻️\\\", \\\"fleur_de_lis\\\": \\\"⚜️\\\", \\\"trident\\\": \\\"🔱\\\", \\\"name_badge\\\": \\\"📛\\\", \\\"beginner\\\": \\\"🔰\\\", \\\"o\\\": \\\"⭕\\\", \\\"white_check_mark\\\": \\\"✅\\\", \\\"ballot_box_with_check\\\": \\\"☑️\\\", \\\"heavy_check_mark\\\": \\\"✔️\\\", \\\"x\\\": \\\"❌\\\", \\\"negative_squared_cross_mark\\\": \\\"❎\\\", \\\"curly_loop\\\": \\\"➰\\\", \\\"loop\\\": \\\"➿\\\", \\\"part_alternation_mark\\\": \\\"〽️\\\", \\\"eight_spoked_asterisk\\\": \\\"✳️\\\", \\\"eight_pointed_black_star\\\": \\\"✴️\\\", \\\"sparkle\\\": \\\"❇️\\\", \\\"copyright\\\": \\\"©️\\\", \\\"registered\\\": \\\"®️\\\", \\\"tm\\\": \\\"™️\\\", \\\"hash\\\": \\\"#️⃣\\\", \\\"asterisk\\\": \\\"*️⃣\\\", \\\"zero\\\": \\\"0️⃣\\\", \\\"one\\\": \\\"1️⃣\\\", \\\"two\\\": \\\"2️⃣\\\", \\\"three\\\": \\\"3️⃣\\\", \\\"four\\\": \\\"4️⃣\\\", \\\"five\\\": \\\"5️⃣\\\", \\\"six\\\": \\\"6️⃣\\\", \\\"seven\\\": \\\"7️⃣\\\", \\\"eight\\\": \\\"8️⃣\\\", \\\"nine\\\": \\\"9️⃣\\\", \\\"keycap_ten\\\": \\\"🔟\\\", \\\"capital_abcd\\\": \\\"🔠\\\", \\\"abcd\\\": \\\"🔡\\\", \\\"symbols\\\": \\\"🔣\\\", \\\"abc\\\": \\\"🔤\\\", \\\"a\\\": \\\"🅰️\\\", \\\"ab\\\": \\\"🆎\\\", \\\"b\\\": \\\"🅱️\\\", \\\"cl\\\": \\\"🆑\\\", \\\"cool\\\": \\\"🆒\\\", \\\"free\\\": \\\"🆓\\\", \\\"information_source\\\": \\\"ℹ️\\\", \\\"id\\\": \\\"🆔\\\", \\\"m\\\": \\\"Ⓜ️\\\", \\\"new\\\": \\\"🆕\\\", \\\"ng\\\": \\\"🆖\\\", \\\"o2\\\": \\\"🅾️\\\", \\\"ok\\\": \\\"🆗\\\", \\\"parking\\\": \\\"🅿️\\\", \\\"sos\\\": \\\"🆘\\\", \\\"up\\\": \\\"🆙\\\", \\\"vs\\\": \\\"🆚\\\", \\\"koko\\\": \\\"🈁\\\", \\\"sa\\\": \\\"🈂️\\\", \\\"ideograph_advantage\\\": \\\"🉐\\\", \\\"accept\\\": \\\"🉑\\\", \\\"congratulations\\\": \\\"㊗️\\\", \\\"secret\\\": \\\"㊙️\\\", \\\"u6e80\\\": \\\"🈵\\\", \\\"red_circle\\\": \\\"🔴\\\", \\\"orange_circle\\\": \\\"🟠\\\", \\\"yellow_circle\\\": \\\"🟡\\\", \\\"green_circle\\\": \\\"🟢\\\", \\\"large_blue_circle\\\": \\\"🔵\\\", \\\"purple_circle\\\": \\\"🟣\\\", \\\"brown_circle\\\": \\\"🟤\\\", \\\"black_circle\\\": \\\"⚫\\\", \\\"white_circle\\\": \\\"⚪\\\", \\\"red_square\\\": \\\"🟥\\\", \\\"orange_square\\\": \\\"🟧\\\", \\\"yellow_square\\\": \\\"🟨\\\", \\\"green_square\\\": \\\"🟩\\\", \\\"blue_square\\\": \\\"🟦\\\", \\\"purple_square\\\": \\\"🟪\\\", \\\"brown_square\\\": \\\"🟫\\\", \\\"black_large_square\\\": \\\"⬛\\\", \\\"white_large_square\\\": \\\"⬜\\\", \\\"black_medium_square\\\": \\\"◼️\\\", \\\"white_medium_square\\\": \\\"◻️\\\", \\\"black_medium_small_square\\\": \\\"◾\\\", \\\"white_medium_small_square\\\": \\\"◽\\\", \\\"black_small_square\\\": \\\"▪️\\\", \\\"white_small_square\\\": \\\"▫️\\\", \\\"large_orange_diamond\\\": \\\"🔶\\\", \\\"large_blue_diamond\\\": \\\"🔷\\\", \\\"small_orange_diamond\\\": \\\"🔸\\\", \\\"small_blue_diamond\\\": \\\"🔹\\\", \\\"small_red_triangle\\\": \\\"🔺\\\", \\\"small_red_triangle_down\\\": \\\"🔻\\\", \\\"diamond_shape_with_a_dot_inside\\\": \\\"💠\\\", \\\"radio_button\\\": \\\"🔘\\\", \\\"white_square_button\\\": \\\"🔳\\\", \\\"black_square_button\\\": \\\"🔲\\\", \\\"checkered_flag\\\": \\\"🏁\\\", \\\"triangular_flag_on_post\\\": \\\"🚩\\\", \\\"crossed_flags\\\": \\\"🎌\\\", \\\"black_flag\\\": \\\"🏴\\\", \\\"white_flag\\\": \\\"🏳️\\\", \\\"rainbow_flag\\\": \\\"🏳️‍🌈\\\", \\\"transgender_flag\\\": \\\"🏳️‍⚧️\\\", \\\"pirate_flag\\\": \\\"🏴‍☠️\\\", \\\"ascension_island\\\": \\\"🇦🇨\\\", \\\"andorra\\\": \\\"🇦🇩\\\", \\\"united_arab_emirates\\\": \\\"🇦🇪\\\", \\\"afghanistan\\\": \\\"🇦🇫\\\", \\\"antigua_barbuda\\\": \\\"🇦🇬\\\", \\\"anguilla\\\": \\\"🇦🇮\\\", \\\"albania\\\": \\\"🇦🇱\\\", \\\"armenia\\\": \\\"🇦🇲\\\", \\\"angola\\\": \\\"🇦🇴\\\", \\\"antarctica\\\": \\\"🇦🇶\\\", \\\"argentina\\\": \\\"🇦🇷\\\", \\\"american_samoa\\\": \\\"🇦🇸\\\", \\\"austria\\\": \\\"🇦🇹\\\", \\\"australia\\\": \\\"🇦🇺\\\", \\\"aruba\\\": \\\"🇦🇼\\\", \\\"aland_islands\\\": \\\"🇦🇽\\\", \\\"azerbaijan\\\": \\\"🇦🇿\\\", \\\"bosnia_herzegovina\\\": \\\"🇧🇦\\\", \\\"barbados\\\": \\\"🇧🇧\\\", \\\"bangladesh\\\": \\\"🇧🇩\\\", \\\"belgium\\\": \\\"🇧🇪\\\", \\\"burkina_faso\\\": \\\"🇧🇫\\\", \\\"bulgaria\\\": \\\"🇧🇬\\\", \\\"bahrain\\\": \\\"🇧🇭\\\", \\\"burundi\\\": \\\"🇧🇮\\\", \\\"benin\\\": \\\"🇧🇯\\\", \\\"st_barthelemy\\\": \\\"🇧🇱\\\", \\\"bermuda\\\": \\\"🇧🇲\\\", \\\"brunei\\\": \\\"🇧🇳\\\", \\\"bolivia\\\": \\\"🇧🇴\\\", \\\"caribbean_netherlands\\\": \\\"🇧🇶\\\", \\\"brazil\\\": \\\"🇧🇷\\\", \\\"bahamas\\\": \\\"🇧🇸\\\", \\\"bhutan\\\": \\\"🇧🇹\\\", \\\"bouvet_island\\\": \\\"🇧🇻\\\", \\\"botswana\\\": \\\"🇧🇼\\\", \\\"belarus\\\": \\\"🇧🇾\\\", \\\"belize\\\": \\\"🇧🇿\\\", \\\"canada\\\": \\\"🇨🇦\\\", \\\"cocos_islands\\\": \\\"🇨🇨\\\", \\\"congo_kinshasa\\\": \\\"🇨🇩\\\", \\\"central_african_republic\\\": \\\"🇨🇫\\\", \\\"congo_brazzaville\\\": \\\"🇨🇬\\\", \\\"switzerland\\\": \\\"🇨🇭\\\", \\\"cote_divoire\\\": \\\"🇨🇮\\\", \\\"cook_islands\\\": \\\"🇨🇰\\\", \\\"chile\\\": \\\"🇨🇱\\\", \\\"cameroon\\\": \\\"🇨🇲\\\", \\\"cn\\\": \\\"🇨🇳\\\", \\\"colombia\\\": \\\"🇨🇴\\\", \\\"clipperton_island\\\": \\\"🇨🇵\\\", \\\"costa_rica\\\": \\\"🇨🇷\\\", \\\"cuba\\\": \\\"🇨🇺\\\", \\\"cape_verde\\\": \\\"🇨🇻\\\", \\\"curacao\\\": \\\"🇨🇼\\\", \\\"christmas_island\\\": \\\"🇨🇽\\\", \\\"cyprus\\\": \\\"🇨🇾\\\", \\\"czech_republic\\\": \\\"🇨🇿\\\", \\\"de\\\": \\\"🇩🇪\\\", \\\"diego_garcia\\\": \\\"🇩🇬\\\", \\\"djibouti\\\": \\\"🇩🇯\\\", \\\"denmark\\\": \\\"🇩🇰\\\", \\\"dominica\\\": \\\"🇩🇲\\\", \\\"dominican_republic\\\": \\\"🇩🇴\\\", \\\"algeria\\\": \\\"🇩🇿\\\", \\\"ceuta_melilla\\\": \\\"🇪🇦\\\", \\\"ecuador\\\": \\\"🇪🇨\\\", \\\"estonia\\\": \\\"🇪🇪\\\", \\\"egypt\\\": \\\"🇪🇬\\\", \\\"western_sahara\\\": \\\"🇪🇭\\\", \\\"eritrea\\\": \\\"🇪🇷\\\", \\\"es\\\": \\\"🇪🇸\\\", \\\"ethiopia\\\": \\\"🇪🇹\\\", \\\"eu\\\": \\\"🇪🇺\\\", \\\"european_union\\\": \\\"🇪🇺\\\", \\\"finland\\\": \\\"🇫🇮\\\", \\\"fiji\\\": \\\"🇫🇯\\\", \\\"falkland_islands\\\": \\\"🇫🇰\\\", \\\"micronesia\\\": \\\"🇫🇲\\\", \\\"faroe_islands\\\": \\\"🇫🇴\\\", \\\"fr\\\": \\\"🇫🇷\\\", \\\"gabon\\\": \\\"🇬🇦\\\", \\\"gb\\\": \\\"🇬🇧\\\", \\\"uk\\\": \\\"🇬🇧\\\", \\\"grenada\\\": \\\"🇬🇩\\\", \\\"georgia\\\": \\\"🇬🇪\\\", \\\"french_guiana\\\": \\\"🇬🇫\\\", \\\"guernsey\\\": \\\"🇬🇬\\\", \\\"ghana\\\": \\\"🇬🇭\\\", \\\"gibraltar\\\": \\\"🇬🇮\\\", \\\"greenland\\\": \\\"🇬🇱\\\", \\\"gambia\\\": \\\"🇬🇲\\\", \\\"guinea\\\": \\\"🇬🇳\\\", \\\"guadeloupe\\\": \\\"🇬🇵\\\", \\\"equatorial_guinea\\\": \\\"🇬🇶\\\", \\\"greece\\\": \\\"🇬🇷\\\", \\\"south_georgia_south_sandwich_islands\\\": \\\"🇬🇸\\\", \\\"guatemala\\\": \\\"🇬🇹\\\", \\\"guam\\\": \\\"🇬🇺\\\", \\\"guinea_bissau\\\": \\\"🇬🇼\\\", \\\"guyana\\\": \\\"🇬🇾\\\", \\\"hong_kong\\\": \\\"🇭🇰\\\", \\\"heard_mcdonald_islands\\\": \\\"🇭🇲\\\", \\\"honduras\\\": \\\"🇭🇳\\\", \\\"croatia\\\": \\\"🇭🇷\\\", \\\"haiti\\\": \\\"🇭🇹\\\", \\\"hungary\\\": \\\"🇭🇺\\\", \\\"canary_islands\\\": \\\"🇮🇨\\\", \\\"indonesia\\\": \\\"🇮🇩\\\", \\\"ireland\\\": \\\"🇮🇪\\\", \\\"israel\\\": \\\"🇮🇱\\\", \\\"isle_of_man\\\": \\\"🇮🇲\\\", \\\"india\\\": \\\"🇮🇳\\\", \\\"british_indian_ocean_territory\\\": \\\"🇮🇴\\\", \\\"iraq\\\": \\\"🇮🇶\\\", \\\"iran\\\": \\\"🇮🇷\\\", \\\"iceland\\\": \\\"🇮🇸\\\", \\\"it\\\": \\\"🇮🇹\\\", \\\"jersey\\\": \\\"🇯🇪\\\", \\\"jamaica\\\": \\\"🇯🇲\\\", \\\"jordan\\\": \\\"🇯🇴\\\", \\\"jp\\\": \\\"🇯🇵\\\", \\\"kenya\\\": \\\"🇰🇪\\\", \\\"kyrgyzstan\\\": \\\"🇰🇬\\\", \\\"cambodia\\\": \\\"🇰🇭\\\", \\\"kiribati\\\": \\\"🇰🇮\\\", \\\"comoros\\\": \\\"🇰🇲\\\", \\\"st_kitts_nevis\\\": \\\"🇰🇳\\\", \\\"north_korea\\\": \\\"🇰🇵\\\", \\\"kr\\\": \\\"🇰🇷\\\", \\\"kuwait\\\": \\\"🇰🇼\\\", \\\"cayman_islands\\\": \\\"🇰🇾\\\", \\\"kazakhstan\\\": \\\"🇰🇿\\\", \\\"laos\\\": \\\"🇱🇦\\\", \\\"lebanon\\\": \\\"🇱🇧\\\", \\\"st_lucia\\\": \\\"🇱🇨\\\", \\\"liechtenstein\\\": \\\"🇱🇮\\\", \\\"sri_lanka\\\": \\\"🇱🇰\\\", \\\"liberia\\\": \\\"🇱🇷\\\", \\\"lesotho\\\": \\\"🇱🇸\\\", \\\"lithuania\\\": \\\"🇱🇹\\\", \\\"luxembourg\\\": \\\"🇱🇺\\\", \\\"latvia\\\": \\\"🇱🇻\\\", \\\"libya\\\": \\\"🇱🇾\\\", \\\"morocco\\\": \\\"🇲🇦\\\", \\\"monaco\\\": \\\"🇲🇨\\\", \\\"moldova\\\": \\\"🇲🇩\\\", \\\"montenegro\\\": \\\"🇲🇪\\\", \\\"st_martin\\\": \\\"🇲🇫\\\", \\\"madagascar\\\": \\\"🇲🇬\\\", \\\"marshall_islands\\\": \\\"🇲🇭\\\", \\\"macedonia\\\": \\\"🇲🇰\\\", \\\"mali\\\": \\\"🇲🇱\\\", \\\"myanmar\\\": \\\"🇲🇲\\\", \\\"mongolia\\\": \\\"🇲🇳\\\", \\\"macau\\\": \\\"🇲🇴\\\", \\\"northern_mariana_islands\\\": \\\"🇲🇵\\\", \\\"martinique\\\": \\\"🇲🇶\\\", \\\"mauritania\\\": \\\"🇲🇷\\\", \\\"montserrat\\\": \\\"🇲🇸\\\", \\\"malta\\\": \\\"🇲🇹\\\", \\\"mauritius\\\": \\\"🇲🇺\\\", \\\"maldives\\\": \\\"🇲🇻\\\", \\\"malawi\\\": \\\"🇲🇼\\\", \\\"mexico\\\": \\\"🇲🇽\\\", \\\"malaysia\\\": \\\"🇲🇾\\\", \\\"mozambique\\\": \\\"🇲🇿\\\", \\\"namibia\\\": \\\"🇳🇦\\\", \\\"new_caledonia\\\": \\\"🇳🇨\\\", \\\"niger\\\": \\\"🇳🇪\\\", \\\"norfolk_island\\\": \\\"🇳🇫\\\", \\\"nigeria\\\": \\\"🇳🇬\\\", \\\"nicaragua\\\": \\\"🇳🇮\\\", \\\"netherlands\\\": \\\"🇳🇱\\\", \\\"norway\\\": \\\"🇳🇴\\\", \\\"nepal\\\": \\\"🇳🇵\\\", \\\"nauru\\\": \\\"🇳🇷\\\", \\\"niue\\\": \\\"🇳🇺\\\", \\\"new_zealand\\\": \\\"🇳🇿\\\", \\\"oman\\\": \\\"🇴🇲\\\", \\\"panama\\\": \\\"🇵🇦\\\", \\\"peru\\\": \\\"🇵🇪\\\", \\\"french_polynesia\\\": \\\"🇵🇫\\\", \\\"papua_new_guinea\\\": \\\"🇵🇬\\\", \\\"philippines\\\": \\\"🇵🇭\\\", \\\"pakistan\\\": \\\"🇵🇰\\\", \\\"poland\\\": \\\"🇵🇱\\\", \\\"st_pierre_miquelon\\\": \\\"🇵🇲\\\", \\\"pitcairn_islands\\\": \\\"🇵🇳\\\", \\\"puerto_rico\\\": \\\"🇵🇷\\\", \\\"palestinian_territories\\\": \\\"🇵🇸\\\", \\\"portugal\\\": \\\"🇵🇹\\\", \\\"palau\\\": \\\"🇵🇼\\\", \\\"paraguay\\\": \\\"🇵🇾\\\", \\\"qatar\\\": \\\"🇶🇦\\\", \\\"reunion\\\": \\\"🇷🇪\\\", \\\"romania\\\": \\\"🇷🇴\\\", \\\"serbia\\\": \\\"🇷🇸\\\", \\\"ru\\\": \\\"🇷🇺\\\", \\\"rwanda\\\": \\\"🇷🇼\\\", \\\"saudi_arabia\\\": \\\"🇸🇦\\\", \\\"solomon_islands\\\": \\\"🇸🇧\\\", \\\"seychelles\\\": \\\"🇸🇨\\\", \\\"sudan\\\": \\\"🇸🇩\\\", \\\"sweden\\\": \\\"🇸🇪\\\", \\\"singapore\\\": \\\"🇸🇬\\\", \\\"st_helena\\\": \\\"🇸🇭\\\", \\\"slovenia\\\": \\\"🇸🇮\\\", \\\"svalbard_jan_mayen\\\": \\\"🇸🇯\\\", \\\"slovakia\\\": \\\"🇸🇰\\\", \\\"sierra_leone\\\": \\\"🇸🇱\\\", \\\"san_marino\\\": \\\"🇸🇲\\\", \\\"senegal\\\": \\\"🇸🇳\\\", \\\"somalia\\\": \\\"🇸🇴\\\", \\\"suriname\\\": \\\"🇸🇷\\\", \\\"south_sudan\\\": \\\"🇸🇸\\\", \\\"sao_tome_principe\\\": \\\"🇸🇹\\\", \\\"el_salvador\\\": \\\"🇸🇻\\\", \\\"sint_maarten\\\": \\\"🇸🇽\\\", \\\"syria\\\": \\\"🇸🇾\\\", \\\"swaziland\\\": \\\"🇸🇿\\\", \\\"tristan_da_cunha\\\": \\\"🇹🇦\\\", \\\"turks_caicos_islands\\\": \\\"🇹🇨\\\", \\\"chad\\\": \\\"🇹🇩\\\", \\\"french_southern_territories\\\": \\\"🇹🇫\\\", \\\"togo\\\": \\\"🇹🇬\\\", \\\"thailand\\\": \\\"🇹🇭\\\", \\\"tajikistan\\\": \\\"🇹🇯\\\", \\\"tokelau\\\": \\\"🇹🇰\\\", \\\"timor_leste\\\": \\\"🇹🇱\\\", \\\"turkmenistan\\\": \\\"🇹🇲\\\", \\\"tunisia\\\": \\\"🇹🇳\\\", \\\"tonga\\\": \\\"🇹🇴\\\", \\\"tr\\\": \\\"🇹🇷\\\", \\\"trinidad_tobago\\\": \\\"🇹🇹\\\", \\\"tuvalu\\\": \\\"🇹🇻\\\", \\\"taiwan\\\": \\\"🇹🇼\\\", \\\"tanzania\\\": \\\"🇹🇿\\\", \\\"ukraine\\\": \\\"🇺🇦\\\", \\\"uganda\\\": \\\"🇺🇬\\\", \\\"us_outlying_islands\\\": \\\"🇺🇲\\\", \\\"united_nations\\\": \\\"🇺🇳\\\", \\\"us\\\": \\\"🇺🇸\\\", \\\"uruguay\\\": \\\"🇺🇾\\\", \\\"uzbekistan\\\": \\\"🇺🇿\\\", \\\"vatican_city\\\": \\\"🇻🇦\\\", \\\"st_vincent_grenadines\\\": \\\"🇻🇨\\\", \\\"venezuela\\\": \\\"🇻🇪\\\", \\\"british_virgin_islands\\\": \\\"🇻🇬\\\", \\\"us_virgin_islands\\\": \\\"🇻🇮\\\", \\\"vietnam\\\": \\\"🇻🇳\\\", \\\"vanuatu\\\": \\\"🇻🇺\\\", \\\"wallis_futuna\\\": \\\"🇼🇫\\\", \\\"samoa\\\": \\\"🇼🇸\\\", \\\"kosovo\\\": \\\"🇽🇰\\\", \\\"yemen\\\": \\\"🇾🇪\\\", \\\"mayotte\\\": \\\"🇾🇹\\\", \\\"south_africa\\\": \\\"🇿🇦\\\", \\\"zambia\\\": \\\"🇿🇲\\\", \\\"zimbabwe\\\": \\\"🇿🇼\\\", \\\"england\\\": \\\"🏴󠁧󠁢󠁥󠁮󠁧󠁿\\\", \\\"scotland\\\": \\\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\\\", \\\"wales\\\": \\\"🏴󠁧󠁢󠁷󠁬󠁳󠁿\\\"\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"其他\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"其他\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"66\":{\"c\":[\"其他\"]},\"67\":{\"h\":\"面试\",\"t\":[\"后端\",\"前端\"]},\"68\":{\"c\":[{\"title\":\"面试\",\"tag\":[\"前端开发\",\"Html\",\"JavaScript\"],\"description\":\"面试 后端 前端\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"面试\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"面试 后端 前端\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"前端开发\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Html\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JavaScript\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"面试\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"69\":{\"c\":[\"前端开发\",\"Html\",\"JavaScript\"]},\"70\":{\"h\":\"easyui-tree-combotree去掉默认图标或更换图标\",\"t\":[\"提示\",\"当我使用easyui插件编写项目的时候，我想把前面的图标去除或更改图标\"]},\"71\":{\"h\":\"图标操作\"},\"72\":{\"h\":\"1、加载Tree\",\"t\":[\"$(\\\"#cc\\\").combotree({ url: '/Pillars/GetChildAll', //请求地址 method: 'post', //请求方式 queryParams: { UnitType:'-1,3,4,5,6'}, //参数 valueField: 'id', //tree绑定的value值 textField: 'text', //tree显示的text文本 required: true, //是否必填(true/false) editable: false, // 不能直接输入到列表框 }); \"]},\"73\":{\"h\":\"2、Tree加载完成后运行\",\"t\":[\"onLoadSuccess: function () { $('#cc').combotree('tree').tree(\\\"collapseAll\\\"); //全部关闭 $(\\\".tree-icon,.tree-file\\\").removeClass(\\\"tree-icon tree-file\\\");//去掉最后一级图标 $(\\\".tree-icon,.tree-folder\\\").removeClass(\\\"tree-icon tree-folder tree-folder-open tree-folder-closed\\\");//去掉所有父级图标 } \"]},\"74\":{\"h\":\"3、Node展开后运行\",\"t\":[\"onExpand: function(node){ $('.tree-title').prev().removeClass(\\\"tree-folder-open\\\"); $('.tree-checkbox,.tree-checkbox0').prev().removeClass(\\\"tree-folder-open\\\"); } \"]},\"75\":{\"h\":\"修改图标\"},\"76\":{\"h\":\"使用css\",\"t\":[\" <style> /*默认*/ .tree-icon { background: url('../../../images/topology/端口-1.svg') no-repeat center center !important; } /*折叠时图片*/ .tree-folder { background: url('../../../images/topology/物理地址.svg') no-repeat center center !important; } /*展开时图片*/ .tree-folder-open { background: url('../../../images/topology/物理地址.svg') no-repeat center center !important; } </style> \",\"提示\",\"当然还有很多种方法,针对特定的场景进行编码，有用到再填充这个文档\"]},\"77\":{\"c\":[{\"title\":\"easyui-tree-combotree去掉默认图标或更换图标\",\"date\":\"2023-09-04T10:58:25.000Z\",\"tag\":[\"笔记\"],\"description\":\"easyui-tree-combotree去掉默认图标或更换图标 提示 当我使用easyui插件编写项目的时候，我想把前面的图标去除或更改图标 图标操作 1、加载Tree $(\\\"#cc\\\").combotree({ url: '/Pillars/GetChildAll',\\t\\t\\t\\t//请求地址 method: 'post',\\t\\t\\t\\t\\t\\t\\t//请求方式 queryParams: { UnitType:'-1,3,4,5,6'},\\t\\t//参数 valueField: 'id',\\t\\t\\t\\t\\t\\t\\t//tree绑定的value值 textField: 'text',\\t\\t\\t\\t\\t\\t\\t//tree显示的text文本 required: true,\\t\\t\\t\\t\\t\\t\\t//是否必填(true/false) editable: false,\\t\\t\\t\\t\\t\\t\\t// 不能直接输入到列表框 });\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/front-end/easyui-tree-combotree.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"easyui-tree-combotree去掉默认图标或更换图标\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"easyui-tree-combotree去掉默认图标或更换图标 提示 当我使用easyui插件编写项目的时候，我想把前面的图标去除或更改图标 图标操作 1、加载Tree $(\\\"#cc\\\").combotree({ url: '/Pillars/GetChildAll',\\t\\t\\t\\t//请求地址 method: 'post',\\t\\t\\t\\t\\t\\t\\t//请求方式 queryParams: { UnitType:'-1,3,4,5,6'},\\t\\t//参数 valueField: 'id',\\t\\t\\t\\t\\t\\t\\t//tree绑定的value值 textField: 'text',\\t\\t\\t\\t\\t\\t\\t//tree显示的text文本 required: true,\\t\\t\\t\\t\\t\\t\\t//是否必填(true/false) editable: false,\\t\\t\\t\\t\\t\\t\\t// 不能直接输入到列表框 });\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-09-04T10:58:25.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"easyui-tree-combotree去掉默认图标或更换图标\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-09-04T10:58:25.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"78\":{\"c\":[\"笔记\"]},\"79\":{\"h\":\"博文\"},\"80\":{\"c\":[{\"title\":\"博文\",\"tag\":[\"前端\",\"笔记\"],\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/front-end/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"前端\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"博文\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"81\":{\"c\":[\"前端\",\"笔记\"]},\"82\":{\"h\":\"博文\"},\"83\":{\"c\":[{\"title\":\"博文\",\"tag\":[\"博文\",\"笔记\"],\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/java/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"博文\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"84\":{\"c\":[\"博文\",\"笔记\"]},\"85\":{\"h\":\"mybatis查询条件List集合、map集合、Array数组\"},\"86\":{\"h\":\"传入map类型\",\"t\":[\"Mapper接口如下，service将调用该接口方法，需要注意的是， Map集合在foreach由于没有默认键可用，故需要使用 @Param 注解手动指定一个标识，后面将在foreach中将其作为键使用。 该标识任意指定即可，这里使用\\\"stuMap\\\" @Mapperpublic interface StudentMapper { public List<Student> findAddByName2(@Param(\\\"stuMap\\\") Map<String, String> stuMap); } \",\"传入参数为集合时，映射文件的sql标签parameterType属性可省略。 由于是Map集合，collection无默认键， 故配置其为对应的接口方法中的形参前的@Param注解中的标识(此处即为\\\"stuMap\\\")。 由于是Map集合，index、item属性分别表示为该Map集合中的key、value， 故可以分别用${k}，#{v}来获取该Map集合中的key、value <select id=\\\"findAddByName2\\\" resultMap=\\\"studentResultMap\\\"> SELECT * FROM user <where> <foreach collection=\\\"stuMap\\\" index=\\\"k\\\" item=\\\"v\\\"> AND ${k} = #{v} </foreach> </where> </select> \"]},\"87\":{\"h\":\"传入List类型\",\"t\":[\"Mapper接口如下，service将调用该接口方法 @Mapper public interface StudentMapper { public List<Student> findAddByName3(List<Student> stuList); } \",\"传入参数为集合时，映射文件的sql标签parameterType属性可省略。这里由于是List集合， 故collection使用默认键list，而item属性可以任意指定， 用来标识每次遍历的元素对象名称，这里记为node,则表示每次遍历的元素的属性时， 可以使用点操作符,如node.address，node.sex所示 <select id=\\\"findAddByName3\\\" resultMap=\\\"studentResultMap\\\"> SELECT * FROM user <where> <foreach collection=\\\"list\\\" item=\\\"node\\\"> <if test=\\\"node.address != null\\\"> OR address = #{node.address} </if> <if test=\\\"node.username != null\\\"> OR username = #{node.username} </if> <if test=\\\"node.sex != null\\\"> OR sex = #{node.sex} </if> </foreach> </where> </select> \"]},\"88\":{\"h\":\"传入Array类型\",\"t\":[\"Mapper接口如下，service将调用该接口方法 @Mapper public interface StudentMapper { public List<Student> findAddByName4(Student[] stuArray); } \",\"传入参数为集合时，映射文件的sql标签parameterType属性可省略。 这里由于是Array，故collection使用默认键array， 而item属性可以任意指定，用来标识每次遍历的元素对象名称，这里记为node, 则表示每次遍历的元素的属性时，可以使用点操作符,如node.address，node.sex所示。 需要注意的是，foreach将遍历数组的所有元素， 所以每次取该元素的属性前，需要先对该元素对象进行判空(如下所示) <select id=\\\"findAddByName4\\\" resultMap=\\\"studentResultMap\\\"> SELECT * FROM user <where> <foreach collection=\\\"array\\\" item=\\\"node\\\"> <if test=\\\"node != null\\\"> <if test=\\\"node.username != null\\\"> OR username = #{node.username} </if> <if test=\\\"node.address != null\\\"> OR address = #{node.address} </if> <if test=\\\"node.sex != null\\\"> OR sex = #{node.sex} </if> </if> </foreach> </where> </select> \"]},\"89\":{\"h\":\"传入参数为包含集合属性的POJO\",\"t\":[\"传入的参数为一个POJO，其属性中有集合类型时，collection直接配置为相应集合中的属性名即可\",\"构造下列一个UserVo对象同时设置一个List集合属性，传入service\",\" UserVo userVo = new UserVo(); userVo.setSex(\\\"123\\\"); List<Student> list = new LinkedList<>(); list.add( new Student(\\\"Aaron\\\", \\\"3\\\", \\\"NanJing\\\") ); list.add( new Student(\\\"tony\\\", \\\"0\\\", \\\"Beijing\\\") ); userVo.setStuList(list); studentService.findAddByName6(userVo); \",\"Mapper接口如下，service将调用该接口方法 public interface StudentMapper { public List<Student> findAddByName6(UserVo userVo); } \",\"传入参数为UserVo类型，故映射文件的sql标签parameterType属性配置为UserVo。 该POJO的stuList属性为List集合类型，在遍历该属性的List集合时，collection配置为该属性名stuList即可。 而item属性可以任意指定，用来标识每次遍历的元素对象名称，这里记为node, 则表示每次遍历的元素的属性时，可以使用点操作符,如node.address，node.sex所示 <select id=\\\"findAddByName6\\\" parameterType=\\\"com.aaron.springbootdemo.pojo.UserVo\\\" resultMap=\\\"studentResultMap\\\"> SELECT * FROM user <where> <if test=\\\"sex != null\\\"> OR sex = #{sex} </if> <foreach collection=\\\"stuList\\\" item=\\\"node\\\"> <if test=\\\"node.username != null\\\"> OR username = #{node.username} </if> <if test=\\\"node.sex != null\\\"> OR sex = #{node.sex} </if> <if test=\\\"node.address != null\\\"> OR address = #{node.address} </if> </foreach> </where> </select> \"]},\"90\":{\"h\":\"POJO 属性为 Array\",\"t\":[\"构造下列一个UserVo对象同时设置一个Array属性，传入service\",\" UserVo userVo = new UserVo(); userVo.setSex(\\\"456\\\"); Student[] stuArray = new Student[4]; stuArray[0] = new Student(\\\"Aaron\\\", \\\"3\\\"); stuArray[1] = new Student(\\\"Tom\\\", \\\"1\\\"); userVo.setStuArray(stuArray); studentService.findAddByName5(userVo); \",\"Mapper接口如下，service将调用该接口方法 public interface StudentMapper { public List<Student> findAddByName5(UserVo userVo); } \",\"传入参数为UserVo类型，故映射文件的sql标签parameterType属性配置为UserVo。 该POJO的stuArray属性为Array类型，在遍历该属性的Array时， collection配置为该属性名stuArray即可。而item属性可以任意指定， 用来标识每次遍历的元素对象名称，这里记为node,则表示每次遍历的元素的属性时， 可以使用点操作符,如node.address，node.sex所示。 需要注意的是，foreach将遍历数组的所有元素，所以每次取该元素的属性前，需要先对该元素对象进行判空(如下所示) <select id=\\\"findAddByName5\\\" parameterType=\\\"com.aaron.springbootdemo.pojo.UserVo\\\" resultMap=\\\"studentResultMap\\\"> SELECT * FROM user <where> <if test=\\\"sex != null \\\"> OR sex = #{sex} </if> <foreach collection=\\\"stuArray\\\" item=\\\"node\\\"> <if test=\\\"node != null\\\"> <if test=\\\"node.address != null\\\"> OR address = #{node.address} </if> <if test=\\\"node.username != null\\\"> OR username = #{node.username} </if> <if test=\\\"node.sex != null\\\"> OR sex = #{node.sex} </if> </if> </foreach> </where> </select> \"]},\"91\":{\"h\":\"POJO 属性为 Map\",\"t\":[\"构造下列一个UserVo对象同时设置一个Map属性，传入service\",\" UserVo userVo = new UserVo(); userVo.setSex(\\\"987\\\"); Map<String, String> map = new HashMap<>(); map.put(\\\"address\\\", \\\"Shanghai\\\"); map.put(\\\"id\\\", \\\"2\\\"); map.put(\\\"username\\\", \\\"Bob\\\"); userVo.setStuMap(map); studentService.findAddByName7(userVo); \",\"Mapper接口如下，service将调用该接口方法 public interface StudentMapper { public List<Student> findAddByName7(UserVo userVo); } \",\"传入参数为UserVo类型，故映射文件的sql标签parameterType属性配置为UserVo。 该POJO的stuMap属性为Map类型，在遍历该属性的Map时，collection配置为该属性名stuMap即可。 由于是Map集合，index、item属性分别表示为该Map集合中的key、value， 故可以分别用${k}，#{v}来获取该Map集合中的key、value <select id=\\\"findAddByName7\\\" parameterType=\\\"com.aaron.springbootdemo.pojo.UserVo\\\" resultMap=\\\"studentResultMap\\\"> SELECT * FROM user <where> <if test=\\\"#{sex} != null\\\"> OR sex = #{sex} </if> <foreach collection=\\\"stuMap\\\" index=\\\"k\\\" item=\\\"v\\\"> OR ${key} = #{value} </foreach> </where> </select> \"]},\"92\":{\"c\":[{\"title\":\"mybatis查询条件List集合、map集合、Array数组\",\"date\":\"2023-09-19T10:58:00.000Z\",\"tag\":[\"后端\"],\"description\":\"mybatis查询条件List集合、map集合、Array数组 传入map类型 Mapper接口如下，service将调用该接口方法，需要注意的是， Map集合在foreach由于没有默认键可用，故需要使用 @Param 注解手动指定一个标识，后面将在foreach中将其作为键使用。 该标识任意指定即可，这里使用\\\"stuMap\\\" @Mapperpublic interface StudentMapper { public List&lt;Student&gt; findAddByName2(@Param(\\\"stuMap\\\") Map&lt;String, String&gt; stuMap); }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/mybatis/mybatis-list-map-array.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"mybatis查询条件List集合、map集合、Array数组\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"mybatis查询条件List集合、map集合、Array数组 传入map类型 Mapper接口如下，service将调用该接口方法，需要注意的是， Map集合在foreach由于没有默认键可用，故需要使用 @Param 注解手动指定一个标识，后面将在foreach中将其作为键使用。 该标识任意指定即可，这里使用\\\"stuMap\\\" @Mapperpublic interface StudentMapper { public List&lt;Student&gt; findAddByName2(@Param(\\\"stuMap\\\") Map&lt;String, String&gt; stuMap); }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"后端\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-09-19T10:58:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"mybatis查询条件List集合、map集合、Array数组\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-09-19T10:58:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"93\":{\"c\":[\"后端\"]},\"94\":{\"h\":\"mybatis查询返回List集合、map集合、List＜Map＞集合\"},\"95\":{\"h\":\"返回map类型\",\"t\":[\"1. xml中 <select id=\\\"selectUser \\\" resultType=\\\"java.util.HashMap\\\"> </select> 2.Dao接口中 Map<String,Object> selectUser(); \"]},\"96\":{\"h\":\"返回List类型\",\"t\":[\"1. xml中 <select id=\\\"selectUser \\\" resultType=\\\"java.lang.String\\\"> </select> 2.Dao接口中 List<String> selectUser(); \"]},\"97\":{\"h\":\"返回List()类型\",\"t\":[\"(返回List<Map<String,Obiect>>类型)\",\"1. xml中 <select id=\\\"selectUser\\\" resultType=\\\"java.util.HashMap\\\"> </select> 2.Dao接口中 List<Map<String,Object>> selectUser (); \"]},\"98\":{\"c\":[{\"title\":\"mybatis查询返回List集合、map集合、List＜Map＞集合\",\"date\":\"2023-09-19T10:58:00.000Z\",\"tag\":[\"后端\"],\"description\":\"mybatis查询返回List集合、map集合、List()集合 返回map类型 1. xml中 &lt;select id=\\\"selectUser \\\" resultType=\\\"java.util.HashMap\\\"&gt; &lt;/select&gt; 2.Dao接口中 Map&lt;String,Object&gt; selectUser();\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/mybatis/mybatis-List-map.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"mybatis查询返回List集合、map集合、List＜Map＞集合\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"mybatis查询返回List集合、map集合、List()集合 返回map类型 1. xml中 &lt;select id=\\\"selectUser \\\" resultType=\\\"java.util.HashMap\\\"&gt; &lt;/select&gt; 2.Dao接口中 Map&lt;String,Object&gt; selectUser();\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"后端\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-09-19T10:58:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"mybatis查询返回List集合、map集合、List＜Map＞集合\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-09-19T10:58:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"99\":{\"c\":[\"后端\"]},\"100\":{\"h\":\"博文\"},\"101\":{\"c\":[{\"title\":\"博文\",\"tag\":[\"博文\",\"笔记\"],\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/mybatis/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"博文\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"102\":{\"c\":[\"博文\",\"笔记\"]},\"103\":{\"h\":\"博文\"},\"104\":{\"c\":[{\"title\":\"博文\",\"tag\":[\"博文\",\"笔记\"],\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/mysql/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"博文\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"105\":{\"c\":[\"博文\",\"笔记\"]},\"106\":{\"h\":\"picGo+gitee设置图床\",\"t\":[\"当我了解picGo+gitee可以设置图床的时候，我决定试一试。\",\"考虑github国外网站比较慢，我使用的是gitee进行部署。\",\"如果是个人博客需要考虑设备外链，有可能图片显示不成功。\"]},\"107\":{\"h\":\"下载picGo软件\",\"t\":[\"PicGo官方网址\",\"以上有配置说明\",\"百度网盘链接：https://pan.baidu.com/s/1MHxXIOVRiAZqiPJv6jydxw?pwd=8888 提取码：8888\"]},\"108\":{\"h\":\"安装picGo软件\",\"t\":[\"选中自己想要安装的目录后一直点击下一步就好了\"]},\"109\":{\"h\":\"gitee操作\"},\"110\":{\"h\":\"在gitee中创建仓库\",\"t\":[\"直接创建就好了，这里就不截图片了。\"]},\"111\":{\"h\":\"在gitee中配置私人令牌\",\"t\":[\"创建一个私人令牌，全选就好了，其中token别忘记复制保存一下。\"]},\"112\":{\"h\":\"配置picGo\"},\"113\":{\"h\":\"在插件设置中搜索gitee插件并进行下载\",\"t\":[\"我下载的是这个\",\"进行图床设置\",\"picGo设置\",\"里面可以自定义设置\",\"设置语言，\",\"设置日志文件：可以只选择错误和提醒\",\"设置server： 设置端口号等\",\"picGo上传区进行上传图片\",\"相册能够显示图片\",\"以上配置完成\"]},\"114\":{\"h\":\"Typora+picGo设置\"},\"115\":{\"h\":\"Typora 下载\",\"t\":[\"Typora 官方中文站 (typoraio.cn)\",\"百度网盘链接：https://pan.baidu.com/s/1sXFt1eSKLoCSLHmpEe80VQ?pwd=8888 提取码：8888\"]},\"116\":{\"h\":\"Typora进行图像设置\",\"t\":[\"编写md文件时，在图片上右击直接上传到gitee仓库中\",\"本地的图片就可以上传到gitee中了，无论你把这个md文件发给谁他就可以看见图片了，不需要再考虑路径的问题啦。\"]},\"117\":{\"c\":[{\"title\":\"picGo+gitee设置图床\",\"date\":\"2023-08-24T10:58:25.000Z\",\"tag\":[\"笔记\"],\"description\":\"picGo+gitee设置图床 当我了解picGo+gitee可以设置图床的时候，我决定试一试。 考虑github国外网站比较慢，我使用的是gitee进行部署。 如果是个人博客需要考虑设备外链，有可能图片显示不成功。 下载picGo软件 PicGo官方网址 以上有配置说明\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/other/picGo_gitee.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"picGo+gitee设置图床\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"picGo+gitee设置图床 当我了解picGo+gitee可以设置图床的时候，我决定试一试。 考虑github国外网站比较慢，我使用的是gitee进行部署。 如果是个人博客需要考虑设备外链，有可能图片显示不成功。 下载picGo软件 PicGo官方网址 以上有配置说明\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-08-24T10:58:25.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"picGo+gitee设置图床\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-08-24T10:58:25.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"118\":{\"c\":[\"笔记\"]},\"119\":{\"h\":\"博文\"},\"120\":{\"c\":[{\"title\":\"博文\",\"tag\":[\"博文\",\"笔记\"],\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/other/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"博文\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"121\":{\"c\":[\"博文\",\"笔记\"]},\"122\":{\"h\":\"博文\"},\"123\":{\"c\":[{\"title\":\"博文\",\"tag\":[\"博文\",\"笔记\"],\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/blog-article/python/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"博文\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"博文\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"124\":{\"c\":[\"博文\",\"笔记\"]},\"125\":{\"h\":\"后端Demo\",\"t\":[\"序号\",\"描述\",\"链接\",\"1\",\"right-aligned\",\"$1600\",\"2\",\"centered\",\"$12\",\"3\",\"are neat\",\"$1\"]},\"126\":{\"c\":[{\"title\":\"后端Demo\",\"tag\":[\"Demo\",\"笔记\"],\"description\":\"后端Demo 序号 描述 链接 1 right-aligned $1600 2 centered $12 3 are neat $1\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/code-demo/back-end-code/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"后端Demo\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"后端Demo 序号 描述 链接 1 right-aligned $1600 2 centered $12 3 are neat $1\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Demo\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"后端Demo\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"127\":{\"c\":[\"Demo\",\"笔记\"]},\"128\":{\"h\":\"前端Demo\",\"t\":[\"序号\",\"描述\",\"链接\",\"1\",\"right-aligned\",\"$1600\",\"2\",\"centered\",\"$12\",\"3\",\"are neat\",\"$1\"]},\"129\":{\"c\":[{\"title\":\"前端Demo\",\"tag\":[\"Demo\",\"笔记\"],\"description\":\"前端Demo 序号 描述 链接 1 right-aligned $1600 2 centered $12 3 are neat $1\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/code-demo/front-end-code/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"前端Demo\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"前端Demo 序号 描述 链接 1 right-aligned $1600 2 centered $12 3 are neat $1\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Demo\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"前端Demo\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"130\":{\"c\":[\"Demo\",\"笔记\"]},\"131\":{\"h\":\"后端\",\"t\":[\"java基础知识python\"]},\"132\":{\"c\":[{\"title\":\"后端\",\"tag\":[\"后端开发\",\"Java\",\"Python\"],\"description\":\"后端 java基础知识 python\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"后端\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"后端 java基础知识 python\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"后端开发\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Python\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"后端\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"133\":{\"c\":[\"后端开发\",\"Java\",\"Python\"]},\"134\":{\"h\":\"前端\",\"t\":[\"HtmlJavaScript\"]},\"135\":{\"c\":[{\"title\":\"前端\",\"tag\":[\"前端开发\",\"Html\",\"JavaScript\"],\"description\":\"前端 Html JavaScript\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/front-end/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"前端\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"前端 Html JavaScript\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"前端开发\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Html\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JavaScript\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"前端\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"136\":{\"c\":[\"前端开发\",\"Html\",\"JavaScript\"]},\"137\":{\"h\":\"rrrr\",\"t\":[\"编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork\",\"Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE\",\"3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"4、Java可移植性 JVM Java虚拟机（Java Virtual Machine） JVM 调优问题\",\"编译型 + 解释型\",\"Java源文件.java -> 字节码.class -> 机器码\",\"生产环境使用JDK1.8 JDK Java Development Kit（包含JRE） JRE Java Runtime Envrinment\",\"6、JDK安装与配置 环境变量配置 Windows： Path\",\"编译命令：javac.exe 解释命令：java.exe\",\"7、编程起步 源代码：Hello.java\",\"public class Hello{ // 中括号[] 可在变量名前，也可以在后 public static void main(String[] args) { System.out.println(\\\"Hello World!\\\"); } } 编译执行\",\"Hello.java\",\"$ javac Hello.java # 编译文件为字节码文件 $ ls Hello.class Hello.java\",\"$ java Hello # JVM执行java程序 Hello World! 1、定义类：\",\"public class 类名 {} // 类名必须与文件名一致 class 类名 {} // 类名可以与文件名不一致 在一个.java文件中，可以有多个class定义 一个java文件中，只能有一个public class（推荐）\",\"命名规范：每个单词的首字母大写\",\"2、主方法 程序执行起点，一定要定义在类中 主方法所在类，称为主类\",\"3、系统输出\",\"System.out.println(); // 输出换行 line System.out.print(); // 输出不换行 8、JShell工具 JDK > 1.9\",\"$jshell jshell> 9、CLASSPATH环境属性 默认为当前所在目录\",\"export CLASSPATH=. # Linux set CLASSPATH=. # Windows 可配置为系统变量\",\"PATH # 操作系统提供的路径配置，定义所有可执行程序路径 CLASSPATH # JRE提供的加载类的路径 10、注释 编译时不处理注释\",\"// 单行注释 /* 多行注释 / /* 文档注释 */ 11 标识符与关键字 标识符：\",\"包含：字母、数字、_、$ 字母开头 关键字 特殊含义，如class JDK 1.4 assert 用于异常处理 JDK 1.5 enum 用于枚举定义 未使用：goto、const 特殊含义：true、false、null\",\"12、Java数据类型简介 分类\",\"基本数据类型：具体的数字单元 数值型 -整型：byte-8、short-16、 int-32、long-64 # 默认值 0 -浮点型：float-32、double-64 # 默认值 0 布尔型：boolean # 默认值 false 字符型：char-16 # 默认值 \\\\u0000\",\"引用数据类型：涉及内存关系的使用 数组、类、接口 # 默认值null 参考原则 描述数字：整数int、小数double 数据传输、文字编码转换：byte（二进制操作） 处理中文：char 描述内存或文件大小，自增主键：使用long\",\"13、整型数据类型 定义\",\"// int 变量名称 = 常量; int x = 10; 范例：超过int范围 数据溢出\",\"// int int变量 = int数值 int max = Integer.MAX_VALUE; // 获取int最大值 int min = Integer.MIN_VALUE; // 获取int最小值 System.out.println(\\\"min: \\\" + min); System.out.println(\\\"max: \\\" + max);\",\"// int变量 + int常量 = int结果 System.out.println(\\\"max + 1: \\\" + (max + 1));\",\"System.out.println(\\\"=================\\\");\",\"// long long变量 = int数值 long long_max = Integer.MAX_VALUE; long long_min = Integer.MIN_VALUE; System.out.println(\\\"long_min: \\\" + long_min); System.out.println(\\\"long_max: \\\" + long_max);\",\"// long变量 + int常量 = long结果 System.out.println(\\\"long_min + 1: \\\" + (long_max + 1));\",\"long_min: -2147483648\\nlong_max: 2147483647\\nlong_min + 1: 2147483648\"]},\"138\":{\"c\":[{\"tag\":[\"配置\",\"主题\",\"索引\"],\"description\":\"rrrr 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/python/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"rrrr\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"rrrr 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"配置\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"主题\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"索引\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"rrrr\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"139\":{\"c\":[\"配置\",\"主题\",\"索引\"]},\"140\":{\"h\":\"rrrr\",\"t\":[\"编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork\",\"Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE\",\"3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"4、Java可移植性 JVM Java虚拟机（Java Virtual Machine） JVM 调优问题\",\"编译型 + 解释型\",\"Java源文件.java -> 字节码.class -> 机器码\",\"生产环境使用JDK1.8 JDK Java Development Kit（包含JRE） JRE Java Runtime Envrinment\",\"6、JDK安装与配置 环境变量配置 Windows： Path\",\"编译命令：javac.exe 解释命令：java.exe\",\"7、编程起步 源代码：Hello.java\",\"public class Hello{ // 中括号[] 可在变量名前，也可以在后 public static void main(String[] args) { System.out.println(\\\"Hello World!\\\"); } } 编译执行\",\"Hello.java\",\"$ javac Hello.java # 编译文件为字节码文件 $ ls Hello.class Hello.java\",\"$ java Hello # JVM执行java程序 Hello World! 1、定义类：\",\"public class 类名 {} // 类名必须与文件名一致 class 类名 {} // 类名可以与文件名不一致 在一个.java文件中，可以有多个class定义 一个java文件中，只能有一个public class（推荐）\",\"命名规范：每个单词的首字母大写\",\"2、主方法 程序执行起点，一定要定义在类中 主方法所在类，称为主类\",\"3、系统输出\",\"System.out.println(); // 输出换行 line System.out.print(); // 输出不换行 8、JShell工具 JDK > 1.9\",\"$jshell jshell> 9、CLASSPATH环境属性 默认为当前所在目录\",\"export CLASSPATH=. # Linux set CLASSPATH=. # Windows 可配置为系统变量\",\"PATH # 操作系统提供的路径配置，定义所有可执行程序路径 CLASSPATH # JRE提供的加载类的路径 10、注释 编译时不处理注释\",\"// 单行注释 /* 多行注释 / /* 文档注释 */ 11 标识符与关键字 标识符：\",\"包含：字母、数字、_、$ 字母开头 关键字 特殊含义，如class JDK 1.4 assert 用于异常处理 JDK 1.5 enum 用于枚举定义 未使用：goto、const 特殊含义：true、false、null\",\"12、Java数据类型简介 分类\",\"基本数据类型：具体的数字单元 数值型 -整型：byte-8、short-16、 int-32、long-64 # 默认值 0 -浮点型：float-32、double-64 # 默认值 0 布尔型：boolean # 默认值 false 字符型：char-16 # 默认值 \\\\u0000\",\"引用数据类型：涉及内存关系的使用 数组、类、接口 # 默认值null 参考原则 描述数字：整数int、小数double 数据传输、文字编码转换：byte（二进制操作） 处理中文：char 描述内存或文件大小，自增主键：使用long\",\"13、整型数据类型 定义\",\"// int 变量名称 = 常量; int x = 10; 范例：超过int范围 数据溢出\",\"// int int变量 = int数值 int max = Integer.MAX_VALUE; // 获取int最大值 int min = Integer.MIN_VALUE; // 获取int最小值 System.out.println(\\\"min: \\\" + min); System.out.println(\\\"max: \\\" + max);\",\"// int变量 + int常量 = int结果 System.out.println(\\\"max + 1: \\\" + (max + 1));\",\"System.out.println(\\\"=================\\\");\",\"// long long变量 = int数值 long long_max = Integer.MAX_VALUE; long long_min = Integer.MIN_VALUE; System.out.println(\\\"long_min: \\\" + long_min); System.out.println(\\\"long_max: \\\" + long_max);\",\"// long变量 + int常量 = long结果 System.out.println(\\\"long_min + 1: \\\" + (long_max + 1));\",\"long_min: -2147483648\\nlong_max: 2147483647\\nlong_min + 1: 2147483648\"]},\"141\":{\"c\":[{\"tag\":[\"配置\",\"主题\",\"索引\"],\"description\":\"rrrr 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/common/common-tools/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"rrrr\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"rrrr 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"配置\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"主题\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"索引\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"rrrr\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"142\":{\"c\":[\"配置\",\"主题\",\"索引\"]},\"143\":{\"h\":\"你好\"},\"144\":{\"c\":[{\"description\":\"你好\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/front-end/html/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"你好\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"你好\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"你好\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"145\":{\"h\":\"你好\"},\"146\":{\"c\":[{\"description\":\"你好\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/front-end/javaScript/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"你好\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"你好\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"你好\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"147\":{\"h\":\"你好java基础\",\"t\":[\"编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork\",\"Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE\",\"3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"4、Java可移植性 JVM Java虚拟机（Java Virtual Machine） JVM 调优问题\",\"编译型 + 解释型\",\"Java源文件.java -> 字节码.class -> 机器码\",\"生产环境使用JDK1.8 JDK Java Development Kit（包含JRE） JRE Java Runtime Envrinment\",\"6、JDK安装与配置 环境变量配置 Windows： Path\",\"编译命令：javac.exe 解释命令：java.exe\",\"7、编程起步 源代码：Hello.java\",\"public class Hello{ // 中括号[] 可在变量名前，也可以在后 public static void main(String[] args) { System.out.println(\\\"Hello World!\\\"); } } 编译执行\",\"Hello.java\",\"$ javac Hello.java # 编译文件为字节码文件 $ ls Hello.class Hello.java\",\"$ java Hello # JVM执行java程序 Hello World! 1、定义类：\",\"public class 类名 {} // 类名必须与文件名一致 class 类名 {} // 类名可以与文件名不一致 在一个.java文件中，可以有多个class定义 一个java文件中，只能有一个public class（推荐）\",\"命名规范：每个单词的首字母大写\",\"2、主方法 程序执行起点，一定要定义在类中 主方法所在类，称为主类\",\"3、系统输出\",\"System.out.println(); // 输出换行 line System.out.print(); // 输出不换行 8、JShell工具 JDK > 1.9\",\"$jshell jshell> 9、CLASSPATH环境属性 默认为当前所在目录\",\"export CLASSPATH=. # Linux set CLASSPATH=. # Windows 可配置为系统变量\",\"PATH # 操作系统提供的路径配置，定义所有可执行程序路径 CLASSPATH # JRE提供的加载类的路径 10、注释 编译时不处理注释\",\"// 单行注释 /* 多行注释 / /* 文档注释 */ 11 标识符与关键字 标识符：\",\"包含：字母、数字、_、$ 字母开头 关键字 特殊含义，如class JDK 1.4 assert 用于异常处理 JDK 1.5 enum 用于枚举定义 未使用：goto、const 特殊含义：true、false、null\",\"12、Java数据类型简介 分类\",\"基本数据类型：具体的数字单元 数值型 -整型：byte-8、short-16、 int-32、long-64 # 默认值 0 -浮点型：float-32、double-64 # 默认值 0 布尔型：boolean # 默认值 false 字符型：char-16 # 默认值 \\\\u0000\",\"引用数据类型：涉及内存关系的使用 数组、类、接口 # 默认值null 参考原则 描述数字：整数int、小数double 数据传输、文字编码转换：byte（二进制操作） 处理中文：char 描述内存或文件大小，自增主键：使用long\",\"13、整型数据类型 定义\",\"// int 变量名称 = 常量; int x = 10; 范例：超过int范围 数据溢出\",\"// int int变量 = int数值 int max = Integer.MAX_VALUE; // 获取int最大值 int min = Integer.MIN_VALUE; // 获取int最小值 System.out.println(\\\"min: \\\" + min); System.out.println(\\\"max: \\\" + max);\",\"// int变量 + int常量 = int结果 System.out.println(\\\"max + 1: \\\" + (max + 1));\",\"System.out.println(\\\"=================\\\");\",\"// long long变量 = int数值 long long_max = Integer.MAX_VALUE; long long_min = Integer.MIN_VALUE; System.out.println(\\\"long_min: \\\" + long_min); System.out.println(\\\"long_max: \\\" + long_max);\",\"// long变量 + int常量 = long结果 System.out.println(\\\"long_min + 1: \\\" + (long_max + 1));\",\"long_min: -2147483648\\nlong_max: 2147483647\\nlong_min + 1: 2147483648\"]},\"148\":{\"c\":[{\"tag\":[\"配置\",\"主题\",\"索引\"],\"description\":\"你好java基础 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/basic/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"你好java基础\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"你好java基础 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"配置\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"主题\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"索引\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"你好java基础\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"149\":{\"c\":[\"配置\",\"主题\",\"索引\"]},\"150\":{\"h\":\"\",\"t\":[\"7200 字 38 张手绘图，详解 30 道 Java 集合框架面试高频题（让天下没有难背的八股），面渣背会这些 Java 容器八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"151\":{\"h\":\"引言\"},\"152\":{\"h\":\"1.说说有哪些常见集合？\",\"t\":[\"集合相关类和接口都在java.util中，主要分为3种：List（列表）、Map（映射）、Set(集)。\",\"其中Collection是集合List、Set的父接口，它主要有两个子接口：\",\"List：存储的元素有序，可重复。\",\"Set：存储的元素不无序，不可重复。\",\"Map是另外的接口，是键值对映射结构的集合。\"]},\"153\":{\"h\":\"List\",\"t\":[\"List，也没啥好问的，但不排除面试官剑走偏锋，比如面试官也看了我这篇文章。\"]},\"154\":{\"h\":\"2.ArrayList和LinkedList有什么区别？\",\"t\":[\"**（1）**数据结构不同\",\"ArrayList基于数组实现\",\"LinkedList基于双向链表实现\",\"（2） 多数情况下，ArrayList更利于查找，LinkedList更利于增删\",\"ArrayList基于数组实现，get(int index)可以直接通过数组下标获取，时间复杂度是O(1)； LinkedList基于链表实现，get(int index)需要遍历链表，时间复杂度是O(n)；当然，get(E element)这种查找，两种集合都需要遍历，时间复杂度都是O(n)。\",\"ArrayList增删如果是数组末尾的位置，直接插入或者删除就可以了，但是如果插入中间的位置，就需要把插入位置后的元素都向前或者向后移动，甚至还有可能触发扩容； 双向链表的插入和删除只需要改变前驱节点、后继节点和插入节点的指向就行了，不需要移动元素。\",\"注意，这个地方可能会出陷阱，LinkedList更利于增删更多是体现在平均步长上，不是体现在时间复杂度上，二者增删的时间复杂度都是O(n)\",\"**（3）**是否支持随机访问\",\"ArrayList基于数组，所以它可以根据下标查找，支持随机访问，当然，它也实现了RandmoAccess 接口，这个接口只是用来标识是否支持随机访问。\",\"LinkedList基于链表，所以它没法根据序号直接获取元素，它没有实现RandmoAccess 接口，标记不支持随机访问。\",\"**（4）**内存占用，ArrayList基于数组，是一块连续的内存空间，LinkedList基于链表，内存空间不连续，它们在空间占用上都有一些额外的消耗：\",\"ArrayList是预先定义好的数组，可能会有空的内存空间，存在一定空间浪费\",\"LinkedList每个节点，需要存储前驱和后继，所以每个节点会占用更多的空间\"]},\"155\":{\"h\":\"3.ArrayList的扩容机制了解吗？\",\"t\":[\"ArrayList是基于数组的集合，数组的容量是在定义的时候确定的，如果数组满了，再插入，就会数组溢出。所以在插入时候，会先检查是否需要扩容，如果当前容量+1超过数组长度，就会进行扩容。\",\"ArrayList的扩容是创建一个1.5倍的新数组，然后把原数组的值拷贝过去。\"]},\"156\":{\"h\":\"4.ArrayList怎么序列化的知道吗？ 为什么用transient修饰数组？\",\"t\":[\"ArrayList的序列化不太一样，它使用transient修饰存储元素的elementData的数组，transient关键字的作用是让被修饰的成员属性不被序列化。\",\"为什么最ArrayList不直接序列化元素数组呢？\",\"出于效率的考虑，数组可能长度100，但实际只用了50，剩下的50不用其实不用序列化，这样可以提高序列化和反序列化的效率，还可以节省内存空间。\",\"那ArrayList怎么序列化呢？\",\"ArrayList通过两个方法readObject、writeObject自定义序列化和反序列化策略，实际直接使用两个流ObjectOutputStream和ObjectInputStream来进行序列化和反序列化。\"]},\"157\":{\"h\":\"5.快速失败(fail-fast)和安全失败(fail-safe)了解吗？\",\"t\":[\"快速失败（fail—fast）：快速失败是Java集合的一种错误检测机制\",\"在用迭代器遍历一个集合对象时，如果线程A遍历过程中，线程B对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception。\",\"原理：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。\",\"注意：这里异常的抛出条件是检测到 modCount！=expectedmodCount 这个条件。如果集合发生变化时修改modCount值刚好又设置为了expectedmodCount值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。\",\"场景：java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改），比如ArrayList 类。\",\"安全失败（fail—safe）\",\"采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。\",\"原理：由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发Concurrent Modification Exception。\",\"缺点：基于拷贝内容的优点是避免了Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。\",\"场景：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改，比如CopyOnWriteArrayList类。\"]},\"158\":{\"h\":\"6.有哪几种实现ArrayList线程安全的方法？\",\"t\":[\"fail-fast是一种可能触发的机制，实际上，ArrayList的线程安全仍然没有保证，一般，保证ArrayList的线程安全可以通过这些方案：\",\"使用 Vector 代替 ArrayList。（不推荐，Vector是一个历史遗留类）\",\"使用 Collections.synchronizedList 包装 ArrayList，然后操作包装后的 list。\",\"使用 CopyOnWriteArrayList 代替 ArrayList。\",\"在使用 ArrayList 时，应用程序通过同步机制去控制 ArrayList 的读写。\"]},\"159\":{\"h\":\"7.CopyOnWriteArrayList了解多少？\",\"t\":[\"CopyOnWriteArrayList就是线程安全版本的ArrayList。\",\"它的名字叫CopyOnWrite——写时复制，已经明示了它的原理。\",\"CopyOnWriteArrayList采用了一种读写分离的并发策略。CopyOnWriteArrayList容器允许并发读，读操作是无锁的，性能较高。 至于写操作，比如向容器中添加一个元素，则首先将当前容器复制一份，然后在新副本上执行写操作，结束之后再将原容器的引用指向新容器。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"160\":{\"h\":\"Map\",\"t\":[\"Map中，毫无疑问，最重要的就是HashMap，面试基本被盘出包浆了，各种问法，一定要好好准备。\"]},\"161\":{\"h\":\"8.能说一下HashMap的数据结构吗？\",\"t\":[\"JDK1.7的数据结构是数组+链表，JDK1.7还有人在用？不会吧……\",\"说一下JDK1.8的数据结构吧：\",\"JDK1.8的数据结构是数组+链表+红黑树。\",\"数据结构示意图如下：\",\"其中，桶数组是用来存储数据元素，链表是用来解决冲突，红黑树是为了提高查询的效率。\",\"数据元素通过映射关系，也就是散列函数，映射到桶数组对应索引的位置\",\"如果发生冲突，从冲突的位置拉一个链表，插入冲突的元素\",\"如果链表长度>8&数组大小>=64，链表转为红黑树\",\"如果红黑树节点个数<6 ，转为链表\"]},\"162\":{\"h\":\"9.你对红黑树了解多少？为什么不用二叉树/平衡树呢？\",\"t\":[\"红黑树本质上是一种二叉查找树，为了保持平衡，它又在二叉查找树的基础上增加了一些规则：\",\"每个节点要么是红色，要么是黑色；\",\"根节点永远是黑色的；\",\"所有的叶子节点都是是黑色的（注意这里说叶子节点其实是图中的 NULL 节点）；\",\"每个红色节点的两个子节点一定都是黑色；\",\"从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点；\",\"之所以不用二叉树：\",\"红黑树是一种平衡的二叉树，插入、删除、查找的最坏时间复杂度都为 O(logn)，避免了二叉树最坏情况下的O(n)时间复杂度。\",\"之所以不用平衡二叉树：\",\"平衡二叉树是比红黑树更严格的平衡树，为了保持保持平衡，需要旋转的次数更多，也就是说平衡二叉树保持平衡的效率更低，所以平衡二叉树插入和删除的效率比红黑树要低。\"]},\"163\":{\"h\":\"10.红黑树怎么保持平衡的知道吗？\",\"t\":[\"红黑树有两种方式保持平衡：旋转和染色。\",\"旋转：旋转分为两种，左旋和右旋\",\"染⾊：\"]},\"164\":{\"h\":\"11.HashMap的put流程知道吗？\",\"t\":[\"先上个流程图吧:\",\"首先进行哈希值的扰动，获取一个新的哈希值。(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\",\"判断tab是否位空或者长度为0，如果是则进行扩容操作。\",\"if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; \",\"根据哈希值计算下标，如果对应小标正好没有存放数据，则直接插入即可否则需要覆盖。tab[i = (n - 1) & hash])\",\"判断tab[i]是否为树节点，否则向链表中插入数据，是则向树中插入节点。\",\"如果链表中插入节点的时候，链表长度大于等于8，则需要把链表转换为红黑树。treeifyBin(tab, hash);\",\"最后所有元素处理完成后，判断是否超过阈值；threshold，超过则扩容。\"]},\"165\":{\"h\":\"12.HashMap怎么查找元素的呢？\",\"t\":[\"先看流程图：\",\"HashMap的查找就简单很多：\",\"使用扰动函数，获取新的哈希值\",\"计算数组下标，获取节点\",\"当前节点和key匹配，直接返回\",\"否则，当前节点是否为树节点，查找红黑树\",\"否则，遍历链表查找\"]},\"166\":{\"h\":\"13.HashMap的哈希/扰动函数是怎么设计的?\",\"t\":[\"HashMap的哈希函数是先拿到 key 的hashcode，是一个32位的int类型的数值，然后让hashcode的高16位和低16位进行异或操作。\",\" static final int hash(Object key) { int h; // key的hashCode和key的hashCode右移16位做异或运算 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } \",\"这么设计是为了降低哈希碰撞的概率。\"]},\"167\":{\"h\":\"14.为什么哈希/扰动函数能降hash碰撞？\",\"t\":[\"因为 key.hashCode() 函数调用的是 key 键值类型自带的哈希函数，返回 int 型散列值。int 值范围为 -2147483648~2147483647，加起来大概 40 亿的映射空间。\",\"只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。但问题是一个 40 亿长度的数组，内存是放不下的。\",\"假如 HashMap 数组的初始大小才 16，就需要用之前需要对数组的长度取模运算，得到的余数才能用来访问数组下标。\",\"源码中模运算就是把散列值和数组长度 - 1 做一个 \\\"与&\\\" 操作，位运算比取余 % 运算要快。\",\"bucketIndex = indexFor(hash, table.length); static int indexFor(int h, int length) { return h & (length-1); } \",\"顺便说一下，这也正好解释了为什么 HashMap 的数组长度要取 2 的整数幂。因为这样（数组长度 - 1）正好相当于一个 “低位掩码”。与 操作的结果就是散列值的高位全部归零，只保留低位值，用来做数组下标访问。以初始长度 16 为例，16-1=15。2 进制表示是 0000 0000 0000 0000 0000 0000 0000 1111。和某个散列值做 与 操作如下，结果就是截取了最低的四位值。\",\"这样是要快捷一些，但是新的问题来了，就算散列值分布再松散，要是只取最后几位的话，碰撞也会很严重。如果散列本身做得不好，分布上成等差数列的漏洞，如果正好让最后几个低位呈现规律性重复，那就更难搞了。\",\"这时候 扰动函数 的价值就体现出来了，看一下扰动函数的示意图：\",\"右移 16 位，正好是 32bit 的一半，自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。\"]},\"168\":{\"h\":\"15.为什么HashMap的容量是2的倍数呢？\",\"t\":[\"第一个原因是为了方便哈希取余：\",\"将元素放在table数组上面，是用hash值%数组大小定位位置，而HashMap是用hash值&(数组大小-1)，却能和前面达到一样的效果，这就得益于HashMap的大小是2的倍数，2的倍数意味着该数的二进制位只有一位为1，而该数-1就可以得到二进制位上1变成0，后面的0变成1，再通过&运算，就可以得到和%一样的效果，并且位运算比%的效率高得多\",\"HashMap的容量是2的n次幂时，(n-1)的2进制也就是1111111***111这样形式的，这样与添加元素的hash值进行位运算时，能够充分的散列，使得添加的元素均匀分布在HashMap的每个位置上，减少hash碰撞。\",\"第二个方面是在扩容时，利用扩容后的大小也是2的倍数，将已经产生hash碰撞的元素完美的转移到新的table中去\",\"我们可以简单看看HashMap的扩容机制，HashMap中的元素在超过负载因子*HashMap大小时就会产生扩容。\"]},\"169\":{\"h\":\"16.如果初始化HashMap，传一个17的值 new HashMap<> ，它会怎么处理？\",\"t\":[\"简单来说，就是初始化时，传的不是2的倍数时，HashMap会向上寻找离得最近的2的倍数，所以传入17，但HashMap的实际容量是32。\",\"我们来看看详情，在HashMap的初始化中，有这样⼀段⽅法；\",\"public HashMap(int initialCapacity, float loadFactor) { ... this.loadFactor = loadFactor; this.threshold = tableSizeFor(initialCapacity); } \",\"阀值 threshold ，通过⽅法 tableSizeFor 进⾏计算，是根据初始化传的参数来计算的。\",\"同时，这个⽅法也要要寻找⽐初始值⼤的，最⼩的那个2进制数值。⽐如传了17，我应该找到的是32。\",\"static final int tableSizeFor(int cap) { int n = cap - 1; n |= n >>> 1; n |= n >>> 2; n |= n >>> 4; n |= n >>> 8; n |= n >>> 16; return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1; } \",\"MAXIMUM_CAPACITY = 1 << 30，这个是临界范围，也就是最⼤的Map集合。\",\"计算过程是向右移位1、2、4、8、16，和原来的数做|运算，这主要是为了把⼆进制的各个位置都填上1，当⼆进制的各个位置都是1以后，就是⼀个标准的2的倍数减1了，最后把结果加1再返回即可。\",\"以17为例，看一下初始化计算table容量的过程：\"]},\"170\":{\"h\":\"17.你还知道哪些哈希函数的构造方法呢？\",\"t\":[\"HashMap里哈希构造函数的方法叫：\",\"除留取余法：H（key)=key%p（p<=N）,关键字除以一个不大于哈希表长度的正整数p，所得余数为地址，当然HashMap里进行了优化改造，效率更高，散列也更均衡。\",\"除此之外，还有这几种常见的哈希函数构造方法：\",\"直接定址法\",\"直接根据key来映射到对应的数组位置，例如1232放到下标1232的位置。\",\"数字分析法\",\"取key的某些数字（例如十位和百位）作为映射的位置\",\"平方取中法\",\"取key平方的中间几位作为映射的位置\",\"折叠法\",\"将key分割成位数相同的几段，然后把它们的叠加和作为映射的位置\"]},\"171\":{\"h\":\"18.解决哈希冲突有哪些方法呢？\",\"t\":[\"我们到现在已经知道，HashMap使用链表的原因为了处理哈希冲突，这种方法就是所谓的：\",\"链地址法：在冲突的位置拉一个链表，把冲突的元素放进去。\",\"除此之外，还有一些常见的解决冲突的办法：\",\"开放定址法：开放定址法就是从冲突的位置再接着往下找，给冲突元素找个空位。\",\"找到空闲位置的方法也有很多种：\",\"线行探查法: 从冲突的位置开始，依次判断下一个位置是否空闲，直至找到空闲位置\",\"平方探查法: 从冲突的位置x开始，第一次增加1^2个位置，第二次增加2^2…，直至找到空闲的位置\",\"……\",\"再哈希法：换种哈希函数，重新计算冲突元素的地址。\",\"建立公共溢出区：再建一个数组，把冲突的元素放进去。\"]},\"172\":{\"h\":\"19.为什么HashMap链表转红黑树的阈值为8呢？\",\"t\":[\"树化发生在table数组的长度大于64，且链表的长度大于8的时候。\",\"为什么是8呢？源码的注释也给出了答案。\",\"红黑树节点的大小大概是普通节点大小的两倍，所以转红黑树，牺牲了空间换时间，更多的是一种兜底的策略，保证极端情况下的查找效率。\",\"阈值为什么要选8呢？和统计学有关。理想情况下，使用随机哈希码，链表里的节点符合泊松分布，出现节点个数的概率是递减的，节点个数为8的情况，发生概率仅为0.00000006。\",\"至于红黑树转回链表的阈值为什么是6，而不是8？是因为如果这个阈值也设置成8，假如发生碰撞，节点增减刚好在8附近，会发生链表和红黑树的不断转换，导致资源浪费。\"]},\"173\":{\"h\":\"20.扩容在什么时候呢？为什么扩容因子是0.75？\",\"t\":[\"为了减少哈希冲突发生的概率，当当前HashMap的元素个数达到一个临界值的时候，就会触发扩容，把所有元素rehash之后再放在扩容后的容器中，这是一个相当耗时的操作。\",\"而这个临界值threshold就是由加载因子和当前容器的容量大小来确定的，假如采用默认的构造方法：\",\"临界值（threshold ）= 默认容量（DEFAULT_INITIAL_CAPACITY） * 默认扩容因子（DEFAULT_LOAD_FACTOR）\",\"那就是大于16x0.75=12时，就会触发扩容操作。\",\"那么为什么选择了0.75作为HashMap的默认加载因子呢？\",\"简单来说，这是对空间成本和时间成本平衡的考虑。\",\"在HashMap中有这样一段注释：\",\"我们都知道，HashMap的散列构造方式是Hash取余，负载因子决定元素个数达到多少时候扩容。\",\"假如我们设的比较大，元素比较多，空位比较少的时候才扩容，那么发生哈希冲突的概率就增加了，查找的时间成本就增加了。\",\"我们设的比较小的话，元素比较少，空位比较多的时候就扩容了，发生哈希碰撞的概率就降低了，查找时间成本降低，但是就需要更多的空间去存储元素，空间成本就增加了。\"]},\"174\":{\"h\":\"21.那扩容机制了解吗？\",\"t\":[\"HashMap是基于数组+链表和红黑树实现的，但用于存放key值的桶数组的长度是固定的，由初始化参数确定。\",\"那么，随着数据的插入数量增加以及负载因子的作用下，就需要扩容来存放更多的数据。而扩容中有一个非常重要的点，就是jdk1.8中的优化操作，可以不需要再重新计算每一个元素的哈希值。\",\"因为HashMap的初始容量是2的次幂，扩容之后的长度是原来的二倍，新的容量也是2的次幂，所以，元素，要么在原位置，要么在原位置再移动2的次幂。\",\"看下这张图，n为table的长度，图a表示扩容前的key1和key2两种key确定索引的位置，图b表示扩容后key1和key2两种key确定索引位置。\",\"元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：\",\"所以在扩容时，只需要看原来的hash值新增的那一位是0还是1就行了，是0的话索引没变，是1的化变成原索引+oldCap，看看如16扩容为32的示意图：\",\"扩容节点迁移主要逻辑：\"]},\"175\":{\"h\":\"22.jdk1.8对HashMap主要做了哪些优化呢？为什么？\",\"t\":[\"jdk1.8 的HashMap主要有五点优化：\",\"数据结构：数组 + 链表改成了数组 + 链表或红黑树\",\"原因：发生 hash 冲突，元素会存入链表，链表过长转为红黑树，将时间复杂度由O(n)降为O(logn)\",\"链表插入方式：链表的插入方式从头插法改成了尾插法\",\"简单说就是插入时，如果数组位置上已经有元素，1.7 将新元素放到数组中，原始节点作为新节点的后继节点，1.8 遍历链表，将元素放置到链表的最后。\",\"原因：因为 1.7 头插法扩容时，头插法会使链表发生反转，多线程环境下会产生环。\",\"扩容rehash：扩容的时候 1.7 需要对原数组中的元素进行重新 hash 定位在新数组的位置，1.8 采用更简单的判断逻辑，不需要重新通过哈希函数计算位置，新的位置不变或索引 + 新增容量大小。\",\"原因：提高扩容的效率，更快地扩容。\",\"扩容时机：在插入时，1.7 先判断是否需要扩容，再插入，1.8 先进行插入，插入完成再判断是否需要扩容；\",\"散列函数：1.7 做了四次移位和四次异或，jdk1.8只做一次。\",\"原因：做 4 次的话，边际效用也不大，改为一次，提升效率。\"]},\"176\":{\"h\":\"23.你能自己设计实现一个HashMap吗？\",\"t\":[\"这道题快手常考。\",\"不要慌，红黑树版咱们多半是写不出来，但是数组+链表版还是问题不大的，详细可见： 手写HashMap，快手面试官直呼内行！。\",\"整体的设计：\",\"散列函数：hashCode()+除留余数法\",\"冲突解决：链地址法\",\"扩容：节点重新hash获取位置\",\"完整代码：\"]},\"177\":{\"h\":\"24.HashMap 是线程安全的吗？多线程下会有什么问题？\",\"t\":[\"HashMap不是线程安全的，可能会发生这些问题：\",\"多线程下扩容死循环。JDK1.7 中的 HashMap 使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致环形链表的出现，形成死循环。因此，JDK1.8 使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题。\",\"多线程的 put 可能导致元素的丢失。多线程同时执行 put 操作，如果计算出来的索引位置是相同的，那会造成前一个 key 被后一个 key 覆盖，从而导致元素的丢失。此问题在 JDK 1.7 和 JDK 1.8 中都存在。\",\"put 和 get 并发时，可能导致 get 为 null。线程 1 执行 put 时，因为元素个数超出 threshold 而导致 rehash，线程 2 此时执行 get，有可能导致这个问题。这个问题在 JDK 1.7 和 JDK 1.8 中都存在。\"]},\"178\":{\"h\":\"25.有什么办法能解决HashMap线程不安全的问题呢？\",\"t\":[\"Java 中有 HashTable、Collections.synchronizedMap、以及 ConcurrentHashMap 可以实现线程安全的 Map。\",\"HashTable 是直接在操作方法上加 synchronized 关键字，锁住整个table数组，粒度比较大；\",\"Collections.synchronizedMap 是使用 Collections 集合工具的内部类，通过传入 Map 封装出一个 SynchronizedMap 对象，内部定义了一个对象锁，方法内通过对象锁实现；\",\"ConcurrentHashMap 在jdk1.7中使用分段锁，在jdk1.8中使用CAS+synchronized。\"]},\"179\":{\"h\":\"26.能具体说一下ConcurrentHashmap的实现吗？\",\"t\":[\"ConcurrentHashmap线程安全在jdk1.7版本是基于分段锁实现，在jdk1.8是基于CAS+synchronized实现。\"]},\"180\":{\"h\":\"1.7分段锁\",\"t\":[\"从结构上说，1.7版本的ConcurrentHashMap采用分段锁机制，里面包含一个Segment数组，Segment继承于ReentrantLock，Segment则包含HashEntry的数组，HashEntry本身就是一个链表的结构，具有保存key、value的能力能指向下一个节点的指针。\",\"实际上就是相当于每个Segment都是一个HashMap，默认的Segment长度是16，也就是支持16个线程的并发写，Segment之间相互不会受到影响。\",\"put流程\",\"整个流程和HashMap非常类似，只不过是先定位到具体的Segment，然后通过ReentrantLock去操作而已，后面的流程，就和HashMap基本上是一样的。\",\"计算hash，定位到segment，segment如果是空就先初始化\",\"使用ReentrantLock加锁，如果获取锁失败则尝试自旋，自旋超过次数就阻塞获取，保证一定获取锁成功\",\"遍历HashEntry，就是和HashMap一样，数组中key和hash一样就直接替换，不存在就再插入链表，链表同样操作\",\"get流程\",\"get也很简单，key通过hash定位到segment，再遍历链表定位到具体的元素上，需要注意的是value是volatile的，所以get是不需要加锁的。\"]},\"181\":{\"h\":\"1.8 CAS+synchronized\",\"t\":[\"jdk1.8实现线程安全不是在数据结构上下功夫，它的数据结构和HashMap是一样的，数组+链表+红黑树。它实现线程安全的关键点在于put流程。\",\"put流程\",\"首先计算hash，遍历node数组，如果node是空的话，就通过CAS+自旋的方式初始化\",\" tab = initTable(); \",\"node数组初始化：\",\"private final Node<K,V>[] initTable() { Node<K,V>[] tab; int sc; while ((tab = table) == null || tab.length == 0) { //如果正在初始化或者扩容 if ((sc = sizeCtl) < 0) //等待 Thread.yield(); // lost initialization race; just spin else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) { //CAS操作 try { if ((tab = table) == null || tab.length == 0) { int n = (sc > 0) ? sc : DEFAULT_CAPACITY; @SuppressWarnings(\\\"unchecked\\\") Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n]; table = tab = nt; sc = n - (n >>> 2); } } finally { sizeCtl = sc; } break; } } return tab; } \",\"2.如果当前数组位置是空则直接通过CAS自旋写入数据\",\"static final <K,V> boolean casTabAt(Node<K,V>[] tab, int i, Node<K,V> c, Node<K,V> v) { return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v); } \",\"如果hash==MOVED，说明需要扩容，执行扩容\",\"else if ((fh = f.hash) == MOVED) tab = helpTransfer(tab, f); \",\"final Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) { Node<K,V>[] nextTab; int sc; if (tab != null && (f instanceof ForwardingNode) && (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) { int rs = resizeStamp(tab.length); while (nextTab == nextTable && table == tab && (sc = sizeCtl) < 0) { if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || transferIndex <= 0) break; if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) { transfer(tab, nextTab); break; } } return nextTab; } return table; } \",\"如果都不满足，就使用synchronized写入数据，写入数据同样判断链表、红黑树，链表写入和HashMap的方式一样，key hash一样就覆盖，反之就尾插法，链表长度超过8就转换成红黑树\",\" synchronized (f){ …… } \",\"get查询\",\"get很简单，和HashMap基本相同，通过key计算位置，table该位置key相同就返回，如果是红黑树按照红黑树获取，否则就遍历链表获取。\"]},\"182\":{\"h\":\"27.HashMap 内部节点是有序的吗？\",\"t\":[\"HashMap是无序的，根据 hash 值随机插入。如果想使用有序的Map，可以使用LinkedHashMap 或者 TreeMap。\"]},\"183\":{\"h\":\"28.讲讲 LinkedHashMap 怎么实现有序的？\",\"t\":[\"LinkedHashMap维护了一个双向链表，有头尾节点，同时 LinkedHashMap 节点 Entry 内部除了继承 HashMap 的 Node 属性，还有 before 和 after 用于标识前置节点和后置节点。\",\"可以实现按插入的顺序或访问顺序排序。\"]},\"184\":{\"h\":\"29.讲讲 TreeMap 怎么实现有序的？\",\"t\":[\"TreeMap 是按照 Key 的自然顺序或者 Comprator 的顺序进行排序，内部是通过红黑树来实现。所以要么 key 所属的类实现 Comparable 接口，或者自定义一个实现了 Comparator 接口的比较器，传给 TreeMap 用于 key 的比较。\"]},\"185\":{\"h\":\"Set\",\"t\":[\"Set面试没啥好问的，拿HashSet来凑个数。\"]},\"186\":{\"h\":\"30.讲讲HashSet的底层实现？\",\"t\":[\"HashSet 底层就是基于 HashMap 实现的。（ HashSet 的源码⾮常⾮常少，因为除了 clone() 、 writeObject() 、 readObject() 是 HashSet⾃⼰不得不实现之外，其他⽅法都是直接调⽤ HashMap 中的⽅法。\",\"HashSet的add方法，直接调用HashMap的put方法，将添加的元素作为key，new一个Object作为value，直接调用HashMap的put方法，它会根据返回值是否为空来判断是否插入元素成功。\",\"public boolean add(E e) { return map.put(e, PRESENT)==null; } \",\"而在HashMap的putVal方法中，进行了一系列判断，最后的结果是，只有在key在table数组中不存在的时候，才会返回插入的值。\",\"if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } \",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"图文详解 30 道Java集合框架面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"187\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"7200 字 38 张手绘图，详解 30 道 Java 集合框架面试高频题（让天下没有难背的八股），面渣背会这些 Java 容器八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/collection.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"7200 字 38 张手绘图，详解 30 道 Java 集合框架面试高频题（让天下没有难背的八股），面渣背会这些 Java 容器八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"188\":{\"h\":\"\",\"t\":[\"8800 字 25 张手绘图，详解 12 道分布式面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"189\":{\"h\":\"分布式理论\"},\"190\":{\"h\":\"1. 说说CAP原则？\",\"t\":[\"CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）这3个基本需求，最多只能同时满足其中的2个。\",\"选项\",\"描述\",\"Consistency（一致性）\",\"指数据在多个副本之间能够保持一致的特性（严格的一致性）\",\"Availability（可用性）\",\"指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据）\",\"Partition tolerance（分区容错性）\",\"分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障\"]},\"191\":{\"h\":\"2. 为什么CAP不可兼得呢？\",\"t\":[\"首先对于分布式系统，分区是必然存在的，所谓分区指的是分布式系统可能出现的字区域网络不通，成为孤立区域的的情况。\",\"那么分区容错性（P）就必须要满足，因为如果要牺牲分区容错性，就得把服务和资源放到一个机器，或者一个“同生共死”的集群，那就违背了分布式的初衷。\",\"那么满足分区容错的基础上，能不能同时满足一致性和可用性？\",\"假如现在有两个分区N1和N2，N1和N2分别有不同的分区存储D1和D2，以及不同的服务S1和S2。\",\"在满足一致性 的时候，N1和N2的数据要求值一样的，D1=D2。\",\"在满足可用性的时候，无论访问N1还是N2，都能获取及时的响应。\",\"假如现在有这样的场景：\",\"用户访问了N1，修改了D1的数据。\",\"用户再次访问，请求落在了N2。此时D1和D2的数据不一致。\",\"接下来：\",\"保证一致性：此时D1和D2数据不一致，要保证一致性就不能返回不一致的数据，可用性无法保证。\",\"保证可用性：立即响应，可用性得到了保证，但是此时响应的数据和D1不一致，一致性无法保证。\",\"所以，可以看出，分区容错的前提下，一致性和可用性是矛盾的。\"]},\"192\":{\"h\":\"3. CAP对应的模型和应用？\",\"t\":[\"CA without P\",\"理论上放弃P（分区容错性），则C（强一致性）和A（可用性）是可以保证的。实际上分区是不可避免的，严格上CA指的是允许分区后各子系统依然保持CA。\",\"CA模型的常见应用：\",\"集群数据库\",\"xFS文件系统\",\"CP without A\",\"放弃A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。\",\"CP模型的常见应用：\",\"分布式数据库\",\"分布式锁\",\"AP wihtout C\",\"要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。\",\"AP模型常见应用：\",\"Web缓存\",\"DNS\",\"举个大家更熟悉的例子，像我们熟悉的注册中心ZooKeeper、Eureka、Nacos中：\",\"ZooKeeper 保证的是 CP\",\"Eureka 保证的则是 AP\",\"Nacos 不仅支持 CP 也支持 AP\"]},\"193\":{\"h\":\"4. BASE理论了解吗？\",\"t\":[\"BASE（Basically Available、Soft state、Eventual consistency）是基于CAP理论逐步演化而来的，核心思想是即便不能达到强一致性（Strong consistency），也可以根据应用特点采用适当的方式来达到最终一致性（Eventual consistency）的效果。\",\"BASE的主要含义：\",\"Basically Available（基本可用）\",\"什么是基本可用呢？假设系统出现了不可预知的故障，但还是能用，只是相比较正常的系统而言，可能会有响应时间上的损失，或者功能上的降级。\",\"Soft State（软状态）\",\"什么是硬状态呢？要求多个节点的数据副本都是一致的，这是一种“硬状态”。\",\"软状态也称为弱状态，相比较硬状态而言，允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。\",\"Eventually Consistent（最终一致性）\",\"上面说了软状态，但是不应该一直都是软状态。在一定时间后，应该到达一个最终的状态，保证所有副本保持数据一致性，从而达到数据的最终一致性。这个时间取决于网络延时、系统负载、数据复制方案设计等等因素。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"194\":{\"h\":\"分布式锁\",\"t\":[\"单体时代，可以直接用本地锁来实现对竞争资源的加锁，分布式环境下就要用到分布式锁了。\"]},\"195\":{\"h\":\"5. 有哪些分布式锁的实现方案呢？\",\"t\":[\"常见的分布式锁实现方案有三种：MySQL分布式锁、ZooKepper分布式锁、Redis分布式锁。\"]},\"196\":{\"h\":\"5.1 MySQL分布式锁如何实现呢？\",\"t\":[\"用数据库实现分布式锁比较简单，就是创建一张锁表，数据库对字段作唯一性约束。\",\"加锁的时候，在锁表中增加一条记录即可；释放锁的时候删除记录就行。\",\"如果有并发请求同时提交到数据库，数据库会保证只有一个请求能够得到锁。\",\"这种属于数据库 IO 操作，效率不高，而且频繁操作会增大数据库的开销，因此这种方式在高并发、高性能的场景中用的不多。\"]},\"197\":{\"h\":\"5.2 ZooKeeper如何实现分布式锁？\",\"t\":[\"ZooKeeper也是常见分布式锁实现方法。\",\"ZooKeeper的数据节点和文件目录类似，例如有一个lock节点，在此节点下建立子节点是可以保证先后顺序的，即便是两个进程同时申请新建节点，也会按照先后顺序建立两个节点。\",\"所以我们可以用此特性实现分布式锁。以某个资源为目录，然后这个目录下面的节点就是我们需要获取锁的客户端，每个服务在目录下创建节点，如果它的节点，序号在目录下最小，那么就获取到锁，否则等待。释放锁，就是删除服务创建的节点。\",\"ZK实际上是一个比较重的分布式组件，实际上应用没那么多了，所以用ZK实现分布式锁，其实相对也比较少。\"]},\"198\":{\"h\":\"5.3 Redis怎么实现分布式锁？\",\"t\":[\"Redis实现分布式锁，是当前应用最广泛的分布式锁实现方式。\",\"Redis执行命令是单线程的，Redis实现分布式锁就是利用这个特性。\",\"实现分布式锁最简单的一个命令：setNx(set if not exist)，如果不存在则更新：\",\"setNx resourceName value \",\"加锁了之后如果机器宕机，那我这个锁就无法释放，所以需要加入过期时间，而且过期时间需要和setNx同一个原子操作，在Redis2.8之前需要用lua脚本，但是redis2.8之后redis支持nx和ex操作是同一原子操作。\",\"set resourceName value ex 5 nx \",\"Redission\",\"当然，一般生产中都是使用Redission客户端，非常良好地封装了分布式锁的api，而且支持RedLock。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"199\":{\"h\":\"分布式事务\"},\"200\":{\"h\":\"6.什么是分布式事务?\",\"t\":[\"分布式事务是相对本地事务而言的，对于本地事务，利用数据库本身的事务机制，就可以保证事务的ACID特性。\",\"而在分布式环境下，会涉及到多个数据库。\",\"分布式事务其实就是将对同一库事务的概念扩大到了对多个库的事务。目的是为了保证分布式系统中的数据一致性。\",\"分布式事务处理的关键是：\",\"需要记录事务在任何节点所做的所有动作；\",\"事务进行的所有操作要么全部提交，要么全部回滚。\"]},\"201\":{\"h\":\"7.分布式事务有哪些常见的实现方案？\",\"t\":[\"分布式常见的实现方案有 2PC、3PC、TCC、本地消息表、MQ消息事务、最大努力通知、SAGA事务 等等。\"]},\"202\":{\"h\":\"7.1 说说2PC两阶段提交？\",\"t\":[\"说到2PC，就不得先说分布式事务中的 XA 协议。\",\"在这个协议里，有三个角色：\",\"AP（Application）：应用系统（服务）\",\"TM（Transaction Manager）：事务管理器（全局事务管理）\",\"RM（Resource Manager）：资源管理器（数据库）\",\"XA协议采用两阶段提交方式来管理分布式事务。XA接口提供资源管理器与事务管理器之间进行通信的标准接口。\",\"两阶段提交的思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情况决定各参与者是否要提交操作还是回滚操作。\",\"准备阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交\",\"提交阶段：事务协调器要求每个数据库提交数据，或者回滚数据。\",\"优点：尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于MySQL是从5.5开始支持。\",\"缺点:\",\"单点问题：事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。\",\"同步阻塞：在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。\",\"数据不一致：两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。\"]},\"203\":{\"h\":\"7.2 3PC（三阶段提交）了解吗？\",\"t\":[\"三阶段提交（3PC）是二阶段提交（2PC）的一种改进版本 ，为解决两阶段提交协议的单点故障和同步阻塞问题。\",\"三阶段提交有这么三个阶段：CanCommit，PreCommit，DoCommit三个阶段\",\"CanCommit：准备阶段。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。\",\"PreCommit：预提交阶段。协调者根据参与者在准备阶段的响应判断是否执行事务还是中断事务，参与者执行完操作之后返回ACK响应，同时开始等待最终指令。\",\"DoCommit：提交阶段。协调者根据参与者在准备阶段的响应判断是否执行事务还是中断事务：\",\"如果所有参与者都返回正确的ACK响应，则提交事务\",\"如果参与者有一个或多个参与者收到错误的ACK响应或者超时，则中断事务\",\"如果参与者无法及时接收到来自协调者的提交或者中断事务请求时，在等待超时之后，会继续进行事务提交\",\"可以看出，三阶段提交解决的只是两阶段提交中单体故障和同步阻塞的问题，因为加入了超时机制，这里的超时的机制作用于 预提交阶段 和 提交阶段。如果等待 预提交请求 超时，参与者直接回到准备阶段之前。如果等到提交请求超时，那参与者就会提交事务了。\",\"无论是2PC还是3PC都不能保证分布式系统中的数据100%一致。\"]},\"204\":{\"h\":\"7.3 TCC了解吗？\",\"t\":[\"TCC（Try Confirm Cancel） ，是两阶段提交的一个变种，针对每个操作，都需要有一个其对应的确认和取消操作，当操作成功时调用确认操作，当操作失败时调用取消操作，类似于二阶段提交，只不过是这里的提交和回滚是针对业务上的，所以基于TCC实现的分布式事务也可以看做是对业务的一种补偿机制。\",\"Try：尝试待执行的业务。订单系统将当前订单状态设置为支付中，库存系统校验当前剩余库存数量是否大于1，然后将可用库存数量设置为库存剩余数量-1，。\",\"Confirm：确认执行业务，如果Try阶段执行成功，接着执行Confirm 阶段，将订单状态修改为支付成功，库存剩余数量修改为可用库存数量。\",\"Cancel：取消待执行的业务，如果Try阶段执行失败，执行Cancel 阶段，将订单状态修改为支付失败，可用库存数量修改为库存剩余数量。\",\"TCC 是业务层面的分布式事务，保证最终一致性，不会一直持有资源的锁。\",\"优点： 把数据库层的二阶段提交交给应用层来实现，规避了数据库的 2PC 性能低下问题\",\"缺点：TCC 的 Try、Confirm 和 Cancel 操作功能需业务提供，开发成本高。TCC 对业务的侵入较大和业务紧耦合，需要根据特定的场景和业务逻辑来设计相应的操作\"]},\"205\":{\"h\":\"7.4 本地消息表了解吗？\",\"t\":[\"本地消息表的核心思想是将分布式事务拆分成本地事务进行处理。\",\"例如，可以在订单库新增一个消息表，将新增订单和新增消息放到一个事务里完成，然后通过轮询的方式去查询消息表，将消息推送到MQ，库存服务去消费MQ。\",\"执行流程：\",\"订单服务，添加一条订单和一条消息，在一个事务里提交\",\"订单服务，使用定时任务轮询查询状态为未同步的消息表，发送到MQ，如果发送失败，就重试发送\",\"库存服务，接收MQ消息，修改库存表，需要保证幂等操作\",\"如果修改成功，调用rpc接口修改订单系统消息表的状态为已完成或者直接删除这条消息\",\"如果修改失败，可以不做处理，等待重试\",\"订单服务中的消息有可能由于业务问题会一直重复发送，所以为了避免这种情况可以记录一下发送次数，当达到次数限制之后报警，人工接入处理；库存服务需要保证幂等，避免同一条消息被多次消费造成数据不一致。\",\"本地消息表这种方案实现了最终一致性，需要在业务系统里增加消息表，业务逻辑中多一次插入的DB操作，所以性能会有损耗，而且最终一致性的间隔主要有定时任务的间隔时间决定\"]},\"206\":{\"h\":\"7.5 MQ消息事务了解吗？\",\"t\":[\"消息事务的原理是将两个事务通过消息中间件进行异步解耦。\",\"订单服务执行自己的本地事务，并发送MQ消息，库存服务接收消息，执行自己的本地事务，乍一看，好像跟本地消息表的实现方案类似，只是省去 了对本地消息表的操作和轮询发送MQ的操作，但实际上两种方案的实现是不一样的。\",\"消息事务一定要保证业务操作与消息发送的一致性，如果业务操作成功，这条消息也一定投递成功。\",\"执行流程：\",\"发送prepare消息到消息中间件\",\"发送成功后，执行本地事务\",\"如果事务执行成功，则commit，消息中间件将消息下发至消费端\",\"如果事务执行失败，则回滚，消息中间件将这条prepare消息删除\",\"消费端接收到消息进行消费，如果消费失败，则不断重试\",\"消息事务依赖于消息中间件的事务消息，例如我们熟悉的RocketMQ就支持事务消息（半消息），也就是只有收到发送方确定才会正常投递的消息。\",\"这种方案也是实现了最终一致性，对比本地消息表实现方案，不需要再建消息表，对性能的损耗和业务的入侵更小。\"]},\"207\":{\"h\":\"7.6 最大努力通知了解吗？\",\"t\":[\"最大努力通知相比实现会简单一些，适用于一些对最终一致性实时性要求没那么高的业务，比如支付通知，短信通知。\",\"以支付通知为例，业务系统调用支付平台进行支付，支付平台进行支付，进行操作支付之后支付平台会去同步通知业务系统支付操作是否成功，如果不成功，会一直异步重试，但是会有一个最大通知次数，如果超过这个次数后还是通知失败，就不再通知，业务系统自行调用支付平台提供一个查询接口，供业务系统进行查询支付操作是否成功。\",\"执行流程：\",\"业务系统调用支付平台支付接口， 并在本地进行记录，支付状态为支付中\",\"支付平台进行支付操作之后，无论成功还是失败，同步给业务系统一个结果通知\",\"如果通知一直失败则根据重试规则异步进行重试，达到最大通知次数后，不再通知\",\"支付平台提供查询订单支付操作结果接口\",\"业务系统根据一定业务规则去支付平台查询支付结果\"]},\"208\":{\"h\":\"8.你们用什么？能说一下Seata吗？\",\"t\":[\"我们用比较常用的是Seata——自己去实现分布式事务调度还是比较麻烦的。\",\"Seata 的设计目标是对业务无侵入，因此它是从业务无侵入的两阶段提交（全局事务）着手，在传统的两阶段上进行改进，他把一个分布式事务理解成一个包含了若干分支事务的全局事务。而全局事务的职责是协调它管理的分支事务达成一致性，要么一起成功提交，要么一起失败回滚。也就是一荣俱荣一损俱损~\",\"Seata 中存在这么几种重要角色：\",\"TC（Transaction Coordinator）：事务协调者。管理全局的分支事务的状态，用于全局性事务的提交和回滚。\",\"TM（Transaction Manager）：事务管理者。用于开启、提交或回滚事务。\",\"RM（Resource Manager）：资源管理器。用于分支事务上的资源管理，向 TC 注册分支事务，上报分支事务的状态，接收 TC 的命令来提交或者回滚分支事务。\",\"S'eata整体执行流程：\",\"服务A中的 TM 向 TC 申请开启一个全局事务，TC 就会创建一个全局事务并返回一个唯一的 XID\",\"服务A中的 RM 向 TC 注册分支事务，然后将这个分支事务纳入 XID 对应的全局事务管辖中\",\"服务A开始执行分支事务\",\"服务A开始远程调用B服务，此时 XID 会根据调用链传播\",\"服务B中的 RM 也向 TC 注册分支事务，然后将这个分支事务纳入 XID 对应的全局事务管辖中\",\"服务B开始执行分支事务\",\"全局事务调用处理结束后，TM 会根据有误异常情况，向 TC 发起全局事务的提交或回滚\",\"TC 协调其管辖之下的所有分支事务，决定是提交还是回滚\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"209\":{\"h\":\"分布式一致性算法\"},\"210\":{\"h\":\"9.分布式算法paxos了解么 ？\",\"t\":[\"Paxos 有点类似前面说的 2PC，3PC，但比这两种算法更加完善。在很多多大厂都得到了工程实践，比如阿里的 OceanBase 的 分布式数据库， Google 的 chubby分布式锁 。\"]},\"211\":{\"h\":\"Paxos算法是什么？\",\"t\":[\"Paxos 算法是 基于消息传递 且具有 高效容错特性 的一致性算法，目前公认的解决 分布式一致性问题 最有效的算法之一。\"]},\"212\":{\"h\":\"Paxos算法的工作流程？\"},\"213\":{\"h\":\"角色\",\"t\":[\"在Paxos中有这么几个角色：\",\"Proposer（提议者） : 提议者提出提案，用于投票表决。\",\"Accecptor（接受者） : 对提案进行投票，并接受达成共识的提案。\",\"Learner（学习者） : 被告知投票的结果，接受达成共识的提案。\",\"在实际中，一个节点可以同时充当不同角色。\",\"提议者提出提案，提案=编号+value，可以表示为[M,V]，每个提案都有唯一编号，而且编号的大小是趋势递增的。\"]},\"214\":{\"h\":\"算法流程\",\"t\":[\"Paxos算法包含两个阶段，第一阶段 Prepare(准备) 、第二阶段 Accept(接受) 。\"]},\"215\":{\"h\":\"Prepare(准备)阶段\",\"t\":[\"提议者提议一个新的提案 P[Mn,?]，然后向接受者的某个超过半数的子集成员发送编号为Mn的准备请求\",\"如果一个接受者收到一个编号为Mn的准备请求，并且编号Mn大于它已经响应的所有准备请求的编号，那么它就会将它已经批准过的最大编号的提案作为响应反馈给提议者，同时该接受者会承诺不会再批准任何编号小于Mn的提案。\",\"总结一下，接受者在收到提案后，会给与提议者两个承诺与一个应答：\",\"两个承诺：\",\"承诺不会再接受提案号小于或等于 Mn 的 Prepare 请求\",\"承诺不会再接受提案号小于Mn 的 Accept 请求\",\"一个应答：\",\"不违背以前作出的承诺的前提下，回复已经通过的提案中提案号最大的那个提案所设定的值和提案号Mmax，如果这个值从来没有被任何提案设定过，则返回空值。如果不满足已经做出的承诺，即收到的提案号并不是决策节点收到过的最大的，那允许直接对此 Prepare 请求不予理会。\"]},\"216\":{\"h\":\"Accept(接受)阶段\",\"t\":[\"如果提议者收到来自半数以上的接受者对于它发出的编号为Mn的准备请求的响应，那么它就会发送一个针对[Mn,Vn]的接受请求给接受者，注意Vn的值就是收到的响应中编号最大的提案的值，如果响应中不包含任何提案，那么它可以随意选定一个值。\",\"如果接受者收到这个针对[Mn,Vn]提案的接受请求，只要该接受者尚未对编号大于Mn的准备请求做出响应，它就可以通过这个提案。\",\"当提议者收到了多数接受者的接受应答后，协商结束，共识决议形成，将形成的决议发送给所有学习节点进行学习。\",\"所以Paxos算法的整体详细流程如下：\"]},\"217\":{\"h\":\"Paxos算法有什么缺点吗？怎么优化？\",\"t\":[\"前面描述的可以称之为Basic Paxos 算法，在单提议者的前提下是没有问题的，但是假如有多个提议者互不相让，那么就可能导致整个提议的过程进入了死循环。\",\"Lamport 提出了 Multi Paxos 的算法思想。\",\"Multi Paxos算法思想，简单说就是在多个提议者的情况下，选出一个Leader（领导者），由领导者作为唯一的提议者，这样就可以解决提议者冲突的问题。\"]},\"218\":{\"h\":\"10.说说Raft算法？\"},\"219\":{\"h\":\"Raft算法是什么？\",\"t\":[\"Raft 也是一个 一致性算法，和 Paxos 目标相同。但它还有另一个名字 - 易于理解的一致性算法。Paxos 和 Raft 都是为了实现 一致性 产生的。这个过程如同选举一样，参选者 需要说服 大多数选民 (Server) 投票给他，一旦选定后就跟随其操作。Paxos 和 Raft 的区别在于选举的 具体过程 不同。\"]},\"220\":{\"h\":\"Raft算法的工作流程？\"},\"221\":{\"h\":\"Raft算法的角色\",\"t\":[\"Raft 协议将 Server 进程分为三种角色：\",\"Leader（领导者）\",\"Follower（跟随者）\",\"Candidate（候选人）\",\"就像一个民主社会，领导者由跟随者投票选出。刚开始没有 领导者，所有集群中的 参与者 都是 跟随者。\",\"那么首先开启一轮大选。在大选期间 所有跟随者 都能参与竞选，这时所有跟随者的角色就变成了 候选人，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除 领导者 的 候选人 又变回 跟随者 服从领导者领导。\",\"这里提到一个概念 「任期」，用术语 Term 表达。\",\"三类角色的变迁图如下：\"]},\"222\":{\"h\":\"Leader选举过程\",\"t\":[\"Raft 使用心跳（heartbeat）触发Leader选举。当Server启动时，初始化为Follower。Leader向所有Followers周期性发送heartbeat。如果Follower在选举超时时间内没有收到Leader的heartbeat，就会等待一段随机的时间后发起一次Leader选举。\",\"Follower将其当前term加一然后转换为Candidate。它首先给自己投票并且给集群中的其他服务器发送 RequestVote RPC 。结果有以下三种情况：\",\"赢得了多数（超过1/2）的选票，成功选举为Leader；\",\"收到了Leader的消息，表示有其它服务器已经抢先当选了Leader；\",\"没有Server赢得多数的选票，Leader选举失败，等待选举时间超时（Election Timeout）后发起下一次选举。\",\"选出 Leader 后，Leader 通过 定期 向所有 Follower 发送 心跳信息 维持其统治。若 Follower 一段时间未收到 Leader 的 心跳，则认为 Leader 可能已经挂了，然后再次发起 选举 过程。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"223\":{\"h\":\"分布式设计\"},\"224\":{\"h\":\"11.说说什么是幂等性？\",\"t\":[\"什么是幂等性？\",\"幂等性是一个数学概念，用在接口上：用在接口上就可以理解为：同一个接口，多次发出同一个请求，请求的结果是一致的。\",\"简单说，就是多次调用如一次。\",\"什么是幂等性问题？\",\"在系统的运行中，可能会出现这样的问题：\",\"用户在填写某些form表单时，保存按钮不小心快速点了两次，表中竟然产生了两条重复的数据，只是id不一样。\",\"开发人员在项目中为了解决接口超时问题，通常会引入了重试机制。第一次请求接口超时了，请求方没能及时获取返回结果（此时有可能已经成功了），于是会对该请求重试几次，这样也会产生重复的数据。\",\"mq消费者在读取消息时，有时候会读取到重复消息，也会产生重复的数据。\",\"这些都是常见的幂等性问题。\",\"在分布式系统里，只要下游服务有写（保存、更新）的操作，都有可能会产生幂等性问题。\",\"PS:幂等和防重有些不同，防重强调的防止数据重复，幂等强调的是多次调用如一次，防重包含幂等。\"]},\"225\":{\"h\":\"怎么保证接口幂等性？\",\"t\":[\"insert前先select\",\"在保存数据的接口中，在insert前，先根据requestId等字段先select一下数据。如果该数据已存在，则直接返回，如果不存在，才执行 insert操作。\",\"加唯一索引\",\"加唯一索引是个非常简单但很有效的办法，如果重复插入数据的话，就会抛出异常，为了保证幂等性，一般需要捕获这个异常。\",\"如果是java程序需要捕获：DuplicateKeyException异常，如果使用了spring框架还需要捕获：MySQLIntegrityConstraintViolationException异常。\",\"加悲观锁\",\"更新逻辑，比如更新用户账户余额，可以加悲观锁，把对应用户的哪一行数据锁住。同一时刻只允许一个请求获得锁，其他请求则等待。\",\"select * from user id=123 for update; \",\"这种方式有一个缺点，获取不到锁的请求一般只能报失败，比较难保证接口返回相同值。\",\"加乐观锁\",\"更新逻辑，也可以用乐观锁，性能更好。可以在表中增加一个timestamp或者version字段，例如version:\",\"在更新前，先查询一下数据，将version也作为更新的条件，同时也更新version：\",\"update user set amount=amount+100,version=version+1 where id=123 and version=1; \",\"更新成功后，version增加，重复更新请求进来就无法更新了。\",\"建防重表\",\"有时候表中并非所有的场景都不允许产生重复的数据，只有某些特定场景才不允许。这时候，就可以使用防重表的方式。\",\"例如消息消费中，创建防重表，存储消息的唯一ID，消费时先去查询是否已经消费，已经消费直接返回成功。\",\"状态机\",\"有些业务表是有状态的，比如订单表中有：1-下单、2-已支付、3-完成、4-撤销等状态，可以通过限制状态的流动来完成幂等。\",\"分布式锁\",\"直接在数据库上加锁的做法性能不够友好，可以使用分布式锁的方式，目前最流行的分布式锁实现是通过Redis，具体实现一般都是使用Redission框架。\",\"token机制\",\"请求接口之前，需要先获取一个唯一的token，再带着这个token去完成业务操作，服务端根据这个token是否存在，来判断是否是重复的请求。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"226\":{\"h\":\"分布式限流\"},\"227\":{\"h\":\"12.你了解哪些限流算法？\",\"t\":[\"计数器\",\"计数器比较简单粗暴，比如我们要限制1s能够通过的请求数，实现的思路就是从第一个请求进来开始计时，在接下来的1s内，每个请求进来请求数就+1，超过最大请求数的请求会被拒绝，等到1s结束后计数清零，重新开始计数。\",\"这种方式有个很大的弊端：比如前10ms已经通过了最大的请求数，那么后面的990ms的请求只能拒绝，这种现象叫做“突刺现象”。\",\"漏桶算法\",\"就是桶底出水的速度恒定，进水的速度可能快慢不一，但是当进水量大于出水量的时候，水会被装在桶里，不会直接被丢弃；但是桶也是有容量限制的，当桶装满水后溢出的部分还是会被丢弃的。\",\"算法实现：可以准备一个队列来保存暂时处理不了的请求，然后通过一个线程池定期从队列中获取请求来执行。\",\"令牌桶算法\",\"令牌桶就是生产访问令牌的一个地方，生产的速度恒定，用户访问的时候当桶中有令牌时就可以访问，否则将触发限流。\",\"实现方案：Guava RateLimiter限流\",\"Guava RateLimiter是一个谷歌提供的限流，其基于令牌桶算法，比较适用于单实例的系统。\",\"这一期的分布式面试题就整理到这里了，主要是偏理论的一些问题，分布式其实是个很大的类型，比如分布式调用、分布式治理……\",\"所以，这篇文章只是个开始，后面还会有分布式调用（RPC）、微服务相关的主题文章，敬请期待。\",\"图文详解 12 道分布式面试高频题，这次面试，一定吊打面试官，整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"228\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"8800 字 25 张手绘图，详解 12 道分布式面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/fenbushi.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"8800 字 25 张手绘图，详解 12 道分布式面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"229\":{\"h\":\"\",\"t\":[\"1.3 万字 44 张手绘图，详解53道Java基础面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接 ，作者：三分恶，戳原文链接。\"]},\"230\":{\"h\":\"Java 概述\"},\"231\":{\"h\":\"1.什么是 Java？\",\"t\":[\"PS：碎怂 Java，有啥好介绍的。哦，面试啊。\",\"Java 是一门面向对象的编程语言，不仅吸收了 C++语言的各种优点，还摒弃了 C++里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。\"]},\"232\":{\"h\":\"2.Java 语言有哪些特点？\",\"t\":[\"Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：\",\"面向对象（封装，继承，多态）；\",\"平台无关性，平台无关性的具体表现在于，Java 是“一次编写，到处运行（Write Once，Run any Where）”的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。\",\"支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；\",\"编译与解释并存；\"]},\"233\":{\"h\":\"3.JVM、JDK 和 JRE 有什么区别？\",\"t\":[\"JVM：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。\",\"JRE： Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。\",\"JDK: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\",\"简单来说，JDK 包含 JRE，JRE 包含 JVM。\"]},\"234\":{\"h\":\"4.说说什么是跨平台性？原理是什么\",\"t\":[\"所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。\",\"实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。\"]},\"235\":{\"h\":\"5.什么是字节码？采用字节码的好处是什么?\",\"t\":[\"所谓的字节码，就是 Java 程序经过编译之类产生的.class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。\",\"Java 程序从源代码到运行主要有三步：\",\"编译：将我们的代码（.java）编译成虚拟机可以识别理解的字节码(.class)\",\"解释：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码\",\"执行：对应的机器执行二进制机器码\",\"只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。\"]},\"236\":{\"h\":\"6.为什么说 Java 语言“编译与解释并存”？\",\"t\":[\"高级编程语言按照程序的执行方式分为编译型和解释型两种。\",\"简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。\",\"比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。\",\"Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（\\\\*.class 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言编译与解释并存。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"237\":{\"h\":\"基础语法\"},\"238\":{\"h\":\"7.Java 有哪些数据类型？\",\"t\":[\"定义：Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。\",\"Java 语言数据类型分为两种：基本数据类型和引用数据类型。\",\"基本数据类型：\",\"数值型 \",\"整数类型（byte、short、int、long）\",\"浮点类型（float、double）\",\"字符型（char）\",\"布尔型（boolean）\",\"Java 基本数据类型范围和默认值：\",\"基本类型\",\"位数\",\"字节\",\"默认值\",\"int\",\"32\",\"4\",\"0\",\"short\",\"16\",\"2\",\"0\",\"long\",\"64\",\"8\",\"0L\",\"byte\",\"8\",\"1\",\"0\",\"char\",\"16\",\"2\",\"'u0000'\",\"float\",\"32\",\"4\",\"0f\",\"double\",\"64\",\"8\",\"0d\",\"boolean\",\"1\",\"false\",\"引用数据类型：\",\"类（class）\",\"接口（interface）\",\"数组([])\"]},\"239\":{\"h\":\"8.自动类型转换、强制类型转换？看看这几行代码？\",\"t\":[\"Java 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。\",\"这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。\",\"float f=3.4，对吗？\",\"不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f =(float)3.4; 或者写成float f =3.4F\",\"short s1 = 1; s1 = s1 + 1；对吗？short s1 = 1; s1 += 1;对吗？\",\"对于 short s1 = 1; s1 = s1 + 1;编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。\",\"而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short(s1 + 1);其中有隐含的强制类型转换。\"]},\"240\":{\"h\":\"9.什么是自动拆箱/封箱？\",\"t\":[\"装箱：将基本类型用它们对应的引用类型包装起来；\",\"拆箱：将包装类型转换为基本数据类型；\",\"Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。\",\"举例：\",\"Integer i=10; //装箱 int n=i; //拆箱 \"]},\"241\":{\"h\":\"10.&和&&有什么区别？\",\"t\":[\"&运算符有两种用法：短路与、逻辑与。\",\"&&运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。\",\"&&之所以称为短路运算是因为，如果&&左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&&而不是&。\",\"例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为username != null &&!username.equals(\\\"\\\")，二者的顺序不能交换，更不能用&运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。\",\"注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\"]},\"242\":{\"h\":\"11.switch 是否能作用在 byte/long/String 上？\",\"t\":[\"Java5 以前 switch(expr)中，expr 只能是 byte、short、char、int。\",\"从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。\",\"从 Java 7 开始，expr 还可以是字符串(String)，但是长整型(long)在目前所有的版本中都是不可以的。\"]},\"243\":{\"h\":\"12.break ,continue ,return 的区别及作用？\",\"t\":[\"break 跳出整个循环，不再执行循环(结束当前的循环体)\",\"continue 跳出本次循环，继续执行下次循环(结束正在执行的循环 进入下一个循环条件)\",\"return 程序返回，不再执行下面的代码(结束当前的方法 直接返回)\"]},\"244\":{\"h\":\"13.用最有效率的方法计算 2 乘以 8？\",\"t\":[\"2 << 3。位运算，数字的二进制位左移三位相当于乘以 2 的三次方。\"]},\"245\":{\"h\":\"14.说说自增自减运算？看下这几个代码运行结果？\",\"t\":[\"在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。\",\"++和--运算符可以放在变量之前，也可以放在变量之后。\",\"当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。\",\"例如，当 b = ++a 时，先自增（自己增加 1），再赋值（赋值给 b）；当 b = a++ 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。\",\"用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。\",\"看一下这段代码运行结果？\",\"int i=1; i=i++; System.out.println(i); \",\"答案是 1。有点离谱对不对。\",\"对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。\",\"相当于这样的代码：\",\"int i=1； int temp=i; i++； i=temp; System.out.println(i); \",\"这段代码会输出什么？\",\"int count=0; for(int i=0;i< 100;i++) { count=count++; } System.out.println(\\\"count = \\\"+count); \",\"答案是 0。\",\"和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。\",\"int autoAdd(int count) { int temp=count; count=coutn+1; return temp; } \",\"PS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"246\":{\"h\":\"面向对象\"},\"247\":{\"h\":\"15.⾯向对象和⾯向过程的区别?\",\"t\":[\"⾯向过程 ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。\",\"⾯向对象 ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。 目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。\",\"用一个比喻：面向过程是编年体；面向对象是纪传体。\"]},\"248\":{\"h\":\"16.面向对象有哪些特性\",\"t\":[\"封装\",\"封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。\",\"继承\",\"继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。\",\"关于继承有以下三个要点：\",\"⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。\",\"⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。\",\"⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。\",\"多态\",\"所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定， 即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。\",\"在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。\"]},\"249\":{\"h\":\"17.重载（overload）和重写（override）的区别？\",\"t\":[\"方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。\",\"重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；\",\"重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。\",\"方法重载的规则：\",\"方法名一致，参数列表中参数的顺序，类型，个数不同。\",\"重载与方法的返回值无关，存在于父类和子类，同类中。\",\"可以抛出不同的异常，可以有不同修饰符。\"]},\"250\":{\"h\":\"18.访问修饰符 public、private、protected、以及不写（默认）时的区别？\",\"t\":[\"Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\",\"default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。\",\"private : 在同一类内可见。可以修饰变量、方法。注意：不能修饰类（外部类）\",\"public : 对所有类可见。可以修饰类、接口、变量、方法\",\"protected : 对同一包内的类和所有子类可见。可以修饰变量、方法。注意：不能修饰类（外部类）。\"]},\"251\":{\"h\":\"19.this 关键字有什么作用？\",\"t\":[\"this 是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。\",\"this 的用法在 Java 中大体可以分为 3 种：\",\"普通的直接引用，this 相当于是指向当前对象本身\",\"形参与成员变量名字重名，用 this 来区分：\",\"public Person(String name,int age){ this.name=name; this.age=age; } \",\"引用本类的构造函数\"]},\"252\":{\"h\":\"20.抽象类(abstract class)和接口(interface)有什么区别？\",\"t\":[\"接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现(Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。\",\"接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。\",\"⼀个类可以实现多个接⼝，但只能继承⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。\",\"接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。\",\"从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。\",\"在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。\",\"jdk9 的接⼝被允许定义私有⽅法 。\",\"总结⼀下 jdk7~jdk9 Java 中接⼝的变化：\",\"在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。\",\"jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。\",\"jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。\"]},\"253\":{\"h\":\"21.成员变量与局部变量的区别有哪些？\",\"t\":[\"从语法形式上看：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\",\"从变量在内存中的存储⽅式来看：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。\",\"从变量在内存中的⽣存时间上看：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。\",\"成员变量如果没有被赋初值：则会⾃动以类型的默认值⽽赋值（⼀种情况例外:被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。\"]},\"254\":{\"h\":\"22.静态变量和实例变量的区别？静态方法、实例方法呢？\",\"t\":[\"静态变量和实例变量的区别？\",\"静态变量: 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。\",\"实例变量: 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。\",\"静态⽅法和实例⽅法有何不同?\",\"类似地。\",\"静态方法：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤\\\"类名.⽅法名\\\"的⽅式，也可以使⽤\\\"对象名.⽅法名\\\"的⽅式。静态方法里不能访问类的非静态成员变量和方法。\",\"实例⽅法：依存于类的实例，需要使用\\\"对象名.⽅法名\\\"的⽅式调用；可以访问类的所有成员变量和方法。\"]},\"255\":{\"h\":\"24.final 关键字有什么作用？\",\"t\":[\"final 表示不可变的意思，可用于修饰类、属性和方法：\",\"被 final 修饰的类不可以被继承\",\"被 final 修饰的方法不可以被重写\",\"被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。\",\"例如：\",\"final StringBuilder sb=new StringBuilder(\\\"abc\\\"); sb.append(\\\"d\\\"); System.out.println(sb); //abcd \",\"一张图说明：\"]},\"256\":{\"h\":\"25.final、finally、finalize 的区别？\",\"t\":[\"final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。\",\"finally 作为异常处理的一部分，它只能在 try/catch 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，System.exit (0) 可以阻断 finally 执行。\",\"finalize 是在 java.lang.Object 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 gc 启动，该对象被回收的时候被调用。\",\"一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。\"]},\"257\":{\"h\":\"26.==和 equals 的区别？\",\"t\":[\"== : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象(基本数据类型 == 比较的是值，引⽤数据类型 == 比较的是内存地址)。\",\"equals() : 它的作⽤也是判断两个对象是否相等。但是这个“相等”一般也分两种情况：\",\"默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过“ == ”比较这两个对象，还是相当于比较内存地址。\",\"自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals()方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。\",\"举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：\",\"public class Person { private String no; private String name; @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Person)) return false; Person person = (Person) o; return Objects.equals(no, person.no) && Objects.equals(name, person.name); } @Override public int hashCode() { return Objects.hash(no, name); } } \"]},\"258\":{\"h\":\"27.hashCode 与 equals?\",\"t\":[\"这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”\",\"什么是 HashCode？\",\"hashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。\",\"public native int hashCode(); \",\"哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对(key-value)，它的特点是：能根据“键”快速的映射到对应的“值”。这其中就利⽤到了哈希码！\",\"为什么要有 hashCode？\",\"上面已经讲了，主要是在哈希表这种结构中用的到。\",\"例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。\",\"为什么重写 quals 时必须重写 hashCode ⽅法？\",\"如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，equals ⽅法被覆盖过，则 hashCode ⽅法也必须被覆盖。\",\"hashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）\",\"为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？\",\"因为可能会碰撞， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。 因为可能会碰撞， hashCode() 会返回相同的散列值，但是他们不一定时同一个对象，所以重写equal时必须重写hashCode方法。\"]},\"259\":{\"h\":\"28.Java 是值传递，还是引用传递？\",\"t\":[\"Java 语言是值传递。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时， 参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。\",\"JVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。\",\"而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。\"]},\"260\":{\"h\":\"29.深拷贝和浅拷贝?\",\"t\":[\"浅拷贝：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。\",\"深拷贝：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。\",\"例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：\",\"因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。\",\"浅拷贝如何实现呢？\",\"Object 类提供的 clone()方法可以非常简单地实现对象的浅拷贝。\",\"深拷贝如何实现呢？\",\"重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。\",\"序列化：可以先将原对象序列化，再反序列化成拷贝对象。\"]},\"261\":{\"h\":\"30.Java 创建对象有哪几种方式？\",\"t\":[\"Java 中有以下四种创建对象的方式:\",\"new 创建新对象\",\"通过反射机制\",\"采用 clone 机制\",\"通过序列化机制\",\"前两者都需要显式地调用构造方法。对于 clone 机制,需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"262\":{\"h\":\"String\"},\"263\":{\"h\":\"31.String 是 Java 基本数据类型吗？可以被继承吗？\",\"t\":[\"String 是 Java 基本数据类型吗？\",\"不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。\",\"String 是一个比较特殊的引用数据类型。\",\"String 类可以继承吗？\",\"不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。\"]},\"264\":{\"h\":\"32.String 和 StringBuilder、StringBuffer 的区别？\",\"t\":[\"String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。\",\"StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。\",\"StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。\"]},\"265\":{\"h\":\"33.String str1 = new String(\\\"abc\\\")和 String str2 = \\\"abc\\\" 和 区别？\",\"t\":[\"两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。\",\"但是不同的是，String str1 = new String(\\\"abc\\\") 还会通过 new String() 在堆里创建一个 \\\"abc\\\" 字符串对象实例。所以后者可以理解为被前者包含。\",\"String s = new String(\\\"abc\\\")创建了几个对象？\",\"很明显，一个或两个。如果字符串常量池已经有“abc”，则是一个；否则，两个。\",\"当字符创常量池没有 “abc”，此时会创建如下两个对象：\",\"一个是字符串字面量 \\\"abc\\\" 所对应的、字符串常量池中的实例\",\"另一个是通过 new String() 创建并初始化的，内容与\\\"abc\\\"相同的实例，在堆中。\"]},\"266\":{\"h\":\"34.String 不是不可变类吗？字符串拼接是如何实现的？\",\"t\":[\"String 的确是不可变的，“+”的拼接操作，其实是会生成新的对象。\",\"例如：\",\"String a=\\\"hello \\\"; String b=\\\"world!\\\"; String ab=a+b; \",\"在jdk1.8 之前，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。\",\"内存如下：\",\"在Java8 时JDK 对“+”号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对“+”号进行处理。\",\"下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。\",\"stack=2,locals=4,args_size=1 0:ldc #2 // String hello 2:astore_1 3:ldc #3 // String world! 5:astore_2 6:new #4 // class java/lang/StringBuilder 9:dup 10:invokespecial #5 // Method java/lang/StringBuilder.\\\"<init>\\\":()V 13:aload_1 14:invokevirtual #6 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 17:aload_2 18:invokevirtual #6 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 21:invokevirtual #7 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 24:astore_3 25:return \",\"也就是说其实上面的代码其实相当于：\",\"String a=\\\"hello \\\"; String b=\\\"world!\\\"; StringBuilder sb=new StringBuilder(); sb.append(a); sb.append(b); String ab=sb.toString(); \",\"此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。\",\"当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。\"]},\"267\":{\"h\":\"35.intern 方法有什么作用？\",\"t\":[\"JDK 源码里已经对这个方法进行了说明：\",\" *<p> *When the intern method is invoked,if the pool already contains a *string equal to this{@code String}object as determined by *the{@link #equals(Object)}method,then the string from the pool is *returned.Otherwise,this{@code String}object is added to the *pool and a reference to this{@code String}object is returned. *<p> \",\"意思也很好懂：\",\"如果当前字符串内容存在于字符串常量池（即 equals()方法为 true，也就是内容一样），直接返回字符串常量池中的字符串\",\"否则，将此 String 对象添加到池中，并返回 String 对象的引用\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"268\":{\"h\":\"Integer\"},\"269\":{\"h\":\"36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\",\"t\":[\"答案是 a 和 b 相等，c 和 d 不相等。\",\"对于基本数据类型==比较的值\",\"对于引用数据类型==比较的是地址\",\"Integer a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。\",\"如果整型字面量的值在-128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false\",\" public static void main(String[]args){ Integer a=127; Integer b=127; Integer b1=new Integer(127); System.out.println(a==b); //true System.out.println(b==b1); //false Integer c=128; Integer d=128; System.out.println(c==d); //false } \",\"什么是 Integer 缓存？\",\"因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置JVM-XX:AutoBoxCacheMax=来修改缓存的最大值，最小值改不了。\",\"实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。\",\"很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。\",\"IntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。\",\" private static class IntegerCache { …… static { //创建Integer对象存储 for (int k = 0; k < cache.length; k++) cache[k] = new Integer(j++); …… } } \"]},\"270\":{\"h\":\"37.String 怎么转成 Integer 的？原理？\",\"t\":[\"PS:这道题印象中在一些面经中出场过几次。\",\"String 转成 Integer，主要有两个方法：\",\"Integer.parseInt(String s)\",\"Integer.valueOf(String s)\",\"不管哪一种，最终还是会调用 Integer 类内中的parseInt(String s, int radix)方法。\",\"抛去一些边界之类的看看核心代码：\",\"public static int parseInt(String s,int radix) throws NumberFormatException { int result=0; //是否是负数 boolean negative=false; //char字符数组下标和长度 int i=0,len=s.length(); …… int digit; //判断字符长度是否大于0，否则抛出异常 if(len>0){ …… while(i<len){ // Accumulating negatively avoids surprises near MAX_VALUE //返回指定基数中字符表示的数值。（此处是十进制数值） digit=Character.digit(s.charAt(i++),radix); //进制位乘以数值 result*=radix; result-=digit; } } //根据上面得到的是否负数，返回相应的值 return negative?result:-result; } \",\"去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"271\":{\"h\":\"Object\"},\"272\":{\"h\":\"38.Object 类的常见方法?\",\"t\":[\"Object 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：\",\"对象比较：\",\"public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。\",\"public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。\",\"对象拷贝：\",\"protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。\",\"对象转字符串：\",\"public String toString()：返回类的名字@实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\",\"多线程调度：\",\"public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\",\"public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\",\"public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。\",\"public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒。\",\"public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念\",\"反射：\",\"public final native Class<?> getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\",\"垃圾回收：\",\"protected void finalize() throws Throwable ：通知垃圾收集器回收对象。\"]},\"273\":{\"h\":\"异常处理\"},\"274\":{\"h\":\"39.Java 中异常处理体系?\",\"t\":[\"Java 的异常体系是分为多层的。\",\"Throwable是 Java 语言中所有错误或异常的基类。 Throwable 又分为Error和Exception，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。Exception 是程序问题导致的异常，又分为两种：\",\"CheckedException 受检异常：编译器会强制检查并要求处理的异常。\",\"RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等\"]},\"275\":{\"h\":\"40.异常的处理方式？\",\"t\":[\"针对异常的处理主要有两种方式：\",\"遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）\",\"抛出异常有三种形式，一是 throw,一个 throws，还有一种系统自动抛异常。\",\"throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。\",\"try catch 捕获异常\",\"在 catch 语句块中补货发生的异常，并进行处理。\",\" try{ //包含可能会出现异常的代码以及声明异常的方法 }catch(Exception e){ //捕获异常并进行处理 }finally{} //可选，必执行的代码 } \",\"try-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。\"]},\"276\":{\"h\":\"41.三道经典异常处理代码题\",\"t\":[\"题目 1\",\"public class TryDemo { public static void main(String[] args) { System.out.println(test()); } public static int test() { try { return 1; } catch (Exception e) { return 2; } finally { System.out.print(\\\"3\\\"); } } } \",\"执行结果：31。\",\"try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。\",\"题目 2\",\"public class TryDemo { public static void main(String[] args) { System.out.println(test1()); } public static int test1() { try { return 2; } finally { return 3; } } } \",\"执行结果：3。\",\"try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。\",\"finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。\",\"题目 3\",\"public class TryDemo { public static void main(String[] args) { System.out.println(test1()); } public static int test1() { int i = 0; try { i = 2; return i; } finally { i = 3; } } } \",\"执行结果：2。\",\"大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？\",\"但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。\"]},\"277\":{\"h\":\"I/O\"},\"278\":{\"h\":\"42.Java 中 IO 流分为几种?\",\"t\":[\"流按照不同的特点，有很多种划分方式。\",\"按照流的流向分，可以分为输入流和输出流；\",\"按照操作单元划分，可以划分为字节流和字符流；\",\"按照流的角色划分为节点流和处理流\",\"Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\",\"InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\",\"OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\",\"IO 流用到了什么设计模式？\",\"其实，Java 的 IO 流体系还用到了一个设计模式——装饰器模式。\",\"InputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。\"]},\"279\":{\"h\":\"43.既然有了字节流,为什么还要有字符流?\",\"t\":[\"其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。\",\"所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。\"]},\"280\":{\"h\":\"44.BIO、NIO、AIO？\",\"t\":[\"BIO(blocking I/O) ： 就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理 ，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善(实现多个客户连接服务器)。\",\"BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。\",\"NIO ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO(即 New IO)。\",\"NIO 是同步非阻塞的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：\",\"NIO 的数据是面向缓冲区 Buffer的，必须从 Buffer 中读取或写入。\",\"所以完整的 NIO 示意图：\",\"可以看出，NIO 的运行机制：\",\"每个 Channel 对应一个 Buffer。\",\"Selector 对应一个线程，一个线程对应多个 Channel。\",\"Selector 会根据不同的事件，在各个通道上切换。\",\"Buffer 是内存块，底层是数据。\",\"AIO：JDK 7 引入了 Asynchronous I/O，是异步不阻塞的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\"]},\"281\":{\"h\":\"序列化\"},\"282\":{\"h\":\"45.什么是序列化？什么是反序列化？\",\"t\":[\"什么是序列化，序列化就是把 Java 对象转为二进制流，方便存储和传输。\",\"所以反序列化就是把二进制流恢复成对象。\",\"类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。\",\"Serializable 接口有什么用？\",\"这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。\",\"serialVersionUID 又有什么用？\",\"serialVersionUID 就是起验证作用。\",\"private static final long serialVersionUID=1L; \",\"我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。\",\"这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。\",\"如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。\",\"所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。\",\"因为类的结构变了，所以 serialVersionUID 就不一致。\",\"Java 序列化不包含静态变量？\",\"序列化的时候是不包含静态变量的。\",\"如果有些变量不想序列化，怎么办？\",\"对于不想进行序列化的变量，使用transient关键字修饰。\",\"transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。\"]},\"283\":{\"h\":\"46.说说有几种序列化方式？\",\"t\":[\"Java 序列化方式有很多，常见的有三种：\",\"Java 对象序列化 ：Java 原生序列化方法即通过 Java 原生流(InputStream 和 OutputStream 之间的转化)的方式进行转化，一般是对象输出流 ObjectOutputStream 和对象输入流ObjectInputStream。\",\"Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。\",\"ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。\"]},\"284\":{\"h\":\"泛型\"},\"285\":{\"h\":\"47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\",\"t\":[\"什么是泛型？\",\"Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\",\"List<Integer> list=new ArrayList<>(); list.add(12); //这里直接添加会报错 list.add(\\\"a\\\"); Class<?extends List> clazz=list.getClass(); Method add=clazz.getDeclaredMethod(\\\"add\\\",Object.class); //但是通过反射添加，是可以的 add.invoke(list,\\\"kl\\\"); System.out.println(list); \",\"泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。\",\"1.泛型类：\",\"//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型 //在实例化泛型类时，必须指定T的具体类型 public class Generic<T> { private T key; public Generic(T key) { this.key = key; } public T getKey() { return key; } } \",\"如何实例化泛型类：\",\"Generic<Integer> genericInteger=new Generic<Integer>(123456); \",\"2.泛型接口 ：\",\"public interface Generator<T> { public T method(); } \",\"实现泛型接口，指定类型：\",\"class GeneratorImpl<T> implements Generator<String> { @Override public String method() { return \\\"hello\\\"; } } \",\"3.泛型方法 ：\",\" public static<E> void printArray(E[]inputArray) { for(E element:inputArray){ System.out.printf(\\\"%s \\\",element); } System.out.println(); } \",\"使用：\",\"// 创建不同类型数组： Integer, Double 和 Character Integer[]intArray={1,2,3}; String[]stringArray={\\\"Hello\\\",\\\"World\\\"}; printArray(intArray); printArray(stringArray); \",\"泛型常用的通配符有哪些？\",\"常用的通配符为： T，E，K，V，？\",\"？ 表示不确定的 java 类型\",\"T (type) 表示具体的一个 java 类型\",\"K V (key value) 分别代表 java 键值中的 Key Value\",\"E (element) 代表 Element\",\"什么是泛型擦除？\",\"所谓的泛型擦除，官方名叫“类型擦除”。\",\"Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。\",\"也就是说，在运行的时候是没有泛型的。\",\"例如这段代码，往一群猫里放条狗：\",\"LinkedList<Cat> cats=new LinkedList<Cat>(); LinkedList list=cats; // 注意我在这里把范型去掉了，但是list和cats是同一个链表！ list.add(new Dog()); // 完全没问题！ \",\"因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java运行环境）看来和下面这段没区别：\",\"LinkedList cats=new LinkedList(); // 注意：没有范型！ LinkedList list=cats; list.add(new Dog()); \",\"为什么要类型擦除呢？\",\"主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。\"]},\"286\":{\"h\":\"注解\"},\"287\":{\"h\":\"48.说一下你对注解的理解？\",\"t\":[\"Java 注解本质上是一个标记，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。\",\"注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。\",\"有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。\",\"例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。\",\"注解生命周期有三大类，分别是：\",\"RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件\",\"RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了\",\"RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息\",\"所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。\",\"像常见的：\",\"就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。\",\"再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以在运行的时候可以通过反射得到注解的信息，还能拿到标记的值 required 。\"]},\"288\":{\"h\":\"反射\"},\"289\":{\"h\":\"49.什么是反射？应用？原理？\",\"t\":[\"什么是反射？\",\"我们通常都是利用new方式来创建对象实例，这可以说就是一种“正射”，这种方式在编译时候就确定了类型信息。\",\"而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到反射。\",\"通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\",\"反射最核心的四个类：\",\"反射的应用场景？\",\"一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。\",\"但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。\",\"像 Spring 里的很多 注解 ，它真正的功能实现就是利用反射。\",\"就像为什么我们使用 Spring 的时候 ，一个@Component注解就声明了一个类为 Spring Bean 呢？为什么通过一个 @Value注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？\",\"这些都是因为我们可以基于反射操作类，然后获取到类/属性/方法/方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类/属性/方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。\",\"反射的原理？\",\"我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码(.class)文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。\"]},\"290\":{\"h\":\"JDK1.8 新特性\",\"t\":[\"JDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。\"]},\"291\":{\"h\":\"50.JDK1.8 都有哪些新特性？\",\"t\":[\"JDK1.8 有不少新特性，我们经常接触到的新特性如下：\",\"接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可\",\"Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。\",\"Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。\",\"Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。\",\"简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\",\"日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。\",\"Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。\"]},\"292\":{\"h\":\"51.Lambda 表达式了解多少？\",\"t\":[\"Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。\",\"比如我们以前使用 Runnable 创建并运行线程：\",\" new Thread(new Runnable(){ @Override public void run(){ System.out.println(\\\"Thread is running before Java8!\\\"); } }).start(); \",\"这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：\",\"new Thread(()->System.out.println(\\\"Thread is running since Java8!\\\")).start(); \",\"当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。\",\"所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。\",\"Java8 有哪些内置函数式接口？\",\"JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 Comparator 和 Runnable，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。\",\"除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。\"]},\"293\":{\"h\":\"52.Optional 了解吗？\",\"t\":[\"Optional是用于防范NullPointerException。\",\"可以将 Optional 看做是包装对象（可能是 null, 也有可能非 null）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 Optional 来包装它，这也是在 Java 8 被推荐使用的做法。\",\"Optional<String> optional=Optional.of(\\\"bam\\\"); optional.isPresent(); // true optional.get(); // \\\"bam\\\" optional.orElse(\\\"fallback\\\"); // \\\"bam\\\" optional.ifPresent((s)->System.out.println(s.charAt(0))); // \\\"b\\\" \"]},\"294\":{\"h\":\"53.Stream 流用过吗？\",\"t\":[\"Stream 流，简单来说，使用 java.util.Stream 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 中间操作 亦或是 终端操作。 终端操作会返回一个结果，而中间操作会返回一个 Stream 流。\",\"Stream 流一般用于集合，我们对一个集合做几个常见操作：\",\"List<String> stringCollection=new ArrayList<>(); stringCollection.add(\\\"ddd2\\\"); stringCollection.add(\\\"aaa2\\\"); stringCollection.add(\\\"bbb1\\\"); stringCollection.add(\\\"aaa1\\\"); stringCollection.add(\\\"bbb3\\\"); stringCollection.add(\\\"ccc\\\"); stringCollection.add(\\\"bbb2\\\"); stringCollection.add(\\\"ddd1\\\"); \",\"Filter 过滤\",\"stringCollection .stream() .filter((s)->s.startsWith(\\\"a\\\")) .forEach(System.out::println); // \\\"aaa2\\\", \\\"aaa1\\\" \",\"Sorted 排序\",\"stringCollection .stream() .sorted() .filter((s)->s.startsWith(\\\"a\\\")) .forEach(System.out::println); // \\\"aaa1\\\", \\\"aaa2\\\" \",\"Map 转换\",\"stringCollection .stream() .map(String::toUpperCase) .sorted((a,b)->b.compareTo(a)) .forEach(System.out::println); // \\\"DDD2\\\", \\\"DDD1\\\", \\\"CCC\\\", \\\"BBB3\\\", \\\"BBB2\\\", \\\"AAA2\\\", \\\"AAA1\\\" \",\"Match 匹配\",\"// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true boolean anyStartsWithA= stringCollection .stream() .anyMatch((s)->s.startsWith(\\\"a\\\")); System.out.println(anyStartsWithA); // true // 验证 list 中 string 是否都是以 a 开头的 boolean allStartsWithA= stringCollection .stream() .allMatch((s)->s.startsWith(\\\"a\\\")); System.out.println(allStartsWithA); // false // 验证 list 中 string 是否都不是以 z 开头的, boolean noneStartsWithZ= stringCollection .stream() .noneMatch((s)->s.startsWith(\\\"z\\\")); System.out.println(noneStartsWithZ); // true \",\"Count 计数\",\"count 是一个终端操作，它能够统计 stream 流中的元素总数，返回值是 long 类型。\",\"// 先对 list 中字符串开头为 b 进行过滤，让后统计数量 long startsWithB= stringCollection .stream() .filter((s)->s.startsWith(\\\"b\\\")) .count(); System.out.println(startsWithB); // 3 \",\"Reduce\",\"Reduce 中文翻译为：减少、缩小。通过入参的 Function，我们能够将 list 归约成一个值。它的返回类型是 Optional 类型。\",\"Optional<String> reduced= stringCollection .stream() .sorted() .reduce((s1,s2)->s1+\\\"#\\\"+s2); reduced.ifPresent(System.out::println); // \\\"aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\\\" \",\"以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\",\"图文详解 53 道Java基础面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接\\n，作者：三分恶，戳原文链接。\"]},\"295\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1.3 万字 44 张手绘图，详解53道Java基础面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接 ，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/javase.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.3 万字 44 张手绘图，详解53道Java基础面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接 ，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"296\":{\"h\":\"\",\"t\":[\"2.1 万字 92 张手绘图，详解 60 道 Java 多线程面试高频题（让天下没有难背的八股），面渣背会这些并发编程八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"297\":{\"h\":\"基础\"},\"298\":{\"h\":\"1.并行跟并发有什么区别？\",\"t\":[\"从操作系统的角度来看，线程是CPU分配的最小单位。\",\"并行就是同一时刻，两个线程都在执行。这就要求有两个CPU去分别执行两个线程。\",\"并发就是同一时刻，只有一个执行，但是一个时间段内，两个线程都执行了。并发的实现依赖于CPU切换线程，因为切换的时间特别短，所以基本对于用户是无感知的。\",\"就好像我们去食堂打饭，并行就是我们在多个窗口排队，几个阿姨同时打菜；并发就是我们挤在一个窗口，阿姨给这个打一勺，又手忙脚乱地给那个打一勺。\"]},\"299\":{\"h\":\"2.说说什么是进程和线程？\",\"t\":[\"要说线程，必须得先说说进程。\",\"进程：进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。\",\"线程：线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源。\",\"操作系统在分配资源时是把资源分配给进程的， 但是 CPU 资源比较特殊，它是被分配到线程的，因为真正要占用CPU运行的是线程，所以也说线程是 CPU分配的基本单位。\",\"比如在Java中，当我们启动 main 函数其实就启动了一个JVM进程，而 main 函数在的线程就是这个进程中的一个线程，也称主线程。\",\"一个进程中有多个线程，多个线程共用进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈。\"]},\"300\":{\"h\":\"3.说说线程有几种创建方式？\",\"t\":[\"Java中创建线程主要有三种方式，分别为继承Thread类、实现Runnable接口、实现Callable接口。\",\"继承Thread类，重写run()方法，调用start()方法启动线程\",\"public class ThreadTest { /** * 继承Thread类 */ public static class MyThread extends Thread { @Override public void run() { System.out.println(\\\"This is child thread\\\"); } } public static void main(String[] args) { MyThread thread = new MyThread(); thread.start(); } } \",\"实现 Runnable 接口，重写run()方法\",\"public class RunnableTask implements Runnable { public void run() { System.out.println(\\\"Runnable!\\\"); } public static void main(String[] args) { RunnableTask task = new RunnableTask(); new Thread(task).start(); } } \",\"上面两种都是没有返回值的，但是如果我们需要获取线程的执行结果，该怎么办呢？\",\"实现Callable接口，重写call()方法，这种方式可以通过FutureTask获取任务执行的返回值\",\"public class CallerTask implements Callable<String> { public String call() throws Exception { return \\\"Hello,i am running!\\\"; } public static void main(String[] args) { //创建异步任务 FutureTask<String> task=new FutureTask<String>(new CallerTask()); //启动线程 new Thread(task).start(); try { //等待执行完成，并获取返回结果 String result=task.get(); System.out.println(result); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } } \"]},\"301\":{\"h\":\"4.为什么调用start()方法时会执行run()方法，那怎么不直接调用run()方法？\",\"t\":[\"JVM执行start方法，会先创建一条线程，由创建出来的新线程去执行thread的run方法，这才起到多线程的效果。\",\"**为什么我们不能直接调用run()方法？**也很清楚， 如果直接调用Thread的run()方法，那么run方法还是运行在主线程中，相当于顺序执行，就起不到多线程的效果。\"]},\"302\":{\"h\":\"5.线程有哪些常用的调度方法？\",\"t\":[\"线程等待与通知\",\"在Object类中有一些函数可以用于线程的等待与通知。\",\"wait()：当一个线程A调用一个共享变量的 wait()方法时， 线程A会被阻塞挂起， 发生下面几种情况才会返回 ：\",\"（1） 线程A调用了共享对象 notify()或者 notifyAll()方法；\",\"（2）其他线程调用了线程A的 interrupt() 方法，线程A抛出InterruptedException异常返回。\",\"wait(long timeout) ：这个方法相比 wait() 方法多了一个超时参数，它的不同之处在于，如果线程A调用共享对象的wait(long timeout)方法后，没有在指定的 timeout ms时间内被其它线程唤醒，那么这个方法还是会因为超时而返回。\",\"wait(long timeout, int nanos)，其内部调用的是 wait(long timout）函数。\",\"上面是线程等待的方法，而唤醒线程主要是下面两个方法：\",\"notify() : 一个线程A调用共享对象的 notify() 方法后，会唤醒一个在这个共享变量上调用 wait 系列方法后被挂起的线程。 一个共享变量上可能会有多个线程在等待，具体唤醒哪个等待的线程是随机的。\",\"notifyAll() ：不同于在共享变量上调用 notify() 函数会唤醒被阻塞到该共享变量上的一个线程，notifyAll()方法则会唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。\",\"Thread类也提供了一个方法用于等待的方法：\",\"join()：如果一个线程A执行了thread.join()语句，其含义是：当前线程A等待thread线程终止之后才\",\"从thread.join()返回。\",\"线程休眠\",\"sleep(long millis) :Thread类中的静态方法，当一个执行中的线程A调用了Thread 的sleep方法后，线程A会暂时让出指定时间的执行权，但是线程A所拥有的监视器资源，比如锁还是持有不让出的。指定的睡眠时间到了后该函数会正常返回，接着参与 CPU 的调度，获取到 CPU 资源后就可以继续运行。\",\"让出优先权\",\"yield() ：Thread类中的静态方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己的CPU ，但是线程调度器可以无条件忽略这个暗示。\",\"线程中断\",\"Java 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。\",\"void interrupt() ：中断线程，例如，当线程A运行时，线程B可以调用线程interrupt() 方法来设置线程的中断标志为true 并立即返回。设置标志仅仅是设置标志, 线程A实际并没有被中断， 会继续往下执行。\",\"boolean isInterrupted() 方法： 检测当前线程是否被中断。\",\"boolean interrupted() 方法： 检测当前线程是否被中断，与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志。\"]},\"303\":{\"h\":\"6.线程有几种状态？\",\"t\":[\"在Java中，线程共有六种状态：\",\"状态\",\"说明\",\"NEW\",\"初始状态：线程被创建，但还没有调用start()方法\",\"RUNNABLE\",\"运行状态：Java线程将操作系统中的就绪和运行两种状态笼统的称作“运行”\",\"BLOCKED\",\"阻塞状态：表示线程阻塞于锁\",\"WAITING\",\"等待状态：表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断）\",\"TIME_WAITING\",\"超时等待状态：该状态不同于 WAITIND，它是可以在指定的时间自行返回的\",\"TERMINATED\",\"终止状态：表示当前线程已经执行完毕\",\"线程在自身的生命周期中， 并不是固定地处于某个状态，而是随着代码的执行在不同的状态之间进行切换，Java线程状态变化如图示：\"]},\"304\":{\"h\":\"7.什么是线程上下文切换？\",\"t\":[\"使用多线程的目的是为了充分利用CPU，但是我们知道，并发其实是一个CPU来应付多个线程。\",\"为了让用户感觉多个线程是在同时执行的， CPU 资源的分配采用了时间片轮转也就是给每个线程分配一个时间片，线程在时间片内占用 CPU 执行任务。当线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占用，这就是上下文切换。\"]},\"305\":{\"h\":\"8.守护线程了解吗？\",\"t\":[\"Java中的线程分为两类，分别为 daemon 线程（守护线程）和 user 线程（用户线程）。\",\"在JVM 启动时会调用 main 函数，main函数所在的线程就是一个用户线程。其实在 JVM 内部同时还启动了很多守护线程， 比如垃圾回收线程。\",\"那么守护线程和用户线程有什么区别呢？区别之一是当最后一个非守护线程束时， JVM会正常退出，而不管当前是否存在守护线程，也就是说守护线程是否结束并不影响 JVM退出。换而言之，只要有一个用户线程还没结束，正常情况下JVM就不会退出。\"]},\"306\":{\"h\":\"9.线程间有哪些通信方式？\",\"t\":[\"volatile和synchronized关键字\",\"关键字volatile可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程对变量访问的可见性。\",\"关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排他性。\",\"等待/通知机制\",\"可以通过Java内置的等待/通知机制（wait()/notify()）实现一个线程修改一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\",\"管道输入/输出流\",\"管道输入/输出流和普通的文件输入/输出流或者网络输入/输出流不同之处在于，它主要用于线程之间的数据传输，而传输的媒介为内存。\",\"管道输入/输出流主要包括了如下4种具体实现：PipedOutputStream、PipedInputStream、 PipedReader和PipedWriter，前两种面向字节，而后两种面向字符。\",\"使用Thread.join()\",\"如果一个线程A执行了thread.join()语句，其含义是：当前线程A等待thread线程终止之后才从thread.join()返回。。线程Thread除了提供join()方法之外，还提供了join(long millis)和join(long millis,int nanos)两个具备超时特性的方法。\",\"使用ThreadLocal\",\"ThreadLocal，即线程变量，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个线程上的一个值。\",\"可以通过set(T)方法来设置一个值，在当前线程下再通过get()方法获取到原先设置的值。\",\"关于多线程，其实很大概率还会出一些笔试题，比如交替打印、银行转账、生产消费模型等等，后面老三会单独出一期来盘点一下常见的多线程笔试题。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"307\":{\"h\":\"ThreadLocal\",\"t\":[\"ThreadLocal其实应用场景不是很多，但却是被炸了千百遍的面试老油条，涉及到多线程、数据结构、JVM，可问的点比较多，一定要拿下。\"]},\"308\":{\"h\":\"10.ThreadLocal是什么？\",\"t\":[\"ThreadLocal，也就是线程本地变量。如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝， 多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程安全问题。\",\"创建\",\"创建了一个ThreadLoca变量localVariable，任何一个线程都能并发访问localVariable。\",\"//创建一个ThreadLocal变量 public static ThreadLocal<String> localVariable = new ThreadLocal<>(); \",\"写入\",\"线程可以在任何地方使用localVariable，写入变量。\",\"localVariable.set(\\\"鄙人三某”); \",\"读取\",\"线程在任何地方读取的都是它写入的变量。\",\"localVariable.get(); \"]},\"309\":{\"h\":\"11.你在工作中用到过ThreadLocal吗？\",\"t\":[\"有用到过的，用来做用户信息上下文的存储。\",\"我们的系统应用是一个典型的MVC架构，登录后的用户每次访问接口，都会在请求头中携带一个token，在控制层可以根据这个token，解析出用户的基本信息。 那么问题来了，假如在服务层和持久层都要用到用户信息，比如rpc调用、更新用户获取等等，那应该怎么办呢？\",\"一种办法是显式定义用户相关的参数，比如账号、用户名……这样一来，我们可能需要大面积地修改代码，多少有点瓜皮，那该怎么办呢？\",\"这时候我们就可以用到ThreadLocal，在控制层拦截请求把用户信息存入ThreadLocal，这样我们在任何一个地方，都可以取出ThreadLocal中存的用户数据。\",\"很多其它场景的cookie、session等等数据隔离也都可以通过ThreadLocal去实现。\",\"我们常用的数据库连接池也用到了ThreadLocal：\",\"数据库连接池的连接交给ThreadLoca进行管理，保证当前线程的操作都是同一个Connnection。\"]},\"310\":{\"h\":\"12.ThreadLocal怎么实现的呢？\",\"t\":[\"我们看一下ThreadLocal的set(T)方法，发现先获取到当前线程，再获取ThreadLocalMap，然后把元素存到这个map中。\",\" public void set(T value) { //获取当前线程 Thread t = Thread.currentThread(); //获取ThreadLocalMap ThreadLocalMap map = getMap(t); //讲当前元素存入map if (map != null) map.set(this, value); else createMap(t, value); } \",\"ThreadLocal实现的秘密都在这个ThreadLocalMap了，可以Thread类中定义了一个类型为ThreadLocal.ThreadLocalMap的成员变量threadLocals。\",\"public class Thread implements Runnable { //ThreadLocal.ThreadLocalMap是Thread的属性 ThreadLocal.ThreadLocalMap threadLocals = null; } \",\"ThreadLocalMap既然被称为Map，那么毫无疑问它是<key,value>型的数据结构。我们都知道map的本质是一个个<key,value>形式的节点组成的数组，那ThreadLocalMap的节点是什么样的呢？\",\"static class Entry extends WeakReference<ThreadLocal<?>> { /** The value associated with this ThreadLocal. */ Object value; //节点类 Entry(ThreadLocal<?> k, Object v) { //key赋值 super(k); //value赋值 value = v; } } \",\"这里的节点，key可以简单低视作ThreadLocal，value为代码中放入的值，当然实际上key并不是ThreadLocal本身， 而是它的一个弱引用，可以看到Entry的key继承了 WeakReference（弱引用），再来看一下key怎么赋值的：\",\"public WeakReference(T referent) { super(referent); } \",\"key的赋值，使用的是WeakReference的赋值。\",\"所以，怎么回答ThreadLocal原理？要答出这几个点：\",\"Thread类有一个类型为ThreadLocal.ThreadLocalMap的实例变量threadLocals，每个线程都有一个属于自己的ThreadLocalMap。\",\"ThreadLocalMap内部维护着Entry数组，每个Entry代表一个完整的对象，key是ThreadLocal的弱引用，value是ThreadLocal的泛型值。\",\"每个线程在往ThreadLocal里设置值的时候，都是往自己的ThreadLocalMap里存，读也是以某个ThreadLocal作为引用，在自己的map里找对应的key，从而实现了线程隔离。\",\"ThreadLocal本身不存储值，它只是作为一个key来让线程往ThreadLocalMap里存取值。\"]},\"311\":{\"h\":\"13.ThreadLocal 内存泄露是怎么回事？\",\"t\":[\"我们先来分析一下使用ThreadLocal时的内存，我们都知道，在JVM中，栈内存线程私有，存储了对象的引用，堆内存线程共享，存储了对象实例。\",\"所以呢，栈中存储了ThreadLocal、Thread的引用，堆中存储了它们的具体实例。\",\"ThreadLocalMap中使用的 key 为 ThreadLocal 的弱引用。\",\"“弱引用：只要垃圾回收机制一运行，不管JVM的内存空间是否充足，都会回收该对象占用的内存。”\",\"那么现在问题就来了，弱引用很容易被回收，如果ThreadLocal（ThreadLocalMap的Key）被垃圾回收器回收了，但是ThreadLocalMap生命周期和Thread是一样的，它这时候如果不被回收， 就会出现这种情况：ThreadLocalMap的key没了，value还在，这就会造成了内存泄漏问题。\",\"那怎么解决内存泄漏问题呢？\",\"很简单，使用完ThreadLocal后，及时调用remove()方法释放内存空间。\",\"ThreadLocal<String> localVariable = new ThreadLocal(); try { localVariable.set(\\\"鄙人三某”); …… } finally { localVariable.remove(); } \",\"那为什么key还要设计成弱引用？\",\"key设计成弱引用同样是为了防止内存泄漏。\",\"假如key被设计成强引用，如果ThreadLocal Reference被销毁，此时它指向ThreadLoca的强引用就没有了，但是此时key还强引用指向ThreadLoca，就会导致ThreadLocal不能被回收， 这时候就发生了内存泄漏的问题。\"]},\"312\":{\"h\":\"14.ThreadLocalMap的结构了解吗？\",\"t\":[\"ThreadLocalMap虽然被叫做Map，其实它是没有实现Map接口的，但是结构还是和HashMap比较类似的，主要关注的是两个要素：元素数组和散列方法。\",\"元素数组\",\"一个table数组，存储Entry类型的元素，Entry是ThreaLocal弱引用作为key，Object作为value的结构。\",\" private Entry[] table; \",\"散列方法\",\"散列方法就是怎么把对应的key映射到table数组的相应下标，ThreadLocalMap用的是哈希取余法，取出key的threadLocalHashCode，然后和table数组长度减一&运算（相当于取余）。\",\"int i = key.threadLocalHashCode & (table.length - 1); \",\"这里的threadLocalHashCode计算有点东西，每创建一个ThreadLocal对象，它就会新增0x61c88647，这个值很特殊，它是斐波那契数 也叫 黄金分割数。 hash增量为 这个数字，带来的好处就是 hash分布非常均匀。\",\" private static final int HASH_INCREMENT = 0x61c88647; private static int nextHashCode() { return nextHashCode.getAndAdd(HASH_INCREMENT); } \"]},\"313\":{\"h\":\"15.ThreadLocalMap怎么解决Hash冲突的？\",\"t\":[\"我们可能都知道HashMap使用了链表来解决冲突，也就是所谓的链地址法。\",\"ThreadLocalMap没有使用链表，自然也不是用链地址法来解决冲突了，它用的是另外一种方式——开放定址法。开放定址法是什么意思呢？简单来说，就是这个坑被人占了，那就接着去找空着的坑。\",\"如上图所示，如果我们插入一个value=27的数据，通过 hash计算后应该落入第 4 个槽位中，而槽位 4 已经有了 Entry数据，而且Entry数据的key和当前不相等。 此时就会线性向后查找，一直找到 Entry为 null的槽位才会停止查找，把元素放到空的槽中。\",\"在get的时候，也会根据ThreadLocal对象的hash值，定位到table中的位置，然后判断该槽位Entry对象中的key是否和get的key一致，如果不一致，就判断下一个位置。\"]},\"314\":{\"h\":\"16.ThreadLocalMap扩容机制了解吗？\",\"t\":[\"在ThreadLocalMap.set()方法的最后，如果执行完启发式清理工作后，未清理到任何数据，且当前散列数组中Entry的数量已经达到了列表的扩容阈值(len*2/3)，就开始执行rehash()逻辑：\",\"if (!cleanSomeSlots(i, sz) && sz >= threshold) rehash(); \",\"再着看rehash()具体实现：这里会先去清理过期的Entry，然后还要根据条件判断size >= threshold - threshold / 4 也就是size >= threshold* 3/4来决定是否需要扩容。\",\"private void rehash() { //清理过期Entry expungeStaleEntries(); //扩容 if (size >= threshold - threshold / 4) resize(); } //清理过期Entry private void expungeStaleEntries() { Entry[] tab = table; int len = tab.length; for (int j = 0; j < len; j++) { Entry e = tab[j]; if (e != null && e.get() == null) expungeStaleEntry(j); } } \",\"接着看看具体的resize()方法，扩容后的newTab的大小为老数组的两倍，然后遍历老的table数组，散列方法重新计算位置，开放地址解决冲突， 然后放到新的newTab，遍历完成之后，oldTab中所有的entry数据都已经放入到newTab中了，然后table引用指向newTab\",\"具体代码：\"]},\"315\":{\"h\":\"17.父子线程怎么共享数据？\",\"t\":[\"父线程能用ThreadLocal来给子线程传值吗？毫无疑问，不能。那该怎么办？\",\"这时候可以用到另外一个类——InheritableThreadLocal 。\",\"使用起来很简单，在主线程的InheritableThreadLocal实例设置值，在子线程中就可以拿到了。\",\"public class InheritableThreadLocalTest { public static void main(String[] args) { final ThreadLocal threadLocal = new InheritableThreadLocal(); // 主线程 threadLocal.set(\\\"不擅技术\\\"); //子线程 Thread t = new Thread() { @Override public void run() { super.run(); System.out.println(\\\"鄙人三某 ，\\\" + threadLocal.get()); } }; t.start(); } } \",\"那原理是什么呢？\",\"原理很简单，在Thread类里还有另外一个变量：\",\"ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; \",\"在Thread.init的时候，如果父线程的inheritableThreadLocals不为空，就把它赋给当前线程（子线程）的inheritableThreadLocals 。\",\"if (inheritThreadLocals && parent.inheritableThreadLocals != null) this.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.inheritableThreadLocals); \",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"316\":{\"h\":\"Java内存模型\"},\"317\":{\"h\":\"18.说一下你对Java内存模型（JMM）的理解？\",\"t\":[\"Java内存模型（Java Memory Model，JMM），是一种抽象的模型，被定义出来屏蔽各种硬件和操作系统的内存访问差异。\",\"JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存（Local Memory），本地内存中存储了该线程以读/写共享变量的副本。\",\"Java内存模型的抽象图：\",\"本地内存是JMM的 一个抽象概念，并不真实存在。它其实涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。\",\"图里面的是一个双核 CPU 系统架构 ，每个核有自己的控制器和运算器，其中控制器包含一组寄存器和操作控制器，运算器执行算术逻辅运算。每个核都有自己的一级缓存， 在有些架构里面还有一个所有 CPU 共享的二级缓存。 那么 Java 内存模型里面的工作内存，就对应这里的 Ll 缓存或者 L2 缓存或者 CPU 寄存器。\"]},\"318\":{\"h\":\"19.说说你对原子性、可见性、有序性的理解？\",\"t\":[\"原子性、有序性、可见性是并发编程中非常重要的基础概念，JMM的很多技术都是围绕着这三大特性展开。\",\"原子性：原子性指的是一个操作是不可分割、不可中断的，要么全部执行并且执行的过程不会被任何因素打断，要么就全不执行。\",\"可见性：可见性指的是一个线程修改了某一个共享变量的值时，其它线程能够立即知道这个修改。\",\"有序性：有序性指的是对于一个线程的执行代码，从前往后依次执行，单线程下可以认为程序是有序的，但是并发时有可能会发生指令重排。\",\"分析下面几行代码的原子性？\",\"int i = 2; int j = i; i++; i = i + 1; \",\"第1句是基本类型赋值，是原子性操作。\",\"第2句先读i的值，再赋值到j，两步操作，不能保证原子性。\",\"第3和第4句其实是等效的，先读取i的值，再+1，最后赋值到i，三步操作了，不能保证原子性。\",\"原子性、可见性、有序性都应该怎么保证呢？\",\"原子性：JMM只能保证基本的原子性，如果要保证一个代码块的原子性，需要使用synchronized 。\",\"可见性：Java是利用volatile关键字来保证可见性的，除此之外，final和synchronized也能保证可见性。\",\"有序性：synchronized或者volatile都可以保证多线程之间操作的有序性。\"]},\"319\":{\"h\":\"20.那说说什么是指令重排？\",\"t\":[\"在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。重排序分3种类型。\",\"编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。\",\"指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应 机器指令的执行顺序。\",\"内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\",\"从Java源代码到最终实际执行的指令序列，会分别经历下面3种重排序，如图：\",\"我们比较熟悉的双重校验单例模式就是一个经典的指令重排的例子，Singleton instance=new Singleton()；对应的JVM指令分为三步：分配内存空间-->初始化对象--->对象指向分配的内存空间， 但是经过了编译器的指令重排序，第二步和第三步就可能会重排序。\",\"JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。\"]},\"320\":{\"h\":\"21.指令重排有限制吗？happens-before了解吗？\",\"t\":[\"指令重排也是有一些限制的，有两个规则happens-before和as-if-serial来约束。\",\"happens-before的定义：\",\"如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。\",\"两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照 happens-before关系指定的顺序来执行。如果重排序之后的执行结果，\",\"与按happens-before关系来执行的结果一致，那么这种重排序并不非法\",\"happens-before和我们息息相关的有六大规则：\",\"程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。\",\"监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。\",\"volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。\",\"传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。\",\"start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的 ThreadB.start()操作happens-before于线程B中的任意操作。\",\"join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作 happens-before于线程A从ThreadB.join()操作成功返回。\"]},\"321\":{\"h\":\"22.as-if-serial又是什么？单线程的程序一定是顺序的吗？\",\"t\":[\"as-if-serial语义的意思是：不管怎么重排序（编译器和处理器为了提高并行度），单线程程序的执行结果不能被改变。编译器、runtime和处理器都必须遵守as-if-serial语义。\",\"为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系， 这些操作就可能被编译器和处理器重排序。为了具体说明，请看下面计算圆面积的代码示例。\",\"double pi = 3.14; // A double r = 1.0; // B double area = pi * r * r; // C \",\"上面3个操作的数据依赖关系：\",\"A和C之间存在数据依赖关系，同时B和C之间也存在数据依赖关系。因此在最终执行的指令序列中，C不能被重排序到A和B的前面（C排到A和B的前面，程序的结果将会被改变）。 但A和B之间没有数据依赖关系，编译器和处理器可以重排序A和B之间的执行顺序。\",\"所以最终，程序可能会有两种执行顺序：\",\"as-if-serial语义把单线程程序保护了起来，遵守as-if-serial语义的编译器、runtime和处理器共同编织了这么一个“楚门的世界”：单线程程序是按程序的“顺序”来执行的。 as- if-serial语义使单线程情况下，我们不需要担心重排序的问题，可见性的问题。\"]},\"322\":{\"h\":\"23.volatile实现原理了解吗？\",\"t\":[\"volatile有两个作用，保证可见性和有序性。\",\"volatile怎么保证可见性的呢？\",\"相比synchronized的加锁方式来解决共享变量的内存可见性问题，volatile就是更轻量的选择，它没有上下文切换的额外开销成本。\",\"volatile可以确保对某个变量的更新对其他线程马上可见，一个变量被声明为volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存 当其它线程读取该共享变量 ， 会从主内存重新获取最新值，而不是使用当前线程的本地内存中的值。\",\"例如，我们声明一个 volatile 变量 volatile int x = 0，线程A修改x=1，修改完之后就会把新的值刷新回主内存，线程B读取x的时候，就会清空本地内存变量，然后再从主内存获取最新值。\",\"volatile怎么保证有序性的呢？\",\"重排序可以分为编译器重排序和处理器重排序，valatile保证有序性，就是通过分别限制这两种类型的重排序。\",\"为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。\",\"在每个volatile写操作的前面插入一个StoreStore屏障\",\"在每个volatile写操作的后面插入一个StoreLoad屏障\",\"在每个volatile读操作的后面插入一个LoadLoad屏障\",\"在每个volatile读操作的后面插入一个LoadStore屏障\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"323\":{\"h\":\"锁\"},\"324\":{\"h\":\"24.synchronized用过吗？怎么使用？\",\"t\":[\"synchronized经常用的，用来保证代码的原子性。\",\"synchronized主要有三种用法：\",\"修饰实例方法: 作用于当前对象实例加锁，进入同步代码前要获得 当前对象实例的锁\",\"synchronized void method() { //业务代码 } \",\"修饰静态方法：也就是给当前类加锁，会作⽤于类的所有对象实例 ，进⼊同步代码前要获得当前 class 的锁。\",\"因为静态成员不属于任何⼀个实例对象，是类成员（ static 表明这是该类的⼀个静态资源，不管 new 了多少个对象，只有⼀份）。\",\"如果⼀个线程 A 调⽤⼀个实例对象的⾮静态 synchronized ⽅法，⽽线程 B 需要调⽤这个实例对象所属类的静态 synchronized ⽅法，是允许的，不会发⽣互斥现象， 因为访问静态 synchronized ⽅法占⽤的锁是当前类的锁，⽽访问⾮静态 synchronized ⽅法占⽤的锁是当前实例对象锁。\",\"synchronized void staic method() { //业务代码 } \",\"修饰代码块 ：指定加锁对象，对给定对象/类加锁。 synchronized(this|object) 表示进⼊同步代码库前要获得给定对象的锁。\",\"synchronized(类.class) 表示进⼊同步代码前要获得 当前 class 的锁\",\"synchronized(this) { //业务代码 } \"]},\"325\":{\"h\":\"25.synchronized的实现原理？\",\"t\":[\"synchronized是怎么加锁的呢？\",\"我们使用synchronized的时候，发现不用自己去lock和unlock，是因为JVM帮我们把这个事情做了。\",\"synchronized修饰代码块时，JVM采用monitorenter、monitorexit两个指令来实现同步，monitorenter 指令指向同步代码块的开始位置， monitorexit 指令则指向同步代码块的结束位置。\",\"反编译一段synchronized修饰代码块代码，javap -c -s -v -l SynchronizedDemo.class，可以看到相应的字节码指令。\",\"synchronized修饰同步方法时，JVM采用ACC_SYNCHRONIZED标记符来实现同步，这个标识指明了该方法是一个同步方法。\",\"同样可以写段代码反编译看一下。\",\"synchronized锁住的是什么呢？\",\"monitorenter、monitorexit或者ACC_SYNCHRONIZED都是基于Monitor实现的。\",\"实例对象结构里有对象头，对象头里面有一块结构叫Mark Word，Mark Word指针指向了monitor。\",\"所谓的Monitor其实是一种同步工具，也可以说是一种同步机制。在Java虚拟机（HotSpot）中，Monitor是由ObjectMonitor实现的，可以叫做内部锁，或者Monitor锁。\",\"ObjectMonitor的工作原理：\",\"ObjectMonitor有两个队列：_WaitSet、_EntryList，用来保存ObjectWaiter 对象列表。\",\"_owner，获取 Monitor 对象的线程进入 _owner 区时， _count + 1。如果线程调用了 wait() 方法，此时会释放 Monitor 对象， _owner 恢复为空， _count - 1。\",\"同时该等待线程进入 _WaitSet 中，等待被唤醒。\",\"ObjectMonitor() { _header = NULL; _count = 0; // 记录线程获取锁的次数 _waiters = 0, _recursions = 0; //锁的重入次数 _object = NULL; _owner = NULL; // 指向持有ObjectMonitor对象的线程 _WaitSet = NULL; // 处于wait状态的线程，会被加入到_WaitSet _WaitSetLock = 0 ; _Responsible = NULL ; _succ = NULL ; _cxq = NULL ; FreeNext = NULL ; _EntryList = NULL ; // 处于等待锁block状态的线程，会被加入到该列表 _SpinFreq = 0 ; _SpinClock = 0 ; OwnerIsThread = 0 ; } \",\"可以类比一个去医院就诊的例子[18]：\",\"首先，患者在门诊大厅前台或自助挂号机进行挂号；\",\"随后，挂号结束后患者找到对应的诊室就诊：\",\"诊室每次只能有一个患者就诊；\",\"如果此时诊室空闲，直接进入就诊；\",\"如果此时诊室内有其它患者就诊，那么当前患者进入候诊室，等待叫号；\",\"就诊结束后，走出就诊室，候诊室的下一位候诊患者进入就诊室。\",\"这个过程就和Monitor机制比较相似：\",\"门诊大厅：所有待进入的线程都必须先在入口Entry Set挂号才有资格；\",\"就诊室：就诊室**_Owner**里里只能有一个线程就诊，就诊完线程就自行离开\",\"候诊室：就诊室繁忙时，进入等待区（Wait Set），就诊室空闲的时候就从**等待区（Wait Set）**叫新的线程\",\"所以我们就知道了，同步是锁住的什么东西：\",\"monitorenter，在判断拥有同步标识 ACC_SYNCHRONIZED 抢先进入此方法的线程会优先拥有 Monitor 的 owner ，此时计数器 +1。\",\"monitorexit，当执行完退出后，计数器 -1，归 0 后被其他进入的线程获得。\"]},\"326\":{\"h\":\"26.除了原子性，synchronized可见性，有序性，可重入性怎么实现？\",\"t\":[\"synchronized怎么保证可见性？\",\"线程加锁前，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值。\",\"线程加锁后，其它线程无法获取主内存中的共享变量。\",\"线程解锁前，必须把共享变量的最新值刷新到主内存中。\",\"synchronized怎么保证有序性？\",\"synchronized同步的代码块，具有排他性，一次只能被一个线程拥有，所以synchronized保证同一时刻，代码是单线程执行的。\",\"因为as-if-serial语义的存在，单线程的程序能保证最终结果是有序的，但是不保证不会指令重排。\",\"所以synchronized保证的有序是执行结果的有序性，而不是防止指令重排的有序性。\",\"synchronized怎么实现可重入的呢？\",\"synchronized 是可重入锁，也就是说，允许一个线程二次请求自己持有对象锁的临界资源，这种情况称为可重入锁。\",\"synchronized 锁对象的时候有个计数器，他会记录下线程获取锁的次数，在执行完对应的代码块之后，计数器就会-1，直到计数器清零，就释放锁了。\",\"之所以，是可重入的。是因为 synchronized 锁对象有个计数器，会随着线程获取锁后 +1 计数，当线程执行完毕后 -1，直到清零释放锁。\"]},\"327\":{\"h\":\"27.锁升级？synchronized优化了解吗？\",\"t\":[\"了解锁升级，得先知道，不同锁的状态是什么样的。这个状态指的是什么呢？\",\"Java对象头里，有一块结构，叫Mark Word标记字段，这块结构会随着锁的状态变化而变化。\",\"64 位虚拟机 Mark Word 是 64bit，我们来看看它的状态变化：\",\"Mark Word存储对象自身的运行数据，如哈希码、GC分代年龄、锁状态标志、偏向时间戳（Epoch） 等。\",\"synchronized做了哪些优化？\",\"在JDK1.6之前，synchronized的实现直接调用ObjectMonitor的enter和exit，这种锁被称之为重量级锁。 从JDK6开始，HotSpot虚拟机开发团队对Java中的锁进行优化，如增加了适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等优化策略，提升了synchronized的性能。\",\"偏向锁：在无竞争的情况下，只是在Mark Word里存储当前线程指针，CAS操作都不做。\",\"轻量级锁：在没有多线程竞争时，相对重量级锁，减少操作系统互斥量带来的性能消耗。但是，如果存在锁竞争，除了互斥量本身开销，还额外有CAS操作的开销。\",\"自旋锁：减少不必要的CPU上下文切换。在轻量级锁升级为重量级锁时，就使用了自旋加锁的方式\",\"锁粗化：将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。\",\"锁消除：虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。\",\"锁升级的过程是什么样的？\",\"锁升级方向：无锁-->偏向锁---> 轻量级锁---->重量级锁，这个方向基本上是不可逆的。\",\"我们看一下升级的过程：\"]},\"328\":{\"h\":\"偏向锁：\",\"t\":[\"偏向锁的获取：\",\"判断是否为可偏向状态--MarkWord中锁标志是否为‘01’，是否偏向锁是否为‘1’\",\"如果是可偏向状态，则查看线程ID是否为当前线程，如果是，则进入步骤'5'，否则进入步骤‘3’\",\"通过CAS操作竞争锁，如果竞争成功，则将MarkWord中线程ID设置为当前线程ID，然后执行‘5’；竞争失败，则执行‘4’\",\"CAS获取偏向锁失败表示有竞争。当达到safepoint时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块\",\"执行同步代码\",\"偏向锁的撤销：\",\"偏向锁不会主动释放(撤销)，只有遇到其他线程竞争时才会执行撤销，由于撤销需要知道当前持有该偏向锁的线程栈状态，因此要等到safepoint时执行，此时持有该偏向锁的线程（T）有‘2’，‘3’两种情况；\",\"撤销----T线程已经退出同步代码块，或者已经不再存活，则直接撤销偏向锁，变成无锁状态----该状态达到阈值20则执行批量重偏向\",\"升级----T线程还在同步代码块中，则将T线程的偏向锁升级为轻量级锁，当前线程执行轻量级锁状态下的锁获取步骤----该状态达到阈值40则执行批量撤销\"]},\"329\":{\"h\":\"轻量级锁：\",\"t\":[\"轻量级锁的获取：\",\"进行加锁操作时，jvm会判断是否已经时重量级锁，如果不是，则会在当前线程栈帧中划出一块空间，作为该锁的锁记录，并且将锁对象MarkWord复制到该锁记录中\",\"复制成功之后，jvm使用CAS操作将对象头MarkWord更新为指向锁记录的指针，并将锁记录里的owner指针指向对象头的MarkWord。如果成功，则执行‘3’，否则执行‘4’\",\"更新成功，则当前线程持有该对象锁，并且对象MarkWord锁标志设置为‘00’，即表示此对象处于轻量级锁状态\",\"更新失败，jvm先检查对象MarkWord是否指向当前线程栈帧中的锁记录，如果是则执行‘5’，否则执行‘4’\",\"表示锁重入；然后当前线程栈帧中增加一个锁记录第一部分（Displaced Mark Word）为null，并指向Mark Word的锁对象，起到一个重入计数器的作用。\",\"表示该锁对象已经被其他线程抢占，则进行自旋等待（默认10次），等待次数达到阈值仍未获取到锁，则升级为重量级锁\",\"大体上省简的升级过程：\",\"完整的升级过程：\"]},\"330\":{\"h\":\"28.说说synchronized和ReentrantLock的区别？\",\"t\":[\"可以从锁的实现、功能特点、性能等几个维度去回答这个问题：\",\"锁的实现： synchronized是Java语言的关键字，基于JVM实现。而ReentrantLock是基于JDK的API层面实现的（一般是lock()和unlock()方法配合try/finally 语句块来完成。）\",\"性能： 在JDK1.6锁优化以前，synchronized的性能比ReenTrantLock差很多。但是JDK6开始，增加了适应性自旋、锁消除等，两者性能就差不多了。\",\"功能特点： ReentrantLock 比 synchronized 增加了一些高级功能，如等待可中断、可实现公平锁、可实现选择性通知。 \",\"ReentrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制\",\"ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。\",\"synchronized与wait()和notify()/notifyAll()方法结合实现等待/通知机制，ReentrantLock类借助Condition接口与newCondition()方法实现。\",\"ReentrantLock需要手工声明来加锁和释放锁，一般跟finally配合释放锁。而synchronized不用手动释放锁。\",\"下面的表格列出出了两种锁之间的区别：\"]},\"331\":{\"h\":\"29.AQS了解多少？\",\"t\":[\"AbstractQueuedSynchronizer 抽象同步队列，简称 AQS ，它是Java并发包的根基，并发包中的锁就是基于AQS实现的。\",\"AQS是基于一个FIFO的双向队列，其内部定义了一个节点类Node，Node 节点内部的 SHARED 用来标记该线程是获取共享资源时被阻挂起后放入AQS 队列的， EXCLUSIVE 用来标记线程是 取独占资源时被挂起后放入AQS 队列\",\"AQS 使用一个 volatile 修饰的 int 类型的成员变量 state 来表示同步状态，修改同步状态成功即为获得锁，volatile 保证了变量在多线程之间的可见性，修改 State 值时通过 CAS 机制来保证修改的原子性\",\"获取state的方式分为两种，独占方式和共享方式，一个线程使用独占方式获取了资源，其它线程就会在获取失败后被阻塞。一个线程使用共享方式获取了资源，另外一个线程还可以通过CAS的方式进行获取。\",\"如果共享资源被占用，需要一定的阻塞等待唤醒机制来保证锁的分配，AQS 中会将竞争共享资源失败的线程添加到一个变体的 CLH 队列中。\",\"AQS 中的队列是 CLH 变体的虚拟双向队列，通过将每条请求共享资源的线程封装成一个节点来实现锁的分配：\",\"AQS 中的 CLH 变体等待队列拥有以下特性：\",\"AQS 中队列是个双向链表，也是 FIFO 先进先出的特性\",\"通过 Head、Tail 头尾两个节点来组成队列结构，通过 volatile 修饰保证可见性\",\"Head 指向节点为已获得锁的节点，是一个虚拟节点，节点本身不持有具体线程\",\"获取不到同步状态，会将节点进行自旋获取锁，自旋一定次数失败后会将线程阻塞，相对于 CLH 队列性能较好\",\"ps:AQS源码里面有很多细节可问，建议有时间好好看看AQS源码。\"]},\"332\":{\"h\":\"30. ReentrantLock 实现原理？\",\"t\":[\"ReentrantLock 是可重入的独占锁，只能有一个线程可以获取该锁，其它获取该锁的线程会被阻塞而被放入该锁的阻塞队列里面。\",\"看看ReentrantLock的加锁操作：\",\"// 创建非公平锁 ReentrantLock lock = new ReentrantLock(); // 获取锁操作 lock.lock(); try { // 执行代码逻辑 } catch (Exception ex) { // ... } finally { // 解锁操作 lock.unlock(); } \",\"new ReentrantLock() 构造函数默认创建的是非公平锁 NonfairSync。\",\"公平锁 FairSync\",\"公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁\",\"公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU 唤醒阻塞线程的开销比非公平锁大\",\"非公平锁 NonfairSync\",\"非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁\",\"非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU 不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁\",\"默认创建的对象lock()的时候：\",\"如果锁当前没有被其它线程占用，并且当前线程之前没有获取过该锁，则当前线程会获取到该锁，然后设置当前锁的拥有者为当前线程，并设置 AQS 的状态值为1 ，然后直接返回。如果当前线程之前己经获取过该锁，则这次只是简单地把 AQS 的状态值加1后返回。\",\"如果该锁己经被其他线程持有，非公平锁会尝试去获取锁，获取失败的话，则调用该方法线程会被放入 AQS 队列阻塞挂起。\"]},\"333\":{\"h\":\"31.ReentrantLock怎么实现公平锁的？\",\"t\":[\"new ReentrantLock() 构造函数默认创建的是非公平锁 NonfairSync\",\"public ReentrantLock() { sync = new NonfairSync(); } \",\"同时也可以在创建锁构造函数中传入具体参数创建公平锁 FairSync\",\"ReentrantLock lock = new ReentrantLock(true); --- ReentrantLock // true 代表公平锁，false 代表非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \",\"FairSync、NonfairSync 代表公平锁和非公平锁，两者都是 ReentrantLock 静态内部类，只不过实现不同锁语义。\",\"非公平锁和公平锁的两处不同：\",\"非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。\",\"非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0）， 非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。\",\"相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。\"]},\"334\":{\"h\":\"32.CAS呢？CAS了解多少？\",\"t\":[\"CAS叫做CompareAndSwap，⽐较并交换，主要是通过处理器的指令来保证操作的原⼦性的。\",\"CAS 指令包含 3 个参数：共享变量的内存地址 A、预期的值 B 和共享变量的新值 C。\",\"只有当内存中地址 A 处的值等于 B 时，才能将内存中地址 A 处的值更新为新值 C。作为一条 CPU 指令，CAS 指令本身是能够保证原子性的 。\"]},\"335\":{\"h\":\"33.CAS 有什么问题？如何解决？\",\"t\":[\"CAS的经典三大问题：\"]},\"336\":{\"h\":\"ABA 问题\",\"t\":[\"并发环境下，假设初始条件是A，去修改数据时，发现是A就会执行修改。但是看到的虽然是A，中间可能发生了A变B，B又变回A的情况。此时A已经非彼A，数据即使成功修改，也可能有问题。\",\"怎么解决ABA问题？\",\"加版本号\",\"每次修改变量，都在这个变量的版本号上加1，这样，刚刚A->B->A，虽然A的值没变，但是它的版本号已经变了，再判断版本号就会发现此时的A已经被改过了。参考乐观锁的版本号，这种做法可以给数据带上了一种实效性的检验。\",\"Java提供了AtomicStampReference类，它的compareAndSet方法首先检查当前的对象引用值是否等于预期引用，并且当前印戳（Stamp）标志是否等于预期标志，如果全部相等，则以原子方式将引用值和印戳标志的值更新为给定的更新值。\"]},\"337\":{\"h\":\"循环性能开销\",\"t\":[\"自旋CAS，如果一直循环执行，一直不成功，会给CPU带来非常大的执行开销。\",\"怎么解决循环性能开销问题？\",\"在Java中，很多使用自旋CAS的地方，会有一个自旋次数的限制，超过一定次数，就停止自旋。\"]},\"338\":{\"h\":\"只能保证一个变量的原子操作\",\"t\":[\"CAS 保证的是对一个变量执行操作的原子性，如果对多个变量操作时，CAS 目前无法直接保证操作的原子性的。\",\"怎么解决只能保证一个变量的原子操作问题？\",\"可以考虑改用锁来保证操作的原子性\",\"可以考虑合并多个变量，将多个变量封装成一个对象，通过AtomicReference来保证原子性。\"]},\"339\":{\"h\":\"34.Java有哪些保证原子性的方法？如何保证多线程下i++ 结果正确？\",\"t\":[\"使用循环原子类，例如AtomicInteger，实现i++原子操作\",\"使用juc包下的锁，如ReentrantLock ，对i++操作加锁lock.lock()来实现原子性\",\"使用synchronized，对i++操作加锁\"]},\"340\":{\"h\":\"35.原子操作类了解多少？\",\"t\":[\"当程序更新一个变量时，如果多线程同时更新这个变量，可能得到期望之外的值，比如变量i=1，A线程更新i+1，B线程也更新i+1，经过两个线程操作之后可能i不等于3，而是等于2。因为A和B线程在更新变量i的时候拿到的i都是1，这就是线程不安全的更新操作，一般我们会使用synchronized来解决这个问题，synchronized会保证多线程不会同时更新变量i。\",\"其实除此之外，还有更轻量级的选择，Java从JDK 1.5开始提供了java.util.concurrent.atomic包，这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。\",\"因为变量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性（字段）。\",\"Atomic包里的类基本都是使用Unsafe实现的包装类。\",\"使用原子的方式更新基本类型，Atomic包提供了以下3个类：\",\"AtomicBoolean：原子更新布尔类型。\",\"AtomicInteger：原子更新整型。\",\"AtomicLong：原子更新长整型。\",\"通过原子的方式更新数组里的某个元素，Atomic包提供了以下4个类：\",\"AtomicIntegerArray：原子更新整型数组里的元素。\",\"AtomicLongArray：原子更新长整型数组里的元素。\",\"AtomicReferenceArray：原子更新引用类型数组里的元素。\",\"AtomicIntegerArray类主要是提供原子的方式更新数组里的整型\",\"原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下3个类：\",\"AtomicReference：原子更新引用类型。\",\"AtomicReferenceFieldUpdater：原子更新引用类型里的字段。\",\"AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference（V initialRef，boolean initialMark）。\",\"如果需原子地更新某个类里的某个字段时，就需要使用原子更新字段类，Atomic包提供了以下3个类进行原子字段更新：\",\"AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。\",\"AtomicLongFieldUpdater：原子更新长整型字段的更新器。\",\"AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更新数据和数据的版本号，可以解决使用CAS进行原子更新时可能出现的 ABA问题。\"]},\"341\":{\"h\":\"36.AtomicInteger 的原理？\",\"t\":[\"一句话概括：使用CAS实现。\",\"以AtomicInteger的添加方法为例：\",\" public final int getAndIncrement() { return unsafe.getAndAddInt(this, valueOffset, 1); } \",\"通过Unsafe类的实例来进行添加操作，来看看具体的CAS操作：\",\"public final int getAndAddInt(Object var1, long var2, int var4) { int var5; do { var5 = this.getIntVolatile(var1, var2); } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4)); return var5; } \",\"compareAndSwapInt 是一个native方法，基于CAS来操作int类型变量。其它的原子操作类基本都是大同小异。\"]},\"342\":{\"h\":\"37.线程死锁了解吗？该如何避免？\",\"t\":[\"死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的互相等待的现象，在无外力作用的情况下，这些线程会一直相互等待而无法继续运行下去。\",\"那么为什么会产生死锁呢？ 死锁的产生必须具备以下四个条件：\",\"互斥条件：指线程对己经获取到的资源进行它性使用，即该资源同时只由一个线程占用。如果此时还有其它线程请求获取获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。\",\"请求并持有条件：指一个 线程己经持有了至少一个资源，但又提出了新的资源请求，而新资源己被其它线程占有，所以当前线程会被阻塞，但阻塞 的同时并不释放自己已经获取的资源。\",\"不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其它线程抢占，只有在自己使用完毕后才由自己释放该资源。\",\"环路等待条件：指在发生死锁时，必然存在一个线程——资源的环形链，即线程集合 {T0，T1，T2,…… ，Tn} 中 T0 正在等待一 T1 占用的资源，Tl1正在等待 T2用的资源，…… Tn 在等待己被 T0占用的资源。\",\"该如何避免死锁呢？答案是至少破坏死锁发生的一个条件。\",\"其中，互斥这个条件我们没有办法破坏，因为用锁为的就是互斥。不过其他三个条件都是有办法破坏掉的，到底如何做呢？\",\"对于“请求并持有”这个条件，可以一次性请求所有的资源。\",\"对于“不可剥夺”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。\",\"对于“环路等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后就不存在环路了。\"]},\"343\":{\"h\":\"38.那死锁问题怎么排查呢？\",\"t\":[\"可以使用jdk自带的命令行工具排查：\",\"使用jps查找运行的Java进程：jps -l\",\"使用jstack查看线程堆栈信息：jstack -l 进程id\",\"基本就可以看到死锁的信息。\",\"还可以利用图形化工具，比如JConsole。出现线程死锁以后，点击JConsole线程面板的检测到死锁按钮，将会看到线程的死锁信息。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"344\":{\"h\":\"并发工具类\"},\"345\":{\"h\":\"39.CountDownLatch（倒计数器）了解吗？\",\"t\":[\"CountDownLatch，倒计数器，有两个常见的应用场景[18]：\",\"场景1：协调子线程结束动作：等待所有子线程运行结束\",\"CountDownLatch允许一个或多个线程等待其他线程完成操作。\",\"例如，我们很多人喜欢玩的王者荣耀，开黑的时候，得等所有人都上线之后，才能开打。\",\"CountDownLatch模仿这个场景(参考[18])：\",\"创建大乔、兰陵王、安其拉、哪吒和铠等五个玩家，主线程必须在他们都完成确认后，才可以继续运行。\",\"在这段代码中，new CountDownLatch(5)用户创建初始的latch数量，各玩家通过countDownLatch.countDown()完成状态确认，主线程通过countDownLatch.await()等待。\",\"public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(5); Thread 大乔 = new Thread(countDownLatch::countDown); Thread 兰陵王 = new Thread(countDownLatch::countDown); Thread 安其拉 = new Thread(countDownLatch::countDown); Thread 哪吒 = new Thread(countDownLatch::countDown); Thread 铠 = new Thread(() -> { try { // 稍等，上个卫生间，马上到... Thread.sleep(1500); countDownLatch.countDown(); } catch (InterruptedException ignored) {} }); 大乔.start(); 兰陵王.start(); 安其拉.start(); 哪吒.start(); 铠.start(); countDownLatch.await(); System.out.println(\\\"所有玩家已经就位！\\\"); } \",\"场景2. 协调子线程开始动作：统一各线程动作开始的时机\",\"王者游戏中也有类似的场景，游戏开始时，各玩家的初始状态必须一致。不能有的玩家都出完装了，有的才降生。\",\"所以大家得一块出生，在\",\"在这个场景中，仍然用五个线程代表大乔、兰陵王、安其拉、哪吒和铠等五个玩家。需要注意的是，各玩家虽然都调用了start()线程，但是它们在运行时都在等待countDownLatch的信号，在信号未收到前，它们不会往下执行。\",\"public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(1); Thread 大乔 = new Thread(() -> waitToFight(countDownLatch)); Thread 兰陵王 = new Thread(() -> waitToFight(countDownLatch)); Thread 安其拉 = new Thread(() -> waitToFight(countDownLatch)); Thread 哪吒 = new Thread(() -> waitToFight(countDownLatch)); Thread 铠 = new Thread(() -> waitToFight(countDownLatch)); 大乔.start(); 兰陵王.start(); 安其拉.start(); 哪吒.start(); 铠.start(); Thread.sleep(1000); countDownLatch.countDown(); System.out.println(\\\"敌方还有5秒达到战场，全军出击！\\\"); } private static void waitToFight(CountDownLatch countDownLatch) { try { countDownLatch.await(); // 在此等待信号再继续 System.out.println(\\\"收到，发起进攻！\\\"); } catch (InterruptedException e) { e.printStackTrace(); } } \",\"CountDownLatch的核心方法也不多：\",\"await()：等待latch降为0；\",\"boolean await(long timeout, TimeUnit unit)：等待latch降为0，但是可以设置超时时间。比如有玩家超时未确认，那就重新匹配，总不能为了某个玩家等到天荒地老。\",\"countDown()：latch数量减1；\",\"getCount()：获取当前的latch数量。\"]},\"346\":{\"h\":\"40.CyclicBarrier（同步屏障）了解吗？\",\"t\":[\"CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一 组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。\",\"它和CountDownLatch类似，都可以协调多线程的结束动作，在它们结束后都可以执行特定动作，但是为什么要有CyclicBarrier，自然是它有和CountDownLatch不同的地方。\",\"不知道你听没听过一个新人UP主小约翰可汗，小约翰生平有两大恨——“想结衣结衣不依,迷爱理爱理不理。”我们来还原一下事情的经过：小约翰在亲政后认识了新垣结衣，于是决定第一次选妃，向结衣表白，等待回应。然而新垣结衣回应嫁给了星野源，小约翰伤心欲绝，发誓生平不娶，突然发现了铃木爱理，于是小约翰决定第二次选妃，求爱理搭理，等待回应。\",\"我们拿代码模拟这一场景，发现CountDownLatch无能为力了，因为CountDownLatch的使用是一次性的，无法重复利用，而这里等待了两次。此时，我们用CyclicBarrier就可以实现，因为它可以重复利用。\",\"运行结果：\",\"CyclicBarrier最最核心的方法，仍然是await()：\",\"如果当前线程不是第一个到达屏障的话，它将会进入等待，直到其他线程都到达，除非发生被中断、屏障被拆除、屏障被重设等情况；\",\"上面的例子抽象一下，本质上它的流程就是这样就是这样：\"]},\"347\":{\"h\":\"41.CyclicBarrier和CountDownLatch有什么区别？\",\"t\":[\"两者最核心的区别[18]：\",\"CountDownLatch是一次性的，而CyclicBarrier则可以多次设置屏障，实现重复利用；\",\"CountDownLatch中的各个子线程不可以等待其他线程，只能完成自己的任务；而CyclicBarrier中的各个线程可以等待其他线程\",\"它们区别用一个表格整理：\",\"CyclicBarrier\",\"CountDownLatch\",\"CyclicBarrier是可重用的，其中的线程会等待所有的线程完成任务。届时，屏障将被拆除，并可以选择性地做一些特定的动作。\",\"CountDownLatch是一次性的，不同的线程在同一个计数器上工作，直到计数器为0.\",\"CyclicBarrier面向的是线程数\",\"CountDownLatch面向的是任务数\",\"在使用CyclicBarrier时，你必须在构造中指定参与协作的线程数，这些线程必须调用await()方法\",\"使用CountDownLatch时，则必须要指定任务数，至于这些任务由哪些线程完成无关紧要\",\"CyclicBarrier可以在所有的线程释放后重新使用\",\"CountDownLatch在计数器为0时不能再使用\",\"在CyclicBarrier中，如果某个线程遇到了中断、超时等问题时，则处于await的线程都会出现问题\",\"在CountDownLatch中，如果某个线程出现问题，其他线程不受影响\"]},\"348\":{\"h\":\"42.Semaphore（信号量）了解吗？\",\"t\":[\"Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。\",\"听起来似乎很抽象，现在汽车多了，开车出门在外的一个老大难问题就是停车 。停车场的车位是有限的，只能允许若干车辆停泊，如果停车场还有空位，那么显示牌显示的就是绿灯和剩余的车位，车辆就可以驶入； 如果停车场没位了，那么显示牌显示的就是绿灯和数字0，车辆就得等待。如果满了的停车场有车离开，那么显示牌就又变绿，显示空车位数量，等待的车辆就能进停车场。\",\"我们把这个例子类比一下，车辆就是线程，进入停车场就是线程在执行，离开停车场就是线程执行完毕，看见红灯就表示线程被阻塞，不能执行，Semaphore的本质就是协调多个线程对共享资源的获取。\",\"我们再来看一个Semaphore的用途：它可以用于做流量控制，特别是公用资源有限的应用场景，比如数据库连接。\",\"假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发地读取，但是如果读到内存后， 还需要存储到数据库中，而数据库的连接数只有10个，这时我们必须控制只有10个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。 这个时候，就可以使用Semaphore来做流量控制，如下：\",\"public class SemaphoreTest { private static final int THREAD_COUNT = 30; private static ExecutorService threadPool = Executors.newFixedThreadPool(THREAD_COUNT); private static Semaphore s = new Semaphore(10); public static void main(String[] args) { for (int i = 0; i < THREAD_COUNT; i++) { threadPool.execute(new Runnable() { @Override public void run() { try { s.acquire(); System.out.println(\\\"save data\\\"); s.release(); } catch (InterruptedException e) { } } }); } threadPool.shutdown(); } } \",\"在代码中，虽然有30个线程在执行，但是只允许10个并发执行。Semaphore的构造方法 Semaphore（int permits）接受一个整型的数字，表示可用的许可证数量。 Semaphore（10）表示允许10个线程获取许可证，也就是最大并发数是10。Semaphore的用法也很简单，首先线程使用 Semaphore的acquire()方法获取一个许可证， 使用完之后调用release()方法归还许可证。还可以用tryAcquire()方法尝试获取许可证。\"]},\"349\":{\"h\":\"43.Exchanger 了解吗？\",\"t\":[\"Exchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。\",\"这两个线程通过 exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法， 当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\",\"Exchanger可以用于遗传算法，遗传算法里需要选出两个人作为交配对象，这时候会交换两人的数据，并使用交叉规则得出2个交配结果。 Exchanger也可以用于校对工作，比如我们需要将纸制银行流水通过人工的方式录入成电子银行流水，为了避免错误，采用AB岗两人进行录入， 录入到Excel之后，系统需要加载这两个Excel，并对两个Excel数据进行校对，看看是否录入一致。\",\"public class ExchangerTest { private static final Exchanger<String> exgr = new Exchanger<String>(); private static ExecutorService threadPool = Executors.newFixedThreadPool(2); public static void main(String[] args) { threadPool.execute(new Runnable() { @Override public void run() { try { String A = \\\"银行流水A\\\"; // A录入银行流水数据 exgr.exchange(A); } catch (InterruptedException e) { } } }); threadPool.execute(new Runnable() { @Override public void run() { try { String B = \\\"银行流水B\\\"; // B录入银行流水数据 String A = exgr.exchange(\\\"B\\\"); System.out.println(\\\"A和B数据是否一致：\\\" + A.equals(B) + \\\"，A录入的是：\\\" + A + \\\"，B录入是：\\\" + B); } catch (InterruptedException e) { } } }); threadPool.shutdown(); } } \",\"假如两个线程有一个没有执行exchange()方法，则会一直等待，如果担心有特殊情况发生，避免一直等待，可以使用exchange(V x, long timeOut, TimeUnit unit) 设置最大等待时长。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"350\":{\"h\":\"线程池\"},\"351\":{\"h\":\"44.什么是线程池？\",\"t\":[\"线程池： 简单理解，它就是一个管理线程的池子。\",\"它帮我们管理线程，避免增加创建线程和销毁线程的资源损耗。因为线程其实也是一个对象，创建一个对象，需要经过类加载过程，销毁一个对象，需要走GC垃圾回收流程，都是需要资源开销的。\",\"提高响应速度。 如果任务到达了，相对于从线程池拿线程，重新去创建一条线程执行，速度肯定慢很多。\",\"重复利用。 线程用完，再放回池子，可以达到重复利用的效果，节省资源。\"]},\"352\":{\"h\":\"45.能说说工作中线程池的应用吗？\",\"t\":[\"之前我们有一个和第三方对接的需求，需要向第三方推送数据，引入了多线程来提升数据推送的效率，其中用到了线程池来管理线程。\",\"主要代码如下：\",\"完整可运行代码地址：https://gitee.com/fighter3/thread-demo.git\",\"线程池的参数如下：\",\"corePoolSize：线程核心参数选择了CPU数×2\",\"maximumPoolSize：最大线程数选择了和核心线程数相同\",\"keepAliveTime：非核心闲置线程存活时间直接置为0\",\"unit：非核心线程保持存活的时间选择了 TimeUnit.SECONDS 秒\",\"workQueue：线程池等待队列，使用 LinkedBlockingQueue阻塞队列\",\"同时还用了synchronized 来加锁，保证数据不会被重复推送：\",\" synchronized (PushProcessServiceImpl.class) {} \",\"ps:这个例子只是简单地进行了数据推送，实际上还可以结合其他的业务，像什么数据清洗啊、数据统计啊，都可以套用。\"]},\"353\":{\"h\":\"46.能简单说一下线程池的工作流程吗？\",\"t\":[\"用一个通俗的比喻：\",\"有一个营业厅，总共有六个窗口，现在开放了三个窗口，现在有三个窗口坐着三个营业员小姐姐在营业。\",\"老三去办业务，可能会遇到什么情况呢？\",\"老三发现有空间的在营业的窗口，直接去找小姐姐办理业务。\",\"老三发现没有空闲的窗口，就在排队区排队等。\",\"老三发现没有空闲的窗口，等待区也满了，蚌埠住了，经理一看，就让休息的小姐姐赶紧回来上班，等待区号靠前的赶紧去新窗口办，老三去排队区排队。小姐姐比较辛苦，假如一段时间发现他们可以不用接着营业，经理就让她们接着休息。\",\"老三一看，六个窗口都满了，等待区也没位置了。老三急了，要闹，经理赶紧出来了，经理该怎么办呢？\",\"我们银行系统已经瘫痪\",\"谁叫你来办的你找谁去\",\"看你比较急，去队里加个塞\",\"今天没办法，不行你看改一天\",\"上面的这个流程几乎就跟 JDK 线程池的大致流程类似，\",\"营业中的 3个窗口对应核心线程池数：corePoolSize\",\"总的营业窗口数6对应：maximumPoolSize\",\"打开的临时窗口在多少时间内无人办理则关闭对应：unit\",\"排队区就是等待队列：workQueue\",\"无法办理的时候银行给出的解决方法对应：RejectedExecutionHandler\",\"threadFactory 该参数在 JDK 中是 线程工厂，用来创建线程对象，一般不会动。\",\"所以我们线程池的工作流程也比较好理解了：\",\"线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。\",\"当调用 execute() 方法添加一个任务时，线程池会做如下判断：\",\"如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；\",\"如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；\",\"如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；\",\"如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会根据拒绝策略来对应处理。\",\"当一个线程完成任务时，它会从队列中取下一个任务来执行。\",\"当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。\"]},\"354\":{\"h\":\"47.线程池主要参数有哪些？\",\"t\":[\"线程池有七大参数，需要重点关注corePoolSize、maximumPoolSize、workQueue、handler这四个。\",\"corePoolSize\",\"此值是用来初始化线程池中核心线程数，当线程池中线程池数< corePoolSize时，系统默认是添加一个任务才创建一个线程池。当线程数 = corePoolSize时，新任务会追加到workQueue中。\",\"maximumPoolSize\",\"maximumPoolSize表示允许的最大线程数 = (非核心线程数+核心线程数)，当BlockingQueue也满了，但线程池中总线程数 < maximumPoolSize时候就会再次创建新的线程。\",\"keepAliveTime\",\"非核心线程 =(maximumPoolSize - corePoolSize ) ,非核心线程闲置下来不干活最多存活时间。\",\"unit\",\"线程池中非核心线程保持存活的时间的单位\",\"TimeUnit.DAYS; 天\",\"TimeUnit.HOURS; 小时\",\"TimeUnit.MINUTES; 分钟\",\"TimeUnit.SECONDS; 秒\",\"TimeUnit.MILLISECONDS; 毫秒\",\"TimeUnit.MICROSECONDS; 微秒\",\"TimeUnit.NANOSECONDS; 纳秒\",\"workQueue\",\"线程池等待队列，维护着等待执行的Runnable对象。当运行当线程数= corePoolSize时，新的任务会被添加到workQueue中，如果workQueue也满了则尝试用非核心线程执行任务，等待队列应该尽量用有界的。\",\"threadFactory\",\"创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等等。\",\"handler\",\"corePoolSize、workQueue、maximumPoolSize都不可用的时候执行的饱和策略。\"]},\"355\":{\"h\":\"48.线程池的拒绝策略有哪些？\",\"t\":[\"类比前面的例子，无法办理业务时的处理方式，帮助记忆：\",\"AbortPolicy ：直接抛出异常，默认使用此策略\",\"CallerRunsPolicy：用调用者所在的线程来执行任务\",\"DiscardOldestPolicy：丢弃阻塞队列里最老的任务，也就是队列里靠前的任务\",\"DiscardPolicy ：当前任务直接丢弃\",\"想实现自己的拒绝策略，实现RejectedExecutionHandler接口即可。\"]},\"356\":{\"h\":\"49.线程池有哪几种工作队列？\",\"t\":[\"常用的阻塞队列主要有以下几种：\",\"ArrayBlockingQueue：ArrayBlockingQueue（有界队列）是一个用数组实现的有界阻塞队列，按FIFO排序量。\",\"LinkedBlockingQueue：LinkedBlockingQueue（可设置容量队列）是基于链表结构的阻塞队列，按FIFO排序任务，容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE，吞吐量通常要高于ArrayBlockingQuene；newFixedThreadPool线程池使用了这个队列\",\"DelayQueue：DelayQueue（延迟队列）是一个任务定时周期的延迟执行的队列。根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。newScheduledThreadPool线程池使用了这个队列。\",\"PriorityBlockingQueue：PriorityBlockingQueue（优先级队列）是具有优先级的无界阻塞队列\",\"SynchronousQueue：SynchronousQueue（同步队列）是一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene，newCachedThreadPool线程池使用了这个队列。\"]},\"357\":{\"h\":\"50.线程池提交execute和submit有什么区别？\",\"t\":[\"execute 用于提交不需要返回值的任务\",\"threadsPool.execute(new Runnable() { @Override public void run() { // TODO Auto-generated method stub } }); \",\"submit()方法用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个 future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值\",\"Future<Object> future = executor.submit(harReturnValuetask); try { Object s = future.get(); } catch (InterruptedException e) { // 处理中断异常 } catch (ExecutionException e) { // 处理无法执行任务异常 } finally { // 关闭线程池 executor.shutdown(); } \"]},\"358\":{\"h\":\"51.线程池怎么关闭知道吗？\",\"t\":[\"可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。\",\"shutdown() 将线程池状态置为shutdown,并不会立即停止：\",\"停止接收外部submit的任务\",\"内部正在跑的任务和队列里等待的任务，会执行完\",\"等到第二步完成后，才真正停止\",\"shutdownNow() 将线程池状态置为stop。一般会立即停止，事实上不一定：\",\"和shutdown()一样，先停止接收外部提交的任务\",\"忽略队列里等待的任务\",\"尝试将正在跑的任务interrupt中断\",\"返回未执行的任务列表\",\"shutdown 和shutdownnow简单来说区别如下：\",\"shutdownNow()能立即停止线程池，正在跑的和正在等待的任务都停下了。这样做立即生效，但是风险也比较大。\",\"shutdown()只是关闭了提交通道，用submit()是无效的；而内部的任务该怎么跑还是怎么跑，跑完再彻底停止线程池。\"]},\"359\":{\"h\":\"52.线程池的线程数应该怎么配置？\",\"t\":[\"线程在Java中属于稀缺资源，线程池不是越大越好也不是越小越好。任务分为计算密集型、IO密集型、混合型。\",\"计算密集型：大部分都在用CPU跟内存，加密，逻辑操作业务处理等。\",\"IO密集型：数据库链接，网络通讯传输等。\",\"一般的经验，不同类型线程池的参数配置：\",\"计算密集型一般推荐线程池不要过大，一般是CPU数 + 1，+1是因为可能存在页缺失(就是可能存在有些数据在硬盘中需要多来一个线程将数据读入内存)。如果线程池数太大，可能会频繁的 进行线程上下文切换跟任务调度。获得当前CPU核心数代码如下：\",\"Runtime.getRuntime().availableProcessors(); \",\"IO密集型：线程数适当大一点，机器的Cpu核心数*2。\",\"混合型：可以考虑根绝情况将它拆分成CPU密集型和IO密集型任务，如果执行时间相差不大，拆分可以提升吞吐量，反之没有必要。\",\"当然，实际应用中没有固定的公式，需要结合测试和监控来进行调整。\"]},\"360\":{\"h\":\"53.有哪几种常见的线程池？\",\"t\":[\"面试常问，主要有四种，都是通过工具类Excutors创建出来的，需要注意，阿里巴巴《Java开发手册》里禁止使用这种方式来创建线程池。\",\"newFixedThreadPool (固定数目线程的线程池)\",\"newCachedThreadPool (可缓存线程的线程池)\",\"newSingleThreadExecutor (单线程的线程池)\",\"newScheduledThreadPool (定时及周期执行的线程池)\"]},\"361\":{\"h\":\"54.能说一下四种常见线程池的原理吗？\",\"t\":[\"前三种线程池的构造直接调用ThreadPoolExecutor的构造方法。\"]},\"362\":{\"h\":\"newSingleThreadExecutor\",\"t\":[\"public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), threadFactory)); } \",\"线程池特点\",\"核心线程数为1\",\"最大线程数也为1\",\"阻塞队列是无界队列LinkedBlockingQueue，可能会导致OOM\",\"keepAliveTime为0\",\"工作流程：\",\"提交任务\",\"线程池是否有一条线程在，如果没有，新建线程执行任务\",\"如果有，将任务加到阻塞队列\",\"当前的唯一线程，从队列取任务，执行完一个，再继续取，一个线程执行任务。\",\"适用场景\",\"适用于串行执行任务的场景，一个任务一个任务地执行。\"]},\"363\":{\"h\":\"newFixedThreadPool\",\"t\":[\"public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), threadFactory); } \",\"线程池特点：\",\"核心线程数和最大线程数大小一样\",\"没有所谓的非空闲时间，即keepAliveTime为0\",\"阻塞队列为无界队列LinkedBlockingQueue，可能会导致OOM\",\"工作流程：\",\"提交任务\",\"如果线程数少于核心线程，创建核心线程执行任务\",\"如果线程数等于核心线程，把任务添加到LinkedBlockingQueue阻塞队列\",\"如果线程执行完任务，去阻塞队列取任务，继续执行。\",\"使用场景\",\"FixedThreadPool 适用于处理CPU密集型的任务，确保CPU在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务。\"]},\"364\":{\"h\":\"newCachedThreadPool\",\"t\":[\"public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), threadFactory); } \",\"线程池特点：\",\"核心线程数为0\",\"最大线程数为Integer.MAX_VALUE，即无限大，可能会因为无限创建线程，导致OOM\",\"阻塞队列是SynchronousQueue\",\"非核心线程空闲存活时间为60秒\",\"当提交任务的速度大于处理任务的速度时，每次提交一个任务，就必然会创建一个线程。极端情况下会创建过多的线程，耗尽 CPU 和内存资源。由于空闲 60 秒的线程会被终止，长时间保持空闲的 CachedThreadPool 不会占用任何资源。\",\"工作流程：\",\"提交任务\",\"因为没有核心线程，所以任务直接加到SynchronousQueue队列。\",\"判断是否有空闲线程，如果有，就去取出任务执行。\",\"如果没有空闲线程，就新建一个线程执行。\",\"执行完任务的线程，还可以存活60秒，如果在这期间，接到任务，可以继续活下去；否则，被销毁。\",\"适用场景\",\"用于并发执行大量短期的小任务。\"]},\"365\":{\"h\":\"newScheduledThreadPool\",\"t\":[\"public ScheduledThreadPoolExecutor(int corePoolSize) { super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, new DelayedWorkQueue()); } \",\"线程池特点\",\"最大线程数为Integer.MAX_VALUE，也有OOM的风险\",\"阻塞队列是DelayedWorkQueue\",\"keepAliveTime为0\",\"scheduleAtFixedRate() ：按某种速率周期执行\",\"scheduleWithFixedDelay()：在某个延迟后执行\",\"工作机制\",\"线程从DelayQueue中获取已到期的ScheduledFutureTask（DelayQueue.take()）。到期任务是指ScheduledFutureTask的time大于等于当前时间。\",\"线程执行这个ScheduledFutureTask。\",\"线程修改ScheduledFutureTask的time变量为下次将要被执行的时间。\",\"线程把这个修改time之后的ScheduledFutureTask放回DelayQueue中（DelayQueue.add()）。\",\"使用场景\",\"周期性执行任务的场景，需要限制线程数量的场景\",\"使用无界队列的线程池会导致什么问题吗？\",\"例如newFixedThreadPool使用了无界的阻塞队列LinkedBlockingQueue，如果线程获取一个任务后，任务的执行时间比较长，会导致队列的任务越积越多，导致机器内存使用不停飙升，最终导致OOM。\"]},\"366\":{\"h\":\"55.线程池异常怎么处理知道吗？\",\"t\":[\"在使用线程池处理任务的时候，任务代码可能抛出RuntimeException，抛出异常后，线程池可能捕获它，也可能创建一个新的线程来代替异常的线程，我们可能无法感知任务出现了异常，因此我们需要考虑线程池异常情况。\",\"常见的异常处理方式：\"]},\"367\":{\"h\":\"56.能说一下线程池有几种状态吗？\",\"t\":[\"线程池有这几个状态：RUNNING,SHUTDOWN,STOP,TIDYING,TERMINATED。\",\"//线程池状态 private static final int RUNNING = -1 << COUNT_BITS; private static final int SHUTDOWN = 0 << COUNT_BITS; private static final int STOP = 1 << COUNT_BITS; private static final int TIDYING = 2 << COUNT_BITS; private static final int TERMINATED = 3 << COUNT_BITS; \",\"线程池各个状态切换图：\",\"RUNNING\",\"该状态的线程池会接收新任务，并处理阻塞队列中的任务;\",\"调用线程池的shutdown()方法，可以切换到SHUTDOWN状态;\",\"调用线程池的shutdownNow()方法，可以切换到STOP状态;\",\"SHUTDOWN\",\"该状态的线程池不会接收新任务，但会处理阻塞队列中的任务；\",\"队列为空，并且线程池中执行的任务也为空,进入TIDYING状态;\",\"STOP\",\"该状态的线程不会接收新任务，也不会处理阻塞队列中的任务，而且会中断正在运行的任务；\",\"线程池中执行的任务为空,进入TIDYING状态;\",\"TIDYING\",\"该状态表明所有的任务已经运行终止，记录的任务数量为0。\",\"terminated()执行完毕，进入TERMINATED状态\",\"TERMINATED\",\"该状态表示线程池彻底终止\"]},\"368\":{\"h\":\"57.线程池如何实现参数的动态修改？\",\"t\":[\"线程池提供了几个 setter方法来设置线程池的参数。\",\"这里主要有两个思路：\",\"在我们微服务的架构下，可以利用配置中心如Nacos、Apollo等等，也可以自己开发配置中心。业务服务读取线程池配置，获取相应的线程池实例来修改线程池的参数。\",\"如果限制了配置中心的使用，也可以自己去扩展ThreadPoolExecutor，重写方法，监听线程池参数变化，来动态修改线程池参数。\"]},\"369\":{\"h\":\"线程池调优了解吗？\",\"t\":[\"线程池配置没有固定的公式，通常事前会对线程池进行一定评估，常见的评估方案如下：\",\"上线之前也要进行充分的测试，上线之后要建立完善的线程池监控机制。\",\"事中结合监控告警机制，分析线程池的问题，或者可优化点，结合线程池动态参数配置机制来调整配置。\",\"事后要注意仔细观察，随时调整。\",\"具体的调优案例可以查看参考[7]美团技术博客。\"]},\"370\":{\"h\":\"58.你能设计实现一个线程池吗？\",\"t\":[\"⭐这道题在阿里的面试中出现频率比较高\",\"线程池实现原理可以查看 要是以前有人这么讲线程池，我早就该明白了！ ，当然，我们自己实现， 只需要抓住线程池的核心流程-参考[6]：\",\"我们自己的实现就是完成这个核心流程：\",\"线程池中有N个工作线程\",\"把任务提交给线程池运行\",\"如果线程池已满，把任务放入队列\",\"最后当有空闲时，获取队列中任务来执行\",\"实现代码[6]：\",\"这样，一个实现了线程池主要流程的类就完成了。\"]},\"371\":{\"h\":\"59.单机线程池执行断电了应该怎么处理？\",\"t\":[\"我们可以对正在处理和阻塞队列的任务做事务管理或者对阻塞队列中的任务持久化处理，并且当断电或者系统崩溃，操作无法继续下去的时候，可以通过回溯日志的方式来撤销正在处理的已经执行成功的操作。然后重新执行整个阻塞队列。\",\"也就是说，对阻塞队列持久化；正在处理任务事务控制；断电之后正在处理任务的回滚，通过日志恢复该次操作；服务器重启后阻塞队列中的数据再加载。\"]},\"372\":{\"h\":\"并发容器和框架\",\"t\":[\"关于一些并发容器，可以去看看 面渣逆袭：Java集合连环三十问 ，里面有CopyOnWriteList和ConcurrentHashMap这两种线程安全容器类的问答。。\"]},\"373\":{\"h\":\"60.Fork/Join框架了解吗？\",\"t\":[\"Fork/Join框架是Java7提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。\",\"要想掌握Fork/Join框架，首先需要理解两个点，分而治之和工作窃取算法。\",\"分而治之\",\"Fork/Join框架的定义，其实就体现了分治思想：将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。\",\"工作窃取算法\",\"大任务拆成了若干个小任务，把这些小任务放到不同的队列里，各自创建单独线程来执行队列里的任务。\",\"那么问题来了，有的线程干活块，有的线程干活慢。干完活的线程不能让它空下来，得让它去帮没干完活的线程干活。它去其它线程的队列里窃取一个任务来执行，这就是所谓的工作窃取。\",\"工作窃取发生的时候，它们会访问同一个队列，为了减少窃取任务线程和被窃取任务线程之间的竞争，通常任务会使用双端队列，被窃取任务线程永远从双端队列的头部拿，而窃取任务的线程永远从双端队列的尾部拿任务执行。\",\"看一个Fork/Join框架应用的例子，计算1~n之间的和：1+2+3+…+n\",\"设置一个分割阈值，任务大于阈值就拆分任务\",\"任务有结果，所以需要继承RecursiveTask\",\"public class CountTask extends RecursiveTask<Integer> { private static final int THRESHOLD = 16; // 阈值 private int start; private int end; public CountTask(int start, int end) { this.start = start; this.end = end; } @Override protected Integer compute() { int sum = 0; // 如果任务足够小就计算任务 boolean canCompute = (end - start) <= THRESHOLD; if (canCompute) { for (int i = start; i <= end; i++) { sum += i; } } else { // 如果任务大于阈值，就分裂成两个子任务计算 int middle = (start + end) / 2; CountTask leftTask = new CountTask(start, middle); CountTask rightTask = new CountTask(middle + 1, end); // 执行子任务 leftTask.fork(); rightTask.fork(); // 等待子任务执行完，并得到其结果 int leftResult = leftTask.join(); int rightResult = rightTask.join(); // 合并子任务 sum = leftResult + rightResult; } return sum; } public static void main(String[] args) { ForkJoinPool forkJoinPool = new ForkJoinPool(); // 生成一个计算任务，负责计算1+2+3+4 CountTask task = new CountTask(1, 100); // 执行一个任务 Future<Integer> result = forkJoinPool.submit(task); try { System.out.println(result.get()); } catch (InterruptedException e) { } catch (ExecutionException e) { } } } \",\"ForkJoinTask与一般Task的主要区别在于它需要实现compute方法，在这个方法里，首先需要判断任务是否足够小，如果足够小就直接执行任务。如果比较大，就必须分割成两个子任务，每个子任务在调用fork方法时，又会进compute方法，看看当前子任务是否需要继续分割成子任务，如果不需要继续分割，则执行当前子任务并返回结果。使用join方法会等待子任务执行完并得到其结果。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\",\"图文详解 60 道Java并发面试高频题，这次面试，一定吊打面试官，整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"374\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"2.1 万字 92 张手绘图，详解 60 道 Java 多线程面试高频题（让天下没有难背的八股），面渣背会这些并发编程八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/javathread.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"2.1 万字 92 张手绘图，详解 60 道 Java 多线程面试高频题（让天下没有难背的八股），面渣背会这些并发编程八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"375\":{\"h\":\"\",\"t\":[\"1.5 万字 51 张手绘图，详解 50 道 Java 虚拟机面试高频题（让天下没有难背的八股），面渣背会这些 JVM 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"376\":{\"h\":\"一、引言\"},\"377\":{\"h\":\"1.什么是 JVM?\",\"t\":[\"JVM——Java 虚拟机，它是 Java 实现平台无关性的基石。\",\"Java 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。\",\"同时 JVM 也是一个跨语言的平台，和语言无关，只和 class 的文件格式关联，任何语言，只要能翻译成符合规范的字节码文件，都能被 JVM 运行。\"]},\"378\":{\"h\":\"二、内存管理\"},\"379\":{\"h\":\"2.能说一下 JVM 的内存区域吗？\",\"t\":[\"JVM 内存区域最粗略的划分可以分为堆和栈，当然，按照虚拟机规范，可以划分为以下几个区域：\",\"JVM 内存分为线程私有区和线程共享区，其中方法区和堆是线程共享区，虚拟机栈、本地方法栈和程序计数器是线程隔离的数据区。\",\"1）程序计数器\",\"程序计数器（Program Counter Register）也被称为 PC 寄存器，是一块较小的内存空间。\",\"它可以看作是当前线程所执行的字节码的行号指示器。\",\"2）Java 虚拟机栈\",\"Java 虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。\",\"Java 虚拟机栈描述的是 Java 方法执行的线程内存模型：方法执行时，JVM 会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。\",\"3）本地方法栈\",\"本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别只是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。\",\"Java 虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的。\",\"4）Java 堆\",\"对于 Java 应用程序来说，Java 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java 里“几乎”所有的对象实例都在这里分配内存。\",\"Java 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”（Garbage Collected Heap，）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现新生代、老年代、Eden空间、From Survivor空间、To Survivor空间等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是 Java 虚拟机规范本身制定的。\",\"5）方法区\",\"方法区是比较特别的一块区域，和堆类似，它也是各个线程共享的内存区域，用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\",\"它特别在 Java 虚拟机规范对它的约束非常宽松，所以方法区的具体实现历经了许多变迁，例如 jdk1.7 之前使用永久代作为方法区的实现。\"]},\"380\":{\"h\":\"3.说一下 JDK1.6、1.7、1.8 内存区域的变化？\",\"t\":[\"JDK1.6、1.7/1.8 内存区域发生了变化，主要体现在方法区的实现：\",\"JDK1.6 使用永久代实现方法区：\",\"JDK1.7 时发生了一些变化，将字符串常量池、静态变量，存放在堆上\",\"在 JDK1.8 时彻底干掉了永久代，而在直接内存中划出一块区域作为元空间，运行时常量池、类常量池都移动到元空间。\"]},\"381\":{\"h\":\"4.为什么使用元空间替代永久代作为方法区的实现？\",\"t\":[\"Java 虚拟机规范规定的方法区只是换种方式实现。有客观和主观两个原因。\",\"客观上使用永久代来实现方法区的决定的设计导致了 Java 应用更容易遇到内存溢出的问题（永久代有-XX：MaxPermSize 的上限，即使不设置也有默认大小，而 J9 和 JRockit 只要没有触碰到进程可用内存的上限，例如 32 位系统中的 4GB 限制，就不会出问题），而且有极少数方法 （例如 String::intern()）会因永久代的原因而导致不同虚拟机下有不同的表现。\",\"主观上当 Oracle 收购 BEA 获得了 JRockit 的所有权后，准备把 JRockit 中的优秀功能，譬如 Java Mission Control 管理工具，移植到 HotSpot 虚拟机时，但因为两者对方法区实现的差异而面临诸多困难。考虑到 HotSpot 未来的发展，在 JDK 6 的 时候 HotSpot 开发团队就有放弃永久代，逐步改为采用本地内存（Native Memory）来实现方法区的计划了，到了 JDK 7 的 HotSpot，已经把原本放在永久代的字符串常量池、静态变量等移出，而到了 JDK 8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Meta-space）来代替，把 JDK 7 中永久代还剩余的内容（主要是类型信息）全部移到元空间中。\"]},\"382\":{\"h\":\"5.对象创建的过程了解吗？\",\"t\":[\"在 JVM 中对象的创建，我们从一个 new 指令开始：\",\"首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用\",\"检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，就先执行相应的类加载过程\",\"类加载检查通过后，接下来虚拟机将为新生对象分配内存。\",\"内存分配完成之后，虚拟机将分配到的内存空间（但不包括对象头）都初始化为零值。\",\"接下来设置对象头，请求头里包含了对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。\",\"这个过程大概图示如下：\"]},\"383\":{\"h\":\"6.什么是指针碰撞？什么是空闲列表？\",\"t\":[\"内存分配有两种方式，指针碰撞（Bump The Pointer）、空闲列表（Free List）。\",\"指针碰撞：假设 Java 堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”。\",\"空闲列表：如果 Java 堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。\",\"两种方式的选择由 Java 堆是否规整决定，Java 堆是否规整是由选择的垃圾收集器是否具有压缩整理能力决定的。\"]},\"384\":{\"h\":\"7.JVM 里 new 对象时，堆会发生抢占吗？JVM 是怎么设计来保证线程安全的？\",\"t\":[\"会，假设 JVM 虚拟机上，每一次 new 对象时，指针就会向右移动一个对象 size 的距离，一个线程正在给 A 对象分配内存，指针还没有来的及修改，另一个为 B 对象分配内存的线程，又引用了这个指针来分配内存，这就发生了抢占。\",\"有两种可选方案来解决这个问题：\",\"采用 CAS 分配重试的方式来保证更新操作的原子性\",\"每个线程在 Java 堆中预先分配一小块内存，也就是本地线程分配缓冲（Thread Local Allocation\",\"Buffer，TLAB），要分配内存的线程，先在本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。\"]},\"385\":{\"h\":\"8.能说一下对象的内存布局吗？\",\"t\":[\"在 HotSpot 虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。\",\"对象头主要由两部分组成：\",\"第一部分存储对象自身的运行时数据：哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，官方称它为 Mark Word，它是个动态的结构，随着对象状态变化。\",\"第二部分是类型指针，指向对象的类元数据类型（即对象代表哪个类）。\",\"此外，如果对象是一个 Java 数组，那还应该有一块用于记录数组长度的数据\",\"实例数据用来存储对象真正的有效信息，也就是我们在程序代码里所定义的各种类型的字段内容，无论是从父类继承的，还是自己定义的。\",\"对齐填充不是必须的，没有特别含义，仅仅起着占位符的作用。\"]},\"386\":{\"h\":\"9.对象怎么访问定位？\",\"t\":[\"Java 程序会通过栈上的 reference 数据来操作堆上的具体对象。由于 reference 类型在《Java 虚拟机规范》里面只规定了它是一个指向对象的引用，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象的具体位置，所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种：\",\"如果使用句柄访问的话，Java 堆中将可能会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息，其结构如图所示：\",\"如果使用直接指针访问的话，Java 堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference 中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销，如图所示：\",\"这两种对象访问方式各有优势，使用句柄来访问的最大好处就是 reference 中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要被修改。\",\"使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本。\",\"HotSpot 虚拟机主要使用直接指针来进行对象访问。\"]},\"387\":{\"h\":\"10.内存溢出和内存泄漏是什么意思？\",\"t\":[\"内存泄露就是申请的内存空间没有被正确释放，导致内存被白白占用。\",\"内存溢出就是申请的内存超过了可用内存，内存不够了。\",\"两者关系：内存泄露可能会导致内存溢出。\",\"用一个有味道的比喻，内存溢出就是排队去蹲坑，发现没坑位了，内存泄漏，就是有人占着茅坑不拉屎，占着茅坑不拉屎的多了可能会导致坑位不够用。\"]},\"388\":{\"h\":\"11.能手写内存溢出的例子吗？\",\"t\":[\"在 JVM 的几个内存区域中，除了程序计数器外，其他几个运行时区域都有发生内存溢出（OOM）异常的可能，重点关注堆和栈。\",\"Java 堆溢出\",\"Java 堆用于储存对象实例，只要不断创建不可被回收的对象，比如静态对象，那么随着对象数量的增加，总容量触及最大堆的容量限制后就会产生内存溢出异常（OutOfMemoryError）。\",\"这就相当于一个房子里，不断堆积不能被收走的杂物，那么房子很快就会被堆满了。\",\"/** * VM参数： -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError */ public class HeapOOM { static class OOMObject { } public static void main(String[] args) { List<OOMObject> list = new ArrayList<OOMObject>(); while (true) { list.add(new OOMObject()); } } } \",\"虚拟机栈.OutOfMemoryError\",\"JDK 使用的 HotSpot 虚拟机的栈内存大小是固定的，我们可以把栈的内存设大一点，然后不断地去创建线程，因为操作系统给每个进程分配的内存是有限的，所以到最后，也会发生 OutOfMemoryError 异常。\",\"/** * vm参数：-Xss2M */ public class JavaVMStackOOM { private void dontStop() { while (true) { } } public void stackLeakByThread() { while (true) { Thread thread = new Thread(new Runnable() { public void run() { dontStop(); } }); thread.start(); } } public static void main(String[] args) throws Throwable { JavaVMStackOOM oom = new JavaVMStackOOM(); oom.stackLeakByThread(); } } \"]},\"389\":{\"h\":\"12.内存泄漏可能由哪些原因导致呢？\",\"t\":[\"内存泄漏可能的原因有很多种：\",\"静态集合类引起内存泄漏\",\"静态集合的生命周期和 JVM 一致，所以静态集合引用的对象不能被释放。\",\"public class OOM { static List list = new ArrayList(); public void oomTests(){ Object obj = new Object(); list.add(obj); } } \",\"单例模式\",\"和上面的例子原理类似，单例对象在初始化后会以静态变量的方式在 JVM 的整个生命周期中存在。如果单例对象持有外部的引用，那么这个外部对象将不能被 GC 回收，导致内存泄漏。\",\"数据连接、IO、Socket 等连接\",\"创建的连接不再使用时，需要调用 close 方法关闭连接，只有连接被关闭后，GC 才会回收对应的对象（Connection，Statement，ResultSet，Session）。忘记关闭这些资源会导致持续占有内存，无法被 GC 回收。\",\"try { Connection conn = null; Class.forName(\\\"com.mysql.jdbc.Driver\\\"); conn = DriverManager.getConnection(\\\"url\\\", \\\"\\\", \\\"\\\"); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(\\\"....\\\"); } catch (Exception e) { }finally { //不关闭连接 } \",\"变量不合理的作用域\",\"一个变量的定义作用域大于其使用范围，很可能存在内存泄漏；或不再使用对象没有及时将对象设置为 null，很可能导致内存泄漏的发生。\",\"public class Simple { Object object; public void method1(){ object = new Object(); //...其他代码 //由于作用域原因，method1执行完成之后，object 对象所分配的内存不会马上释放 object = null; } } \",\"hash 值发生变化\",\"对象 Hash 值改变，使用 HashMap、HashSet 等容器中时候，由于对象修改之后的 Hah 值和存储进容器时的 Hash 值不同，所以无法找到存入的对象，自然也无法单独删除了，这也会造成内存泄漏。说句题外话，这也是为什么 String 类型被设置成了不可变类型。\",\"ThreadLocal 使用不当\",\"ThreadLocal 的弱引用导致内存泄漏也是个老生常谈的话题了，使用完 ThreadLocal 一定要记得使用 remove 方法来进行清除。\"]},\"390\":{\"h\":\"13.如何判断对象仍然存活？\",\"t\":[\"有两种方式，**引用计数算法（reference counting）**和可达性分析算法。\",\"引用计数算法\",\"引用计数器的算法是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。\",\"可达性分析算法\",\"目前 Java 虚拟机的主流垃圾回收器采取的是可达性分析算法。这个算法的实质在于将一系列 GC Roots 作为初始的存活对象合集（Gc Root Set），然后从该合集出发，探索所有能够被该集合引用到的对象，并将其加入到该集合中，这个过程我们也称之为标记（mark）。最终，未被探索到的对象便是死亡的，是可以回收的。 \"]},\"391\":{\"h\":\"14.Java 中可作为 GC Roots 的对象有哪几种？\",\"t\":[\"可以作为 GC Roots 的主要有四种对象：\",\"虚拟机栈(栈帧中的本地变量表)中引用的对象\",\"方法区中类静态属性引用的对象\",\"方法区中常量引用的对象\",\"本地方法栈中 JNI 引用的对象\"]},\"392\":{\"h\":\"15.说一下对象有哪几种引用？\",\"t\":[\"Java 中的引用有四种，分为强引用（Strongly Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4 种，这 4 种引用强度依次逐渐减弱。\",\"强引用是最传统的引用的定义，是指在程序代码之中普遍存在的引用赋值，无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\",\"Object obj =new Object(); \",\"软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存， 才会抛出内存溢出异常。在 JDK 1.2 版之后提供了 SoftReference 类来实现软引用。\",\"Object obj = new Object(); ReferenceQueue queue = new ReferenceQueue(); SoftReference reference = new SoftReference(obj, queue); //强引用对象滞空，保留软引用 obj = null; \",\"弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK 1.2 版之后提供了 WeakReference 类来实现弱引用。\",\"Object obj = new Object(); ReferenceQueue queue = new ReferenceQueue(); WeakReference reference = new WeakReference(obj, queue); //强引用对象滞空，保留软引用 obj = null; \",\"虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在 JDK 1.2 版之后提供了 PhantomReference 类来实现虚引用。\",\"Object obj = new Object(); ReferenceQueue queue = new ReferenceQueue(); PhantomReference reference = new PhantomReference(obj, queue); //强引用对象滞空，保留软引用 obj = null; \"]},\"393\":{\"h\":\"16.finalize()方法了解吗？有什么作用？\",\"t\":[\"用一个不太贴切的比喻，垃圾回收就是古代的秋后问斩，finalize()就是刀下留人，在人犯被处决之前，还要做最后一次审计，青天大老爷看看有没有什么冤情，需不需要刀下留人。\",\"如果对象在进行可达性分析后发现没有与 GC Roots 相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行 finalize()方法。如果对象在在 finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己 （this 关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它就”逃过一劫“；但是如果没有抓住这个机会，那么对象就真的要被回收了。\"]},\"394\":{\"h\":\"17.Java 堆的内存分区了解吗？\",\"t\":[\"按照垃圾收集，将 Java 堆划分为**新生代 （Young Generation）和老年代（Old Generation）**两个区域，新生代存放存活时间短的对象，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。\",\"而新生代又可以分为三个区域，eden、from、to，比例是 8：1：1，而新生代的内存分区同样是从垃圾收集的角度来分配的。\"]},\"395\":{\"h\":\"18.垃圾收集算法了解吗？\",\"t\":[\"垃圾收集算法主要有三种：\",\"标记-清除算法\",\"见名知义，标记-清除（Mark-Sweep）算法分为两个阶段：\",\"标记 : 标记出所有需要回收的对象\",\"清除：回收所有被标记的对象\",\"标记-清除算法比较基础，但是主要存在两个缺点：\",\"执行效率不稳定，如果 Java 堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。\",\"内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\",\"标记-复制算法\",\"标记-复制算法解决了标记-清除算法面对大量可回收对象时执行效率低的问题。\",\"过程也比较简单：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。\",\"这种算法存在一个明显的缺点：一部分空间没有使用，存在空间的浪费。\",\"新生代垃圾收集主要采用这种算法，因为新生代的存活对象比较少，每次复制的只是少量的存活对象。当然，实际新生代的收集不是按照这个比例。\",\"标记-整理算法\",\"为了降低内存的消耗，引入一种针对性的算法：标记-整理（Mark-Compact）算法。\",\"其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。\",\"标记-整理算法主要用于老年代，移动存活对象是个极为负重的操作，而且这种操作需要 Stop The World 才能进行，只是从整体的吞吐量来考量，老年代使用标记-整理算法更加合适。\"]},\"396\":{\"h\":\"19.说一下新生代的区域划分？\",\"t\":[\"新生代的垃圾收集主要采用标记-复制算法，因为新生代的存活对象比较少，每次复制少量的存活对象效率比较高。\",\"基于这种算法，虚拟机将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次分配内存只使用 Eden 和其中一块 Survivor。发生垃圾收集时，将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已用过的那块 Survivor 空间。默认 Eden 和 Survivor 的大小比例是 8∶1。\"]},\"397\":{\"h\":\"20.Minor GC/Young GC、Major GC/Old GC、Mixed GC、Full GC 都是什么意思？\",\"t\":[\"部分收集（Partial GC）：指目标不是完整收集整个 Java 堆的垃圾收集，其中又分为：\",\"新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。\",\"老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS 收集器会有单独收集老年代的行为。\",\"混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有 G1 收集器会有这种行为。\",\"整堆收集（Full GC）：收集整个 Java 堆和方法区的垃圾收集。\"]},\"398\":{\"h\":\"21.Minor GC/Young GC 什么时候触发？\",\"t\":[\"新创建的对象优先在新生代 Eden 区进行分配，如果 Eden 区没有足够的空间时，就会触发 Young GC 来清理新生代。\"]},\"399\":{\"h\":\"22.什么时候会触发 Full GC？\",\"t\":[\"这个触发条件稍微有点多，往下看：\",\"Young GC 之前检查老年代：在要进行 Young GC 的时候，发现老年代可用的连续内存空间 < 新生代历次Young GC后升入老年代的对象总和的平均大小，说明本次 Young GC 后可能升入老年代的对象大小，可能超过了老年代当前可用内存空间,那就会触发 Full GC。\",\"Young GC 之后老年代空间不足：执行 Young GC 之后有一批对象需要放入老年代，此时老年代就是没有足够的内存空间存放这些对象了，此时必须立即触发一次 Full GC\",\"老年代空间不足，老年代内存使用率过高，达到一定比例，也会触发 Full GC。\",\"空间分配担保失败（ Promotion Failure），新生代的 To 区放不下从 Eden 和 From 拷贝过来对象，或者新生代对象 GC 年龄到达阈值需要晋升这两种情况，老年代如果放不下的话都会触发 Full GC。\",\"方法区内存空间不足：如果方法区由永久代实现，永久代空间不足 Full GC。\",\"System.gc()等命令触发：System.gc()、jmap -dump 等命令会触发 full gc。\"]},\"400\":{\"h\":\"23.对象什么时候会进入老年代？\",\"t\":[\"长期存活的对象将进入老年代\",\"在对象的对象头信息中存储着对象的迭代年龄,迭代年龄会在每次 YoungGC 之后对象的移区操作中增加,每一次移区年龄加一.当这个年龄达到 15(默认)之后,这个对象将会被移入老年代。\",\"可以通过这个参数设置这个年龄值。\",\"- XX:MaxTenuringThreshold \",\"大对象直接进入老年代\",\"有一些占用大量连续内存空间的对象在被加载就会直接进入老年代.这样的大对象一般是一些数组,长字符串之类的对。\",\"HotSpot 虚拟机提供了这个参数来设置。\",\"-XX：PretenureSizeThreshold \",\"动态对象年龄判定\",\"为了能更好地适应不同程序的内存状况，HotSpot 虚拟机并不是永远要求对象的年龄必须达到- XX：MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。\",\"空间分配担保\",\"假如在 Young GC 之后，新生代仍然有大量对象存活，就需要老年代进行分配担保，把 Survivor 无法容纳的对象直接送入老年代。\"]},\"401\":{\"h\":\"24.知道有哪些垃圾收集器吗？\",\"t\":[\"主要垃圾收集器如下，图中标出了它们的工作区域、垃圾收集算法，以及配合关系。\",\"这些收集器里，面试的重点是两个——CMS和G1。\",\"Serial 收集器\",\"Serial 收集器是最基础、历史最悠久的收集器。\",\"如同它的名字（串行），它是一个单线程工作的收集器，使用一个处理器或一条收集线程去完成垃圾收集工作。并且进行垃圾收集时，必须暂停其他所有工作线程，直到垃圾收集结束——这就是所谓的“Stop The World”。\",\"Serial/Serial Old 收集器的运行过程如图：\",\"ParNew\",\"ParNew 收集器实质上是 Serial 收集器的多线程并行版本，使用多条线程进行垃圾收集。\",\"ParNew/Serial Old 收集器运行示意图如下：\",\"Parallel Scavenge\",\"Parallel Scavenge 收集器是一款新生代收集器，基于标记-复制算法实现，也能够并行收集。和 ParNew 有些类似，但 Parallel Scavenge 主要关注的是垃圾收集的吞吐量——所谓吞吐量，就是 CPU 用于运行用户代码的时间和总消耗时间的比值，比值越大，说明垃圾收集的占比越小。\",\"Serial Old\",\"Serial Old 是 Serial 收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。\",\"Parallel Old\",\"Parallel Old 是 Parallel Scavenge 收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。\",\"CMS 收集器\",\"CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，同样是老年代的收集器，采用标记-清除算法。\",\"Garbage First 收集器\",\"Garbage First（简称 G1）收集器是垃圾收集器的一个颠覆性的产物，它开创了局部收集的设计思路和基于 Region 的内存布局形式。\"]},\"402\":{\"h\":\"25.什么是 Stop The World ? 什么是 OopMap ？什么是安全点？\",\"t\":[\"进行垃圾回收的过程中，会涉及对象的移动。为了保证对象引用更新的正确性，必须暂停所有的用户线程，像这样的停顿，虚拟机设计者形象描述为Stop The World。也简称为 STW。\",\"在 HotSpot 中，有个数据结构（映射表）称为OopMap。一旦类加载动作完成的时候，HotSpot 就会把对象内什么偏移量上是什么类型的数据计算出来，记录到 OopMap。在即时编译过程中，也会在特定的位置生成 OopMap，记录下栈上和寄存器里哪些位置是引用。\",\"这些特定的位置主要在：\",\"1.循环的末尾（非 counted 循环）\",\"2.方法临返回前 / 调用方法的 call 指令后\",\"3.可能抛异常的位置\",\"这些位置就叫作安全点(safepoint)。 用户程序执行时并非在代码指令流的任意位置都能够在停顿下来开始垃圾收集，而是必须是执行到安全点才能够暂停。\",\"用通俗的比喻，假如老王去拉车，车上东西很重，老王累的汗流浃背，但是老王不能在上坡或者下坡休息，只能在平地上停下来擦擦汗，喝口水。\"]},\"403\":{\"h\":\"26.能详细说一下 CMS 收集器的垃圾收集过程吗？\",\"t\":[\"CMS 收集齐的垃圾收集分为四步：\",\"初始标记（CMS initial mark）：单线程运行，需要 Stop The World，标记 GC Roots 能直达的对象。\",\"并发标记（（CMS concurrent mark）：无停顿，和用户线程同时运行，从 GC Roots 直达对象开始遍历整个对象图。\",\"重新标记（CMS remark）：多线程运行，需要 Stop The World，标记并发标记阶段产生对象。\",\"并发清除（CMS concurrent sweep）：无停顿，和用户线程同时运行，清理掉标记阶段标记的死亡的对象。\",\"Concurrent Mark Sweep 收集器运行示意图如下：\"]},\"404\":{\"h\":\"27.G1 垃圾收集器了解吗？\",\"t\":[\"Garbage First（简称 G1）收集器是垃圾收集器的一个颠覆性的产物，它开创了局部收集的设计思路和基于 Region 的内存布局形式。\",\"虽然 G1 也仍是遵循分代收集理论设计的，但其堆内存的布局与其他收集器有非常明显的差异。以前的收集器分代是划分新生代、老年代、持久代等。\",\"G1 把连续的 Java 堆划分为多个大小相等的独立区域（Region），每一个 Region 都可以根据需要，扮演新生代的 Eden 空间、Survivor 空间，或者老年代空间。收集器能够对扮演不同角色的 Region 采用不同的策略去处理。\",\"这样就避免了收集整个堆，而是按照若干个 Region 集进行收集，同时维护一个优先级列表，跟踪各个 Region 回收的“价值，优先收集价值高的 Region。\",\"G1 收集器的运行过程大致可划分为以下四个步骤：\",\"初始标记（initial mark），标记了从 GC Root 开始直接关联可达的对象。STW（Stop the World）执行。\",\"并发标记（concurrent marking），和用户线程并发执行，从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象、\",\"最终标记（Remark），STW，标记再并发标记过程中产生的垃圾。\",\"筛选回收（Live Data Counting And Evacuation），制定回收计划，选择多个 Region 构成回收集，把回收集中 Region 的存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间。需要 STW。\"]},\"405\":{\"h\":\"28.有了 CMS，为什么还要引入 G1？\",\"t\":[\"优点：CMS 最主要的优点在名字上已经体现出来——并发收集、低停顿。\",\"缺点：CMS 同样有三个明显的缺点。\",\"Mark Sweep 算法会导致内存碎片比较多\",\"CMS 的并发能力比较依赖于 CPU 资源，并发回收时垃圾收集线程可能会抢占用户线程的资源，导致用户程序性能下降。\",\"并发清除阶段，用户线程依然在运行，会产生所谓的理“浮动垃圾”（Floating Garbage），本次垃圾收集无法处理浮动垃圾，必须到下一次垃圾收集才能处理。如果浮动垃圾太多，会触发新的垃圾回收，导致性能降低。\",\"G1 主要解决了内存碎片过多的问题。\"]},\"406\":{\"h\":\"29.你们线上用的什么垃圾收集器？为什么要用它？\",\"t\":[\"怎么说呢，虽然调优说的震天响，但是我们一般都是用默认。管你 Java 怎么升，我用 8，那么 JDK1.8 默认用的是什么呢？\",\"可以使用命令：\",\"java -XX:+PrintCommandLineFlags -version \",\"可以看到有这么一行：\",\"-XX:+UseParallelGC \",\"UseParallelGC = Parallel Scavenge + Parallel Old，表示的是新生代用的Parallel Scavenge收集器，老年代用的是Parallel Old 收集器。\",\"那为什么要用这个呢？默认的呗。\",\"当然面试肯定不能这么答。\",\"Parallel Scavenge 的特点是什么？\",\"高吞吐，我们可以回答：因为我们系统是业务相对复杂，但并发并不是非常高，所以希望尽可能的利用处理器资源，出于提高吞吐量的考虑采用Parallel Scavenge + Parallel Old的组合。\",\"当然，这个默认虽然也有说法，但不太讨喜。\",\"还可以说：\",\"采用Parallel New+CMS的组合，我们比较关注服务的响应速度，所以采用了 CMS 来降低停顿时间。\",\"或者一步到位：\",\"我们线上采用了设计比较优秀的 G1 垃圾收集器，因为它不仅满足我们低停顿的要求，而且解决了 CMS 的浮动垃圾问题、内存碎片问题。\"]},\"407\":{\"h\":\"30.垃圾收集器应该如何选择？\",\"t\":[\"垃圾收集器的选择需要权衡的点还是比较多的——例如运行应用的基础设施如何？使用 JDK 的发行商是什么？等等……\",\"这里简单地列一下上面提到的一些收集器的适用场景：\",\"Serial ：如果应用程序有一个很小的内存空间（大约 100 MB）亦或它在没有停顿时间要求的单线程处理器上运行。\",\"Parallel：如果优先考虑应用程序的峰值性能，并且没有时间要求要求，或者可以接受 1 秒或更长的停顿时间。\",\"CMS/G1：如果响应时间比吞吐量优先级高，或者垃圾收集暂停必须保持在大约 1 秒以内。\",\"ZGC：如果响应时间是高优先级的，或者堆空间比较大。\"]},\"408\":{\"h\":\"31.对象一定分配在堆中吗？有没有了解逃逸分析技术？\",\"t\":[\"对象一定分配在堆中吗？ 不一定的。\",\"随着 JIT 编译期的发展与逃逸分析技术逐渐成熟，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。其实，在编译期间，JIT 会对代码做很多优化。其中有一部分优化的目的就是减少内存堆分配压力，其中一种重要的技术叫做逃逸分析。\",\"什么是逃逸分析？\",\"逃逸分析是指分析指针动态范围的方法，它同编译器优化原理的指针分析和外形分析相关联。当变量（或者对象）在方法中分配后，其指针有可能被返回或者被全局引用，这样就会被其他方法或者线程所引用，这种现象称作指针（或者引用）的逃逸(Escape)。\",\"通俗点讲，当一个对象被 new 出来之后，它可能被外部所调用，如果是作为参数传递到外部了，就称之为方法逃逸。\",\"除此之外，如果对象还有可能被外部线程访问到，例如赋值给可以在其它线程中访问的实例变量，这种就被称为线程逃逸。\",\"逃逸分析的好处\",\"栈上分配\",\"如果确定一个对象不会逃逸到线程之外，那么久可以考虑将这个对象在栈上分配，对象占用的内存随着栈帧出栈而销毁，这样一来，垃圾收集的压力就降低很多。\",\"同步消除\",\"线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争， 对这个变量实施的同步措施也就可以安全地消除掉。\",\"标量替换\",\"如果一个数据是基本数据类型，不可拆分，它就被称之为标量。把一个 Java 对象拆散，将其用到的成员变量恢复为原始类型来访问，这个过程就称为标量替换。假如逃逸分析能够证明一个对象不会被方法外部访问，并且这个对象可以被拆散，那么可以不创建对象，直接用创建若干个成员变量代替，可以让对象的成员变量在栈上分配和读写。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"409\":{\"h\":\"三、JVM 调优\"},\"410\":{\"h\":\"32.有哪些常用的命令行性能监控和故障处理工具？\",\"t\":[\"操作系统工具\",\"top：显示系统整体资源使用情况\",\"vmstat：监控内存和 CPU\",\"iostat：监控 IO 使用\",\"netstat：监控网络使用\",\"JDK 性能监控工具\",\"jps：虚拟机进程查看\",\"jstat：虚拟机运行时信息查看\",\"jinfo：虚拟机配置查看\",\"jmap：内存映像（导出）\",\"jhat：堆转储快照分析\",\"jstack：Java 堆栈跟踪\",\"jcmd：实现上面除了 jstat 外所有命令的功能\"]},\"411\":{\"h\":\"33.了解哪些可视化的性能监控和故障处理工具？\",\"t\":[\"以下是一些 JDK 自带的可视化性能监控和故障处理工具：\",\"JConsole\",\"VisualVM\",\"Java Mission Control\",\"除此之外，还有一些第三方的工具：\",\"MAT\",\"Java 堆内存分析工具。\",\"GChisto\",\"GC 日志分析工具。\",\"GCViewer\",\"GC 日志分析工具。\",\"JProfiler\",\"商用的性能分析利器。\",\"arthas\",\"阿里开源诊断工具。\",\"async-profiler\",\"Java 应用性能分析工具，开源、火焰图、跨平台。\"]},\"412\":{\"h\":\"34.JVM 的常见参数配置知道哪些？\",\"t\":[\"一些常见的参数配置：\",\"堆配置：\",\"-Xms:初始堆大小\",\"-Xms：最大堆大小\",\"-XX:NewSize=n:设置年轻代大小\",\"-XX:NewRatio=n:设置年轻代和年老代的比值。如：为 3 表示年轻代和年老代比值为 1：3，年轻代占整个年轻代年老代和的 1/4\",\"-XX:SurvivorRatio=n:年轻代中 Eden 区与两个 Survivor 区的比值。注意 Survivor 区有两个。如 3 表示 Eden： 3 Survivor：2，一个 Survivor 区占整个年轻代的 1/5\",\"-XX:MaxPermSize=n:设置持久代大小\",\"收集器设置：\",\"-XX:+UseSerialGC:设置串行收集器\",\"-XX:+UseParallelGC:设置并行收集器\",\"-XX:+UseParalledlOldGC:设置并行年老代收集器\",\"-XX:+UseConcMarkSweepGC:设置并发收集器\",\"并行收集器设置\",\"-XX:ParallelGCThreads=n:设置并行收集器收集时使用的 CPU 数。并行收集线程数\",\"-XX:MaxGCPauseMillis=n:设置并行收集最大的暂停时间（如果到这个时间了，垃圾回收器依然没有回收完，也会停止回收）\",\"-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为：1/(1+n)\",\"-XX:+CMSIncrementalMode:设置为增量模式。适用于单 CPU 情况\",\"-XX:ParallelGCThreads=n:设置并发收集器年轻代手机方式为并行收集时，使用的 CPU 数。并行收集线程数\",\"打印 GC 回收的过程日志信息\",\"-XX:+PrintGC\",\"-XX:+PrintGCDetails\",\"-XX:+PrintGCTimeStamps\",\"-Xloggc:filename\"]},\"413\":{\"h\":\"35.有做过 JVM 调优吗？\",\"t\":[\"JVM 调优是一件很严肃的事情，不是拍脑门就开始调优的，需要有严密的分析和监控机制，大概的一个 JVM 调优流程图：\",\"实际上，JVM 调优是不得已而为之，有那功夫，好好把烂代码重构一下不比瞎调 JVM 强。\",\"但是，面试官非要问怎么办？可以从处理问题的角度来回答（对应图中事后），这是一个中规中矩的案例：电商公司的运营后台系统，偶发性的引发 OOM 异常，堆内存溢出。\",\"1）因为是偶发性的，所以第一次简单的认为就是堆内存不足导致，单方面的加大了堆内存从 4G 调整到 8G -Xms8g。\",\"2）但是问题依然没有解决，只能从堆内存信息下手，通过开启了-XX:+HeapDumpOnOutOfMemoryError 参数 获得堆内存的 dump 文件。\",\"3）用 JProfiler 对 堆 dump 文件进行分析，通过 JProfiler 查看到占用内存最大的对象是 String 对象，本来想跟踪着 String 对象找到其引用的地方，但 dump 文件太大，跟踪进去的时候总是卡死，而 String 对象占用比较多也比较正常，最开始也没有认定就是这里的问题，于是就从线程信息里面找突破点。\",\"4）通过线程进行分析，先找到了几个正在运行的业务线程，然后逐一跟进业务线程看了下代码，有个方法引起了我的注意，导出订单信息。\",\"5）因为订单信息导出这个方法可能会有几万的数据量，首先要从数据库里面查询出来订单信息，然后把订单信息生成 excel，这个过程会产生大量的 String 对象。\",\"6）为了验证自己的猜想，于是准备登录后台去测试下，结果在测试的过程中发现导出订单的按钮前端居然没有做点击后按钮置灰交互事件，后端也没有做防止重复提交，因为导出订单数据本来就非常慢，使用的人员可能发现点击后很久后页面都没反应，然后就一直点，结果就大量的请求进入到后台，堆内存产生了大量的订单对象和 EXCEL 对象，而且方法执行非常慢，导致这一段时间内这些对象都无法被回收，所以最终导致内存溢出。\",\"7）知道了问题就容易解决了，最终没有调整任何 JVM 参数，只是做了两个处理：\",\"在前端的导出订单按钮上加上了置灰状态，等后端响应之后按钮才可以进行点击\",\"后端代码加分布式锁，做防重处理\",\"这样双管齐下，保证导出的请求不会一直打到服务端，问题解决！\"]},\"414\":{\"h\":\"36.线上服务 CPU 占用过高怎么排查？\",\"t\":[\"问题分析：CPU 高一定是某个程序长期占用了 CPU 资源。\",\"1）所以先需要找出那个进程占用 CPU 高。\",\"top 列出系统各个进程的资源占用情况。\",\"2）然后根据找到对应进行里哪个线程占用 CPU 高。\",\"top -Hp 进程 ID 列出对应进程里面的线程占用资源情况\",\"3）找到对应线程 ID 后，再打印出对应线程的堆栈信息\",\"printf \\\"%x\\\\n\\\" PID 把线程 ID 转换为 16 进制。\",\"jstack PID 打印出进程的所有线程信息，从打印出来的线程信息中找到上一步转换为 16 进制的线程 ID 对应的线程信息。\",\"4）最后根据线程的堆栈信息定位到具体业务方法,从代码逻辑中找到问题所在。\",\"查看是否有线程长时间的 watting 或 blocked，如果线程长期处于 watting 状态下， 关注 watting on xxxxxx，说明线程在等待这把锁，然后根据锁的地址找到持有锁的线程。\"]},\"415\":{\"h\":\"37.内存飙高问题怎么排查？\",\"t\":[\"分析： 内存飚高如果是发生在 java 进程上，一般是因为创建了大量对象所导致，持续飚高说明垃圾回收跟不上对象创建的速度，或者内存泄露导致对象无法回收。\",\"1）先观察垃圾回收的情况\",\"jstat -gc PID 1000 查看 GC 次数，时间等信息，每隔一秒打印一次。\",\"jmap -histo PID | head -20 查看堆内存占用空间最大的前 20 个对象类型,可初步查看是哪个对象占用了内存。\",\"如果每次 GC 次数频繁，而且每次回收的内存空间也正常，那说明是因为对象创建速度快导致内存一直占用很高；如果每次回收的内存非常少，那么很可能是因为内存泄露导致内存一直无法被回收。\",\"2）导出堆内存文件快照\",\"jmap -dump:live,format=b,file=/home/myheapdump.hprof PID dump 堆内存信息到文件。\",\"3）使用 visualVM 对 dump 文件进行离线分析，找到占用内存高的对象，再找到创建该对象的业务代码位置，从代码和业务场景中定位具体问题。\"]},\"416\":{\"h\":\"38.频繁 minor gc 怎么办？\",\"t\":[\"优化 Minor GC 频繁问题：通常情况下，由于新生代空间较小，Eden 区很快被填满，就会导致频繁 Minor GC，因此可以通过增大新生代空间-Xmn来降低 Minor GC 的频率。\"]},\"417\":{\"h\":\"39.频繁 Full GC 怎么办？\",\"t\":[\"Full GC 的排查思路大概如下：\",\"1）清楚从程序角度，有哪些原因导致 FGC？\",\"大对象：系统一次性加载了过多数据到内存中（比如 SQL 查询未做分页），导致大对象进入了老年代。\",\"内存泄漏：频繁创建了大量对象，但是无法被回收（比如 IO 对象使用完后未调用 close 方法释放资源），先引发 FGC，最后导致 OOM.\",\"程序频繁生成一些长生命周期的对象，当这些对象的存活年龄超过分代年龄时便会进入老年代，最后引发 FGC. （即本文中的案例）\",\"程序 BUG\",\"代码中显式调用了 gc方法，包括自己的代码甚至框架中的代码。\",\"JVM 参数设置问题：包括总内存大小、新生代和老年代的大小、Eden 区和 S 区的大小、元空间大小、垃圾回收算法等等。\",\"2）清楚排查问题时能使用哪些工具\",\"公司的监控系统：大部分公司都会有，可全方位监控 JVM 的各项指标。\",\"JDK 的自带工具，包括 jmap、jstat 等常用命令：\",\"# 查看堆内存各区域的使用率以及GC情况 jstat -gcutil -h20 pid 1000 # 查看堆内存中的存活对象，并按空间排序 jmap -histo pid | head -n20 # dump堆内存文件 jmap -dump:format=b,file=heap pid \",\"可视化的堆内存分析工具：JVisualVM、MAT 等\",\"3）排查指南\",\"查看监控，以了解出现问题的时间点以及当前 FGC 的频率（可对比正常情况看频率是否正常）\",\"了解该时间点之前有没有程序上线、基础组件升级等情况。\",\"了解 JVM 的参数设置，包括：堆空间各个区域的大小设置，新生代和老年代分别采用了哪些垃圾收集器，然后分析 JVM 参数设置是否合理。\",\"再对步骤 1 中列出的可能原因做排除法，其中元空间被打满、内存泄漏、代码显式调用 gc 方法比较容易排查。\",\"针对大对象或者长生命周期对象导致的 FGC，可通过 jmap -histo 命令并结合 dump 堆内存文件作进一步分析，需要先定位到可疑对象。\",\"通过可疑对象定位到具体代码再次分析，这时候要结合 GC 原理和 JVM 参数设置，弄清楚可疑对象是否满足了进入到老年代的条件才能下结论。\"]},\"418\":{\"h\":\"40.有没有处理过内存泄漏问题？是如何定位的？\",\"t\":[\"内存泄漏是内在病源，外在病症表现可能有：\",\"应用程序长时间连续运行时性能严重下降\",\"CPU 使用率飙升，甚至到 100%\",\"频繁 Full GC，各种报警，例如接口超时报警等\",\"应用程序抛出 OutOfMemoryError 错误\",\"应用程序偶尔会耗尽连接对象\",\"严重内存泄漏往往伴随频繁的 Full GC，所以分析排查内存泄漏问题首先还得从查看 Full GC 入手。主要有以下操作步骤：\",\"1）使用 jps 查看运行的 Java 进程 ID\",\"2）使用top -p [pid] 查看进程使用 CPU 和 MEM 的情况\",\"3）使用 top -Hp [pid] 查看进程下的所有线程占 CPU 和 MEM 的情况\",\"4）将线程 ID 转换为 16 进制：printf \\\"%x\\\\n\\\" [pid]，输出的值就是线程栈信息中的 nid。\",\"例如：printf \\\"%x\\\\n\\\" 29471，换行输出 731f。\",\"5）抓取线程栈：jstack 29452 > 29452.txt，可以多抓几次做个对比。\",\"在线程栈信息中找到对应线程号的 16 进制值，如下是 731f 线程的信息。线程栈分析可使用 Visualvm 插件 TDA。\",\"\\\"Service Thread\\\" #7 daemon prio=9 os_prio=0 tid=0x00007fbe2c164000 nid=0x731f runnable [0x0000000000000000] java.lang.Thread.State: RUNNABLE \",\"6）使用jstat -gcutil [pid] 5000 10 每隔 5 秒输出 GC 信息，输出 10 次，查看 YGC 和 Full GC 次数。通常会出现 YGC 不增加或增加缓慢，而 Full GC 增加很快。\",\"或使用 jstat -gccause [pid] 5000 ，同样是输出 GC 摘要信息。\",\"或使用 jmap -heap [pid] 查看堆的摘要信息，关注老年代内存使用是否达到阀值，若达到阀值就会执行 Full GC。\",\"7）如果发现 Full GC 次数太多，就很大概率存在内存泄漏了\",\"8）使用 jmap -histo:live [pid] 输出每个类的对象数量，内存大小(字节单位)及全限定类名。\",\"9）生成 dump 文件，借助工具分析哪 个对象非常多，基本就能定位到问题在那了\",\"使用 jmap 生成 dump 文件：\",\"# jmap -dump:live,format=b,file=29471.dump 29471 Dumping heap to /root/dump ... Heap dump file created \",\"10）dump 文件分析\",\"可以使用 jhat 命令分析：jhat -port 8000 29471.dump，浏览器访问 jhat 服务，端口是 8000。\",\"通常使用图形化工具分析，如 JDK 自带的 jvisualvm，从菜单 > 文件 > 装入 dump 文件。\",\"或使用第三方式具分析的，如 JProfiler 也是个图形化工具，GCViewer 工具。Eclipse 或以使用 MAT 工具查看。或使用在线分析平台 GCEasy。\",\"注意：如果 dump 文件较大的话，分析会占比较大的内存。\",\"11）在 dump 文析结果中查找存在大量的对象，再查对其的引用。\",\"基本上就可以定位到代码层的逻辑了。\"]},\"419\":{\"h\":\"41.有没有处理过内存溢出问题？\",\"t\":[\"内存泄漏和内存溢出二者关系非常密切，内存溢出可能会有很多原因导致，内存泄漏最可能的罪魁祸首之一。\",\"排查过程和排查内存泄漏过程类似。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"420\":{\"h\":\"四、虚拟机执行\"},\"421\":{\"h\":\"42.能说一下类的生命周期吗？\",\"t\":[\"一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载 （Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化 （Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。\"]},\"422\":{\"h\":\"43.类加载的过程知道吗？\",\"t\":[\"加载是 JVM 加载的起点，具体什么时候开始加载，《Java 虚拟机规范》中并没有进行强制约束，可以交给虚拟机的具体实现来自由把握。\",\"在加载过程，JVM 要做三件事情：\",\"1）通过一个类的全限定名来获取定义此类的二进制字节流。\",\"2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\",\"3）在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。\",\"加载阶段结束后，Java 虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了，方法区中的数据存储格式完全由虚拟机实现自行定义，《Java 虚拟机规范》未规定此区域的具体数据结构。\",\"类型数据妥善安置在方法区之后，会在 Java 堆内存中实例化一个 java.lang.Class 类的对象， 这个对象将作为程序访问方法区中的类型数据的外部接口。\"]},\"423\":{\"h\":\"44.类加载器有哪些？\",\"t\":[\"主要有四种类加载器:\",\"启动类加载器(Bootstrap ClassLoader)用来加载 java 核心类库，无法被 java 程序直接引用。\",\"扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\",\"系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。\",\"用户自定义类加载器 (user class loader)，用户通过继承 java.lang.ClassLoader 类的方式自行实现的类加载器。\"]},\"424\":{\"h\":\"45.什么是双亲委派机制？\",\"t\":[\"双亲委派模型的工作过程：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去完成加载。\"]},\"425\":{\"h\":\"46.为什么要用双亲委派机制？\",\"t\":[\"答案是为了保证应用程序的稳定有序。\",\"例如类 java.lang.Object，它存放在 rt.jar 之中，通过双亲委派机制，保证最终都是委派给处于模型最顶端的启动类加载器进行加载，保证 Object 的一致。反之，都由各个类加载器自行去加载的话，如果用户自己也编写了一个名为 java.lang.Object 的类，并放在程序的 ClassPath 中，那系统中就会出现多个不同的 Object 类。\"]},\"426\":{\"h\":\"47.如何破坏双亲委派机制？\",\"t\":[\"如果不想打破双亲委派模型，就重写 ClassLoader 类中的 fifindClass()方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。而如果想打破双亲委派模型则需要重写 loadClass()方法。\"]},\"427\":{\"h\":\"48.历史上有哪几次双亲委派机制的破坏？\",\"t\":[\"双亲委派机制在历史上主要有三次破坏：\",\"第一次破坏\",\"双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即 JDK 1.2 面世以前的“远古”时代。\",\"由于双亲委派模型在 JDK 1.2 之后才被引入，但是类加载器的概念和抽象类 java.lang.ClassLoader 则在 Java 的第一个版本中就已经存在，为了向下兼容旧代码，所以无法以技术手段避免 loadClass()被子类覆盖的可能性，只能在 JDK 1.2 之后的 java.lang.ClassLoader 中添加一个新的 protected 方法 findClass()，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在 loadClass()中编写代码。\",\"第二次破坏\",\"双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的，如果有基础类型又要调用回用户的代码，那该怎么办呢？\",\"例如我们比较熟悉的 JDBC:\",\"各个厂商各有不同的 JDBC 的实现，Java 在核心包\\\\lib里定义了对应的 SPI，那么这个就毫无疑问由启动类加载器加载器加载。\",\"但是各个厂商的实现，是没办法放在核心包里的，只能放在classpath里，只能被应用类加载器加载。那么，问题来了，启动类加载器它就加载不到厂商提供的 SPI 服务代码。\",\"为了解决这个问题，引入了一个不太优雅的设计：线程上下文类加载器 （Thread Context ClassLoader）。这个类加载器可以通过 java.lang.Thread 类的 setContext-ClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。\",\"JNDI 服务使用这个线程上下文类加载器去加载所需的 SPI 服务代码，这是一种父类加载器去请求子类加载器完成类加载的行为。\",\"第三次破坏\",\"双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，例如代码热替换（Hot Swap）、模块热部署（Hot Deployment）等。\",\"OSGi 实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块（OSGi 中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。在 OSGi 环境下，类加载器不再双亲委派模型推荐的树状结构，而是进一步发展为更加复杂的网状结构。\"]},\"428\":{\"h\":\"49.你觉得应该怎么实现一个热部署功能？\",\"t\":[\"我们已经知道了 Java 类的加载过程。一个 Java 类文件到虚拟机里的对象，要经过如下过程:首先通过 Java 编译器，将 Java 文件编译成 class 字节码，类加载器读取 class 字节码，再将类转化为实例，对实例 newInstance 就可以生成对象。\",\"类加载器 ClassLoader 功能，也就是将 class 字节码转换到类的实例。在 Java 应用中，所有的实例都是由类加载器，加载而来。\",\"一般在系统中，类的加载都是由系统自带的类加载器完成，而且对于同一个全限定名的 java 类（如 com.csiar.soc.HelloWorld），只能被加载一次，而且无法被卸载。\",\"这个时候问题就来了，如果我们希望将 java 类卸载，并且替换更新版本的 java 类，该怎么做呢？\",\"既然在类加载器中，Java 类只能被加载一次，并且无法卸载。那么我们是不是可以直接把 Java 类加载器干掉呢？答案是可以的，我们可以自定义类加载器，并重写 ClassLoader 的 findClass 方法。\",\"想要实现热部署可以分以下三个步骤：\",\"1）销毁原来的自定义 ClassLoader\",\"2）更新 class 类文件\",\"3）创建新的 ClassLoader 去加载更新后的 class 类文件。\",\"到此，一个热部署的功能就这样实现了。\"]},\"429\":{\"h\":\"50.Tomcat 的类加载机制了解吗？\",\"t\":[\"Tomcat 是主流的 Java Web 服务器之一，为了实现一些特殊的功能需求，自定义了一些类加载器。\",\"Tomcat 类加载器如下：\",\"Tomcat 实际上也是破坏了双亲委派模型的。\",\"Tomact 是 web 容器，可能需要部署多个应用程序。不同的应用程序可能会依赖同一个第三方类库的不同版本，但是不同版本的类库中某一个类的全路径名可能是一样的。如多个应用都要依赖 hollis.jar，但是 A 应用需要依赖 1.0.0 版本，但是 B 应用需要依赖 1.0.1 版本。这两个版本中都有一个类是 com.hollis.Test.class。如果采用默认的双亲委派类加载机制，那么无法加载多个相同的类。\",\"所以，Tomcat 破坏了双亲委派原则，提供隔离的机制，为每个 web 容器单独提供一个 WebAppClassLoader 加载器。每一个 WebAppClassLoader 负责加载本身的目录下的 class 文件，加载不到时再交 CommonClassLoader 加载，这和双亲委派刚好相反。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\",\"图文详解 50 道Java虚拟机高频面试题，这次面试，一定吊打面试官，整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"430\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1.5 万字 51 张手绘图，详解 50 道 Java 虚拟机面试高频题（让天下没有难背的八股），面渣背会这些 JVM 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/jvm.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.5 万字 51 张手绘图，详解 50 道 Java 虚拟机面试高频题（让天下没有难背的八股），面渣背会这些 JVM 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"431\":{\"h\":\"\",\"t\":[\"6400 字 30 张手绘图，详解 20 道 MyBatis 面试高频题（让天下没有难背的八股），面渣背会这些 MyBatis 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"大家好，我是二哥呀，面渣逆袭系列继续，这节我们的主角是MyBatis，作为当前国内最流行的ORM框架，是我们这些crud选手最趁手的工具，赶紧来看看面试都会问哪些问题吧。\"]},\"432\":{\"h\":\"基础\"},\"433\":{\"h\":\"1. 说说什么是MyBatis?\",\"t\":[\"先吹一下：\",\"Mybatis 是一个半 ORM（对象关系映射）框架，它内部封装了 JDBC，开发时只需要关注 SQL 语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程。程序员直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。\",\"MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。\",\"再说一下缺点\",\"SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求\",\"SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库\",\"ORM是什么?\",\"ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单来说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。\",\"为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？\",\"Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。\",\"而Mybatis在查询关联对象或关联集合对象时，需要手动编写SQL来完成，所以，被称之为半自动ORM映射工具。\",\"JDBC编程有哪些不足之处，MyBatis是如何解决的？\",\"1、数据连接创建、释放频繁造成系统资源浪费从而影响系统性能，在mybatis-config.xml中配置数据链接池，使用连接池统一管理数据库连接。\",\"2、sql语句写在代码中造成代码不易维护，将sql语句配置在XXXXmapper.xml文件中与java代码分离。\",\"3、向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。Mybatis自动将java对象映射至sql语句。\",\"4、对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。Mybatis自动将sql执行结果映射至java对象。\"]},\"434\":{\"h\":\"2. Hibernate 和 MyBatis 有什么区别？\",\"t\":[\"相同点\",\"都是对jdbc的封装，都是应用于持久层的框架。\",\"不同点\",\"1）映射关系\",\"MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单\",\"Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂\",\"2）SQL优化和移植性\",\"Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。\",\"MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。\",\"3）MyBatis和Hibernate的适用场景不同\",\"Hibernate 是标准的ORM框架，SQL编写量较少，但不够灵活，适合于需求相对稳定，中小型的软件项目，比如：办公自动化系统\",\"MyBatis 是半ORM框架，需要编写较多SQL，但是比较灵活，适合于需求变化频繁，快速迭代的项目，比如：电商网站\"]},\"435\":{\"h\":\"3. MyBatis使用过程？生命周期？\",\"t\":[\"MyBatis基本使用的过程大概可以分为这么几步：\",\"1）创建SqlSessionFactory\",\"可以从配置或者直接编码来创建SqlSessionFactory\",\"String resource = \\\"org/mybatis/example/mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); \",\"2）通过SqlSessionFactory创建SqlSession\",\"SqlSession（会话）可以理解为程序和数据库之间的桥梁\",\"SqlSession session = sqlSessionFactory.openSession(); \",\"3）通过sqlsession执行数据库操作\",\"可以通过 SqlSession 实例来直接执行已映射的 SQL 语句：\",\"Blog blog = (Blog)session.selectOne(\\\"org.mybatis.example.BlogMapper.selectBlog\\\", 101); \",\"更常用的方式是先获取Mapper(映射)，然后再执行SQL语句：\",\"BlogMapper mapper = session.getMapper(BlogMapper.class); Blog blog = mapper.selectBlog(101); \",\"4）调用session.commit()提交事务\",\"如果是更新、删除语句，我们还需要提交一下事务。\",\"5）调用session.close()关闭会话\",\"最后一定要记得关闭会话。\",\"MyBatis生命周期？\",\"上面提到了几个MyBatis的组件，一般说的MyBatis生命周期就是这些组件的生命周期。\",\"SqlSessionFactoryBuilder\",\"一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的生命周期只存在于方法的内部。\",\"SqlSessionFactory\",\"SqlSessionFactory 是用来创建SqlSession的，相当于一个数据库连接池，每次创建SqlSessionFactory都会使用数据库资源，多次创建和销毁是对资源的浪费。所以SqlSessionFactory是应用级的生命周期，而且应该是单例的。\",\"SqlSession\",\"SqlSession相当于JDBC中的Connection，SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的生命周期是一次请求或一个方法。\",\"Mapper\",\"映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的，它的生命周期在sqlsession事务方法之内，一般会控制在方法级。\",\"当然，万物皆可集成Spring，MyBatis通常也是和Spring集成使用，Spring可以帮助我们创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到我们的 bean 中，我们不需要关心它们的创建过程和生命周期，那就是另外的故事了。\"]},\"436\":{\"h\":\"4. 在mapper中如何传递多个参数？\",\"t\":[\"方法1：顺序传参法\",\"public User selectUser(String name, int deptId); <select id=\\\"selectUser\\\" resultMap=\\\"UserResultMap\\\"> select * from user where user_name = #{0} and dept_id = #{1} </select> \",\"\\\\#{}里面的数字代表传入参数的顺序。\",\"这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。\",\"方法2：@Param注解传参法\",\"public User selectUser(@Param(\\\"userName\\\") String name, int @Param(\\\"deptId\\\") deptId); <select id=\\\"selectUser\\\" resultMap=\\\"UserResultMap\\\"> select * from user where user_name = #{userName} and dept_id = #{deptId} </select> \",\"\\\\#{}里面的名称对应的是注解@Param括号里面修饰的名称。\",\"这种方法在参数不多的情况还是比较直观的，（推荐使用）。\",\"方法3：Map传参法\",\"public User selectUser(Map<String, Object> params); <select id=\\\"selectUser\\\" parameterType=\\\"java.util.Map\\\" resultMap=\\\"UserResultMap\\\"> select * from user where user_name = #{userName} and dept_id = #{deptId} </select> \",\"\\\\#{}里面的名称对应的是Map里面的key名称。\",\"这种方法适合传递多个参数，且参数易变能灵活传递的情况。\",\"方法4：Java Bean传参法\",\"public User selectUser(User user); <select id=\\\"selectUser\\\" parameterType=\\\"com.jourwon.pojo.User\\\" resultMap=\\\"UserResultMap\\\"> select * from user where user_name = #{userName} and dept_id = #{deptId} </select> \",\"\\\\#{}里面的名称对应的是User类里面的成员属性。\",\"这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方便，推荐使用。（推荐使用）。\"]},\"437\":{\"h\":\"5. 实体类属性名和表中字段名不一样 ，怎么办?\",\"t\":[\"第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。\",\"<select id=\\\"getOrder\\\" parameterType=\\\"int\\\" resultType=\\\"com.jourwon.pojo.Order\\\"> select order_id id, order_no orderno ,order_price price form orders where order_id=#{id}; </select> \",\"第2种： 通过resultMap 中的<result>来映射字段名和实体类属性名的一一对应的关系。\",\"<select id=\\\"getOrder\\\" parameterType=\\\"int\\\" resultMap=\\\"orderResultMap\\\"> select * from orders where order_id=#{id} </select> <resultMap type=\\\"com.jourwon.pojo.Order\\\" id=\\\"orderResultMap\\\"> <!–用id属性来映射主键字段–> <id property=\\\"id\\\" column=\\\"order_id\\\"> <!–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–> <result property =\\\"orderno\\\" column =\\\"order_no\\\"/> <result property=\\\"price\\\" column=\\\"order_price\\\" /> </resultMap> \"]},\"438\":{\"h\":\"6. Mybatis是否可以映射Enum枚举类？\",\"t\":[\"Mybatis当然可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。\",\"TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。\"]},\"439\":{\"h\":\"7. #{}和${}的区别 ?\",\"t\":[\"#{}是占位符，预编译处理；${}是拼接符，字符串替换，没有预编译处理。\",\"Mybatis在处理#{}时，#{}传入参数是以字符串传入，会将SQL中的#{}替换为?号，调用PreparedStatement的set方法来赋值。\",\"#{} 可以有效的防止SQL注入，提高系统安全性；${} 不能防止SQL 注入\",\"#{} 的变量替换是在DBMS 中；${} 的变量替换是在 DBMS 外\"]},\"440\":{\"h\":\"8. 模糊查询like语句该怎么写?\",\"t\":[\"1 ’%${question}%’ 可能引起SQL注入，不推荐\",\"2 \\\"%\\\"#{question}\\\"%\\\" 注意：因为#{…}解析成sql语句时候，会在变量外侧自动加单引号’ '，所以这里 % 需要使用双引号\\\" \\\"，不能使用单引号 ’ '，不然会查不到任何结果。\",\"3 CONCAT('%',#{question},'%') 使用CONCAT()函数，（推荐✨）\",\"4 使用bind标签（不推荐）\",\"<select id=\\\"listUserLikeUsername\\\" resultType=\\\"com.jourwon.pojo.User\\\"> &emsp;&emsp;<bind name=\\\"pattern\\\" value=\\\"'%' + username + '%'\\\" /> &emsp;&emsp;select id,sex,age,username,password from person where username LIKE #{pattern} </select> \"]},\"441\":{\"h\":\"9. Mybatis能执行一对一、一对多的关联查询吗？\",\"t\":[\"当然可以，不止支持一对一、一对多的关联查询，还支持多对多、多对一的关联查询。\",\"一对一<association>\",\"比如订单和支付是一对一的关系，这种关联的实现：\",\"实体类:\",\"public class Order { private Integer orderId; private String orderDesc; /** * 支付对象 */ private Pay pay; //…… } \",\"结果映射\",\"<!-- 订单resultMap --> <resultMap id=\\\"peopleResultMap\\\" type=\\\"cn.fighter3.entity.Order\\\"> <id property=\\\"orderId\\\" column=\\\"order_id\\\" /> <result property=\\\"orderDesc\\\" column=\\\"order_desc\\\"/> <!--一对一结果映射--> <association property=\\\"pay\\\" javaType=\\\"cn.fighter3.entity.Pay\\\"> <id column=\\\"payId\\\" property=\\\"pay_id\\\"/> <result column=\\\"account\\\" property=\\\"account\\\"/> </association> </resultMap> \",\"查询就是普通的关联查\",\"<select id=\\\"getTeacher\\\" resultMap=\\\"getTeacherMap\\\" parameterType=\\\"int\\\"> select * from order o left join pay p on o.order_id=p.order_id where o.order_id=#{orderId} </select> \",\"一对多<collection>\",\"比如商品分类和商品，是一对多的关系。\",\"实体类\",\"public class Category { private int categoryId; private String categoryName; /** * 商品列表 **/ List<Product> products; //…… } \",\"结果映射\",\"<resultMap type=\\\"Category\\\" id=\\\"categoryBean\\\"> <id column=\\\"categoryId\\\" property=\\\"category_id\\\" /> <result column=\\\"categoryName\\\" property=\\\"category_name\\\" /> <!-- 一对多的关系 --> <!-- property: 指的是集合属性的值, ofType：指的是集合中元素的类型 --> <collection property=\\\"products\\\" ofType=\\\"Product\\\"> <id column=\\\"product_id\\\" property=\\\"productId\\\" /> <result column=\\\"productName\\\" property=\\\"productName\\\" /> <result column=\\\"price\\\" property=\\\"price\\\" /> </collection> </resultMap> \",\"查询\",\"查询就是一个普通的关联查询\",\"<!-- 关联查询分类和产品表 --> <select id=\\\"listCategory\\\" resultMap=\\\"categoryBean\\\"> select c.*, p.* from category_ c left join product_ p on c.id = p.cid </select> \",\"​ 那么多对一、多对多怎么实现呢？还是利用<association>和<collection>，篇幅所限，这里就不展开了。\"]},\"442\":{\"h\":\"10. Mybatis是否支持延迟加载？原理？\",\"t\":[\"Mybatis支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。\",\"它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。\",\"当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。\"]},\"443\":{\"h\":\"11. 如何获取生成的主键?\",\"t\":[\"新增标签中添加：keyProperty=\\\" ID \\\" 即可\",\"<insert id=\\\"insert\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"userId\\\" > insert into user( user_name, user_password, create_time) values(#{userName}, #{userPassword} , #{createTime, jdbcType= TIMESTAMP}) </insert> \",\"这时候就可以完成回填主键\",\"mapper.insert(user); user.getId; \"]},\"444\":{\"h\":\"12. MyBatis支持动态SQL吗？\",\"t\":[\"MyBatis中有一些支持动态SQL的标签，它们的原理是使用OGNL从SQL参数对象中计算表达式的值，根据表达式的值动态拼接SQL，以此来完成动态SQL的功能。\",\"if\",\"根据条件来组成where子句\",\"<select id=\\\"findActiveBlogWithTitleLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <if test=\\\"title != null\\\"> AND title like #{title} </if> </select> \",\"choose (when, otherwise)\",\"这个和Java 中的 switch 语句有点像\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <choose> <when test=\\\"title != null\\\"> AND title like #{title} </when> <when test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </when> <otherwise> AND featured = 1 </otherwise> </choose> </select> \",\"trim (where, set)\",\"<where>可以用在所有的查询条件都是动态的情况\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG <where> <if test=\\\"state != null\\\"> state = #{state} </if> <if test=\\\"title != null\\\"> AND title like #{title} </if> <if test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </if> </where> </select> \",\"<set> 可以用在动态更新的时候\",\"<update id=\\\"updateAuthorIfNecessary\\\"> update Author <set> <if test=\\\"username != null\\\">username=#{username},</if> <if test=\\\"password != null\\\">password=#{password},</if> <if test=\\\"email != null\\\">email=#{email},</if> <if test=\\\"bio != null\\\">bio=#{bio}</if> </set> where id=#{id} </update> \",\"foreach\",\"看到名字就知道了，这个是用来循环的，可以对集合进行遍历\",\"<select id=\\\"selectPostIn\\\" resultType=\\\"domain.blog.Post\\\"> SELECT * FROM POST P <where> <foreach item=\\\"item\\\" index=\\\"index\\\" collection=\\\"list\\\" open=\\\"ID in (\\\" separator=\\\",\\\" close=\\\")\\\" nullable=\\\"true\\\"> #{item} </foreach> </where> </select> \"]},\"445\":{\"h\":\"13. MyBatis如何执行批量操作？\",\"t\":[\"第一种方法：使用foreach标签\",\"foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主要有item，index，collection，open，separator，close。\",\"item 表示集合中每一个元素进行迭代时的别名，随便起的变量名；\",\"index 指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；\",\"open 表示该语句以什么开始，常用“(”；\",\"separator 表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；\",\"close 表示以什么结束，常用“)”。\",\"在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有以下3种情况：\",\"如果传入的是单参数且参数类型是一个List的时候，collection属性值为list\",\"如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array\",\"如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key\",\"看看批量保存的两种用法：\",\"<!-- MySQL下批量保存，可以foreach遍历 mysql支持values(),(),()语法 --> //推荐使用 <insert id=\\\"addEmpsBatch\\\"> INSERT INTO emp(ename,gender,email,did) VALUES <foreach collection=\\\"emps\\\" item=\\\"emp\\\" separator=\\\",\\\"> (#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id}) </foreach> </insert> \",\"<!-- 这种方式需要数据库连接属性allowMutiQueries=true的支持 如jdbc.url=jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true --> <insert id=\\\"addEmpsBatch\\\"> <foreach collection=\\\"emps\\\" item=\\\"emp\\\" separator=\\\";\\\"> INSERT INTO emp(ename,gender,email,did) VALUES(#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id}) </foreach> </insert> \",\"第二种方法：使用ExecutorType.BATCH\",\"Mybatis内置的ExecutorType有3种，默认为simple，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，在某些情况下不符合业务的需求。\",\"具体用法如下：\",\"//批量保存方法测试 @Test public void testBatch() throws IOException{ SqlSessionFactory sqlSessionFactory = getSqlSessionFactory(); //可以执行批量操作的sqlSession SqlSession openSession = sqlSessionFactory.openSession(ExecutorType.BATCH); //批量保存执行前时间 long start = System.currentTimeMillis(); try { EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class); for (int i = 0; i < 1000; i++) { mapper.addEmp(new Employee(UUID.randomUUID().toString().substring(0, 5), \\\"b\\\", \\\"1\\\")); } openSession.commit(); long end = System.currentTimeMillis(); //批量保存执行后的时间 System.out.println(\\\"执行时长\\\" + (end - start)); //批量 预编译sql一次==》设置参数==》10000次==》执行1次 677 //非批量 （预编译=设置参数=执行 ）==》10000次 1121 } finally { openSession.close(); } } \",\"mapper和mapper.xml如下\",\"public interface EmployeeMapper { //批量保存员工 Long addEmp(Employee employee); } \",\"<mapper namespace=\\\"com.jourwon.mapper.EmployeeMapper\\\" <!--批量保存员工 --> <insert id=\\\"addEmp\\\"> insert into employee(lastName,email,gender) values(#{lastName},#{email},#{gender}) </insert> </mapper> \"]},\"446\":{\"h\":\"14. 说说Mybatis的一级、二级缓存？\",\"t\":[\"一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为SqlSession，各个SqlSession之间的缓存相互隔离，当 Session flush 或 close 之后，该 SqlSession 中的所有 Cache 就将清空，MyBatis默认打开一级缓存。\",\"二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同之处在于其存储作用域为 Mapper(Namespace)，可以在多个SqlSession之间共享，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"447\":{\"h\":\"原理\"},\"448\":{\"h\":\"15. 能说说MyBatis的工作原理吗？\",\"t\":[\"我们已经大概知道了MyBatis的工作流程，按工作原理，可以分为两大步：生成会话工厂、会话运行。\",\"MyBatis是一个成熟的框架，篇幅限制，这里抓大放小，来看看它的主要工作流程。\",\"构建会话工厂\",\"构造会话工厂也可以分为两步：\",\"获取配置\",\"获取配置这一步经过了几步转化，最终由生成了一个配置类Configuration实例，这个配置类实例非常重要，主要作用包括：\",\"读取配置文件，包括基础配置文件和映射文件\",\"初始化基础配置，比如MyBatis的别名，还有其它的一些重要的类对象，像插件、映射器、ObjectFactory等等\",\"提供一个单例，作为会话工厂构建的重要参数\",\"它的构建过程也会初始化一些环境变量，比如数据源\",\"public SqlSessionFactory build(Reader reader, String environment, Properties properties) { SqlSessionFactory var5; //省略异常处理 //xml配置构建器 XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties); //通过转化的Configuration构建SqlSessionFactory var5 = this.build(parser.parse()); } \",\"构建SqlSessionFactory\",\"SqlSessionFactory只是一个接口，构建出来的实际上是它的实现类的实例，一般我们用的都是它的实现类DefaultSqlSessionFactory，\",\"public SqlSessionFactory build(Configuration config) { return new DefaultSqlSessionFactory(config); } \",\"会话运行\",\"会话运行是MyBatis最复杂的部分，它的运行离不开四大组件的配合：\",\"Executor（执行器）\",\"Executor起到了至关重要的作用，SqlSession只是一个门面，相当于客服，真正干活的是是Executor，就像是默默无闻的工程师。它提供了相应的查询和更新方法，以及事务方法。\",\"Environment environment = this.configuration.getEnvironment(); TransactionFactory transactionFactory = this.getTransactionFactoryFromEnvironment(environment); tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit); //通过Configuration创建executor Executor executor = this.configuration.newExecutor(tx, execType); var8 = new DefaultSqlSession(this.configuration, executor, autoCommit); \",\"StatementHandler（数据库会话器）\",\"StatementHandler，顾名思义，处理数据库会话的。我们以SimpleExecutor为例，看一下它的查询方法，先生成了一个StatementHandler实例，再拿这个handler去执行query。\",\" public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException { Statement stmt = null; List var9; try { Configuration configuration = ms.getConfiguration(); StatementHandler handler = configuration.newStatementHandler(this.wrapper, ms, parameter, rowBounds, resultHandler, boundSql); stmt = this.prepareStatement(handler, ms.getStatementLog()); var9 = handler.query(stmt, resultHandler); } finally { this.closeStatement(stmt); } return var9; } \",\"再以最常用的PreparedStatementHandler看一下它的query方法，其实在上面的prepareStatement已经对参数进行了预编译处理，到了这里，就直接执行sql，使用ResultHandler处理返回结果。\",\"public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException { PreparedStatement ps = (PreparedStatement)statement; ps.execute(); return this.resultSetHandler.handleResultSets(ps); } \",\"ParameterHandler （参数处理器）\",\"PreparedStatementHandler里对sql进行了预编译处理\",\"public void parameterize(Statement statement) throws SQLException { this.parameterHandler.setParameters((PreparedStatement)statement); } \",\"这里用的就是ParameterHandler，setParameters的作用就是设置预编译SQL语句的参数。\",\"里面还会用到typeHandler类型处理器，对类型进行处理。\",\"public interface ParameterHandler { Object getParameterObject(); void setParameters(PreparedStatement var1) throws SQLException; } \",\"ResultSetHandler（结果处理器）\",\"我们前面也看到了，最后的结果要通过ResultSetHandler来进行处理，handleResultSets这个方法就是用来包装结果集的。Mybatis为我们提供了一个DefaultResultSetHandler，通常都是用这个实现类去进行结果的处理的。\",\"public interface ResultSetHandler { <E> List<E> handleResultSets(Statement var1) throws SQLException; <E> Cursor<E> handleCursorResultSets(Statement var1) throws SQLException; void handleOutputParameters(CallableStatement var1) throws SQLException; } \",\"它会使用typeHandle处理类型，然后用ObjectFactory提供的规则组装对象，返回给调用者。\",\"整体上总结一下会话运行：\",\"我们最后把整个的工作流程串联起来，简单总结一下：\",\"读取 MyBatis 配置文件——mybatis-config.xml 、加载映射文件——映射文件即 SQL 映射文件，文件中配置了操作数据库的 SQL 语句。最后生成一个配置对象。\",\"构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。\",\"创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。\",\"Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。\",\"StatementHandler：数据库会话器，串联起参数映射的处理和运行结果映射的处理。\",\"参数处理：对输入参数的类型进行处理，并预编译。\",\"结果处理：对返回结果的类型进行处理，根据对象映射规则，返回相应的对象。\"]},\"449\":{\"h\":\"16. MyBatis的功能架构是什么样的？\",\"t\":[\"我们一般把Mybatis的功能架构分为三层：\",\"API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。\",\"数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。\",\"基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。\"]},\"450\":{\"h\":\"17. 为什么Mapper接口不需要实现类？\",\"t\":[\"四个字回答：动态代理，我们来看一下获取Mapper的过程：\",\"获取Mapper\",\"我们都知道定义的Mapper接口是没有实现类的，Mapper映射其实是通过动态代理实现的。\",\"BlogMapper mapper = session.getMapper(BlogMapper.class); \",\"七拐八绕地进去看一下，发现获取Mapper的过程，需要先获取MapperProxyFactory——Mapper代理工厂。\",\"public <T> T getMapper(Class<T> type, SqlSession sqlSession) { MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory)this.knownMappers.get(type); if (mapperProxyFactory == null) { throw new BindingException(\\\"Type \\\" + type + \\\" is not known to the MapperRegistry.\\\"); } else { try { return mapperProxyFactory.newInstance(sqlSession); } catch (Exception var5) { throw new BindingException(\\\"Error getting mapper instance. Cause: \\\" + var5, var5); } } } \",\"MapperProxyFactory\",\"MapperProxyFactory的作用是生成MapperProxy（Mapper代理对象）。\",\"public class MapperProxyFactory<T> { private final Class<T> mapperInterface; …… protected T newInstance(MapperProxy<T> mapperProxy) { return Proxy.newProxyInstance(this.mapperInterface.getClassLoader(), new Class[]{this.mapperInterface}, mapperProxy); } public T newInstance(SqlSession sqlSession) { MapperProxy<T> mapperProxy = new MapperProxy(sqlSession, this.mapperInterface, this.methodCache); return this.newInstance(mapperProxy); } } \",\"这里可以看到动态代理对接口的绑定，它的作用就是生成动态代理对象（占位），而代理的方法被放到了MapperProxy中。\",\"MapperProxy\",\"MapperProxy里，通常会生成一个MapperMethod对象，它是通过cachedMapperMethod方法对其进行初始化的，然后执行excute方法。\",\"public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { try { return Object.class.equals(method.getDeclaringClass()) ? method.invoke(this, args) : this.cachedInvoker(method).invoke(proxy, method, args, this.sqlSession); } catch (Throwable var5) { throw ExceptionUtil.unwrapThrowable(var5); } } \",\"MapperMethod\",\"MapperMethod里的excute方法，会真正去执行sql。这里用到了命令模式，其实绕一圈，最终它还是通过SqlSession的实例去运行对象的sql。\",\"public Object execute(SqlSession sqlSession, Object[] args) { Object result; Object param; …… case SELECT: if (this.method.returnsVoid() && this.method.hasResultHandler()) { this.executeWithResultHandler(sqlSession, args); result = null; } else if (this.method.returnsMany()) { result = this.executeForMany(sqlSession, args); } else if (this.method.returnsMap()) { result = this.executeForMap(sqlSession, args); } else if (this.method.returnsCursor()) { result = this.executeForCursor(sqlSession, args); } else { param = this.method.convertArgsToSqlCommandParam(args); result = sqlSession.selectOne(this.command.getName(), param); if (this.method.returnsOptional() && (result == null || !this.method.getReturnType().equals(result.getClass()))) { result = Optional.ofNullable(result); } } break; …… } \"]},\"451\":{\"h\":\"18.Mybatis都有哪些Executor执行器？\",\"t\":[\"Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。\",\"SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。\",\"ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map<String, Statement>内，供下一次使用。简言之，就是重复使用Statement对象。\",\"BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。\",\"作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。\",\"Mybatis中如何指定使用哪一种Executor执行器？\",\"在Mybatis配置文件中，在设置（settings）可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数，如SqlSession openSession(ExecutorType execType)。\",\"配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"452\":{\"h\":\"插件\"},\"453\":{\"h\":\"19. 说说Mybatis的插件运行原理，如何编写一个插件？\",\"t\":[\"插件的运行原理？\",\"Mybatis会话的运行需要ParameterHandler、ResultSetHandler、StatementHandler、Executor这四大对象的配合，插件的原理就是在这四大对象调度的时候，插入一些我我们自己的代码。\",\"Mybatis使用JDK的动态代理，为目标对象生成代理对象。它提供了一个工具类Plugin，实现了InvocationHandler接口。\",\"使用Plugin生成代理对象，代理对象在调用方法的时候，就会进入invoke方法，在invoke方法中，如果存在签名的拦截方法，插件的intercept方法就会在这里被我们调用，然后就返回结果。如果不存在签名方法，那么将直接反射调用我们要执行的方法。\",\"如何编写一个插件？\",\"我们自己编写MyBatis 插件，只需要实现拦截器接口 Interceptor (org.apache.ibatis. plugin Interceptor ），在实现类中对拦截对象和方法进行处理。\",\"实现Mybatis的Interceptor接口并重写intercept()方法\",\"这里我们只是在目标对象执行目标方法的前后进行了打印；\",\"public class MyInterceptor implements Interceptor { Properties props=null; @Override public Object intercept(Invocation invocation) throws Throwable { System.out.println(\\\"before……\\\"); //如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法 // 如果不是它就会调用下个插件代理对象的invoke方法 Object obj=invocation.proceed(); System.out.println(\\\"after……\\\"); return obj; } } \",\"然后再给插件编写注解，确定要拦截的对象，要拦截的方法\",\"@Intercepts({@Signature( type = Executor.class, //确定要拦截的对象 method = \\\"update\\\", //确定要拦截的方法 args = {MappedStatement.class,Object.class} //拦截方法的参数 )}) public class MyInterceptor implements Interceptor { Properties props=null; @Override public Object intercept(Invocation invocation) throws Throwable { System.out.println(\\\"before……\\\"); //如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法 // 如果不是它就会调用下个插件代理对象的invoke方法 Object obj=invocation.proceed(); System.out.println(\\\"after……\\\"); return obj; } } \",\"最后，再MyBatis配置文件里面配置插件\",\"<plugins> <plugin interceptor=\\\"xxx.MyPlugin\\\"> <property name=\\\"dbType\\\",value=\\\"mysql\\\"/> </plugin> </plugins> \"]},\"454\":{\"h\":\"20. MyBatis是如何进行分页的？分页插件的原理是什么？\",\"t\":[\"MyBatis是如何分页的？\",\"MyBatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。\",\"分页插件的原理是什么？\",\"分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，拦截Executor的query方法\",\"在执行查询的时候，拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。\",\"举例：select * from student，拦截sql后重写为：select t.* from (select * from student) t limit 0, 10\",\"可以看一下一个大概的MyBatis通用分页拦截器：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"图文详解 20 道MyBatis面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"455\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"6400 字 30 张手绘图，详解 20 道 MyBatis 面试高频题（让天下没有难背的八股），面渣背会这些 MyBatis 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/mybatis.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"6400 字 30 张手绘图，详解 20 道 MyBatis 面试高频题（让天下没有难背的八股），面渣背会这些 MyBatis 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"456\":{\"h\":\"\",\"t\":[\"1.8 万字 69 张手绘图，详解 66 道 MySQL 面试高频题（让天下没有难背的八股），面渣背会这些 MySQL 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"457\":{\"h\":\"基础\",\"t\":[\"作为 SQL Boy，基础部分不会有人不会吧？面试也不怎么问，基础掌握不错的小伙伴可以跳过这一部分。当然，可能会现场写一些 SQL 语句，SQ 语句可以通过牛客、LeetCode、LintCode 之类的网站来练习。\"]},\"458\":{\"h\":\"1. 什么是内连接、外连接、交叉连接、笛卡尔积呢？\",\"t\":[\"内连接（inner join）：取得两张表中满足存在连接匹配关系的记录。\",\"外连接（outer join）：不只取得两张表中满足存在连接匹配关系的记录，还包括某张表（或两张表）中不满足匹配关系的记录。\",\"交叉连接（cross join）：显示两张表所有记录一一对应，没有匹配关系进行筛选，它是笛卡尔积在 SQL 中的实现，如果 A 表有 m 行，B 表有 n 行，那么 A 和 B 交叉连接的结果就有 m*n 行。\",\"笛卡尔积：是数学中的一个概念，例如集合 A={a,b}，集合 B={0,1,2}，那么 A✖️B={<a,o>,<a,1>,<a,2>,<b,0>,<b,1>,<b,2>,}。\"]},\"459\":{\"h\":\"2. 那 MySQL 的内连接、左连接、右连接有有什么区别？\",\"t\":[\"MySQL 的连接主要分为内连接和外连接，外连接常用的有左连接、右连接。\",\"MySQL-joins-来源菜鸟教程\",\"inner join 内连接，在两张表进行连接查询时，只保留两张表中完全匹配的结果集\",\"left join 在两张表进行连接查询时，会返回左表所有的行，即使在右表中没有匹配的记录。\",\"right join 在两张表进行连接查询时，会返回右表所有的行，即使在左表中没有匹配的记录。\"]},\"460\":{\"h\":\"3.说一下数据库的三大范式？\",\"t\":[\"第一范式：数据表中的每一列（每个字段）都不可以再拆分。例如用户表，用户地址还可以拆分成国家、省份、市，这样才是符合第一范式的。\",\"第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。例如订单表里，存储了商品信息（商品价格、商品类型），那就需要把商品 ID 和订单 ID 作为联合主键，才满足第二范式。\",\"第三范式：在满足第二范式的基础上，表中的非主键只依赖于主键，而不依赖于其他非主键。例如订单表，就不能存储用户信息（姓名、地址）。\",\"三大范式的作用是为了控制数据库的冗余，是对空间的节省，实际上，一般互联网公司的设计都是反范式的，通过冗余一些数据，避免跨表跨库，利用空间换时间，提高性能。\"]},\"461\":{\"h\":\"4.varchar 与 char 的区别？\",\"t\":[\"char：\",\"char 表示定长字符串，长度是固定的；\",\"如果插入数据的长度小于 char 的固定长度时，则用空格填充；\",\"因为长度固定，所以存取速度要比 varchar 快很多，甚至能快 50%，但正因为其长度固定，所以会占据多余的空间，是空间换时间的做法；\",\"对于 char 来说，最多能存放的字符个数为 255，和编码无关\",\"varchar：\",\"varchar 表示可变长字符串，长度是可变的；\",\"插入的数据是多长，就按照多长来存储；\",\"varchar 在存取方面与 char 相反，它存取慢，因为长度不固定，但正因如此，不占据多余的空间，是时间换空间的做法；\",\"对于 varchar 来说，最多能存放的字符个数为 65532\",\"日常的设计，对于长度相对固定的字符串，可以使用 char，对于长度不确定的，使用 varchar 更合适一些。\"]},\"462\":{\"h\":\"5.blob 和 text 有什么区别？\",\"t\":[\"blob 用于存储二进制数据，而 text 用于存储大字符串。\",\"blob 没有字符集，text 有一个字符集，并且根据字符集的校对规则对值进行排序和比较\"]},\"463\":{\"h\":\"6.DATETIME 和 TIMESTAMP 的异同？\",\"t\":[\"相同点：\",\"两个数据类型存储时间的表现格式一致。均为 YYYY-MM-DD HH:MM:SS\",\"两个数据类型都包含「日期」和「时间」部分。\",\"两个数据类型都可以存储微秒的小数秒（秒后 6 位小数秒）\",\"区别：\",\"DATETIME 和 TIMESTAMP 的区别\",\"日期范围：DATETIME 的日期范围是 1000-01-01 00:00:00.000000 到 9999-12-31 23:59:59.999999；TIMESTAMP 的时间范围是1970-01-01 00:00:01.000000 UTC 到 ``2038-01-09 03:14:07.999999 UTC\",\"存储空间：DATETIME 的存储空间为 8 字节；TIMESTAMP 的存储空间为 4 字节\",\"时区相关：DATETIME 存储时间与时区无关；TIMESTAMP 存储时间与时区有关，显示的值也依赖于时区\",\"默认值：DATETIME 的默认值为 null；TIMESTAMP 的字段默认不为空(not null)，默认值为当前时间(CURRENT_TIMESTAMP)\"]},\"464\":{\"h\":\"7.MySQL 中 in 和 exists 的区别？\",\"t\":[\"MySQL 中的 in 语句是把外表和内表作 hash 连接，而 exists 语句是对外表作 loop 循环，每次 loop 循环再对内表进行查询。我们可能认为 exists 比 in 语句的效率要高，这种说法其实是不准确的，要区分情景：\",\"如果查询的两个表大小相当，那么用 in 和 exists 差别不大。\",\"如果两个表中一个较小，一个是大表，则子查询表大的用 exists，子查询表小的用 in。\",\"not in 和 not exists：如果查询语句使用了 not in，那么内外表都进行全表扫描，没有用到索引；而 not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用 not exists 都比 not in 要快。\"]},\"465\":{\"h\":\"8.MySQL 里记录货币用什么字段类型比较好？\",\"t\":[\"货币在数据库中 MySQL 常用 Decimal 和 Numric 类型表示，这两种类型被 MySQL 实现为同样的类型。他们被用于保存与货币有关的数据。\",\"例如 salary DECIMAL(9,2)，9(precision)代表将被用于存储值的总的小数位数，而 2(scale)代表将被用于存储小数点后的位数。存储在 salary 列中的值的范围是从-9999999.99 到 9999999.99。\",\"DECIMAL 和 NUMERIC 值作为字符串存储，而不是作为二进制浮点数，以便保存那些值的小数精度。\",\"之所以不使用 float 或者 double 的原因：因为 float 和 double 是以二进制存储的，所以有一定的误差。\"]},\"466\":{\"h\":\"9.MySQL 怎么存储 emoji😊?\",\"t\":[\"MySQL 可以直接使用字符串存储 emoji。\",\"但是需要注意的，utf8 编码是不行的，MySQL 中的 utf8 是阉割版的 utf8，它最多只用 3 个字节存储字符，所以存储不了表情。那该怎么办？\",\"需要使用 utf8mb4 编码。\",\"alter table blogs modify content text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci not null; \"]},\"467\":{\"h\":\"10.drop、delete 与 truncate 的区别？\",\"t\":[\"三者都表示删除，但是三者有一些差别：\",\"delete\",\"truncate\",\"drop\",\"类型\",\"属于 DML\",\"属于 DDL\",\"回滚\",\"可回滚\",\"不可回滚\",\"删除内容\",\"表结构还在，删除表的全部或者一部分数据行\",\"表结构还在，删除表中的所有数据\",\"删除速度\",\"删除速度慢，需要逐行删除\",\"删除速度快\",\"因此，在不再需要一张表的时候，用 drop；在想删除部分数据行时候，用 delete；在保留表而删除所有数据的时候用 truncate。\"]},\"468\":{\"h\":\"11.UNION 与 UNION ALL 的区别？\",\"t\":[\"如果使用 UNION，会在表链接后筛选掉重复的记录行\",\"如果使用 UNION ALL，不会合并重复的记录行\",\"从效率上说，UNION ALL 要比 UNION 快很多，如果合并没有刻意要删除重复行，那么就使用 UNION All\"]},\"469\":{\"h\":\"12.count(1)、count(*) 与 count(列名) 的区别？\",\"t\":[\"执行效果：\",\"count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为 NULL\",\"count(1)包括了忽略所有列，用 1 代表代码行，在统计结果的时候，不会忽略列值为 NULL\",\"count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者 0，而是表示 null）的计数，即某个字段值为 NULL 时，不统计。\",\"执行速度：\",\"列名为主键，count(列名)会比 count(1)快\",\"列名不为主键，count(1)会比 count(列名)快\",\"如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）\",\"如果有主键，则 select count（主键）的执行效率是最优的\",\"如果表只有一个字段，则 select count（*）最优。\"]},\"470\":{\"h\":\"13.一条 SQL 查询语句的执行顺序？\",\"t\":[\"FROM：对 FROM 子句中的左表<left_table>和右表<right_table>执行笛卡儿积（Cartesianproduct），产生虚拟表 VT1\",\"ON：对虚拟表 VT1 应用 ON 筛选，只有那些符合<join_condition>的行才被插入虚拟表 VT2 中\",\"JOIN：如果指定了 OUTER JOIN（如 LEFT OUTER JOIN、RIGHT OUTER JOIN），那么保留表中未匹配的行作为外部行添加到虚拟表 VT2 中，产生虚拟表 VT3。如果 FROM 子句包含两个以上表，则对上一个连接生成的结果表 VT3 和下一个表重复执行步骤 1）～步骤 3），直到处理完所有的表为止\",\"WHERE：对虚拟表 VT3 应用 WHERE 过滤条件，只有符合<where_condition>的记录才被插入虚拟表 VT4 中\",\"GROUP BY：根据 GROUP BY 子句中的列，对 VT4 中的记录进行分组操作，产生 VT5\",\"CUBE|ROLLUP：对表 VT5 进行 CUBE 或 ROLLUP 操作，产生表 VT6\",\"HAVING：对虚拟表 VT6 应用 HAVING 过滤器，只有符合<having_condition>的记录才被插入虚拟表 VT7 中。\",\"SELECT：第二次执行 SELECT 操作，选择指定的列，插入到虚拟表 VT8 中\",\"DISTINCT：去除重复数据，产生虚拟表 VT9\",\"ORDER BY：将虚拟表 VT9 中的记录按照<order_by_list>进行排序操作，产生虚拟表 VT10。11）\",\"LIMIT：取出指定行的记录，产生虚拟表 VT11，并返回给查询用户\"]},\"471\":{\"h\":\"数据库架构\"},\"472\":{\"h\":\"14.说说 MySQL 的基础架构?\",\"t\":[\"MySQL 逻辑架构图主要分三层：\",\"客户端：最上层的服务并不是 MySQL 所独有的，大多数基于网络的客户端/服务器的工具或者服务都有类似的架构。比如连接处理、授权认证、安全等等。\",\"Server 层：大多数 MySQL 的核心服务功能都在这一层，包括查询解析、分析、优化、缓存以及所有的内置函数（例如，日期、时间、数学和加密函数），所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。\",\"存储引擎层：第三层包含了存储引擎。存储引擎负责 MySQL 中数据的存储和提取。Server 层通过 API 与存储引擎进行通信。这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。\"]},\"473\":{\"h\":\"15.一条 SQL 查询语句在 MySQL 中如何执行的？\",\"t\":[\"先检查该语句是否有权限，如果没有权限，直接返回错误信息，如果有权限会先查询缓存 (MySQL8.0 版本以前)。\",\"如果没有缓存，分析器进行语法分析，提取 sql 语句中 select 等关键元素，然后判断 sql 语句是否有语法错误，比如关键词是否正确等等。\",\"语法解析之后，MySQL 的服务器会对查询的语句进行优化，确定执行的方案。\",\"完成查询优化后，按照生成的执行计划调用数据库引擎接口，返回执行结果。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"474\":{\"h\":\"存储引擎\"},\"475\":{\"h\":\"16.MySQL 有哪些常见存储引擎？\",\"t\":[\"主要存储引擎以及功能如下：\",\"功能\",\"MylSAM\",\"MEMORY\",\"InnoDB\",\"存储限制\",\"256TB\",\"RAM\",\"64TB\",\"支持事务\",\"No\",\"No\",\"Yes\",\"支持全文索引\",\"Yes\",\"No\",\"Yes\",\"支持树索引\",\"Yes\",\"Yes\",\"Yes\",\"支持哈希索引\",\"No\",\"Yes\",\"Yes\",\"支持数据缓存\",\"No\",\"N/A\",\"Yes\",\"支持外键\",\"No\",\"No\",\"Yes\",\"MySQL5.5 之前，默认存储引擎是 MylSAM，5.5 之后变成了 InnoDB。\",\"InnoDB 支持的哈希索引是自适应的，InnoDB 会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表中生成哈希索引。\",\"MySQL 5.6 开始 InnoDB 支持全文索引。\"]},\"476\":{\"h\":\"17.那存储引擎应该怎么选择？\",\"t\":[\"大致上可以这么选择：\",\"大多数情况下，使用默认的 InnoDB 就够了。如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 就是比较靠前的选择了。\",\"如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。\",\"如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。\",\"使用哪一种引擎可以根据需要灵活选择，因为存储引擎是基于表的，所以一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求。使用合适的存储引擎将会提高整个数据库的性能。\"]},\"477\":{\"h\":\"18.InnoDB 和 MylSAM 主要有什么区别？\",\"t\":[\"PS:MySQL8.0 都开始慢慢流行了，如果不是面试，MylSAM 其实可以不用怎么了解。\",\"1. 存储结构：每个 MyISAM 在磁盘上存储成三个文件；InnoDB 所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB。\",\"2. 事务支持：MyISAM 不提供事务支持；InnoDB 提供事务支持事务，具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全特性。\",\"3 最小锁粒度：MyISAM 只支持表级锁，更新时会锁住整张表，导致其它查询和更新都会被阻塞 InnoDB 支持行级锁。\",\"4. 索引类型：MyISAM 的索引为非聚簇索引，数据结构是 B 树；InnoDB 的索引是聚簇索引，数据结构是 B+树。\",\"5. 主键必需：MyISAM 允许没有任何索引和主键的表存在；InnoDB 如果没有设定主键或者非空唯一索引，**就会自动生成一个 6 字节的主键(用户不可见)**，数据是主索引的一部分，附加索引保存的是主索引的值。\",\"6. 表的具体行数：MyISAM 保存了表的总行数，如果 select count(*) from table;会直接取出出该值; InnoDB 没有保存表的总行数，如果使用 select count(*) from table；就会遍历整个表;但是在加了 wehre 条件后，MyISAM 和 InnoDB 处理的方式都一样。\",\"7. 外键支持：MyISAM 不支持外键；InnoDB 支持外键。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"478\":{\"h\":\"日志\"},\"479\":{\"h\":\"19.MySQL 日志文件有哪些？分别介绍下作用？\",\"t\":[\"MySQL 日志文件有很多，包括 ：\",\"错误日志（error log）：错误日志文件对 MySQL 的启动、运行、关闭过程进行了记录，能帮助定位 MySQL 问题。\",\"慢查询日志（slow query log）：慢查询日志是用来记录执行时间超过 long_query_time 这个变量定义的时长的查询语句。通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。\",\"一般查询日志（general log）：一般查询日志记录了所有对 MySQL 数据库请求的信息，无论请求是否正确执行。\",\"二进制日志（bin log）：关于二进制日志，它记录了数据库所有执行的 DDL 和 DML 语句（除了数据查询语句 select、show 等），以事件形式记录并保存在二进制文件中。\",\"还有两个 InnoDB 存储引擎特有的日志文件：\",\"重做日志（redo log）：重做日志至关重要，因为它们记录了对于 InnoDB 存储引擎的事务日志。\",\"回滚日志（undo log）：回滚日志同样也是 InnoDB 引擎提供的日志，顾名思义，回滚日志的作用就是对数据进行回滚。当事务对数据库进行修改，InnoDB 引擎不仅会记录 redo log，还会生成对应的 undo log 日志；如果事务执行失败或调用了 rollback，导致事务需要回滚，就可以利用 undo log 中的信息将数据回滚到修改之前的样子。\"]},\"480\":{\"h\":\"20.binlog 和 redo log 有什么区别？\",\"t\":[\"bin log 会记录所有与数据库有关的日志记录，包括 InnoDB、MyISAM 等存储引擎的日志，而 redo log 只记 InnoDB 存储引擎的日志。\",\"记录的内容不同，bin log 记录的是关于一个事务的具体操作内容，即该日志是逻辑日志。而 redo log 记录的是关于每个页（Page）的更改的物理情况。\",\"写入的时间不同，bin log 仅在事务提交前进行提交，也就是只写磁盘一次。而在事务进行的过程中，却不断有 redo ertry 被写入 redo log 中。\",\"写入的方式也不相同，redo log 是循环写入和擦除，bin log 是追加写入，不会覆盖已经写的文件。\"]},\"481\":{\"h\":\"21.一条更新语句怎么执行的了解吗？\",\"t\":[\"更新语句的执行是 Server 层和引擎层配合完成，数据除了要写入表中，还要记录相应的日志。\",\"执行器先找引擎获取 ID=2 这一行。ID 是主键，存储引擎检索数据，找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。\",\"执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。\",\"引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。\",\"执行器生成这个操作的 binlog，并把 binlog 写入磁盘。\",\"执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。\",\"从上图可以看出，MySQL 在执行更新语句的时候，在服务层进行语句的解析和执行，在引擎层进行数据的提取和存储；同时在服务层对 binlog 进行写入，在 InnoDB 内进行 redo log 的写入。\",\"不仅如此，在对 redo log 写入时有两个阶段的提交，一是 binlog 写入之前prepare状态的写入，二是 binlog 写入之后commit状态的写入。\"]},\"482\":{\"h\":\"22.那为什么要两阶段提交呢？\",\"t\":[\"为什么要两阶段提交呢？直接提交不行吗？\",\"我们可以假设不采用两阶段提交的方式，而是采用“单阶段”进行提交，即要么先写入 redo log，后写入 binlog；要么先写入 binlog，后写入 redo log。这两种方式的提交都会导致原先数据库的状态和被恢复后的数据库的状态不一致。\",\"先写入 redo log，后写入 binlog：\",\"在写完 redo log 之后，数据此时具有crash-safe能力，因此系统崩溃，数据会恢复成事务开始之前的状态。但是，若在 redo log 写完时候，binlog 写入之前，系统发生了宕机。此时 binlog 没有对上面的更新语句进行保存，导致当使用 binlog 进行数据库的备份或者恢复时，就少了上述的更新语句。从而使得id=2这一行的数据没有被更新。\",\"先写入 binlog，后写入 redo log：\",\"写完 binlog 之后，所有的语句都被保存，所以通过 binlog 复制或恢复出来的数据库中 id=2 这一行的数据会被更新为 a=1。但是如果在 redo log 写入之前，系统崩溃，那么 redo log 中记录的这个事务会无效，导致实际数据库中id=2这一行的数据并没有更新。\",\"简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。\"]},\"483\":{\"h\":\"23.redo log 怎么刷入磁盘的知道吗？\",\"t\":[\"redo log 的写入不是直接落到磁盘，而是在内存中设置了一片称之为redo log buffer的连续内存空间，也就是redo 日志缓冲区。\",\"什么时候会刷入磁盘？\",\"在如下的一些情况中，log buffer 的数据会刷入磁盘：\",\"log buffer 空间不足时\",\"log buffer 的大小是有限的，如果不停的往这个有限大小的 log buffer 里塞入日志，很快它就会被填满。如果当前写入 log buffer 的 redo 日志量已经占满了 log buffer 总容量的大约一半左右，就需要把这些日志刷新到磁盘上。\",\"事务提交时\",\"在事务提交时，为了保证持久性，会把 log buffer 中的日志全部刷到磁盘。注意，这时候，除了本事务的，可能还会刷入其它事务的日志。\",\"后台线程输入\",\"有一个后台线程，大约每秒都会刷新一次log buffer中的redo log到磁盘。\",\"正常关闭服务器时\",\"触发 checkpoint 规则\",\"重做日志缓存、重做日志文件都是以块（block）的方式进行保存的，称之为重做日志块（redo log block）,块的大小是固定的 512 字节。我们的 redo log 它是固定大小的，可以看作是一个逻辑上的 log group，由一定数量的log block 组成。\",\"它的写入方式是从头到尾开始写，写到末尾又回到开头循环写。\",\"其中有两个标记位置：\",\"write pos是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到磁盘。\",\"当write_pos追上checkpoint时，表示 redo log 日志已经写满。这时候就不能接着往里写数据了，需要执行checkpoint规则腾出可写空间。\",\"所谓的checkpoint 规则，就是 checkpoint 触发后，将 buffer 中日志页都刷到磁盘。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"484\":{\"h\":\"SQL 优化\"},\"485\":{\"h\":\"24.慢 SQL 如何定位呢？\",\"t\":[\"慢 SQL 的监控主要通过两个途径：\",\"慢查询日志：开启 MySQL 的慢查询日志，再通过一些工具比如 mysqldumpslow 去分析对应的慢查询日志，当然现在一般的云厂商都提供了可视化的平台。\",\"服务监控：可以在业务的基建中加入对慢 SQL 的监控，常见的方案有字节码插桩、连接池扩展、ORM 框架过程，对服务运行中的慢 SQL 进行监控和告警。\"]},\"486\":{\"h\":\"25.有哪些方式优化慢 SQL？\",\"t\":[\"慢 SQL 的优化，主要从两个方面考虑，SQL 语句本身的优化，以及数据库设计的优化。\"]},\"487\":{\"h\":\"避免不必要的列\",\"t\":[\"这个是老生常谈，但还是经常会出的情况，SQL 查询的时候，应该只查询需要的列，而不要包含额外的列，像slect * 这种写法应该尽量避免。\"]},\"488\":{\"h\":\"分页优化\",\"t\":[\"在数据量比较大，分页比较深的情况下，需要考虑分页的优化。\",\"例如：\",\"select * from table where type = 2 and level = 9 order by id asc limit 190289,10; \",\"优化方案：\",\"延迟关联\",\"先通过 where 条件提取出主键，在将该表与原数据表关联，通过主键 id 提取数据行，而不是通过原来的二级索引提取数据行\",\"例如：\",\"select a.* from table a, (select id from table where type = 2 and level = 9 order by id asc limit 190289,10 ) b where a.id = b.id \",\"书签方式\",\"书签方式就是找到 limit 第一个参数对应的主键值，根据这个主键值再去过滤并 limit\",\"例如：\",\" select * from table where id > (select * from table where type = 2 and level = 9 order by id asc limit 190 \"]},\"489\":{\"h\":\"索引优化\",\"t\":[\"合理地设计和使用索引，是优化慢 SQL 的利器。\",\"利用覆盖索引\",\"InnoDB 使用非主键索引查询数据时会回表，但是如果索引的叶节点中已经包含要查询的字段，那它没有必要再回表查询了，这就叫覆盖索引\",\"例如对于如下查询：\",\"select name from test where city='上海' \",\"我们将被查询的字段建立到联合索引中，这样查询结果就可以直接从索引中获取\",\"alter table test add index idx_city_name (city, name); \",\"低版本避免使用 or 查询\",\"在 MySQL 5.0 之前的版本要尽量避免使用 or 查询，可以使用 union 或者子查询来替代，因为早期的 MySQL 版本使用 or 查询可能会导致索引失效，高版本引入了索引合并，解决了这个问题。\",\"避免使用 != 或者 <> 操作符\",\"SQL 中，不等于操作符会导致查询引擎放弃查询索引，引起全表扫描，即使比较的字段上有索引\",\"解决方法：通过把不等于操作符改成 or，可以使用索引，避免全表扫描\",\"例如，把column<>’aaa’，改成column>’aaa’ or column<’aaa’，就可以使用索引了\",\"适当使用前缀索引\",\"适当地使用前缀所云，可以降低索引的空间占用，提高索引的查询效率。\",\"比如，邮箱的后缀都是固定的“@xxx.com”，那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引\",\"alter table test add index index2(email(6)); \",\"PS:需要注意的是，前缀索引也存在缺点，MySQL 无法利用前缀索引做 order by 和 group by 操作，也无法作为覆盖索引\",\"避免列上函数运算\",\"要避免在列字段上进行算术运算或其他表达式运算，否则可能会导致存储引擎无法正确使用索引，从而影响了查询的效率\",\"select * from test where id + 1 = 50; select * from test where month(updateTime) = 7; \",\"正确使用联合索引\",\"使用联合索引的时候，注意最左匹配原则。\"]},\"490\":{\"h\":\"JOIN 优化\",\"t\":[\"优化子查询\",\"尽量使用 Join 语句来替代子查询，因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，同时对于返回结果集比较大的子查询，其对查询性能的影响更大\",\"小表驱动大表\",\"关联查询的时候要拿小表去驱动大表，因为关联的时候，MySQL 内部会遍历驱动表，再去连接被驱动表。\",\"比如 left join，左表就是驱动表，A 表小于 B 表，建立连接的次数就少，查询速度就被加快了。\",\" select name from A left join B ; \",\"适当增加冗余字段\",\"增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略\",\"避免使用 JOIN 关联太多的表\",\"《阿里巴巴 Java 开发手册》规定不要 join 超过三张表，第一 join 太多降低查询的速度，第二 join 的 buffer 会占用更多的内存。\",\"如果不可避免要 join 多张表，可以考虑使用数据异构的方式异构到 ES 中查询。\"]},\"491\":{\"h\":\"排序优化\",\"t\":[\"利用索引扫描做排序\",\"MySQL 有两种方式生成有序结果：其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的\",\"但是如果索引不能覆盖查询所需列，就不得不每扫描一条记录回表查询一次，这个读操作是随机 IO，通常会比顺序全表扫描还慢\",\"因此，在设计索引时，尽可能使用同一个索引既满足排序又用于查找行\",\"例如：\",\"--建立索引（date,staff_id,customer_id） select staff_id, customer_id from test where date = '2010-01-01' order by staff_id,customer_id; \",\"只有当索引的列顺序和 ORDER BY 子句的顺序完全一致，并且所有列的排序方向都一样时，才能够使用索引来对结果做排序\"]},\"492\":{\"h\":\"UNION 优化\",\"t\":[\"条件下推\",\"MySQL 处理 union 的策略是先创建临时表，然后将各个查询结果填充到临时表中最后再来做查询，很多优化策略在 union 查询中都会失效，因为它无法利用索引\",\"最好手工将 where、limit 等子句下推到 union 的各个子查询中，以便优化器可以充分利用这些条件进行优化\",\"此外，除非确实需要服务器去重，一定要使用 union all，如果不加 all 关键字，MySQL 会给临时表加上 distinct 选项，这会导致对整个临时表做唯一性检查，代价很高。\"]},\"493\":{\"h\":\"26.怎么看执行计划（explain），如何理解其中各个字段的含义？\",\"t\":[\"explain 是 sql 优化的利器，除了优化慢 sql，平时的 sql 编写，也应该先 explain，查看一下执行计划，看看是否还有优化的空间。\",\"直接在 select 语句之前增加explain 关键字，就会返回执行计划的信息。\",\"id 列：MySQL 会为每个 select 语句分配一个唯一的 id 值\",\"select_type 列，查询的类型，根据关联、union、子查询等等分类，常见的查询类型有 SIMPLE、PRIMARY。\",\"table 列：表示 explain 的一行正在访问哪个表。\",\"type 列：最重要的列之一。表示关联类型或访问类型，即 MySQL 决定如何查找表中的行。\",\"性能从最优到最差分别为：system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\",\"system\",\"system：当表仅有一行记录时(系统表)，数据量很少，往往不需要进行磁盘 IO，速度非常快\",\"const\",\"const：表示查询时命中 primary key 主键或者 unique 唯一索引，或者被连接的部分是一个常量(const)值。这类扫描效率极高，返回数据量少，速度非常快。\",\"eq_ref\",\"eq_ref：查询时命中主键primary key 或者 unique key索引， type 就是 eq_ref。\",\"ref_or_null\",\"ref_or_null：这种连接类型类似于 ref，区别在于 MySQL会额外搜索包含NULL值的行。\",\"index_merge\",\"index_merge：使用了索引合并优化方法，查询使用了两个以上的索引。\",\"unique_subquery\",\"unique_subquery：替换下面的 IN子查询，子查询返回不重复的集合。\",\"index_subquery\",\"index_subquery：区别于unique_subquery，用于非唯一索引，可以返回重复值。\",\"range\",\"range：使用索引选择行，仅检索给定范围内的行。简单点说就是针对一个有索引的字段，给定范围检索数据。在where语句中使用 bettween...and、<、>、<=、in 等条件查询 type 都是 range。\",\"index\",\"index：Index 与ALL 其实都是读全表，区别在于index是遍历索引树读取，而ALL是从硬盘中读取。\",\"ALL\",\"就不用多说了，全表扫描。\",\"possible_keys 列：显示查询可能使用哪些索引来查找，使用索引优化 sql 的时候比较重要。\",\"key 列：这一列显示 mysql 实际采用哪个索引来优化对该表的访问，判断索引是否失效的时候常用。\",\"key_len 列：显示了 MySQL 使用\",\"ref 列：ref 列展示的就是与索引列作等值匹配的值，常见的有：const（常量），func，NULL，字段名。\",\"rows 列：这也是一个重要的字段，MySQL 查询优化器根据统计信息，估算 SQL 要查到结果集需要扫描读取的数据行数，这个值非常直观显示 SQL 的效率好坏，原则上 rows 越少越好。\",\"Extra 列：显示不适合在其它列的额外信息，虽然叫额外，但是也有一些重要的信息：\",\"Using index：表示 MySQL 将使用覆盖索引，以避免回表\",\"Using where：表示会在存储引擎检索之后再进行过滤\",\"Using temporary ：表示对查询结果排序时会使用一个临时表。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"494\":{\"h\":\"索引\",\"t\":[\"索引可以说是 MySQL 面试中的重中之重，一定要彻底拿下。\"]},\"495\":{\"h\":\"27.能简单说一下索引的分类吗？\",\"t\":[\"从三个不同维度对索引分类：\",\"例如从基本使用使用的角度来讲：\",\"主键索引: InnoDB 主键是默认的索引，数据列不允许重复，不允许为 NULL，一个表只能有一个主键。\",\"唯一索引: 数据列不允许重复，允许为 NULL 值，一个表允许多个列创建唯一索引。\",\"普通索引: 基本的索引类型，没有唯一性的限制，允许为 NULL 值。\",\"组合索引：多列值组成一个索引，用于组合搜索，效率大于索引合并\"]},\"496\":{\"h\":\"28.为什么使用索引会加快查询？\",\"t\":[\"传统的查询方法，是按照表的顺序遍历的，不论查询几条数据，MySQL 需要将表的数据从头到尾遍历一遍。\",\"在我们添加完索引之后，MySQL 一般通过 BTREE 算法生成一个索引文件，在查询数据库时，找到索引文件进行遍历，在比较小的索引数据里查找，然后映射到对应的数据，能大幅提升查找的效率。\",\"和我们通过书的目录，去查找对应的内容，一样的道理。\"]},\"497\":{\"h\":\"29.创建索引有哪些注意点？\",\"t\":[\"索引虽然是 sql 性能优化的利器，但是索引的维护也是需要成本的，所以创建索引，也要注意：\",\"索引应该建在查询应用频繁的字段\",\"在用于 where 判断、 order 排序和 join 的(on)字段上创建索引。\",\"索引的个数应该适量\",\"索引需要占用空间；更新时候也需要维护。\",\"区分度低的字段，例如性别，不要建索引。\",\"离散度太低的字段，扫描的行数降低的有限。\",\"频繁更新的值，不要作为主键或者索引\",\"维护索引文件需要成本；还会导致页分裂，IO 次数增多。\",\"组合索引把散列性高(区分度高)的值放在前面\",\"为了满足最左前缀匹配原则\",\"创建组合索引，而不是修改单列索引。\",\"组合索引代替多个单列索引（对于单列索引，MySQL 基本只能使用一个索引，所以经常使用多个条件查询时更适合使用组合索引）\",\"过长的字段，使用前缀索引。当字段值比较长的时候，建立索引会消耗很多的空间，搜索起来也会很慢。我们可以通过截取字段的前面一部分内容建立索引，这个就叫前缀索引。\",\"不建议用无序的值(例如身份证、UUID )作为索引\",\"当主键具有不确定性，会造成叶子节点频繁分裂，出现磁盘存储的碎片化\"]},\"498\":{\"h\":\"30.索引哪些情况下会失效呢？\",\"t\":[\"查询条件包含 or，可能导致索引失效\",\"如果字段类型是字符串，where 时一定用引号括起来，否则会因为隐式类型转换，索引失效\",\"like 通配符可能导致索引失效。\",\"联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。\",\"在索引列上使用 mysql 的内置函数，索引失效。\",\"对索引列运算（如，+、-、*、/），索引失效。\",\"索引字段上使用（！= 或者 < >，not in）时，可能会导致索引失效。\",\"索引字段上使用 is null， is not null，可能导致索引失效。\",\"左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。\",\"MySQL 优化器估计使用全表扫描要比使用索引快,则不使用索引。\"]},\"499\":{\"h\":\"31.索引不适合哪些场景呢？\",\"t\":[\"数据量比较少的表不适合加索引\",\"更新比较频繁的字段也不适合加索引\",\"离散低的字段不适合加索引（如性别）\"]},\"500\":{\"h\":\"32.索引是不是建的越多越好呢？\",\"t\":[\"当然不是。\",\"索引会占据磁盘空间\",\"索引虽然会提高查询效率，但是会降低更新表的效率。比如每次对表进行增删改操作，MySQL 不仅要保存数据，还有保存或者更新对应的索引文件。\"]},\"501\":{\"h\":\"33.MySQL 索引用的什么数据结构了解吗？\",\"t\":[\"MySQL 的默认存储引擎是 InnoDB，它采用的是 B+树结构的索引。\",\"B+树：只有叶子节点才会存储数据，非叶子节点只存储键值。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。\",\"在这张图里，有两个重点：\",\"最外面的方块，的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（粉色所示）和指针（黄色/灰色所示），如根节点磁盘包含数据项 17 和 35，包含指针 P1、P2、P3，P1 表示小于 17 的磁盘块，P2 表示在 17 和 35 之间的磁盘块，P3 表示大于 35 的磁盘块。真实的数据存在于叶子节点即 3、4、5……、65。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如 17、35 并不真实存在于数据表中。\",\"叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表，可以进行范围查询。\"]},\"502\":{\"h\":\"34.那一棵 B+树能存储多少条数据呢？\",\"t\":[\"假设索引字段是 bigint 类型，长度为 8 字节。指针大小在 InnoDB 源码中设置为 6 字节，这样一共 14 字节。非叶子节点(一页)可以存储 16384/14=1170 个这样的 单元(键值+指针)，代表有 1170 个指针。\",\"树深度为 2 的时候，有 1170^2 个叶子节点，可以存储的数据为 1170*1170*16=21902400。\",\"在查找数据时一次页的查找代表一次 IO，也就是说，一张 2000 万左右的表，查询数据最多需要访问 3 次磁盘。\",\"所以在 InnoDB 中 B+ 树深度一般为 1-3 层，它就能满足千万级的数据存储。\"]},\"503\":{\"h\":\"35.为什么要用 B+ 树，而不用普通二叉树？\",\"t\":[\"可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少，以及查找磁盘次数。\",\"为什么不用普通二叉树？\",\"普通二叉树存在退化的情况，如果它退化成链表，相当于全表扫描。平衡二叉树相比于二叉查找树来说，查找效率更稳定，总体的查找速度也更快。\",\"为什么不用平衡二叉树呢？\",\"读取数据的时候，是从磁盘读到内存。如果树这种数据结构作为索引，那每查找一次数据就需要从磁盘中读取一个节点，也就是一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果是 B+ 树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数就降下来啦，查询效率就快。\"]},\"504\":{\"h\":\"36.为什么用 B+ 树而不用 B 树呢？\",\"t\":[\"B+相比较 B 树，有这些优势：\",\"它是 B Tree 的变种，B Tree 能解决的问题，它都能解决。\",\"B Tree 解决的两大问题：每个节点存储更多关键字；路数更多\",\"扫库、扫表能力更强\",\"如果我们要对表进行全表扫描，只需要遍历叶子节点就可以 了，不需要遍历整棵 B+Tree 拿到所有的数据。\",\"B+Tree 的磁盘读写能力相对于 B Tree 来说更强，IO 次数更少\",\"根节点和枝节点不保存数据区， 所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多，IO 次数更少。\",\"排序能力更强\",\"因为叶子节点上有下一个数据区的指针，数据形成了链表。\",\"效率更加稳定\",\"B+Tree 永远是在叶子节点拿到数据，所以 IO 次数是稳定的。\"]},\"505\":{\"h\":\"37.Hash 索引和 B+ 树索引区别是什么？\",\"t\":[\"B+ 树可以进行范围查询，Hash 索引不能。\",\"B+ 树支持联合索引的最左侧原则，Hash 索引不支持。\",\"B+ 树支持 order by 排序，Hash 索引不支持。\",\"Hash 索引在等值查询上比 B+ 树效率更高。\",\"B+ 树使用 like 进行模糊查询的时候，like 后面（比如 % 开头）的话可以起到优化的作用，Hash 索引根本无法进行模糊查询。\"]},\"506\":{\"h\":\"38.聚簇索引与非聚簇索引的区别？\",\"t\":[\"首先理解聚簇索引不是一种新的索引，而是而是一种数据存储方式。聚簇表示数据行和相邻的键值紧凑地存储在一起。我们熟悉的两种存储引擎——MyISAM 采用的是非聚簇索引，InnoDB 采用的是聚簇索引。\",\"可以这么说：\",\"索引的数据结构是树，聚簇索引的索引和数据存储在一棵树上，树的叶子节点就是数据，非聚簇索引索引和数据不在一棵树上。\",\"一个表中只能拥有一个聚簇索引，而非聚簇索引一个表可以存在多个。\",\"聚簇索引，索引中键值的逻辑顺序决定了表中相应行的物理顺序；索引，索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。\",\"聚簇索引：物理存储按照索引排序；非聚集索引：物理存储不按照索引排序；\"]},\"507\":{\"h\":\"39.回表了解吗？\",\"t\":[\"在 InnoDB 存储引擎里，利用辅助索引查询，先通过辅助索引找到主键索引的键值，再通过主键值查出主键索引里面没有符合要求的数据，它比基于主键索引的查询多扫描了一棵索引树，这个过程就叫回表。\",\"例如:select \\\\* from user where name = ‘张三’;\"]},\"508\":{\"h\":\"40.覆盖索引了解吗？\",\"t\":[\"在辅助索引里面，不管是单列索引还是联合索引，如果 select 的数据列只用辅助索引中就能够取得，不用去查主键索引，这时候使用的索引就叫做覆盖索引，避免了回表。\",\"比如，select name from user where name = ‘张三’;\"]},\"509\":{\"h\":\"41.什么是最左前缀原则/最左匹配原则？\",\"t\":[\"注意：最左前缀原则、最左匹配原则、最左前缀匹配原则这三个都是一个概念。\",\"最左匹配原则：在 InnoDB 的联合索引中，查询的时候只有匹配了前一个/左边的值之后，才能匹配下一个。\",\"根据最左匹配原则，我们创建了一个组合索引，如 (a1,a2,a3)，相当于创建了（a1）、(a1,a2)和 (a1,a2,a3) 三个索引。\",\"为什么不从最左开始查，就无法匹配呢？\",\"比如有一个 user 表，我们给 name 和 age 建立了一个组合索引。\",\"ALTER TABLE user add INDEX comidx_name_phone (name,age); \",\"组合索引在 B+Tree 中是复合的数据结构，它是按照从左到右的顺序来建立搜索树的 (name 在左边，age 在右边)。\",\"从这张图可以看出来，name 是有序的，age 是无序的。当 name 相等的时候， age 才是有序的。\",\"这个时候我们使用 where name= ‘张三‘ and age = ‘20 ‘去查询数据的时候， B+Tree 会优先比较 name 来确定下一步应该搜索的方向，往左还是往右。如果 name 相同的时候再比较 age。但是如果查询条件没有 name，就不知道下一步应该查哪个 节点，因为建立搜索树的时候 name 是第一个比较因子，所以就没用上索引。\"]},\"510\":{\"h\":\"42.什么是索引下推优化？\",\"t\":[\"索引条件下推优化（Index Condition Pushdown (ICP) ）是 MySQL5.6 添加的，用于优化数据查询。\",\"不使用索引条件下推优化时存储引擎通过索引检索到数据，然后返回给 MySQL Server，MySQL Server 进行过滤条件的判断。\",\"当使用索引条件下推优化时，如果存在某些被索引的列的判断条件时，MySQL Server 将这一部分判断条件下推给存储引擎，然后由存储引擎通过判断索引是否符合 MySQL Server 传递的条件，只有当索引符合条件时才会将数据检索出来返回给 MySQL 服务器。\",\"例如一张表，建了一个联合索引（name, age），查询语句：select * from t_user where name like '张%' and age=10;，由于name使用了范围查询，根据最左匹配原则：\",\"不使用 ICP，引擎层查找到name like '张%'的数据，再由 Server 层去过滤age=10这个条件，这样一来，就回表了两次，浪费了联合索引的另外一个字段age。\",\"但是，使用了索引下推优化，把 where 的条件放到了引擎层执行，直接根据name like '张%' and age=10的条件进行过滤，减少了回表的次数。\",\"索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少 MySQL 服务器从存储引擎接收数据的次数。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"511\":{\"h\":\"锁\"},\"512\":{\"h\":\"43.MySQL 中有哪几种锁，列举一下？\",\"t\":[\"如果按锁粒度划分，有以下 3 种：\",\"表锁：开销小，加锁快；锁定力度大，发生锁冲突概率高，并发度最低;不会出现死锁。\",\"行锁：开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。\",\"页锁：开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般\",\"如果按照兼容性，有两种，\",\"共享锁（S Lock）,也叫读锁（read lock），相互不阻塞。\",\"排他锁（X Lock），也叫写锁（write lock），排它锁是阻塞的，在一定时间内，只有一个请求能执行写入，并阻止其它锁读取正在写入的数据。\"]},\"513\":{\"h\":\"44.说说 InnoDB 里的行锁实现?\",\"t\":[\"我们拿这么一个用户表来表示行级锁，其中插入了 4 行数据，主键值分别是 1,6,8,12，现在简化它的聚簇索引结构，只保留数据记录。\",\"InnoDB 的行锁的主要实现如下：\",\"Record Lock 记录锁\",\"记录锁就是直接锁定某行记录。当我们使用唯一性的索引(包括唯一索引和聚簇索引)进行等值查询且精准匹配到一条记录时，此时就会直接将这条记录锁定。例如select * from t where id =6 for update;就会将id=6的记录锁定。\",\"Gap Lock 间隙锁\",\"间隙锁(Gap Locks) 的间隙指的是两个记录之间逻辑上尚未填入数据的部分,是一个左开右开空间。\",\"间隙锁就是锁定某些间隙区间的。当我们使用用等值查询或者范围查询，并且没有命中任何一个record，此时就会将对应的间隙区间锁定。例如select * from t where id =3 for update;或者select * from t where id > 1 and id < 6 for update;就会将(1,6)区间锁定。\",\"Next-key Lock 临键锁\",\"临键指的是间隙加上它右边的记录组成的左开右闭区间。比如上述的(1,6]、(6,8]等。\",\"临键锁就是记录锁(Record Locks)和间隙锁(Gap Locks)的结合，即除了锁住记录本身，还要再锁住索引之间的间隙。当我们使用范围查询，并且命中了部分record记录，此时锁住的就是临键区间。注意，临键锁锁住的区间会包含最后一个 record 的右边的临键区间。例如select * from t where id > 5 and id <= 7 for update;会锁住(4,7]、(7,+∞)。mysql 默认行锁类型就是临键锁(Next-Key Locks)。当使用唯一性索引，等值查询匹配到一条记录的时候，临键锁(Next-Key Locks)会退化成记录锁；没有匹配到任何记录的时候，退化成间隙锁。\",\"间隙锁(Gap Locks)和临键锁(Next-Key Locks)都是用来解决幻读问题的，在已提交读（READ COMMITTED）隔离级别下，间隙锁(Gap Locks)和临键锁(Next-Key Locks)都会失效！\",\"上面是行锁的三种实现算法，除此之外，在行上还存在插入意向锁。\",\"Insert Intention Lock 插入意向锁\",\"一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了意向锁 ，如果有的话，插入操作需要等待，直到拥有 gap 锁 的那个事务提交。但是事务在等待的时候也需要在内存中生成一个 锁结构 ，表明有事务想在某个 间隙 中插入新记录，但是现在在等待。这种类型的锁命名为 Insert Intention Locks ，也就是插入意向锁 。\",\"假如我们有个 T1 事务，给(1,6)区间加上了意向锁，现在有个 T2 事务，要插入一个数据，id 为 4，它会获取一个（1,6）区间的插入意向锁，又有有个 T3 事务，想要插入一个数据，id 为 3，它也会获取一个（1,6）区间的插入意向锁，但是，这两个插入意向锁锁不会互斥。\"]},\"514\":{\"h\":\"45.意向锁是什么知道吗？\",\"t\":[\"意向锁是一个表级锁，不要和插入意向锁搞混。\",\"意向锁的出现是为了支持 InnoDB 的多粒度锁，它解决的是表锁和行锁共存的问题。\",\"当我们需要给一个表加表锁的时候，我们需要根据去判断表中有没有数据行被锁定，以确定是否能加成功。\",\"假如没有意向锁，那么我们就得遍历表中所有数据行来判断有没有行锁；\",\"有了意向锁这个表级锁之后，则我们直接判断一次就知道表中是否有数据行被锁定了。\",\"有了意向锁之后，要执行的事务 A 在申请行锁（写锁）之前，数据库会自动先给事务 A 申请表的意向排他锁。当事务 B 去申请表的互斥锁时就会失败，因为表上有意向排他锁之后事务 B 申请表的互斥锁时会被阻塞。\"]},\"515\":{\"h\":\"46.MySQL 的乐观锁和悲观锁了解吗？\",\"t\":[\"悲观锁（Pessimistic Concurrency Control）：\",\"悲观锁认为被它保护的数据是极其不安全的，每时每刻都有可能被改动，一个事务拿到悲观锁后，其他任何事务都不能对该数据进行修改，只能等待锁被释放才可以执行。\",\"数据库中的行锁，表锁，读锁，写锁均为悲观锁。\",\"乐观锁（Optimistic Concurrency Control）\",\"乐观锁认为数据的变动不会太频繁。\",\"乐观锁通常是通过在表中增加一个版本(version)或时间戳(timestamp)来实现，其中，版本最为常用。\",\"事务在从数据库中取数据时，会将该数据的版本也取出来(v1)，当事务对数据变动完毕想要将其更新到表中时，会将之前取出的版本 v1 与数据中最新的版本 v2 相对比，如果 v1=v2，那么说明在数据变动期间，没有其他事务对数据进行修改，此时，就允许事务对表中的数据进行修改，并且修改时 version 会加 1，以此来表明数据已被变动。\",\"如果，v1 不等于 v2，那么说明数据变动期间，数据被其他事务改动了，此时不允许数据更新到表中，一般的处理办法是通知用户让其重新操作。不同于悲观锁，乐观锁通常是由开发者实现的。\"]},\"516\":{\"h\":\"47.MySQL 遇到过死锁问题吗，你是如何解决的？\",\"t\":[\"排查死锁的一般步骤是这样的：\",\"（1）查看死锁日志 show engine innodb status;\",\"（2）找出死锁 sql\",\"（3）分析 sql 加锁情况\",\"（4）模拟死锁案发\",\"（5）分析死锁日志\",\"（6）分析死锁结果\",\"当然，这只是一个简单的流程说明，实际上生产中的死锁千奇百怪，排查和解决起来没那么简单。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"517\":{\"h\":\"事务\"},\"518\":{\"h\":\"48.MySQL 事务的四大特性说一下？\",\"t\":[\"原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。\",\"一致性：指在事务开始之前和事务结束以后，数据不会被破坏，假如 A 账户给 B 账户转 10 块钱，不管成功与否，A 和 B 的总金额是不变的。\",\"隔离性：多个事务并发访问时，事务之间是相互隔离的，即一个事务不影响其它事务运行效果。简言之，就是事务之间是进水不犯河水的。\",\"持久性：表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。\"]},\"519\":{\"h\":\"49.那 ACID 靠什么保证的呢？\",\"t\":[\"MySQL 通过事务管理和持久性存储机制来确保 ACID（原子性、一致性、隔离性和持久性）。\",\"01、原子性（Atomicity），如果事务的所有操作都成功执行，则事务被提交；如果事务中的任何操作失败，所有事务中的操作都会被回滚，使数据库返回到事务开始前的状态。\",\"undo log 是 InnoDB 存储引擎来确保事务原子性的关键机制，undo log 记录了事务发生之前的数据，如果事务失败，InnoDB 会根据 undo log 回滚数据。\",\"当事务开始修改数据时，InnoDB 首先会在undo log中记录旧值（即修改前的值）。\",\"如果事务顺利进行并最终提交，undo log会在某个时间点被清除。\",\"如果事务中的某个操作失败或者事务被明确地回滚，InnoDB 会使用undo log中的信息来撤销所有更改，确保数据的原子性。\",\"简而言之，undo log机制为 InnoDB 提供了一种在事务失败或被中断时恢复数据的手段，从而保证了事务的原子性。\",\"02、一致性（Consistency），保证在事务开始之前和事务成功完成之后，数据库处于一个一致的状态。中间的任何阶段，即使事务失败，也不应该使数据库处于不一致的状态。\",\"一致性是 ACID 的目的，也就是说，只要保证原子性、隔离性、持久性，自然也就保证了数据的一致性。\",\"03、隔离性 (Isolation)，MySQL 使用多种隔离级别来控制事务如何与其他并发事务隔离。InnoDB 存储引擎使用 MVCC (多版本并发控制) 机制来处理并发事务，确保每个事务都有自己的数据版本。\",\"换句话说，事务查看数据时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。\",\"在 MVCC 中，每次更新记录时，都会生成记录的一个新版本，而不是覆盖老版本。每个版本都会有两个额外的属性：一个表示版本的创建时间（或事务ID），另一个表示版本的过期时间（或下一个版本的事务ID）。\",\"当事务尝试读取记录时，它会看到该事务开始时有效的那个版本。\",\"MVCC 通过提供数据版本来支持事务的隔离性。不同的事务会看到不同版本的数据行，这取决于事务的开始时间和它的隔离级别。\",\"对于如 \\\"读未提交\\\"（READ UNCOMMITTED）这样的较低隔离级别，事务可能会看到其他未提交事务所做的更改。但在更高的隔离级别，如 \\\"可重复读\\\"（REPEATABLE READ）或 \\\"串行化\\\"（SERIALIZABLE），事务不会看到其他事务所做的更改，直到它们被提交。\",\"04、持久性 (Durability)，由 MySQL 的存储引擎（如InnoDB）通过写入磁盘来确保。即使在系统崩溃之后，已提交事务的更改也不会丢失。\",\"InnoDB 使用“redo log”来记录数据的更改，在系统崩溃后，redo log 可用于恢复数据。\",\"redo log 是一种物理日志，记录了对数据页的物理更改。当事务进行写操作时，InnoDB 首先会写入 redo log，并不会立即修改数据文件。这种写入方式被称为“write-ahead logging”（先写日志）。\",\"当 redo log 填满或在某些其他情况下，InnoDB 会异步将这些更改刷新到数据文件中。\",\"系统崩溃时，由于数据可能还没有被真正写入数据文件，但已经在 redo log 中，因此系统可以在启动时使用这些日志来重新执行或“重做”这些更改，确保数据的持久性。\",\"即使数据库在事务提交后立即崩溃，由于事务的更改已经记录在 redo log 中，这些更改在数据库恢复时仍然是安全的。\"]},\"520\":{\"h\":\"50.事务的隔离级别有哪些？MySQL 的默认隔离级别是什么？\",\"t\":[\"事务的四个隔离级别\",\"读未提交（Read Uncommitted）\",\"读已提交（Read Committed）\",\"可重复读（Repeatable Read）\",\"串行化（Serializable）\",\"MySQL 默认的事务隔离级别是可重复读 (Repeatable Read)。\"]},\"521\":{\"h\":\"51.什么是幻读，脏读，不可重复读呢？\",\"t\":[\"事务 A、B 交替执行，事务 A 读取到事务 B 未提交的数据，这就是脏读。\",\"在一个事务范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是不可重复读。\",\"事务 A 查询一个范围的结果集，另一个并发事务 B 往这个范围中插入 / 删除了数据，并静悄悄地提交，然后事务 A 再次查询相同的范围，两次读取得到的结果集不一样了，这就是幻读。\",\"不同的隔离级别，在并发事务下可能会发生的问题：\",\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"Read Uncommited 读取未提交\",\"是\",\"是\",\"是\",\"Read Commited 读取已提交\",\"否\",\"是\",\"是\",\"Repeatable Read 可重复读\",\"否\",\"否\",\"是\",\"Serialzable 可串行化\",\"否\",\"否\",\"否\"]},\"522\":{\"h\":\"52.事务的各个隔离级别都是如何实现的？\",\"t\":[\"读未提交\",\"读未提交，就不用多说了，采取的是读不加锁原理。\",\"事务读不加锁，不阻塞其他事务的读和写\",\"事务写阻塞其他事务写，但不阻塞其他事务读；\",\"读取已提交&可重复读\",\"读取已提交和可重复读级别利用了ReadView和MVCC，也就是每个事务只能读取它能看到的版本（ReadView）。\",\"READ COMMITTED：每次读取数据前都生成一个 ReadView\",\"REPEATABLE READ ：在第一次读取数据时生成一个 ReadView\",\"串行化\",\"串行化的实现采用的是读写都加锁的原理。\",\"串行化的情况下，对于同一行事务，写会加写锁，读会加读锁。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\"]},\"523\":{\"h\":\"53.MVCC 了解吗？怎么实现的？\",\"t\":[\"MVCC(Multi Version Concurrency Control)，中文名是多版本并发控制，简单来说就是通过维护数据历史版本，从而解决并发访问情况下的读一致性问题。关于它的实现，要抓住几个关键点，隐式字段、undo 日志、版本链、快照读&当前读、Read View。\",\"版本链\",\"对于 InnoDB 存储引擎，每一行记录都有两个隐藏列DB_TRX_ID、DB_ROLL_PTR\",\"DB_TRX_ID，事务 ID，每次修改时，都会把该事务 ID 复制给DB_TRX_ID；\",\"DB_ROLL_PTR，回滚指针，指向回滚段的 undo 日志。\",\"假如有一张user表，表中只有一行记录，当时插入的事务 id 为 80。此时，该条记录的示例图如下：\",\"接下来有两个DB_TRX_ID分别为100、200的事务对这条记录进行update操作，整个过程如下：\",\"由于每次变动都会先把undo日志记录下来，并用DB_ROLL_PTR指向undo日志地址。因此可以认为，对该条记录的修改日志串联起来就形成了一个版本链，版本链的头节点就是当前记录最新的值。如下：\",\"ReadView\",\"对于Read Committed和Repeatable Read隔离级别来说，都需要读取已经提交的事务所修改的记录，也就是说如果版本链中某个版本的修改没有提交，那么该版本的记录时不能被读取的。所以需要确定在Read Committed和Repeatable Read隔离级别下，版本链中哪个版本是能被当前事务读取的。于是就引入了ReadView这个概念来解决这个问题。\",\"Read View 就是事务执行快照读时，产生的读视图，相当于某时刻表记录的一个快照，通过这个快照，我们可以获取：\",\"m_ids ：表示在生成 ReadView 时当前系统中活跃的读写事务的事务 id 列表。\",\"min_trx_id ：表示在生成 ReadView 时当前系统中活跃的读写事务中最小的 事务 id ，也就是 m_ids 中的最小值。\",\"max_trx_id ：表示生成 ReadView 时系统中应该分配给下一个事务的 id 值。\",\"creator_trx_id ：表示生成该 ReadView 的事务的 事务 id\",\"有了这个 ReadView ，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见：\",\"如果被访问版本的 DB_TRX_ID 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。\",\"如果被访问版本的 DB_TRX_ID 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 前已经提交，所以该版本可以被当前事务访问。\",\"如果被访问版本的 DB_TRX_ID 属性值大于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 后才开启，所以该版本不可以被当前事务访问。\",\"如果被访问版本的 DB_TRX_ID 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。\",\"如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。\",\"在 MySQL 中， READ COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成 ReadView 的时机不同。\",\"READ COMMITTED 是每次读取数据前都生成一个 ReadView，这样就能保证自己每次都能读到其它事务提交的数据；REPEATABLE READ 是在第一次读取数据时生成一个 ReadView，这样就能保证后续读取的结果完全一致。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"524\":{\"h\":\"高可用/性能\"},\"525\":{\"h\":\"54.数据库读写分离了解吗？\",\"t\":[\"读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是基本架构图：\",\"读写分离的基本实现是:\",\"数据库服务器搭建主从集群，一主一从、一主多从都可以。\",\"数据库主机负责读写操作，从机只负责读操作。\",\"数据库主机通过复制将数据同步到从机，每台数据库服务器都存储了所有的业务数据。\",\"业务服务器将写操作发给数据库主机，将读操作发给数据库从机。\"]},\"526\":{\"h\":\"55.那读写分离的分配怎么实现呢？\",\"t\":[\"将读写操作区分开来，然后访问不同的数据库服务器，一般有两种方式：程序代码封装和中间件封装。\",\"程序代码封装\",\"程序代码封装指在代码中抽象一个数据访问层（所以有的文章也称这种方式为 \\\"中间层封装\\\" ） ，实现读写操作分离和数据库服务器连接的管理。例如，基于 Hibernate 进行简单封装，就可以实现读写分离：\",\"目前开源的实现方案中，淘宝的 TDDL (Taobao Distributed Data Layer, 外号：头都大了）是比较有名的。\",\"中间件封装\",\"中间件封装指的是独立一套系统出来，实现读写操作分离和数据库服务器连接的管理。中间件对业务服务器提供 SQL 兼容的协议，业务服务器无须自己进行读写分离。\",\"对于业务服务器来说，访问中间件和访问数据库没有区别，事实上在业务服务器看来，中间件就是一个数据库服务器。\",\"其基本架构是：\"]},\"527\":{\"h\":\"56.主从复制原理了解吗？\",\"t\":[\"master 数据写入，更新 binlog\",\"master 创建一个 dump 线程向 slave 推送 binlog\",\"slave 连接到 master 的时候，会创建一个 IO 线程接收 binlog，并记录到 relay log 中继日志中\",\"slave 再开启一个 sql 线程读取 relay log 事件并在 slave 执行，完成同步\",\"slave 记录自己的 binglog\"]},\"528\":{\"h\":\"57.主从同步延迟怎么处理？\",\"t\":[\"主从同步延迟的原因\",\"一个服务器开放Ｎ个链接给客户端来连接的，这样有会有大并发的更新操作, 但是从服务器的里面读取 binlog 的线程仅有一个，当某个 SQL 在从服务器上执行的时间稍长 或者由于某个 SQL 要进行锁表就会导致，主服务器的 SQL 大量积压，未被同步到从服务器里。这就导致了主从不一致， 也就是主从延迟。\",\"主从同步延迟的解决办法\",\"解决主从复制延迟有几种常见的方法:\",\"写操作后的读操作指定发给数据库主服务器\",\"例如，注册账号完成后，登录时读取账号的读操作也发给数据库主服务器。这种方式和业务强绑定，对业务的侵入和影响较大，如果哪个新来的程序员不知道这样写代码，就会导致一个 bug。\",\"读从机失败后再读一次主机\",\"这就是通常所说的 \\\"二次读取\\\" ，二次读取和业务无绑定，只需要对底层数据库访问的 API 进行封装即可，实现代价较小，不足之处在于如果有很多二次读取，将大大增加主机的读操作压力。例如，黑客暴力破解账号，会导致大量的二次读取操作，主机可能顶不住读操作的压力从而崩溃。\",\"关键业务读写操作全部指向主机，非关键业务采用读写分离\",\"例如，对于一个用户管理系统来说，注册 + 登录的业务读写操作全部访问主机，用户的介绍、爰好、等级等业务，可以采用读写分离，因为即使用户改了自己的自我介绍，在查询时却看到了自我介绍还是旧的，业务影响与不能登录相比就小很多，还可以忍受。\"]},\"529\":{\"h\":\"58.你们一般是怎么分库的呢？\",\"t\":[\"垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。\",\"水平分库：以字段为依据，按照一定策略（hash、range 等），将一个库中的数据拆分到多个库中。\"]},\"530\":{\"h\":\"59.那你们是怎么分表的？\",\"t\":[\"水平分表：以字段为依据，按照一定策略（hash、range 等），将一个表中的数据拆分到多个表中。\",\"垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。\"]},\"531\":{\"h\":\"60.水平分表有哪几种路由方式？\",\"t\":[\"什么是路由呢？就是数据应该分到哪一张表。\",\"水平分表主要有三种路由方式：\",\"范围路由：选取有序的数据列 （例如，整形、时间戳等） 作为路由的条件，不同分段分散到不同的数据库表中。\",\"我们可以观察一些支付系统，发现只能查一年范围内的支付记录，这个可能就是支付公司按照时间进行了分表。\",\"范围路由设计的复杂点主要体现在分段大小的选取上，分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会导致单表依然存在性能问题，一般建议分段大小在 100 万至 2000 万之间，具体需要根据业务选取合适的分段大小。\",\"范围路由的优点是可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万，只需要增加新的表就可以了，原有的数据不需要动。范围路由的一个比较隐含的缺点是分布不均匀，假如按照 1000 万来进行分表，有可能某个分段实际存储的数据量只有 1000 条，而另外一个分段实际存储的数据量有 900 万条。\",\"Hash 路由：选取某个列 （或者某几个列组合也可以） 的值进行 Hash 运算，然后根据 Hash 结果分散到不同的数据库表中。\",\"同样以订单 id 为例，假如我们一开始就规划了 4 个数据库表，路由算法可以简单地用 id % 4 的值来表示数据所属的数据库表编号，id 为 12 的订单放到编号为 50 的子表中，id 为 13 的订单放到编号为 61 的字表中。\",\"Hash 路由设计的复杂点主要体现在初始表数量的选取上，表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。而用了 Hash 路由后，增加子表数量是非常麻烦的，所有数据都要重分布。Hash 路由的优缺点和范围路由基本相反，Hash 路由的优点是表分布比较均匀，缺点是扩充新的表很麻烦，所有数据都要重分布。\",\"配置路由：配置路由就是路由表，用一张独立的表来记录路由信息。同样以订单 id 为例，我们新增一张 order_router 表，这个表包含 orderjd 和 tablejd 两列 , 根据 orderjd 就可以查询对应的 table_id。\",\"配置路由设计简单，使用起来非常灵活，尤其是在扩充表的时候，只需要迁移指定的数据，然后修改路由表就可以了。\",\"配置路由的缺点就是必须多查询一次，会影响整体性能；而且路由表本身如果太大（例如，几亿条数据） ，性能同样可能成为瓶颈，如果我们再次将路由表分库分表，则又面临一个死循环式的路由算法选择问题。\"]},\"532\":{\"h\":\"61.不停机扩容怎么实现？\",\"t\":[\"实际上，不停机扩容，实操起来是个非常麻烦而且很有风险的操作，当然，面试回答起来就简单很多。\",\"第一阶段：在线双写，查询走老库\",\"建立好新的库表结构，数据写入久库的同时，也写入拆分的新库\",\"数据迁移，使用数据迁移程序，将旧库中的历史数据迁移到新库\",\"使用定时任务，新旧库的数据对比，把差异补齐\",\"第二阶段：在线双写，查询走新库\",\"完成了历史数据的同步和校验\",\"把对数据的读切换到新库\",\"第三阶段：旧库下线\",\"旧库不再写入新的数据\",\"经过一段时间，确定旧库没有请求之后，就可以下线老库\"]},\"533\":{\"h\":\"62.常用的分库分表中间件有哪些？\",\"t\":[\"sharding-jdbc\",\"Mycat\"]},\"534\":{\"h\":\"63.那你觉得分库分表会带来什么问题呢？\",\"t\":[\"从分库的角度来讲：\",\"事务的问题\",\"使用关系型数据库，有很大一点在于它保证事务完整性。\",\"而分库之后单机事务就用不上了，必须使用分布式事务来解决。\",\"跨库 JOIN 问题\",\"在一个库中的时候我们还可以利用 JOIN 来连表查询，而跨库了之后就无法使用 JOIN 了。\",\"此时的解决方案就是在业务代码中进行关联，也就是先把一个表的数据查出来，然后通过得到的结果再去查另一张表，然后利用代码来关联得到最终的结果。\",\"这种方式实现起来稍微比较复杂，不过也是可以接受的。\",\"还有可以适当的冗余一些字段。比如以前的表就存储一个关联 ID，但是业务时常要求返回对应的 Name 或者其他字段。这时候就可以把这些字段冗余到当前表中，来去除需要关联的操作。\",\"还有一种方式就是数据异构，通过 binlog 同步等方式，把需要跨库 join 的数据异构到 ES 等存储结构中，通过 ES 进行查询。\",\"从分表的角度来看：\",\"跨节点的 count,order by,group by 以及聚合函数问题\",\"只能由业务代码来实现或者用中间件将各表中的数据汇总、排序、分页然后返回。\",\"数据迁移，容量规划，扩容等问题\",\"数据的迁移，容量如何规划，未来是否可能再次需要扩容，等等，都是需要考虑的问题。\",\"ID 问题\",\"数据库表被切分后，不能再依赖数据库自身的主键生成机制，所以需要一些手段来保证全局主键唯一。\",\"还是自增，只不过自增步长设置一下。比如现在有三张表，步长设置为 3，三张表 ID 初始值分别是 1、2、3。这样第一张表的 ID 增长是 1、4、7。第二张表是 2、5、8。第三张表是 3、6、9，这样就不会重复了。\",\"UUID，这种最简单，但是不连续的主键插入会导致严重的页分裂，性能比较差。\",\"分布式 ID，比较出名的就是 Twitter 开源的 sonwflake 雪花算法\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"535\":{\"h\":\"运维\"},\"536\":{\"h\":\"64.百万级别以上的数据如何删除？\",\"t\":[\"关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的 IO,会降低增/改/删的执行效率。\",\"所以，在我们删除数据库百万级别数据的时候，查询 MySQL 官方手册得知删除数据的速度和创建的索引数量是成正比的。\",\"所以我们想要删除百万数据的时候可以先删除索引\",\"然后删除其中无用数据\",\"删除完成后重新创建索引创建索引也非常快\"]},\"537\":{\"h\":\"65.百万千万级大表如何添加字段？\",\"t\":[\"当线上的数据库数据量到达几百万、上千万的时候，加一个字段就没那么简单，因为可能会长时间锁表。\",\"大表添加字段，通常有这些做法：\",\"通过中间表转换过去\",\"创建一个临时的新表，把旧表的结构完全复制过去，添加字段，再把旧表数据复制过去，删除旧表，新表命名为旧表的名称，这种方式可能回丢掉一些数据。\",\"用 pt-online-schema-change\",\"pt-online-schema-change是 percona 公司开发的一个工具，它可以在线修改表结构，它的原理也是通过中间表。\",\"先在从库添加 再进行主从切换\",\"如果一张表数据量大且是热表（读写特别频繁），则可以考虑先在从库添加，再进行主从切换，切换后再将其他几个节点上添加字段。\"]},\"538\":{\"h\":\"66.MySQL 数据库 cpu 飙升的话，要怎么处理呢？\",\"t\":[\"排查过程：\",\"（1）使用 top 命令观察，确定是 mysqld 导致还是其他原因。\",\"（2）如果是 mysqld 导致的，show processlist，查看 session 情况，确定是不是有消耗资源的 sql 在运行。\",\"（3）找出消耗高的 sql，看看执行计划是否准确， 索引是否缺失，数据量是否太大。\",\"处理：\",\"（1）kill 掉这些线程 (同时观察 cpu 使用率是否下降)，\",\"（2）进行相应的调整 (比如说加索引、改 sql、改内存参数)\",\"（3）重新跑这些 SQL。\",\"其他情况：\",\"也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调整，比如说限制连接数等\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"图文详解 66 道 MySQL 面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"539\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1.8 万字 69 张手绘图，详解 66 道 MySQL 面试高频题（让天下没有难背的八股），面渣背会这些 MySQL 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/mysql.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.8 万字 69 张手绘图，详解 66 道 MySQL 面试高频题（让天下没有难背的八股），面渣背会这些 MySQL 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"540\":{\"h\":\"\",\"t\":[\"2.2 万字 80 张手绘图，详解 62 道计算机网络面试高频题（让天下没有难背的八股），面渣背会这些计算机网络八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"大家好，我是二哥呀，今天继续来给大家分享三弟的面渣逆袭！\",\"这次带来的是计算机网络六十二问，三万字，七十图详解，大概是全网最全的计算机网络面试题。\",\"建议大家收藏了慢慢看，秋招、春招、金九银十、金三银四冲！\"]},\"541\":{\"h\":\"基础\"},\"542\":{\"h\":\"1.说下计算机网络体系结构\",\"t\":[\"计算机网络体系结构，一般有三种：OSI 七层模型、TCP/IP 四层模型、五层结构。\",\"简单说，OSI 是一个理论上的网络通信模型，TCP/IP 是实际上的网络通信模型，五层结构就是为了介绍网络原理而折中的网络通信模型。\",\"OSI 七层模型\",\"OSI 七层模型是国际标准化组织（International Organization for Standardization）制定的一个用于计算机或通信系统间互联的标准体系。\",\"应用层：通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间通信和交互的规则，常见的协议有：HTTP FTP SMTP SNMP DNS.\",\"表示层：数据的表示、安全、压缩。确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。\",\"会话层：建立、管理、终止会话，是用户应用程序和网络之间的接口。\",\"运输层：提供源端与目的端之间提供可靠的透明数据传输，传输层协议为不同主机上运行的进程提供逻辑通信。\",\"网络层：将网络地址翻译成对应的物理地址，实现不同网络之间的路径选择, 协议有 ICMP IGMP IP 等.\",\"数据链路层：在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路。\",\"物理层：建立、维护、断开物理连接。\",\"TCP/IP 四层模型\",\"应用层：对应于 OSI 参考模型的（应用层、表示层、会话层）。\",\"传输层: 对应 OSI 的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。\",\"网际层：对应于 OSI 参考模型的网络层，主要解决主机到主机的通信问题。\",\"网络接口层：与 OSI 参考模型的数据链路层、物理层对应。\",\"五层体系结构\",\"应用层：对应于 OSI 参考模型的（应用层、表示层、会话层）。\",\"传输层：对应 OSI 参考模型的的传输层\",\"网络层：对应 OSI 参考模型的的网络层\",\"数据链路层：对应 OSI 参考模型的的数据链路层\",\"物理层：对应 OSI 参考模型的的物理层。\"]},\"543\":{\"h\":\"2.说一下每一层对应的网络协议有哪些？\",\"t\":[\"一张表格总结常见网络协议：\"]},\"544\":{\"h\":\"3.那么数据在各层之间是怎么传输的呢？\",\"t\":[\"对于发送方而言，从上层到下层层层包装，对于接收方而言，从下层到上层，层层解开包装。\",\"发送方的应用进程向接收方的应用进程传送数据\",\"AP 先将数据交给本主机的应用层，应用层加上本层的控制信息 H5 就变成了下一层的数据单元\",\"传输层收到这个数据单元后，加上本层的控制信息 H4，再交给网络层，成为网络层的数据单元\",\"到了数据链路层，控制信息被分成两部分，分别加到本层数据单元的首部（H2）和尾部（T2）\",\"最后的物理层，进行比特流的传输\",\"这个过程类似写信，写一封信，每到一层，就加一个信封，写一些地址的信息。到了目的地之后，又一层层解封，传向下一个目的地。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"545\":{\"h\":\"网络综合\"},\"546\":{\"h\":\"4.从浏览器地址栏输入 url 到显示主页的过程？\",\"t\":[\"这道题，大概的过程比较简单，但是有很多点可以细挖：DNS 解析、TCP 三次握手、HTTP 报文格式、TCP 四次挥手等等。\",\"DNS 解析：将域名解析成对应的 IP 地址。\",\"TCP 连接：与服务器通过三次握手，建立 TCP 连接\",\"向服务器发送 HTTP 请求\",\"服务器处理请求，返回 HTTp 响应\",\"浏览器解析并渲染页面\",\"断开连接：TCP 四次挥手，连接结束\",\"我们以输入 www.baidu.com 为例：\",\"各个过程都使用了哪些协议？\"]},\"547\":{\"h\":\"5.说说 DNS 的解析过程？\",\"t\":[\"DNS，英文全称是 domain name system，域名解析系统，它的作用也很明确，就是域名和 IP 相互映射。\",\"DNS 的解析过程如下图：\",\"假设你要查询 www.baidu.com 的 IP 地址:\",\"首先会查找浏览器的缓存,看看是否能找到www.baidu.com对应的 IP 地址，找到就直接返回；否则进行下一步。\",\"将请求发往给本地 DNS 服务器，如果查找到也直接返回，否则继续进行下一步；\",\"本地 DNS 服务器向根域名服务器发送请求，根域名服务器返回负责com的顶级域名服务器的 IP 地址的列表。\",\"本地 DNS 服务器再向其中一个负责com的顶级域名服务器发送一个请求，返回负责baidu.com的权限域名服务器的 IP 地址列表。\",\"本地 DNS 服务器再向其中一个权限域名服务器发送一个请求，返回www.baidu.com所对应的 IP 地址。\"]},\"548\":{\"h\":\"6.说说 WebSocket 与 Socket 的区别？\",\"t\":[\"Socket 其实就是等于 IP 地址 + 端口 + 协议。\",\"具体来说，Socket 是一套标准，它完成了对 TCP/IP 的高度封装，屏蔽网络细节，以方便开发者更好地进行网络编程。\",\"WebSocket 是一个持久化的协议，它是伴随 H5 而出的协议，用来解决 http 不支持持久化连接的问题。\",\"Socket 一个是网编编程的标准接口，而 WebSocket 则是应用层通信协议。\"]},\"549\":{\"h\":\"7.说一下你了解的端口及对应的服务？\",\"t\":[\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"550\":{\"h\":\"HTTP\"},\"551\":{\"h\":\"8.说说 HTTP 常用的状态码及其含义？\",\"t\":[\"HTTP 状态码首先应该知道个大概的分类：\",\"1XX：信息性状态码\",\"2XX：成功状态码\",\"3XX：重定向状态码\",\"4XX：客户端错误状态码\",\"5XX：服务端错误状态码\",\"几个常用的，面试之外，也应该记住：\",\"之前写过一篇：程序员五一被拉去相亲，结果彻底搞懂了 HTTP 常用状态码，还比较有意思，可以看看。\",\"说一下 301 和 302 的区别？\",\"301：永久性移动，请求的资源已被永久移动到新位置。服务器返回此响应时，会返回新的资源地址。\",\"302：临时性性移动，服务器从另外的地址响应资源，但是客户端还应该使用这个地址。\",\"用一个比喻，301 就是嫁人的新垣结衣，302 就是有男朋友的长泽雅美。\"]},\"552\":{\"h\":\"9.HTTP 有哪些请求方式？\",\"t\":[\"其中，POST、DELETE、PUT、GET 的含义分别对应我们最熟悉的增、删、改、查。\"]},\"553\":{\"h\":\"10.说⼀下 GET 和 POST 的区别？\",\"t\":[\"可以从以下几个方面来说明 GET 和 POST 的区别：\",\"从 HTTP 报文层面来看，GET 请求将信息放在 URL，POST 将请求信息放在请求体中。这一点使得 GET 请求携带的数据量有限，因为 URL 本身是有长度限制的，而 POST 请求的数据存放在报文体中，因此对大小没有限制。而且从形式上看，GET 请求把数据放 URL 上不太安全，而 POST 请求把数据放在请求体里想比较而言安全一些。\",\"从数据库层面来看，GET 符合幂等性和安全性，而 POST 请求不符合。这个其实和 GET/POST 请求的作用有关。按照 HTTP 的约定，GET 请求用于查看信息，不会改变服务器上的信息；而 POST 请求用来改变服务器上的信息。正因为 GET 请求只查看信息，不改变信息，对数据库的一次或多次操作获得的结果是一致的，认为它符合幂等性。安全性是指对数据库操作没有改变数据库中的数据。\",\"从其他层面来看，GET 请求能够被缓存，GET 请求能够保存在浏览器的浏览记录里，GET 请求的 URL 能够保存为浏览器书签。这些都是 POST 请求所不具备的。缓存是 GET 请求被广泛应用的根本，他能够被缓存也是因为它的幂等性和安全性，除了返回结果没有其他多余的动作，因此绝大部分的 GET 请求都被 CDN 缓存起来了，大大减少了 Web 服务器的负担。\"]},\"554\":{\"h\":\"11.GET 的长度限制是多少？\",\"t\":[\"HTTP 中的 GET 方法是通过 URL 传递数据的，但是 URL 本身其实并没有对数据的长度进行限制，真正限制 GET 长度的是浏览器。\",\"例如 IE 浏览器对 URL 的最大限制是 2000 多个字符，大概 2kb 左右，像 Chrome、Firefox 等浏览器支持的 URL 字符数更多，其中 FireFox 中 URL 的最大长度限制是 65536 个字符，Chrome 则是 8182 个字符。\",\"这个长度限制也不是针对数据部分，而是针对整个 URL。\"]},\"555\":{\"h\":\"12.HTTP 请求的过程与原理？\",\"t\":[\"HTTP 协议定义了浏览器怎么向服务器请求文档，以及服务器怎么把文档传给浏览器。\",\"每个服务器都有一个进程，它不断监听 TCP 的端口 80，以便发现是否有浏览器向它发出连接建立请求\",\"监听到连接请求，就会建立 TCP 连接\",\"浏览器向服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应\",\"最后，释放 TCP 连接\",\"在浏览器和服务器之间的请求和响应的交互，必须按照规定的格式和遵循一定的规则，这些格式和规则就是超文本传输协议 HTTP。\",\"PS:这道题和上面浏览器输入网址发生了什么那道题大差不差。\"]},\"556\":{\"h\":\"13.说一下 HTTP 的报文结构？\",\"t\":[\"HTTP 报文有两种，HTTP 请求报文和 HTTP 响应报文：\",\"HTTP 请求报文\",\"HTTP 请求报文的格式如下：\",\"GET / HTTP/1.1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) Accept: */* \",\"HTTP 请求报文的第一行叫做请求行，后面的行叫做首部行，首部行后还可以跟一个实体主体。请求首部之后有一个空行，这个空行不能省略，它用来划分首部与实体。\",\"请求行包含三个字段：\",\"方法字段：包括 POST、GET 等请方法。\",\"URL 字段\",\"HTTP 版本字段。\",\"HTTP 响应报文\",\"HTTP 响应报文的格式如下：\",\"HTTP/1.0 200 OK Content-Type: text/plain Content-Length: 137582 Expires: Thu, 05 Dec 1997 16:00:00 GMT Last-Modified: Wed, 5 August 1996 15:55:28 GMT Server: Apache 0.84 <html> <body>Hello World</body> </html> \",\"HTTP 响应报文的第一行叫做状态行，后面的行是首部行，最后是实体主体。\",\"状态行包含了三个字段：协议版本字段、状态码和相应的状态信息。\",\"实体部分是报文的主要部分，它包含了所请求的对象。\",\"首部行首部可以分为四种首部，请求首部、响应首部、通用首部和实体首部。通用首部和实体首部在请求报文和响应报文中都可以设置，区别在于请求首部和响应首部。\",\"常见的请求首部有 Accept 可接收媒体资源的类型、Accept-Charset 可接收的字符集、Host 请求的主机名。\",\"常见的响应首部有 ETag 资源的匹配信息，Location 客户端重定向的 URI。\",\"常见的通用首部有 Cache-Control 控制缓存策略、Connection 管理持久连接。\",\"常见的实体首部有 Content-Length 实体主体的大小、Expires 实体主体的过期时间、Last-Modified 资源的最后修改时间。\"]},\"557\":{\"h\":\"14.URI 和 URL 有什么区别?\",\"t\":[\"URI，统一资源标识符(Uniform Resource Identifier， URI)，标识的是 Web 上每一种可用的资源，如 HTML 文档、图像、视频片段、程序等都是由一个 URI 进行标识的。\",\"URL，统一资源定位符（Uniform Resource Location)，它是 URI 的一种子集，主要作用是提供资源的路径。\",\"它们的主要区别在于，URL 除了提供了资源的标识，还提供了资源访问的方式。这么比喻，URI 像是身份证，可以唯一标识一个人，而 URL 更像一个住址，可以通过 URL 找到这个人——人类住址协议://地球/中国/北京市/海淀区/xx 职业技术学院/14 号宿舍楼/525 号寝/张三.男。\"]},\"558\":{\"h\":\"15.说下 HTTP/1.0，1.1，2.0 的区别？\",\"t\":[\"关键需要记住 HTTP/1.0 默认是短连接，可以强制开启，HTTP/1.1 默认长连接，HTTP/2.0 采用多路复用。\",\"HTTP/1.0\",\"默认使用短连接，每次请求都需要建立一个 TCP 连接。它可以设置Connection: keep-alive 这个字段，强制开启长连接。\",\"HTTP/1.1\",\"引入了持久连接，即 TCP 连接默认不关闭，可以被多个请求复用。\",\"分块传输编码，即服务端每产生一块数据，就发送一块，用” 流模式” 取代” 缓存模式”。\",\"管道机制，即在同一个 TCP 连接里面，客户端可以同时发送多个请求。\",\"HTTP/2.0\",\"二进制协议，1.1 版本的头信息是文本（ASCII 编码），数据体可以是文本或者二进制；2.0 中，头信息和数据体都是二进制。\",\"完全多路复用，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应。\",\"报头压缩，HTTP 协议不带有状态，每次请求都必须附上所有信息。Http/2.0 引入了头信息压缩机制，使用 gzip 或 compress 压缩后再发送。\",\"服务端推送，允许服务器未经请求，主动向客户端发送资源。\"]},\"559\":{\"h\":\"16.HTTP/3 了解吗？\",\"t\":[\"HTTP/3 主要有两大变化，传输层基于 UDP、使用QUIC 保证 UDP 可靠性。\",\"HTTP/2 存在的一些问题，比如重传等等，都是由于 TCP 本身的特性导致的，所以 HTTP/3 在 QUIC 的基础上进行发展而来，QUIC（Quick UDP Connections）直译为快速 UDP 网络连接，底层使用 UDP 进行数据传输。\",\"HTTP/3 主要有这些特点：\",\"使用 UDP 作为传输层进行通信\",\"在 UDP 的基础上 QUIC 协议保证了 HTTP/3 的安全性，在传输的过程中就完成了 TLS 加密握手\",\"HTTPS 要建⽴⼀个连接，要花费 6 次交互，先是建⽴三次握⼿，然后是 TLS/1.3 的三次握⼿。QUIC 直接把以往的 TCP 和 TLS/1.3 的 6 次交互合并成了 3 次，减少了交互次数。\",\"QUIC 有⾃⼰的⼀套机制可以保证传输的可靠性的。当某个流发⽣丢包时，只会阻塞这个流，其他流不会受到影响。\",\"我们拿一张图看一下 HTTP 协议的变迁：\"]},\"560\":{\"h\":\"17.HTTP 如何实现长连接？在什么时候会超时？\",\"t\":[\"什么是 HTTP 的长连接？\",\"HTTP 分为长连接和短连接，本质上说的是 TCP 的长短连接。TCP 连接是一个双向的通道，它是可以保持一段时间不关闭的，因此 TCP 连接才具有真正的长连接和短连接这一说法。\",\"TCP 长连接可以复用一个 TCP 连接，来发起多次的 HTTP 请求，这样就可以减少资源消耗，比如一次请求 HTML，如果是短连接的话，可能还需要请求后续的 JS/CSS。\",\"如何设置长连接？\",\"通过在头部（请求和响应头）设置 Connection 字段指定为keep-alive，HTTP/1.0 协议支持，但是是默认关闭的，从 HTTP/1.1 以后，连接默认都是长连接。\",\"在什么时候会超时呢？\",\"HTTP 一般会有 httpd 守护进程，里面可以设置 keep-alive timeout，当 tcp 连接闲置超过这个时间就会关闭，也可以在 HTTP 的 header 里面设置超时时间\",\"TCP 的 keep-alive 包含三个参数，支持在系统内核的 net.ipv4 里面设置；当 TCP 连接之后，闲置了 tcp_keepalive_time，则会发生侦测包，如果没有收到对方的 ACK，那么会每隔 tcp_keepalive_intvl 再发一次，直到发送了 tcp_keepalive_probes，就会丢弃该连接。\",\"1. tcp_keepalive_intvl = 15 2. tcp_keepalive_probes = 5 3. tcp_keepalive_time = 1800 \"]},\"561\":{\"h\":\"18.说说 HTTP 与 HTTPS 有哪些区别？\",\"t\":[\"HTTP 是超⽂本传输协议，信息是明⽂传输，存在安全⻛险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP ⽹络层之间加⼊了 SSL/TLS 安全协议，使得报⽂能够加密传输。\",\"HTTP 连接建⽴相对简单， TCP 三次握⼿之后便可进⾏ HTTP 的报⽂传输。⽽ HTTPS 在 TCP 三次握⼿之后，还需进⾏ SSL/TLS 的握⼿过程，才可进⼊加密报⽂传输。\",\"HTTP 的端⼝号是 80，HTTPS 的端⼝号是 443。\",\"HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。\"]},\"562\":{\"h\":\"19.为什么要用 HTTPS？解决了哪些问题？\",\"t\":[\"因为 HTTP 是明⽂传输，存在安全上的风险：\",\"窃听⻛险，⽐如通信链路上可以获取通信内容，用户账号被盗。\",\"篡改⻛险，⽐如强制植⼊垃圾⼴告，视觉污染。\",\"冒充⻛险，⽐如冒充淘宝⽹站，用户金钱损失。\",\"所以引入了 HTTPS，HTTPS 在 HTTP 与 TCP 层之间加⼊了 SSL/TLS 协议，可以很好的解决了这些风险：\",\"信息加密：交互信息⽆法被窃取。\",\"校验机制：⽆法篡改通信内容，篡改了就不能正常显示。\",\"身份证书：能证明淘宝是真淘宝。\",\"所以 SSL/TLS 协议是能保证通信是安全的。\"]},\"563\":{\"h\":\"20.HTTPS 工作流程是怎样的？\",\"t\":[\"这道题有几个要点：公私钥、数字证书、加密、对称加密、非对称加密。\",\"HTTPS 主要工作流程：\",\"客户端发起 HTTPS 请求，连接到服务端的 443 端口。\",\"服务端有一套数字证书（证书内容有公钥、证书颁发机构、失效日期等）。\",\"服务端将自己的数字证书发送给客户端（公钥在证书里面，私钥由服务器持有）。\",\"客户端收到数字证书之后，会验证证书的合法性。如果证书验证通过，就会生成一个随机的对称密钥，用证书的公钥加密。\",\"客户端将公钥加密后的密钥发送到服务器。\",\"服务器接收到客户端发来的密文密钥之后，用自己之前保留的私钥对其进行非对称解密，解密之后就得到客户端的密钥，然后用客户端密钥对返回数据进行对称加密，酱紫传输的数据都是密文啦。\",\"服务器将加密后的密文返回到客户端。\",\"客户端收到后，用自己的密钥对其进行对称解密，得到服务器返回的数据。\",\"这里还画了一张更详尽的图：\"]},\"564\":{\"h\":\"21.客户端怎么去校验证书的合法性？\",\"t\":[\"首先，服务端的证书从哪来的呢？\",\"为了让服务端的公钥被⼤家信任，服务端的证书都是由 CA （Certificate Authority，证书认证机构）签名的，CA 就是⽹络世界⾥的公安局、公证中⼼，具有极⾼的可信度，所以由它来给各个公钥签名，信任的⼀⽅签发的证书，那必然证书也是被信任的。\",\"CA 签发证书的过程，如上图左边部分：\",\"⾸先 CA 会把持有者的公钥、⽤途、颁发者、有效时间等信息打成⼀个包，然后对这些信息进⾏ Hash 计算，得到⼀个 Hash 值；\",\"然后 CA 会使⽤⾃⼰的私钥将该 Hash 值加密，⽣成 Certificate Signature，也就是 CA 对证书做了签名；\",\"最后将 Certificate Signature 添加在⽂件证书上，形成数字证书；\",\"客户端校验服务端的数字证书的过程，如上图右边部分：\",\"⾸先客户端会使⽤同样的 Hash 算法获取该证书的 Hash 值 H1；\",\"通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使⽤ CA 的公钥解密 Certificate\",\"Signature 内容，得到⼀个 Hash 值 H2 ；\",\"最后⽐较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。\",\"假如在 HTTPS 的通信过程中，中间人篡改了证书原文，由于他没有 CA 机构的私钥，所以 CA 公钥解密的内容就不一致。\"]},\"565\":{\"h\":\"22.如何理解 HTTP 协议是无状态的？\",\"t\":[\"这个无状态的的状态值的是什么？是客户端的状态，所以字面意思，就是 HTTP 协议中服务端不会保存客户端的任何信息。\",\"比如当浏览器第一次发送请求给服务器时，服务器响应了；如果同个浏览器发起第二次请求给服务器时，它还是会响应，但是呢，服务器不知道你就是刚才的那个浏览器。\",\"那有什么办法记录状态呢？\",\"主要有两个办法，Session 和 Cookie。\"]},\"566\":{\"h\":\"23.说说 Session 和 Cookie 有什么联系和区别?\",\"t\":[\"先来看看什么是 Session 和 Cookie ：\",\"Cookie 是保存在客户端的一小块文本串的数据。客户端向服务器发起请求时，服务端会向客户端发送一个 Cookie，客户端就把 Cookie 保存起来。在客户端下次向同一服务器再发起请求时，Cookie 被携带发送到服务器。服务端可以根据这个 Cookie 判断用户的身份和状态。\",\"Session 指的就是服务器和客户端一次会话的过程。它是另一种记录客户状态的机制。不同的是 cookie 保存在客户端浏览器中，而 session 保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是 session。客户端浏览器再次访问时只需要从该 session 中查找用户的状态。\",\"Session 和 Cookie 到底有什么不同呢？\",\"存储位置不一样，Cookie 保存在客户端，Session 保存在服务器端。\",\"存储数据类型不一样，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。\",\"有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般有效时间较短，客户端关闭或者 Session 超时都会失效。\",\"隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。\",\"存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。\",\"Session 和 Cookie 有什么关联呢？\",\"可以使用 Cookie 记录 Session 的标识。\",\"用户第一次请求服务器时，服务器根据用户提交的信息，创建对应的 Session，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入 Cookie 中，同时 Cookie 记录此 SessionID 是属于哪个域名。\",\"当用户第二次访问服务器时，请求会自动判断此域名下是否存在 Cookie 信息，如果存在，则自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到，说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。\",\"分布式环境下 Session 怎么处理呢？\",\"分布式环境下，客户端请求经过负载均衡，可能会分配到不同的服务器上，假如一个用户的请求两次没有落到同一台服务器上，那么在新的服务器上就没有记录用户状态的 Session。\",\"这时候怎么办呢？\",\"可以使用 Redis 等分布式缓存来存储 Session，在多台服务器之间共享。\",\"客户端无法使用 Cookie 怎么办？\",\"有可能客户端无法使用 Cookie，比如浏览器禁用 Cookie，或者客户端是安卓、IOS 等等。\",\"这时候怎么办？SessionID 怎么存？怎么传给服务端呢？\",\"首先是 SessionID 的存储，可以使用客户端的本地存储，比如浏览器的 sessionStorage。\",\"接下来怎么传呢？\",\"拼接到 URL 里：直接把 SessionID 作为 URL 的请求参数\",\"放到请求头里：把 SessionID 放到请求的 Header 里，比较常用。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"567\":{\"h\":\"TCP\"},\"568\":{\"h\":\"24.详细说一下 TCP 的三次握手机制\",\"t\":[\"PS:TCP 三次握手是最重要的知识点，一定要熟悉到问到即送分。\",\"TCP 提供面向连接的服务，在传送数据前必须建立连接，TCP 连接是通过三次握手建立的。\",\"三次握手的过程：\",\"最开始，客户端和服务端都处于 CLOSE 状态，服务端监听客户端的请求，进入 LISTEN 状态\",\"客户端端发送连接请求，第一次握手 (SYN=1, seq=x)，发送完毕后，客户端就进入 SYN_SENT 状态\",\"服务端确认连接，第二次握手 (SYN=1, ACK=1, seq=y, ACKnum=x+1)， 发送完毕后，服务器端就进入 SYN_RCV 状态。\",\"客户端收到服务端的确认之后，再次向服务端确认，这就是**第三次握手 **(ACK=1，ACKnum=y+1)，发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态。\",\"TCP 三次握手通俗比喻：\",\"在二十年前的农村，电话没有普及，手机就更不用说了，所以，通信基本靠吼。\",\"老张和老王是邻居，这天老张下地了，结果家里有事，热心的邻居老王赶紧跑到村口，开始叫唤老王。\",\"老王：老张唉！我是老王，你能听到吗？\",\"老张一听，是老王的声音：老王老王，我是老张，我能听到，你能听到吗？\",\"老王一听，嗯，没错，是老张：老张，我听到了，我有事要跟你说。\",\"\\\"你老婆要生了，赶紧回家吧！\\\"\",\"老张风风火火地赶回家，老婆顺利地生了个带把的大胖小子。握手的故事充满了幸福和美满。\"]},\"569\":{\"h\":\"25.TCP 握手为什么是三次，为什么不能是两次？不能是四次？\",\"t\":[\"为什么不能是两次？\",\"为了防止服务器端开启一些无用的连接增加服务器开销\",\"防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\",\"由于网络传输是有延时的(要通过网络光纤和各种中间代理服务器)，在传输的过程中，比如客户端发起了 SYN=1 的第一次握手。\",\"如果服务器端就直接创建了这个连接并返回包含 SYN、ACK 和 Seq 等内容的数据包给客户端，这个数据包因为网络传输的原因丢失了，丢失之后客户端就一直没有接收到服务器返回的数据包。\",\"如果没有第三次握手告诉服务器端客户端收的到服务器端传输的数据的话，服务器端是不知道客户端有没有接收到服务器端返回的信息的。\",\"服务端就认为这个连接是可用的，端口就一直开着，等到客户端因超时重新发出请求时，服务器就会重新开启一个端口连接。这样一来，就会有很多无效的连接端口白白地开着，导致资源的浪费。\",\"还有一种情况是已经失效的客户端发出的请求信息，由于某种原因传输到了服务器端，服务器端以为是客户端发出的有效请求，接收后产生错误。\",\"所以我们需要“第三次握手”来确认这个过程：\",\"通过第三次握手的数据告诉服务端，客户端有没有收到服务器“第二次握手”时传过去的数据，以及这个连接的序号是不是有效的。若发送的这个数据是“收到且没有问题”的信息，接收后服务器就正常建立 TCP 连接，否则建立 TCP 连接失败，服务器关闭连接端口。由此减少服务器开销和接收到失效请求发生的错误。\",\"为什么不是四次？\",\"简单说，就是三次挥手已经足够创建可靠的连接，没有必要再多一次握手导致花费更多的时间建立连接。\"]},\"570\":{\"h\":\"26.三次握手中每一次没收到报文会发生什么情况？\",\"t\":[\"第一次握手服务端未收到 SYN 报文\",\"服务端不会进行任何的动作，而客户端由于一段时间内没有收到服务端发来的确认报文，等待一段时间后会重新发送 SYN 报文，如果仍然没有回应，会重复这个过程，直到发送次数超过最大重传次数限制，就会返回连接建立失败。\",\"第二次握手客户端未收到服务端响应的 ACK 报文\",\"客户端会继续重传，直到次数限制；而服务端此时会阻塞在 accept()处，等待客户端发送 ACK 报文\",\"第三次握手服务端为收到客户端发送过来的 ACK 报文\",\"服务端同样会采用类似客户端的超时重传机制，如果重试次数超过限制，则 accept()调用返回-1，服务端建立连接失败；而此时客户端认为自己已经建立连接成功，因此开始向服务端发送数据，但是服务端的 accept()系统调用已经返回，此时不在监听状态，因此服务端接收到客户端发送来的数据时会发送 RST 报文给客户端，消除客户端单方面建立连接的状态。\"]},\"571\":{\"h\":\"27.第二次握手传回了 ACK，为什么还要传回 SYN？\",\"t\":[\"ACK 是为了告诉客户端传来的数据已经接收无误。\",\"而传回 SYN 是为了告诉客户端，服务端响应的确实是客户端发送的报文。\"]},\"572\":{\"h\":\"28.第 3 次握手可以携带数据吗？\",\"t\":[\"第 3 次握手是可以携带数据的。\",\"此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，它已经建立连接成功，并且确认服务端的接收和发送能力是正常的。\",\"第一次握手不能携带数据是出于安全的考虑，因为如果允许携带数据，攻击者每次在 SYN 报文中携带大量数据，就会导致服务端消耗更多的时间和空间去处理这些报文，会造成 CPU 和内存的消耗。\"]},\"573\":{\"h\":\"29.说说半连接队列和 SYN Flood 攻击的关系？\",\"t\":[\"什么是半连接队列？\",\"TCP 进入三次握手前，服务端会从 CLOSED 状态变为 LISTEN 状态, 同时在内部创建了两个队列：半连接队列（SYN 队列）和全连接队列（ACCEPT 队列）。\",\"顾名思义，半连接队列存放的是三次握手未完成的连接，全连接队列存放的是完成三次握手的连接。\",\"TCP 三次握手时，客户端发送 SYN 到服务端，服务端收到之后，便回复 ACK 和 SYN，状态由 LISTEN 变为 SYN_RCVD，此时这个连接就被推入了 SYN 队列，即半连接队列。\",\"当客户端回复 ACK, 服务端接收后，三次握手就完成了。这时连接会等待被具体的应用取走，在被取走之前，它被推入 ACCEPT 队列，即全连接队列。\",\"什么是 SYN Flood ？\",\"SYN Flood 是一种典型的 DDos 攻击，它在短时间内，伪造不存在的 IP 地址, 向服务器发送大量 SYN 报文。当服务器回复 SYN+ACK 报文后，不会收到 ACK 回应报文，那么 SYN 队列里的连接旧不会出对队，久⽽久之就会占满服务端的 SYN 接收队列（半连接队列），使得服务器不能为正常⽤户服务。\",\"那有什么应对方案呢？\",\"主要有 syn cookie 和 SYN Proxy 防火墙等。\",\"syn cookie：在收到 SYN 包后，服务器根据一定的方法，以数据包的源地址、端口等信息为参数计算出一个 cookie 值作为自己的 SYNACK 包的序列号，回复 SYN+ACK 后，服务器并不立即分配资源进行处理，等收到发送方的 ACK 包后，重新根据数据包的源地址、端口计算该包中的确认序列号是否正确，如果正确则建立连接，否则丢弃该包。\",\"SYN Proxy 防火墙：服务器防火墙会对收到的每一个 SYN 报文进行代理和回应，并保持半连接。等发送方将 ACK 包返回后，再重新构造 SYN 包发到服务器，建立真正的 TCP 连接。\"]},\"574\":{\"h\":\"30.说说 TCP 四次挥手的过程？\",\"t\":[\"PS：问完三次握手，常常也会顺道问问四次挥手，所以也是必须掌握知识点。\",\"TCP 四次挥手过程：\",\"数据传输结束之后，通信双方都可以主动发起断开连接请求，这里假定客户端发起\",\"客户端发送释放连接报文，第一次挥手 (FIN=1，seq=u)，发送完毕后，客户端进入 FIN_WAIT_1 状态。\",\"服务端发送确认报文，第二次挥手 (ACK=1，ack=u+1,seq =v)，发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态。\",\"服务端发送释放连接报文，第三次挥手 (FIN=1，ACK1,seq=w,ack=u+1)，发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK。\",\"客户端发送确认报文，第四次挥手 (ACK=1，seq=u+1,ack=w+1)，客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT 状态，等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。\",\"大白话说四次挥手：\",\"假如单身狗博主有一个女朋友—由于博主上班九九六，下班肝博客，导致没有时间陪女朋友，女朋友忍无可忍。\",\"女朋友：狗男人，最近你都不理我，你是不是不爱我了？你是不是外面有别的狗子了？我要和你分手？\",\"沙雕博主一愣，怒火攻心：分手就分手，不陪你闹了，等我把东西收拾收拾。\",\"沙雕博主小心翼翼地装起了自己的青轴机械键盘。\",\"哼，蠢女人，我已经收拾完了，我先滚为敬，再见！\",\"女朋友：滚，滚的远远的，越远越好，我一辈子都不想再见到你。\",\"挥手的故事总充满了悲伤和遗憾！\"]},\"575\":{\"h\":\"31.TCP 挥手为什么需要四次呢？\",\"t\":[\"再来回顾下四次挥手双方发 FIN 包的过程，就能理解为什么需要四次了。\",\"关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。\",\"服务端收到客户端的 FIN 报文时，先回一个 ACK 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。\",\"从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都会分开发送，从而比三次握手导致多了一次。\"]},\"576\":{\"h\":\"32.TCP 四次挥手过程中，为什么需要等待 2MSL, 才进入 CLOSED 关闭状态？\",\"t\":[\"为什么需要等待？\",\"1. 为了保证客户端发送的最后一个 ACK 报文段能够到达服务端。 这个 ACK 报文段有可能丢失，因而使处在 LAST-ACK 状态的服务端就收不到对已发送的 FIN + ACK 报文段的确认。服务端会超时重传这个 FIN+ACK 报文段，而客户端就能在 2MSL 时间内（超时 + 1MSL 传输）收到这个重传的 FIN+ACK 报文段。接着客户端重传一次确认，重新启动 2MSL 计时器。最后，客户端和服务器都正常进入到 CLOSED 状态。\",\"2. 防止已失效的连接请求报文段出现在本连接中。客户端在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。\",\"为什么等待的时间是 2MSL？\",\"MSL 是 Maximum Segment Lifetime，报⽂最⼤⽣存时间，它是任何报⽂在⽹络上存在的最⻓时间，超过这个时间报⽂将被丢弃。\",\"TIME_WAIT 等待 2 倍的 MSL，⽐较合理的解释是：⽹络中可能存在来⾃发送⽅的数据包，当这些发送⽅的数据包被接收⽅处理后⼜会向对⽅发送响应，所以⼀来⼀回需要等待 2 倍的时间。\",\"⽐如如果被动关闭⽅没有收到断开连接的最后的 ACK 报⽂，就会触发超时重发 Fin 报⽂，另⼀⽅接收到 FIN 后，会重发 ACK 给被动关闭⽅， ⼀来⼀去正好 2 个 MSL。\"]},\"577\":{\"h\":\"33.保活计时器有什么用？\",\"t\":[\"除时间等待计时器外，TCP 还有一个保活计时器（keepalive timer）。\",\"设想这样的场景：客户已主动与服务器建立了 TCP 连接。但后来客户端的主机突然发生故障。显然，服务器以后就不能再收到客户端发来的数据。因此，应当有措施使服务器不要再白白等待下去。这就需要使用保活计时器了。\",\"服务器每收到一次客户端的数据，就重新设置保活计时器，时间的设置通常是两个小时。若两个小时都没有收到客户端的数据，服务端就发送一个探测报文段，以后则每隔 75 秒钟发送一次。若连续发送 10 个探测报文段后仍然无客户端的响应，服务端就认为客户端出了故障，接着就关闭这个连接。\"]},\"578\":{\"h\":\"34.CLOSE-WAIT 和 TIME-WAIT 的状态和意义？\",\"t\":[\"CLOSE-WAIT 状态有什么意义？\",\"服务端收到客户端关闭连接的请求并确认之后，就会进入 CLOSE-WAIT 状态。此时服务端可能还有一些数据没有传输完成，因此不能立即关闭连接，而 CLOSE-WAIT 状态就是为了保证服务端在关闭连接之前将待发送的数据处理完。\",\"TIME-WAIT 有什么意义？\",\"TIME-WAIT 状态发生在第四次挥手，当客户端向服务端发送 ACK 确认报文后进入 TIME-WAIT 状态。\",\"它存在的意义主要是两个：\",\"防⽌旧连接的数据包\",\"如果客户端收到服务端的 FIN 报文之后立即关闭连接，但是此时服务端对应的端口并没有关闭，如果客户端在相同端口建立新的连接，可能会导致新连接收到旧连接残留的数据包，导致不可预料的异常发生。\",\"保证连接正确关闭\",\"假设客户端最后一次发送的 ACK 包在传输的时候丢失了，由于 TCP 协议的超时重传机制，服务端将重发 FIN 报文，如果客户端没有维持 TIME-WAIT 状态而直接关闭的话，当收到服务端重新发送的 FIN 包时，客户端就会使用 RST 包来响应服务端，导致服务端以为有错误发生，然而实际关闭连接过程是正常的。\"]},\"579\":{\"h\":\"35.TIME_WAIT 状态过多会导致什么问题？怎么解决？\",\"t\":[\"TIME_WAIT 状态过多会导致什么问题?\",\"如果服务器有处于 TIME-WAIT 状态的 TCP，则说明是由服务器⽅主动发起的断开请求。\",\"过多的 TIME-WAIT 状态主要的危害有两种：\",\"第⼀是内存资源占⽤；\",\"第⼆是对端⼝资源的占⽤，⼀个 TCP 连接⾄少消耗⼀个本地端⼝；\",\"怎么解决 TIME_WAIT 状态过多？\",\"服务器可以设置 SO_REUSEADDR 套接字来通知内核，如果端口被占用，但是 TCP 连接位于 TIME_WAIT 状态时可以重用端口。\",\"还可以使用长连接的方式来减少 TCP 的连接和断开，在长连接的业务里往往不需要考虑 TIME_WAIT 状态。\"]},\"580\":{\"h\":\"36.说说 TCP 报文首部的格式？\",\"t\":[\"看一下 TCP 报文首部的格式：\",\"16 位端口号：源端口号，主机该报文段是来自哪里；目标端口号，要传给哪个上层协议或应用程序\",\"32 位序号：一次 TCP 通信（从 TCP 连接建立到断开）过程中某一个传输方向上的字节流的每个字节的编号。\",\"32 位确认号：用作对另一方发送的 tcp 报文段的响应。其值是收到的 TCP 报文段的序号值加 1。\",\"4 位首部长度：表示 tcp 头部有多少个 32bit 字（4 字节）。因为 4 位最大能标识 15，所以 TCP 头部最长是 60 字节。\",\"6 位标志位：URG(紧急指针是否有效)，ACk（表示确认号是否有效），PST（缓冲区尚未填满），RST（表示要求对方重新建立连接），SYN（建立连接消息标志接），FIN（表示告知对方本端要关闭连接了）\",\"16 位窗口大小：是 TCP 流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的 TCP 接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。\",\"16 位校验和：由发送端填充，接收端对 TCP 报文段执行 CRC 算法以检验 TCP 报文段在传输过程中是否损坏。注意，这个校验不仅包括 TCP 头部，也包括数据部分。这也是 TCP 可靠传输的一个重要保障。\",\"16 位紧急指针：一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP 的紧急指针是发送端向接收端发送紧急数据的方法。\"]},\"581\":{\"h\":\"37.TCP 是如何保证可靠性的？\",\"t\":[\"TCP 主要提供了检验和、序列号/确认应答、超时重传、最大消息长度、滑动窗口控制等方法实现了可靠性传输。\",\"连接管理：TCP 使用三次握手和四次挥手保证可靠地建立连接和释放连接，这里就不用多说了。\",\"校验和：TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果接收端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。\",\"TCP 校验和\",\"序列号/确认应答：TCP 给发送的每一个包进行编号，接收方会对收到的包进行应答，发送方就会知道接收方是否收到对应的包，如果发现没有收到，就会重发，这样就能保证数据的完整性。就像老师上课，会问一句，这一章听懂了吗？没听懂再讲一遍。\",\"**流量控制：**TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。（TCP 利用滑动窗口实现流量控制）\",\"最大消息长度：在建立 TCP 连接的时候，双方约定一个最大的长度（MSS）作为发送的单位，重传的时候也是以这个单位来进行重传。理想的情况下是该长度的数据刚好不被网络层分块。\",\"**超时重传：**超时重传是指发送出去的数据包到接收到确认包之间的时间，如果超过了这个时间会被认为是丢包了，需要重传。\",\"**拥塞控制：**如果网络非常拥堵，此时再发送数据就会加重网络负担，那么发送的数据段很可能超过了最大生存时间也没有到达接收方，就会产生丢包问题。为此 TCP 引入慢启动机制，先发出少量数据，就像探路一样，先摸清当前的网络拥堵状态后，再决定按照多大的速度传送数据。\"]},\"582\":{\"h\":\"38.说说 TCP 的流量控制？\",\"t\":[\"TCP 提供了一种机制，可以让发送端根据接收端的实际接收能力控制发送的数据量，这就是流量控制。\",\"TCP 通过滑动窗口来控制流量，我们看下简要流程：\",\"首先双方三次握手，初始化各自的窗口大小，均为 400 个字节。\",\"假如当前发送方给接收方发送了 200 个字节，那么，发送方的SND.NXT会右移 200 个字节，也就是说当前的可用窗口减少了 200 个字节。\",\"接受方收到后，放到缓冲队列里面，REV.WND =400-200=200 字节，所以 win=200 字节返回给发送方。接收方会在 ACK 的报文首部带上缩小后的滑动窗口 200 字节\",\"发送方又发送 200 字节过来，200 字节到达，继续放到缓冲队列。不过这时候，由于大量负载的原因，接受方处理不了这么多字节，只能处理 100 字节，剩余的 100 字节继续放到缓冲队列。这时候，REV.WND = 400-200-100=100 字节，即 win=100 返回发送方。\",\"发送方继续发送 100 字节过来，这时候，接收窗口 win 变为 0。\",\"发送方停止发送，开启一个定时任务，每隔一段时间，就去询问接受方，直到 win 大于 0，才继续开始发送。\"]},\"583\":{\"h\":\"39.详细说说 TCP 的滑动窗口？\",\"t\":[\"TCP 发送一个数据，如果需要收到确认应答，才会发送下一个数据。这样的话就会有个缺点：效率会比较低。\",\"“用一个比喻，我们在微信上聊天，你打完一句话，我回复一句之后，你才能打下一句。假如我没有及时回复呢？你是把话憋着不说吗？然后傻傻等到我回复之后再接着发下一句？”\",\"为了解决这个问题，TCP 引入了窗口，它是操作系统开辟的一个缓存空间。窗口大小值表示无需等待确认应答，而可以继续发送数据的最大值。\",\"TCP 头部有个字段叫 win，也即那个 16 位的窗口大小，它告诉对方本端的 TCP 接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度，从而达到流量控制的目的。\",\"“通俗点讲，就是接受方每次收到数据包，在发送确认报文的时候，同时告诉发送方，自己的缓存区还有多少空余空间，缓冲区的空余空间，我们就称之为接受窗口大小。这就是 win。”\",\"TCP 滑动窗口分为两种: 发送窗口和接收窗口。发送端的滑动窗口包含四大部分，如下：\",\"已发送且已收到 ACK 确认\",\"已发送但未收到 ACK 确认\",\"未发送但可以发送\",\"未发送也不可以发送\",\"深蓝色框里就是发送窗口。\",\"SND.WND: 表示发送窗口的大小, 上图虚线框的格子数是 10 个，即发送窗口大小是 10。\",\"SND.NXT：下一个发送的位置，它指向未发送但可以发送的第一个字节的序列号。\",\"SND.UNA: 一个绝对指针，它指向的是已发送但未确认的第一个字节的序列号。\",\"接收方的滑动窗口包含三大部分，如下：\",\"已成功接收并确认\",\"未收到数据但可以接收\",\"未收到数据并不可以接收的数据\",\"蓝色框内，就是接收窗口。\",\"REV.WND: 表示接收窗口的大小, 上图虚线框的格子就是 9 个。\",\"REV.NXT: 下一个接收的位置，它指向未收到但可以接收的第一个字节的序列号。\"]},\"584\":{\"h\":\"40.了解 Nagle 算法和延迟确认吗？\",\"t\":[\"Nagle 算法和延迟确认是干什么的？\",\"当我们 TCP 报⽂的承载的数据⾮常⼩的时候，例如⼏个字节，那么整个⽹络的效率是很低的，因为每个 TCP 报⽂中都会有 20 个字节的 TCP 头部，也会有 20 个字节的 IP 头部，⽽数据只有⼏个字节，所以在整个报⽂中有效数据占有的比例就会⾮常低。\",\"这就好像快递员开着⼤货⻋送⼀个⼩包裹⼀样浪费。\",\"那么就出现了常⻅的两种策略，来减少⼩报⽂的传输，分别是：\",\"Nagle 算法\",\"延迟确认\",\"Nagle 算法\",\"Nagle 算法：任意时刻，最多只能有一个未被确认的小段。所谓 “小段”，指的是小于 MSS 尺寸的数据块，所谓 “未被确认”，是指一个数据块发送出去后，没有收到对方发送的 ACK 确认该数据已收到。\",\"Nagle 算法的策略：\",\"没有已发送未确认报⽂时，⽴刻发送数据。\",\"存在未确认报⽂时，直到「没有已发送未确认报⽂」或「数据⻓度达到 MSS ⼤⼩」时，再发送数据。\",\"只要没满⾜上⾯条件中的⼀条，发送⽅⼀直在囤积数据，直到满⾜上⾯的发送条件。\",\"延迟确认\",\"事实上当没有携带数据的 ACK，它的⽹络效率也是很低的，因为它也有 40 个字节的 IP 头 和 TCP 头，但却没有携带数据报⽂。\",\"为了解决 ACK 传输效率低问题，所以就衍⽣出了 TCP 延迟确认。\",\"TCP 延迟确认的策略：\",\"当有响应数据要发送时，ACK 会随着响应数据⼀起⽴刻发送给对⽅\",\"当没有响应数据要发送时，ACK 将会延迟⼀段时间，以等待是否有响应数据可以⼀起发送\",\"如果在延迟等待发送 ACK 期间，对⽅的第⼆个数据报⽂⼜到达了，这时就会⽴刻发送 ACK\",\"一般情况下，Nagle 算法和延迟确认不能一起使用，Nagle 算法意味着延迟发，延迟确认意味着延迟接收，两个凑在一起就会造成更大的延迟，会产生性能问题。\"]},\"585\":{\"h\":\"41.说说 TCP 的拥塞控制？\",\"t\":[\"什么是拥塞控制？不是有了流量控制吗？\",\"前⾯的流量控制是避免发送⽅的数据填满接收⽅的缓存，但是并不知道整个⽹络之中发⽣了什么。\",\"⼀般来说，计算机⽹络都处在⼀个共享的环境。因此也有可能会因为其他主机之间的通信使得⽹络拥堵。\",\"在⽹络出现拥堵时，如果继续发送⼤量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是⼀重传就会导致⽹络的负担更重，于是会导致更⼤的延迟以及更多的丢包，这个情况就会进⼊恶性循环被不断地放⼤....\",\"所以，TCP 不能忽略整个网络中发⽣的事，它被设计成⼀个⽆私的协议，当⽹络发送拥塞时，TCP 会⾃我牺牲，降低发送的数据流。\",\"于是，就有了拥塞控制，控制的⽬的就是避免发送⽅的数据填满整个⽹络。\",\"就像是一个水管，不能让太多的水（数据流）流入水管，如果超过水管的承受能力，水管会被撑爆（丢包）。\",\"发送方维护一个拥塞窗口 cwnd（congestion window） 的变量，调节所要发送数据的量。\",\"什么是拥塞窗⼝？和发送窗⼝有什么关系呢？\",\"拥塞窗⼝ cwnd是发送⽅维护的⼀个的状态变量，它会根据⽹络的拥塞程度动态变化的。\",\"发送窗⼝ swnd 和接收窗⼝ rwnd 是约等于的关系，那么由于加⼊了拥塞窗⼝的概念后，此时发送窗⼝的值是 swnd = min(cwnd, rwnd)，也就是拥塞窗⼝和接收窗⼝中的最⼩值。\",\"拥塞窗⼝ cwnd 变化的规则：\",\"只要⽹络中没有出现拥塞， cwnd 就会增⼤；\",\"但⽹络中出现了拥塞， cwnd 就减少；\",\"拥塞控制有哪些常用算法？\",\"拥塞控制主要有这几种常用算法：\",\"慢启动\",\"拥塞避免\",\"拥塞发生\",\"快速恢复\"]},\"586\":{\"h\":\"慢启动算法\",\"t\":[\"慢启动算法，慢慢启动。\",\"它表示 TCP 建立连接完成后，一开始不要发送大量的数据，而是先探测一下网络的拥塞程度。由小到大逐渐增加拥塞窗口的大小，如果没有出现丢包，每收到一个 ACK，就将拥塞窗口 cwnd 大小就加 1（单位是 MSS）。每轮次发送窗口增加一倍，呈指数增长，如果出现丢包，拥塞窗口就减半，进入拥塞避免阶段。\",\"举个例子：\",\"连接建⽴完成后，⼀开始初始化 cwnd = 1 ，表示可以传⼀个 MSS ⼤⼩的数据。\",\"当收到⼀个 ACK 确认应答后，cwnd 增加 1，于是⼀次能够发送 2 个\",\"当收到 2 个的 ACK 确认应答后， cwnd 增加 2，于是就可以⽐之前多发 2 个，所以这⼀次能够发送 4 个\",\"当这 4 个的 ACK 确认到来的时候，每个确认 cwnd 增加 1， 4 个确认 cwnd 增加 4，于是就可以⽐之前多发 4 个，所以这⼀次能够发送 8 个。\",\"发包的个数是指数性的增⻓。\",\"为了防止 cwnd 增长过大引起网络拥塞，还需设置一个慢启动阀值 ssthresh（slow start threshold）状态变量。当cwnd到达该阀值后，就好像水管被关小了水龙头一样，减少拥塞状态。即当 cwnd >ssthresh 时，进入了拥塞避免算法。\"]},\"587\":{\"h\":\"拥塞避免算法\",\"t\":[\"一般来说，慢启动阀值 ssthresh 是 65535 字节，cwnd到达慢启动阀值后\",\"每收到一个 ACK 时，cwnd = cwnd + 1/cwnd\",\"当每过一个 RTT 时，cwnd = cwnd + 1\",\"显然这是一个线性上升的算法，避免过快导致网络拥塞问题。\",\"接着上面慢启动的例子，假定 ssthresh 为 8 ：：\",\"当 8 个 ACK 应答确认到来时，每个确认增加 1/8，8 个 ACK 确认 cwnd ⼀共增加 1，于是这⼀次能够发送 9 个 MSS ⼤⼩的数据，变成了线性增⻓。\"]},\"588\":{\"h\":\"拥塞发生\",\"t\":[\"当网络拥塞发生丢包时，会有两种情况：\",\"RTO 超时重传\",\"快速重传\",\"如果是发生了 RTO 超时重传，就会使用拥塞发生算法\",\"慢启动阀值 sshthresh = cwnd /2\",\"cwnd 重置为 1\",\"进入新的慢启动过程\",\"这种方式就像是飙车的时候急刹车，还飞速倒车，这。。。\",\"其实还有更好的处理方式，就是快速重传。发送方收到 3 个连续重复的 ACK 时，就会快速地重传，不必等待 RTO 超时再重传。\",\"发⽣快速重传的拥塞发⽣算法：\",\"拥塞窗口大小 cwnd = cwnd/2\",\"慢启动阀值 ssthresh = cwnd\",\"进入快速恢复算法\"]},\"589\":{\"h\":\"快速恢复\",\"t\":[\"快速重传和快速恢复算法一般同时使用。快速恢复算法认为，还有 3 个重复 ACK 收到，说明网络也没那么糟糕，所以没有必要像 RTO 超时那么强烈。\",\"正如前面所说，进入快速恢复之前，cwnd 和 sshthresh 已被更新：\",\"cwnd = cwnd /2\",\"- sshthresh = cwnd\",\"然后，进⼊快速恢复算法如下：\",\"cwnd = sshthresh + 3\",\"重传重复的那几个 ACK（即丢失的那几个数据包）\",\"如果再收到重复的 ACK，那么 cwnd = cwnd +1\",\"如果收到新数据的 ACK 后, cwnd = sshthresh。因为收到新数据的 ACK，表明恢复过程已经结束，可以再次进入了拥塞避免的算法了。\"]},\"590\":{\"h\":\"42.说说 TCP 的重传机制？\",\"t\":[\"重传包括超时重传、快速重传、带选择确认的重传（SACK）、重复 SACK 四种。\"]},\"591\":{\"h\":\"超时重传\",\"t\":[\"超时重传，是 TCP 协议保证数据可靠性的另一个重要机制，其原理是在发送某一个数据以后就开启一个计时器，在一定时间内如果没有得到发送的数据报的 ACK 报文，那么就重新发送数据，直到发送成功为止。\",\"超时时间应该设置为多少呢？\",\"先来看下什么叫 RTT（Round-Trip Time，往返时间）。\",\"RTT 就是数据完全发送完，到收到确认信号的时间，即数据包的一次往返时间。\",\"超时重传时间，就是 RTO（Retransmission Timeout)。那么，RTO 到底设置多大呢？\",\"如果 RTO 设置很大，等了很久都没重发，这样肯定就不行。\",\"如果 RTO 设置很小，那很可能数据都没有丢失，就开始重发了，这会导致网络阻塞，从而恶性循环，导致更多的超时出现。\",\"一般来说，RTO 略微大于 RTT，效果是最佳的。\",\"其实，RTO 有个标准方法的计算公式，也叫 Jacobson / Karels 算法。\",\"首先计算 SRTT（即计算平滑的 RTT）\",\"SRTT = (1 - α) * SRTT + α * RTT //求 SRTT 的加权平均 \",\"其次，计算 RTTVAR (round-trip time variation)\",\"RTTVAR = (1 - β) * RTTVAR + β * (|RTT - SRTT|) //计算 SRTT 与真实值的差距 \",\"最后，得出最终的 RTO\",\"RTO = µ * SRTT + ∂ * RTTVAR = SRTT + 4·RTTVAR \",\"在 Linux 下，α = 0.125，β = 0.25， μ = 1，∂ = 4。别问这些参数是怎么来的，它们是大量实践，调出的最优参数。\",\"超时重传不是十分完美的重传方案，它有这些缺点：\",\"当一个报文丢失时，会等待一定的超时周期，才重传分组，增加了端到端的时延。\",\"当一个报文丢失时，在其等待超时的过程中，可能会出现这种情况：其后的报文段已经被接收端接收但却迟迟得不到确认，发送端会认为也丢失了，从而引起不必要的重传，既浪费资源也浪费时间。\",\"并且，对于 TCP，如果发生一次超时重传，时间间隔下次就会加倍。\"]},\"592\":{\"h\":\"快速重传\",\"t\":[\"TCP 还有另外⼀种快速重传（Fast Retransmit）机制，它不以时间为驱动，⽽是以数据驱动重传。\",\"它不以时间驱动，而是以数据驱动。它是基于接收端的反馈信息来引发重传的。\",\"可以用它来解决超时重发的时间等待问题，快速重传流程如下：\",\"在上图，发送⽅发出了 1，2，3，4，5 份数据：\",\"第⼀份 Seq1 先送到了，于是就 Ack 回 2；\",\"结果 Seq2 因为某些原因没收到，Seq3 到达了，于是还是 Ack 回 2；\",\"后⾯的 Seq4 和 Seq5 都到了，但还是 Ack 回 2，因为 Seq2 还是没有收到；\",\"发送端收到了三个 Ack = 2 的确认，知道了 Seq2 还没有收到，就会在定时器过期之前，重传丢失的 Seq2。\",\"最后，收到了 Seq2，此时因为 Seq3，Seq4，Seq5 都收到了，于是 Ack 回 6 。\",\"快速重传机制只解决了⼀个问题，就是超时时间的问题，但是它依然⾯临着另外⼀个问题。就是重传的时候，是重传之前的⼀个，还是重传所有的问题。\",\"⽐如对于上⾯的例⼦，是重传 Seq2 呢？还是重传 Seq2、Seq3、Seq4、Seq5 呢？因为发送端并不清楚这连续的三个 Ack 2 是谁传回来的。\",\"根据 TCP 不同的实现，以上两种情况都是有可能的。可⻅，这是⼀把双刃剑。\",\"为了解决不知道该重传哪些 TCP 报⽂，于是就有 SACK ⽅法。\"]},\"593\":{\"h\":\"带选择确认的重传（SACK）\",\"t\":[\"为了解决应该重传多少个包的问题? TCP 提供了带选择确认的重传（即 SACK，Selective Acknowledgment）。\",\"SACK 机制就是，在快速重传的基础上，接收方返回最近收到报文段的序列号范围，这样发送方就知道接收方哪些数据包是没收到的。这样就很清楚应该重传哪些数据包。\",\"如上图中，发送⽅收到了三次同样的 ACK 确认报⽂，于是就会触发快速重发机制，通过 SACK 信息发现只有 200~299 这段数据丢失，则重发时，就只选择了这个 TCP 段进⾏重发。\"]},\"594\":{\"h\":\"重复 SACK（D-SACK）\",\"t\":[\"D-SACK，英文是 Duplicate SACK，是在 SACK 的基础上做了一些扩展，主要用来告诉发送方，有哪些数据包，自己重复接受了。\",\"DSACK 的目的是帮助发送方判断，是否发生了包失序、ACK 丢失、包重复或伪重传。让 TCP 可以更好的做网络流控。\",\"例如 ACK 丢包导致的数据包重复：\",\"接收⽅发给发送⽅的两个 ACK 确认应答都丢失了，所以发送⽅超时后，重传第⼀个数据包（3000 ~\",\"3499）\",\"于是接收⽅发现数据是重复收到的，于是回了⼀个 SACK = 3000~3500，告诉「发送⽅」 3000~3500 的数据早已被接收了，因为 ACK 都到了 4000 了，已经意味着 4000 之前的所有数据都已收到，所以这个 SACK 就代表着 D-SACK 。这样发送⽅就知道了，数据没有丢，是接收⽅的 ACK 确认报⽂丢了。\"]},\"595\":{\"h\":\"43.说说 TCP 的粘包和拆包？\",\"t\":[\"TCP 的粘包和拆包更多的是业务上的概念！\",\"什么是 TCP 粘包和拆包？\",\"TCP 是面向流，没有界限的一串数据。TCP 底层并不了解上层业务数据的具体含义，它会根据 TCP 缓冲区的实际情况进行包的划分，所以在业务上认为，一个完整的包可能会被 TCP 拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送，这就是所谓的 TCP 粘包和拆包问题。\",\"为什么会产生粘包和拆包呢?\",\"要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包；\",\"接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包；\",\"要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包；\",\"待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包。即 TCP 报文长度 - TCP 头部长度 > MSS。\",\"那怎么解决呢？\",\"发送端将每个数据包封装为固定长度\",\"在数据尾部增加特殊字符进行分割\",\"将数据分为两部分，一部分是头部，一部分是内容体；其中头部结构大小固定，且有一个字段声明内容体的大小。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"596\":{\"h\":\"UDP\",\"t\":[\"UDP 问的不多，基本上是被拿来和 TCP 比较。\"]},\"597\":{\"h\":\"44.说说 TCP 和 UDP 的区别？\",\"t\":[\"最根本区别：TCP 是面向连接，而 UDP 是无连接。\",\"可以这么形容：TCP 是打电话，UDP 是大喇叭。\",\"说说 TCP 和 UDP 的应用场景？\",\"TCP 应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有 UDP 高。例如：文件传输（准确高要求高、但是速度可以相对慢）、收发邮件、远程登录。\",\"UDP 应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ 聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。\"]},\"598\":{\"h\":\"45.为什么 QQ 采用 UDP 协议？\",\"t\":[\"PS：这是多年前的老题了，拉出来怀怀旧。\",\"首先，QQ 并不是完全基于 UDP 实现。比如在使用 QQ 进行文件传输等活动的时候，就会使用 TCP 作为可靠传输的保证。\",\"使用 UDP 进行交互通信的好处在于，延迟较短，对数据丢失的处理比较简单。同时，TCP 是一个全双工协议，需要建立连接，所以网络开销也会相对大。\",\"如果使用 QQ 语音和 QQ 视频的话，UDP 的优势就更为突出了，首先延迟较小。最重要的一点是不可靠传输，这意味着如果数据丢失的话，不会有重传。因为用户一般来说可以接受图像稍微模糊一点，声音稍微不清晰一点，但是如果在几秒钟以后再出现之前丢失的画面和声音，这恐怕是很难接受的。\",\"由于 QQ 的服务器设计容量是海量级的应用，一台服务器要同时容纳十几万的并发连接，因此服务器端只有采用 UDP 协议与客户端进行通讯才能保证这种超大规模的服务\",\"简单总结一下：UDP 协议是无连接方式的协议，它的效率高，速度快，占资源少，对服务器的压力比较小。但是其传输机制为不可靠传送，必须依靠辅助的算法来完成传输控制。QQ 采用的通信协议以 UDP 为主，辅以 TCP 协议。\"]},\"599\":{\"h\":\"46.UDP 协议为什么不可靠？\",\"t\":[\"UDP 在传输数据之前不需要先建立连接，远地主机的运输层在接收到 UDP 报文后，不需要确认，提供不可靠交付。总结就以下四点：\",\"不保证消息交付：不确认，不重传，无超时\",\"不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞\",\"不跟踪连接状态：不必建立连接或重启状态机\",\"不进行拥塞控制：不内置客户端或网络反馈机制\"]},\"600\":{\"h\":\"47.DNS 为什么要用 UDP?\",\"t\":[\"更准确地说，DNS 既使用 TCP 又使用 UDP。\",\"当进行区域传送（主域名服务器向辅助域名服务器传送变化的那部分数据）时会使用 TCP，因为数据同步传送的数据量比一个请求和应答的数据量要多，而 TCP 允许的报文长度更长，因此为了保证数据的正确性，会使用基于可靠连接的 TCP。\",\"当客户端想 DNS 服务器查询域名（域名解析）的时候，一般返回的内容不会超过 UDP 报文的最大长度，即 512 字节，用 UDP 传输时，不需要创建连接，从而大大提高了响应速度，但这要求域名解析服务器和域名服务器都必须自己处理超时和重传从而保证可靠性。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"601\":{\"h\":\"IP\"},\"602\":{\"h\":\"48.IP 协议的定义和作用？\",\"t\":[\"IP 协议是什么？\",\"IP 协议（Internet Protocol）又被称为互联网协议，是支持网间互联的数据包协议，工作在网际层，主要目的就是为了提高网络的可扩展性。\",\"通过网际协议 IP，可以把参与互联的，性能各异的网络看作一个统一的网络。\",\"和传输层 TCP 相比，IP 协议是一种无连接/不可靠、尽力而为的数据包传输服务，和 TCP 协议一起构成了 TCP/IP 协议的核心。\",\"IP 协议有哪些作用？\",\"IP 协议主要有以下几个作用：\",\"寻址和路由：在 IP 数据报中携带源 IP 地址和目的 IP 地址来表示该数据包的源主机和目标主机。IP 数据报在传输过程中，每个中间节点（IP 网关、路由器）只根据网络地址来进行转发，如果中间节点是路由器，则路由器会根据路由表选择合适的路径。IP 协议根据路由选择协议提供的路由信息对 IP 数据报进行转发，直至目标主机。\",\"分段和重组：IP 数据报在传输过程中可能会经过不同的网络，在不同的网络中数据报的最大长度限制是不同的，IP 协议通过给每个 IP 数据报分配一个标识符以及分段与组装的相关信息，使得数据报在不同的网络中能够被传输，被分段后的 IP 数据报可以独立地在网络中进行转发，在达到目标主机后由目标主机完成重组工作，恢复出原来的 IP 数据报。\",\"传输层协议和网络层协议有什么区别？\",\"网络层协议负责提供主机间的逻辑通信；传输层协议负责提供进程间的逻辑通信。\"]},\"603\":{\"h\":\"49.IP 地址有哪些分类？\",\"t\":[\"一个 IP 地址在这鞥个互联网范围内是惟一的，一般可以这么认为，IP 地址 = {<网络号>，<主机号>}。\",\"网络号：它标志主机所连接的网络地址表示属于互联网的哪一个网络。\",\"主机号：它标志主机地址表示其属于该网络中的哪一台主机。\",\"IP 地址分为 A，B，C，D，E 五大类：\",\"A 类地址 (1~126)：以 0 开头，网络号占前 8 位，主机号占后面 24 位。\",\"B 类地址 (128~191)：以 10 开头，网络号占前 16 位，主机号占后面 16 位。\",\"C 类地址 (192~223)：以 110 开头，网络号占前 24 位，主机号占后面 8 位。\",\"D 类地址 (224~239)：以 1110 开头，保留为多播地址。\",\"E 类地址 (240~255)：以 1111 开头，保留位为将来使用\"]},\"604\":{\"h\":\"50.域名和 IP 的关系？一个 IP 可以对应多个域名吗？\",\"t\":[\"IP 地址在同一个网络中是惟一的，用来标识每一个网络上的设备，其相当于一个人的身份证号\",\"域名在同一个网络中也是惟一的，就像是一个人的名字、绰号\",\"假如你有多个不用的绰号，你的朋友可以用其中任何一个绰号叫你，但你的身份证号码却是惟一的。但同时你的绰号也可能和别人重复，假如你不在，有人叫你的绰号，其它人可能就答应了。\",\"一个域名可以对应多个 IP，但这种情况 DNS 做负载均衡的，在用户访问过程中，一个域名只能对应一个 IP。\",\"而一个 IP 却可以对应多个域名，是一对多的关系。\"]},\"605\":{\"h\":\"51.IPV4 地址不够如何解决？\",\"t\":[\"我们知道，IP 地址有 32 位，可以标记 2 的 32 次方个地址，听起来很多，但是全球的网络设备数量已经远远超过这个数字，所以 IPV4 地址已经不够用了，那怎么解决呢？\",\"DHCP：动态主机配置协议，动态分配 IP 地址，只给接入网络的设备分配 IP 地址，因此同一个 MAC 地址的设备，每次接入互联网时，得到的 IP 地址不一定是相同的，该协议使得空闲的 IP 地址可以得到充分利用。\",\"CIDR：无类别域间路由。CIDR 消除了传统的 A 类、B 类、C 类地址以及划分子网的概念，因而更加有效地分配 IPv4 的地址空间，但无法从根本上解决地址耗尽的问题。\",\"NAT：网络地址转换协议，我们知道属于不同局域网的主机可以使用相同的 IP 地址，从而一定程度上缓解了 IP 资源枯竭的问题，然而主机在局域网中使用的 IP 地址是不能在公网中使用的，当局域网主机想要与公网主机进行通信时，NAT 方法可以将该主机 IP 地址转换为全球 IP 地址。该协议能够有效解决 IP 地址不足的问题。\",\"IPv6：作为接替 IPv4 的下一代互联网协议，其可以实现 2 的 128 次方个地址，而这个数量级，即使给地球上每一粒沙子都分配一个 IP 地址也够用，该协议能够从根本上解决 IPv4 地址不够用的问题。\"]},\"606\":{\"h\":\"52.说下 ARP 协议的工作过程？\",\"t\":[\"ARP 协议，Address Resolution Protocol，地址解析协议，它是用于实现 IP 地址到 MAC 地址的映射。\",\"首先，每台主机都会在自己的 ARP 缓冲区中建立一个 ARP 列表，以表示 IP 地址和 MAC 地址的对应关系。\",\"当源主机需要将一个数据包要发送到目的主机时，会首先检查自己的 ARP 列表，是否存在该 IP 地址对应的 MAC 地址；如果有﹐就直接将数据包发送到这个 MAC 地址；如果没有，就向本地网段发起一个 ARP 请求的广播包，查询此目的主机对应的 MAC 地址。此 ARP 请求的数据包里，包括源主机的 IP 地址、硬件地址、以及目的主机的 IP 地址。\",\"网络中所有的主机收到这个 ARP 请求后，会检查数据包中的目的 IP 是否和自己的 IP 地址一致。如果不相同，就会忽略此数据包；如果相同，该主机首先将发送端的 MAC 地址和 IP 地址添加到自己的 ARP 列表中，如果 ARP 表中已经存在该 IP 的信息，则将其覆盖，然后给源主机发送一个 ARP 响应数据包，告诉对方自己是它需要查找的 MAC 地址。\",\"源主机收到这个 ARP 响应数据包后，将得到的目的主机的 IP 地址和 MAC 地址添加到自己的 ARP 列表中，并利用此信息开始数据的传输。如果源主机一直没有收到 ARP 响应数据包，表示 ARP 查询失败。\"]},\"607\":{\"h\":\"53.为什么既有 IP 地址，又有 MAC 地址？\",\"t\":[\"MAC 地址和 IP 地址都有什么作用？\",\"MAC 地址是数据链路层和物理层使用的地址，是写在网卡上的物理地址，用来定义网络设备的位置，不可变更。\",\"IP 地址是网络层和以上各层使用的地址，是一种逻辑地址。IP 地址用来区别网络上的计算机。\",\"为什么有了 MAC 地址还需要 IP 地址？\",\"如果我们只使用 MAC 地址进行寻址的话，我们需要路由器记住每个 MAC 地址属于哪个子网，不然一次路由器收到数据包都要满世界寻找目的 MAC 地址。而我们知道 MAC 地址的长度为 48 位，也就是最多共有 2 的 48 次方个 MAC 地址，这就意味着每个路由器需要 256T 的内存，显然是不现实的。\",\"和 MAC 地址不同，IP 地址是和地域相关的，在一个子网中的设备，我们给其分配的 IP 地址前缀都是一样的，这样路由器就能根据 IP 地址的前缀知道这个设备属于哪个子网，剩下的寻址就交给子网内部实现，从而大大减少了路由器所需要的内存。\",\"为什么有了 IP 地址还需要 MAC 地址？\",\"只有当设备连入网络时，才能根据他进入了哪个子网来为其分配 IP 地址，在设备还没有 IP 地址的时候，或者在分配 IP 的过程中。我们需要 MAC 地址来区分不同的设备。\",\"IP 地址可以比作为地址，MAC 地址为收件人，在一次通信过程中，两者是缺一不可的。\"]},\"608\":{\"h\":\"54.ICMP 协议的功能？\",\"t\":[\"ICMP（Internet Control Message Protocol） ，网际控制报文协议。\",\"ICMP 协议是一种面向无连接的协议，用于传输出错报告控制信息。\",\"它是一个非常重要的协议，它对于网络安全具有极其重要的意义。它属于网络层协议，主要用于在主机与路由器之间传递控制信息，包括报告错误、交换受限控制和状态信息等。\",\"当遇到 IP 数据无法访问目标、IP 路由器无法按当前的传输速率转发数据包等情况时，会自动发送 ICMP 消息。\",\"比如我们日常使用得比较多的 ping，就是基于 ICMP 的。\"]},\"609\":{\"h\":\"55.说下 ping 的原理？\",\"t\":[\"ping，Packet Internet Groper，是一种因特网包探索器，用于测试网络连接量的程序。Ping 是工作在 TCP/IP 网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送 ICMP（Internet Control Message Protocol 因特网报文控制协议） 请求报文，测试目的站是否可达及了解其有关状态。\",\"一般来说，ping 可以用来检测网络通不通。它是基于ICMP协议工作的。假设机器 A ping 机器 B，工作过程如下：\",\"ping 通知系统，新建一个固定格式的 ICMP 请求数据包\",\"ICMP 协议，将该数据包和目标机器 B 的 IP 地址打包，一起转交给 IP 协议层\",\"IP 层协议将本机 IP 地址为源地址，机器 B 的 IP 地址为目标地址，加上一些其他的控制信息，构建一个 IP 数据包\",\"先获取目标机器 B 的 MAC 地址。\",\"数据链路层构建一个数据帧，目的地址是 IP 层传过来的 MAC 地址，源地址是本机的 MAC 地址\",\"机器 B 收到后，对比目标地址，和自己本机的 MAC 地址是否一致，符合就处理返回，不符合就丢弃。\",\"根据目的主机返回的 ICMP 回送回答报文中的时间戳，从而计算出往返时间\",\"最终显示结果有这几项：发送到目的主机的 IP 地址、发送 & 收到 & 丢失的分组数、往返时间的最小、最大 & 平均值\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"610\":{\"h\":\"网络安全\"},\"611\":{\"h\":\"56.说说有哪些安全攻击？\",\"t\":[\"网络安全攻击主要分为两种类型，被动攻击和主动攻击：\",\"被动攻击：是指攻击者从网络上窃听他人的通信内容，通常把这类攻击称为截获，被动攻击主要有两种形式：消息内容泄露攻击和流量分析攻击。由于攻击者没有修改数据，使得这种攻击很难被检测到。\",\"主动攻击：直接对现有的数据和服务造成影响，常见的主动攻击类型有：\",\"篡改：攻击者故意篡改网络上送的报文，甚至把完全伪造的报文传送给接收方。\",\"恶意程序：恶意程序种类繁多，包括计算机病毒、计算机蠕虫、特洛伊木马、后门入侵、流氓软件等等。\",\"拒绝服务 Dos：攻击者向服务器不停地发送分组，使服务器无法提供正常服务。\"]},\"612\":{\"h\":\"57.DNS 劫持了解吗？\",\"t\":[\"DNS 劫持即域名劫持，是通过将原域名对应的 IP 地址进行替换，从而使用户访问到错误的网站，或者使用户无法正常访问网站的一种攻击方式。\",\"域名劫持往往只能在特定的网络范围内进行，范围外的 DNS 服务器能够返回正常的 IP 地址。攻击者可以冒充原域名所属机构，通过电子邮件的方式修改组织机构的域名注册信息，或者将域名转让给其它主持，并将新的域名信息保存在所指定的 DNS 服务器中，从而使用户无法对原域名来进行解析以访问目标地址。\",\"DNS 劫持的步骤是什么样的？\",\"获取要劫持的域名信息：攻击者会首先访问域名查询要劫持的站点的域名信息。\",\"控制域名响应的 E-Mail 账号：在获取到域名信息后，攻击者通过暴力破解或者专门的方法破解公司注册域名时使用的 E-mail 账号所对应的密码，更高级的攻击者甚至能够直接对 E-Mail 进行信息窃取。\",\"修改注册信息：当攻击者破解了 E-Mail 后，会利用相关的更改功能修改该域名的注册信息，包括域名拥有者信息，DNS 服务器信息等。\",\"使用 E-Mail 收发确认函：在修改完注册信息后，攻击者 E-Mail 在真正拥有者之前收到修改域名注册信息的相关确认信息，并回复确认修改文件，待网络公司恢复已成功修改信件后，攻击者便成功完成 DNS 劫持。\",\"怎么应对 DNS 劫持？\",\"直接通过 IP 地址访问网站，避开 DNS 劫持\",\"由于域名劫持往往只能在特定的网络范围内进行，因此一些高级用户可以通过网络设置让 DNS 指向正常的域名服务器以实现对目标网址的正常访问，例如计算机首选 DNS 服务器的地址固定为 8.8.8.8。\"]},\"613\":{\"h\":\"58.什么是 CSRF 攻击？如何避免？\",\"t\":[\"什么是 CSRF 攻击？\",\"CSRF，跨站请求伪造（英文全称是 Cross-site request forgery），是一种挟持用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。\",\"CSRF 是如何攻击的呢？\",\"来看一个例子：\",\"用户登陆银行，没有退出，浏览器包含了 用户 在银行的身份认证信息。\",\"攻击者将伪造的转账请求，包含在在帖子\",\"用户在银行网站保持登陆的情况下，浏览帖子\",\"将伪造的转账请求连同身份认证信息，发送到银行网站\",\"银行网站看到身份认证信息，以为就是 用户的合法操作，最后造成用户资金损失。\",\"怎么应对 CSRF 攻击呢？\",\"检查 Referer 字段\",\"HTTP 头中的 Referer 字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证 Referer 值来防御 CSRF 攻击。\",\"添加校验 token\",\"以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。\",\"敏感操作多重校验\",\"对一些敏感的操作，除了需要校验用户的认证信息，还可以通过邮箱确认、验证码确认这样的方式多重校验。\"]},\"614\":{\"h\":\"59.什么是 DoS、DDoS、DRDoS 攻击？\",\"t\":[\"DOS: (Denial of Service), 翻译过来就是拒绝服务, 一切能引起拒绝 行为的攻击都被称为 DOS 攻击。最常见的 DoS 攻击就有计算机网络宽带攻击、连通性攻击。\",\"DDoS: (Distributed Denial of Service)，翻译过来是分布式拒绝服务。是指处于不同位置的多个攻击者同时向一个或几个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器，并利用这些机器对受害者同时实施攻击。\",\"主要形式有流量攻击和资源耗尽攻击，常见的 DDoS 攻击有：SYN Flood、Ping of Death、ACK Flood、UDP Flood 等。\",\"DRDoS: (Distributed Reflection Denial of Service)，中文是分布式反射拒绝服务，该方式靠的是发送大量带有被害者 IP 地址的数据包给攻击主机，然后攻击主机对 IP 地址源做出大量回应，从而形成拒绝服务攻击。\",\"如何防范 DDoS?\",\"针对 DDoS 中的流量攻击，最直接的方法是增加带宽，理论上只要带宽大于攻击流量就可以了，但是这种方法成本非常高。在有充足带宽的前提下，我们应该尽量提升路由器、网卡、交换机等硬件设施的配置。\",\"针对资源耗尽攻击，我们可以升级主机服务器硬件，在网络带宽得到保证的前提下，使得服务器能够有效对抗海量的 SYN 攻击包。我们也可以安装专业的抗 DDoS 防火墙，从而对抗 SYN Flood 等流量型攻击。瓷碗，负载均衡，CDN 等技术都能有效对抗 DDos 攻击。\"]},\"615\":{\"h\":\"60.什么是 XSS 攻击，如何避免?\",\"t\":[\"XSS 攻击也是比较常见，XSS，叫跨站脚本攻击（Cross-Site Scripting），因为会与层叠样式表 (Cascading Style Sheets, CSS) 的缩写混淆，因此有人将跨站脚本攻击缩写为 XSS。它指的是恶意攻击者往 Web 页面里插入恶意 html 代码，当用户浏览网页的时候，嵌入其中 Web 里面的 html 代码会被执行，从而达到恶意攻击用户的特殊目的。\",\"XSS 攻击一般分三种类型：存储型 、反射型 、DOM 型 XSS\",\"XSS 是如何攻击的呢？\",\"简单说，XSS 的攻击方式就是想办法“教唆”用户的浏览器去执行一些这个网页中原本不存在的前端代码。\",\"拿反射型举个例子吧，流程图如下：\",\"攻击者构造出特殊的 URL，其中包含恶意代码。\",\"用户打开带有恶意代码的 URL 时，访问正常网站服务器\",\"网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。\",\"用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行，请求恶意服务器，发送用户数据\",\"攻击者就可以窃取用户的数据，以此冒充用户的行为，调用目标网站接口执行攻击者指定的操作。\",\"如何应对 XSS 攻击？\",\"对输入进行过滤，过滤标签等，只允许合法值。\",\"HTML 转义\",\"对于链接跳转，如<a href=\\\"xxx\\\" 等，要校验内容，禁止以 script 开头的非法链接。\",\"限制输入长度\"]},\"616\":{\"h\":\"61.对称加密与非对称加密有什么区别？\",\"t\":[\"对称加密：指加密和解密使用同一密钥，优点是运算速度较快，缺点是如何安全将密钥传输给另一方。常见的对称加密算法有：DES、AES 等。\",\"非对称加密：指的是加密和解密使用不同的密钥（即公钥和私钥）。公钥与私钥是成对存在的，如果用公钥对数据进行加密，只有对应的私钥才能解密。常见的非对称加密算法有 RSA。\"]},\"617\":{\"h\":\"62.RSA 和 AES 算法有什么区别？\",\"t\":[\"RSA\",\"采用非对称加密的方式，采用公钥进行加密，私钥解密的形式。其私钥长度一般较长，由于需要大数的乘幂求模等运算，其运算速度较慢，不合适大量数据文件加密。\",\"AES\",\"采用对称加密的方式，其秘钥长度最长只有 256 个比特，加密和解密速度较快，易于硬件实现。由于是对称加密，通信双方在进行数据传输前需要获知加密密钥。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"图文详解计算机网络面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"618\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"2.2 万字 80 张手绘图，详解 62 道计算机网络面试高频题（让天下没有难背的八股），面渣背会这些计算机网络八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/network.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"2.2 万字 80 张手绘图，详解 62 道计算机网络面试高频题（让天下没有难背的八股），面渣背会这些计算机网络八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"619\":{\"h\":\"\",\"t\":[\"大家好，我是二哥呀，今天给大家隆重推荐一位美团后端研发工程师（网名三分恶，二哥非常好的一位朋友）的面渣逆袭手册。\",\"请容许我花 1 分钟的时间介绍一下这份PDF手册，耗时近一年，每一篇都是数万字，几十张手绘图！接下来，给各位朋友介绍一下这份手册！\"]},\"620\":{\"h\":\"内容体系全面\",\"t\":[\"话不多说，先给大家看看，手册的内容结构：\",\"手册目前共有Java语言、Java框架、计算机基础、数据库、中间件 五大部分，涵盖了Java基础、Java集合、Java并发、JVM、Spring、MyBatis、计算机网络、操作系统、MySQL、Redis、RocketMQ、分布式、微服务 十三个章节，共有 1000 多页，可以说基本涵盖了面试的必问考点。\",\"而且手册的内容不是杂乱无章的，每一部分都是循序渐进，由浅入深，看看目录就知道了：\",\"成体系的知识才是最有价值的，这本手册你不仅可以把它当做一本面试题解，还可以当作学习指南，带着这本手册里的问题，相信你学习起来也是事半功倍。\"]},\"621\":{\"h\":\"图文并貌，深入浅出\",\"t\":[\"作者面试过很多次，也面过别人很多次，自己背八股背的时候苦哈哈，听别人背八股的时候也噎地够呛，所以作者在写面渣逆袭系列的时候，努力做到图文并茂，深入浅出，让大家带着理解去记忆面试题，带着亮点去回答面试题。\",\"大家都知道，图比文字更好理解、更好记忆，看过作者面渣逆袭系列的朋友应该都知道，作者经常是三十问，五十图，基本上做到了图比问题多，能用图说话就使劲肝图。\",\"比如这张HTTPS的工作流程图，足足画了一个多小时：\",\"作者还喜欢用一些有意思的比喻去讲解技术，努力让枯燥的知识点变得生动起来。\",\"比如，经典的四次挥手，很多朋友看完，直呼“满脑子都是分手”：\",\"比如，作者拿人的一生，比喻Spring Bean生命周期，有人说“泪目”：\",\"还有，直接让人有点yue，又有点兴奋，就像是拿“占着茅坑不拉屎”，“憋急了没坑位”来比喻内存泄露和内存溢出：\",\"……\",\"这样的例子还有很多，打开手册，你可以慢慢去发现。\"]},\"622\":{\"h\":\"持续迭代，不断完善\",\"t\":[\"这本册子目前的版本是1.0，也就意味着，它还有1.1、2.0、3.0……\",\"这本册子不是一揽子买卖，而是像一个产品一样，既持续修复bug、优化体验，又不断迭代新功能。\",\"作者会持续维护和更新这个册子，包括：\",\"“迭代新的功能”——分布式、微服务、Dubbo、Elasticsearch、数据结构与算法、系统设计……\",\"“修复现有的小Bug”——随时接受大家的反馈，精益求精，不断打磨内容……\",\"“优化用户体验”——优化答案、添加更多图解，后续还会推出在线版……\"]},\"623\":{\"h\":\"在线版阅读\",\"t\":[\"有些朋友喜欢在线版阅读，所以这里也安排上了。\",\"面试前必读系列！硬核理解版八股文，包括 Java 基础（JavaSE）、Java 集合框架、Java 并发编程（Java 多线程）、Java 虚拟机（JVM）、Spring、MySQL、Redis、MyBatis、操作系统、计算机网络、RocketMQ、分布式等等，助你拿到心仪 offer！\",\"面渣逆袭（Java 基础篇面试题八股文）必看👍\",\"面渣逆袭（Java 集合框架篇面试题八股文）必看👍\",\"面渣逆袭（Java 并发编程篇面试题八股文）必看👍\",\"面渣逆袭（Java 虚拟机篇面试题八股文）必看👍\",\"面渣逆袭（Spring面试题八股文）必看👍\",\"面渣逆袭（MySQL面试题八股文）必看👍\",\"面渣逆袭（Redis面试题八股文）必看👍\",\"面渣逆袭（MyBatis面试题八股文）必看👍\",\"面渣逆袭（操作系统面试题八股文）必看👍\",\"面渣逆袭（计算机网络面试题八股文）必看👍\",\"面渣逆袭（RocketMQ面试题八股文）必看👍\",\"面渣逆袭（分布式面试题八股文）必看👍\",\"面渣逆袭（微服务面试题八股文）必看👍\"]},\"624\":{\"h\":\"PDF版阅读\",\"t\":[\"有些朋友喜欢打印或者阅读 PDF 版本，这里也安排上了。先带大家预览一下这本册子：\",\"Java基础\",\"Java集合\",\"Java并发\",\"JVM\",\"Spring\",\"MyBatis\",\"计算机网络\",\"操作系统\",\"MySQL\",\"Redis\",\"RocketMQ\",\"分布式\",\"微服务\",\"吊大家胃口这么久，那么这本册子该如何获取呢？\",\"关注二哥的公众号：沉默王二 ，👇👇👇，回复 222即可无套路获取！\"]},\"625\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"大家好，我是二哥呀，今天给大家隆重推荐一位美团后端研发工程师（网名三分恶，二哥非常好的一位朋友）的面渣逆袭手册。 请容许我花 1 分钟的时间介绍一下这份PDF手册，耗时近一年，每一篇都是数万字，几十张手绘图！接下来，给各位朋友介绍一下这份手册！ 内容体系全面 话不多说，先给大家看看，手册的内容结构：\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/nixi.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"大家好，我是二哥呀，今天给大家隆重推荐一位美团后端研发工程师（网名三分恶，二哥非常好的一位朋友）的面渣逆袭手册。 请容许我花 1 分钟的时间介绍一下这份PDF手册，耗时近一年，每一篇都是数万字，几十张手绘图！接下来，给各位朋友介绍一下这份手册！ 内容体系全面 话不多说，先给大家看看，手册的内容结构：\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"626\":{\"h\":\"\",\"t\":[\"1 万字 51 张手绘图，详解 32 道操作系统面试高频题（让天下没有难背的八股），面渣背会这些 OS 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"627\":{\"h\":\"引论\"},\"628\":{\"h\":\"01、什么是操作系统？\",\"t\":[\"可以这么说，操作系统是一种运行在内核态的软件。\",\"它是应用程序和硬件之间的媒介，向应用程序提供硬件的抽象，以及管理硬件资源。\"]},\"629\":{\"h\":\"02、操作系统主要有哪些功能？\",\"t\":[\"操作系统最主要的功能：\",\"处理器（CPU）管理：CPU的管理和分配，主要指的是进程管理。\",\"内存管理：内存的分配和管理，主要利用了虚拟内存的方式。\",\"外存管理：外存（磁盘等）的分配和管理，将外存以文件的形式提供出去。\",\"I/O管理：对输入/输出设备的统一管理。\",\"除此之外，还有保证自身正常运行的健壮性管理，防止非法操作和入侵的安全性管理。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"630\":{\"h\":\"操作系统结构\"},\"631\":{\"h\":\"03、什么是内核？\",\"t\":[\"可以这么说，内核是一个计算机程序，它是操作系统的核心，提供了操作系统最核心的能力，可以控制操作系统中所有的内容。\"]},\"632\":{\"h\":\"04、什么是用户态和内核态？\",\"t\":[\"内核具有很⾼的权限，可以控制 cpu、内存、硬盘等硬件，出于权限控制的考虑，因此⼤多数操作系统，把内存分成了两个区域：\",\"内核空间，这个内存空间只有内核程序可以访问；\",\"⽤户空间，这个内存空间专⻔给应⽤程序使⽤，权限比较小；\",\"⽤户空间的代码只能访问⼀个局部的内存空间，⽽内核空间的代码可以访问所有内存空间。因此，当程序使⽤⽤户空间时，我们常说该程序在⽤户态执⾏，⽽当程序使内核空间时，程序则在内核态执⾏。\"]},\"633\":{\"h\":\"05、用户态和内核态是如何切换的？\",\"t\":[\"应⽤程序如果需要进⼊内核空间，就需要通过系统调⽤，来进入内核态：\",\"内核程序执⾏在内核态，⽤户程序执⾏在⽤户态。当应⽤程序使⽤系统调⽤时，会产⽣⼀个中断。发⽣中断后， CPU 会中断当前在执⾏的⽤户程序，转⽽跳转到中断处理程序，也就是开始执⾏内核程序。内核处理完后，主动触发中断，把 CPU 执⾏权限交回给⽤户程序，回到⽤户态继续⼯作。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"634\":{\"h\":\"进程和线程\"},\"635\":{\"h\":\"06、并行和并发有什么区别？\",\"t\":[\"并发就是在一段时间内，多个任务都会被处理；但在某一时刻，只有一个任务在执行。单核处理器做到的并发，其实是利用时间片的轮转，例如有两个进程A和B，A运行一个时间片之后，切换到B，B运行一个时间片之后又切换到A。因为切换速度足够快，所以宏观上表现为在一段时间内能同时运行多个程序。\",\"并行就是在同一时刻，有多个任务在执行。这个需要多核处理器才能完成，在微观上就能同时执行多条指令，不同的程序被放到不同的处理器上运行，这个是物理上的多个进程同时进行。\"]},\"636\":{\"h\":\"07、什么是进程上下文切换？\",\"t\":[\"对于单核单线程 CPU 而言，在某一时刻只能执行一条 CPU 指令。上下文切换 (Context Switch) 是一种将 CPU 资源从一个进程分配给另一个进程的机制。从用户角度看，计算机能够并行运行多个进程，这恰恰是操作系统通过快速上下文切换造成的结果。在切换的过程中，操作系统需要先存储当前进程的状态 (包括内存空间的指针，当前执行完的指令等等)，再读入下一个进程的状态，然后执行此进程。\"]},\"637\":{\"h\":\"08、进程有哪些状态？\",\"t\":[\"当一个进程开始运行时，它可能会经历下面这几种状态：\",\"上图中各个状态的意义：\",\"运⾏状态（Runing）：该时刻进程占⽤ CPU；\",\"就绪状态（Ready）：可运⾏，由于其他进程处于运⾏状态⽽暂时停⽌运⾏；\",\"阻塞状态（Blocked）：该进程正在等待某⼀事件发⽣（如等待输⼊/输出操作的完成）⽽暂时停⽌运⾏，这时，即使给它CPU控制权，它也⽆法运⾏；\",\"当然，进程还有另外两个基本状态：\",\"创建状态（new）：进程正在被创建时的状态；\",\"结束状态（Exit）：进程正在从系统中消失时的状态；\"]},\"638\":{\"h\":\"09、什么是僵尸进程？\",\"t\":[\"僵尸进程是已完成且处于终止状态，但在进程表中却仍然存在的进程。\",\"僵尸进程一般发生有父子关系的进程中，一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中。\"]},\"639\":{\"h\":\"10、什么是孤儿进程？\",\"t\":[\"一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程。孤儿进程将被 init 进程 (进程 ID 为 1 的进程) 所收养，并由 init 进程对它们完成状态收集工作。因为孤儿进程会被 init 进程收养，所以孤儿进程不会对系统造成危害。\"]},\"640\":{\"h\":\"11、进程有哪些调度算法？\",\"t\":[\"进程调度就是确定某一个时刻CPU运行哪个进程，常见的进程调度算法有：\",\"先来先服务\",\"非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。另外，对I/O密集型进程也不利，因为这种进程每次进行I/O操作之后又得重新排队。\",\"短作业优先\",\"非抢占式的调度算法，按估计运行时间最短的顺序进行调度。长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。\",\"优先级调度\",\"为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。\",\"时间片轮转\",\"将所有就绪进程按 先来先服务的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。\",\"时间片轮转算法的效率和时间片的大小有很大关系：因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。 而如果时间片过长，那么实时性就不能得到保证。\",\"最短剩余时间优先\",\"最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。\"]},\"641\":{\"h\":\"12、进程间通信有哪些方式？\",\"t\":[\"管道：管道可以理解成不同进程之间的对白，一方发声，一方接收，声音的介质可是是空气或者电缆，进程之间就可以通过管道，所谓的管道就是内核中的一串缓存，从管道的一端写入数据，就是缓存在了内核里，另一端读取，也是从内核中读取这段数据。\",\"管道可以分为两类：匿名管道和命名管道。匿名管道是单向的，只能在有亲缘关系的进程间通信；命名管道是双向的，可以实现本机任意两个进程通信。\",\"信号 ： 信号可以理解成一种电报，发送方发送内容，指定接收进程，然后发出特定的软件中断，操作系统接到中断请求后，找到接收进程，通知接收进程处理信号。\",\"比如kill -9 1050就表示给PID为1050的进程发送SIGKIL信号。Linux系统中常用信号：\",\"（1）SIGHUP：用户从终端注销，所有已启动进程都将收到该进程。系统缺省状态下对该信号的处理是终止进程。 （2）SIGINT：程序终止信号。程序运行过程中，按Ctrl+C键将产生该信号。 （3）SIGQUIT：程序退出信号。程序运行过程中，按Ctrl+\\\\键将产生该信号。 （4）SIGBUS和SIGSEGV：进程访问非法地址。 （5）SIGFPE：运算中出现致命错误，如除零操作、数据溢出等。 （6）SIGKILL：用户终止进程执行信号。shell下执行kill -9发送该信号。 （7）SIGTERM：结束进程信号。shell下执行kill 进程pid发送该信号。 （8）SIGALRM：定时器信号。 （9）SIGCLD：子进程退出信号。如果其父进程没有忽略该信号也没有处理该信号，则子进程退出后将形成僵尸进程。\",\"消息队列：消息队列就是保存在内核中的消息链表，包括Posix消息队列和System V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。\",\"共享内存：共享内存的机制，就是拿出⼀块虚拟地址空间来，映射到相同的物理内存中。这样这个进程写⼊的东西，另外的进程⻢上就能看到。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\",\"信号量：信号量我们可以理解成红绿灯，红灯行，绿灯停。它本质上是一个整数计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\",\"信号量表示资源的数量，控制信号量的⽅式有两种原⼦操作：\",\"⼀个是 P操作，这个操作会把信号量减去 1，相减后如果信号量 < 0，则表明资源已被占⽤，进程需阻塞等待；相减后如果信号量 >= 0，则表明还有资源可使⽤，进程可正常继续执⾏。\",\"另⼀个是 V操作，这个操作会把信号量加上 1，相加后如果信号量 <= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运⾏；相加后如果信号量 > 0，则表明当前没有阻塞中的进程；\",\"P 操作是⽤在进⼊共享资源之前，V 操作是⽤在离开共享资源之后，这两个操作是必须成对出现的。\",\"Socket：与其他通信机制不同的是，它可用于不同机器间的进程通信。\",\"优缺点：\",\"管道：简单；效率低，容量有限；\",\"消息队列：不及时，写入和读取需要用户态、内核态拷贝。\",\"共享内存区：能够很容易控制容量，速度快，但需要注意不同进程的同步问题。\",\"信号量：不能传递复杂消息，一般用来实现进程间的同步；\",\"信号：它是进程间通信的唯一异步机制。\",\"Socket：用于不同主机进程间的通信。\"]},\"642\":{\"h\":\"13、进程和线程的联系和区别？\",\"t\":[\"线程和进程的联系：\",\"线程是进程当中的⼀条执⾏流程。\",\"同⼀个进程内多个线程之间可以共享代码段、数据段、打开的⽂件等资源，但每个线程各⾃都有⼀套独⽴的寄存器和栈，这样可以确保线程的控制流是相对独⽴的。\",\"线程与进程的⽐较如下：\",\"调度：进程是资源（包括内存、打开的⽂件等）分配的单位，线程是 CPU 调度的单位；\",\"资源：进程拥有⼀个完整的资源平台，⽽线程只独享必不可少的资源，如寄存器和栈；\",\"拥有资源：线程同样具有就绪、阻塞、执⾏三种基本状态，同样具有状态之间的转换关系；\",\"系统开销：线程能减少并发执⾏的时间和空间开销——创建或撤销进程时，系统都要为之分配或回收系统资源，如内存空间，I/O设备等，OS所付出的开销显著大于在创建或撤销线程时的开销，进程切换的开销也远大于线程切换的开销。\"]},\"643\":{\"h\":\"14、线程上下文切换了解吗？\",\"t\":[\"这还得看线程是不是属于同⼀个进程：\",\"当两个线程不是属于同⼀个进程，则切换的过程就跟进程上下⽂切换⼀样；\",\"当两个线程是属于同⼀个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据；\",\"所以，线程的上下⽂切换相⽐进程，开销要⼩很多。\"]},\"644\":{\"h\":\"15、线程有哪些实现方式？\",\"t\":[\"主要有三种线程的实现⽅式：\",\"内核态线程实现：在内核空间实现的线程，由内核直接管理直接管理线程。\",\"⽤户态线程实现：在⽤户空间实现线程，不需要内核的参与，内核对线程无感知。\",\"混合线程实现：现代操作系统基本都是将两种方式结合起来使用。用户态的执行系统负责进程内部线程在非阻塞时的切换；内核态的操作系统负责阻塞线程的切换。即我们同时实现内核态和用户态线程管理。其中内核态线程数量较少，而用户态线程数量较多。每个内核态线程可以服务一个或多个用户态线程。\"]},\"645\":{\"h\":\"16、线程间如何同步？\",\"t\":[\"同步解决的多线程操作共享资源的问题，目的是不管线程之间的执行如何穿插，最后的结果都是正确的。\",\"我们前面知道线程和进程的关系：线程是进程当中的⼀条执⾏流程。所以说下面的一些同步机制不止针对线程，同样也可以针对进程。\",\"临界区：我们把对共享资源访问的程序片段称为临界区，我们希望这段代码是互斥的，保证在某时刻只能被一个线程执行，也就是说一个线程在临界区执行时，其它线程应该被阻止进入临界区。\",\"临界区不仅针对线程，同样针对进程。\",\"临界区同步的一些实现方式：\",\"1、锁\",\"使⽤加锁操作和解锁操作可以解决并发线程/进程的互斥问题。\",\"任何想进⼊临界区的线程，必须先执⾏加锁操作。若加锁操作顺利通过，则线程可进⼊临界区；在完成对临界资源的访问后再执⾏解锁操作，以释放该临界资源。\",\"加锁和解锁锁住的是什么呢？可以是临界区对象，也可以只是一个简单的互斥量，例如互斥量是0无锁，1表示加锁。\",\"根据锁的实现不同，可以分为忙等待锁和和⽆忙等待锁。\",\"忙等待锁和就是加锁失败的线程，会不断尝试获取锁，也被称为自旋锁，它会一直占用CPU。\",\"⽆忙等待锁就是加锁失败的线程，会进入阻塞状态，放弃CPU，等待被调度。\",\"2、信号量\",\"信号量是操作系统提供的⼀种协调共享资源访问的⽅法。\",\"通常信号量表示资源的数量，对应的变量是⼀个整型（ sem ）变量。\",\"另外，还有两个原⼦操作的系统调⽤函数来控制信号量的，分别是：\",\"P 操作：将 sem 减 1 ，相减后，如果 sem < 0 ，则进程/线程进⼊阻塞等待，否则继续，表明 P操作可能会阻塞；\",\"V 操作：将 sem 加 1 ，相加后，如果 sem <= 0 ，唤醒⼀个等待中的进程/线程，表明 V 操作不会阻塞；\",\"P 操作是⽤在进⼊临界区之前，V 操作是⽤在离开临界区之后，这两个操作是必须成对出现的。\"]},\"646\":{\"h\":\"17、什么是死锁？\",\"t\":[\"在两个或者多个并发线程中，如果每个线程持有某种资源，而又等待其它线程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组线程产生了死锁。通俗的讲就是两个或多个线程无限期的阻塞、相互等待的一种状态。\"]},\"647\":{\"h\":\"18、死锁产生有哪些条件？\",\"t\":[\"死锁产生需要同时满足四个条件：\",\"互斥条件：指线程对己经获取到的资源进行它性使用，即该资源同时只由一个线程占用。如果此时还有其它线程请求获取获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。\",\"请求并持有条件：指一个 线程己经持有了至少一个资源，但又提出了新的资源请求，而新资源己被其它线程占有，所以当前线程会被阻塞，但阻塞 的同时并不释放自己已经获取的资源。\",\"不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其它线程抢占，只有在自己使用完毕后才由自己释放该资源。\",\"环路等待条件：指在发生死锁时，必然存在一个线程——资源的环形链，即线程集合 {T0，T1，T2,…… ，Tn} 中 T0 正在等待一 T1 占用的资源，Tl1正在等待 T2用的资源，…… Tn 在等待己被 T0占用的资源。\"]},\"648\":{\"h\":\"19、如何避免死锁呢？\",\"t\":[\"产⽣死锁的有四个必要条件：互斥条件、持有并等待条件、不可剥夺条件、环路等待条件。\",\"避免死锁，破坏其中的一个就可以。\",\"消除互斥条件\",\"这个是没法实现，因为很多资源就是只能被一个线程占用，例如锁。\",\"消除请求并持有条件\",\"消除这个条件的办法很简单，就是一个线程一次请求其所需要的所有资源。\",\"消除不可剥夺条件\",\"占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可剥夺这个条件就破坏掉了。\",\"消除环路等待条件\",\"可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后就不存在环路了。\"]},\"649\":{\"h\":\"20、活锁和饥饿锁了解吗？\",\"t\":[\"饥饿锁：\",\"饥饿锁，这个饥饿指的是资源饥饿，某个线程一直等不到它所需要的资源，从而无法向前推进，就像一个人因为饥饿无法成长。\",\"活锁：\",\"在活锁状态下，处于活锁线程组里的线程状态可以改变，但是整个活锁组的线程无法推进。\",\"活锁可以用两个人过一条很窄的小桥来比喻：为了让对方先过，两个人都往旁边让，但两个人总是让到同一边。这样，虽然两个人的状态一直在变化，但却都无法往前推进。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"650\":{\"h\":\"内存管理\"},\"651\":{\"h\":\"21、什么是虚拟内存？\",\"t\":[\"我们实际的物理内存主要是主存，但是物理主存空间有限，所以一般现代操作系统都会想办法把一部分内存块放到磁盘中，用到的时候再装入主存，但是对用户程序而言，是不需要注意实际的物理内存的，为什么呢？因为有虚拟内存的机制。\",\"简单说，虚拟内存是操作系统提供的⼀种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。\",\"每个进程都有自己独立的地址空间，再由操作系统映射到到实际的物理内存。\",\"于是，这⾥就引出了两种地址的概念：\",\"程序所使⽤的内存地址叫做虚拟内存地址（Virtual Memory Address）\",\"实际存在硬件⾥⾯的空间地址叫物理内存地址（Physical Memory Address）。\"]},\"652\":{\"h\":\"22、什么是内存分段？\",\"t\":[\"程序是由若⼲个逻辑分段组成的，如可由代码分段、数据分段、栈段、堆段组成。不同的段是有不同的属性的，所以就⽤分段（Segmentation）的形式把这些段分离出来。\",\"分段机制下的虚拟地址由两部分组成，段号和段内偏移量。\",\"虚拟地址和物理地址通过段表映射，段表主要包括段号、段的界限。\",\"我们来看一个映射，虚拟地址：段3、段偏移量500 ----> 段基地址7000+段偏移量500 ----> 物理地址：8700+。\"]},\"653\":{\"h\":\"23、什么是内存分页？\",\"t\":[\"分⻚是把整个虚拟和物理内存空间切成⼀段段固定尺⼨的⼤⼩。这样⼀个连续并且尺⼨固定的内存空间，我们叫⻚（Page）。在 Linux 下，每⼀⻚的⼤⼩为 4KB 。\",\"访问分页系统中内存数据需要两次的内存访问 ：一次是从内存中访问页表，从中找到指定的物理页号，加上页内偏移得到实际物理地址，第二次就是根据第一次得到的物理地址访问内存取出数据。\"]},\"654\":{\"h\":\"24、多级页表知道吗？\",\"t\":[\"操作系统可能会有非常多进程，如果只是使用简单分页，可能导致的后果就是页表变得非常庞大。\",\"所以，引入了多级页表的解决方案。\",\"所谓的多级页表，就是把我们原来的单级页表再次分页，这里利用了局部性原理，除了顶级页表，其它级别的页表一来可以在需要的时候才被创建，二来内存紧张的时候还可以被置换到磁盘中。\"]},\"655\":{\"h\":\"25、什么是块表？\",\"t\":[\"同样利用了局部性原理，即在⼀段时间内，整个程序的执⾏仅限于程序中的某⼀部分。相应地，执⾏所访问的存储空间也局限于某个内存区域。\",\"利⽤这⼀特性，把最常访问的⼏个⻚表项存储到访问速度更快的硬件，于是计算机科学家们，就在 CPU 芯⽚中，加⼊了⼀个专⻔存放程序最常访问的⻚表项的 Cache，这个 Cache 就是 TLB（Translation Lookaside Buffer） ，通常称为⻚表缓存、转址旁路缓存、快表等。\"]},\"656\":{\"h\":\"26、分页和分段有什么区别？\",\"t\":[\"段是信息的逻辑单位，它是根据用户的需要划分的，因此段对用户是可见的 ；页是信息的物理单位，是为了管理主存的方便而划分的，对用户是透明的。\",\"段的大小不固定，有它所完成的功能决定；页的大小固定，由系统决定\",\"段向用户提供二维地址空间；页向用户提供的是一维地址空间\",\"段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制。\"]},\"657\":{\"h\":\"27、什么是交换空间？\",\"t\":[\"操作系统把物理内存(Physical RAM)分成一块一块的小内存，每一块内存被称为页(page)。当内存资源不足时，Linux把某些页的内容转移至磁盘上的一块空间上，以释放内存空间。磁盘上的那块空间叫做交换空间(swap space),而这一过程被称为交换(swapping)。物理内存和交换空间的总容量就是虚拟内存的可用容量。\",\"用途：\",\"物理内存不足时一些不常用的页可以被交换出去，腾给系统。\",\"程序启动时很多内存页被用来初始化，之后便不再需要，可以交换出去。\"]},\"658\":{\"h\":\"28、页面置换算法有哪些？\",\"t\":[\"在分页系统里，一个虚拟的页面可能在主存里，也可能在磁盘中，如果CPU发现虚拟地址对应的物理页不在主存里，就会产生一个缺页中断，然后从磁盘中把该页调入主存中。\",\"如果内存里没有空间，就需要从主存里选择一个页面来置换。\",\"常见的页面置换算法：\",\"最佳⻚⾯置换算法（OPT）\",\"最佳⻚⾯置换算法是一个理想的算法，基本思路是，置换在未来最⻓时间不访问的⻚⾯。\",\"所以，该算法实现需要计算内存中每个逻辑⻚⾯的下⼀次访问时间，然后⽐较，选择未来最⻓时间不访问的⻚⾯。\",\"但这个算法是无法实现的，因为当缺页中断发生时，操作系统无法知道各个页面下一次将在什么时候被访问。\",\"先进先出置换算法（FIFO）\",\"既然我们⽆法预知⻚⾯在下⼀次访问前所需的等待时间，那可以选择在内存驻留时间很⻓的⻚⾯进⾏中置换，这个就是「先进先出置换」算法的思想。\",\"FIFO的实现机制是使用链表将所有在内存的页面按照进入时间的早晚链接起来，然后每次置换链表头上的页面就行了，新加进来的页面则挂在链表的末端。\",\"最近最久未使⽤的置换算法（LRU）\",\"最近最久未使⽤（LRU）的置换算法的基本思路是，发⽣缺⻚时，选择最⻓时间没有被访问的⻚⾯进⾏置换，也就是说，该算法假设已经很久没有使⽤的⻚⾯很有可能在未来较⻓的⼀段时间内仍然不会被使⽤。\",\"这种算法近似最优置换算法，最优置换算法是通过「未来」的使⽤情况来推测要淘汰的⻚⾯，⽽ LRU 则是通过历史的使⽤情况来推测要淘汰的⻚⾯。\",\"LRU 在理论上是可以实现的，但代价很⾼。为了完全实现 LRU，需要在内存中维护⼀个所有⻚⾯的链表，最近最多使⽤的⻚⾯在表头，最近最少使⽤的⻚⾯在表尾。\",\"困难的是，在每次访问内存时都必须要更新整个链表。在链表中找到⼀个⻚⾯，删除它，然后把它移动到表头是⼀个⾮常费时的操作。\",\"所以，LRU 虽然看上去不错，但是由于开销⽐较⼤，实际应⽤中⽐较少使⽤。\",\"时钟页面置换算法\",\"这个算法的思路是，把所有的⻚⾯都保存在⼀个类似钟⾯的环形链表中，⼀个表针指向最⽼的⻚⾯。\",\"当发⽣缺⻚中断时，算法⾸先检查表针指向的⻚⾯：\",\"如果它的访问位位是 0 就淘汰该⻚⾯，并把新的⻚⾯插⼊这个位置，然后把表针前移⼀个位置；\",\"如果访问位是 1 就清除访问位，并把表针前移⼀个位置，重复这个过程直到找到了⼀个访问位为 0 的⻚⾯为⽌；\",\"最不常⽤置换算法\",\"最不常用算法（LFU），当发⽣缺⻚中断时，选择访问次数最少的那个⻚⾯，将其置换。\",\"它的实现⽅式是，对每个⻚⾯设置⼀个「访问计数器」，每当⼀个⻚⾯被访问时，该⻚⾯的访问计数器就累加 1。在发⽣缺⻚中断时，淘汰计数器值最⼩的那个⻚⾯。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"659\":{\"h\":\"文件\"},\"660\":{\"h\":\"29、硬链接和软链接有什么区别？\",\"t\":[\"硬链接就是在目录下创建一个条目，记录着文件名与 inode 编号，这个 inode 就是源文件的 inode。删除任意一个条目，文件还是存在，只要引用数量不为 0。但是硬链接有限制，它不能跨越文件系统，也不能对目录进行链接。\",\"软链接相当于重新创建⼀个⽂件，这个⽂件有独⽴的inode，但是这个⽂件的内容是另外⼀个⽂件的路径，所以访问软链接的时候，实际上相当于访问到了另外⼀个⽂件，所以软链接是可以跨⽂件系统的，甚⾄⽬标⽂件被删除了，链接⽂件还是在的，只不过打不开指向的文件了而已。\"]},\"661\":{\"h\":\"IO\"},\"662\":{\"h\":\"30、零拷贝了解吗？\",\"t\":[\"假如需要文件传输，使用传统I/O，数据读取和写入是用户空间到内核空间来回赋值，而内核空间的数据是通过操作系统的I/O接口从磁盘读取或者写入，这期间发生了多次用户态和内核态的上下文切换，以及多次数据拷贝。\",\"为了提升I/O性能，就需要减少用户态与内核态的上下文切换和内存拷贝的次数。\",\"这就用到了我们零拷贝的技术，零拷贝技术实现主要有两种：\",\"mmap + write\",\"mmap() 系统调⽤函数会直接把内核缓冲区⾥的数据「映射」到⽤户空间，这样，操作系统内核与⽤户空间就不需要再进⾏任何的数据拷⻉操作。\",\"sendfile\",\"在 Linux 内核版本 2.1 中，提供了⼀个专⻔发送⽂件的系统调⽤函数 sendfile() 。\",\"⾸先，它可以替代前⾯的 read() 和 write() 这两个系统调⽤，这样就可以减少⼀次系统调⽤，也就减少了 2 次上下⽂切换的开销。\",\"其次，该系统调⽤，可以直接把内核缓冲区⾥的数据拷⻉到 socket 缓冲区⾥，不再拷⻉到⽤户态，这样就只有 2 次上下⽂切换，和 3 次数据拷⻉。\",\"很多开源项目如Kafka、RocketMQ都采用了零拷贝技术来提升IO效率。\"]},\"663\":{\"h\":\"31、聊聊阻塞与⾮阻塞 IO、 同步与异步IO？\",\"t\":[\"阻塞I/O\",\"先来看看阻塞I/O，当⽤户程序执⾏ read ，线程会被阻塞，⼀直等到内核数据准备好，并把数据从内核缓冲区拷⻉到应⽤程序的缓冲区中，当拷⻉过程完成， read 才会返回。\",\"注意，阻塞等待的是内核数据准备好和数据从内核态拷⻉到⽤户态这两个过程。\",\"非阻塞I/O\",\"⾮阻塞的 read 请求在数据未准备好的情况下⽴即返回，可以继续往下执⾏，此时应⽤程序不断轮询内核，直到数据准备好，内核将数据拷⻉到应⽤程序缓冲区， read 调⽤才可以获取到结果。\",\"基于非阻塞的I/O多路复用\",\"我们上面的非阻塞I/O有一个问题，什么问题呢？应用程序要一直轮询，这个过程没法干其它事情，所以引入了I/O多路复⽤技术。\",\"当内核数据准备好时，以事件通知应⽤程序进⾏操作。\",\"注意：⽆论是阻塞 I/O、还是⾮阻塞 I/O、非阻塞I/O多路复用，都是同步调⽤。因为它们在read调⽤时，内核将数据从内核空间拷⻉到应⽤程序空间，过程都是需要等待的，也就是说这个过程是同步的，如果内核实现的拷⻉效率不⾼，read调⽤就会在这个同步过程中等待⽐较⻓的时间。\",\"异步I/O\",\"真正的异步I/O 是内核数据准备好和数据从内核态拷⻉到⽤户态这两个过程都不⽤等待。\",\"发起 aio_read 之后，就⽴即返回，内核⾃动将数据从内核空间拷⻉到应⽤程序空间，这个拷⻉过程同样是异步的，内核⾃动完成的，和前⾯的同步操作不⼀样，应⽤程序并不需要主动发起拷⻉动作。\",\"拿例子理解几种I/O模型\",\"老三关注了很多UP主，有些UP主是老鸽子，到了更新的时间：\",\"阻塞I/O就是，老三不干别的，就干等着，盯着UP的更新。\",\"非阻塞I/O就是，老三发现UP没更，就去喝个茶什么的，过一会儿来盯一次，一直等到UP更新。\",\"基于⾮阻塞的 I/O 多路复⽤好⽐，老三发现UP没更，就去干别的，过了一会儿B站推送消息了，老三一看，有很多条，就去翻动态，看看等的UP是不是更新了。\",\"异步I/O就是，老三说UP你该更了，UP赶紧爆肝把视频做出来，然后把视频亲自呈到老三面前，这个过程不用等待。\"]},\"664\":{\"h\":\"32、详细讲一讲I/O多路复用？\",\"t\":[\"我们先了解什么是I/O多路复用？\",\"我们在传统的I/O模型中，如果服务端需要支持多个客户端，我们可能要为每个客户端分配一个进程/线程。\",\"不管是基于重一点的进程模型，还是轻一点的线程模型，假如连接多了，操作系统是扛不住的。\",\"所以就引入了I/O多路复用 技术。\",\"简单说，就是一个进程/线程维护多个Socket，这个多路复用就是多个连接复用一个进程/线程。\",\"我们来看看I/O多路复用三种实现机制：\",\"select\",\"select 实现多路复⽤的⽅式是：\",\"将已连接的 Socket 都放到⼀个⽂件描述符集合fd_set，然后调⽤ select 函数将fd_set集合拷⻉到内核⾥，让内核来检查是否有⽹络事件产⽣，检查的⽅式很粗暴，就是通过遍历fd_set的⽅式，当检查到有事件产⽣后，将此 Socket 标记为可读或可写， 接着再把整个fd_set拷⻉回⽤户态⾥，然后⽤户态还需要再通过遍历的⽅法找到可读或可写的 Socket，再对其处理。\",\"select 使⽤固定⻓度的 BitsMap，表示⽂件描述符集合，⽽且所⽀持的⽂件描述符的个数是有限制的，在Linux 系统中，由内核中的 FD_SETSIZE 限制， 默认最⼤值为 1024 ，只能监听 0~1023 的⽂件描述符。\",\"select机制的缺点：\",\"（1）每次调用select，都需要把fd_set集合从用户态拷贝到内核态，如果fd_set集合很大时，那这个开销也很大，比如百万连接却只有少数活跃连接时这样做就太没有效率。\",\"（2）每次调用select都需要在内核遍历传递进来的所有fd_set，如果fd_set集合很大时，那这个开销也很大。\",\"（3）为了减少数据拷贝带来的性能损坏，内核对被监控的fd_set集合大小做了限制，一般为1024，如果想要修改会比较麻烦，可能还需要编译内核。\",\"（4）每次调用select之前都需要遍历设置监听集合，重复工作。\",\"poll\",\"poll 不再⽤ BitsMap 来存储所关注的⽂件描述符，取⽽代之⽤动态数组，以链表形式来组织，突破了select 的⽂件描述符个数限制，当然还会受到系统⽂件描述符限制。\",\"但是 poll 和 select 并没有太⼤的本质区别，都是使⽤线性结构存储进程关注的Socket集合，因此都需要遍历⽂件描述符集合来找到可读或可写的Socke，时间复杂度为O(n)，⽽且也需要在⽤户态与内核态之间拷⻉⽂件描述符集合，这种⽅式随着并发数上来，性能的损耗会呈指数级增⻓。\",\"epoll\",\"epoll 通过两个⽅⾯，很好解决了 select/poll 的问题。\",\"第⼀点，epoll 在内核⾥使⽤红⿊树来跟踪进程所有待检测的⽂件描述字，把需要监控的 socket 通过epoll_ctl() 函数加⼊内核中的红⿊树⾥，红⿊树是个⾼效的数据结构，增删查⼀般时间复杂度是O(logn) ，通过对这棵⿊红树进⾏操作，这样就不需要像 select/poll 每次操作时都传⼊整个 socket 集合，只需要传⼊⼀个待检测的 socket，减少了内核和⽤户空间⼤量的数据拷⻉和内存分配。\",\"第⼆点， epoll 使⽤事件驱动的机制，内核⾥维护了⼀个链表来记录就绪事件，当某个 socket 有事件发⽣时，通过回调函数，内核会将其加⼊到这个就绪事件列表中，当⽤户调⽤ epoll_wait() 函数时，只会返回有事件发⽣的⽂件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，⼤⼤提⾼了检测的效率。\",\"epoll 的⽅式即使监听的 Socket 数量越多的时候，效率不会⼤幅度降低，能够同时监听的 Socket 的数⽬也⾮常的多了，上限就为系统定义的进程打开的最⼤⽂件描述符个数。因⽽，epoll被称为解决C10K问题的利器。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"图文详解操作系统面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"665\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1 万字 51 张手绘图，详解 32 道操作系统面试高频题（让天下没有难背的八股），面渣背会这些 OS 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/os.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1 万字 51 张手绘图，详解 32 道操作系统面试高频题（让天下没有难背的八股），面渣背会这些 OS 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"666\":{\"h\":\"\",\"t\":[\"1.9 万字 97 张手绘图，详解 53 道 Redis 面试高频题（让天下没有难背的八股），面渣背会这些 Redis 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"667\":{\"h\":\"基础\"},\"668\":{\"h\":\"1.说说什么是Redis?\",\"t\":[\"Redis是一种基于键值对（key-value）的NoSQL数据库。\",\"比一般键值对数据库强大的地方，Redis中的value支持string（字符串）、hash（哈希）、 list（列表）、set（集合）、zset（有序集合）、Bitmaps（位图）、 HyperLogLog、GEO（地理信息定位）等多种数据结构，因此 Redis可以满足很多的应用场景。\",\"而且因为Redis会将所有数据都存放在内存中，所以它的读写性能非常出色。\",\"不仅如此，Redis还可以将内存的数据利用快照和日志的形式保存到硬盘上，这样在发生类似断电或者机器故障的时候，内存中的数据不会“丢失”。\",\"除了上述功能以外，Redis还提供了键过期、发布订阅、事务、流水线、Lua脚本等附加功能。\",\"总之，Redis是一款强大的性能利器。\"]},\"669\":{\"h\":\"2.Redis可以用来干什么？\",\"t\":[\"缓存\",\"这是Redis应用最广泛地方，基本所有的Web应用都会使用Redis作为缓存，来降低数据源压力，提高响应速度。 \",\"计数器 Redis天然支持计数功能，而且计数性能非常好，可以用来记录浏览量、点赞量等等。\",\"排行榜 Redis提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。\",\"社交网络 赞/踩、粉丝、共同好友/喜好、推送、下拉刷新。\",\"消息队列 Redis提供了发布订阅功能和阻塞队列的功能，可以满足一般消息队列功能。\",\"分布式锁 分布式环境下，利用Redis实现分布式锁，也是Redis常见的应用。\",\"Redis的应用一般会结合项目去问，以一个电商项目的用户服务为例：\",\"Token存储：用户登录成功之后，使用Redis存储Token\",\"登录失败次数计数：使用Redis计数，登录失败超过一定次数，锁定账号\",\"地址缓存：对省市区数据的缓存\",\"分布式锁：分布式环境下登录、注册等操作加分布式锁\",\"……\"]},\"670\":{\"h\":\"3.Redis 有哪些数据结构？\",\"t\":[\" Redis有五种基本数据结构。\",\"string\",\"字符串最基础的数据结构。字符串类型的值实际可以是字符串（简单的字符串、复杂的字符串（例如JSON、XML））、数字 （整数、浮点数），甚至是二进制（图片、音频、视频），但是值最大不能超过512MB。\",\"字符串主要有以下几个典型使用场景：\",\"缓存功能\",\"计数\",\"共享Session\",\"限速\",\"hash\",\"哈希类型是指键值本身又是一个键值对结构。\",\"哈希主要有以下典型应用场景：\",\"缓存用户信息\",\"缓存对象\",\"list\",\"列表（list）类型是用来存储多个有序的字符串。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色\",\"列表主要有以下几种使用场景：\",\"消息队列\",\"文章列表\",\"set\",\"集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的。\",\"集合主要有如下使用场景：\",\"标签（tag）\",\"共同关注\",\"sorted set\",\"有序集合中的元素可以排序。但是它和列表使用索引下标作为排序依据不同的是，它给每个元素设置一个权重（score）作为排序的依据。\",\"有序集合主要应用场景：\",\"用户点赞统计\",\"用户排序\"]},\"671\":{\"h\":\"4.Redis为什么快呢？\",\"t\":[\"Redis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来说，性能是MySQL的⼏⼗倍。速度快的原因主要有⼏点：\",\"完全基于内存操作\",\"使⽤单线程，避免了线程切换和竞态产生的消耗\",\"基于⾮阻塞的IO多路复⽤机制\",\"C语⾔实现，优化过的数据结构，基于⼏种基础的数据结构，redis做了⼤量的优化，性能极⾼ \"]},\"672\":{\"h\":\"5.能说一下I/O多路复用吗？\",\"t\":[\"引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择：\",\"第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。\",\"第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。 这种类似于为每一个用户创建一个进程或者- 线程处理连接。\",\"第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。\",\"第一种就是阻塞IO模型，第三种就是I/O复用模型。\",\"Linux系统有三种方式实现IO多路复用：select、poll和epoll。\",\"例如epoll方式是将用户socket对应的fd注册进epoll，然后epoll帮你监听哪些socket上有消息到达，这样就避免了大量的无用操作。此时的socket应该采用非阻塞模式。\",\"这样，整个过程只在进行select、poll、epoll这些调用的时候才会阻塞，收发客户消息是不会阻塞的，整个进程或者线程就被充分利用起来，这就是事件驱动，所谓的reactor模式。\"]},\"673\":{\"h\":\"6. Redis为什么早期选择单线程？\",\"t\":[\"官方解释：https://redis.io/topics/faq\",\" 官方FAQ表示，因为Redis是基于内存的操作，CPU成为Redis的瓶颈的情况很少见，Redis的瓶颈最有可能是内存的大小或者网络限制。\",\"如果想要最大程度利用CPU，可以在一台机器上启动多个Redis实例。\",\"PS：网上有这样的回答，吐槽官方的解释有些敷衍，其实就是历史原因，开发者嫌多线程麻烦，后来这个CPU的利用问题就被抛给了使用者。\",\"同时FAQ里还提到了， Redis 4.0 之后开始变成多线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 Key 的删除等等。\"]},\"674\":{\"h\":\"7.Redis6.0使用多线程是怎么回事?\",\"t\":[\"Redis不是说用单线程的吗？怎么6.0成了多线程的？\",\"Redis6.0的多线程是用多线程来处理数据的读写和协议解析，但是Redis执行命令还是单线程的。\",\" 这样做的⽬的是因为Redis的性能瓶颈在于⽹络IO⽽⾮CPU，使⽤多线程能提升IO读写的效率，从⽽整体提⾼Redis的性能。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"675\":{\"h\":\"持久化\"},\"676\":{\"h\":\"8.Redis持久化⽅式有哪些？有什么区别？\",\"t\":[\"Redis持久化⽅案分为RDB和AOF两种。 \",\"RDB\",\"RDB持久化是把当前进程数据生成快照保存到硬盘的过程，触发RDB持久化过程分为手动触发和自动触发。\",\"RDB⽂件是⼀个压缩的⼆进制⽂件，通过它可以还原某个时刻数据库的状态。由于RDB⽂件是保存在硬盘上的，所以即使Redis崩溃或者退出，只要RDB⽂件存在，就可以⽤它来恢复还原数据库的状态。\",\"手动触发分别对应save和bgsave命令: \",\"save命令：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。\",\"bgsave命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。\",\"以下场景会自动触发RDB持久化：\",\"使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。\",\"如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点\",\"执行debug reload命令重新加载Redis时，也会自动触发save操作\",\"默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。\",\"AOF\",\"AOF（append only file）持久化：以独立日志的方式记录每次写命令， 重启时再重新执行AOF文件中的命令达到恢复数据的目的。AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式。\",\"AOF的工作流程操作：命令写入 （append）、文件同步（sync）、文件重写（rewrite）、重启加载 （load） 流程如下：\",\"1）所有的写入命令会追加到aof_buf（缓冲区）中。\",\"2）AOF缓冲区根据对应的策略向硬盘做同步操作。\",\"3）随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩 的目的。\",\"4）当Redis服务器重启时，可以加载AOF文件进行数据恢复。\"]},\"677\":{\"h\":\"9.RDB 和 AOF 各自有什么优缺点？\",\"t\":[\"RDB | 优点\",\"只有一个紧凑的二进制文件 dump.rdb，非常适合备份、全量复制的场景。\",\"容灾性好，可以把RDB文件拷贝道远程机器或者文件系统张，用于容灾恢复。\",\"恢复速度快，RDB恢复数据的速度远远快于AOF的方式\",\"RDB | 缺点\",\"实时性低，RDB 是间隔一段时间进行持久化，没法做到实时持久化/秒级持久化。如果在这一间隔事件发生故障，数据会丢失。\",\"存在兼容问题，Redis演进过程存在多个格式的RDB版本，存在老版本Redis无法兼容新版本RDB的问题。\",\"AOF | 优点\",\"实时性好，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次命令操作就记录到 aof 文件中一次。\",\"通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。\",\"AOF | 缺点\",\"AOF 文件比 RDB 文件大，且 恢复速度慢。\",\"数据集大 的时候，比 RDB 启动效率低。\"]},\"678\":{\"h\":\"10.RDB和AOF如何选择？\",\"t\":[\"一般来说， 如果想达到足以媲美数据库的 数据安全性，应该 同时使用两种持久化功能。在这种情况下，当 Redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。\",\"如果 可以接受数分钟以内的数据丢失，那么可以 只使用 RDB 持久化。\",\"有很多用户都只使用 AOF 持久化，但并不推荐这种方式，因为定时生成 RDB 快照（snapshot）非常便于进行数据备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快，除此之外，使用 RDB 还可以避免 AOF 程序的 bug。\",\"如果只需要数据在服务器运行的时候存在，也可以不使用任何持久化方式。\"]},\"679\":{\"h\":\"11.Redis的数据恢复？\",\"t\":[\"当Redis发生了故障，可以从RDB或者AOF中恢复数据。\",\"恢复的过程也很简单，把RDB或者AOF文件拷贝到Redis的数据目录下，如果使用AOF恢复，配置文件开启AOF，然后启动redis-server即可。 \",\"Redis 启动时加载数据的流程：\",\"AOF持久化开启且存在AOF文件时，优先加载AOF文件。\",\"AOF关闭或者AOF文件不存在时，加载RDB文件。\",\"加载AOF/RDB文件成功后，Redis启动成功。\",\"AOF/RDB文件存在错误时，Redis启动失败并打印错误信息。\"]},\"680\":{\"h\":\"12.Redis 4.0 的混合持久化了解吗？\",\"t\":[\"重启 Redis 时，我们很少使用 RDB 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。\",\"Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。将 rdb 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是 自持久化开始到持久化结束 的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小： \",\"于是在 Redis 重启的时候，可以先加载 rdb 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"681\":{\"h\":\"高可用\",\"t\":[\"Redis保证高可用主要有三种方式：主从、哨兵、集群。\"]},\"682\":{\"h\":\"13.主从复制了解吗？\",\"t\":[\"主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 主节点(master)，后者称为 从节点(slave)。且数据的复制是 单向 的，只能由主节点到从节点。Redis 主从复制支持 主从同步 和 从从同步 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。\",\"主从复制主要的作用?\",\"数据冗余： 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。\",\"故障恢复： 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 (实际上是一种服务的冗余)。\",\"负载均衡： 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 （即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。\",\"高可用基石： 除了上述作用以外，主从复制还是哨兵和集群能够实施的 基础，因此说主从复制是 Redis 高可用的基础。\"]},\"683\":{\"h\":\"14.Redis主从有几种常见的拓扑结构？\",\"t\":[\"Redis的复制拓扑结构可以支持单层或多层复制关系，根据拓扑复杂性可以分为以下三种：一主一从、一主多从、树状主从结构。\",\"1.一主一从结构\",\"一主一从结构是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持。 2.一主多从结构\",\"一主多从结构（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离（见图6-5）。对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。 3.树状主从结构\",\"树状主从结构（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量。 \"]},\"684\":{\"h\":\"15.Redis的主从复制原理了解吗？\",\"t\":[\"Redis主从复制的工作流程大概可以分为如下几步： \",\"保存主节点（master）信息 这一步只是保存主节点信息，保存主节点的ip和port。\",\"主从建立连接 从节点（slave）发现新的主节点后，会尝试和主节点建立网络连接。\",\"发送ping命令 连接建立成功后从节点发送ping请求进行首次通信，主要是检测主从之间网络套接字是否可用、主节点当前是否可接受处理命令。\",\"权限验证 如果主节点要求密码验证，从节点必须正确的密码才能通过验证。\",\"同步数据集 主从复制连接正常通信后，主节点会把持有的数据全部发送给从节点。\",\"命令持续复制 接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。\"]},\"685\":{\"h\":\"16.说说主从数据同步的方式？\",\"t\":[\"Redis在2.8及以上版本使用psync命令完成主从数据同步，同步过程分为：全量复制和部分复制。\",\"全量复制 一般用于初次复制场景，Redis早期支持的复制功能只有全量复制，它会把主节点全部数据一次性发送给从节点，当数据量较大时，会对主从节点和网络造成很大的开销。\",\"全量复制的完整运行流程如下： \",\"发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行ID，所以发送psync-1。\",\"主节点根据psync-1解析出当前为全量复制，回复+FULLRESYNC响应。\",\"从节点接收主节点的响应数据保存运行ID和偏移量offset\",\"主节点执行bgsave保存RDB文件到本地\",\"主节点发送RDB文件给从节点，从节点把接收的RDB文件保存在本地并直接作为从节点的数据文件\",\"对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据一致性。\",\"从节点接收完主节点传送来的全部数据后会清空自身旧数据\",\"从节点清空数据后开始加载RDB文件\",\"从节点成功加载完RDB后，如果当前节点开启了AOF持久化功能， 它会立刻做bgrewriteaof操作，为了保证全量复制后AOF持久化文件立刻可用。\",\"部分复制 部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施， 使用psync{runId}{offset}命令实现。当从节点（slave）正在复制主节点 （master）时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向 主节点要求补发丢失的命令数据，如果主节点的复制积压缓冲区内存在这部分数据则直接发送给从节点，这样就可以保持主从节点复制的一致性。 \",\"当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点故障并中断复制连接\",\"主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存1MB。\",\"当主从节点网络恢复后，从节点会再次连上主节点\",\"当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当作psync参数发送给主节点，要求进行部分复制操作。\",\"主节点接到psync命令后首先核对参数runId是否与自身一致，如果一 致，说明之前复制的是当前主节点；之后根据参数offset在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送+CONTINUE响应，表示可以进行部分复制。\",\"主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。\"]},\"686\":{\"h\":\"17.主从复制存在哪些问题呢？\",\"t\":[\"主从复制虽好，但也存在一些问题：\",\"一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预。\",\"主节点的写能力受到单机的限制。\",\"主节点的存储能力受到单机的限制。\",\"第一个问题是Redis的高可用问题，第二、三个问题属于Redis的分布式问题。\"]},\"687\":{\"h\":\"18.Redis Sentinel（哨兵）了解吗？\",\"t\":[\"主从复制存在一个问题，没法完成自动故障转移。所以我们需要一个方案来完成自动故障转移，它就是Redis Sentinel（哨兵）。\",\"Redis Sentinel ，它由两部分组成，哨兵节点和数据节点：\",\"哨兵节点： 哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的 Redis 节点，不存储数据，对数据节点进行监控。\",\"数据节点： 主节点和从节点都是数据节点；\",\"在复制的基础上，哨兵实现了 自动化的故障恢复 功能，下面是官方对于哨兵功能的描述：\",\"监控（Monitoring）： 哨兵会不断地检查主节点和从节点是否运作正常。\",\"自动故障转移（Automatic failover）： 当 主节点 不能正常工作时，哨兵会开始 自动故障转移操作，它会将失效主节点的其中一个 从节点升级为新的主节点，并让其他从节点改为复制新的主节点。\",\"配置提供者（Configuration provider）： 客户端在初始化时，通过连接哨兵来获得当前 Redis 服务的主节点地址。\",\"通知（Notification）： 哨兵可以将故障转移的结果发送给客户端。\",\"其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移。而配置提供者和通知功能，则需要在与客户端的交互中才能体现。\"]},\"688\":{\"h\":\"19.Redis Sentinel（哨兵）实现原理知道吗？\",\"t\":[\"哨兵模式是通过哨兵节点完成对数据节点的监控、下线、故障转移。 \",\"定时监控Redis Sentinel通过三个定时监控任务完成对各个节点发现和监控： \",\"每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构\",\"每隔2秒，每个Sentinel节点会向Redis数据节点的__sentinel__：hello 频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息\",\"每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达\",\"主观下线和客观下线 主观下线就是哨兵节点认为某个节点有问题，客观下线就是超过一定数量的哨兵节点认为主节点有问题。 \",\"主观下线 每个Sentinel节点会每隔1秒对主节点、从节点、其他Sentinel节点发送ping命令做心跳检测，当这些节点超过 down-after-milliseconds没有进行有效回复，Sentinel节点就会对该节点做失败判定，这个行为叫做主观下线。\",\"客观下线 当Sentinel主观下线的节点是主节点时，该Sentinel节点会通过sentinel is- master-down-by-addr命令向其他Sentinel节点询问对主节点的判断，当超过 <quorum>个数，Sentinel节点认为主节点确实有问题，这时该Sentinel节点会做出客观下线的决定\",\"领导者Sentinel节点选举 Sentinel节点之间会做一个领导者选举的工作，选出一个Sentinel节点作为领导者进行故障转移的工作。Redis使用了Raft算法实现领导者选举。\",\"故障转移\",\"领导者选举出的Sentinel节点负责故障转移，过程如下： \",\"在从节点列表中选出一个节点作为新的主节点，这一步是相对复杂一些的一步\",\"Sentinel领导者节点会对第一步选出来的从节点执行slaveof no one命令让其成为主节点\",\"Sentinel领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点\",\"Sentinel节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点\"]},\"689\":{\"h\":\"20.领导者Sentinel节点选举了解吗？\",\"t\":[\"Redis使用了Raft算法实 现领导者选举，大致流程如下： \",\"每个在线的Sentinel节点都有资格成为领导者，当它确认主节点主观 下线时候，会向其他Sentinel节点发送sentinel is-master-down-by-addr命令， 要求将自己设置为领导者。\",\"收到命令的Sentinel节点，如果没有同意过其他Sentinel节点的sentinel is-master-down-by-addr命令，将同意该请求，否则拒绝。\",\"如果该Sentinel节点发现自己的票数已经大于等于max（quorum， num（sentinels）/2+1），那么它将成为领导者。\",\"如果此过程没有选举出领导者，将进入下一次选举。\"]},\"690\":{\"h\":\"21.新的主节点是怎样被挑选出来的？\",\"t\":[\"选出新的主节点，大概分为这么几步： \",\"过滤：“不健康”（主观下线、断线）、5秒内没有回复过Sentinel节 点ping响应、与主节点失联超过down-after-milliseconds*10秒。\",\"选择slave-priority（从节点优先级）最高的从节点列表，如果存在则返回，不存在则继续。\",\"选择复制偏移量最大的从节点（复制的最完整），如果存在则返 回，不存在则继续。\",\"选择runid最小的从节点。\"]},\"691\":{\"h\":\"22.Redis 集群了解吗？\",\"t\":[\"前面说到了主从存在高可用和分布式的问题，哨兵解决了高可用的问题，而集群就是终极方案，一举解决高可用和分布式问题。 \",\"数据分区： 数据分区 (或称数据分片) 是集群最核心的功能。集群将数据分散到多个节点，一方面 突破了 Redis 单机内存大小的限制，存储容量大大增加；另一方面 每个主节点都可以对外提供读服务和写服务，大大提高了集群的响应能力。\",\"高可用： 集群支持主从复制和主节点的 自动故障转移（与哨兵类似），当任一节点发生故障时，集群仍然可以对外提供服务。\"]},\"692\":{\"h\":\"23.集群中数据如何分区？\",\"t\":[\"分布式的存储中，要把数据集按照分区规则映射到多个节点，常见的数据分区规则三种： \"]},\"693\":{\"h\":\"方案一：节点取余分区\",\"t\":[\"节点取余分区，非常好理解，使用特定的数据，比如Redis的键，或者用户ID之类，对响应的hash值取余：hash（key）%N，来确定数据映射到哪一个节点上。\",\"不过该方案最大的问题是，当节点数量变化时，如扩容或收缩节点，数据节点映射关 系需要重新计算，会导致数据的重新迁移。\"]},\"694\":{\"h\":\"方案二：一致性哈希分区\",\"t\":[\"将整个 Hash 值空间组织成一个虚拟的圆环，然后将缓存节点的 IP 地址或者主机名做 Hash 取值后，放置在这个圆环上。当我们需要确定某一个 Key 需 要存取到哪个节点上的时候，先对这个 Key 做同样的 Hash 取值，确定在环上的位置，然后按照顺时针方向在环上“行走”，遇到的第一个缓存节点就是要访问的节点。\",\"比如说下面 这张图里面，Key 1 和 Key 2 会落入到 Node 1 中，Key 3、Key 4 会落入到 Node 2 中，Key 5 落入到 Node 3 中，Key 6 落入到 Node 4 中。 \",\"这种方式相比节点取余最大的好处在于加入和删除节点只影响哈希环中 相邻的节点，对其他节点无影响。\",\"但它还是存在问题：\",\"缓存节点在圆环上分布不平均，会造成部分缓存节点的压力较大\",\"当某个节点故障时，这个节点所要承担的所有访问都会被顺移到另一个节点上，会对后面这个节点造成力。\"]},\"695\":{\"h\":\"方案三：虚拟槽分区\",\"t\":[\"这个方案 一致性哈希分区的基础上，引入了 虚拟节点 的概念。Redis 集群使用的便是该方案，其中的虚拟节点称为 槽（slot）。槽是介于数据和实际节点之间的虚拟概念，每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。 \",\"在使用了槽的一致性哈希分区中，槽是数据管理和迁移的基本单位。槽解耦了数据和实际节点 之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有 4 个实际节点，假设为其分配 16 个槽(0-15)；\",\"槽 0-3 位于 node1；4-7 位于 node2；以此类推....\",\"如果此时删除 node2，只需要将槽 4-7 重新分配即可，例如槽 4-5 分配给 node1，槽 6 分配给 node3，槽 7 分配给 node4，数据在其他节点的分布仍然较为均衡。\"]},\"696\":{\"h\":\"24.能说说Redis集群的原理吗？\",\"t\":[\"Redis集群通过数据分区来实现数据的分布式存储，通过自动故障转移实现高可用。\"]},\"697\":{\"h\":\"集群创建\",\"t\":[\"数据分区是在集群创建的时候完成的。 \",\"设置节点 Redis集群一般由多个节点组成，节点数量至少为6个才能保证组成完整高可用的集群。每个节点需要开启配置cluster-enabled yes，让Redis运行在集群模式下。 节点握手 节点握手是指一批运行在集群模式下的节点通过Gossip协议彼此通信， 达到感知对方的过程。节点握手是集群彼此通信的第一步，由客户端发起命 令：cluster meet{ip}{port}。完成节点握手之后，一个个的Redis节点就组成了一个多节点的集群。\",\"分配槽（slot） Redis集群把所有的数据映射到16384个槽中。每个节点对应若干个槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过 cluster addslots命令为节点分配槽。\"]},\"698\":{\"h\":\"故障转移\",\"t\":[\"Redis集群的故障转移和哨兵的故障转移类似，但是Redis集群中所有的节点都要承担状态维护的任务。\",\"故障发现 Redis集群内节点通过ping/pong消息实现节点通信，集群中每个节点都会定期向其他节点发送ping消息，接收节点回复pong 消息作为响应。如果在cluster-node-timeout时间内通信一直失败，则发送节 点会认为接收节点存在故障，把接收节点标记为主观下线（pfail）状态。 当某个节点判断另一个节点主观下线后，相应的节点状态会跟随消息在集群内传播。通过Gossip消息传播，集群内节点不断收集到故障节点的下线报告。当 半数以上持有槽的主节点都标记某个节点是主观下线时。触发客观下线流程。 \",\"故障恢复\",\"故障节点变为客观下线后，如果下线节点是持有槽的主节点则需要在它 的从节点中选出一个替换它，从而保证集群的高可用。\",\"资格检查 每个从节点都要检查最后与主节点断线时间，判断是否有资格替换故障 的主节点。\",\"准备选举时间 当从节点符合故障转移资格后，更新触发故障选举的时间，只有到达该 时间后才能执行后续流程。\",\"发起选举 当从节点定时任务检测到达故障选举时间（failover_auth_time）到达后，发起选举流程。\",\"选举投票 持有槽的主节点处理故障选举消息。投票过程其实是一个领导者选举的过程，如集群内有N个持有槽的主节 点代表有N张选票。由于在每个配置纪元内持有槽的主节点只能投票给一个 从节点，因此只能有一个从节点获得N/2+1的选票，保证能够找出唯一的从节点。 \",\"替换主节点 当从节点收集到足够的选票之后，触发替换主节点操作。\",\"部署Redis集群至少需要几个物理节点？\",\"在投票选举的环节，故障主节点也算在投票数内，假设集群内节点规模是3主3从，其中有2 个主节点部署在一台机器上，当这台机器宕机时，由于从节点无法收集到 3/2+1个主节点选票将导致故障转移失败。这个问题也适用于故障发现环节。因此部署集群时所有主节点最少需要部署在3台物理机上才能避免单点问题。\"]},\"699\":{\"h\":\"25.说说集群的伸缩？\",\"t\":[\"Redis集群提供了灵活的节点扩容和收缩方案，可以在不影响集群对外服务的情况下，为集群添加节点进行扩容也可以下线部分节点进行缩容。 其实，集群扩容和缩容的关键点，就在于槽和节点的对应关系，扩容和缩容就是将一部分槽和数据迁移给新节点。\",\"例如下面一个集群，每个节点对应若干个槽，每个槽对应一定的数据，如果希望加入1个节点希望实现集群扩容时，需要通过相关命令把一部分槽和内容迁移给新节点。 缩容也是类似，先把槽和数据迁移到其它节点，再把对应的节点下线。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"700\":{\"h\":\"缓存设计\"},\"701\":{\"h\":\"26.什么是缓存击穿、缓存穿透、缓存雪崩？\",\"t\":[\"PS:这是多年黄历的老八股了，一定要理解清楚。\"]},\"702\":{\"h\":\"缓存击穿\",\"t\":[\"一个并发访问量比较大的key在某个时间过期，导致所有的请求直接打在DB上。\",\" 解决⽅案：\",\"加锁更新，⽐如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写⼊缓存，再返回给⽤户，这样后⾯的请求就可以从缓存中拿到数据了。 \",\"将过期时间组合写在value中，通过异步的⽅式不断的刷新过期时间，防⽌此类现象。\"]},\"703\":{\"h\":\"缓存穿透\",\"t\":[\"缓存穿透指的查询缓存和数据库中都不存在的数据，这样每次请求直接打到数据库，就好像缓存不存在一样。\",\" 缓存穿透将导致不存在的数据每次请求都要到存储层去查询，失去了缓存保护后端存储的意义。\",\"缓存穿透可能会使后端存储负载加大，如果发现大量存储层空命中，可能就是出现了缓存穿透问题。\",\"缓存穿透可能有两种原因：\",\"自身业务代码问题\",\"恶意攻击，爬虫造成空命中\",\"它主要有两种解决办法：\",\"缓存空值/默认值\",\"一种方式是在数据库不命中之后，把一个空对象或者默认值保存到缓存，之后再访问这个数据，就会从缓存中获取，这样就保护了数据库。\",\"缓存空值有两大问题：\",\"空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间（如果是攻击，问题更严重），比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。\",\"缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。 例如过期时间设置为5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致。 这时候可以利用消息队列或者其它异步方式清理缓存中的空对象。\",\"布隆过滤器 除了缓存空对象，我们还可以在存储和缓存之前，加一个布隆过滤器，做一层过滤。\",\"布隆过滤器里会保存数据是否存在，如果判断数据不不能再，就不会访问存储。 两种解决方案的对比： \"]},\"704\":{\"h\":\"缓存雪崩\",\"t\":[\"某⼀时刻发⽣⼤规模的缓存失效的情况，例如缓存服务宕机、大量key在同一时间过期，这样的后果就是⼤量的请求进来直接打到DB上，可能导致整个系统的崩溃，称为雪崩。\",\" 缓存雪崩是三大缓存问题里最严重的一种，我们来看看怎么预防和处理。\",\"提高缓存可用性\",\"集群部署：通过集群来提升缓存的可用性，可以利用Redis本身的Redis Cluster或者第三方集群方案如Codis等。\",\"多级缓存：设置多级缓存，第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。\",\"过期时间\",\"均匀过期：为了避免大量的缓存在同一时间过期，可以把不同的 key 过期时间随机生成，避免过期时间太过集中。\",\"热点数据永不过期。\",\"熔断降级\",\"服务熔断：当缓存服务器宕机或超时响应时，为了防止整个系统出现雪崩，暂时停止业务服务访问缓存系统。\",\"服务降级：当出现大量缓存失效，而且处在高并发高负荷的情况下，在业务系统内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的 fallback（退路）错误处理信息。\"]},\"705\":{\"h\":\"27.能说说布隆过滤器吗？\",\"t\":[\"布隆过滤器，它是一个连续的数据结构，每个存储位存储都是一个bit，即0或者1, 来标识数据是否存在。\",\"存储数据的时时候，使用K个不同的哈希函数将这个变量映射为bit列表的的K个点，把它们置为1。\",\"我们判断缓存key是否存在，同样，K个哈希函数，映射到bit列表上的K个点，判断是不是1：\",\"如果全不是1，那么key不存在；\",\"如果都是1，也只是表示key可能存在。\",\"布隆过滤器也有一些缺点：\",\"它在判断元素是否在集合中时是有一定错误几率，因为哈希算法有一定的碰撞的概率。\",\"不支持删除元素。\"]},\"706\":{\"h\":\"28.如何保证缓存和数据库数据的⼀致性？\",\"t\":[\"根据CAP理论，在保证可用性和分区容错性的前提下，无法保证一致性，所以缓存和数据库的绝对一致是不可能实现的，只能尽可能保存缓存和数据库的最终一致性。\"]},\"707\":{\"h\":\"选择合适的缓存更新策略\",\"t\":[\"1. 删除缓存而不是更新缓存\",\"当一个线程对缓存的key进行写操作的时候，如果其它线程进来读数据库的时候，读到的就是脏数据，产生了数据不一致问题。\",\"相比较而言，删除缓存的速度比更新缓存的速度快很多，所用时间相对也少很多，读脏数据的概率也小很多。 \",\"先更数据，后删缓存 先更数据库还是先删缓存？这是一个问题。\",\"更新数据，耗时可能在删除缓存的百倍以上。在缓存中不存在对应的key，数据库又没有完成更新的时候，如果有线程进来读取数据，并写入到缓存，那么在更新成功之后，这个key就是一个脏数据。\",\"毫无疑问，先删缓存，再更数据库，缓存中key不存在的时间的时间更长，有更大的概率会产生脏数据。\",\"目前最流行的缓存读写策略cache-aside-pattern就是采用先更数据库，再删缓存的方式。\"]},\"708\":{\"h\":\"缓存不一致处理\",\"t\":[\"如果不是并发特别高，对缓存依赖性很强，其实一定程序的不一致是可以接受的。\",\"但是如果对一致性要求比较高，那就得想办法保证缓存和数据库中数据一致。\",\"缓存和数据库数据不一致常见的两种原因：\",\"缓存key删除失败\",\"并发导致写入了脏数据\",\"消息队列保证key被删除 可以引入消息队列，把要删除的key或者删除失败的key丢尽消息队列，利用消息队列的重试机制，重试删除对应的key。\",\"这种方案看起来不错，缺点是对业务代码有一定的侵入性。\",\"数据库订阅+消息队列保证key被删除 可以用一个服务（比如阿里的 canal）去监听数据库的binlog，获取需要操作的数据。\",\"然后用一个公共的服务获取订阅程序传来的信息，进行缓存删除操作。 这种方式降低了对业务的侵入，但其实整个系统的复杂度是提升的，适合基建完善的大厂。\",\"延时双删防止脏数据 还有一种情况，是在缓存不存在的时候，写入了脏数据，这种情况在先删缓存，再更数据库的缓存更新策略下发生的比较多，解决方案是延时双删。\",\"简单说，就是在第一次删除缓存之后，过了一段时间之后，再次删除缓存。\",\"这种方式的延时时间设置需要仔细考量和测试。\",\"设置缓存过期时间兜底\",\"这是一个朴素但是有用的办法，给缓存设置一个合理的过期时间，即使发生了缓存数据不一致的问题，它也不会永远不一致下去，缓存过期的时候，自然又会恢复一致。\"]},\"709\":{\"h\":\"29.如何保证本地缓存和分布式缓存的一致？\",\"t\":[\"PS:这道题面试很少问，但实际工作中很常见。\",\"在日常的开发中，我们常常采用两级缓存：本地缓存+分布式缓存。\",\"所谓本地缓存，就是对应服务器的内存缓存，比如Caffeine，分布式缓存基本就是采用Redis。\",\"那么问题来了，本地缓存和分布式缓存怎么保持数据一致？ Redis缓存，数据库发生更新，直接删除缓存的key即可，因为对于应用系统而言，它是一种中心化的缓存。\",\"但是本地缓存，它是非中心化的，散落在分布式服务的各个节点上，没法通过客户端的请求删除本地缓存的key，所以得想办法通知集群所有节点，删除对应的本地缓存key。 \",\"可以采用消息队列的方式：\",\"采用Redis本身的Pub/Sub机制，分布式集群的所有节点订阅删除本地缓存频道，删除Redis缓存的节点，同事发布删除本地缓存消息，订阅者们订阅到消息后，删除对应的本地key。 但是Redis的发布订阅不是可靠的，不能保证一定删除成功。\",\"引入专业的消息队列，比如RocketMQ，保证消息的可靠性，但是增加了系统的复杂度。\",\"设置适当的过期时间兜底，本地缓存可以设置相对短一些的过期时间。\"]},\"710\":{\"h\":\"30.怎么处理热key？\",\"t\":[\"什么是热Key？ 所谓的热key，就是访问频率比较的key。\",\"比如，热门新闻事件或商品，这类key通常有大流量的访问，对存储这类信息的 Redis来说，是不小的压力。\",\"假如Redis集群部署，热key可能会造成整体流量的不均衡，个别节点出现OPS过大的情况，极端情况下热点key甚至会超过 Redis本身能够承受的OPS。\",\"怎么处理热key？\",\" 对热key的处理，最关键的是对热点key的监控，可以从这些端来监控热点key:\",\"客户端 客户端其实是距离key“最近”的地方，因为Redis命令就是从客户端发出的，例如在客户端设置全局字典（key和调用次数），每次调用Redis命令时，使用这个字典进行记录。\",\"代理端 像Twemproxy、Codis这些基于代理的Redis分布式架构，所有客户端的请求都是通过代理端完成的，可以在代理端进行收集统计。\",\"Redis服务端 使用monitor命令统计热点key是很多开发和运维人员首先想到，monitor命令可以监控到Redis执行的所有命令。\",\"只要监控到了热key，对热key的处理就简单了：\",\"把热key打散到不同的服务器，降低压⼒\",\"加⼊⼆级缓存，提前加载热key数据到内存中，如果redis宕机，⾛内存查询\"]},\"711\":{\"h\":\"31.缓存预热怎么做呢？\",\"t\":[\"所谓缓存预热，就是提前把数据库里的数据刷到缓存里，通常有这些方法：\",\"1、直接写个缓存刷新页面或者接口，上线时手动操作\",\"2、数据量不大，可以在项目启动的时候自动进行加载\",\"3、定时任务刷新缓存.\"]},\"712\":{\"h\":\"32.热点key重建？问题？解决？\",\"t\":[\"开发的时候一般使用“缓存+过期时间”的策略，既可以加速数据读写，又保证数据的定期更新，这种模式基本能够满足绝大部分需求。\",\"但是有两个问题如果同时出现，可能就会出现比较大的问题：\",\"当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。\",\"重建缓存不能在短时间完成，可能是一个复杂计算，例如复杂的 SQL、多次IO、多个依赖等。 在缓存失效的瞬间，有大量线程来重建缓存，造成后端负载加大，甚至可能会让应用崩溃。\",\"怎么处理呢？\",\"要解决这个问题也不是很复杂，解决问题的要点在于：\",\"减少重建缓存的次数。\",\"数据尽可能一致。\",\"较少的潜在危险。\",\"所以一般采用如下方式：\",\"互斥锁（mutex key） 这种方法只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。\",\"永远不过期 “永远不过期”包含两层意思：\",\"从缓存层面来看，确实没有设置过期时间，所以不会出现热点key过期后产生的问题，也就是“物理”不过期。\",\"从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去构建缓存。\"]},\"713\":{\"h\":\"33.无底洞问题吗？如何解决？\",\"t\":[\"什么是无底洞问题？\",\"2010年，Facebook的Memcache节点已经达到了3000个，承载着TB级别的缓存数据。但开发和运维人员发现了一个问题，为了满足业务要求添加了大量新Memcache节点，但是发现性能不但没有好转反而下降了，当时将这 种现象称为缓存的“无底洞”现象。\",\"那么为什么会产生这种现象呢?\",\"通常来说添加节点使得Memcache集群 性能应该更强了，但事实并非如此。键值数据库由于通常采用哈希函数将 key映射到各个节点上，造成key的分布与业务无关，但是由于数据量和访问量的持续增长，造成需要添加大量节点做水平扩容，导致键值分布到更多的 节点上，所以无论是Memcache还是Redis的分布式，批量操作通常需要从不同节点上获取，相比于单机批量操作只涉及一次网络操作，分布式批量操作会涉及多次网络时间。\",\"无底洞问题如何优化呢？\",\"先分析一下无底洞问题：\",\"客户端一次批量操作会涉及多次网络操作，也就意味着批量操作会随着节点的增多，耗时会不断增大。\",\"网络连接数变多，对节点的性能也有一定影响。\",\"常见的优化思路如下：\",\"命令本身的优化，例如优化操作语句等。\",\"减少网络通信次数。\",\"降低接入成本，例如客户端使用长连/连接池、NIO等。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"714\":{\"h\":\"Redis运维\"},\"715\":{\"h\":\"34.Redis报内存不足怎么处理？\",\"t\":[\"Redis 内存不足有这么几种处理方式：\",\"修改配置文件 redis.conf 的 maxmemory 参数，增加 Redis 可用内存\",\"也可以通过命令set maxmemory动态设置内存上限\",\"修改内存淘汰策略，及时释放内存空间\",\"使用 Redis 集群模式，进行横向扩容。\"]},\"716\":{\"h\":\"35.Redis的过期数据回收策略有哪些？\",\"t\":[\"Redis主要有2种过期数据回收策略： \",\"惰性删除\",\"惰性删除指的是当我们查询key的时候才对key进⾏检测，如果已经达到过期时间，则删除。显然，他有⼀个缺点就是如果这些过期的key没有被访问，那么他就⼀直⽆法被删除，⽽且⼀直占⽤内存。\",\"定期删除\",\"定期删除指的是Redis每隔⼀段时间对数据库做⼀次检查，删除⾥⾯的过期key。由于不可能对所有key去做轮询来删除，所以Redis会每次随机取⼀些key去做检查和删除。\"]},\"717\":{\"h\":\"36.Redis有哪些内存溢出控制/内存淘汰策略？\",\"t\":[\"Redis所用内存达到maxmemory上限时会触发相应的溢出控制策略，Redis支持六种策略： \",\"noeviction：默认策略，不会删除任何数据，拒绝所有写入操作并返 回客户端错误信息，此 时Redis只响应读操作。\",\"volatile-lru：根据LRU算法删除设置了超时属性（expire）的键，直 到腾出足够空间为止。如果没有可删除的键对象，回退到noeviction策略。\",\"allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性， 直到腾出足够空间为止。\",\"allkeys-random：随机删除所有键，直到腾出足够空间为止。\",\"volatile-random：随机删除过期键，直到腾出足够空间为止。\",\"volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果 没有，回退到noeviction策略。\"]},\"718\":{\"h\":\"37.Redis阻塞？怎么解决？\",\"t\":[\"Redis发生阻塞，可以从以下几个方面排查： \",\"API或数据结构使用不合理\",\"通常Redis执行命令速度非常快，但是不合理地使用命令，可能会导致执行速度很慢，导致阻塞，对于高并发的场景，应该尽量避免在大对象上执行算法复杂 度超过O（n）的命令。\",\"对慢查询的处理分为两步：\",\"发现慢查询： slowlog get{n}命令可以获取最近 的n条慢查询命令；\",\"发现慢查询后，可以从两个方向去优化慢查询： 1）修改为低算法复杂度的命令，如hgetall改为hmget等，禁用keys、sort等命 令 2）调整大对象：缩减大对象数据或把大对象拆分为多个小对象，防止一次命令操作过多的数据。\",\"CPU饱和的问题\",\"单线程的Redis处理命令时只能使用一个CPU。而CPU饱和是指Redis单核CPU使用率跑到接近100%。\",\"针对这种情况，处理步骤一般如下：\",\"判断当前Redis并发量是否已经达到极限，可以使用统计命令redis-cli-h{ip}-p{port}--stat获取当前 Redis使用情况\",\"如果Redis的请求几万+，那么大概就是Redis的OPS已经到了极限，应该做集群化水品扩展来分摊OPS压力\",\"如果只有几百几千，那么就得排查命令和内存的使用\",\"持久化相关的阻塞\",\"对于开启了持久化功能的Redis节点，需要排查是否是持久化导致的阻塞。\",\"fork阻塞 fork操作发生在RDB和AOF重写时，Redis主线程调用fork操作产生共享 内存的子进程，由子进程完成持久化文件重写工作。如果fork操作本身耗时过长，必然会导致主线程的阻塞。\",\"AOF刷盘阻塞 当我们开启AOF持久化功能时，文件刷盘的方式一般采用每秒一次，后台线程每秒对AOF文件做fsync操作。当硬盘压力过大时，fsync操作需要等 待，直到写入完成。如果主线程发现距离上一次的fsync成功超过2秒，为了 数据安全性它会阻塞直到后台线程执行fsync操作完成。\",\"HugePage写操作阻塞 对于开启Transparent HugePages的 操作系统，每次写命令引起的复制内存页单位由4K变为2MB，放大了512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。\"]},\"719\":{\"h\":\"38.大key问题了解吗？\",\"t\":[\"Redis使用过程中，有时候会出现大key的情况， 比如：\",\"单个简单的key存储的value很大，size超过10KB\",\"hash， set，zset，list 中存储过多的元素（以万为单位）\",\"大key会造成什么问题呢？\",\"客户端耗时增加，甚至超时\",\"对大key进行IO操作时，会严重占用带宽和CPU\",\"造成Redis集群中数据倾斜\",\"主动删除、被动删等，可能会导致阻塞\",\"如何找到大key?\",\"bigkeys命令：使用bigkeys命令以遍历的方式分析Redis实例中的所有Key，并返回整体统计信息与每个数据类型中Top1的大Key\",\"redis-rdb-tools：redis-rdb-tools是由Python写的用来分析Redis的rdb快照文件用的工具，它可以把rdb快照文件生成json文件或者生成报表用来分析Redis的使用详情。\",\"如何处理大key?\",\"删除大key\",\"当Redis版本大于4.0时，可使用UNLINK命令安全地删除大Key，该命令能够以非阻塞的方式，逐步地清理传入的Key。\",\"当Redis版本小于4.0时，避免使用阻塞式命令KEYS，而是建议通过SCAN命令执行增量迭代扫描key，然后判断进行删除。\",\"压缩和拆分key\",\"当vaule是string时，比较难拆分，则使用序列化、压缩算法将key的大小控制在合理范围内，但是序列化和反序列化都会带来更多时间上的消耗。\",\"当value是string，压缩之后仍然是大key，则需要进行拆分，一个大key分为不同的部分，记录每个部分的key，使用multiget等操作实现事务读取。\",\"当value是list/set等集合类型时，根据预估的数据规模来进行分片，不同的元素计算后分到不同的片。\"]},\"720\":{\"h\":\"39.Redis常见性能问题和解决方案？\",\"t\":[\"Master 最好不要做任何持久化工作，包括内存快照和 AOF 日志文件，特别是不要启用内存快照做持久化。\",\"如果数据比较关键，某个 Slave 开启 AOF 备份数据，策略为每秒同步一次。\",\"为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内。\",\"尽量避免在压力较大的主库上增加从库。\",\"Master 调用 BGREWRITEAOF 重写 AOF 文件，AOF 在重写的时候会占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象。\",\"为了 Master 的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关为：Master<–Slave1<–Slave2<–Slave3…，这样的结构也方便解决单点故障问题，实现 Slave 对 Master 的替换，也即，如果 Master 挂了，可以立马启用 Slave1 做 Master，其他不变。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"721\":{\"h\":\"Redis应用\"},\"722\":{\"h\":\"40.使用Redis 如何实现异步队列？\",\"t\":[\"我们知道redis支持很多种结构的数据，那么如何使用redis作为异步队列使用呢？ 一般有以下几种方式：\",\"使用list作为队列，lpush生产消息，rpop消费消息\",\"这种方式，消费者死循环rpop从队列中消费消息。但是这样，即使队列里没有消息，也会进行rpop，会导致Redis CPU的消耗。 可以通过让消费者休眠的方式的方式来处理，但是这样又会又消息的延迟问题。\",\"-使用list作为队列，lpush生产消息，brpop消费消息\",\"brpop是rpop的阻塞版本，list为空的时候，它会一直阻塞，直到list中有值或者超时。 \",\"这种方式只能实现一对一的消息队列。\",\"使用Redis的pub/sub来进行消息的发布/订阅\",\"发布/订阅模式可以1：N的消息发布/订阅。发布者将消息发布到指定的频道频道（channel），订阅相应频道的客户端都能收到消息。\",\" 但是这种方式不是可靠的，它不保证订阅者一定能收到消息，也不进行消息的存储。\",\"所以，一般的异步队列的实现还是交给专业的消息队列。\"]},\"723\":{\"h\":\"41.Redis 如何实现延时队列?\",\"t\":[\"使用zset，利用排序实现\",\"可以使用 zset这个结构，用设置好的时间戳作为score进行排序，使用 zadd score1 value1 ....命令就可以一直往内存中生产消息。再利用 zrangebysocre 查询符合条件的所有待处理的任务，通过循环执行队列任务即可。 \"]},\"724\":{\"h\":\"42.Redis 支持事务吗？\",\"t\":[\"Redis提供了简单的事务，但它对事务ACID的支持并不完备。\",\"multi命令代表事务开始，exec命令代表事务结束，它们之间的命令是原子顺序执行的：\",\"127.0.0.1:6379> multi OK 127.0.0.1:6379> sadd user:a:follow user:b QUEUED 127.0.0.1:6379> sadd user:b:fans user:a QUEUED 127.0.0.1:6379> sismember user:a:follow user:b (integer) 0 127.0.0.1:6379> exec 1) (integer) 1 2) (integer) 1 \",\"Redis事务的原理，是所有的指令在 exec 之前不执行，而是缓存在 服务器的一个事务队列中，服务器一旦收到 exec 指令，才开执行整个事务队列，执行完毕后一次性返回所有指令的运行结果。 \",\"因为Redis执行命令是单线程的，所以这组命令顺序执行，而且不会被其它线程打断。\",\"Redis事务的注意点有哪些？\",\"需要注意的点有：\",\"Redis 事务是不支持回滚的，不像 MySQL 的事务一样，要么都执行要么都不执行；\",\"Redis 服务端在执行事务的过程中，不会被其他客户端发送来的命令请求打断。直到事务命令全部执行完毕才会执行其他客户端的命令。\",\"Redis 事务为什么不支持回滚？\",\"Redis 的事务不支持回滚。\",\"如果执行的命令有语法错误，Redis 会执行失败，这些问题可以从程序层面捕获并解决。但是如果出现其他问题，则依然会继续执行余下的命令。\",\"这样做的原因是因为回滚需要增加很多工作，而不支持回滚则可以保持简单、快速的特性。\"]},\"725\":{\"h\":\"43.Redis和Lua脚本的使用了解吗？\",\"t\":[\"Redis的事务功能比较简单，平时的开发中，可以利用Lua脚本来增强Redis的命令。\",\"Lua脚本能给开发人员带来这些好处：\",\"Lua脚本在Redis中是原子执行的，执行过程中间不会插入其他命令。\",\"Lua脚本可以帮助开发和运维人员创造出自己定制的命令，并可以将这 些命令常驻在Redis内存中，实现复用的效果。\",\"Lua脚本可以将多条命令一次性打包，有效地减少网络开销。\",\"比如这一段很（烂）经（大）典（街）的秒杀系统利用lua扣减Redis库存的脚本：\",\" -- 库存未预热 if (redis.call('exists', KEYS[2]) == 1) then return -9; end; -- 秒杀商品库存存在 if (redis.call('exists', KEYS[1]) == 1) then local stock = tonumber(redis.call('get', KEYS[1])); local num = tonumber(ARGV[1]); -- 剩余库存少于请求数量 if (stock < num) then return -3 end; -- 扣减库存 if (stock >= num) then redis.call('incrby', KEYS[1], 0 - num); -- 扣减成功 return 1 end; return -2; end; -- 秒杀商品库存不存在 return -1; \"]},\"726\":{\"h\":\"44.Redis的管道了解吗？\",\"t\":[\"Redis 提供三种将客户端多条命令打包发送给服务端执行的方式：\",\"Pipelining(管道) 、 Transactions(事务) 和 Lua Scripts(Lua 脚本) 。\",\"Pipelining（管道）\",\"Redis 管道是三者之中最简单的，当客户端需要执行多条 redis 命令时，可以通过管道一次性将要执行的多条命令发送给服务端，其作用是为了降低 RTT(Round Trip Time) 对性能的影响，比如我们使用 nc 命令将两条指令发送给 redis 服务端。\",\"Redis 服务端接收到管道发送过来的多条命令后，会一直执命令，并将命令的执行结果进行缓存，直到最后一条命令执行完成，再所有命令的执行结果一次性返回给客户端 。 \",\"Pipelining的优势\",\"在性能方面， Pipelining 有下面两个优势：\",\"节省了RTT：将多条命令打包一次性发送给服务端，减少了客户端与服务端之间的网络调用次数\",\"减少了上下文切换：当客户端/服务端需要从网络中读写数据时，都会产生一次系统调用，系统调用是非常耗时的操作，其中设计到程序由用户态切换到内核态，再从内核态切换回用户态的过程。当我们执行 10 条 redis 命令的时候，就会发生 10 次用户态到内核态的上下文切换，但如果我们使用 Pipeining 将多条命令打包成一条一次性发送给服务端，就只会产生一次上下文切换。\"]},\"727\":{\"h\":\"45.Redis实现分布式锁了解吗？\",\"t\":[\"Redis是分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。\",\"V1：setnx命令\",\"占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。 \",\"> setnx lock:fighter true OK ... do something critical ... > del lock:fighter (integer) 1 \",\"但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。\",\"V2:锁超时释放\",\"所以在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。 \",\"> setnx lock:fighter true OK > expire lock:fighter 5 ... do something critical ... > del lock:fighter (integer) 1 \",\"但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。\",\"这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。\",\"V3:set指令\",\"这个问题在Redis 2.8 版本中得到了解决，这个版本加入了 set 指令的扩展参数，使得 setnx 和expire 指令可以一起执行。 \",\"set lock:fighter3 true ex 5 nx OK ... do something critical ... > del lock:codehole \",\"上面这个指令就是 setnx 和 expire 组合在一起的原子指令，这个就算是比较完善的分布式锁了。\",\"当然实际的开发，没人会去自己写分布式锁的命令，因为有专业的轮子——Redisson。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"728\":{\"h\":\"底层结构\",\"t\":[\"这一部分就比较深了，如果不是简历上写了精通Redis，应该不会怎么问。\"]},\"729\":{\"h\":\"46.说说Redis底层数据结构？\",\"t\":[\"Redis有动态字符串(sds)、链表(list)、字典(ht)、跳跃表(skiplist)、整数集合(intset)、压缩列表(ziplist) 等底层数据结构。\",\"Redis并没有使用这些数据结构来直接实现键值对数据库，而是基于这些数据结构创建了一个对象系统，来表示所有的key-value。\",\" 我们常用的数据类型和编码对应的映射关系：\",\" 简单看一下底层数据结构，如果对数据结构掌握不错的话，理解这些结构应该不是特别难：\",\"字符串：redis没有直接使⽤C语⾔传统的字符串表示，⽽是⾃⼰实现的叫做简单动态字符串SDS的抽象类型。\",\"C语⾔的字符串不记录⾃身的⻓度信息，⽽SDS则保存了⻓度信息，这样将获取字符串⻓度的时间由O(N)降低到了O(1)，同时可以避免缓冲区溢出和减少修改字符串⻓度时所需的内存重分配次数。\",\"链表linkedlist：redis链表是⼀个双向⽆环链表结构，很多发布订阅、慢查询、监视器功能都是使⽤到了链表来实现，每个链表的节点由⼀个listNode结构来表示，每个节点都有指向前置节点和后置节点的指针，同时表头节点的前置和后置节点都指向NULL。\",\"字典dict：⽤于保存键值对的抽象数据结构。Redis使⽤hash表作为底层实现，一个哈希表里可以有多个哈希表节点，而每个哈希表节点就保存了字典里中的一个键值对。 每个字典带有两个hash表，供平时使⽤和rehash时使⽤，hash表使⽤链地址法来解决键冲突，被分配到同⼀个索引位置的多个键值对会形成⼀个单向链表，在对hash表进⾏扩容或者缩容的时候，为了服务的可⽤性，rehash的过程不是⼀次性完成的，⽽是渐进式的。 \",\"跳跃表skiplist：跳跃表是有序集合的底层实现之⼀，Redis中在实现有序集合键和集群节点的内部结构中都是⽤到了跳跃表。Redis跳跃表由zskiplist和zskiplistNode组成，zskiplist⽤于保存跳跃表信息（表头、表尾节点、⻓度等），zskiplistNode⽤于表示表跳跃节点，每个跳跃表节点的层⾼都是1-32的随机数，在同⼀个跳跃表中，多个节点可以包含相同的分值，但是每个节点的成员对象必须是唯⼀的，节点按照分值⼤⼩排序，如果分值相同，则按照成员对象的⼤⼩排序。 \",\"整数集合intset：⽤于保存整数值的集合抽象数据结构，不会出现重复元素，底层实现为数组。 \",\"压缩列表ziplist：压缩列表是为节约内存⽽开发的顺序性数据结构，它可以包含任意多个节点，每个节点可以保存⼀个字节数组或者整数值。\"]},\"730\":{\"h\":\"47.Redis 的 SDS 和 C 中字符串相比有什么优势？\",\"t\":[\"C 语言使用了一个长度为 N+1 的字符数组来表示长度为 N 的字符串，并且字符数组最后一个元素总是 \\\\0，这种简单的字符串表示方式 不符合 Redis 对字符串在安全性、效率以及功能方面的要求。\",\"C语言的字符串可能有什么问题？\",\"这样简单的数据结构可能会造成以下一些问题：\",\"获取字符串长度复杂度高 ：因为 C 不保存数组的长度，每次都需要遍历一遍整个数组，时间复杂度为O(n)；\",\"不能杜绝 缓冲区溢出/内存泄漏 的问题 : C字符串不记录自身长度带来的另外一个问题是容易造成缓存区溢出（buffer overflow），例如在字符串拼接的时候，新的\",\"C 字符串 只能保存文本数据 → 因为 C 语言中的字符串必须符合某种编码（比如 ASCII），例如中间出现的 '\\\\0' 可能会被判定为提前结束的字符串而识别不了；\",\"Redis如何解决？优势？\",\"简单来说一下 Redis 如何解决的：\",\"多增加 len 表示当前字符串的长度：这样就可以直接获取长度了，复杂度 O(1)；\",\"自动扩展空间：当 SDS 需要对字符串进行修改时，首先借助于 len 和 alloc 检查空间是否满足修改所需的要求，如果空间不够的话，SDS 会自动扩展空间，避免了像 C 字符串操作中的溢出情况；\",\"有效降低内存分配次数：C 字符串在涉及增加或者清除操作时会改变底层数组的大小造成重新分配，SDS 使用了 空间预分配 和 惰性空间释放 机制，简单理解就是每次在扩展时是成倍的多分配的，在缩容是也是先留着并不正式归还给 OS；\",\"二进制安全：C 语言字符串只能保存 ascii 码，对于图片、音频等信息无法保存，SDS 是二进制安全的，写入什么读取就是什么，不做任何过滤和限制；\"]},\"731\":{\"h\":\"48.字典是如何实现的？Rehash 了解吗？\",\"t\":[\"字典是 Redis 服务器中出现最为频繁的复合型数据结构。除了 hash 结构的数据会用到字典外，整个 Redis 数据库的所有 key 和 value 也组成了一个 全局字典，还有带过期时间的 key 也是一个字典。(存储在 RedisDb 数据结构中)\",\"字典结构是什么样的呢？\",\"Redis 中的字典相当于 Java 中的 HashMap，内部实现也差不多类似，采用哈希与运算计算下标位置；通过 \\\"数组 + 链表\\\" 的链地址法 来解决哈希冲突，同时这样的结构也吸收了两种不同数据结构的优点。 \",\"字典是怎么扩容的？\",\"字典结构内部包含 两个 hashtable，通常情况下只有一个哈希表 ht[0] 有值，在扩容的时候，把ht[0]里的值rehash到ht[1]，然后进行 渐进式rehash ——所谓渐进式rehash，指的是这个rehash的动作并不是一次性、集中式地完成的，而是分多次、渐进式地完成的。\",\"待搬迁结束后，h[1]就取代h[0]存储字典的元素。\"]},\"732\":{\"h\":\"49.跳跃表是如何实现的？原理？\",\"t\":[\"PS:跳跃表是比较常问的一种结构。\",\"跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其它节点的指针，从而达到快速访问节点的目的。 \",\"为什么使用跳跃表?\",\"首先，因为 zset 要支持随机的插入和删除，所以它 不宜使用数组来实现，关于排序问题，我们也很容易就想到 红黑树/ 平衡树 这样的树形结构，为什么 Redis 不使用这样一些结构呢？\",\"性能考虑： 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部；\",\"实现考虑： 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观；\",\"基于以上的一些考虑，Redis 基于 William Pugh 的论文做出一些改进后采用了 跳跃表 这样的结构。\",\"本质是解决查找问题。\",\"跳跃表是怎么实现的？\",\"跳跃表的节点里有这些元素：\",\"层 跳跃表节点的level数组可以包含多个元素，每个元素都包含一个指向其它节点的指针，程序可以通过这些层来加快访问其它节点的速度，一般来说，层的数量月多，访问其它节点的速度就越快。\",\"每次创建一个新的跳跃表节点的时候，程序都根据幂次定律，随机生成一个介于1和32之间的值作为level数组的大小，这个大小就是层的“高度”\",\"前进指针 每个层都有一个指向表尾的前进指针（level[i].forward属性），用于从表头向表尾方向访问节点。\",\"我们看一下跳跃表从表头到表尾，遍历所有节点的路径： \",\"跨度 层的跨度用于记录两个节点之间的距离。跨度是用来计算排位（rank）的：在查找某个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。\",\"例如查找，分值为3.0、成员对象为o3的节点时，沿途经历的层：查找的过程只经过了一个层，并且层的跨度为3，所以目标节点在跳跃表中的排位为3。 \",\"分值和成员 节点的分值（score属性）是一个double类型的浮点数，跳跃表中所有的节点都按分值从小到大来排序。\",\"节点的成员对象（obj属性）是一个指针，它指向一个字符串对象，而字符串对象则保存这一个SDS值。\"]},\"733\":{\"h\":\"50.压缩列表了解吗？\",\"t\":[\"压缩列表是 Redis 为了节约内存 而使用的一种数据结构，是由一系列特殊编码的连续内存快组成的顺序型数据结构。\",\"一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。\",\"压缩列表由这么几部分组成：\",\"zlbyttes:记录整个压缩列表占用的内存字节数\",\"zltail:记录压缩列表表尾节点距离压缩列表的起始地址有多少字节\",\"zllen:记录压缩列表包含的节点数量\",\"entryX:列表节点\",\"zlend:用于标记压缩列表的末端\"]},\"734\":{\"h\":\"51.快速列表 quicklist 了解吗？\",\"t\":[\"Redis 早期版本存储 list 列表数据结构使用的是压缩列表 ziplist 和普通的双向链表 linkedlist，也就是说当元素少时使用 ziplist，当元素多时用 linkedlist。\",\"但考虑到链表的附加空间相对较高，prev 和 next 指针就要占去 16 个字节（64 位操作系统占用 8 个字节），另外每个节点的内存都是单独分配，会家具内存的碎片化，影响内存管理效率。\",\"后来 Redis 新版本（3.2）对列表数据结构进行了改造，使用 quicklist 代替了 ziplist 和 linkedlist，quicklist是综合考虑了时间效率与空间效率引入的新型数据结构。\",\"quicklist由list和ziplist结合而成，它是一个由ziplist充当节点的双向链表。 \",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"735\":{\"h\":\"其他问题\"},\"736\":{\"h\":\"52.假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？\",\"t\":[\"使用 keys 指令可以扫出指定模式的 key 列表。但是要注意 keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的 key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 keys 指令长。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"图文详解 53 道Redis面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"737\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1.9 万字 97 张手绘图，详解 53 道 Redis 面试高频题（让天下没有难背的八股），面渣背会这些 Redis 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/redis.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.9 万字 97 张手绘图，详解 53 道 Redis 面试高频题（让天下没有难背的八股），面渣背会这些 Redis 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"738\":{\"h\":\"\",\"t\":[\"1.1 万字 45 张手绘图，详解 23 道 RocketMQ 面试高频题（让天下没有难背的八股），面渣背会这些 RocketMQ 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"739\":{\"h\":\"基础\"},\"740\":{\"h\":\"1.为什么要使用消息队列呢？\",\"t\":[\"消息队列主要有三大用途，我们拿一个电商系统的下单举例：\",\"解耦：引入消息队列之前，下单完成之后，需要订单服务去调用库存服务减库存，调用营销服务加营销数据……引入消息队列之后，可以把订单完成的消息丢进队列里，下游服务自己去调用就行了，这样就完成了订单服务和其它服务的解耦合。\",\"异步：订单支付之后，我们要扣减库存、增加积分、发送消息等等，这样一来这个链路就长了，链路一长，响应时间就变长了。引入消息队列，除了更新订单状态，其它的都可以异步去做，这样一来就来，就能降低响应时间。\",\"削峰：消息队列合一用来削峰，例如秒杀系统，平时流量很低，但是要做秒杀活动，秒杀的时候流量疯狂怼进来，我们的服务器，Redis，MySQL各自的承受能力都不一样，直接全部流量照单全收肯定有问题啊，严重点可能直接打挂了。\",\"我们可以把请求扔到队列里面，只放出我们服务能处理的流量，这样就能抗住短时间的大流量了。\",\"解耦、异步、削峰，是消息队列最主要的三大作用。\"]},\"741\":{\"h\":\"2.为什么要选择RocketMQ?\",\"t\":[\"市场上几大消息队列对比如下：\",\"总结一下：\",\"选择中间件的可以从这些维度来考虑：可靠性，性能，功能，可运维行，可拓展性，社区活跃度。目前常用的几个中间件，ActiveMQ作为“老古董”，市面上用的已经不多，其它几种：\",\"RabbitMQ：\",\"优点：轻量，迅捷，容易部署和使用，拥有灵活的路由配置\",\"缺点：性能和吞吐量不太理想，不易进行二次开发\",\"RocketMQ：\",\"优点：性能好，高吞吐量，稳定可靠，有活跃的中文社区\",\"缺点：兼容性上不是太好\",\"Kafka：\",\"优点：拥有强大的性能及吞吐量，兼容性很好\",\"缺点：由于“攒一波再处理”导致延迟比较高\",\"我们的系统是面向用户的C端系统，具有一定的并发量，对性能也有比较高的要求，所以选择了低延迟、吞吐量比较高，可用性比较好的RocketMQ。\"]},\"742\":{\"h\":\"3.RocketMQ有什么优缺点？\",\"t\":[\"RocketMQ优点：\",\"单机吞吐量：十万级\",\"可用性：非常高，分布式架构\",\"消息可靠性：经过参数优化配置，消息可以做到0丢失\",\"功能支持：MQ功能较为完善，还是分布式的，扩展性好\",\"支持10亿级别的消息堆积，不会因为堆积导致性能下降\",\"源码是Java，方便结合公司自己的业务二次开发\",\"天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况\",\"RoketMQ在稳定性上可能更值得信赖，这些业务场景在阿里双11已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择RocketMQ\",\"RocketMQ缺点：\",\"支持的客户端语言不多，目前是Java及c++，其中c++不成熟\",\"没有在 MQ核心中去实现JMS等接口，有些系统要迁移需要修改大量代码\"]},\"743\":{\"h\":\"4.消息队列有哪些消息模型？\",\"t\":[\"消息队列有两种模型：队列模型和发布/订阅模型。\",\"队列模型\",\"这是最初的一种消息队列模型，对应着消息队列“发-存-收”的模型。生产者往某个队列里面发送消息，一个队列可以存储多个生产者的消息，一个队列也可以有多个消费者，但是消费者之间是竞争关系，也就是说每条消息只能被一个消费者消费。\",\"发布/订阅模型\",\"如果需要将一份消息数据分发给多个消费者，并且每个消费者都要求收到全量的消息。很显然，队列模型无法满足这个需求。解决的方式就是发布/订阅模型。\",\"在发布 - 订阅模型中，消息的发送方称为发布者（Publisher），消息的接收方称为订阅者（Subscriber），服务端存放消息的容器称为主题（Topic）。发布者将消息发送到主题中，订阅者在接收消息之前需要先“订阅主题”。“订阅”在这里既是一个动作，同时还可以认为是主题在消费时的一个逻辑副本，每份订阅中，订阅者都可以接收到主题的所有消息。\",\"它和 “队列模式” 的异同：生产者就是发布者，队列就是主题，消费者就是订阅者，无本质区别。唯一的不同点在于：一份消息数据是否可以被多次消费。\"]},\"744\":{\"h\":\"5.那RocketMQ的消息模型呢？\",\"t\":[\"RocketMQ使用的消息模型是标准的发布-订阅模型，在RocketMQ的术语表中，生产者、消费者和主题，与发布-订阅模型中的概念是完全一样的。\",\"RocketMQ本身的消息是由下面几部分组成：\",\"Message\",\"Message（消息）就是要传输的信息。\",\"一条消息必须有一个主题（Topic），主题可以看做是你的信件要邮寄的地址。\",\"一条消息也可以拥有一个可选的标签（Tag）和额处的键值对，它们可以用于设置一个业务 Key 并在 Broker 上查找此消息以便在开发期间查找问题。\",\"Topic\",\"Topic（主题）可以看做消息的归类，它是消息的第一级类型。比如一个电商系统可以分为：交易消息、物流消息等，一条消息必须有一个 Topic 。\",\"Topic 与生产者和消费者的关系非常松散，一个 Topic 可以有0个、1个、多个生产者向其发送消息，一个生产者也可以同时向不同的 Topic 发送消息。\",\"一个 Topic 也可以被 0个、1个、多个消费者订阅。\",\"Tag\",\"Tag（标签）可以看作子主题，它是消息的第二级类型，用于为用户提供额外的灵活性。使用标签，同一业务模块不同目的的消息就可以用相同 Topic 而不同的 Tag 来标识。比如交易消息又可以分为：交易创建消息、交易完成消息等，一条消息可以没有 Tag 。\",\"标签有助于保持你的代码干净和连贯，并且还可以为 RocketMQ 提供的查询系统提供帮助。\",\"Group\",\"RocketMQ中，订阅者的概念是通过消费组（Consumer Group）来体现的。每个消费组都消费主题中一份完整的消息，不同消费组之间消费进度彼此不受影响，也就是说，一条消息被Consumer Group1消费过，也会再给Consumer Group2消费。\",\"消费组中包含多个消费者，同一个组内的消费者是竞争消费的关系，每个消费者负责消费组内的一部分消息。默认情况，如果一条消息被消费者Consumer1消费了，那同组的其他消费者就不会再收到这条消息。\",\"Message Queue\",\"Message Queue（消息队列），一个 Topic 下可以设置多个消息队列，Topic 包括多个 Message Queue ，如果一个 Consumer 需要获取 Topic下所有的消息，就要遍历所有的 Message Queue。\",\"RocketMQ还有一些其它的Queue——例如ConsumerQueue。\",\"Offset\",\"在Topic的消费过程中，由于消息需要被不同的组进行多次消费，所以消费完的消息并不会立即被删除，这就需要RocketMQ为每个消费组在每个队列上维护一个消费位置（Consumer Offset），这个位置之前的消息都被消费过，之后的消息都没有被消费过，每成功消费一条消息，消费位置就加一。\",\"也可以这么说，Queue 是一个长度无限的数组，Offset 就是下标。\",\"RocketMQ的消息模型中，这些就是比较关键的概念了。画张图总结一下：\"]},\"745\":{\"h\":\"6.消息的消费模式了解吗？\",\"t\":[\"消息消费模式有两种：Clustering（集群消费）和Broadcasting（广播消费）。\",\"默认情况下就是集群消费，这种模式下一个消费者组共同消费一个主题的多个队列，一个队列只会被一个消费者消费，如果某个消费者挂掉，分组内其它消费者会接替挂掉的消费者继续消费。\",\"而广播消费消息会发给消费者组中的每一个消费者进行消费。\"]},\"746\":{\"h\":\"7.RoctetMQ基本架构了解吗？\",\"t\":[\"先看图，RocketMQ的基本架构：\",\"RocketMQ 一共有四个部分组成：NameServer，Broker，Producer 生产者，Consumer 消费者，它们对应了：发现、发、存、收，为了保证高可用，一般每一部分都是集群部署的。\"]},\"747\":{\"h\":\"8.那能介绍一下这四部分吗？\",\"t\":[\"类比一下我们生活的邮政系统——\",\"邮政系统要正常运行，离不开下面这四个角色， 一是发信者，二 是收信者， 三是负责暂存传输的邮局， 四是负责协调各个地方邮局的管理机构。对应到 RocketMQ 中，这四个角色就是 Producer、 Consumer、 Broker 、NameServer。\"]},\"748\":{\"h\":\"NameServer\",\"t\":[\"NameServer 是一个无状态的服务器，角色类似于 Kafka使用的 Zookeeper，但比 Zookeeper 更轻量。\",\"特点：\",\"每个 NameServer 结点之间是相互独立，彼此没有任何信息交互。\",\"Nameserver 被设计成几乎是无状态的，通过部署多个结点来标识自己是一个伪集群，Producer 在发送消息前从 NameServer 中获取 Topic 的路由信息也就是发往哪个 Broker，Consumer 也会定时从 NameServer 获取 Topic 的路由信息，Broker 在启动时会向 NameServer 注册，并定时进行心跳连接，且定时同步维护的 Topic 到 NameServer。\",\"功能主要有两个：\",\"1、和Broker 结点保持长连接。\",\"2、维护 Topic 的路由信息。\"]},\"749\":{\"h\":\"Broker\",\"t\":[\"消息存储和中转角色，负责存储和转发消息。\",\"Broker 内部维护着一个个 Consumer Queue，用来存储消息的索引，真正存储消息的地方是 CommitLog（日志文件）。\",\"单个 Broker 与所有的 Nameserver 保持着长连接和心跳，并会定时将 Topic 信息同步到 NameServer，和 NameServer 的通信底层是通过 Netty 实现的。\"]},\"750\":{\"h\":\"Producer\",\"t\":[\"消息生产者，业务端负责发送消息，由用户自行实现和分布式部署。\",\"Producer由用户进行分布式部署，消息由Producer通过多种负载均衡模式发送到Broker集群，发送低延时，支持快速失败。\",\"RocketMQ 提供了三种方式发送消息：同步、异步和单向\",\"同步发送：同步发送指消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包。一般用于重要通知消息，例如重要通知邮件、营销短信。\",\"异步发送：异步发送指发送方发出数据后，不等接收方发回响应，接着发送下个数据包，一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务。\",\"单向发送：单向发送是指只负责发送消息而不等待服务器回应且没有回调函数触发，适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集。\"]},\"751\":{\"h\":\"Consumer\",\"t\":[\"消息消费者，负责消费消息，一般是后台系统负责异步消费。\",\"Consumer也由用户部署，支持PUSH和PULL两种消费模式，支持集群消费和广播消费，提供实时的消息订阅机制。\",\"Pull：拉取型消费者（Pull Consumer）主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程，所以 Pull 称为主动消费型。\",\"Push：推送型消费者（Push Consumer）封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现。所以 Push 称为被动消费类型，但其实从实现上看还是从消息服务器中拉取消息，不同于 Pull 的是 Push 首先要注册消费监听器，当监听器处触发后才开始消费消息。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"752\":{\"h\":\"进阶\"},\"753\":{\"h\":\"9.如何保证消息的可用性/可靠性/不丢失呢？\",\"t\":[\"消息可能在哪些阶段丢失呢？可能会在这三个阶段发生丢失：生产阶段、存储阶段、消费阶段。\",\"所以要从这三个阶段考虑：\"]},\"754\":{\"h\":\"生产\",\"t\":[\"在生产阶段，主要通过请求确认机制，来保证消息的可靠传递。\",\"1、同步发送的时候，要注意处理响应结果和异常。如果返回响应OK，表示消息成功发送到了Broker，如果响应失败，或者发生其它异常，都应该重试。\",\"2、异步发送的时候，应该在回调方法里检查，如果发送失败或者异常，都应该进行重试。\",\"3、如果发生超时的情况，也可以通过查询日志的API，来检查是否在Broker存储成功。\"]},\"755\":{\"h\":\"存储\",\"t\":[\"存储阶段，可以通过配置可靠性优先的 Broker 参数来避免因为宕机丢消息，简单说就是可靠性优先的场景都应该使用同步。\",\"1、消息只要持久化到CommitLog（日志文件）中，即使Broker宕机，未消费的消息也能重新恢复再消费。\",\"2、Broker的刷盘机制：同步刷盘和异步刷盘，不管哪种刷盘都可以保证消息一定存储在pagecache中（内存中），但是同步刷盘更可靠，它是Producer发送消息后等数据持久化到磁盘之后再返回响应给Producer。\",\"3、Broker通过主从模式来保证高可用，Broker支持Master和Slave同步复制、Master和Slave异步复制模式，生产者的消息都是发送给Master，但是消费既可以从Master消费，也可以从Slave消费。同步复制模式可以保证即使Master宕机，消息肯定在Slave中有备份，保证了消息不会丢失。\"]},\"756\":{\"h\":\"消费\",\"t\":[\"从Consumer角度分析，如何保证消息被成功消费？\",\"Consumer保证消息成功消费的关键在于确认的时机，不要在收到消息后就立即发送消费确认，而是应该在执行完所有消费业务逻辑之后，再发送消费确认。因为消息队列维护了消费的位置，逻辑执行失败了，没有确认，再去队列拉取消息，就还是之前的一条。\"]},\"757\":{\"h\":\"10.如何处理消息重复的问题呢？\",\"t\":[\"对分布式消息队列来说，同时做到确保一定投递和不重复投递是很难的，就是所谓的“有且仅有一次” 。RocketMQ择了确保一定投递，保证消息不丢失，但有可能造成消息重复。\",\"处理消息重复问题，主要有业务端自己保证，主要的方式有两种：业务幂等和消息去重。\",\"业务幂等：第一种是保证消费逻辑的幂等性，也就是多次调用和一次调用的效果是一样的。这样一来，不管消息消费多少次，对业务都没有影响。\",\"消息去重：第二种是业务端，对重复的消息就不再消费了。这种方法，需要保证每条消息都有一个惟一的编号，通常是业务相关的，比如订单号，消费的记录需要落库，而且需要保证和消息确认这一步的原子性。\",\"具体做法是可以建立一个消费记录表，拿到这个消息做数据库的insert操作。给这个消息做一个唯一主键（primary key）或者唯一约束，那么就算出现重复消费的情况，就会导致主键冲突，那么就不再处理这条消息。\"]},\"758\":{\"h\":\"11.怎么处理消息积压？\",\"t\":[\"发生了消息积压，这时候就得想办法赶紧把积压的消息消费完，就得考虑提高消费能力，一般有两种办法：\",\"消费者扩容：如果当前Topic的Message Queue的数量大于消费者数量，就可以对消费者进行扩容，增加消费者，来提高消费能力，尽快把积压的消息消费玩。\",\"消息迁移Queue扩容：如果当前Topic的Message Queue的数量小于或者等于消费者数量，这种情况，再扩容消费者就没什么用，就得考虑扩容Message Queue。可以新建一个临时的Topic，临时的Topic多设置一些Message Queue，然后先用一些消费者把消费的数据丢到临时的Topic，因为不用业务处理，只是转发一下消息，还是很快的。接下来用扩容的消费者去消费新的Topic里的数据，消费完了之后，恢复原状。\"]},\"759\":{\"h\":\"12.顺序消息如何实现？\",\"t\":[\"顺序消息是指消息的消费顺序和产生顺序相同，在有些业务逻辑下，必须保证顺序，比如订单的生成、付款、发货，这个消息必须按顺序处理才行。\",\"顺序消息分为全局顺序消息和部分顺序消息，全局顺序消息指某个 Topic 下的所有消息都要保证顺序；\",\"部分顺序消息只要保证每一组消息被顺序消费即可，比如订单消息，只要保证同一个订单 ID 个消息能按顺序消费即可。\"]},\"760\":{\"h\":\"部分顺序消息\",\"t\":[\"部分顺序消息相对比较好实现，生产端需要做到把同 ID 的消息发送到同一个 Message Queue ；在消费过程中，要做到从同一个Message Queue读取的消息顺序处理——消费端不能并发处理顺序消息，这样才能达到部分有序。\",\"发送端使用 MessageQueueSelector 类来控制 把消息发往哪个 Message Queue 。\",\"消费端通过使用 MessageListenerOrderly 来解决单 Message Queue 的消息被并发处理的问题。\"]},\"761\":{\"h\":\"全局顺序消息\",\"t\":[\"RocketMQ 默认情况下不保证顺序，比如创建一个 Topic ，默认八个写队列，八个读队列，这时候一条消息可能被写入任意一个队列里；在数据的读取过程中，可能有多个 Consumer ，每个 Consumer 也可能启动多个线程并行处理，所以消息被哪个 Consumer 消费，被消费的顺序和写人的顺序是否一致是不确定的。\",\"要保证全局顺序消息， 需要先把 Topic 的读写队列数设置为 一，然后Producer Consumer 的并发设置，也要是一。简单来说，为了保证整个 Topic全局消息有序，只能消除所有的并发处理，各部分都设置成单线程处理 ，这时候就完全牺牲RocketMQ的高并发、高吞吐的特性了。\"]},\"762\":{\"h\":\"13.如何实现消息过滤？\",\"t\":[\"有两种方案：\",\"一种是在 Broker 端按照 Consumer 的去重逻辑进行过滤，这样做的好处是避免了无用的消息传输到 Consumer 端，缺点是加重了 Broker 的负担，实现起来相对复杂。\",\"另一种是在 Consumer 端过滤，比如按照消息设置的 tag 去重，这样的好处是实现起来简单，缺点是有大量无用的消息到达了 Consumer 端只能丢弃不处理。\",\"一般采用Cosumer端过滤，如果希望提高吞吐量，可以采用Broker过滤。\",\"对消息的过滤有三种方式：\",\"根据Tag过滤：这是最常见的一种，用起来高效简单\",\"DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\\\"CID_EXAMPLE\\\"); consumer.subscribe(\\\"TOPIC\\\", \\\"TAGA || TAGB || TAGC\\\"); \",\"SQL 表达式过滤：SQL表达式过滤更加灵活\",\"DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\\\"please_rename_unique_group_name_4\\\"); // 只有订阅的消息有这个属性a, a >=0 and a <= 3 consumer.subscribe(\\\"TopicTest\\\", MessageSelector.bySql(\\\"a between 0 and 3\\\"); consumer.registerMessageListener(new MessageListenerConcurrently() { @Override public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) { return ConsumeConcurrentlyStatus.CONSUME_SUCCESS; } }); consumer.start(); \",\"Filter Server 方式：最灵活，也是最复杂的一种方式，允许用户自定义函数进行过滤\"]},\"763\":{\"h\":\"14.延时消息了解吗？\",\"t\":[\"电商的订单超时自动取消，就是一个典型的利用延时消息的例子，用户提交了一个订单，就可以发送一个延时消息，1h后去检查这个订单的状态，如果还是未付款就取消订单释放库存。\",\"RocketMQ是支持延时消息的，只需要在生产消息的时候设置消息的延时级别：\",\"// 实例化一个生产者来产生延时消息 DefaultMQProducer producer = new DefaultMQProducer(\\\"ExampleProducerGroup\\\"); // 启动生产者 producer.start(); int totalMessagesToSend = 100; for (int i = 0; i < totalMessagesToSend; i++) { Message message = new Message(\\\"TestTopic\\\", (\\\"Hello scheduled message \\\" + i).getBytes()); // 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel) message.setDelayTimeLevel(3); // 发送消息 producer.send(message); } \",\"但是目前RocketMQ支持的延时级别是有限的：\",\"private String messageDelayLevel = \\\"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h\\\"; \"]},\"764\":{\"h\":\"RocketMQ怎么实现延时消息的？\",\"t\":[\"简单，八个字：临时存储+定时任务。\",\"Broker收到延时消息了，会先发送到主题（SCHEDULE_TOPIC_XXXX）的相应时间段的Message Queue中，然后通过一个定时任务轮询这些队列，到期后，把消息投递到目标Topic的队列中，然后消费者就可以正常消费这些消息。\"]},\"765\":{\"h\":\"15.怎么实现分布式消息事务的？半消息？\",\"t\":[\"半消息：是指暂时还不能被 Consumer 消费的消息，Producer 成功发送到 Broker 端的消息，但是此消息被标记为 “暂不可投递” 状态，只有等 Producer 端执行完本地事务后经过二次确认了之后，Consumer 才能消费此条消息。\",\"依赖半消息，可以实现分布式消息事务，其中的关键在于二次确认以及消息回查：\",\"1、Producer 向 broker 发送半消息\",\"2、Producer 端收到响应，消息发送成功，此时消息是半消息，标记为 “不可投递” 状态，Consumer 消费不了。\",\"3、Producer 端执行本地事务。\",\"4、正常情况本地事务执行完成，Producer 向 Broker 发送 Commit/Rollback，如果是 Commit，Broker 端将半消息标记为正常消息，Consumer 可以消费，如果是 Rollback，Broker 丢弃此消息。\",\"5、异常情况，Broker 端迟迟等不到二次确认。在一定时间后，会查询所有的半消息，然后到 Producer 端查询半消息的执行情况。\",\"6、Producer 端查询本地事务的状态\",\"7、根据事务的状态提交 commit/rollback 到 broker 端。（5，6，7 是消息回查）\",\"8、消费者段消费到消息之后，执行本地事务，执行本地事务。\"]},\"766\":{\"h\":\"16.死信队列知道吗？\",\"t\":[\"死信队列用于处理无法被正常消费的消息，即死信消息。\",\"当一条消息初次消费失败，消息队列 RocketMQ 会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列 RocketMQ 不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中，该特殊队列称为死信队列。\",\"死信消息的特点：\",\"不会再被消费者正常消费。\",\"有效期与正常消息相同，均为 3 天，3 天后会被自动删除。因此，需要在死信消息产生后的 3 天内及时处理。\",\"死信队列的特点：\",\"一个死信队列对应一个 Group ID， 而不是对应单个消费者实例。\",\"如果一个 Group ID 未产生死信消息，消息队列 RocketMQ 不会为其创建相应的死信队列。\",\"一个死信队列包含了对应 Group ID 产生的所有死信消息，不论该消息属于哪个 Topic。\",\"RocketMQ 控制台提供对死信消息的查询、导出和重发的功能。\"]},\"767\":{\"h\":\"17.如何保证RocketMQ的高可用？\",\"t\":[\"NameServer因为是无状态，且不相互通信的，所以只要集群部署就可以保证高可用。\",\"RocketMQ的高可用主要是在体现在Broker的读和写的高可用，Broker的高可用是通过集群和主从实现的。\",\"Broker可以配置两种角色：Master和Slave，Master角色的Broker支持读和写，Slave角色的Broker只支持读，Master会向Slave同步消息。\",\"也就是说Producer只能向Master角色的Broker写入消息，Cosumer可以从Master和Slave角色的Broker读取消息。\",\"Consumer 的配置文件中，并不需要设置是从 Master 读还是从 Slave读，当 Master 不可用或者繁忙的时候， Consumer 的读请求会被自动切换到从 Slave。有了自动切换 Consumer 这种机制，当一个 Master 角色的机器出现故障后，Consumer 仍然可以从 Slave 读取消息，不影响 Consumer 读取消息，这就实现了读的高可用。\",\"如何达到发送端写的高可用性呢？在创建 Topic 的时候，把 Topic 的多个Message Queue 创建在多个 Broker 组上（相同 Broker 名称，不同 brokerId机器组成 Broker 组），这样当 Broker 组的 Master 不可用后，其他组Master 仍然可用， Producer 仍然可以发送消息 RocketMQ 目前还不支持把Slave自动转成 Master ，如果机器资源不足，需要把 Slave 转成 Master ，则要手动停止 Slave 色的 Broker ，更改配置文件，用新的配置文件启动 Broker。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"768\":{\"h\":\"原理\"},\"769\":{\"h\":\"18.说一下RocketMQ的整体工作流程？\",\"t\":[\"简单来说，RocketMQ是一个分布式消息队列，也就是消息队列+分布式系统。\",\"作为消息队列，它是发-存-收的一个模型，对应的就是Producer、Broker、Cosumer；作为分布式系统，它要有服务端、客户端、注册中心，对应的就是Broker、Producer/Consumer、NameServer\",\"所以我们看一下它主要的工作流程：RocketMQ由NameServer注册中心集群、Producer生产者集群、Consumer消费者集群和若干Broker（RocketMQ进程）组成：\",\"Broker在启动的时候去向所有的NameServer注册，并保持长连接，每30s发送一次心跳\",\"Producer在发送消息的时候从NameServer获取Broker服务器地址，根据负载均衡算法选择一台服务器来发送消息\",\"Conusmer消费消息的时候同样从NameServer获取Broker地址，然后主动拉取消息来消费\"]},\"770\":{\"h\":\"19.为什么RocketMQ不使用Zookeeper作为注册中心呢？\",\"t\":[\"Kafka我们都知道采用Zookeeper作为注册中心——当然也开始逐渐去Zookeeper，RocketMQ不使用Zookeeper其实主要可能从这几方面来考虑：\",\"基于可用性的考虑，根据CAP理论，同时最多只能满足两个点，而Zookeeper满足的是CP，也就是说Zookeeper并不能保证服务的可用性，Zookeeper在进行选举的时候，整个选举的时间太长，期间整个集群都处于不可用的状态，而这对于一个注册中心来说肯定是不能接受的，作为服务发现来说就应该是为可用性而设计。\",\"基于性能的考虑，NameServer本身的实现非常轻量，而且可以通过增加机器的方式水平扩展，增加集群的抗压能力，而Zookeeper的写是不可扩展的，Zookeeper要解决这个问题只能通过划分领域，划分多个Zookeeper集群来解决，首先操作起来太复杂，其次这样还是又违反了CAP中的A的设计，导致服务之间是不连通的。\",\"持久化的机制来带的问题，ZooKeeper 的 ZAB 协议对每一个写请求，会在每个 ZooKeeper 节点上保持写一个事务日志，同时再加上定期的将内存数据镜像（Snapshot）到磁盘来保证数据的一致性和持久性，而对于一个简单的服务发现的场景来说，这其实没有太大的必要，这个实现方案太重了。而且本身存储的数据应该是高度定制化的。\",\"消息发送应该弱依赖注册中心，而RocketMQ的设计理念也正是基于此，生产者在第一次发送消息的时候从NameServer获取到Broker地址后缓存到本地，如果NameServer整个集群不可用，短时间内对于生产者和消费者并不会产生太大影响。\"]},\"771\":{\"h\":\"20.Broker是怎么保存数据的呢？\",\"t\":[\"RocketMQ主要的存储文件包括CommitLog文件、ConsumeQueue文件、Indexfile文件。\",\"消息存储的整体的设计：\",\"CommitLog：消息主体以及元数据的存储主体，存储Producer端写入的消息主体内容,消息内容不是定长的。单个文件大小默认1G, 文件名长度为20位，左边补零，剩余为起始偏移量，比如00000000000000000000代表了第一个文件，起始偏移量为0，文件大小为1G=1073741824；当第一个文件写满了，第二个文件为00000000001073741824，起始偏移量为1073741824，以此类推。消息主要是顺序写入日志文件，当文件满了，写入下一个文件。\",\"CommitLog文件保存于${Rocket_Home}/store/commitlog目录中，从图中我们可以明显看出来文件名的偏移量，每个文件默认1G，写满后自动生成一个新的文件。\",\"ConsumeQueue：消息消费队列，引入的目的主要是提高消息消费的性能，由于RocketMQ是基于主题topic的订阅模式，消息消费是针对主题进行的，如果要遍历commitlog文件中根据topic检索消息是非常低效的。\",\"Consumer即可根据ConsumeQueue来查找待消费的消息。其中，ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定Topic下的队列消息在CommitLog中的起始物理偏移量offset，消息大小size和消息Tag的HashCode值。\",\"ConsumeQueue文件可以看成是基于Topic的CommitLog索引文件，故ConsumeQueue文件夹的组织方式如下：topic/queue/file三层组织结构，具体存储路径为：$HOME/store/consumequeue/{topic}/{queueId}/{fileName}。同样ConsumeQueue文件采取定长设计，每一个条目共20个字节，分别为8字节的CommitLog物理偏移量、4字节的消息长度、8字节tag hashcode，单个文件由30W个条目组成，可以像数组一样随机访问每一个条目，每个ConsumeQueue文件大小约5.72M；\",\"IndexFile：IndexFile（索引文件）提供了一种可以通过key或时间区间来查询消息的方法。Index文件的存储位置是： {fileName}，文件名fileName是以创建时的时间戳命名的，固定的单个IndexFile文件大小约为400M，一个IndexFile可以保存 2000W个索引，IndexFile的底层存储设计为在文件系统中实现HashMap结构，故RocketMQ的索引文件其底层实现为hash索引。\",\"总结一下：RocketMQ采用的是混合型的存储结构，即为Broker单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。\",\"RocketMQ的混合型存储结构(多个Topic的消息实体内容都存储于一个CommitLog中)针对Producer和Consumer分别采用了数据和索引部分相分离的存储结构，Producer发送消息至Broker端，然后Broker端使用同步或者异步的方式对消息刷盘持久化，保存至CommitLog中。\",\"只要消息被刷盘持久化至磁盘文件CommitLog中，那么Producer发送的消息就不会丢失。正因为如此，Consumer也就肯定有机会去消费这条消息。当无法拉取到消息后，可以等下一次消息拉取，同时服务端也支持长轮询模式，如果一个消息拉取请求未拉取到消息，Broker允许等待30s的时间，只要这段时间内有新消息到达，将直接返回给消费端。\",\"这里，RocketMQ的具体做法是，使用Broker端的后台服务线程—ReputMessageService不停地分发请求并异步构建ConsumeQueue（逻辑消费队列）和IndexFile（索引文件）数据。\"]},\"772\":{\"h\":\"21.说说RocketMQ怎么对文件进行读写的？\",\"t\":[\"RocketMQ对文件的读写巧妙地利用了操作系统的一些高效文件读写方式——PageCache、顺序读写、零拷贝。\",\"PageCache、顺序读取\",\"在RocketMQ中，ConsumeQueue逻辑消费队列存储的数据较少，并且是顺序读取，在page cache机制的预读取作用下，Consume Queue文件的读性能几乎接近读内存，即使在有消息堆积情况下也不会影响性能。而对于CommitLog消息存储的日志数据文件来说，读取消息内容时候会产生较多的随机访问读取，严重影响性能。如果选择合适的系统IO调度算法，比如设置调度算法为“Deadline”（此时块存储采用SSD的话），随机读的性能也会有所提升。\",\"页缓存（PageCache)是OS对文件的缓存，用于加速对文件的读写。一般来说，程序对文件进行顺序读写的速度几乎接近于内存的读写速度，主要原因就是由于OS使用PageCache机制对读写访问操作进行了性能优化，将一部分的内存用作PageCache。对于数据的写入，OS会先写入至Cache内，随后通过异步的方式由pdflush内核线程将Cache内的数据刷盘至物理磁盘上。对于数据的读取，如果一次读取文件时出现未命中PageCache的情况，OS从物理磁盘上访问读取文件的同时，会顺序对其他相邻块的数据文件进行预读取。\",\"零拷贝\",\"另外，RocketMQ主要通过MappedByteBuffer对文件进行读写操作。其中，利用了NIO中的FileChannel模型将磁盘上的物理文件直接映射到用户态的内存地址中（这种Mmap的方式减少了传统IO，将磁盘文件数据在操作系统内核地址空间的缓冲区，和用户应用程序地址空间的缓冲区之间来回进行拷贝的性能开销），将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率（正因为需要使用内存映射机制，故RocketMQ的文件存储都使用定长结构来存储，方便一次将整个文件映射至内存）。\"]},\"773\":{\"h\":\"说说什么是零拷贝?\",\"t\":[\"在操作系统中，使用传统的方式，数据需要经历几次拷贝，还要经历用户态/内核态切换。\",\"从磁盘复制数据到内核态内存；\",\"从内核态内存复制到用户态内存；\",\"然后从用户态内存复制到网络驱动的内核态内存；\",\"最后是从网络驱动的内核态内存复制到网卡中进行传输。\",\"所以，可以通过零拷贝的方式，减少用户态与内核态的上下文切换和内存拷贝的次数，用来提升I/O的性能。零拷贝比较常见的实现方式是mmap，这种机制在Java中是通过MappedByteBuffer实现的。\"]},\"774\":{\"h\":\"22.消息刷盘怎么实现的呢？\",\"t\":[\"RocketMQ提供了两种刷盘策略：同步刷盘和异步刷盘\",\"同步刷盘：在消息达到Broker的内存之后，必须刷到commitLog日志文件中才算成功，然后返回Producer数据已经发送成功。\",\"异步刷盘：异步刷盘是指消息达到Broker内存后就返回Producer数据已经发送成功，会唤醒一个线程去将数据持久化到CommitLog日志文件中。\",\"Broker 在消息的存取时直接操作的是内存（内存映射文件），这可以提供系统的吞吐量，但是无法避免机器掉电时数据丢失，所以需要持久化到磁盘中。\",\"刷盘的最终实现都是使用NIO中的 MappedByteBuffer.force() 将映射区的数据写入到磁盘，如果是同步刷盘的话，在Broker把消息写到CommitLog映射区后，就会等待写入完成。\",\"异步而言，只是唤醒对应的线程，不保证执行的时机，流程如图所示。\"]},\"775\":{\"h\":\"22.能说下 RocketMQ 的负载均衡是如何实现的？\",\"t\":[\"RocketMQ中的负载均衡都在Client端完成，具体来说的话，主要可以分为Producer端发送消息时候的负载均衡和Consumer端订阅消息的负载均衡。\"]},\"776\":{\"h\":\"Producer的负载均衡\",\"t\":[\"Producer端在发送消息的时候，会先根据Topic找到指定的TopicPublishInfo，在获取了TopicPublishInfo路由信息后，RocketMQ的客户端在默认方式下selectOneMessageQueue()方法会从TopicPublishInfo中的messageQueueList中选择一个队列（MessageQueue）进行发送消息。具这里有一个sendLatencyFaultEnable开关变量，如果开启，在随机递增取模的基础上，再过滤掉not available的Broker代理。\",\"所谓的\\\"latencyFaultTolerance\\\"，是指对之前失败的，按一定的时间做退避。例如，如果上次请求的latency超过550Lms，就退避3000Lms；超过1000L，就退避60000L；如果关闭，采用随机递增取模的方式选择一个队列（MessageQueue）来发送消息，latencyFaultTolerance机制是实现消息发送高可用的核心关键所在。\"]},\"777\":{\"h\":\"Consumer的负载均衡\",\"t\":[\"在RocketMQ中，Consumer端的两种消费模式（Push/Pull）都是基于拉模式来获取消息的，而在Push模式只是对pull模式的一种封装，其本质实现为消息拉取线程在从服务器拉取到一批消息后，然后提交到消息消费线程池后，又“马不停蹄”的继续向服务器再次尝试拉取消息。如果未拉取到消息，则延迟一下又继续拉取。在两种基于拉模式的消费方式（Push/Pull）中，均需要Consumer端知道从Broker端的哪一个消息队列中去获取消息。因此，有必要在Consumer端来做负载均衡，即Broker端中多个MessageQueue分配给同一个ConsumerGroup中的哪些Consumer消费。\",\"Consumer端的心跳包发送\",\"在Consumer启动后，它就会通过定时任务不断地向RocketMQ集群中的所有Broker实例发送心跳包（其中包含了，消息消费分组名称、订阅关系集合、消息通信模式和客户端id的值等信息）。Broker端在收到Consumer的心跳消息后，会将它维护在ConsumerManager的本地缓存变量—consumerTable，同时并将封装后的客户端网络通道信息保存在本地缓存变量—channelInfoTable中，为之后做Consumer端的负载均衡提供可以依据的元数据信息。\",\"Consumer端实现负载均衡的核心类—RebalanceImpl\",\"在Consumer实例的启动流程中的启动MQClientInstance实例部分，会完成负载均衡服务线程—RebalanceService的启动（每隔20s执行一次）。\",\"通过查看源码可以发现，RebalanceService线程的run()方法最终调用的是RebalanceImpl类的rebalanceByTopic()方法，这个方法是实现Consumer端负载均衡的核心。\",\"rebalanceByTopic()方法会根据消费者通信类型为“广播模式”还是“集群模式”做不同的逻辑处理。这里主要来看下集群模式下的主要处理流程：\",\"(1) 从rebalanceImpl实例的本地缓存变量—topicSubscribeInfoTable中，获取该Topic主题下的消息消费队列集合（mqSet）；\",\"(2) 根据topic和consumerGroup为参数调用mQClientFactory.findConsumerIdList()方法向Broker端发送通信请求，获取该消费组下消费者Id列表；\",\"(3) 先对Topic下的消息消费队列、消费者Id排序，然后用消息队列分配策略算法（默认为：消息队列的平均分配算法），计算出待拉取的消息队列。这里的平均分配算法，类似于分页的算法，将所有MessageQueue排好序类似于记录，将所有消费端Consumer排好序类似页数，并求出每一页需要包含的平均size和每个页面记录的范围range，最后遍历整个range而计算出当前Consumer端应该分配到的的MessageQueue。\",\"(4) 然后，调用updateProcessQueueTableInRebalance()方法，具体的做法是，先将分配到的消息队列集合（mqSet）与processQueueTable做一个过滤比对。\",\"上图中processQueueTable标注的红色部分，表示与分配到的消息队列集合mqSet互不包含。将这些队列设置Dropped属性为true，然后查看这些队列是否可以移除出processQueueTable缓存变量，这里具体执行removeUnnecessaryMessageQueue()方法，即每隔1s 查看是否可以获取当前消费处理队列的锁，拿到的话返回true。如果等待1s后，仍然拿不到当前消费处理队列的锁则返回false。如果返回true，则从processQueueTable缓存变量中移除对应的Entry；\",\"上图中processQueueTable的绿色部分，表示与分配到的消息队列集合mqSet的交集。判断该ProcessQueue是否已经过期了，在Pull模式的不用管，如果是Push模式的，设置Dropped属性为true，并且调用removeUnnecessaryMessageQueue()方法，像上面一样尝试移除Entry；\",\"最后，为过滤后的消息队列集合（mqSet）中的每个MessageQueue创建一个ProcessQueue对象并存入RebalanceImpl的processQueueTable队列中（其中调用RebalanceImpl实例的computePullFromWhere(MessageQueue mq)方法获取该MessageQueue对象的下一个进度消费值offset，随后填充至接下来要创建的pullRequest对象属性中），并创建拉取请求对象—pullRequest添加到拉取列表—pullRequestList中，最后执行dispatchPullRequest()方法，将Pull消息的请求对象PullRequest依次放入PullMessageService服务线程的阻塞队列pullRequestQueue中，待该服务线程取出后向Broker端发起Pull消息的请求。其中，可以重点对比下，RebalancePushImpl和RebalancePullImpl两个实现类的dispatchPullRequest()方法不同，RebalancePullImpl类里面的该方法为空。\",\"消息消费队列在同一消费组不同消费者之间的负载均衡，其核心设计理念是在一个消息消费队列在同一时间只允许被同一消费组内的一个消费者消费，一个消息消费者能同时消费多个消息队列。\"]},\"778\":{\"h\":\"23.RocketMQ消息长轮询了解吗？\",\"t\":[\"所谓的长轮询，就是Consumer 拉取消息，如果对应的 Queue 如果没有数据，Broker 不会立即返回，而是把 PullReuqest hold起来，等待 queue 有了消息后，或者长轮询阻塞时间到了，再重新处理该 queue 上的所有 PullRequest。\",\"PullMessageProcessor#processRequest\",\"//如果没有拉到数据 case ResponseCode.PULL_NOT_FOUND: // broker 和 consumer 都允许 suspend，默认开启 if (brokerAllowSuspend && hasSuspendFlag) { long pollingTimeMills = suspendTimeoutMillisLong; if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) { pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills(); } String topic = requestHeader.getTopic(); long offset = requestHeader.getQueueOffset(); int queueId = requestHeader.getQueueId(); //封装一个PullRequest PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills, this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter); //把PullRequest挂起来 this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest); response = null; break; } \",\"挂起的请求，有一个服务线程会不停地检查，看queue中是否有数据，或者超时。\",\"PullRequestHoldService#run()\",\"@Override public void run() { log.info(\\\"{} service started\\\", this.getServiceName()); while (!this.isStopped()) { try { if (this.brokerController.getBrokerConfig().isLongPollingEnable()) { this.waitForRunning(5 * 1000); } else { this.waitForRunning(this.brokerController.getBrokerConfig().getShortPollingTimeMills()); } long beginLockTimestamp = this.systemClock.now(); //检查hold住的请求 this.checkHoldRequest(); long costTime = this.systemClock.now() - beginLockTimestamp; if (costTime > 5 * 1000) { log.info(\\\"[NOTIFYME] check hold request cost {} ms.\\\", costTime); } } catch (Throwable e) { log.warn(this.getServiceName() + \\\" service has exception. \\\", e); } } log.info(\\\"{} service end\\\", this.getServiceName()); } \",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\",\"图文详解 RocketMQ 面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"779\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1.1 万字 45 张手绘图，详解 23 道 RocketMQ 面试高频题（让天下没有难背的八股），面渣背会这些 RocketMQ 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/rocketmq.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.1 万字 45 张手绘图，详解 23 道 RocketMQ 面试高频题（让天下没有难背的八股），面渣背会这些 RocketMQ 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"780\":{\"h\":\"\",\"t\":[\"1.3 万字 63 张手绘图，详解 35 道 Spring 面试高频题（让天下没有难背的八股），面渣背会这些 Spring 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"781\":{\"h\":\"基础\"},\"782\":{\"h\":\"1.Spring 是什么？特性？有哪些模块？\",\"t\":[\"一句话概括：Spring 是一个轻量级、非入侵式的控制反转 (IoC) 和面向切面 (AOP) 的框架。\",\"2003 年，一个音乐家 Rod Johnson 决定发展一个轻量级的 Java 开发框架，Spring作为 Java 战场的龙骑兵渐渐崛起，并淘汰了EJB这个传统的重装骑兵。\",\"到了现在，企业级开发的标配基本就是 Spring5 + Spring Boot 2 + JDK 8\",\"Spring 有哪些特性呢？\",\"Spring 有很多优点：\",\"IOC 和 DI 的支持\",\"Spring 的核心就是一个大的工厂容器，可以维护所有对象的创建和依赖关系，Spring 工厂用于生成 Bean，并且管理 Bean 的生命周期，实现高内聚低耦合的设计理念。\",\"AOP 编程的支持\",\"Spring 提供了面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等切面功能。\",\"声明式事务的支持\",\"支持通过配置就来完成对事务的管理，而不需要通过硬编码的方式，以前重复的一些事务提交、回滚的 JDBC 代码，都可以不用自己写了。\",\"快捷测试的支持\",\"Spring 对 Junit 提供支持，可以通过注解快捷地测试 Spring 程序。\",\"快速集成功能\",\"方便集成各种优秀框架，Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz 等）的直接支持。\",\"复杂 API 模板封装\",\"Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等）都提供了模板化的封装，这些封装 API 的提供使得应用难度大大降低。\"]},\"783\":{\"h\":\"2.Spring 有哪些模块呢？\",\"t\":[\"Spring 框架是分模块存在，除了最核心的Spring Core Container是必要模块之外，其他模块都是可选，大约有 20 多个模块。\",\"最主要的七大模块：\",\"Spring Core：Spring 核心，它是框架最基础的部分，提供 IOC 和依赖注入 DI 特性。\",\"Spring Context：Spring 上下文容器，它是 BeanFactory 功能加强的一个子接口。\",\"Spring Web：它提供 Web 应用开发的支持。\",\"Spring MVC：它针对 Web 应用中 MVC 思想的实现。\",\"Spring DAO：提供对 JDBC 抽象层，简化了 JDBC 编码，同时，编码更具有健壮性。\",\"Spring ORM：它支持用于流行的 ORM 框架的整合，比如：Spring + Hibernate、Spring + iBatis、Spring + JDO 的整合等。\",\"Spring AOP：即面向切面编程，它提供了与 AOP 联盟兼容的编程实现。\"]},\"784\":{\"h\":\"3.Spring 有哪些常用注解呢？\",\"t\":[\"Spring 有很多模块，甚至广义的 SpringBoot、SpringCloud 也算是 Spring 的一部分，我们来分模块，按功能来看一下一些常用的注解：\",\"Web:\",\"@Controller：组合注解（组合了@Component 注解），应用在 MVC 层（控制层）。\",\"@RestController：该注解为一个组合注解，相当于@Controller 和@ResponseBody 的组合，注解在类上，意味着，该 Controller 的所有方法都默认加上了@ResponseBody。\",\"@RequestMapping：用于映射 Web 请求，包括访问路径和参数。如果是 Restful 风格接口，还可以根据请求类型使用不同的注解： \",\"@GetMapping\",\"@PostMapping\",\"@PutMapping\",\"@DeleteMapping\",\"@ResponseBody：支持将返回值放在 response 内，而不是一个页面，通常用户返回 json 数据。\",\"@RequestBody：允许 request 的参数在 request 体中，而不是在直接连接在地址后面。\",\"@PathVariable：用于接收路径参数，比如 @RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为 Restful 的接口实现方法。\",\"@RestController：该注解为一个组合注解，相当于@Controller 和@ResponseBody 的组合，注解在类上，意味着，该 Controller 的所有方法都默认加上了@ResponseBody。\",\"容器:\",\"@Component：表示一个带注释的类是一个“组件”，成为 Spring 管理的 Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象。同时@Component 还是一个元注解。\",\"@Service：组合注解（组合了@Component 注解），应用在 service 层（业务逻辑层）。\",\"@Repository：组合注解（组合了@Component 注解），应用在 dao 层（数据访问层）。\",\"@Autowired：Spring 提供的工具（由 Spring 的依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入）。\",\"@Qualifier：该注解通常跟 @Autowired 一起使用，当想对注入的过程做更多的控制，@Qualifier 可帮助配置，比如两个以上相同类型的 Bean 时 Spring 无法抉择，用到此注解\",\"@Configuration：声明当前类是一个配置类（相当于一个 Spring 配置的 xml 文件）\",\"@Value：可用在字段，构造器参数跟方法参数，指定一个默认值，支持 #{} 跟 \\\\${} 两个方式。一般将 SpringbBoot 中的 application.properties 配置的属性值赋值给变量。\",\"@Bean：注解在方法上，声明当前方法的返回值为一个 Bean。返回的 Bean 对应的类中可以定义 init()方法和 destroy()方法，然后在@Bean(initMethod=”init”,destroyMethod=”destroy”)定义，在构造之后执行 init，在销毁之前执行 destroy。\",\"@Scope:定义我们采用什么模式去创建 Bean（方法上，得有@Bean） 其设置类型包括：Singleton 、Prototype、Request 、 Session、GlobalSession。\",\"AOP:\",\"@Aspect:声明一个切面（类上） 使用@After、@Before、@Around 定义建言（advice），可直接将拦截规则（切点）作为参数。 \",\"@After ：在方法执行之后执行（方法上）。\",\"@Before： 在方法执行之前执行（方法上）。\",\"@Around： 在方法执行之前与之后执行（方法上）。\",\"@PointCut： 声明切点 在 java 配置类中使用@EnableAspectJAutoProxy 注解开启 Spring 对 AspectJ 代理的支持（类上）。\",\"事务：\",\"@Transactional：在要开启事务的方法上使用@Transactional 注解，即可声明式开启事务。\"]},\"785\":{\"h\":\"4.Spring 中应用了哪些设计模式呢？\",\"t\":[\"Spring 框架中广泛使用了不同类型的设计模式，下面我们来看看到底有哪些设计模式?\",\"工厂模式 : Spring 容器本质是一个大工厂，使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。\",\"代理模式 : Spring AOP 功能功能就是通过代理模式来实现的，分为动态代理和静态代理。\",\"单例模式 : Spring 中的 Bean 默认都是单例的，这样有利于容器对 Bean 的管理。\",\"模板模式 : Spring 中 JdbcTemplate、RestTemplate 等以 Template 结尾的对数据库、网络等等进行操作的模板类，就使用到了模板模式。\",\"观察者模式: Spring 事件驱动模型就是观察者模式很经典的一个应用。\",\"适配器模式 :Spring AOP 的增强或通知 (Advice) 使用到了适配器模式、Spring MVC 中也是用到了适配器模式适配 Controller。\",\"策略模式：Spring 中有一个 Resource 接口，它的不同实现类，会根据不同的策略去访问资源。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"786\":{\"h\":\"IOC\"},\"787\":{\"h\":\"5.说一说什么是 IOC？什么是 DI?\",\"t\":[\"Java 是面向对象的编程语言，一个个实例对象相互合作组成了业务逻辑，原来，我们都是在代码里创建对象和对象的依赖。\",\"所谓的IOC（控制反转）：就是由容器来负责控制对象的生命周期和对象间的关系。以前是我们想要什么，就自己创建什么，现在是我们需要什么，容器就给我们送来什么。\",\"也就是说，控制对象生命周期的不再是引用它的对象，而是容器。对具体对象，以前是它控制其它对象，现在所有对象都被容器控制，所以这就叫控制反转。\",\"DI（依赖注入）：指的是容器在实例化对象的时候把它依赖的类注入给它。有的说法 IOC 和 DI 是一回事，有的说法是 IOC 是思想，DI 是 IOC 的实现。\",\"为什么要使用 IOC 呢？\",\"最主要的是两个字解耦，硬编码会造成对象间的过度耦合，使用 IOC 之后，我们可以不用关心对象间的依赖，专心开发应用就行。\"]},\"788\":{\"h\":\"6.能简单说一下 Spring IOC 的实现机制吗？\",\"t\":[\"PS:这道题老三在面试中被问到过，问法是“你有自己实现过简单的 Spring 吗？”\",\"Spring 的 IOC 本质就是一个大工厂，我们想想一个工厂是怎么运行的呢？\",\"生产产品：一个工厂最核心的功能就是生产产品。在 Spring 里，不用 Bean 自己来实例化，而是交给 Spring，应该怎么实现呢？——答案毫无疑问，反射。\",\"那么这个厂子的生产管理是怎么做的？你应该也知道——工厂模式。\",\"库存产品：工厂一般都是有库房的，用来库存产品，毕竟生产的产品不能立马就拉走。Spring 我们都知道是一个容器，这个容器里存的就是对象，不能每次来取对象，都得现场来反射创建对象，得把创建出的对象存起来。\",\"订单处理：还有最重要的一点，工厂根据什么来提供产品呢？订单。这些订单可能五花八门，有线上签签的、有到工厂签的、还有工厂销售上门签的……最后经过处理，指导工厂的出货。\",\"在 Spring 里，也有这样的订单，它就是我们 bean 的定义和依赖关系，可以是 xml 形式，也可以是我们最熟悉的注解形式。\",\"我们简单地实现一个 mini 版的 Spring IOC：\",\"Bean 定义：\",\"Bean 通过一个配置文件定义，把它解析成一个类型。\",\"beans.properties\",\"偷懒，这里直接用了最方便解析的 properties，这里直接用一个<key,value>类型的配置来代表 Bean 的定义，其中 key 是 beanName，value 是 class\",\"userDao:cn.fighter3.bean.UserDao \",\"BeanDefinition.java\",\"bean 定义类，配置文件中 bean 定义对应的实体\",\"public class BeanDefinition { private String beanName; private Class beanClass; //省略getter、setter } \",\"ResourceLoader.java\",\"资源加载器，用来完成配置文件中配置的加载\",\"public class ResourceLoader { public static Map<String, BeanDefinition> getResource() { Map<String, BeanDefinition> beanDefinitionMap = new HashMap<>(16); Properties properties = new Properties(); try { InputStream inputStream = ResourceLoader.class.getResourceAsStream(\\\"/beans.properties\\\"); properties.load(inputStream); Iterator<String> it = properties.stringPropertyNames().iterator(); while (it.hasNext()) { String key = it.next(); String className = properties.getProperty(key); BeanDefinition beanDefinition = new BeanDefinition(); beanDefinition.setBeanName(key); Class clazz = Class.forName(className); beanDefinition.setBeanClass(clazz); beanDefinitionMap.put(key, beanDefinition); } inputStream.close(); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } return beanDefinitionMap; } } \",\"BeanRegister.java\",\"对象注册器，这里用于单例 bean 的缓存，我们大幅简化，默认所有 bean 都是单例的。可以看到所谓单例注册，也很简单，不过是往 HashMap 里存对象。\",\"public class BeanRegister { //单例Bean缓存 private Map<String, Object> singletonMap = new HashMap<>(32); /** * 获取单例Bean * * @param beanName bean名称 * @return */ public Object getSingletonBean(String beanName) { return singletonMap.get(beanName); } /** * 注册单例bean * * @param beanName * @param bean */ public void registerSingletonBean(String beanName, Object bean) { if (singletonMap.containsKey(beanName)) { return; } singletonMap.put(beanName, bean); } } \",\"BeanFactory.java\",\"对象工厂，我们最核心的一个类，在它初始化的时候，创建了 bean 注册器，完成了资源的加载。\",\"获取 bean 的时候，先从单例缓存中取，如果没有取到，就创建并注册一个 bean\",\"public class BeanFactory { private Map<String, BeanDefinition> beanDefinitionMap = new HashMap<>(); private BeanRegister beanRegister; public BeanFactory() { //创建bean注册器 beanRegister = new BeanRegister(); //加载资源 this.beanDefinitionMap = new ResourceLoader().getResource(); } /** * 获取bean * * @param beanName bean名称 * @return */ public Object getBean(String beanName) { //从bean缓存中取 Object bean = beanRegister.getSingletonBean(beanName); if (bean != null) { return bean; } //根据bean定义，创建bean return createBean(beanDefinitionMap.get(beanName)); } /** * 创建Bean * * @param beanDefinition bean定义 * @return */ private Object createBean(BeanDefinition beanDefinition) { try { Object bean = beanDefinition.getBeanClass().newInstance(); //缓存bean beanRegister.registerSingletonBean(beanDefinition.getBeanName(), bean); return bean; } catch (InstantiationException | IllegalAccessException e) { e.printStackTrace(); } return null; } } \",\"测试\",\"UserDao.java\",\"我们的 Bean 类，很简单\",\"public class UserDao { public void queryUserInfo(){ System.out.println(\\\"A good man.\\\"); } } \",\"单元测试\",\"public class ApiTest { @Test public void test_BeanFactory() { //1.创建bean工厂(同时完成了加载资源、创建注册单例bean注册器的操作) BeanFactory beanFactory = new BeanFactory(); //2.第一次获取bean（通过反射创建bean，缓存bean） UserDao userDao1 = (UserDao) beanFactory.getBean(\\\"userDao\\\"); userDao1.queryUserInfo(); //3.第二次获取bean（从缓存中获取bean） UserDao userDao2 = (UserDao) beanFactory.getBean(\\\"userDao\\\"); userDao2.queryUserInfo(); } } \",\"运行结果\",\"A good man. A good man. \",\"至此，我们一个乞丐+破船版的 Spring 就完成了，代码也比较完整，有条件的可以跑一下。\",\"PS:因为时间+篇幅的限制，这个 demo 比较简陋，没有面向接口、没有解耦、边界检查、异常处理……健壮性、扩展性都有很大的不足，感兴趣可以学习参考[15]。\"]},\"789\":{\"h\":\"7.说说 BeanFactory 和 ApplicantContext?\",\"t\":[\"可以这么形容，BeanFactory 是 Spring 的“心脏”，ApplicantContext 是完整的“身躯”。\",\"BeanFactory（Bean 工厂）是 Spring 框架的基础设施，面向 Spring 本身。\",\"ApplicantContext（应用上下文）建立在 BeanFactoty 基础上，面向使用 Spring 框架的开发者。\"]},\"790\":{\"h\":\"BeanFactory 接口\",\"t\":[\"BeanFactory 是类的通用工厂，可以创建并管理各种类的对象。\",\"Spring 为 BeanFactory 提供了很多种实现，最常用的是 XmlBeanFactory，但在 Spring 3.2 中已被废弃，建议使用 XmlBeanDefinitionReader、DefaultListableBeanFactory。\",\"BeanFactory 接口位于类结构树的顶端，它最主要的方法就是 getBean(String var1)，这个方法从容器中返回特定名称的 Bean。\",\"BeanFactory 的功能通过其它的接口得到了不断的扩展，比如 AbstractAutowireCapableBeanFactory 定义了将容器中的 Bean 按照某种规则（比如按名字匹配、按类型匹配等）进行自动装配的方法。\",\"这里看一个 XMLBeanFactory（已过期） 获取 bean 的例子：\",\"public class HelloWorldApp{ public static void main(String[] args) { BeanFactory factory = new XmlBeanFactory (new ClassPathResource(\\\"beans.xml\\\")); HelloWorld obj = (HelloWorld) factory.getBean(\\\"helloWorld\\\"); obj.getMessage(); } } \"]},\"791\":{\"h\":\"ApplicationContext 接口\",\"t\":[\"ApplicationContext 由 BeanFactory 派生而来，提供了更多面向实际应用的功能。可以这么说，使用 BeanFactory 就是手动档，使用 ApplicationContext 就是自动档。\",\"ApplicationContext 继承了 HierachicalBeanFactory 和 ListableBeanFactory 接口，在此基础上，还通过其他的接口扩展了 BeanFactory 的功能，包括：\",\"Bean instantiation/wiring\",\"Bean 的实例化/串联\",\"自动的 BeanPostProcessor 注册\",\"自动的 BeanFactoryPostProcessor 注册\",\"方便的 MessageSource 访问（i18n）\",\"ApplicationEvent 的发布与 BeanFactory 懒加载的方式不同，它是预加载，所以，每一个 bean 都在 ApplicationContext 启动之后实例化\",\"这是 ApplicationContext 的使用例子：\",\"public class HelloWorldApp{ public static void main(String[] args) { ApplicationContext context=new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); HelloWorld obj = (HelloWorld) context.getBean(\\\"helloWorld\\\"); obj.getMessage(); } } \",\"ApplicationContext 包含 BeanFactory 的所有特性，通常推荐使用前者。\"]},\"792\":{\"h\":\"8.你知道 Spring 容器启动阶段会干什么吗？\",\"t\":[\"PS：这道题老三面试被问到过\",\"Spring 的 IOC 容器工作的过程，其实可以划分为两个阶段：容器启动阶段和Bean 实例化阶段。\",\"其中容器启动阶段主要做的工作是加载和解析配置文件，保存到对应的 Bean 定义中。\",\"容器启动开始，首先会通过某种途径加载 Congiguration MetaData，在大部分情况下，容器需要依赖某些工具类（BeanDefinitionReader）对加载的 Congiguration MetaData 进行解析和分析，并将分析后的信息组为相应的 BeanDefinition。\",\"最后把这些保存了 Bean 定义必要信息的 BeanDefinition，注册到相应的 BeanDefinitionRegistry，这样容器启动就完成了。\"]},\"793\":{\"h\":\"9.能说一下 Spring Bean 生命周期吗？\",\"t\":[\"可以看看：Spring Bean 生命周期，好像人的一生。。\",\"在 Spring 中，基本容器 BeanFactory 和扩展容器 ApplicationContext 的实例化时机不太一样，BeanFactory 采用的是延迟初始化的方式，也就是只有在第一次 getBean()的时候，才会实例化 Bean；ApplicationContext 启动之后会实例化所有的 Bean 定义。\",\"Spring IOC 中 Bean 的生命周期大致分为四个阶段：实例化（Instantiation）、属性赋值（Populate）、初始化（Initialization）、销毁（Destruction）。\",\"我们再来看一个稍微详细一些的过程：\",\"实例化：第 1 步，实例化一个 Bean 对象\",\"属性赋值：第 2 步，为 Bean 设置相关属性和依赖\",\"初始化：初始化的阶段的步骤比较多，5、6 步是真正的初始化，第 3、4 步为在初始化前执行，第 7 步在初始化后执行，初始化完成之后，Bean 就可以被使用了\",\"销毁：第 8~10 步，第 8 步其实也可以算到销毁阶段，但不是真正意义上的销毁，而是先在使用前注册了销毁的相关调用接口，为了后面第 9、10 步真正销毁 Bean 时再执行相应的方法\",\"简单总结一下，Bean 生命周期里初始化的过程相对步骤会多一些，比如前置、后置的处理。\",\"最后通过一个实例来看一下具体的细节： \",\"定义一个PersonBean类，实现DisposableBean,InitializingBean, BeanFactoryAware, BeanNameAware这 4 个接口，同时还有自定义的init-method和destroy-method。\",\"public class PersonBean implements InitializingBean, BeanFactoryAware, BeanNameAware, DisposableBean { /** * 身份证号 */ private Integer no; /** * 姓名 */ private String name; public PersonBean() { System.out.println(\\\"1.调用构造方法：我出生了！\\\"); } public Integer getNo() { return no; } public void setNo(Integer no) { this.no = no; } public String getName() { return name; } public void setName(String name) { this.name = name; System.out.println(\\\"2.设置属性：我的名字叫\\\"+name); } @Override public void setBeanName(String s) { System.out.println(\\\"3.调用BeanNameAware#setBeanName方法:我要上学了，起了个学名\\\"); } @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { System.out.println(\\\"4.调用BeanFactoryAware#setBeanFactory方法：选好学校了\\\"); } @Override public void afterPropertiesSet() throws Exception { System.out.println(\\\"6.InitializingBean#afterPropertiesSet方法：入学登记\\\"); } public void init() { System.out.println(\\\"7.自定义init方法：努力上学ing\\\"); } @Override public void destroy() throws Exception { System.out.println(\\\"9.DisposableBean#destroy方法：平淡的一生落幕了\\\"); } public void destroyMethod() { System.out.println(\\\"10.自定义destroy方法:睡了，别想叫醒我\\\"); } public void work(){ System.out.println(\\\"Bean使用中：工作，只有对社会没有用的人才放假。。\\\"); } } \",\"定义一个MyBeanPostProcessor实现BeanPostProcessor接口。\",\"public class MyBeanPostProcessor implements BeanPostProcessor { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"5.BeanPostProcessor.postProcessBeforeInitialization方法：到学校报名啦\\\"); return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"8.BeanPostProcessor#postProcessAfterInitialization方法：终于毕业，拿到毕业证啦！\\\"); return bean; } } \",\"配置文件，指定init-method和destroy-method属性\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean name=\\\"myBeanPostProcessor\\\" class=\\\"cn.fighter3.spring.life.MyBeanPostProcessor\\\" /> <bean name=\\\"personBean\\\" class=\\\"cn.fighter3.spring.life.PersonBean\\\" init-method=\\\"init\\\" destroy-method=\\\"destroyMethod\\\"> <property name=\\\"idNo\\\" value= \\\"80669865\\\"/> <property name=\\\"name\\\" value=\\\"张铁钢\\\" /> </bean> </beans> \",\"测试\",\"public class Main { public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\\\"spring-config.xml\\\"); PersonBean personBean = (PersonBean) context.getBean(\\\"personBean\\\"); personBean.work(); ((ClassPathXmlApplicationContext) context).destroy(); } } \",\"运行结果：\",\"1.调用构造方法：我出生了！ 2.设置属性：我的名字叫张铁钢 3.调用BeanNameAware#setBeanName方法:我要上学了，起了个学名 4.调用BeanFactoryAware#setBeanFactory方法：选好学校了 5.BeanPostProcessor#postProcessBeforeInitialization方法：到学校报名啦 6.InitializingBean#afterPropertiesSet方法：入学登记 7.自定义init方法：努力上学ing 8.BeanPostProcessor#postProcessAfterInitialization方法：终于毕业，拿到毕业证啦！ Bean使用中：工作，只有对社会没有用的人才放假。。 9.DisposableBean#destroy方法：平淡的一生落幕了 10.自定义destroy方法:睡了，别想叫醒我 \",\"关于源码，Bean 创建过程可以查看AbstractBeanFactory#doGetBean方法，在这个方法里可以看到 Bean 的实例化，赋值、初始化的过程，至于最终的销毁，可以看看ConfigurableApplicationContext#close()。\"]},\"794\":{\"h\":\"10.Bean 定义和依赖定义有哪些方式？\",\"t\":[\"有三种方式：直接编码方式、配置文件方式、注解方式。\",\"直接编码方式：我们一般接触不到直接编码的方式，但其实其它的方式最终都要通过直接编码来实现。\",\"配置文件方式：通过 xml、propreties 类型的配置文件，配置相应的依赖关系，Spring 读取配置文件，完成依赖关系的注入。\",\"注解方式：注解方式应该是我们用的最多的一种方式了，在相应的地方使用注解修饰，Spring 会扫描注解，完成依赖关系的注入。\"]},\"795\":{\"h\":\"11.有哪些依赖注入的方法？\",\"t\":[\"Spring 支持构造方法注入、属性注入、工厂方法注入,其中工厂方法注入，又可以分为静态工厂方法注入和非静态工厂方法注入。\",\"构造方法注入\",\"通过调用类的构造方法，将接口实现类通过构造方法变量传入\",\" public CatDaoImpl(String message){ this. message = message; } \",\"<bean id=\\\"CatDaoImpl\\\" class=\\\"com.CatDaoImpl\\\"> <constructor-arg value=\\\" message \\\"></constructor-arg> </bean> \",\"属性注入\",\"通过 Setter 方法完成调用类所需依赖的注入\",\" public class Id { private int id; public int getId() { return id; } public void setId(int id) { this.id = id; } } \",\"<bean id=\\\"id\\\" class=\\\"com.id \\\"> <property name=\\\"id\\\" value=\\\"123\\\"></property> </bean> \",\"工厂方法注入\",\"静态工厂注入\",\"静态工厂顾名思义，就是通过调用静态工厂的方法来获取自己需要的对象，为了让 Spring 管理所有对象，我们不能直接通过\\\"工程类.静态方法()\\\"来获取对象，而是依然通过 Spring 注入的形式获取：\",\"public class DaoFactory { //静态工厂 public static final FactoryDao getStaticFactoryDaoImpl(){ return new StaticFacotryDaoImpl(); } } public class SpringAction { //注入对象 private FactoryDao staticFactoryDao; //注入对象的 set 方法 public void setStaticFactoryDao(FactoryDao staticFactoryDao) { this.staticFactoryDao = staticFactoryDao; } } \",\"//factory-method=\\\"getStaticFactoryDaoImpl\\\"指定调用哪个工厂方法 <bean name=\\\"springAction\\\" class=\\\" SpringAction\\\" > <!--使用静态工厂的方法注入对象,对应下面的配置文件--> <property name=\\\"staticFactoryDao\\\" ref=\\\"staticFactoryDao\\\"></property> </bean> <!--此处获取对象的方式是从工厂类中获取静态方法--> <bean name=\\\"staticFactoryDao\\\" class=\\\"DaoFactory\\\" factory-method=\\\"getStaticFactoryDaoImpl\\\"></bean> \",\"非静态工厂注入\",\"非静态工厂，也叫实例工厂，意思是工厂方法不是静态的，所以我们需要首先 new 一个工厂实例，再调用普通的实例方法。\",\"//非静态工厂 public class DaoFactory { public FactoryDao getFactoryDaoImpl(){ return new FactoryDaoImpl(); } } public class SpringAction { //注入对象 private FactoryDao factoryDao; public void setFactoryDao(FactoryDao factoryDao) { this.factoryDao = factoryDao; } } \",\" <bean name=\\\"springAction\\\" class=\\\"SpringAction\\\"> <!--使用非静态工厂的方法注入对象,对应下面的配置文件--> <property name=\\\"factoryDao\\\" ref=\\\"factoryDao\\\"></property> </bean> <!--此处获取对象的方式是从工厂类中获取实例方法--> <bean name=\\\"daoFactory\\\" class=\\\"com.DaoFactory\\\"></bean> <bean name=\\\"factoryDao\\\" factory-bean=\\\"daoFactory\\\" factory-method=\\\"getFactoryDaoImpl\\\"></bean> \"]},\"796\":{\"h\":\"12.Spring 有哪些自动装配的方式？\",\"t\":[\"什么是自动装配？\",\"Spring IOC 容器知道所有 Bean 的配置信息，此外，通过 Java 反射机制还可以获知实现类的结构信息，如构造方法的结构、属性等信息。掌握所有 Bean 的这些信息后，Spring IOC 容器就可以按照某种规则对容器中的 Bean 进行自动装配，而无须通过显式的方式进行依赖配置。\",\"Spring 提供的这种方式，可以按照某些规则进行 Bean 的自动装配，<bean>元素提供了一个指定自动装配类型的属性：autowire=\\\"<自动装配类型>\\\"\",\"Spring 提供了哪几种自动装配类型？\",\"Spring 提供了 4 种自动装配类型：\",\"byName：根据名称进行自动匹配，假设 Boss 又一个名为 car 的属性，如果容器中刚好有一个名为 car 的 bean，Spring 就会自动将其装配给 Boss 的 car 属性\",\"byType：根据类型进行自动匹配，假设 Boss 有一个 Car 类型的属性，如果容器中刚好有一个 Car 类型的 Bean，Spring 就会自动将其装配给 Boss 这个属性\",\"constructor：与 byType 类似， 只不过它是针对构造函数注入而言的。如果 Boss 有一个构造函数，构造函数包含一个 Car 类型的入参，如果容器中有一个 Car 类型的 Bean，则 Spring 将自动把这个 Bean 作为 Boss 构造函数的入参；如果容器中没有找到和构造函数入参匹配类型的 Bean，则 Spring 将抛出异常。\",\"autodetect：根据 Bean 的自省机制决定采用 byType 还是 constructor 进行自动装配，如果 Bean 提供了默认的构造函数，则采用 byType，否则采用 constructor。\"]},\"797\":{\"h\":\"13.Spring 中的 Bean 的作用域有哪些?\",\"t\":[\"Spring 的 Bean 主要支持五种作用域：\",\"singleton : 在 Spring 容器仅存在一个 Bean 实例，Bean 以单实例的方式存在，是 Bean 默认的作用域。\",\"prototype : 每次从容器重调用 Bean 时，都会返回一个新的实例。\",\"以下三个作用域于只在 Web 应用中适用：\",\"request : 每一次 HTTP 请求都会产生一个新的 Bean，该 Bean 仅在当前 HTTP Request 内有效。\",\"session : 同一个 HTTP Session 共享一个 Bean，不同的 HTTP Session 使用不同的 Bean。\",\"globalSession：同一个全局 Session 共享一个 Bean，只用于基于 Protlet 的 Web 应用，Spring5 中已经不存在了。\"]},\"798\":{\"h\":\"14.Spring 中的单例 Bean 会存在线程安全问题吗？\",\"t\":[\"首先结论在这：Spring 中的单例 Bean不是线程安全的。\",\"因为单例 Bean，是全局只有一个 Bean，所有线程共享。如果说单例 Bean，是一个无状态的，也就是线程中的操作不会对 Bean 中的成员变量执行查询以外的操作，那么这个单例 Bean 是线程安全的。比如 Spring mvc 的 Controller、Service、Dao 等，这些 Bean 大多是无状态的，只关注于方法本身。\",\"假如这个 Bean 是有状态的，也就是会对 Bean 中的成员变量进行写操作，那么可能就存在线程安全的问题。\",\"单例 Bean 线程安全问题怎么解决呢？\",\"常见的有这么些解决办法：\",\"将 Bean 定义为多例\",\"这样每一个线程请求过来都会创建一个新的 Bean，但是这样容器就不好管理 Bean，不能这么办。\",\"在 Bean 对象中尽量避免定义可变的成员变量\",\"削足适履了属于是，也不能这么干。\",\"将 Bean 中的成员变量保存在 ThreadLocal 中 ⭐\",\"我们知道 ThredLoca 能保证多线程下变量的隔离，可以在类中定义一个 ThreadLocal 成员变量，将需要的可变成员变量保存在 ThreadLocal 里，这是推荐的一种方式。\"]},\"799\":{\"h\":\"15.说说循环依赖?\",\"t\":[\"什么是循环依赖？\",\"Spring 循环依赖：简单说就是自己依赖自己，或者和别的 Bean 相互依赖。\",\"只有单例的 Bean 才存在循环依赖的情况，原型(Prototype)情况下，Spring 会直接抛出异常。原因很简单，AB 循环依赖，A 实例化的时候，发现依赖 B，创建 B 实例，创建 B 的时候发现需要 A，创建 A1 实例……无限套娃，直接把系统干垮。\",\"Spring 可以解决哪些情况的循环依赖？\",\"Spring 不支持基于构造器注入的循环依赖，但是假如 AB 循环依赖，如果一个是构造器注入，一个是 setter 注入呢？\",\"看看几种情形：\",\"第四种可以而第五种不可以的原因是 Spring 在创建 Bean 时默认会根据自然排序进行创建，所以 A 会先于 B 进行创建。\",\"所以简单总结，当循环依赖的实例都采用 setter 方法注入的时候，Spring 可以支持，都采用构造器注入的时候，不支持，构造器注入和 setter 注入同时存在的时候，看天。\"]},\"800\":{\"h\":\"16.那 Spring 怎么解决循环依赖的呢？\",\"t\":[\"PS：其实正确答案是开发人员做好设计，别让 Bean 循环依赖，但是没办法，面试官不想听这个。\",\"我们都知道，单例 Bean 初始化完成，要经历三步：\",\"注入就发生在第二步，属性赋值，结合这个过程，Spring 通过三级缓存解决了循环依赖：\",\"一级缓存 : Map<String,Object>singletonObjects，单例池，用于保存实例化、属性赋值（注入）、初始化完成的 bean 实例\",\"二级缓存 : Map<String,Object>earlySingletonObjects，早期曝光对象，用于保存实例化完成的 bean 实例\",\"三级缓存 : Map<String,ObjectFactory<?>>singletonFactories，早期曝光对象工厂，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象。\",\"我们来看一下三级缓存解决循环依赖的过程：\",\"当 A、B 两个类发生循环依赖时： \",\"A 实例的初始化过程：\",\"创建 A 实例，实例化的时候把 A 对象⼯⼚放⼊三级缓存，表示 A 开始实例化了，虽然我这个对象还不完整，但是先曝光出来让大家知道\",\"A 注⼊属性时，发现依赖 B，此时 B 还没有被创建出来，所以去实例化 B\",\"同样，B 注⼊属性时发现依赖 A，它就会从缓存里找 A 对象。依次从⼀级到三级缓存查询 A，从三级缓存通过对象⼯⼚拿到 A，发现 A 虽然不太完善，但是存在，把 A 放⼊⼆级缓存，同时删除三级缓存中的 A，此时，B 已经实例化并且初始化完成，把 B 放入⼀级缓存。\",\"接着 A 继续属性赋值，顺利从⼀级缓存拿到实例化且初始化完成的 B 对象，A 对象创建也完成，删除⼆级缓存中的 A，同时把 A 放⼊⼀级缓存\",\"最后，⼀级缓存中保存着实例化、初始化都完成的 A、B 对象\",\"所以，我们就知道为什么 Spring 能解决 setter 注入的循环依赖了，因为实例化和属性赋值是分开的，所以里面有操作的空间。如果都是构造器注入的化，那么都得在实例化这一步完成注入，所以自然是无法支持了。\"]},\"801\":{\"h\":\"17.为什么要三级缓存？⼆级不⾏吗？\",\"t\":[\"不行，主要是为了⽣成代理对象。如果是没有代理的情况下，使用二级缓存解决循环依赖也是 OK 的。但是如果存在代理，三级没有问题，二级就不行了。\",\"因为三级缓存中放的是⽣成具体对象的匿名内部类，获取 Object 的时候，它可以⽣成代理对象，也可以返回普通对象。使⽤三级缓存主要是为了保证不管什么时候使⽤的都是⼀个对象。\",\"假设只有⼆级缓存的情况，往⼆级缓存中放的显示⼀个普通的 Bean 对象，Bean 初始化过程中，通过 BeanPostProcessor 去⽣成代理对象之后，覆盖掉⼆级缓存中的普通 Bean 对象，那么可能就导致取到的 Bean 对象不一致了。\"]},\"802\":{\"h\":\"18.@Autowired 的实现原理？\",\"t\":[\"实现@Autowired 的关键是：AutowiredAnnotationBeanPostProcessor\",\"在 Bean 的初始化阶段，会通过 Bean 后置处理器来进行一些前置和后置的处理。\",\"实现@Autowired 的功能，也是通过后置处理器来完成的。这个后置处理器就是 AutowiredAnnotationBeanPostProcessor。\",\"Spring 在创建 bean 的过程中，最终会调用到 doCreateBean()方法，在 doCreateBean()方法中会调用 populateBean()方法，来为 bean 进行属性填充，完成自动装配等工作。\",\"在 populateBean()方法中一共调用了两次后置处理器，第一次是为了判断是否需要属性填充，如果不需要进行属性填充，那么就会直接进行 return，如果需要进行属性填充，那么方法就会继续向下执行，后面会进行第二次后置处理器的调用，这个时候，就会调用到 AutowiredAnnotationBeanPostProcessor 的 postProcessPropertyValues()方法，在该方法中就会进行@Autowired 注解的解析，然后实现自动装配。\",\"/** * 属性赋值 **/ protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) { //………… if (hasInstAwareBpps) { if (pvs == null) { pvs = mbd.getPropertyValues(); } PropertyValues pvsToUse; for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) { InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next(); pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName); if (pvsToUse == null) { if (filteredPds == null) { filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching); } //执行后处理器，填充属性，完成自动装配 //调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues()方法 pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName); if (pvsToUse == null) { return; } } } } //………… } \",\"postProcessorPropertyValues()方法的源码如下，在该方法中，会先调用 findAutowiringMetadata()方法解析出 bean 中带有@Autowired 注解、@Inject 和@Value 注解的属性和方法。然后调用 metadata.inject()方法，进行属性填充。\",\" public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) { //@Autowired注解、@Inject和@Value注解的属性和方法 InjectionMetadata metadata = this.findAutowiringMetadata(beanName, bean.getClass(), pvs); try { //属性填充 metadata.inject(bean, beanName, pvs); return pvs; } catch (BeanCreationException var6) { throw var6; } catch (Throwable var7) { throw new BeanCreationException(beanName, \\\"Injection of autowired dependencies failed\\\", var7); } } \",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"803\":{\"h\":\"AOP\"},\"804\":{\"h\":\"19.说说什么是 AOP？\",\"t\":[\"AOP：面向切面编程。简单说，就是把一些业务逻辑中的相同的代码抽取到一个独立的模块中，让业务逻辑更加清爽。\",\"具体来说，假如我现在要 crud 写一堆业务，可是如何业务代码前后前后进行打印日志和参数的校验呢？\",\"我们可以把日志记录和数据校验可重用的功能模块分离出来，然后在程序的执行的合适的地方动态地植入这些代码并执行。这样就简化了代码的书写。\",\"业务逻辑代码中没有参和通用逻辑的代码，业务模块更简洁，只包含核心业务代码。实现了业务逻辑和通用逻辑的代码分离，便于维护和升级，降低了业务逻辑和通用逻辑的耦合性。\",\"AOP 可以将遍布应用各处的功能分离出来形成可重用的组件。在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能。从而实现对业务逻辑的隔离，提高代码的模块化能力。\",\"AOP 的核心其实就是动态代理，如果是实现了接口的话就会使用 JDK 动态代理，否则使用 CGLIB 代理，主要应用于处理一些具有横切性质的系统级服务，如日志收集、事务管理、安全检查、缓存、对象池管理等。\",\"AOP 有哪些核心概念？\",\"切面（Aspect）：类是对物体特征的抽象，切面就是对横切关注点的抽象\",\"连接点（Joinpoint）：被拦截到的点，因为 Spring 只支持方法类型的连接点，所以在 Spring 中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\",\"切点（Pointcut）：对连接点进行拦截的定位\",\"通知（Advice）：所谓通知指的就是指拦截到连接点之后要执行的代码，也可以称作增强\",\"目标对象 （Target）：代理的目标对象\",\"织入（Weabing）：织入是将增强添加到目标类的具体连接点上的过程。\",\"编译期织入：切面在目标类编译时被织入\",\"类加载期织入：切面在目标类加载到 JVM 时被织入。需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码。\",\"运行期织入：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP 容器会为目标对象动态地创建一个代理对象。SpringAOP 就是以这种方式织入切面。\",\"Spring 采用运行期织入，而 AspectJ 采用编译期织入和类加载器织入。\",\"引介（introduction）：引介是一种特殊的增强，可以动态地为类添加一些属性和方法\",\"AOP 有哪些环绕方式？\",\"AOP 一般有 5 种环绕方式：\",\"前置通知 (@Before)\",\"返回通知 (@AfterReturning)\",\"异常通知 (@AfterThrowing)\",\"后置通知 (@After)\",\"环绕通知 (@Around)\",\"多个切面的情况下，可以通过 @Order 指定先后顺序，数字越小，优先级越高。\"]},\"805\":{\"h\":\"20.说说你平时有用到 AOP 吗？\",\"t\":[\"PS：这道题老三的同事面试候选人的时候问到了，候选人说了一堆 AOP 原理，同事就势来一句，你能现场写一下 AOP 的应用吗？结果——场面一度很尴尬。虽然我对面试写这种百度就能出来的东西持保留意见，但是还是加上了这一问，毕竟招人最后都是要撸代码的。\",\"这里给出一个小例子，SpringBoot 项目中，利用 AOP 打印接口的入参和出参日志，以及执行时间，还是比较快捷的。\",\"引入依赖：引入 AOP 依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> \",\"自定义注解：自定义一个注解作为切点\",\"@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) @Documented public @interface WebLog { } \",\"配置 AOP 切面：\",\"@Aspect：标识切面\",\"@Pointcut：设置切点，这里以自定义注解为切点，定义切点有很多其它种方式，自定义注解是比较常用的一种。\",\"@Before：在切点之前织入，打印了一些入参信息\",\"@Around：环绕切点，打印返回参数和接口执行时间\",\"@Aspect @Component public class WebLogAspect { private final static Logger logger = LoggerFactory.getLogger(WebLogAspect.class); /** * 以自定义 @WebLog 注解为切点 **/ @Pointcut(\\\"@annotation(cn.fighter3.spring.aop_demo.WebLog)\\\") public void webLog() {} /** * 在切点之前织入 */ @Before(\\\"webLog()\\\") public void doBefore(JoinPoint joinPoint) throws Throwable { // 开始打印请求日志 ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes(); HttpServletRequest request = attributes.getRequest(); // 打印请求相关参数 logger.info(\\\"========================================== Start ==========================================\\\"); // 打印请求 url logger.info(\\\"URL : {}\\\", request.getRequestURL().toString()); // 打印 Http method logger.info(\\\"HTTP Method : {}\\\", request.getMethod()); // 打印调用 controller 的全路径以及执行方法 logger.info(\\\"Class Method : {}.{}\\\", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName()); // 打印请求的 IP logger.info(\\\"IP : {}\\\", request.getRemoteAddr()); // 打印请求入参 logger.info(\\\"Request Args : {}\\\",new ObjectMapper().writeValueAsString(joinPoint.getArgs())); } /** * 在切点之后织入 * @throws Throwable */ @After(\\\"webLog()\\\") public void doAfter() throws Throwable { // 结束后打个分隔线，方便查看 logger.info(\\\"=========================================== End ===========================================\\\"); } /** * 环绕 */ @Around(\\\"webLog()\\\") public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { //开始时间 long startTime = System.currentTimeMillis(); Object result = proceedingJoinPoint.proceed(); // 打印出参 logger.info(\\\"Response Args : {}\\\", new ObjectMapper().writeValueAsString(result)); // 执行耗时 logger.info(\\\"Time-Consuming : {} ms\\\", System.currentTimeMillis() - startTime); return result; } } \",\"使用：只需要在接口上加上自定义注解\",\" @GetMapping(\\\"/hello\\\") @WebLog(desc = \\\"这是一个欢迎接口\\\") public String hello(String name){ return \\\"Hello \\\"+name; } \",\"执行结果：可以看到日志打印了入参、出参和执行时间 \"]},\"806\":{\"h\":\"21.说说 JDK 动态代理和 CGLIB 代理 ？\",\"t\":[\"Spring 的 AOP 是通过动态代理来实现的，动态代理主要有两种方式 JDK 动态代理和 Cglib 动态代理，这两种动态代理的使用和原理有些不同。\",\"JDK 动态代理\",\"Interface：对于 JDK 动态代理，目标类需要实现一个 Interface。\",\"InvocationHandler：InvocationHandler 是一个接口，可以通过实现这个接口，定义横切逻辑，再通过反射机制（invoke）调用目标类的代码，在次过程，可能包装逻辑，对目标方法进行前置后置处理。\",\"Proxy：Proxy 利用 InvocationHandler 动态创建一个符合目标类实现的接口的实例，生成目标类的代理对象。\",\"CgLib 动态代理\",\"使用 JDK 创建代理有一大限制，它只能为接口创建代理实例，而 CgLib 动态代理就没有这个限制。\",\"CgLib 动态代理是使用字节码处理框架 ASM，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。\",\"CgLib 创建的动态代理对象性能比 JDK 创建的动态代理对象的性能高不少，但是 CGLib 在创建代理对象时所花费的时间却比 JDK 多得多，所以对于单例的对象，因为无需频繁创建对象，用 CGLib 合适，反之，使用 JDK 方式要更为合适一些。同时，由于 CGLib 由于是采用动态创建子类的方法，对于 final 方法，无法进行代理。\",\"我们来看一个常见的小场景，客服中转，解决用户问题：\",\"JDK 动态代理实现：\",\"接口\",\"public interface ISolver { void solve(); } \",\"目标类:需要实现对应接口\",\"public class Solver implements ISolver { @Override public void solve() { System.out.println(\\\"疯狂掉头发解决问题……\\\"); } } \",\"态代理工厂:ProxyFactory，直接用反射方式生成一个目标对象的代理对象，这里用了一个匿名内部类方式重写 InvocationHandler 方法，实现接口重写也差不多\",\"public class ProxyFactory { // 维护一个目标对象 private Object target; public ProxyFactory(Object target) { this.target = target; } // 为目标对象生成代理对象 public Object getProxyInstance() { return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"请问有什么可以帮到您？\\\"); // 调用目标对象方法 Object returnValue = method.invoke(target, args); System.out.println(\\\"问题已经解决啦！\\\"); return null; } }); } } \",\"客户端：Client，生成一个代理对象实例，通过代理对象调用目标对象方法\",\"public class Client { public static void main(String[] args) { //目标对象:程序员 ISolver developer = new Solver(); //代理：客服小姐姐 ISolver csProxy = (ISolver) new ProxyFactory(developer).getProxyInstance(); //目标方法：解决问题 csProxy.solve(); } } \",\"Cglib 动态代理实现：\",\"目标类：Solver，这里目标类不用再实现接口。\",\"public class Solver { public void solve() { System.out.println(\\\"疯狂掉头发解决问题……\\\"); } } \",\"动态代理工厂：\",\"public class ProxyFactory implements MethodInterceptor { //维护一个目标对象 private Object target; public ProxyFactory(Object target) { this.target = target; } //为目标对象生成代理对象 public Object getProxyInstance() { //工具类 Enhancer en = new Enhancer(); //设置父类 en.setSuperclass(target.getClass()); //设置回调函数 en.setCallback(this); //创建子类对象代理 return en.create(); } @Override public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { System.out.println(\\\"请问有什么可以帮到您？\\\"); // 执行目标对象的方法 Object returnValue = method.invoke(target, args); System.out.println(\\\"问题已经解决啦！\\\"); return null; } } \",\"客户端：Client\",\"public class Client { public static void main(String[] args) { //目标对象:程序员 Solver developer = new Solver(); //代理：客服小姐姐 Solver csProxy = (Solver) new ProxyFactory(developer).getProxyInstance(); //目标方法：解决问题 csProxy.solve(); } } \"]},\"807\":{\"h\":\"22.说说 Spring AOP 和 AspectJ AOP 区别?\",\"t\":[\"Spring AOP\",\"Spring AOP 属于运行时增强，主要具有如下特点：\",\"基于动态代理来实现，默认如果使用接口的，用 JDK 提供的动态代理实现，如果是方法则使用 CGLIB 实现\",\"Spring AOP 需要依赖 IOC 容器来管理，并且只能作用于 Spring 容器，使用纯 Java 代码实现\",\"在性能上，由于 Spring AOP 是基于动态代理来实现的，在容器启动时需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 的那么好。\",\"Spring AOP 致力于解决企业级开发中最普遍的 AOP(方法织入)。\",\"AspectJ\",\"AspectJ 是一个易用的功能强大的 AOP 框架，属于编译时增强， 可以单独使用，也可以整合到其它框架中，是 AOP 编程的完全解决方案。AspectJ 需要用到单独的编译器 ajc。\",\"AspectJ 属于静态织入，通过修改代码来实现，在实际运行之前就完成了织入，所以说它生成的类是没有额外运行时开销的，一般有如下几个织入的时机：\",\"编译期织入（Compile-time weaving）：如类 A 使用 AspectJ 添加了一个属性，类 B 引用了它，这个场景就需要编译期的时候就进行织入，否则没法编译类 B。\",\"编译后织入（Post-compile weaving）：也就是已经生成了 .class 文件，或已经打成 jar 包了，这种情况我们需要增强处理的话，就要用到编译后织入。\",\"类加载后织入（Load-time weaving）：指的是在加载类的时候进行织入，要实现这个时期的织入，有几种常见的方法\",\"整体对比如下：\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"808\":{\"h\":\"事务\",\"t\":[\"Spring 事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，Spring 是无法提供事务功能的。Spring 只提供统一事务管理接口，具体实现都是由各数据库自己实现，数据库事务的提交和回滚是通过数据库自己的事务机制实现。\"]},\"809\":{\"h\":\"23.Spring 事务的种类？\",\"t\":[\"Spring 支持编程式事务管理和声明式事务管理两种方式：\",\"编程式事务\",\"编程式事务管理使用 TransactionTemplate，需要显式执行事务。\",\"声明式事务\",\"声明式事务管理建立在 AOP 之上的。其本质是通过 AOP 功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前启动一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务\",\"优点是不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明或通过 @Transactional 注解的方式，便可以将事务规则应用到业务逻辑中，减少业务代码的污染。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。\"]},\"810\":{\"h\":\"24.Spring 的事务隔离级别？\",\"t\":[\"Spring 的接口 TransactionDefinition 中定义了表示隔离级别的常量，当然其实主要还是对应数据库的事务隔离级别：\",\"ISOLATION_DEFAULT：使用后端数据库默认的隔离界别，MySQL 默认可重复读，Oracle 默认读已提交。\",\"ISOLATION_READ_UNCOMMITTED：读未提交\",\"ISOLATION_READ_COMMITTED：读已提交\",\"ISOLATION_REPEATABLE_READ：可重复读\",\"ISOLATION_SERIALIZABLE：串行化\"]},\"811\":{\"h\":\"25.Spring 的事务传播机制？\",\"t\":[\"Spring 事务的传播机制说的是，当多个事务同时存在的时候——一般指的是多个事务方法相互调用时，Spring 如何处理这些事务的行为。\",\"事务传播机制是使用简单的 ThreadLocal 实现的，所以，如果调用的方法是在新线程调用的，事务传播实际上是会失效的。\",\"Spring 默认的事务传播行为是 PROPAFATION_REQUIRED，它适合绝大多数情况，如果多个 ServiceX#methodX()都工作在事务环境下（均被 Spring 事务增强），且程序中存在调用链 Service1#method1()->Service2#method2()->Service3#method3()，那么这 3 个服务类的三个方法通过 Spring 的事务传播机制都工作在同一个事务中。\"]},\"812\":{\"h\":\"26.声明式事务实现原理了解吗？\",\"t\":[\"就是通过 AOP/动态代理。\",\"在 Bean 初始化阶段创建代理对象：Spring 容器在初始化每个单例 bean 的时候，会遍历容器中的所有 BeanPostProcessor 实现类，并执行其 postProcessAfterInitialization 方法，在执行 AbstractAutoProxyCreator 类的 postProcessAfterInitialization 方法时会遍历容器中所有的切面，查找与当前实例化 bean 匹配的切面，这里会获取事务属性切面，查找@Transactional 注解及其属性值，然后根据得到的切面创建一个代理对象，默认是使用 JDK 动态代理创建代理，如果目标类是接口，则使用 JDK 动态代理，否则使用 Cglib。\",\"在执行目标方法时进行事务增强操作：当通过代理对象调用 Bean 方法的时候，会触发对应的 AOP 增强拦截器，声明式事务是一种环绕增强，对应接口为MethodInterceptor，事务增强对该接口的实现为TransactionInterceptor，类图如下：\",\"事务拦截器TransactionInterceptor在invoke方法中，通过调用父类TransactionAspectSupport的invokeWithinTransaction方法进行事务处理，包括开启事务、事务提交、异常回滚。\"]},\"813\":{\"h\":\"27.声明式事务在哪些情况下会失效？\",\"t\":[\"1、@Transactional 应用在非 public 修饰的方法上\",\"如果 Transactional 注解应用在非 public 修饰的方法上，Transactional 将会失效。\",\"是因为在 Spring AOP 代理时，TransactionInterceptor （事务拦截器）在目标方法执行前后进行拦截，DynamicAdvisedInterceptor（CglibAopProxy 的内部类）的 intercept 方法 或 JdkDynamicAopProxy 的 invoke 方法会间接调用 AbstractFallbackTransactionAttributeSource 的 computeTransactionAttribute方法，获取 Transactional 注解的事务配置信息。\",\"protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) { // Don't allow no-public methods as required. if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) { return null; } \",\"此方法会检查目标方法的修饰符是否为 public，不是 public 则不会获取@Transactional 的属性配置信息。\",\"2、@Transactional 注解属性 propagation 设置错误\",\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\",\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\",\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\",\"3、@Transactional 注解属性 rollbackFor 设置错误\",\"rollbackFor 可以指定能够触发事务回滚的异常类型。Spring 默认抛出了未检查 unchecked 异常（继承自 RuntimeException 的异常）或者 Error 才回滚事务，其他异常不会触发回滚事务。\",\"// 希望自定义的异常可以进行回滚 @Transactional(propagation= Propagation.REQUIRED,rollbackFor= MyException.class \",\"若在目标方法中抛出的异常是 rollbackFor 指定的异常的子类，事务同样会回滚。\",\"4、同一个类中方法调用，导致@Transactional 失效\",\"开发中避免不了会对同一个类里面的方法调用，比如有一个类 Test，它的一个方法 A，A 再调用本类的方法 B（不论方法 B 是用 public 还是 private 修饰），但方法 A 没有声明注解事务，而 B 方法有。则外部调用方法 A 之后，方法 B 的事务是不会起作用的。这也是经常犯错误的一个地方。\",\"那为啥会出现这种情况？其实这还是由于使用 Spring AOP 代理造成的，因为只有当事务方法被当前类以外的代码调用时，才会由 Spring 生成的代理对象来管理。\",\" //@Transactional @GetMapping(\\\"/test\\\") private Integer A() throws Exception { CityInfoDict cityInfoDict = new CityInfoDict(); cityInfoDict.setCityName(\\\"2\\\"); /** * B 插入字段为 3的数据 */ this.insertB(); /** * A 插入字段为 2的数据 */ int insert = cityInfoDictMapper.insert(cityInfoDict); return insert; } @Transactional() public Integer insertB() throws Exception { CityInfoDict cityInfoDict = new CityInfoDict(); cityInfoDict.setCityName(\\\"3\\\"); cityInfoDict.setParentCityId(3); return cityInfoDictMapper.insert(cityInfoDict); } \",\"这种情况是最常见的一种@Transactional 注解失效场景\",\"@Transactional private Integer A() throws Exception { int insert = 0; try { CityInfoDict cityInfoDict = new CityInfoDict(); cityInfoDict.setCityName(\\\"2\\\"); cityInfoDict.setParentCityId(2); /** * A 插入字段为 2的数据 */ insert = cityInfoDictMapper.insert(cityInfoDict); /** * B 插入字段为 3的数据 */ b.insertB(); } catch (Exception e) { e.printStackTrace(); } } \",\"如果 B 方法内部抛了异常，而 A 方法此时 try catch 了 B 方法的异常，那这个事务就不能正常回滚了，会抛出异常：\",\"org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only \",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"814\":{\"h\":\"MVC\"},\"815\":{\"h\":\"28.Spring MVC 的核心组件？\",\"t\":[\"DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。\",\"Handler：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。\",\"HandlerMapping：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。\",\"HandlerInterceptor：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。\",\"HandlerExecutionChain：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。\",\"HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。\",\"ModelAndView：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。\",\"ViewResolver：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。\"]},\"816\":{\"h\":\"29.Spring MVC 的工作流程？\",\"t\":[\"客户端向服务端发送一次请求，这个请求会先到前端控制器 DispatcherServlet(也叫中央控制器)。\",\"DispatcherServlet 接收到请求后会调用 HandlerMapping 处理器映射器。由此得知，该请求该由哪个 Controller 来处理（并未调用 Controller，只是得知）\",\"DispatcherServlet 调用 HandlerAdapter 处理器适配器，告诉处理器适配器应该要去执行哪个 Controller\",\"HandlerAdapter 处理器适配器去执行 Controller 并得到 ModelAndView(数据和视图)，并层层返回给 DispatcherServlet\",\"DispatcherServlet 将 ModelAndView 交给 ViewReslover 视图解析器解析，然后返回真正的视图。\",\"DispatcherServlet 将模型数据填充到视图中\",\"DispatcherServlet 将结果响应给客户端\",\"Spring MVC 虽然整体流程复杂，但是实际开发中很简单，大部分的组件不需要开发人员创建和管理，只需要通过配置文件的方式完成配置即可，真正需要开发人员进行处理的只有 Handler（Controller） 、View 、Model。\",\"当然我们现在大部分的开发都是前后端分离，Restful 风格接口，后端只需要返回 Json 数据就行了。\"]},\"817\":{\"h\":\"30.SpringMVC Restful 风格的接口的流程是什么样的呢？\",\"t\":[\"PS:这是一道全新的八股，毕竟 ModelAndView 这种方式应该没人用了吧？现在都是前后端分离接口，八股也该更新换代了。\",\"我们都知道 Restful 接口，响应格式是 json，这就用到了一个常用注解：@ResponseBody\",\" @GetMapping(\\\"/user\\\") @ResponseBody public User user(){ return new User(1,\\\"张三\\\"); } \",\"加入了这个注解后，整体的流程上和使用 ModelAndView 大体上相同，但是细节上有一些不同：\",\"客户端向服务端发送一次请求，这个请求会先到前端控制器 DispatcherServlet\",\"DispatcherServlet 接收到请求后会调用 HandlerMapping 处理器映射器。由此得知，该请求该由哪个 Controller 来处理\",\"DispatcherServlet 调用 HandlerAdapter 处理器适配器，告诉处理器适配器应该要去执行哪个 Controller\",\"Controller 被封装成了 ServletInvocableHandlerMethod，HandlerAdapter 处理器适配器去执行 invokeAndHandle 方法，完成对 Controller 的请求处理\",\"HandlerAdapter 执行完对 Controller 的请求，会调用 HandlerMethodReturnValueHandler 去处理返回值，主要的过程：\",\"5.1. 调用 RequestResponseBodyMethodProcessor，创建 ServletServerHttpResponse（Spring 对原生 ServerHttpResponse 的封装）实例\",\"5.2.使用 HttpMessageConverter 的 write 方法，将返回值写入 ServletServerHttpResponse 的 OutputStream 输出流中\",\"5.3.在写入的过程中，会使用 JsonGenerator（默认使用 Jackson 框架）对返回值进行 Json 序列化\",\"执行完请求后，返回的 ModealAndView 为 null，ServletServerHttpResponse 里也已经写入了响应，所以不用关心 View 的处理\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"818\":{\"h\":\"Spring Boot\"},\"819\":{\"h\":\"31.介绍一下 SpringBoot，有哪些优点？\",\"t\":[\"Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。\",\"Spring Boot 以约定大于配置核心思想开展工作，相比 Spring 具有如下优势：\",\"Spring Boot 可以快速创建独立的 Spring 应用程序。\",\"Spring Boot 内嵌了如 Tomcat，Jetty 和 Undertow 这样的容器，也就是说可以直接跑起来，用不着再做部署工作了。\",\"Spring Boot 无需再像 Spring 一样使用一堆繁琐的 xml 文件配置。\",\"Spring Boot 可以自动配置(核心)Spring。SpringBoot 将原有的 XML 配置改为 Java 配置，将 bean 注入改为使用注解注入的方式(@Autowire)，并将多个 xml、properties 配置浓缩在一个 appliaction.yml 配置文件中。\",\"Spring Boot 提供了一些现有的功能，如量度工具，表单数据验证以及一些外部配置这样的一些第三方功能。\",\"Spring Boot 可以快速整合常用依赖（开发库，例如 spring-webmvc、jackson-json、validation-api 和 tomcat 等），提供的 POM 可以简化 Maven 的配置。当我们引入核心依赖时，SpringBoot 会自引入其他依赖。\"]},\"820\":{\"h\":\"32.SpringBoot 自动配置原理了解吗？\",\"t\":[\"SpringBoot 开启自动配置的注解是@EnableAutoConfiguration ，启动类上的注解@SpringBootApplication是一个复合注解，包含了@EnableAutoConfiguration：\",\"EnableAutoConfiguration 只是一个简单的注解，自动装配核心功能的实现实际是通过 AutoConfigurationImportSelector类\",\"@AutoConfigurationPackage //将main同级的包下的所有组件注册到容器中 @Import({AutoConfigurationImportSelector.class}) //加载自动装配类 xxxAutoconfiguration public @interface EnableAutoConfiguration { String ENABLED_OVERRIDE_PROPERTY = \\\"spring.boot.enableautoconfiguration\\\"; Class<?>[] exclude() default {}; String[] excludeName() default {}; } \",\"AutoConfigurationImportSelector实现了ImportSelector接口，这个接口的作用就是收集需要导入的配置类，配合@Import(）就可以将相应的类导入到 Spring 容器中\",\"获取注入类的方法是 selectImports()，它实际调用的是getAutoConfigurationEntry，这个方法是获取自动装配类的关键，主要流程可以分为这么几步：\",\"获取注解的属性，用于后面的排除\",\"获取所有需要自动装配的配置类的路径：这一步是最关键的，从 META-INF/spring.factories 获取自动配置类的路径\",\"去掉重复的配置类和需要排除的重复类，把需要自动加载的配置类的路径存储起来\",\" protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) { if (!this.isEnabled(annotationMetadata)) { return EMPTY_ENTRY; } else { //1.获取到注解的属性 AnnotationAttributes attributes = this.getAttributes(annotationMetadata); //2.获取需要自动装配的所有配置类，读取META-INF/spring.factories，获取自动配置类路径 List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes); //3.1.移除重复的配置 configurations = this.removeDuplicates(configurations); //3.2.处理需要排除的配置 Set<String> exclusions = this.getExclusions(annotationMetadata, attributes); this.checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = this.getConfigurationClassFilter().filter(configurations); this.fireAutoConfigurationImportEvents(configurations, exclusions); return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions); } } \"]},\"821\":{\"h\":\"33.如何自定义一个 SpringBoot Srarter?\",\"t\":[\"知道了自动配置原理，创建一个自定义 SpringBoot Starter 也很简单。\",\"创建一个项目，命名为 demo-spring-boot-starter，引入 SpringBoot 相关依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> \",\"编写配置文件\",\"这里定义了属性配置的前缀\",\"@ConfigurationProperties(prefix = \\\"hello\\\") public class HelloProperties { private String name; //省略getter、setter } \",\"自动装配\",\"创建自动配置类 HelloPropertiesConfigure\",\"@Configuration @EnableConfigurationProperties(HelloProperties.class) public class HelloPropertiesConfigure { } \",\"配置自动类\",\"在/resources/META-INF/spring.factories文件中添加自动配置类路径\",\"org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\ cn.fighter3.demo.starter.configure.HelloPropertiesConfigure \",\"测试\",\"创建一个工程，引入自定义 starter 依赖\",\" <dependency> <groupId>cn.fighter3</groupId> <artifactId>demo-spring-boot-starter</artifactId> <version>0.0.1-SNAPSHOT</version> </dependency> \",\"在配置文件里添加配置\",\"hello.name=张三 \",\"测试类\",\"@RunWith(SpringRunner.class) @SpringBootTest public class HelloTest { @Autowired HelloProperties helloProperties; @Test public void hello(){ System.out.println(\\\"你好，\\\"+helloProperties.getName()); } } \",\"运行结果\",\"至此，随手写的一个自定义 SpringBoot-Starter 就完成了，虽然比较简单，但是完成了主要的自动装配的能力。\"]},\"822\":{\"h\":\"34.Springboot 启动原理？\",\"t\":[\"SpringApplication 这个类主要做了以下四件事情：\",\"推断应用的类型是普通的项目还是 Web 项目\",\"查找并加载所有可用初始化器 ， 设置到 initializers 属性中\",\"找出所有的应用程序监听器，设置到 listeners 属性中\",\"推断并设置 main 方法的定义类，找到运行的主类\",\"SpringBoot 启动大致流程如下 ：\"]},\"823\":{\"h\":\"Spring Cloud\"},\"824\":{\"h\":\"35.对 SpringCloud 了解多少？\",\"t\":[\"SpringCloud 是 Spring 官方推出的微服务治理框架。\",\"什么是微服务？\",\"2014 年 Martin Fowler 提出的一种新的架构形式。微服务架构是一种架构模式，提倡将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制(如 HTTP 或 Dubbo)互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具(如 Maven)对其进行构建。\",\"微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。\",\"微服务架构主要要解决哪些问题？\",\"服务很多，客户端怎么访问，如何提供对外网关?\",\"这么多服务，服务之间如何通信? HTTP 还是 RPC?\",\"这么多服务，如何治理? 服务的注册和发现。\",\"服务挂了怎么办？熔断机制。\",\"有哪些主流微服务框架？\",\"Spring Cloud Netflix\",\"Spring Cloud Alibaba\",\"SpringBoot + Dubbo + ZooKeeper\",\"SpringCloud 有哪些核心组件？\",\"PS:微服务后面有机会再扩展，其实面试一般都是结合项目去问。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\",\"图文详解 35 道Spring面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"825\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1.3 万字 63 张手绘图，详解 35 道 Spring 面试高频题（让天下没有难背的八股），面渣背会这些 Spring 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/spring.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.3 万字 63 张手绘图，详解 35 道 Spring 面试高频题（让天下没有难背的八股），面渣背会这些 Spring 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"826\":{\"h\":\"\",\"t\":[\"1.4 万字 33 张手绘图，详解 33 道微服务（Dubbo、Spring Cloud）面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"827\":{\"h\":\"概览\"},\"828\":{\"h\":\"1.什么是微服务？\",\"t\":[\"微服务（Microservices）是一种软件架构风格，将一个大型应用程序划分为一组小型、自治且松耦合的服务。每个微服务负责执行特定的业务功能，并通过轻量级通信机制（如HTTP）相互协作。每个微服务可以独立开发、部署和扩展，使得应用程序更加灵活、可伸缩和可维护。\",\"在微服务的架构演进中，一般可能会存在这样的演进方向：单体式-->服务化-->微服务。\",\"单体服务一般是所有项目最开始的样子：\",\"单体服务（Monolithic Service）是一种传统的软件架构方式，将整个应用程序作为一个单一的、紧耦合的单元进行开发和部署。单体服务通常由多个模块组成，这些模块共享同一个数据库和代码库。然而，随着应用程序规模的增长，单体服务可能变得庞大且难以维护，且部署和扩展困难。\",\"后来，单体服务过大，维护困难，渐渐演变到了分布式的SOA：\",\"SOA（Service-Oriented Architecture，面向服务的架构）是一种软件架构设计原则，强调将应用程序拆分为相互独立的服务，通过标准化的接口进行通信。SOA关注于服务的重用性和组合性，但并没有具体规定服务的大小。\",\"微服务是在SOA的基础上进一步发展而来，是一种特定规模下的服务拆分和部署方式。微服务架构强调将应用程序拆分为小型、自治且松耦合的服务，每个服务都专注于特定的业务功能。这种架构使得应用程序更加灵活、可伸缩和可维护。\",\"需要注意的是，微服务是一种特定的架构风格，而SOA是一种设计原则。微服务可以看作是对SOA思想的一种具体实践方式，但并不等同于SOA。\",\"微服务与单体服务的区别在于规模和部署方式。微服务将应用程序拆分为更小的、自治的服务单元，每个服务都有自己的数据库和代码库，可以独立开发、测试、部署和扩展，带来了更大的灵活性、可维护性、可扩展性和容错性。\"]},\"829\":{\"h\":\"2.微服务带来了哪些挑战？\",\"t\":[\"微服务架构不是万金油，尽它有很多优点，但是对于是否采用微服务架构，是否将原来的单体服务进行拆分，还是要考虑到服务拆分后可能带来的一些挑战和问题：\",\"系统复杂性增加：一个服务拆成了多个服务，整体系统的复杂性增加，需要处理服务之间的通信、部署、监控和维护等方面的复杂性。\",\"服务间通信开销：微服务之间通过网络进行通信，传递数据需要额外的网络开销和序列化开销，可能导致性能瓶颈和增加系统延迟。\",\"数据一致性和事务管理：每个微服务都有自己的数据存储，数据一致性和跨服务的事务管理变得更加复杂，需要额外解决分布式事务和数据同步的问题。\",\"部署和运维复杂性：微服务架构涉及多个独立部署的服务，对于部署、监控和容错机制的要求更高，需要建立适当的部署管道和自动化工具，以简化部署和运维过程。\",\"团队沟通和协作成本：每个微服务都由专门的团队负责，可能增加团队之间的沟通和协作成本。需要有效的沟通渠道和协作机制，确保服务之间的协调和一致性。\",\"服务治理和版本管理：随着微服务数量的增加，服务的治理和版本管理变得更加复杂。需要考虑服务的注册发现、负载均衡、监控和故障处理等方面，以确保整个系统的可靠性和稳定性。\",\"分布式系统的复杂性：微服务架构涉及构建和管理分布式系统，而分布式系统本身具有一些固有的挑战，如网络延迟、分布式一致性和容错性。\",\"简单说，采用微服务需要权衡这些问题和挑战，根据实际的需求来选择对应的技术方案，很多时候单体能搞定的也可以用单体，不能为了微服务而微服务。\"]},\"830\":{\"h\":\"3.现在有哪些流行的微服务解决方案？\",\"t\":[\"目前最主流的微服务开源解决方案有三种：\",\"Dubbo：\",\"Dubbo 是一个高性能、轻量级的 Java 微服务框架，最初由阿里巴巴（Alibaba）开发并于2011年开源。它提供了服务注册与发现、负载均衡、容错、分布式调用等功能，后来一度停止维护，在近两年，又重新开始迭代，并推出了Dubbo3。\",\"Dubbo 使用基于 RPC（Remote Procedure Call）的通信模型，具有较高的性能和可扩展性。它支持多种传输协议（如TCP、HTTP、Redis）和序列化方式（如JSON、Hessian、Protobuf），可根据需求进行配置。\",\"Dubbo更多地被认为是一个高性能的RPC（远程过程调用）框架，一些服务治理功能依赖于第三方组件实现，比如使用ZooKeeper、Apollo等等。\",\"Spring Cloud Netflix：\",\"Spring Cloud Netflix 是 Spring Cloud 的一个子项目，结合了 Netflix 开源的多个组件，但是Netflix自2018年停止维护和更新Netflix OSS项目，包括Eureka、Hystrix等组件，所以Spring Cloud Netflix也逐渐进入了维护模式。\",\"该项目包含了许多流行的 Netflix 组件，如Eureka（服务注册与发现）、Ribbon（客户端负载均衡）、Hystrix（断路器）、Zuul（API 网关）等。它们都是高度可扩展的、经过大规模实践验证的微服务组件。\",\"Spring Cloud Alibaba：\"]},\"831\":{\"h\":\"这三种方案有什么区别吗？\",\"t\":[\"三种方案的区别：\",\"特点\",\"Dubbo\",\"Spring Cloud Netflix\",\"Spring Cloud Alibaba\",\"开发语言\",\"Java\",\"Java\",\"Java\",\"服务治理\",\"提供完整的服务治理功能\",\"提供部分服务治理功能\",\"提供完整的服务治理功能\",\"服务注册与发现\",\"ZooKeeper/Nacos\",\"Eureka/Consul\",\"Nacos\",\"负载均衡\",\"自带负载均衡策略\",\"Ribbon\",\"Ribbon\\\\Dubbo负载均衡策略\",\"服务调用\",\"RPC方式\",\"RestTemplate/Feign\",\"Feign/RestTemplate/Dubbo\",\"熔断器\",\"Sentinel\",\"Hystrix\",\"Sentinel/Resilience4j\",\"配置中心\",\"Apollo\",\"Spring Cloud Config\",\"Nacos Config\",\"API网关\",\"Higress/APISIX\",\"Zuul/Gateway\",\"Spring Cloud Gateway\",\"分布式事务\",\"Seata\",\"不支持分布式事务\",\"Seata\",\"限流和降级\",\"Sentinel\",\"Hystrix\",\"Sentinel\",\"分布式追踪和监控\",\"Skywalking\",\"Spring Cloud Sleuth + Zipkin\",\"SkyWalking或Sentinel Dashboard\",\"微服务网格\",\"Dubbo Mesh\",\"不支持微服务网格\",\"Service Mesh（Nacos+Dubbo Mesh）\",\"社区活跃度\",\"相对较高\",\"目前较低\",\"相对较高\",\"孵化和成熟度\",\"孵化较早，成熟度较高\",\"成熟度较高\",\"孵化较新，但迅速发展\",\"Spring Cloud Alibaba 是 Spring Cloud 的另一个子项目，与阿里巴巴的分布式应用开发框架相关。它提供了一整套与 Alibaba 生态系统集成的解决方案。\",\"该项目包括 Nacos（服务注册与发现、配置管理）、Sentinel（流量控制、熔断降级）、RocketMQ（消息队列）等组件，以及与 Alibaba Cloud（阿里云）的集成。它为构建基于 Spring Cloud 的微服务架构提供了丰富的选项。\",\"据说SpringCloud Alibaba项目的发起人已经跑路去了腾讯，并发起了SpringCloud Tecent项目，社区发展存在隐忧。\",\"在面试中，微服务一般主要讨论的是Spring Cloud Netflix，其次是Spring Cloud Alibaba，Dubbo更多的是作为一个RPC框架来问。\"]},\"832\":{\"h\":\"4.说下微服务有哪些组件？\",\"t\":[\"微服务给系统开发带来了一些问题和挑战，如服务调用的复杂性、分布式事务的处理、服务的动态管理等。为了更好地解决这些问题和挑战，各种微服务治理的组件应运而生，充当微服务架构的基石和支撑。\",\"微服务的各个组件和常见实现：\",\"注册中心：用于服务的注册与发现，管理微服务的地址信息。常见的实现包括：\",\"Spring Cloud Netflix：Eureka、Consul\",\"Spring Cloud Alibaba：Nacos\",\"配置中心：用于集中管理微服务的配置信息，可以动态修改配置而不需要重启服务。常见的实现包括：\",\"Spring Cloud Netflix：Spring Cloud Config\",\"Spring Cloud Alibaba：Nacos Config\",\"远程调用：用于在不同的微服务之间进行通信和协作。常见的实现保包括：\",\"RESTful API：如RestTemplate、Feign\",\"RPC（远程过程调用）：如Dubbo、gRPC\",\"API网关：作为微服务架构的入口，统一暴露服务，并提供路由、负载均衡、安全认证等功能。常见的实现包括：\",\"Spring Cloud Netflix：Zuul、Gateway\",\"Spring Cloud Alibaba：Gateway、Apisix等\",\"分布式事务：保证跨多个微服务的一致性和原子性操作。常见的实现包括：\",\"Spring Cloud Alibaba：Seata\",\"熔断器：用于防止微服务之间的故障扩散，提高系统的容错能力。常见的实现包括：\",\"Spring Cloud Netflix：Hystrix\",\"Spring Cloud Alibaba：Sentinel、Resilience4j\",\"限流和降级：用于防止微服务过载，对请求进行限制和降级处理。常见的实现包括：\",\"Spring Cloud Netflix：Hystrix\",\"Spring Cloud Alibaba：Sentinel\",\"分布式追踪和监控：用于跟踪和监控微服务的请求流程和性能指标。常见的实现包括：\",\"Spring Cloud Netflix：Spring Cloud Sleuth + Zipkin\",\"Spring Cloud Alibaba：SkyWalking、Sentinel Dashboard\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"833\":{\"h\":\"注册中心\"},\"834\":{\"h\":\"5.注册中心是用来干什么的？\",\"t\":[\"注册中心是用来管理和维护分布式系统中各个服务的地址和元数据的组件。它主要用于实现服务发现和服务注册功能。\",\"总结一下注册中心的作用：\",\"服务注册：各个服务在启动时向注册中心注册自己的网络地址、服务实例信息和其他相关元数据。这样，其他服务就可以通过注册中心获取到当前可用的服务列表。\",\"服务发现：客户端通过向注册中心查询特定服务的注册信息，获得可用的服务实例列表。这样客户端就可以根据需要选择合适的服务进行调用，实现了服务间的解耦。\",\"负载均衡：注册中心可以对同一服务的多个实例进行负载均衡，将请求分发到不同的实例上，提高整体的系统性能和可用性。\",\"故障恢复：注册中心能够监测和检测服务的状态，当服务实例发生故障或下线时，可以及时更新注册信息，从而保证服务能够正常工作。\",\"服务治理：通过注册中心可以进行服务的配置管理、动态扩缩容、服务路由、灰度发布等操作，实现对服务的动态管理和控制。\"]},\"835\":{\"h\":\"6.SpringCloud可以选择哪些注册中心？\",\"t\":[\"SpringCloud可以与多种注册中心进行集成，常见的注册中心包括：\",\"Eureka：Eureka 是 Netflix 开源的服务发现框架，具有高可用、弹性、可扩展等特点，并与 Spring Cloud 集成良好。\",\"Consul：Consul 是一种分布式服务发现和配置管理系统，由 HashiCorp 开发。它提供了服务注册、服务发现、健康检查、键值存储等功能，并支持多数据中心部署。\",\"ZooKeeper：ZooKeeper 是 Apache 基金会开源的分布式协调服务，可以用作服务注册中心。它具有高可用、一致性、可靠性等特点。\",\"Nacos：Nacos 是阿里巴巴开源的一个动态服务发现、配置管理和服务管理平台。它提供了服务注册和发现、配置管理、动态 DNS 服务等功能。\",\"etcd：etcd 是 CoreOS 开源的一种分布式键值存储系统，可以被用作服务注册中心。它具有高可用、强一致性、分布式复制等特性。\"]},\"836\":{\"h\":\"7.说下Eureka、ZooKeeper、Nacos的区别？\",\"t\":[\"特性\",\"Eureka\",\"ZooKeeper\",\"Nacos\",\"开发公司\",\"Netflix\",\"Apache 基金会\",\"阿里巴巴\",\"CAP\",\"AP（可用性和分区容忍性）\",\"CP（一致性和分区容忍性）\",\"既支持AP，也支持CP\",\"功能\",\"服务注册与发现\",\"分布式协调、配置管理、分布式锁\",\"服务注册与发现、配置管理、服务管理\",\"定位\",\"适用于构建基于 HTTP 的微服务架构\",\"通用的分布式协调服务框架\",\"适用于微服务和云原生应用\",\"访问协议\",\"HTTP\",\"TCP\",\"HTTP/DNS\",\"自我保护\",\"支持\",\"-\",\"支持\",\"数据存储\",\"内嵌数据库、多个实例形成集群\",\"ACID 特性的分布式文件系统 ZAB 协议\",\"内嵌数据库、MySQL 等\",\"健康检查\",\"Client Beat\",\"Keep Alive\",\"TCP/HTTP/MYSQL/Client Beat\",\"特点\",\"简单易用、自我保护机制\",\"高性能、强一致性\",\"动态配置管理、流量管理、灰度发布等\",\"可以看到Eureka和ZooKeeper的最大区别是一个支持AP，一个支持CP，Nacos既支持既支持AP，也支持CP。\"]},\"837\":{\"h\":\"8.Eureka实现原理了解吗？\",\"t\":[\"Eureka的实现原理，大概可以从这几个方面来看：\",\"服务注册与发现: 当一个服务实例启动时，它会向Eureka Server发送注册请求，将自己的信息注册到注册中心。Eureka Server会将这些信息保存在内存中，并提供REST接口供其他服务查询。服务消费者可以通过查询服务实例列表来获取可用的服务提供者实例，从而实现服务的发现。\",\"服务健康检查: Eureka通过心跳机制来检测服务实例的健康状态。服务实例会定期向Eureka Server发送心跳，也就是续约，以表明自己的存活状态。如果Eureka Server在一定时间内没有收到某个服务实例的心跳，则会将其标记为不可用，并从服务列表中移除，下线实例。\",\"服务负载均衡: Eureka客户端在调用其他服务时，会从本地缓存中获取服务的注册信息。如果缓存中没有对应的信息，则会向Eureka Server发送查询请求。Eureka Server会返回一个可用的服务实例列表给客户端，客户端可以使用负载均衡算法选择其中一个进行调用。\",\"其它的注册中心，如Nacos、Consul等等，在服务注册和发现上，实现原理都是大同小异。\"]},\"838\":{\"h\":\"9.Eureka Server怎么保证高可用？\",\"t\":[\"Eureka Server保证高可用，主要通过这三个方面来实现：\",\"多实例部署: 通过将多个Eureka Server实例部署在不同的节点上，可以实现高可用性。当其中一个实例发生故障时，其他实例仍然可以提供服务，并保持注册信息的一致性。\",\"服务注册信息的复制: 当一个服务实例向Eureka Server注册时，每个Eureka Server实例都会复制其他实例的注册信息，以保持数据的一致性。当某个Eureka Server实例发生故障时，其他实例可以接管其工作，保证整个系统的正常运行。\",\"自我保护机制: Eureka还具有自我保护机制。当Eureka Server节点在一定时间内没有接收到心跳时，它会进入自我保护模式。在自我保护模式下，Eureka Server不再剔除注册表中的服务实例，以保护现有的注册信息。这样可以防止由于网络抖动或其他原因导致的误剔除，进一步提高系统的稳定性。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"839\":{\"h\":\"配置中心\"},\"840\":{\"h\":\"10.为什么微服务需要配置中心？\",\"t\":[\"微服务架构中的每个服务通常都需要一些配置信息，例如数据库连接地址、服务端口、日志级别等。这些配置可能因为不同环境、不同部署实例或者动态运行时需要进行调整和管理。\",\"微服务的实例一般非常多，如果每个实例都需要一个个地去做这些配置，那么运维成本将会非常大，这时候就需要一个集中化的配置中心，去管理这些配置。\"]},\"841\":{\"h\":\"11.SpringCloud可以选择哪些配置中心？\",\"t\":[\"和注册中心一样，SpringCloud也支持对多种配置中心的集成。常见的配置中心选型包括：\",\"Spring Cloud Config：官方推荐的配置中心，支持将配置文件存储在Git、SVN等版本控制系统中，并提供RESTful API进行访问和管理。\",\"ZooKeeper：一个开源的分布式协调服务，可以用作配置中心。它具有高可用性、一致性和通知机制等特性。\",\"Consul：另一个开源的分布式服务发现和配置管理工具，也可用作配置中心。支持多种配置文件格式，提供健康检查、故障转移和动态变更等功能。\",\"Etcd：一个分布式键值存储系统，可用作配置中心。它使用基于Raft算法的一致性机制，提供分布式数据一致性保证。\",\"Apollo：携程开源的配置中心，支持多种语言和框架。提供细粒度的配置权限管理、配置变更通知和灰度发布等高级特性，还有可视化的配置管理界面。\",\"Nacos：阿里巴巴开源的服务发现、配置管理和服务管理平台，也可以作为配置中心使用。支持服务注册与发现、动态配置管理、服务健康监测和动态DNS服务等功能。\"]},\"842\":{\"h\":\"12.Nacos配置中心的原理了解吗？\",\"t\":[\"配置中心，说白了就是一句话：配置信息的CRUD。\",\"具体的实现大概可以分成这么几个部分：\",\"配置信息存储：Nacos默认使用内嵌数据库Derby来存储配置信息，还可以采用MySQL等关系型数据库。\",\"注册配置信息：服务启动时，Nacos Client会向Nacos Server注册自己的配置信息，这个注册过程就是把配置信息写入存储，并生成版本号。\",\"获取配置信息：服务运行期间，Nacos Client通过API从Nacos Server获取配置信息。Server根据键查找对应的配置信息，并返回给Client。\",\"监听配置变化：Nacos Client可以通过注册监听器的方式，实现对配置信息的监听。当配置信息发生变化时，Nacos Server会通知已注册的监听器，并触发相应的回调方法。\"]},\"843\":{\"h\":\"13.Nacos配置中心长轮询机制？\",\"t\":[\"一般来说客户端和服务端的交互分为两种：推（Push）和拉（Pull），Nacos在Pull的基础上，采用了长轮询来进行配置的动态刷新。\",\"在长轮询模式下，客户端定时向服务端发起请求，检查配置信息是否发生变更。如果没有变更，服务端会\\\"hold\\\"住这个请求，即暂时不返回结果，直到配置发生变化或达到一定的超时时间。\",\"具体的实现过程如下：\",\"客户端发起Pull请求，服务端检查配置是否有变更。如果没有变更，则设置一个定时任务，在一段时间后执行，并将当前的客户端连接加入到等待队列中。\",\"在等待期间，如果配置发生变更，服务端会立即返回结果给客户端，完成一次\\\"推送\\\"操作。\",\"如果在等待期间没有配置变更，等待时间达到预设的超时时间后，服务端会自动返回结果给客户端，即使配置没有变更。\",\"如果在等待期间，通过Nacos Dashboard或API对配置进行了修改，会触发一个事件机制，服务端会遍历等待队列，找到发生变更的配置项对应的客户端连接，并将变更的数据通过连接返回，完成一次\\\"推送\\\"操作。\",\"通过长轮询的方式，Nacos客户端能够实时感知配置的变化，并及时获取最新的配置信息。同时，这种方式也降低了服务端的压力，避免了大量的长连接占用内存资源。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"844\":{\"h\":\"远程调用\"},\"845\":{\"h\":\"14.能说下HTTP和RPC的区别吗？\",\"t\":[\"严格来讲，HTTP和不是一个层面的东西：\",\"HTTP（Hypertext Transfer Protocol）是一种应用层协议，主要强调的是网络通信；\",\"RPC（Remote Procedure Call，远程过程调用）是一种用于分布式系统之间通信的协议，强调的是服务之间的远程调用。\",\"一些RPC框架比如gRPC，底层传输协议其实也是用的HTTP2，包括Dubbo3，也兼容了gRPC，使用了HTTP2作为传输层的一层协议。\",\"如果硬要说区别的话，如下：\",\"HTTP|RPC|\",\"| ---|---|---| 定义|HTTP（超文本传输协议）是一种用于传输超文本的协议。|RPC（远程过程调用）是一种用于实现分布式系统中不同节点之间通信的协议。| 通信方式|基于请求-响应模型，客户端发送请求，服务器返回响应。|基于方法调用模型，客户端调用远程方法并等待结果。| 传输协议|基于TCP协议，可使用其他传输层协议如TLS/SSL进行安全加密。|可以使用多种传输协议，如TCP、UDP等。| 数据格式|基于文本，常用的数据格式有JSON、XML等。|可以使用各种数据格式，如二进制、JSON、Protocol Buffers等。| 接口定义|使用RESTful风格的接口进行定义，常用的方法有GET、POST、PUT、DELETE等。|使用IDL（接口定义语言）进行接口定义，如Protocol Buffers、Thrift等。| 跨语言性|支持跨语言通信，可以使用HTTP作为通信协议实现不同语言之间的通信。|支持跨语言通信，可以使用IDL生成不同语言的客户端和服务端代码。| 灵活性|更加灵活，适用于不同类型的应用场景，如Web开发、API调用等。|更加高效，适用于需要高性能和低延迟的分布式系统。|\",\"在微服务体系里，基于HTTP风格的远程调用通常使用框架如Feign来实现，基于RPC的远程调用通常使用框架如Dubbo来实现。\"]},\"846\":{\"h\":\"15.那Feign和Dubbo的区别呢？\",\"t\":[\"这两个才是适合拿来比较的东西：\",\"|Feign|Dubbo| ---|---|---| 定义|Feign是一个声明式的Web服务客户端，用于简化HTTP API的调用。|Dubbo是一个分布式服务框架，用于构建面向服务的微服务架构。| 通信方式|基于HTTP协议，使用RESTful风格的接口进行定义和调用。|基于RPC协议，支持多种序列化协议如gRPC、Hessian等。| 服务发现|通常结合服务注册中心（如Eureka、Consul）进行服务发现和负载均衡。|通过ZooKeeper、Nacos等进行服务注册和发现，并提供负载均衡功能。| 服务治理|不直接提供服务治理功能，需要结合其他组件或框架进行服务治理。|提供服务注册与发现、负载均衡、容错机制、服务降级等服务治理功能。| 跨语言性|支持跨语言通信，可以使用HTTP作为通信协议实现不同语言之间的通信。|支持跨语言通信，通过Dubbo的IDL生成不同语言的客户端和服务端代码。| 生态系统|集成了Spring Cloud生态系统，与Spring Boot无缝集成。|拥有完整的生态系统，包括注册中心、配置中心、监控中心等组件。| 适用场景|适用于构建RESTful风格的微服务架构，特别适合基于HTTP的微服务调用。|适用于构建面向服务的微服务架构，提供更全面的服务治理和容错机制。|\",\"需要注意的是，Feign和Dubbo并不是互斥的关系。实际上，Dubbo可以使用HTTP协议作为通信方式，而Feign也可以集成RPC协议进行远程调用。选择使用哪种远程调用方式取决于具体的业务需求和技术栈的选择。\"]},\"847\":{\"h\":\"16.说一下Fegin?\",\"t\":[\"Feign是一个声明式的Web服务客户端，它简化了使用基于HTTP的远程服务的开发。\",\"Feign是在RestTemplate 和 Ribbon的基础上进一步封装，使用RestTemplate实现Http调用，使用Ribbon实现负载均衡。\",\"Feign的主要特点和功能包括：\",\"声明式API：Feign允许开发者使用简单的注解来定义和描述对远程服务的访问。通过使用注解，开发者可以轻松地指定URL、HTTP方法、请求参数、请求头等信息，使得远程调用变得非常直观和易于理解。\",\"@FeignClient(name = \\\"example\\\", url = \\\"https://api.example.com\\\") public interface ExampleService { @GetMapping(\\\"/endpoint\\\") String getEndpointData(); } \",\"集成负载均衡：Feign集成了Ribbon负载均衡器，可以自动实现客户端的负载均衡。它可以根据服务名和可用实例进行动态路由，并分发请求到不同的服务实例上，提高系统的可用性和可伸缩性。\",\"容错机制：Feign支持集成Hystrix容错框架，可以在调用远程服务时提供容错和断路器功能。当远程服务不可用或响应时间过长时，Feign可以快速失败并返回预设的响应结果，避免对整个系统造成级联故障。\"]},\"848\":{\"h\":\"17.为什么Feign第一次调用耗时很长？\",\"t\":[\"主要原因是由于Ribbon的懒加载机制，当第一次调用发生时，Feign会触发Ribbon的加载过程，包括从服务注册中心获取服务列表、建立连接池等操作，这个加载过程会增加首次调用的耗时。\",\"ribbon: eager-load: enabled: true clients: service-1 \",\"那怎么解决这个问题呢？\",\"可以在应用启动时预热Feign客户端，自动触发一次无关紧要的调用，来提前加载Ribbon和其他相关组件。这样，就相当于提前进行了第一次调用。\"]},\"849\":{\"h\":\"18.Feign怎么实现认证传递？\",\"t\":[\"比较常见的一个做法是，使用拦截器传递认证信息。可以通过实现RequestInterceptor接口来定义拦截器，在拦截器里，把认证信息添加到请求头中，然后将其注册到Feign的配置中。\",\"@Configuration public class FeignClientConfig { @Bean public RequestInterceptor requestInterceptor() { return new RequestInterceptor() { @Override public void apply(RequestTemplate template) { // 添加认证信息到请求头中 template.header(\\\"Authorization\\\", \\\"Bearer \\\" + getToken()); } }; } private String getToken() { // 获取认证信息的逻辑，可以从SecurityContext或其他地方获取 // 返回认证信息的字符串形式 return \\\"your_token\\\"; } } \"]},\"850\":{\"h\":\"19.Fegin怎么做负载均衡？Ribbon?\",\"t\":[\"在Feign中，负载均衡是通过集成Ribbon来实现的。\",\"Ribbon是Netflix开源的一个客户端负载均衡器，可以与Feign无缝集成，为Feign提供负载均衡的能力。\",\"Ribbon通过从服务注册中心获取可用服务列表，并通过负载均衡算法选择合适的服务实例进行请求转发，实现客户端的负载均衡。\"]},\"851\":{\"h\":\"20.说说有哪些负载均衡算法？\",\"t\":[\"常见的负载均衡算法包含以下几种：\",\"轮询算法（Round Robin）：轮询算法是最简单的负载均衡算法之一。它按照顺序将请求依次分配给每个后端服务器，循环往复。当请求到达时，负载均衡器按照事先定义的顺序选择下一个服务器。轮询算法适用于后端服务器具有相同的处理能力和性能的场景。\",\"加权轮询算法（Weighted Round Robin）：加权轮询算法在轮询算法的基础上增加了权重的概念。每个后端服务器都被赋予一个权重值，权重值越高，被选中的概率就越大。这样可以根据服务器的处理能力和性能调整请求的分配比例，使得性能较高的服务器能够处理更多的请求。\",\"随机算法（Random）：随机算法将请求随机分配给后端服务器。每个后端服务器有相等的被选中概率，没有考虑服务器的实际负载情况。这种算法简单快速，适用于后端服务器性能相近且无需考虑请求处理能力的场景。\",\"加权随机算法（Weighted Random）：加权随机算法在随机算法的基础上引入了权重的概念。每个后端服务器被赋予一个权重值，权重值越高，被选中的概率就越大。这样可以根据服务器的处理能力和性能调整请求的分配比例。\",\"最少连接算法（Least Connection）：最少连接算法会根据后端服务器当前的连接数来决定请求的分配。负载均衡器会选择当前连接数最少的服务器进行请求分配，以保证后端服务器的负载均衡。这种算法适用于后端服务器的处理能力不同或者请求的处理时间不同的场景。\",\"哈希算法（Hash）：哈希算法会根据请求的某个特定属性（如客户端IP地址、请求URL等）计算哈希值，然后根据哈希值选择相应的后端服务器。\",\"常见的负载均衡器，比如Ribbion、Gateway等等，基本都支持这些负载均衡算法。\",\"关于Dubbo，后面会单独出一期。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"852\":{\"h\":\"服务容灾\"},\"853\":{\"h\":\"21.什么是服务雪崩？\",\"t\":[\"在微服务中，假如一个或者多个服务出现故障，如果这时候，依赖的服务还在不断发起请求，或者重试，那么这些请求的压力会不断在下游堆积，导致下游服务的负载急剧增加。不断累计之下，可能会导致故障的进一步加剧，可能会导致级联式的失败，甚至导致整个系统崩溃，这就叫服务雪崩。\",\"一般，为了防止服务雪崩，可以采用这些措施：\",\"服务高可用部署：确保各个服务都具备高可用性，通过冗余部署、故障转移等方式来减少单点故障的影响。\",\"限流和熔断：对服务之间的请求进行限流和熔断，以防止过多的请求涌入导致后端服务不可用。\",\"缓存和降级：合理使用缓存来减轻后端服务的负载压力，并在必要时进行服务降级，保证核心功能的可用性。\"]},\"854\":{\"h\":\"22.什么是服务熔断？什么是服务降级？\"},\"855\":{\"h\":\"什么是服务熔断？\",\"t\":[\"服务熔断是微服务架构中的容错机制，用于保护系统免受服务故障或异常的影响。当某个服务出现故障或异常时，服务熔断可以快速隔离该服务，确保系统稳定可用。\",\"它通过监控服务的调用情况，当错误率或响应时间超过阈值时，触发熔断机制，后续请求将返回默认值或错误信息，避免资源浪费和系统崩溃。\",\"服务熔断还支持自动恢复，重新尝试对故障服务的请求，确保服务恢复正常后继续使用。\"]},\"856\":{\"h\":\"什么是服务降级？\",\"t\":[\"服务降级是也是一种微服务架构中的容错机制，用于在系统资源紧张或服务故障时保证核心功能的可用性。\",\"当系统出现异常情况时，服务降级会主动屏蔽一些非核心或可选的功能，而只提供最基本的功能，以确保系统的稳定运行。通过减少对资源的依赖，服务降级可以保证系统的可用性和性能。\",\"它可以根据业务需求和系统状况来制定策略，例如替换耗时操作、返回默认响应、返回静态错误页面等。\"]},\"857\":{\"h\":\"有哪些熔断降级方案实现？\",\"t\":[\"目前常见的服务熔断降级实现方案有这么几种：\",\"框架\",\"实现方案\",\"特点\",\"Spring Cloud\",\"Netflix Hystrix\",\"- 提供线程隔离、服务降级、请求缓存、请求合并等功能\",\"- 可与Spring Cloud其他组件无缝集成\",\"- 官方已宣布停止维护，推荐使用Resilience4j代替| Spring Cloud|Resilience4j|- 轻量级服务熔断库\",\"- 提供类似于Hystrix的功能\",\"- 具有更好的性能和更简洁的API\",\"- 可与Spring Cloud其他组件无缝集成| Spring Cloud Alibaba|Sentinel|- 阿里巴巴开源的流量控制和熔断降级组件\",\"- 提供实时监控、流量控制、熔断降级等功能\",\"- 与Spring Cloud Alibaba生态系统紧密集成| Dubbo|Dubbo自带熔断降级机制|- Dubbo框架本身提供的熔断降级机制\",\"- 可通过配置实现服务熔断和降级\",\"- 与Dubbo的RPC框架紧密集成|\"]},\"858\":{\"h\":\"23.Hystrix怎么实现服务容错？\",\"t\":[\"尽管已经不再更新，但是Hystrix是非常经典的服务容错开源库，它提供了多种机制来保护系统：\",\"服务熔断（Circuit Breaker）：Hystrix通过设置阈值来监控服务的错误率或响应时间。当错误率或响应时间超过预设的阈值时，熔断器将会打开，后续的请求将不再发送到实际的服务提供方，而是返回预设的默认值或错误信息。这样可以快速隔离故障服务，防止故障扩散，提高系统的稳定性和可用性。\",\"服务降级（Fallback）：当服务熔断打开时，Hystrix可以提供一个备用的降级方法或返回默认值，以保证系统继续正常运行。开发者可以定义降级逻辑，例如返回缓存数据、执行简化的逻辑或调用其他可靠的服务，以提供有限但可用的功能。\",\"import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand; /** * 服务降级示例 **/ @Service public class MyService { @HystrixCommand(fallbackMethod = \\\"fallbackMethod\\\") public String myServiceMethod() { // 实际的服务调用逻辑 // ... } public String fallbackMethod() { // 降级方法的逻辑，当服务调用失败时会执行此方法 // 可以返回默认值或执行其他备用逻辑 // ... } } \",\"请求缓存（Request Caching）：Hystrix可以缓存对同一请求的响应结果，当下次请求相同的数据时，直接从缓存中获取，避免重复的网络请求，提高系统的性能和响应速度。\",\"请求合并（Request Collapsing）：Hystrix可以将多个并发的请求合并为一个批量请求，减少网络开销和资源占用。这对于一些高并发的场景可以有效地减少请求次数，提高系统的性能。\",\"实时监控和度量（Real-time Monitoring and Metrics）：Hystrix提供了实时监控和度量功能，可以对服务的执行情况进行监控和统计，包括错误率、响应时间、并发量等指标。通过监控数据，可以及时发现和解决服务故障或性能问题。\",\"线程池隔离（Thread Pool Isolation）：Hystrix将每个依赖服务的请求都放在独立的线程池中执行，避免因某个服务的故障导致整个系统的线程资源耗尽。通过线程池隔离，可以提高系统的稳定性和可用性。\"]},\"859\":{\"h\":\"24.Sentinel怎么实现限流的？\",\"t\":[\"Sentinel通过动态管理限流规则，根据定义的规则对请求进行限流控制。具体实现步骤如下：\",\"定义资源：在Sentinel中，资源可以是URL、方法等，用于标识需要进行限流的请求。\",\"// 原本的业务方法. @SentinelResource(blockHandler = \\\"blockHandlerForGetUser\\\") public User getUserById(String id) { throw new RuntimeException(\\\"getUserById command failed\\\"); } // blockHandler 函数，原方法调用被限流/降级/系统保护的时候调用 public User blockHandlerForGetUser(String id, BlockException ex) { return new User(\\\"admin\\\"); } \",\"配置限流规则：在Sentinel的配置文件中定义资源的限流规则。规则可以包括资源名称、限流阈值、限流模式（令牌桶或漏桶）等。\",\"private static void initFlowQpsRule() { List<FlowRule> rules = new ArrayList<>(); FlowRule rule1 = new FlowRule(); rule1.setResource(resource); // Set max qps to 20 rule1.setCount(20); rule1.setGrade(RuleConstant.FLOW_GRADE_QPS); rule1.setLimitApp(\\\"default\\\"); rules.add(rule1); FlowRuleManager.loadRules(rules); } \",\"监控流量：Sentinel会监控每个资源的流量情况，包括请求的QPS（每秒请求数）、线程数、响应时间等。\",\"限流控制：当请求到达时，Sentinel会根据资源的限流规则判断是否需要进行限流控制。如果请求超过了限流阈值，则可以进行限制、拒绝或进行其他降级处理。\"]},\"860\":{\"h\":\"Sentinel采用的什么限流算法？\",\"t\":[\"Sentinel使用滑动窗口限流算法来实现限流。\",\"滑动窗口限流算法是一种基于时间窗口的限流算法。它将一段时间划分为多个时间窗口，并在每个时间窗口内统计请求的数量。通过动态地调整时间窗口的大小和滑动步长，可以更精确地控制请求的通过速率。\",\"滑动窗口限流可以查看前面的分布式篇。\"]},\"861\":{\"h\":\"Sentinel怎么实现集群限流？\",\"t\":[\"Sentinel利用了Token Server和Token Client的机制来实现集群限流。\",\"开启集群限流后，Client向Token Server发送请求，Token Server根据配置的规则决定是否限流。T\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"862\":{\"h\":\"服务网关\"},\"863\":{\"h\":\"25.什么是API网关？\",\"t\":[\"API网关（API Gateway）是一种中间层服务器，用于集中管理、保护和路由对后端服务的访问。它充当了客户端与后端服务之间的入口点，提供了一组统一的接口来管理和控制API的访问。\",\"API网关的主要功能包括：\",\"路由转发：API网关根据请求的URL路径或其他标识，将请求路由到相应的后端服务。通过配置路由规则，可以灵活地将请求分发给不同的后端服务。\",\"负载均衡：API网关可以在后端服务之间实现负载均衡，将请求平均分发到多个实例上，提高系统的吞吐量和可扩展性。\",\"安全认证与授权：API网关可以集中处理身份验证和授权，确保只有经过身份验证的客户端才能访问后端服务。它可以与身份提供者（如OAuth、OpenID Connect）集成，进行用户认证和授权操作。\",\"缓存：API网关可以缓存后端服务的响应，减少对后端服务的请求次数，提高系统性能和响应速度。\",\"监控与日志：API网关可以收集和记录请求的指标和日志，提供实时监控和分析，帮助开发人员和运维人员进行故障排查和性能优化。\",\"数据转换与协议转换：API网关可以在客户端和后端服务之间进行数据格式转换和协议转换，如将请求从HTTP转换为WebSocket，或将请求的参数进行格式转换，以满足后端服务的需求。\",\"API版本管理：API网关可以管理不同版本的API，允许同时存在多个API版本，并通过路由规则将请求正确地路由到相应的API版本上。\",\"……\",\"通过使用API网关，可以简化前端与后端服务的交互，提供统一的接口和安全性保障，同时也方便了服务治理和监控。它是构建微服务架构和实现API管理的重要组件之一。\"]},\"864\":{\"h\":\"26.SpringCloud可以选择哪些API网关？\",\"t\":[\"使用SpringCloud开发，可以采用以下的API网关选型：\",\"Netflix Zuul（已停止更新）：Netflix Zuul是Spring Cloud早期版本中提供的默认API网关。它基于Servlet技术栈，可以进行路由、过滤、负载均衡等功能。然而，自2020年12月起，Netflix宣布停止对Zuul 1的维护，转而支持新的API网关项目。\",\"Spring Cloud Gateway：Spring Cloud Gateway是Spring Cloud官方推荐的API网关，取代了Netflix Zuul。它基于非阻塞的WebFlux框架，充分利用了响应式编程的优势，并提供了路由、过滤、断路器、限流等特性。Spring Cloud Gateway还支持与Spring Cloud的其他组件集成，如服务发现、负载均衡等。\",\"Kong：Kong是一个独立的、云原生的API网关和服务管理平台，可以与Spring Cloud集成。Kong基于Nginx，提供了强大的路由、认证、授权、监控和扩展能力。它支持多种插件和扩展，可满足不同的API管理需求。\",\"APISIX：APISIX基于Nginx和Lua开发，它具有强大的路由、流量控制、插件扩展等功能。APISIX支持灵活的配置方式，可以根据需求进行动态路由、负载均衡和限流等操作。\",\"……\"]},\"865\":{\"h\":\"27.Spring Cloud Gateway核心概念？\",\"t\":[\"在Spring Cloud Gateway里，有三个关键组件：\",\"Route（路由）：路由是Spring Cloud Gateway的基本构建块，它定义了请求的匹配规则和转发目标。通过配置路由，可以将请求映射到后端的服务实例或URL上。路由规则可以根据请求的路径、方法、请求头等条件进行匹配，并指定转发的目标URI。\",\"Predicate（断言）：断言用于匹配请求的条件，如果请求满足断言的条件，则会应用所配置的过滤器。Spring Cloud Gateway提供了多种内置的断言，如Path（路径匹配）、Method（请求方法匹配）、Header（请求头匹配）等，同时也支持自定义断言。\",\"Filter（过滤器）：过滤器用于对请求进行处理和转换，可以修改请求、响应以及执行其他自定义逻辑。Spring Cloud Gateway提供了多个内置的过滤器，如请求转发、请求重试、请求限流等。同时也支持自定义过滤器，可以根据需求编写自己的过滤器逻辑。\",\"我们再来看下Spring Cloud Gateway的具体工作流程：\",\"又有两个比较重要的概念：\",\"Gateway Handler（网关处理器）：网关处理器是Spring Cloud Gateway的核心组件，负责将请求转发到匹配的路由上。它根据路由配置和断言条件进行路由匹配，选择合适的路由进行请求转发。网关处理器还会依次应用配置的过滤器链，对请求进行处理和转换。\",\"Gateway Filter Chain（网关过滤器链）：网关过滤器链由一系列过滤器组成，按照配置的顺序依次执行。每个过滤器可以在请求前、请求后或请求发生错误时进行处理。过滤器链的执行过程可以修改请求、响应以及执行其他自定义逻辑。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"866\":{\"h\":\"链路追踪\"},\"867\":{\"h\":\"28.为什么要用微服务链路追踪？\",\"t\":[\"在微服务中，有的山下游可能有十几个服务，如果某一环出了问题，排查起来非常困难，所以，就需要进行链路追踪，来帮助排查问题。\",\"通过链路追踪，可以可视化地追踪请求从一个微服务到另一个微服务的调用情况。除了排查问题，链路追踪黑还可以帮助优化性能，可视化依赖关系、服务监控和告警。\"]},\"868\":{\"h\":\"29.SpringCloud可以选择哪些微服务链路追踪方案？\",\"t\":[\"Spring Cloud提供了多种选择的微服务链路追踪方案。以下是一些常用的方案：\",\"Zipkin：Zipkin 是一个开源的分布式实时追踪系统，由 Twitter 开发并贡献给开源社区。Spring Cloud Sleuth 提供了与 Zipkin 的集成，可以通过在微服务中添加相应的依赖和配置，将追踪信息发送到 Zipkin 服务器，并通过 Zipkin UI 进行可视化展示和查询。\",\"Jaeger：Jaeger 是 Uber 开源的分布式追踪系统，也被纳入了 CNCF（云原生计算基金会）的维护。通过使用 Spring Cloud Sleuth 和 Jaeger 客户端库，可以将追踪信息发送到 Jaeger 并进行可视化展示和查询。\",\"SkyWalking：Apache SkyWalking 是一款开源的应用性能监控与分析系统，提供了对 Java、.NET 和 Node.js 等语言的支持。它可以与 Spring Cloud Sleuth 集成，将追踪数据发送到 SkyWalking 服务器进行可视化展示和分析。\",\"Pinpoint：Pinpoint 是 Naver 开源的分布式应用性能监控系统，支持 Java 和 .NET。它提供了与 Spring Cloud Sleuth 的集成，可以将追踪数据发送到 Pinpoint 服务器，并通过其 UI 进行分析和监控。\",\"这些方案都可以与 Spring Cloud Sleuth 进行集成，Spring Cloud Sleuth 是 Spring Cloud 中的一个组件，提供了在微服务调用时生成追踪信息的能力。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"869\":{\"h\":\"分布式事务\",\"t\":[\"分布式事务可以查看前面的分布式基础篇。\"]},\"870\":{\"h\":\"30.Seata支持哪些模式的分布式事务？\",\"t\":[\"Seata以下几种模式的分布式事务：\",\"AT（Atomikos）模式：AT模式是Seata默认支持的模式，也是最常用的模式之一。在AT模式下，Seata通过在业务代码中嵌入事务上下文，实现对分布式事务的管理。Seata会拦截并解析业务代码中的SQL语句，通过对数据库连接进行拦截和代理，实现事务的管理和协调。\",\"TCC（Try-Confirm-Cancel）模式：TCC模式是一种基于补偿机制的分布式事务模式。在TCC模式中，业务逻辑需要实现Try、Confirm和Cancel三个阶段的操作。Seata通过调用业务代码中的Try、Confirm和Cancel方法，并在每个阶段记录相关的操作日志，来实现分布式事务的一致性。\",\"SAGA模式：SAGA模式是一种基于事件驱动的分布式事务模式。在SAGA模式中，每个服务都可以发布和订阅事件，通过事件的传递和处理来实现分布式事务的一致性。Seata提供了与SAGA模式兼容的Saga框架，用于管理和协调分布式事务的各个阶段。\",\"XA模式：XA模式是一种基于两阶段提交（Two-Phase Commit）协议的分布式事务模式。在XA模式中，Seata通过与数据库的XA事务协议进行交互，实现对分布式事务的管理和协调。XA模式需要数据库本身支持XA事务，并且需要在应用程序中配置相应的XA数据源。\"]},\"871\":{\"h\":\"31.了解Seata的实现原理吗？\",\"t\":[\"Seata的实现原理主要包括三个核心组件：事务协调器（Transaction Coordinator）、事务管理器（Transaction Manager）和资源管理器（Resource Manager）。\",\"事务协调器（Transaction Coordinator）：事务协调器负责协调和管理分布式事务的整个过程。它接收事务的开始和结束请求，并根据事务的状态进行协调和处理。事务协调器还负责记录和管理事务的全局事务 ID（Global Transaction ID）和分支事务 ID（Branch Transaction ID）。\",\"事务管理器（Transaction Manager）：事务管理器负责全局事务的管理和控制。它协调各个分支事务的提交或回滚，并保证分布式事务的一致性和隔离性。事务管理器还负责与事务协调器进行通信，并将事务的状态变更进行持久化。\",\"资源管理器（Resource Manager）：资源管理器负责管理和控制各个参与者（Participant）的事务操作。它与事务管理器进行通信，并根据事务管理器的指令执行相应的事务操作，包括提交和回滚。\",\"Seata的实现原理基于两阶段提交（Two-Phase Commit）协议，具体的机制如下：\",\"一阶段：在事务提交的过程中，首先进行预提交阶段。事务协调器向各个资源管理器发送预提交请求，资源管理器执行相应的事务操作并返回执行结果。在此阶段，业务数据和回滚日志记录在同一个本地事务中提交，并释放本地锁和连接资源。\",\"二阶段：在预提交阶段成功后，进入真正的提交阶段。此阶段主要包括提交异步化和回滚反向补偿两个步骤：\",\"提交异步化：事务协调器发出真正的提交请求，各个资源管理器执行最终的提交操作。这个阶段的操作是非常快速的，以确保事务的提交效率。\",\"回滚反向补偿：如果在预提交阶段中有任何一个资源管理器返回失败结果，事务协调器发出回滚请求，各个资源管理器执行回滚操作，利用一阶段的回滚日志进行反向补偿。\"]},\"872\":{\"h\":\"Seata的事务执行流程是什么样的？\",\"t\":[\"Seata事务的执行流程可以简要概括为以下几个步骤：\",\"事务发起方（Transaction Starter）发起全局事务：事务发起方是指发起分布式事务的应用程序或服务。它向Seata的事务协调器发送全局事务的开始请求，生成全局事务ID（Global Transaction ID）。\",\"事务协调器创建全局事务记录：事务协调器接收到全局事务的开始请求后，会为该事务创建相应的全局事务记录，并生成分支事务ID（Branch Transaction ID）。\",\"分支事务注册：事务发起方将全局事务ID和分支事务ID发送给各个参与者（Participant），即资源管理器。参与者将分支事务ID注册到本地事务管理器，并将事务的执行结果反馈给事务协调器。\",\"执行业务逻辑：在分布式事务的上下文中，各个参与者执行各自的本地事务，即执行业务逻辑和数据库操作。\",\"预提交阶段：事务发起方向事务协调器发送预提交请求，事务协调器将预提交请求发送给各个参与者。\",\"执行本地事务确认：参与者接收到预提交请求后，执行本地事务的确认操作，并将本地事务的执行结果反馈给事务协调器。\",\"全局事务提交或回滚：事务协调器根据参与者反馈的结果进行判断，如果所有参与者的本地事务都执行成功，事务协调器发送真正的提交请求给参与者，参与者执行最终的提交操作；如果有任何一个参与者的本地事务执行失败，事务协调器发送回滚请求给参与者，参与者执行回滚操作。\",\"完成全局事务：事务协调器接收到参与者的提交或回滚结果后，根据结果更新全局事务的状态，并通知事务发起方全局事务的最终结果。\"]},\"873\":{\"h\":\"全局事务ID和分支事务ID是怎么传递的？\",\"t\":[\"全局事务ID和分支事务ID在分布式事务中通过上下文传递的方式进行传递。常见的传递方式包括参数传递、线程上下文传递和消息中间件传递。具体的传递方式可以根据业务场景和技术选型进行选择和调整。\"]},\"874\":{\"h\":\"Seata的事务回滚是怎么实现的？\",\"t\":[\"Seata的事务回滚是通过回滚日志实现的。每个参与者在执行本地事务期间生成回滚日志，记录了对数据的修改操作。\",\"当需要回滚事务时，事务协调器向参与者发送回滚请求，参与者根据回滚日志中的信息执行撤销操作，将数据恢复到事务开始前的状态。\",\"回滚日志的管理和存储是Seata的核心机制，可以选择将日志存储在不同的介质中。通过回滚日志的持久化和恢复，Seata确保了事务的一致性和恢复性。\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\"]},\"875\":{\"h\":\"服务监控\"},\"876\":{\"h\":\"32.你们的服务怎么做监控和告警？\",\"t\":[\"我们使用Prometheus和Grafana来实现整个微服务集群的监控和告警：\",\"Prometheus：Prometheus 是一个开源的监控系统，具有灵活的数据模型和强大的查询语言，能够收集和存储时间序列数据。它可以通过HTTP协议定期拉取微服务的指标数据，并提供可扩展的存储和查询功能。\",\"Grafana：Grafana 是一个开源的可视化仪表板工具，可以与 Prometheus 结合使用，创建实时和历史数据的仪表板。Grafana 提供了丰富的图表和可视化选项，可以帮助用户更好地理解和分析微服务的性能和状态。\"]},\"877\":{\"h\":\"33.你们的服务怎么做日志收集？\",\"t\":[\"日志收集有很多种方案，我们用的是ELK：\",\"Elasticsearch：Elasticsearch是一个分布式搜索和分析引擎，用于存储和索引大量的日志数据。它提供了快速的搜索和聚合功能，可以高效地处理大规模的日志数据。\",\"Logstash：Logstash是一个用于收集、过滤和转发日志数据的工具。它可以从各种来源（如文件、网络、消息队列等）收集日志数据，并对数据进行处理和转换，然后将其发送到Elasticsearch进行存储和索引。\",\"Kibana：Kibana是一个用于日志数据可视化和分析的工具。它提供了丰富的图表、仪表盘和搜索功能，可以帮助用户实时监控和分析日志数据，发现潜在的问题和趋势。\",\"简单说，这三者里Elasticsearch提供数据存储和检索能力，Logstash负责将日志收集到ES，Kibana负责日志数据的可视化分析。\",\"使用ELK进行微服务日志收集的一般流程如下：\",\"在每个微服务中配置日志输出：将微服务的日志输出到标准输出（stdout）或日志文件。\",\"使用Logstash收集日志：配置Logstash收集器，通过配置输入插件（如文件输入、网络输入等）监听微服务的日志输出，并进行过滤和处理。\",\"将日志数据发送到Elasticsearch：配置Logstash的输出插件，将经过处理的日志数据发送到Elasticsearch进行存储和索引。\",\"使用Kibana进行可视化和分析：通过Kibana连接到Elasticsearch，创建仪表盘、图表和搜索查询，实时监控和分析微服务的日志数据。\",\"除了应用最广泛的ELK，还有一些其它的方案比如Fluentd、Graylog、Loki、Filebeat，一些云厂商也提供了付费方案，比如阿里云的sls。\",\"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\",\"系列内容：\",\"面渣逆袭 Java SE 篇👍\",\"面渣逆袭 Java 集合框架篇👍\",\"面渣逆袭 Java 并发编程篇👍\",\"面渣逆袭 JVM 篇👍\",\"面渣逆袭 Spring 篇👍\",\"面渣逆袭 Redis 篇👍\",\"面渣逆袭 MyBatis 篇👍\",\"面渣逆袭 MySQL 篇👍\",\"面渣逆袭操作系统篇👍\",\"面渣逆袭计算机网络篇👍\",\"面渣逆袭RocketMQ篇👍\",\"面渣逆袭分布式篇👍\",\"面渣逆袭微服务篇👍\",\"GitHub 上标星 9300+ 的开源知识库《二哥的 Java 进阶之路》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：太赞了，GitHub 上标星 9300+ 的 Java 教程\",\"微信搜 沉默王二 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 222 即可免费领取。\",\"1.3 万字 33 张手绘图，详解 33 道微服务（Dubbo、Spring Cloud）面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"]},\"878\":{\"c\":[{\"icon\":\"pen-to-square\",\"date\":\"2022-01-09T00:00:00.000Z\",\"description\":\"1.4 万字 33 张手绘图，详解 33 道微服务（Dubbo、Spring Cloud）面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/weifuwu.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.4 万字 33 张手绘图，详解 33 道微服务（Dubbo、Spring Cloud）面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-09T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T08:11:53.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-09T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-12-27T08:11:53.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"879\":{\"h\":\"你好java基础\",\"t\":[\"编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork\",\"Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE\",\"3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"4、Java可移植性 JVM Java虚拟机（Java Virtual Machine） JVM 调优问题\",\"编译型 + 解释型\",\"Java源文件.java -> 字节码.class -> 机器码\",\"生产环境使用JDK1.8 JDK Java Development Kit（包含JRE） JRE Java Runtime Envrinment\",\"6、JDK安装与配置 环境变量配置 Windows： Path\",\"编译命令：javac.exe 解释命令：java.exe\",\"7、编程起步 源代码：Hello.java\",\"public class Hello{ // 中括号[] 可在变量名前，也可以在后 public static void main(String[] args) { System.out.println(\\\"Hello World!\\\"); } } 编译执行\",\"Hello.java\",\"$ javac Hello.java # 编译文件为字节码文件 $ ls Hello.class Hello.java\",\"$ java Hello # JVM执行java程序 Hello World! 1、定义类：\",\"public class 类名 {} // 类名必须与文件名一致 class 类名 {} // 类名可以与文件名不一致 在一个.java文件中，可以有多个class定义 一个java文件中，只能有一个public class（推荐）\",\"命名规范：每个单词的首字母大写\",\"2、主方法 程序执行起点，一定要定义在类中 主方法所在类，称为主类\",\"3、系统输出\",\"System.out.println(); // 输出换行 line System.out.print(); // 输出不换行 8、JShell工具 JDK > 1.9\",\"$jshell jshell> 9、CLASSPATH环境属性 默认为当前所在目录\",\"export CLASSPATH=. # Linux set CLASSPATH=. # Windows 可配置为系统变量\",\"PATH # 操作系统提供的路径配置，定义所有可执行程序路径 CLASSPATH # JRE提供的加载类的路径 10、注释 编译时不处理注释\",\"// 单行注释 /* 多行注释 / /* 文档注释 */ 11 标识符与关键字 标识符：\",\"包含：字母、数字、_、$ 字母开头 关键字 特殊含义，如class JDK 1.4 assert 用于异常处理 JDK 1.5 enum 用于枚举定义 未使用：goto、const 特殊含义：true、false、null\",\"12、Java数据类型简介 分类\",\"基本数据类型：具体的数字单元 数值型 -整型：byte-8、short-16、 int-32、long-64 # 默认值 0 -浮点型：float-32、double-64 # 默认值 0 布尔型：boolean # 默认值 false 字符型：char-16 # 默认值 \\\\u0000\",\"引用数据类型：涉及内存关系的使用 数组、类、接口 # 默认值null 参考原则 描述数字：整数int、小数double 数据传输、文字编码转换：byte（二进制操作） 处理中文：char 描述内存或文件大小，自增主键：使用long\",\"13、整型数据类型 定义\",\"// int 变量名称 = 常量; int x = 10; 范例：超过int范围 数据溢出\",\"// int int变量 = int数值 int max = Integer.MAX_VALUE; // 获取int最大值 int min = Integer.MIN_VALUE; // 获取int最小值 System.out.println(\\\"min: \\\" + min); System.out.println(\\\"max: \\\" + max);\",\"// int变量 + int常量 = int结果 System.out.println(\\\"max + 1: \\\" + (max + 1));\",\"System.out.println(\\\"=================\\\");\",\"// long long变量 = int数值 long long_max = Integer.MAX_VALUE; long long_min = Integer.MIN_VALUE; System.out.println(\\\"long_min: \\\" + long_min); System.out.println(\\\"long_max: \\\" + long_max);\",\"// long变量 + int常量 = long结果 System.out.println(\\\"long_min + 1: \\\" + (long_max + 1));\",\"long_min: -2147483648\\nlong_max: 2147483647\\nlong_min + 1: 2147483648\"]},\"880\":{\"c\":[{\"tag\":[\"配置\",\"主题\",\"索引\"],\"description\":\"你好java基础 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/front-end/html/basic/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"你好java基础\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"你好java基础 编程基础自测考试 2、Java发展简介 完善的生态系统 OAK（橡树）平台 HotJava浏览器 sun: Stanford University NetWork Java 标准开发 J2SE、JAVA SE Java 嵌入式开发 J2ME、JAVA ME Java 企开开发 J2EE、JAVA EE 3、Java语言特点 1、行业内通用的技术实现标准 2、面向对象编程语言 3、提供了内存回收处理机制 4、避免了复杂的指针问题 5、支持多线程编程 6、高效的网络处理能力 7、良好的可移植性 8、语言足够简单\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"配置\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"主题\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"索引\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-12-27T05:59:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"你好java基础\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-12-27T05:59:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Rui\\\",\\\"url\\\":\\\"https://huang-ruifang.gitee.io/ruiblogs\\\"}]}\"]]}]},\"881\":{\"c\":[\"配置\",\"主题\",\"索引\"]},\"882\":{\"h\":\"\"},\"883\":{\"c\":[{\"layout\":\"NotFound\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/404.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"\\\"}\"]]}]},\"884\":{\"h\":\"Common\"},\"885\":{\"c\":[{\"title\":\"Common\",\"article\":false,\"feed\":false,\"sitemap\":false,\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/common/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Common\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"Common\\\"}\"]]}]},\"886\":{\"h\":\"Java\"},\"887\":{\"c\":[{\"title\":\"Java\",\"article\":false,\"feed\":false,\"sitemap\":false,\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Java\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"Java\\\"}\"]]}]},\"888\":{\"h\":\"Javase\"},\"889\":{\"c\":[{\"title\":\"Javase\",\"article\":false,\"feed\":false,\"sitemap\":false,\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/study-notes/back-end/java/javase/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Javase\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"Javase\\\"}\"]]}]},\"890\":{\"h\":\"分类\"},\"891\":{\"c\":[{\"title\":\"分类\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"key\":\"category\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/category/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"分类\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"分类\\\"}\"]]}]},\"892\":{\"h\":\"标签\"},\"893\":{\"c\":[{\"title\":\"标签\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签\\\"}\"]]}]},\"894\":{\"h\":\"文章\"},\"895\":{\"c\":[{\"title\":\"文章\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"type\",\"key\":\"article\"},\"layout\":\"BlogType\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/article/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"文章\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"文章\\\"}\"]]}]},\"896\":{\"h\":\"收藏\"},\"897\":{\"c\":[{\"title\":\"收藏\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"type\",\"key\":\"star\"},\"layout\":\"BlogType\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/star/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"收藏\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"收藏\\\"}\"]]}]},\"898\":{\"h\":\"时间轴\"},\"899\":{\"c\":[{\"title\":\"时间轴\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"type\",\"key\":\"timeline\"},\"layout\":\"Timeline\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/timeline/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"时间轴\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"时间轴\\\"}\"]]}]},\"900\":{\"h\":\"标签: 博文\"},\"901\":{\"c\":[{\"title\":\"标签: 博文\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"博文\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E5%8D%9A%E6%96%87/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 博文\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 博文\\\"}\"]]}]},\"902\":{\"h\":\"标签: 笔记\"},\"903\":{\"c\":[{\"title\":\"标签: 笔记\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"笔记\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E7%AC%94%E8%AE%B0/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 笔记\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 笔记\\\"}\"]]}]},\"904\":{\"h\":\"标签: 代码Demo\"},\"905\":{\"c\":[{\"title\":\"标签: 代码Demo\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"代码Demo\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E4%BB%A3%E7%A0%81demo/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 代码Demo\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 代码Demo\\\"}\"]]}]},\"906\":{\"h\":\"标签: 其他\"},\"907\":{\"c\":[{\"title\":\"标签: 其他\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"其他\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E5%85%B6%E4%BB%96/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 其他\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 其他\\\"}\"]]}]},\"908\":{\"h\":\"标签: 友链\"},\"909\":{\"c\":[{\"title\":\"标签: 友链\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"友链\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E5%8F%8B%E9%93%BE/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 友链\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 友链\\\"}\"]]}]},\"910\":{\"h\":\"标签: 前端开发\"},\"911\":{\"c\":[{\"title\":\"标签: 前端开发\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"前端开发\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 前端开发\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 前端开发\\\"}\"]]}]},\"912\":{\"h\":\"标签: Html\"},\"913\":{\"c\":[{\"title\":\"标签: Html\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"Html\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/html/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: Html\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: Html\\\"}\"]]}]},\"914\":{\"h\":\"标签: JavaScript\"},\"915\":{\"c\":[{\"title\":\"标签: JavaScript\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"JavaScript\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/javascript/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: JavaScript\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: JavaScript\\\"}\"]]}]},\"916\":{\"h\":\"标签: 前端\"},\"917\":{\"c\":[{\"title\":\"标签: 前端\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"前端\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E5%89%8D%E7%AB%AF/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 前端\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 前端\\\"}\"]]}]},\"918\":{\"h\":\"标签: 后端\"},\"919\":{\"c\":[{\"title\":\"标签: 后端\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"后端\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E5%90%8E%E7%AB%AF/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 后端\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 后端\\\"}\"]]}]},\"920\":{\"h\":\"标签: Demo\"},\"921\":{\"c\":[{\"title\":\"标签: Demo\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"Demo\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/demo/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: Demo\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: Demo\\\"}\"]]}]},\"922\":{\"h\":\"标签: 后端开发\"},\"923\":{\"c\":[{\"title\":\"标签: 后端开发\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"后端开发\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 后端开发\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 后端开发\\\"}\"]]}]},\"924\":{\"h\":\"标签: Java\"},\"925\":{\"c\":[{\"title\":\"标签: Java\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"Java\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/java/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: Java\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: Java\\\"}\"]]}]},\"926\":{\"h\":\"标签: Python\"},\"927\":{\"c\":[{\"title\":\"标签: Python\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"Python\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/python/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: Python\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: Python\\\"}\"]]}]},\"928\":{\"h\":\"标签: 配置\"},\"929\":{\"c\":[{\"title\":\"标签: 配置\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"配置\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E9%85%8D%E7%BD%AE/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 配置\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 配置\\\"}\"]]}]},\"930\":{\"h\":\"标签: 主题\"},\"931\":{\"c\":[{\"title\":\"标签: 主题\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"主题\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E4%B8%BB%E9%A2%98/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 主题\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 主题\\\"}\"]]}]},\"932\":{\"h\":\"标签: 索引\"},\"933\":{\"c\":[{\"title\":\"标签: 索引\",\"dir\":{\"index\":false},\"feed\":false,\"sitemap\":false,\"blog\":{\"type\":\"category\",\"name\":\"索引\",\"key\":\"tag\"},\"layout\":\"BlogCategory\",\"description\":\"\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://huang-ruifang.gitee.io/ruiblogs/ruiblogs/tag/%E7%B4%A2%E5%BC%95/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Rui的博客 | Rui Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"标签: 索引\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Rui\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"标签: 索引\\\"}\"]]}]}},\"dirtCount\":0,\"index\":[[\"仪表盘和搜索功能\",{\"1\":{\"877\":1}}],[\"云原生计算基金会\",{\"1\":{\"868\":1}}],[\"云原生的api网关和服务管理平台\",{\"1\":{\"864\":1}}],[\"授权\",{\"1\":{\"864\":1}}],[\"授权认证\",{\"1\":{\"472\":1}}],[\"认证\",{\"1\":{\"864\":1}}],[\"认为服务器端已经正常关闭连接\",{\"1\":{\"574\":1}}],[\"认为它符合幂等性\",{\"1\":{\"553\":1}}],[\"充分利用了响应式编程的优势\",{\"1\":{\"864\":1}}],[\"充当微服务架构的基石和支撑\",{\"1\":{\"832\":1}}],[\"权重值越高\",{\"1\":{\"851\":2}}],[\"权限验证\",{\"1\":{\"684\":1}}],[\"权限比较小\",{\"1\":{\"632\":1}}],[\"轮询算法适用于后端服务器具有相同的处理能力和性能的场景\",{\"1\":{\"851\":1}}],[\"轮询算法是最简单的负载均衡算法之一\",{\"1\":{\"851\":1}}],[\"轮询算法\",{\"1\":{\"851\":1}}],[\"灵活性|更加灵活\",{\"1\":{\"845\":1}}],[\"灵活度高\",{\"1\":{\"433\":1}}],[\"住这个请求\",{\"1\":{\"843\":1}}],[\"携程开源的配置中心\",{\"1\":{\"841\":1}}],[\"健康检查\",{\"1\":{\"835\":1,\"836\":1}}],[\"健壮性\",{\"1\":{\"788\":1}}],[\"弹性\",{\"1\":{\"835\":1}}],[\"灰度发布等\",{\"1\":{\"836\":1}}],[\"灰度发布等操作\",{\"1\":{\"834\":1}}],[\"灰色所示\",{\"1\":{\"501\":1}}],[\"据说springcloud\",{\"1\":{\"831\":1}}],[\"孵化较新\",{\"1\":{\"831\":1}}],[\"孵化较早\",{\"1\":{\"831\":1}}],[\"孵化和成熟度\",{\"1\":{\"831\":1}}],[\"团队沟通和协作成本\",{\"1\":{\"829\":1}}],[\"紧耦合的单元进行开发和部署\",{\"1\":{\"828\":1}}],[\"紧急指针是否有效\",{\"1\":{\"580\":1}}],[\"概览\",{\"0\":{\"827\":1}}],[\"概述\",{\"0\":{\"230\":1}}],[\"熔断器将会打开\",{\"1\":{\"858\":1}}],[\"熔断器\",{\"1\":{\"831\":1,\"832\":1}}],[\"熔断机制\",{\"1\":{\"824\":1}}],[\"熔断降级等功能\",{\"1\":{\"857\":1}}],[\"熔断降级\",{\"1\":{\"704\":1,\"831\":1}}],[\"彻底地去耦合\",{\"1\":{\"824\":1}}],[\"互相协作\",{\"1\":{\"824\":1}}],[\"互相配合\",{\"1\":{\"824\":1}}],[\"互斥锁\",{\"1\":{\"712\":1}}],[\"互斥这个条件我们没有办法破坏\",{\"1\":{\"342\":1}}],[\"互斥条件\",{\"1\":{\"342\":1,\"647\":1,\"648\":1}}],[\"敏捷地开发新一代基于\",{\"1\":{\"819\":1}}],[\"敏感操作多重校验\",{\"1\":{\"613\":1}}],[\"希望自定义的异常可以进行回滚\",{\"1\":{\"813\":1}}],[\"态代理工厂\",{\"1\":{\"806\":1}}],[\"疯狂掉头发解决问题\",{\"1\":{\"806\":2}}],[\"毕竟\",{\"1\":{\"817\":1}}],[\"毕竟招人最后都是要撸代码的\",{\"1\":{\"805\":1}}],[\"毕竟生产的产品不能立马就拉走\",{\"1\":{\"788\":1}}],[\"场面一度很尴尬\",{\"1\":{\"805\":1}}],[\"场景2\",{\"1\":{\"345\":1}}],[\"场景1\",{\"1\":{\"345\":1}}],[\"场景\",{\"1\":{\"157\":2}}],[\"织入是将增强添加到目标类的具体连接点上的过程\",{\"1\":{\"804\":1}}],[\"织入\",{\"1\":{\"804\":1}}],[\"填充属性\",{\"1\":{\"802\":1}}],[\"填满或在某些其他情况下\",{\"1\":{\"519\":1}}],[\"⼆级不⾏吗\",{\"0\":{\"801\":1}}],[\"削足适履了属于是\",{\"1\":{\"798\":1}}],[\"削峰\",{\"1\":{\"740\":2}}],[\"掌握所有\",{\"1\":{\"796\":1}}],[\"赋值\",{\"1\":{\"793\":1}}],[\"赋值给某个类变量或者对象的成员变量\",{\"1\":{\"393\":1}}],[\"赋值给\",{\"1\":{\"245\":2}}],[\"赋值给浮点型\",{\"1\":{\"239\":1}}],[\"别让\",{\"1\":{\"800\":1}}],[\"别想叫醒我\",{\"1\":{\"793\":2}}],[\"别问这些参数是怎么来的\",{\"1\":{\"591\":1}}],[\"睡了\",{\"1\":{\"793\":2}}],[\"入学登记\",{\"1\":{\"793\":2}}],[\"入手\",{\"1\":{\"418\":1}}],[\"步真正销毁\",{\"1\":{\"793\":1}}],[\"步其实也可以算到销毁阶段\",{\"1\":{\"793\":1}}],[\"步在初始化后执行\",{\"1\":{\"793\":1}}],[\"步为在初始化前执行\",{\"1\":{\"793\":1}}],[\"步是真正的初始化\",{\"1\":{\"793\":1}}],[\"步\",{\"1\":{\"793\":3}}],[\"步长设置为\",{\"1\":{\"534\":1}}],[\"懒加载的方式不同\",{\"1\":{\"791\":1}}],[\"派生而来\",{\"1\":{\"791\":1}}],[\"身份证号\",{\"1\":{\"793\":1}}],[\"身份证书\",{\"1\":{\"562\":1}}],[\"身躯\",{\"1\":{\"789\":1}}],[\"心脏\",{\"1\":{\"789\":1}}],[\"心跳\",{\"1\":{\"222\":1}}],[\"心跳信息\",{\"1\":{\"222\":1}}],[\"感兴趣可以学习参考\",{\"1\":{\"788\":1}}],[\"边界检查\",{\"1\":{\"788\":1}}],[\"边际效用也不大\",{\"1\":{\"175\":1}}],[\"至此\",{\"1\":{\"788\":1,\"821\":1}}],[\"至于最终的销毁\",{\"1\":{\"793\":1}}],[\"至于这些任务由哪些线程完成无关紧要\",{\"1\":{\"347\":1}}],[\"至于红黑树转回链表的阈值为什么是6\",{\"1\":{\"172\":1}}],[\"至于写操作\",{\"1\":{\"159\":1}}],[\"测试类\",{\"1\":{\"821\":1}}],[\"测试\",{\"1\":{\"788\":1,\"793\":1,\"821\":1,\"828\":1}}],[\"测试目的站是否可达及了解其有关状态\",{\"1\":{\"609\":1}}],[\"偷懒\",{\"1\":{\"788\":1}}],[\"答案毫无疑问\",{\"1\":{\"788\":1}}],[\"答案是可以的\",{\"1\":{\"428\":1}}],[\"答案是为了保证应用程序的稳定有序\",{\"1\":{\"425\":1}}],[\"答案是至少破坏死锁发生的一个条件\",{\"1\":{\"342\":1}}],[\"答案是\",{\"1\":{\"245\":2,\"269\":1}}],[\"专心开发应用就行\",{\"1\":{\"787\":1}}],[\"策略模式\",{\"1\":{\"785\":1}}],[\"策略为每秒同步一次\",{\"1\":{\"720\":1}}],[\"观察者模式\",{\"1\":{\"785\":1}}],[\"切面在应用运行的某个时刻被织入\",{\"1\":{\"804\":1}}],[\"切面在目标类加载到\",{\"1\":{\"804\":1}}],[\"切面在目标类编译时被织入\",{\"1\":{\"804\":1}}],[\"切面就是对横切关注点的抽象\",{\"1\":{\"804\":1}}],[\"切面\",{\"1\":{\"804\":1,\"805\":1}}],[\"切点\",{\"1\":{\"784\":1,\"804\":1}}],[\"切换到b\",{\"1\":{\"635\":1}}],[\"切换后再将其他几个节点上添加字段\",{\"1\":{\"537\":1}}],[\"申明的路径\",{\"1\":{\"784\":1}}],[\"申请数字证书\",{\"1\":{\"561\":1}}],[\"申请表的互斥锁时会被阻塞\",{\"1\":{\"514\":1}}],[\"申请表的意向排他锁\",{\"1\":{\"514\":1}}],[\"申请的时候可以先申请资源序号小的\",{\"1\":{\"342\":1,\"648\":1}}],[\"申请开启一个全局事务\",{\"1\":{\"208\":1}}],[\"体中\",{\"1\":{\"784\":1}}],[\"体现为setparameter\",{\"1\":{\"438\":1}}],[\"风格的接口的流程是什么样的呢\",{\"0\":{\"817\":1}}],[\"风格接口\",{\"1\":{\"784\":1,\"816\":1}}],[\"风趣幽默\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"联盟兼容的编程实现\",{\"1\":{\"783\":1}}],[\"联合索引\",{\"1\":{\"498\":1}}],[\"思想的实现\",{\"1\":{\"783\":1}}],[\"声明式api\",{\"1\":{\"847\":1}}],[\"声明式事务在哪些情况下会失效\",{\"0\":{\"813\":1}}],[\"声明式事务是一种环绕增强\",{\"1\":{\"812\":1}}],[\"声明式事务实现原理了解吗\",{\"0\":{\"812\":1}}],[\"声明式事务管理建立在\",{\"1\":{\"809\":1}}],[\"声明式事务\",{\"1\":{\"809\":1}}],[\"声明式事务的支持\",{\"1\":{\"782\":1}}],[\"声明切点\",{\"1\":{\"784\":1}}],[\"声明一个切面\",{\"1\":{\"784\":1}}],[\"声明当前方法的返回值为一个\",{\"1\":{\"784\":1}}],[\"声明当前类是一个配置类\",{\"1\":{\"784\":1}}],[\"声音的介质可是是空气或者电缆\",{\"1\":{\"641\":1}}],[\"声音稍微不清晰一点\",{\"1\":{\"598\":1}}],[\"企业级开发的标配基本就是\",{\"1\":{\"782\":1}}],[\"企开开发\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"战场的龙骑兵渐渐崛起\",{\"1\":{\"782\":1}}],[\"马不停蹄\",{\"1\":{\"777\":1}}],[\"马上到\",{\"1\":{\"345\":1}}],[\"刷盘的最终实现都是使用nio中的\",{\"1\":{\"774\":1}}],[\"固定的单个indexfile文件大小约为400m\",{\"1\":{\"771\":1}}],[\"固定数目线程的线程池\",{\"1\":{\"360\":1}}],[\"起了个学名\",{\"1\":{\"793\":2}}],[\"起始偏移量为1073741824\",{\"1\":{\"771\":1}}],[\"起始偏移量为0\",{\"1\":{\"771\":1}}],[\"起到一个重入计数器的作用\",{\"1\":{\"329\":1}}],[\"划分多个zookeeper集群来解决\",{\"1\":{\"770\":1}}],[\"色的\",{\"1\":{\"767\":1}}],[\"名称\",{\"1\":{\"767\":1}}],[\"死信消息的特点\",{\"1\":{\"766\":1}}],[\"死信队列的特点\",{\"1\":{\"766\":1}}],[\"死信队列用于处理无法被正常消费的消息\",{\"1\":{\"766\":1}}],[\"死信队列知道吗\",{\"0\":{\"766\":1}}],[\"死锁产生需要同时满足四个条件\",{\"1\":{\"647\":1}}],[\"死锁产生有哪些条件\",{\"0\":{\"647\":1}}],[\"死锁的产生必须具备以下四个条件\",{\"1\":{\"342\":1}}],[\"死锁是指两个或两个以上的线程在执行过程中\",{\"1\":{\"342\":1}}],[\"端查询本地事务的状态\",{\"1\":{\"765\":1}}],[\"端查询半消息的执行情况\",{\"1\":{\"765\":1}}],[\"端迟迟等不到二次确认\",{\"1\":{\"765\":1}}],[\"端将半消息标记为正常消息\",{\"1\":{\"765\":1}}],[\"端执行本地事务\",{\"1\":{\"765\":1}}],[\"端执行完本地事务后经过二次确认了之后\",{\"1\":{\"765\":1}}],[\"端收到响应\",{\"1\":{\"765\":1}}],[\"端的消息\",{\"1\":{\"765\":1}}],[\"端只能丢弃不处理\",{\"1\":{\"762\":1}}],[\"端过滤\",{\"1\":{\"762\":1}}],[\"端\",{\"1\":{\"762\":1,\"765\":1}}],[\"端按照\",{\"1\":{\"762\":1}}],[\"端口计算该包中的确认序列号是否正确\",{\"1\":{\"573\":1}}],[\"端口等信息为参数计算出一个\",{\"1\":{\"573\":1}}],[\"端口就一直开着\",{\"1\":{\"569\":1}}],[\"端口是\",{\"1\":{\"418\":1}}],[\"端口\",{\"1\":{\"76\":1,\"548\":1,\"563\":1}}],[\"八股也该更新换代了\",{\"1\":{\"817\":1}}],[\"八股文\",{\"1\":{\"375\":1,\"431\":1,\"456\":1,\"626\":1,\"666\":1,\"738\":1,\"780\":1}}],[\"八个字\",{\"1\":{\"764\":1}}],[\"八个读队列\",{\"1\":{\"761\":1}}],[\"付款\",{\"1\":{\"759\":1}}],[\"拉取消息\",{\"1\":{\"778\":1}}],[\"拉取型消费者\",{\"1\":{\"751\":1}}],[\"拉出来怀怀旧\",{\"1\":{\"598\":1}}],[\"营销短信\",{\"1\":{\"750\":1}}],[\"营业中的\",{\"1\":{\"353\":1}}],[\"彼此没有任何信息交互\",{\"1\":{\"748\":1}}],[\"邮政系统要正常运行\",{\"1\":{\"747\":1}}],[\"邮箱的后缀都是固定的\",{\"1\":{\"489\":1}}],[\"画张图总结一下\",{\"1\":{\"744\":1}}],[\"物流消息等\",{\"1\":{\"744\":1}}],[\"物理\",{\"1\":{\"712\":1}}],[\"物理内存不足时一些不常用的页可以被交换出去\",{\"1\":{\"657\":1}}],[\"物理内存和交换空间的总容量就是虚拟内存的可用容量\",{\"1\":{\"657\":1}}],[\"物理层对应\",{\"1\":{\"542\":1}}],[\"物理层\",{\"1\":{\"542\":2}}],[\"物理存储不按照索引排序\",{\"1\":{\"506\":1}}],[\"物理存储按照索引排序\",{\"1\":{\"506\":1}}],[\"物理地址\",{\"1\":{\"76\":2,\"652\":1}}],[\"十万级\",{\"1\":{\"742\":1}}],[\"十三个章节\",{\"1\":{\"620\":1}}],[\"吞吐量比较高\",{\"1\":{\"741\":1}}],[\"吞吐量通常要高于linkedblockingquene\",{\"1\":{\"356\":1}}],[\"吞吐量通常要高于arrayblockingquene\",{\"1\":{\"356\":1}}],[\"攒一波再处理\",{\"1\":{\"741\":1}}],[\"稳定可靠\",{\"1\":{\"741\":1}}],[\"迅捷\",{\"1\":{\"741\":1}}],[\"轻量级服务熔断库\",{\"1\":{\"857\":1}}],[\"轻量级的\",{\"1\":{\"830\":1}}],[\"轻量级锁的获取\",{\"1\":{\"329\":1}}],[\"轻量级锁\",{\"0\":{\"329\":1},\"1\":{\"327\":2}}],[\"轻量级锁和偏向锁等优化策略\",{\"1\":{\"327\":1}}],[\"轻量\",{\"1\":{\"741\":1}}],[\"社区发展存在隐忧\",{\"1\":{\"831\":1}}],[\"社区活跃度\",{\"1\":{\"741\":1,\"831\":1}}],[\"社交网络\",{\"1\":{\"669\":1}}],[\"影响内存管理效率\",{\"1\":{\"734\":1}}],[\"早期曝光对象工厂\",{\"1\":{\"800\":1}}],[\"早期曝光对象\",{\"1\":{\"800\":1}}],[\"早期版本存储\",{\"1\":{\"734\":1}}],[\"早期有人将用户的登录名和密码存储在\",{\"1\":{\"566\":1}}],[\"沿途经历的层\",{\"1\":{\"732\":1}}],[\"码\",{\"1\":{\"730\":1}}],[\"惰性空间释放\",{\"1\":{\"730\":1}}],[\"惰性删除指的是当我们查询key的时候才对key进⾏检测\",{\"1\":{\"716\":1}}],[\"惰性删除\",{\"1\":{\"716\":1}}],[\"→\",{\"1\":{\"730\":1}}],[\"⻓度等\",{\"1\":{\"729\":1}}],[\"跳跃表中所有的节点都按分值从小到大来排序\",{\"1\":{\"732\":1}}],[\"跳跃表节点的level数组可以包含多个元素\",{\"1\":{\"732\":1}}],[\"跳跃表的节点里有这些元素\",{\"1\":{\"732\":1}}],[\"跳跃表实现起来更简单\",{\"1\":{\"732\":1}}],[\"跳跃表是怎么实现的\",{\"1\":{\"732\":1}}],[\"跳跃表是比较常问的一种结构\",{\"1\":{\"732\":1}}],[\"跳跃表是如何实现的\",{\"0\":{\"732\":1}}],[\"跳跃表是有序集合的底层实现之⼀\",{\"1\":{\"729\":1}}],[\"跳跃表skiplist\",{\"1\":{\"729\":1}}],[\"跳跃表\",{\"1\":{\"729\":1,\"732\":2}}],[\"跳出本次循环\",{\"1\":{\"243\":1}}],[\"跳出整个循环\",{\"1\":{\"243\":1}}],[\"茅坑\",{\"1\":{\"727\":1}}],[\"脚本\",{\"1\":{\"726\":1}}],[\"扣减成功\",{\"1\":{\"725\":1}}],[\"扣减库存\",{\"1\":{\"725\":1}}],[\"街\",{\"1\":{\"725\":1}}],[\"典\",{\"1\":{\"725\":1}}],[\"烂\",{\"1\":{\"725\":1}}],[\"些命令常驻在redis内存中\",{\"1\":{\"725\":1}}],[\"挂起的请求\",{\"1\":{\"778\":1}}],[\"挂了\",{\"1\":{\"720\":1}}],[\"挂号结束后患者找到对应的诊室就诊\",{\"1\":{\"325\":1}}],[\"备份数据\",{\"1\":{\"720\":1}}],[\"逐步地清理传入的key\",{\"1\":{\"719\":1}}],[\"逐步改为采用本地内存\",{\"1\":{\"381\":1}}],[\"倍\",{\"1\":{\"718\":1}}],[\"倍的时间\",{\"1\":{\"576\":1}}],[\"倍的\",{\"1\":{\"576\":1}}],[\"禁用keys\",{\"1\":{\"718\":1}}],[\"禁止以\",{\"1\":{\"615\":1}}],[\"度超过o\",{\"1\":{\"718\":1}}],[\"拒绝或进行其他降级处理\",{\"1\":{\"859\":1}}],[\"拒绝所有写入操作并返\",{\"1\":{\"717\":1}}],[\"拒绝服务\",{\"1\":{\"611\":1}}],[\"承载着tb级别的缓存数据\",{\"1\":{\"713\":1}}],[\"承诺不会再接受提案号小于mn\",{\"1\":{\"215\":1}}],[\"承诺不会再接受提案号小于或等于\",{\"1\":{\"215\":1}}],[\"较少的潜在危险\",{\"1\":{\"712\":1}}],[\"造成redis集群中数据倾斜\",{\"1\":{\"719\":1}}],[\"造成需要添加大量节点做水平扩容\",{\"1\":{\"713\":1}}],[\"造成key的分布与业务无关\",{\"1\":{\"713\":1}}],[\"造成后端负载加大\",{\"1\":{\"712\":1}}],[\"造成了短作业等待时间过长\",{\"1\":{\"640\":1}}],[\"⾛内存查询\",{\"1\":{\"710\":1}}],[\"订阅关系集合\",{\"1\":{\"777\":1}}],[\"订阅主题\",{\"1\":{\"743\":1}}],[\"订阅者的概念是通过消费组\",{\"1\":{\"744\":1}}],[\"订阅者都可以接收到主题的所有消息\",{\"1\":{\"743\":1}}],[\"订阅者在接收消息之前需要先\",{\"1\":{\"743\":1}}],[\"订阅者们订阅到消息后\",{\"1\":{\"709\":1}}],[\"订阅模型中的概念是完全一样的\",{\"1\":{\"744\":1}}],[\"订阅模型中\",{\"1\":{\"743\":1}}],[\"订阅模型\",{\"1\":{\"743\":3,\"744\":1}}],[\"订阅模式可以1\",{\"1\":{\"722\":1}}],[\"订阅相应频道的客户端都能收到消息\",{\"1\":{\"722\":1}}],[\"订阅\",{\"1\":{\"722\":2,\"743\":1}}],[\"订单\",{\"1\":{\"788\":1}}],[\"订单处理\",{\"1\":{\"788\":1}}],[\"订单支付之后\",{\"1\":{\"740\":1}}],[\"订单resultmap\",{\"1\":{\"441\":1}}],[\"订单服务执行自己的本地事务\",{\"1\":{\"206\":1}}],[\"订单服务中的消息有可能由于业务问题会一直重复发送\",{\"1\":{\"205\":1}}],[\"订单服务\",{\"1\":{\"205\":2}}],[\"订单系统将当前订单状态设置为支付中\",{\"1\":{\"204\":1}}],[\"散落在分布式服务的各个节点上\",{\"1\":{\"709\":1}}],[\"散列方法重新计算位置\",{\"1\":{\"314\":1}}],[\"散列方法就是怎么把对应的key映射到table数组的相应下标\",{\"1\":{\"312\":1}}],[\"散列方法\",{\"1\":{\"312\":1}}],[\"散列函数\",{\"1\":{\"175\":1,\"176\":1}}],[\"散列也更均衡\",{\"1\":{\"170\":1}}],[\"延时消息了解吗\",{\"0\":{\"763\":1}}],[\"延时双删防止脏数据\",{\"1\":{\"708\":1}}],[\"延迟较短\",{\"1\":{\"598\":1}}],[\"延迟确认意味着延迟接收\",{\"1\":{\"584\":1}}],[\"延迟确认的策略\",{\"1\":{\"584\":1}}],[\"延迟确认\",{\"1\":{\"584\":3}}],[\"延迟关联\",{\"1\":{\"488\":1}}],[\"延迟队列\",{\"1\":{\"356\":1}}],[\"退路\",{\"1\":{\"704\":1}}],[\"退化成间隙锁\",{\"1\":{\"513\":1}}],[\"暂不可投递\",{\"1\":{\"765\":1}}],[\"暂时停止业务服务访问缓存系统\",{\"1\":{\"704\":1}}],[\"暂停线程的执行\",{\"1\":{\"272\":1}}],[\"热点key重建\",{\"0\":{\"712\":1}}],[\"热点数据永不过期\",{\"1\":{\"704\":1}}],[\"热key可能会造成整体流量的不均衡\",{\"1\":{\"710\":1}}],[\"热门新闻事件或商品\",{\"1\":{\"710\":1}}],[\"热心的邻居老王赶紧跑到村口\",{\"1\":{\"568\":1}}],[\"均被\",{\"1\":{\"811\":1}}],[\"均需要consumer端知道从broker端的哪一个消息队列中去获取消息\",{\"1\":{\"777\":1}}],[\"均匀过期\",{\"1\":{\"704\":1}}],[\"均为\",{\"1\":{\"463\":1,\"582\":1,\"766\":1}}],[\"某个\",{\"1\":{\"720\":1}}],[\"某个线程一直等不到它所需要的资源\",{\"1\":{\"649\":1}}],[\"某⼀时刻发⽣⼤规模的缓存失效的情况\",{\"1\":{\"704\":1}}],[\"爬虫造成空命中\",{\"1\":{\"703\":1}}],[\"恶意攻击\",{\"1\":{\"703\":1}}],[\"恶意程序种类繁多\",{\"1\":{\"611\":1}}],[\"恶意程序\",{\"1\":{\"611\":1}}],[\"部署和运维复杂性\",{\"1\":{\"829\":1}}],[\"部署和扩展\",{\"1\":{\"828\":2}}],[\"部署\",{\"1\":{\"829\":1}}],[\"部署redis集群至少需要几个物理节点\",{\"1\":{\"698\":1}}],[\"部分顺序消息相对比较好实现\",{\"1\":{\"760\":1}}],[\"部分顺序消息\",{\"0\":{\"760\":1}}],[\"部分顺序消息只要保证每一组消息被顺序消费即可\",{\"1\":{\"759\":1}}],[\"部分复制主要是redis针对全量复制的过高开销做出的一种优化措施\",{\"1\":{\"685\":1}}],[\"部分复制\",{\"1\":{\"685\":1}}],[\"部分\",{\"1\":{\"463\":1}}],[\"部分收集\",{\"1\":{\"397\":1}}],[\"投票过程其实是一个领导者选举的过程\",{\"1\":{\"698\":1}}],[\"投票给他\",{\"1\":{\"219\":1}}],[\"资格检查\",{\"1\":{\"698\":1}}],[\"资源可以是url\",{\"1\":{\"859\":1}}],[\"资源加载器\",{\"1\":{\"788\":1}}],[\"资源从一个进程分配给另一个进程的机制\",{\"1\":{\"636\":1}}],[\"资源枯竭的问题\",{\"1\":{\"605\":1}}],[\"资源\",{\"1\":{\"405\":1,\"414\":1,\"642\":1}}],[\"资源的最后修改时间\",{\"1\":{\"556\":1}}],[\"资源的匹配信息\",{\"1\":{\"556\":1}}],[\"资源的环形链\",{\"1\":{\"342\":1,\"647\":1}}],[\"资源的分配采用了时间片轮转也就是给每个线程分配一个时间片\",{\"1\":{\"304\":1}}],[\"资源后就可以继续运行\",{\"1\":{\"302\":1}}],[\"资源比较特殊\",{\"1\":{\"299\":1}}],[\"资源管理器执行相应的事务操作并返回执行结果\",{\"1\":{\"871\":1}}],[\"资源管理器负责管理和控制各个参与者\",{\"1\":{\"871\":1}}],[\"资源管理器中的资源一直处于阻塞\",{\"1\":{\"202\":1}}],[\"资源管理器就会一直阻塞\",{\"1\":{\"202\":1}}],[\"资源管理器\",{\"1\":{\"202\":1,\"208\":1,\"871\":1}}],[\"令\",{\"1\":{\"697\":1,\"718\":1}}],[\"令牌桶或漏桶\",{\"1\":{\"859\":1}}],[\"令牌桶就是生产访问令牌的一个地方\",{\"1\":{\"227\":1}}],[\"令牌桶算法\",{\"1\":{\"227\":1}}],[\"仍以上图为例\",{\"1\":{\"695\":1}}],[\"仍然拿不到当前消费处理队列的锁则返回false\",{\"1\":{\"777\":1}}],[\"仍然可以发送消息\",{\"1\":{\"767\":1}}],[\"仍然可以从\",{\"1\":{\"767\":1}}],[\"仍然可用\",{\"1\":{\"767\":1}}],[\"仍然是await\",{\"1\":{\"346\":1}}],[\"仍然用五个线程代表大乔\",{\"1\":{\"345\":1}}],[\"仍然能够对外提供满足一致性和可用性的服务\",{\"1\":{\"190\":1}}],[\"槽解耦了数据和实际节点\",{\"1\":{\"695\":1}}],[\"槽是数据管理和迁移的基本单位\",{\"1\":{\"695\":1}}],[\"槽是介于数据和实际节点之间的虚拟概念\",{\"1\":{\"695\":1}}],[\"槽\",{\"1\":{\"695\":4}}],[\"落入到\",{\"1\":{\"694\":2}}],[\"频道上发送该sentinel节点对于主节点的判断以及当前sentinel节点的信息\",{\"1\":{\"688\":1}}],[\"频繁更新的值\",{\"1\":{\"497\":1}}],[\"频繁创建了大量对象\",{\"1\":{\"417\":1}}],[\"频繁问题\",{\"1\":{\"416\":1}}],[\"频繁\",{\"0\":{\"416\":1,\"417\":1},\"1\":{\"418\":1}}],[\"致力于解决企业级开发中最普遍的\",{\"1\":{\"807\":1}}],[\"致\",{\"1\":{\"685\":1}}],[\"哨兵解决了高可用的问题\",{\"1\":{\"691\":1}}],[\"哨兵模式是通过哨兵节点完成对数据节点的监控\",{\"1\":{\"688\":1}}],[\"哨兵可以将故障转移的结果发送给客户端\",{\"1\":{\"687\":1}}],[\"哨兵会开始\",{\"1\":{\"687\":1}}],[\"哨兵会不断地检查主节点和从节点是否运作正常\",{\"1\":{\"687\":1}}],[\"哨兵实现了\",{\"1\":{\"687\":1}}],[\"哨兵系统由一个或多个哨兵节点组成\",{\"1\":{\"687\":1}}],[\"哨兵节点是特殊的\",{\"1\":{\"687\":1}}],[\"哨兵节点\",{\"1\":{\"687\":1}}],[\"哨兵节点和数据节点\",{\"1\":{\"687\":1}}],[\"哨兵\",{\"0\":{\"687\":1,\"688\":1},\"1\":{\"681\":1,\"687\":1}}],[\"吐槽官方的解释有些敷衍\",{\"1\":{\"673\":1}}],[\"谁解答完谁举手\",{\"1\":{\"672\":1}}],[\"谁叫你来办的你找谁去\",{\"1\":{\"353\":1}}],[\"样的是\",{\"1\":{\"670\":1}}],[\"限流等特性\",{\"1\":{\"864\":1}}],[\"限流控制\",{\"1\":{\"859\":1}}],[\"限流模式\",{\"1\":{\"859\":1}}],[\"限流阈值\",{\"1\":{\"859\":1}}],[\"限流和熔断\",{\"1\":{\"853\":1}}],[\"限流和降级\",{\"1\":{\"831\":1,\"832\":1}}],[\"限速\",{\"1\":{\"670\":1}}],[\"限制输入长度\",{\"1\":{\"615\":1}}],[\"限制\",{\"1\":{\"381\":1,\"664\":1}}],[\"音频等信息无法保存\",{\"1\":{\"730\":1}}],[\"音频\",{\"1\":{\"670\":1}}],[\"复杂\",{\"1\":{\"782\":1}}],[\"复杂度\",{\"1\":{\"730\":1}}],[\"复杂的字符串\",{\"1\":{\"670\":1}}],[\"复制的最完整\",{\"1\":{\"690\":1}}],[\"复制到其他的\",{\"1\":{\"682\":1}}],[\"复制给db\",{\"1\":{\"523\":1}}],[\"复制或恢复出来的数据库中\",{\"1\":{\"482\":1}}],[\"复制算法实现\",{\"1\":{\"401\":1}}],[\"复制算法解决了标记\",{\"1\":{\"395\":1}}],[\"复制算法\",{\"1\":{\"395\":1,\"396\":1}}],[\"复制成功之后\",{\"1\":{\"329\":1}}],[\"喜好\",{\"1\":{\"669\":1}}],[\"喜欢听音乐\",{\"1\":{\"0\":1}}],[\"喜欢看电视\",{\"1\":{\"0\":1}}],[\"喜欢前后端编码\",{\"1\":{\"0\":1}}],[\"粉丝\",{\"1\":{\"669\":1}}],[\"粉色所示\",{\"1\":{\"501\":1}}],[\"踩\",{\"1\":{\"669\":1}}],[\"赞\",{\"1\":{\"669\":1}}],[\"点代表有n张选票\",{\"1\":{\"698\":1}}],[\"点会认为接收节点存在故障\",{\"1\":{\"698\":1}}],[\"点ping响应\",{\"1\":{\"690\":1}}],[\"点赞量等等\",{\"1\":{\"669\":1}}],[\"点击jconsole线程面板的检测到死锁按钮\",{\"1\":{\"343\":1}}],[\"⼤⼤提⾼了检测的效率\",{\"1\":{\"664\":1}}],[\"⼤⼩的数据\",{\"1\":{\"586\":1,\"587\":1}}],[\"⼤⼩\",{\"1\":{\"584\":1}}],[\"技术\",{\"1\":{\"664\":1}}],[\"盯着up的更新\",{\"1\":{\"663\":1}}],[\"异步而言\",{\"1\":{\"774\":1}}],[\"异步刷盘是指消息达到broker内存后就返回producer数据已经发送成功\",{\"1\":{\"774\":1}}],[\"异步刷盘\",{\"1\":{\"774\":1}}],[\"异步发送的时候\",{\"1\":{\"754\":1}}],[\"异步发送指发送方发出数据后\",{\"1\":{\"750\":1}}],[\"异步发送\",{\"1\":{\"750\":1}}],[\"异步和单向\",{\"1\":{\"750\":1}}],[\"异步\",{\"1\":{\"740\":2}}],[\"异步i\",{\"1\":{\"663\":2}}],[\"异常回滚\",{\"1\":{\"812\":1}}],[\"异常通知\",{\"1\":{\"804\":1}}],[\"异常情况\",{\"1\":{\"765\":1}}],[\"异常的可能\",{\"1\":{\"388\":1}}],[\"异常的处理方式\",{\"0\":{\"275\":1}}],[\"异常\",{\"1\":{\"241\":1,\"272\":1,\"388\":1,\"413\":1,\"813\":1}}],[\"异常处理\",{\"0\":{\"273\":1},\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"788\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"⾮阻塞的\",{\"1\":{\"663\":1}}],[\"聊聊阻塞与⾮阻塞\",{\"0\":{\"663\":1}}],[\"聊天\",{\"1\":{\"597\":1}}],[\"零拷贝比较常见的实现方式是mmap\",{\"1\":{\"773\":1}}],[\"零拷贝\",{\"1\":{\"772\":2}}],[\"零拷贝技术实现主要有两种\",{\"1\":{\"662\":1}}],[\"零拷贝了解吗\",{\"0\":{\"662\":1}}],[\"甚⾄⽬标⽂件被删除了\",{\"1\":{\"660\":1}}],[\"甚至导致整个系统崩溃\",{\"1\":{\"853\":1}}],[\"甚至广义的\",{\"1\":{\"784\":1}}],[\"甚至超时\",{\"1\":{\"719\":1}}],[\"甚至可能会让应用崩溃\",{\"1\":{\"712\":1}}],[\"甚至是二进制\",{\"1\":{\"670\":1}}],[\"甚至把完全伪造的报文传送给接收方\",{\"1\":{\"611\":1}}],[\"甚至能快\",{\"1\":{\"461\":1}}],[\"甚至到\",{\"1\":{\"418\":1}}],[\"甚至还有可能触发扩容\",{\"1\":{\"154\":1}}],[\"淘汰计数器值最⼩的那个⻚⾯\",{\"1\":{\"658\":1}}],[\"淘宝的\",{\"1\":{\"526\":1}}],[\"困难的是\",{\"1\":{\"658\":1}}],[\"置换在未来最⻓时间不访问的⻚⾯\",{\"1\":{\"658\":1}}],[\"腾给系统\",{\"1\":{\"657\":1}}],[\"磁盘上的那块空间叫做交换空间\",{\"1\":{\"657\":1}}],[\"磁盘等\",{\"1\":{\"629\":1}}],[\"便可以将事务规则应用到业务逻辑中\",{\"1\":{\"809\":1}}],[\"便于维护和升级\",{\"1\":{\"804\":1}}],[\"便于存储保护和信息的共享\",{\"1\":{\"656\":1}}],[\"便回复\",{\"1\":{\"573\":1}}],[\"芯⽚中\",{\"1\":{\"655\":1}}],[\"利⽤这⼀特性\",{\"1\":{\"655\":1}}],[\"利用一阶段的回滚日志进行反向补偿\",{\"1\":{\"871\":1}}],[\"利用\",{\"1\":{\"805\":1,\"806\":1}}],[\"利用了nio中的filechannel模型将磁盘上的物理文件直接映射到用户态的内存地址中\",{\"1\":{\"772\":1}}],[\"利用排序实现\",{\"1\":{\"723\":1}}],[\"利用消息队列的重试机制\",{\"1\":{\"708\":1}}],[\"利用redis实现分布式锁\",{\"1\":{\"669\":1}}],[\"利用滑动窗口实现流量控制\",{\"1\":{\"581\":1}}],[\"利用辅助索引查询\",{\"1\":{\"507\":1}}],[\"利用索引扫描做排序\",{\"1\":{\"491\":1}}],[\"利用覆盖索引\",{\"1\":{\"489\":1}}],[\"利用空间换时间\",{\"1\":{\"460\":1}}],[\"利用数据库本身的事务机制\",{\"1\":{\"200\":1}}],[\"利用扩容后的大小也是2的倍数\",{\"1\":{\"168\":1}}],[\"段向用户提供二维地址空间\",{\"1\":{\"656\":1}}],[\"段的大小不固定\",{\"1\":{\"656\":1}}],[\"段的界限\",{\"1\":{\"652\":1}}],[\"段是信息的逻辑单位\",{\"1\":{\"656\":2}}],[\"段基地址7000+段偏移量500\",{\"1\":{\"652\":1}}],[\"段偏移量500\",{\"1\":{\"652\":1}}],[\"段3\",{\"1\":{\"652\":1}}],[\"段表主要包括段号\",{\"1\":{\"652\":1}}],[\"段号和段内偏移量\",{\"1\":{\"652\":1}}],[\"段进⾏重发\",{\"1\":{\"593\":1}}],[\"活锁可以用两个人过一条很窄的小桥来比喻\",{\"1\":{\"649\":1}}],[\"活锁\",{\"1\":{\"649\":1}}],[\"活锁和饥饿锁了解吗\",{\"0\":{\"649\":1}}],[\"饥饿锁\",{\"1\":{\"649\":2}}],[\"破坏其中的一个就可以\",{\"1\":{\"648\":1}}],[\"破坏了双亲委派原则\",{\"1\":{\"429\":1}}],[\"产⽣死锁的有四个必要条件\",{\"1\":{\"648\":1}}],[\"产生了数据不一致问题\",{\"1\":{\"707\":1}}],[\"产生表\",{\"1\":{\"470\":1}}],[\"产生\",{\"1\":{\"470\":1}}],[\"产生虚拟表\",{\"1\":{\"470\":5}}],[\"产生的所有死信消息\",{\"1\":{\"766\":1}}],[\"产生的读视图\",{\"1\":{\"523\":1}}],[\"产生的\",{\"1\":{\"219\":1}}],[\"⽆论是阻塞\",{\"1\":{\"663\":1}}],[\"⽆忙等待锁就是加锁失败的线程\",{\"1\":{\"645\":1}}],[\"⽆法篡改通信内容\",{\"1\":{\"562\":1}}],[\"忙等待锁和就是加锁失败的线程\",{\"1\":{\"645\":1}}],[\"拥有自己独立的数据库\",{\"1\":{\"824\":1}}],[\"拥有强大的性能及吞吐量\",{\"1\":{\"741\":1}}],[\"拥有灵活的路由配置\",{\"1\":{\"741\":1}}],[\"拥有资源\",{\"1\":{\"642\":1}}],[\"拥塞窗口大小\",{\"1\":{\"588\":1}}],[\"拥塞窗口就减半\",{\"1\":{\"586\":1}}],[\"拥塞窗⼝\",{\"1\":{\"585\":2}}],[\"拥塞发生\",{\"0\":{\"588\":1},\"1\":{\"585\":1}}],[\"拥塞避免算法\",{\"0\":{\"587\":1}}],[\"拥塞避免\",{\"1\":{\"585\":1}}],[\"拥塞控制主要有这几种常用算法\",{\"1\":{\"585\":1}}],[\"拥塞控制有哪些常用算法\",{\"1\":{\"585\":1}}],[\"拥塞控制\",{\"1\":{\"581\":1}}],[\"绿灯停\",{\"1\":{\"641\":1}}],[\"匿名管道是单向的\",{\"1\":{\"641\":1}}],[\"匿名管道和命名管道\",{\"1\":{\"641\":1}}],[\"孤儿进程将被\",{\"1\":{\"639\":1}}],[\"僵尸进程一般发生有父子关系的进程中\",{\"1\":{\"638\":1}}],[\"僵尸进程是已完成且处于终止状态\",{\"1\":{\"638\":1}}],[\"执⾏所访问的存储空间也局限于某个内存区域\",{\"1\":{\"655\":1}}],[\"执⾏三种基本状态\",{\"1\":{\"642\":1}}],[\"执⾏权限交回给⽤户程序\",{\"1\":{\"633\":1}}],[\"执行业务逻辑\",{\"1\":{\"872\":1}}],[\"执行业务方法之前\",{\"1\":{\"815\":1}}],[\"执行简化的逻辑或调用其他可靠的服务\",{\"1\":{\"858\":1}}],[\"执行不同的\",{\"1\":{\"815\":1}}],[\"执行目标对象的方法\",{\"1\":{\"806\":1}}],[\"执行耗时\",{\"1\":{\"805\":1}}],[\"执行后处理器\",{\"1\":{\"802\":1}}],[\"执行过程中间不会插入其他命令\",{\"1\":{\"725\":1}}],[\"执行debug\",{\"1\":{\"676\":1}}],[\"执行速度\",{\"1\":{\"469\":1}}],[\"执行效果\",{\"1\":{\"469\":1}}],[\"执行效率不稳定\",{\"1\":{\"395\":1}}],[\"执行update\",{\"1\":{\"451\":1}}],[\"执行update或select\",{\"1\":{\"451\":1}}],[\"执行器调用引擎的提交事务接口\",{\"1\":{\"481\":1}}],[\"执行器生成这个操作的\",{\"1\":{\"481\":1}}],[\"执行器拿到引擎给的行数据\",{\"1\":{\"481\":1}}],[\"执行器先找引擎获取\",{\"1\":{\"481\":1}}],[\"执行器将重用语句并执行批量更新\",{\"1\":{\"451\":1}}],[\"执行器会重用预处理语句\",{\"1\":{\"451\":1}}],[\"执行器\",{\"1\":{\"448\":2}}],[\"执行1次\",{\"1\":{\"445\":1}}],[\"执行时长\",{\"1\":{\"445\":1}}],[\"执行性能\",{\"1\":{\"433\":1}}],[\"执行一个任务\",{\"1\":{\"373\":1}}],[\"执行子任务\",{\"1\":{\"373\":1}}],[\"执行完请求后\",{\"1\":{\"817\":1}}],[\"执行完对\",{\"1\":{\"817\":1}}],[\"执行完毕\",{\"1\":{\"367\":1}}],[\"执行完毕后一次性返回所有指令的运行结果\",{\"1\":{\"724\":1}}],[\"执行完毕后\",{\"1\":{\"276\":1}}],[\"执行完任务的线程\",{\"1\":{\"364\":1}}],[\"执行完一个\",{\"1\":{\"362\":1}}],[\"执行代码逻辑\",{\"1\":{\"332\":1}}],[\"执行同步代码\",{\"1\":{\"328\":1}}],[\"执行任务\",{\"1\":{\"304\":1}}],[\"执行的数据库查询\",{\"1\":{\"291\":1}}],[\"执行结果\",{\"1\":{\"276\":3,\"805\":1}}],[\"执行本地事务的确认操作\",{\"1\":{\"872\":1}}],[\"执行本地事务确认\",{\"1\":{\"872\":1}}],[\"执行本地事务\",{\"1\":{\"206\":1,\"765\":2}}],[\"执行自己的本地事务\",{\"1\":{\"206\":1}}],[\"执行流程\",{\"1\":{\"205\":1,\"206\":1,\"207\":1}}],[\"执行cancel\",{\"1\":{\"204\":1}}],[\"执行扩容\",{\"1\":{\"181\":1}}],[\"执行\",{\"1\":{\"177\":1,\"235\":1,\"256\":1,\"399\":1,\"404\":1,\"527\":1}}],[\"⽤于保存整数值的集合抽象数据结构\",{\"1\":{\"729\":1}}],[\"⽤于保存键值对的抽象数据结构\",{\"1\":{\"729\":1}}],[\"⽤户态线程实现\",{\"1\":{\"644\":1}}],[\"⽤户程序执⾏在⽤户态\",{\"1\":{\"633\":1}}],[\"⽤户空间的代码只能访问⼀个局部的内存空间\",{\"1\":{\"632\":1}}],[\"⽤户空间\",{\"1\":{\"632\":1}}],[\"⽤途\",{\"1\":{\"564\":1}}],[\"吊大家胃口这么久\",{\"1\":{\"624\":1}}],[\"助你拿到心仪\",{\"1\":{\"623\":1}}],[\"精益求精\",{\"1\":{\"622\":1}}],[\"憋急了没坑位\",{\"1\":{\"621\":1}}],[\"泪目\",{\"1\":{\"621\":1}}],[\"满脑子都是分手\",{\"1\":{\"621\":1}}],[\"努力上学ing\",{\"1\":{\"793\":2}}],[\"努力让枯燥的知识点变得生动起来\",{\"1\":{\"621\":1}}],[\"努力做到图文并茂\",{\"1\":{\"621\":1}}],[\"足足画了一个多小时\",{\"1\":{\"621\":1}}],[\"听别人背八股的时候也噎地够呛\",{\"1\":{\"621\":1}}],[\"听起来很多\",{\"1\":{\"605\":1}}],[\"听起来似乎很抽象\",{\"1\":{\"348\":1}}],[\"涵盖了java基础\",{\"1\":{\"620\":1}}],[\"话不多说\",{\"1\":{\"620\":1}}],[\"耗时会不断增大\",{\"1\":{\"713\":1}}],[\"耗时可能在删除缓存的百倍以上\",{\"1\":{\"707\":1}}],[\"耗时近一年\",{\"1\":{\"619\":1}}],[\"耗尽\",{\"1\":{\"364\":1}}],[\"易于硬件实现\",{\"1\":{\"617\":1}}],[\"易于理解的一致性算法\",{\"1\":{\"219\":1}}],[\"私钥解密的形式\",{\"1\":{\"617\":1}}],[\"私钥由服务器持有\",{\"1\":{\"563\":1}}],[\"混在其中的恶意代码也被执行\",{\"1\":{\"615\":1}}],[\"混合持久化\",{\"1\":{\"680\":1}}],[\"混合线程实现\",{\"1\":{\"644\":1}}],[\"混合收集\",{\"1\":{\"397\":1}}],[\"混合型\",{\"1\":{\"359\":2}}],[\"教唆\",{\"1\":{\"615\":1}}],[\"教程\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"嵌入其中\",{\"1\":{\"615\":1}}],[\"嵌入式开发\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"页缓存\",{\"1\":{\"772\":1}}],[\"页面置换算法有哪些\",{\"0\":{\"658\":1}}],[\"页面里插入恶意\",{\"1\":{\"615\":1}}],[\"页的保护和共享受到限制\",{\"1\":{\"656\":1}}],[\"页的大小固定\",{\"1\":{\"656\":1}}],[\"页向用户提供的是一维地址空间\",{\"1\":{\"656\":1}}],[\"页是信息的物理单位\",{\"1\":{\"656\":1}}],[\"页锁\",{\"1\":{\"512\":1}}],[\"瓷碗\",{\"1\":{\"614\":1}}],[\"翻译过来是分布式拒绝服务\",{\"1\":{\"614\":1}}],[\"翻译过来就是拒绝服务\",{\"1\":{\"614\":1}}],[\"翻译成对应平台匹配的机器指令并运行\",{\"1\":{\"377\":1}}],[\"浏览帖子\",{\"1\":{\"613\":1}}],[\"浏览器包含了\",{\"1\":{\"613\":1}}],[\"浏览器接收到服务器返回的\",{\"1\":{\"566\":1}}],[\"浏览器收到证书后可以使⽤\",{\"1\":{\"564\":1}}],[\"浏览器向服务器发出浏览某个页面的请求\",{\"1\":{\"555\":1}}],[\"浏览器对\",{\"1\":{\"554\":1}}],[\"浏览器解析并渲染页面\",{\"1\":{\"546\":1}}],[\"浏览器访问\",{\"1\":{\"418\":1}}],[\"避开\",{\"1\":{\"612\":1}}],[\"避免因某个服务的故障导致整个系统的线程资源耗尽\",{\"1\":{\"858\":1}}],[\"避免重复的网络请求\",{\"1\":{\"858\":1}}],[\"避免资源浪费和系统崩溃\",{\"1\":{\"855\":1}}],[\"避免对整个系统造成级联故障\",{\"1\":{\"847\":1}}],[\"避免过期时间太过集中\",{\"1\":{\"704\":1}}],[\"避免过快导致网络拥塞问题\",{\"1\":{\"587\":1}}],[\"避免死锁\",{\"1\":{\"648\":1}}],[\"避免列上函数运算\",{\"1\":{\"489\":1}}],[\"避免全表扫描\",{\"1\":{\"489\":1}}],[\"避免使用阻塞式命令keys\",{\"1\":{\"719\":1}}],[\"避免使用\",{\"1\":{\"489\":1,\"490\":1}}],[\"避免不必要的列\",{\"0\":{\"487\":1}}],[\"避免跨表跨库\",{\"1\":{\"460\":1}}],[\"避免增加创建线程和销毁线程的资源损耗\",{\"1\":{\"351\":1}}],[\"避免一直等待\",{\"1\":{\"349\":1}}],[\"避免同一条消息被多次消费造成数据不一致\",{\"1\":{\"205\":1}}],[\"避免了大量的长连接占用内存资源\",{\"1\":{\"843\":1}}],[\"避免了像\",{\"1\":{\"730\":1}}],[\"避免了线程切换和竞态产生的消耗\",{\"1\":{\"671\":1}}],[\"避免了线程安全问题\",{\"1\":{\"308\":1}}],[\"避免了回表\",{\"1\":{\"508\":1}}],[\"避免了几乎所有的\",{\"1\":{\"433\":1}}],[\"避免了二叉树最坏情况下的o\",{\"1\":{\"162\":1}}],[\"避免了复杂的指针问题\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"待该服务线程取出后向broker端发起pull消息的请求\",{\"1\":{\"777\":1}}],[\"待搬迁结束后\",{\"1\":{\"731\":1}}],[\"待\",{\"1\":{\"718\":1}}],[\"待网络公司恢复已成功修改信件后\",{\"1\":{\"612\":1}}],[\"待发送数据大于\",{\"1\":{\"595\":1}}],[\"账号所对应的密码\",{\"1\":{\"612\":1}}],[\"账号\",{\"1\":{\"612\":1}}],[\"账户转\",{\"1\":{\"518\":1}}],[\"账户给\",{\"1\":{\"518\":1}}],[\"劫持\",{\"1\":{\"612\":3}}],[\"劫持的步骤是什么样的\",{\"1\":{\"612\":1}}],[\"劫持即域名劫持\",{\"1\":{\"612\":1}}],[\"劫持了解吗\",{\"0\":{\"612\":1}}],[\"硬编码会造成对象间的过度耦合\",{\"1\":{\"787\":1}}],[\"硬链接就是在目录下创建一个条目\",{\"1\":{\"660\":1}}],[\"硬链接和软链接有什么区别\",{\"0\":{\"660\":1}}],[\"硬盘等硬件\",{\"1\":{\"632\":1}}],[\"硬核理解版八股文\",{\"1\":{\"623\":1}}],[\"硬件地址\",{\"1\":{\"606\":1}}],[\"硬状态\",{\"1\":{\"193\":1}}],[\"绰号\",{\"1\":{\"604\":1}}],[\"域名劫持往往只能在特定的网络范围内进行\",{\"1\":{\"612\":1}}],[\"域名在同一个网络中也是惟一的\",{\"1\":{\"604\":1}}],[\"域名和\",{\"0\":{\"604\":1}}],[\"域名解析\",{\"1\":{\"600\":1}}],[\"域名解析系统\",{\"1\":{\"547\":1}}],[\"五十图\",{\"1\":{\"621\":1}}],[\"五大部分\",{\"1\":{\"620\":1}}],[\"五大类\",{\"1\":{\"603\":1}}],[\"五层体系结构\",{\"1\":{\"542\":1}}],[\"五层结构就是为了介绍网络原理而折中的网络通信模型\",{\"1\":{\"542\":1}}],[\"五层结构\",{\"1\":{\"542\":1}}],[\"恢复原状\",{\"1\":{\"758\":1}}],[\"恢复的过程也很简单\",{\"1\":{\"679\":1}}],[\"恢复的速度要快\",{\"1\":{\"678\":1}}],[\"恢复数据集的速度也要比\",{\"1\":{\"678\":1}}],[\"恢复速度慢\",{\"1\":{\"677\":1}}],[\"恢复速度快\",{\"1\":{\"677\":1}}],[\"恢复出原来的\",{\"1\":{\"602\":1}}],[\"恢复为空\",{\"1\":{\"325\":1}}],[\"寻址和路由\",{\"1\":{\"602\":1}}],[\"辅以\",{\"1\":{\"598\":1}}],[\"广播模式\",{\"1\":{\"777\":1}}],[\"广播消费\",{\"1\":{\"745\":1}}],[\"广播\",{\"1\":{\"597\":1}}],[\"广播通信\",{\"1\":{\"597\":1}}],[\"远程调用\",{\"0\":{\"844\":1},\"1\":{\"832\":1}}],[\"远程调用等\",{\"1\":{\"782\":1}}],[\"远程过程调用\",{\"1\":{\"830\":1,\"832\":1,\"845\":2}}],[\"远程登录\",{\"1\":{\"597\":1}}],[\"远地主机的运输层在接收到\",{\"1\":{\"599\":1}}],[\"远古\",{\"1\":{\"427\":1}}],[\"准确高要求高\",{\"1\":{\"597\":1}}],[\"准备选举时间\",{\"1\":{\"698\":1}}],[\"准备把\",{\"1\":{\"381\":1}}],[\"准备\",{\"0\":{\"215\":1},\"1\":{\"214\":1,\"421\":2}}],[\"准备阶段\",{\"1\":{\"202\":1,\"203\":1}}],[\"粘包和拆包问题\",{\"1\":{\"595\":1}}],[\"粘包和拆包\",{\"1\":{\"595\":1}}],[\"告诉处理器适配器应该要去执行哪个\",{\"1\":{\"816\":1,\"817\":1}}],[\"告诉对方自己是它需要查找的\",{\"1\":{\"606\":1}}],[\"告诉\",{\"1\":{\"594\":1}}],[\"~\",{\"1\":{\"594\":1}}],[\"英文是\",{\"1\":{\"594\":1}}],[\"英文全称是\",{\"1\":{\"547\":1,\"613\":1}}],[\"份数据\",{\"1\":{\"592\":1}}],[\"既支持ap\",{\"1\":{\"836\":1}}],[\"既可以加速数据读写\",{\"1\":{\"712\":1}}],[\"既持续修复bug\",{\"1\":{\"622\":1}}],[\"既使用\",{\"1\":{\"600\":1}}],[\"既浪费资源也浪费时间\",{\"1\":{\"591\":1}}],[\"既然我们⽆法预知⻚⾯在下⼀次访问前所需的等待时间\",{\"1\":{\"658\":1}}],[\"既然在类加载器中\",{\"1\":{\"428\":1}}],[\"既然有了字节流\",{\"0\":{\"279\":1}}],[\"μ\",{\"1\":{\"591\":1}}],[\"∂\",{\"1\":{\"591\":2}}],[\"µ\",{\"1\":{\"591\":1}}],[\"β\",{\"1\":{\"591\":3}}],[\"α\",{\"1\":{\"591\":3}}],[\"效果是最佳的\",{\"1\":{\"591\":1}}],[\"效率以及功能方面的要求\",{\"1\":{\"730\":1}}],[\"效率不会⼤幅度降低\",{\"1\":{\"664\":1}}],[\"效率不高\",{\"1\":{\"196\":1}}],[\"效率低\",{\"1\":{\"641\":1}}],[\"效率要求相对高\",{\"1\":{\"597\":1}}],[\"效率要求相对低\",{\"1\":{\"597\":1}}],[\"效率会比较低\",{\"1\":{\"583\":1}}],[\"效率更加稳定\",{\"1\":{\"504\":1}}],[\"效率更高\",{\"1\":{\"170\":1}}],[\"效率是否稳定\",{\"1\":{\"503\":1}}],[\"效率大于索引合并\",{\"1\":{\"495\":1}}],[\"略微大于\",{\"1\":{\"591\":1}}],[\"带来了更大的灵活性\",{\"1\":{\"828\":1}}],[\"带来了一个新的持久化选项\",{\"1\":{\"680\":1}}],[\"带来的好处就是\",{\"1\":{\"312\":1}}],[\"带着亮点去回答面试题\",{\"1\":{\"621\":1}}],[\"带着这本手册里的问题\",{\"1\":{\"620\":1}}],[\"带选择确认的重传\",{\"0\":{\"593\":1},\"1\":{\"590\":1}}],[\"呈指数增长\",{\"1\":{\"586\":1}}],[\"降级\",{\"1\":{\"859\":1}}],[\"降级方法的逻辑\",{\"1\":{\"858\":1}}],[\"降低组件之间的耦合性\",{\"1\":{\"815\":1}}],[\"降低了业务逻辑和通用逻辑的耦合性\",{\"1\":{\"804\":1}}],[\"降低到了o\",{\"1\":{\"729\":1}}],[\"降低接入成本\",{\"1\":{\"713\":1}}],[\"降低压⼒\",{\"1\":{\"710\":1}}],[\"降低发送的数据流\",{\"1\":{\"585\":1}}],[\"降为o\",{\"1\":{\"175\":1}}],[\"期间整个集群都处于不可用的状态\",{\"1\":{\"770\":1}}],[\"期间\",{\"1\":{\"584\":1}}],[\"期望程序员写整洁的代码\",{\"1\":{\"291\":1}}],[\"⽴刻发送数据\",{\"1\":{\"584\":1}}],[\"尺寸的数据块\",{\"1\":{\"584\":1}}],[\"蓝色框内\",{\"1\":{\"583\":1}}],[\"深入浅出\",{\"0\":{\"621\":1},\"1\":{\"621\":1}}],[\"深蓝色框里就是发送窗口\",{\"1\":{\"583\":1}}],[\"深拷贝如何实现呢\",{\"1\":{\"260\":1}}],[\"深拷贝\",{\"1\":{\"260\":1}}],[\"深拷贝和浅拷贝\",{\"0\":{\"260\":1}}],[\"滑动窗口限流可以查看前面的分布式篇\",{\"1\":{\"860\":1}}],[\"滑动窗口限流算法是一种基于时间窗口的限流算法\",{\"1\":{\"860\":1}}],[\"滑动窗口分为两种\",{\"1\":{\"583\":1}}],[\"滑动窗口控制等方法实现了可靠性传输\",{\"1\":{\"581\":1}}],[\"窗口大小值表示无需等待确认应答\",{\"1\":{\"583\":1}}],[\"剩余为起始偏移量\",{\"1\":{\"771\":1}}],[\"剩余库存少于请求数量\",{\"1\":{\"725\":1}}],[\"剩余的\",{\"1\":{\"582\":1}}],[\"剩下的寻址就交给子网内部实现\",{\"1\":{\"607\":1}}],[\"剩下的都是引用类型\",{\"1\":{\"263\":1}}],[\"剩下的50不用其实不用序列化\",{\"1\":{\"156\":1}}],[\"校验和\",{\"1\":{\"581\":2}}],[\"校验机制\",{\"1\":{\"562\":1}}],[\"缓冲区溢出\",{\"1\":{\"730\":1}}],[\"缓冲区\",{\"1\":{\"676\":1}}],[\"缓冲区⾥\",{\"1\":{\"662\":1}}],[\"缓冲区中建立一个\",{\"1\":{\"606\":1}}],[\"缓冲区的实际情况进行包的划分\",{\"1\":{\"595\":1}}],[\"缓冲区的空余空间\",{\"1\":{\"583\":1}}],[\"缓冲区尚未填满\",{\"1\":{\"580\":1}}],[\"缓存和降级\",{\"1\":{\"853\":1}}],[\"缓存和数据库数据不一致常见的两种原因\",{\"1\":{\"708\":1}}],[\"缓存bean\",{\"1\":{\"788\":2}}],[\"缓存+过期时间\",{\"1\":{\"712\":1}}],[\"缓存预热怎么做呢\",{\"0\":{\"711\":1}}],[\"缓存过期的时候\",{\"1\":{\"708\":1}}],[\"缓存key删除失败\",{\"1\":{\"708\":1}}],[\"缓存不一致处理\",{\"0\":{\"708\":1}}],[\"缓存中key不存在的时间的时间更长\",{\"1\":{\"707\":1}}],[\"缓存层和存储层的数据会有一段时间窗口的不一致\",{\"1\":{\"703\":1}}],[\"缓存空值有两大问题\",{\"1\":{\"703\":1}}],[\"缓存空值\",{\"1\":{\"703\":1}}],[\"缓存击穿\",{\"0\":{\"702\":1}}],[\"缓存雪崩是三大缓存问题里最严重的一种\",{\"1\":{\"704\":1}}],[\"缓存雪崩\",{\"0\":{\"701\":1,\"704\":1}}],[\"缓存穿透可能有两种原因\",{\"1\":{\"703\":1}}],[\"缓存穿透可能会使后端存储负载加大\",{\"1\":{\"703\":1}}],[\"缓存穿透将导致不存在的数据每次请求都要到存储层去查询\",{\"1\":{\"703\":1}}],[\"缓存穿透指的查询缓存和数据库中都不存在的数据\",{\"1\":{\"703\":1}}],[\"缓存穿透\",{\"0\":{\"701\":1,\"703\":1}}],[\"缓存设计\",{\"0\":{\"700\":1}}],[\"缓存节点在圆环上分布不平均\",{\"1\":{\"694\":1}}],[\"缓存对象\",{\"1\":{\"670\":1}}],[\"缓存用户信息\",{\"1\":{\"670\":1}}],[\"缓存功能\",{\"1\":{\"670\":1}}],[\"缓存模式\",{\"1\":{\"558\":1}}],[\"缓存起来了\",{\"1\":{\"553\":1}}],[\"缓存是\",{\"1\":{\"553\":1}}],[\"缓存以及所有的内置函数\",{\"1\":{\"472\":1}}],[\"缓存或者\",{\"1\":{\"317\":2}}],[\"缓存\",{\"1\":{\"269\":1,\"434\":1,\"669\":1,\"804\":1,\"863\":1}}],[\"套接字来通知内核\",{\"1\":{\"579\":1}}],[\"设想这样的场景\",{\"1\":{\"577\":1}}],[\"设置到\",{\"1\":{\"822\":2}}],[\"设置错误\",{\"1\":{\"813\":2}}],[\"设置回调函数\",{\"1\":{\"806\":1}}],[\"设置父类\",{\"1\":{\"806\":1}}],[\"设置切点\",{\"1\":{\"805\":1}}],[\"设置属性\",{\"1\":{\"793\":2}}],[\"设置相关属性和依赖\",{\"1\":{\"793\":1}}],[\"设置dropped属性为true\",{\"1\":{\"777\":1}}],[\"设置延时等级3\",{\"1\":{\"763\":1}}],[\"设置适当的过期时间兜底\",{\"1\":{\"709\":1}}],[\"设置缓存过期时间兜底\",{\"1\":{\"708\":1}}],[\"设置多级缓存\",{\"1\":{\"704\":1}}],[\"设置节点\",{\"1\":{\"697\":1}}],[\"设置很小\",{\"1\":{\"591\":1}}],[\"设置很大\",{\"1\":{\"591\":1}}],[\"设置\",{\"1\":{\"560\":1}}],[\"设置参数==\",{\"1\":{\"445\":1}}],[\"设置为增量模式\",{\"1\":{\"412\":1}}],[\"设置垃圾回收时间占程序运行时间的百分比\",{\"1\":{\"412\":1}}],[\"设置并发收集器年轻代手机方式为并行收集时\",{\"1\":{\"412\":1}}],[\"设置并发收集器\",{\"1\":{\"412\":1}}],[\"设置并行收集最大的暂停时间\",{\"1\":{\"412\":1}}],[\"设置并行收集器收集时使用的\",{\"1\":{\"412\":1}}],[\"设置并行收集器\",{\"1\":{\"412\":1}}],[\"设置并行年老代收集器\",{\"1\":{\"412\":1}}],[\"设置串行收集器\",{\"1\":{\"412\":1}}],[\"设置持久代大小\",{\"1\":{\"412\":1}}],[\"设置年轻代和年老代的比值\",{\"1\":{\"412\":1}}],[\"设置年轻代大小\",{\"1\":{\"412\":1}}],[\"设置一个分割阈值\",{\"1\":{\"373\":1}}],[\"设置最大等待时长\",{\"1\":{\"349\":1}}],[\"设置标志仅仅是设置标志\",{\"1\":{\"302\":1}}],[\"设置端口号等\",{\"1\":{\"113\":1}}],[\"设置server\",{\"1\":{\"113\":1}}],[\"设置日志文件\",{\"1\":{\"113\":1}}],[\"设置语言\",{\"1\":{\"113\":1}}],[\"⽹络中可能存在来⾃发送⽅的数据包\",{\"1\":{\"576\":1}}],[\"⽹络层之间加⼊了\",{\"1\":{\"561\":1}}],[\"挥手为什么需要四次呢\",{\"0\":{\"575\":1}}],[\"挥手的故事总充满了悲伤和遗憾\",{\"1\":{\"574\":1}}],[\"滚的远远的\",{\"1\":{\"574\":1}}],[\"滚\",{\"1\":{\"574\":1}}],[\"蠢女人\",{\"1\":{\"574\":1}}],[\"哼\",{\"1\":{\"574\":1}}],[\"沙雕博主小心翼翼地装起了自己的青轴机械键盘\",{\"1\":{\"574\":1}}],[\"沙雕博主一愣\",{\"1\":{\"574\":1}}],[\"怒火攻心\",{\"1\":{\"574\":1}}],[\"狗男人\",{\"1\":{\"574\":1}}],[\"问法是\",{\"1\":{\"788\":1}}],[\"问的不多\",{\"1\":{\"596\":1}}],[\"问完三次握手\",{\"1\":{\"574\":1}}],[\"问题已经解决啦\",{\"1\":{\"806\":2}}],[\"问题更严重\",{\"1\":{\"703\":1}}],[\"问题来了\",{\"1\":{\"427\":1}}],[\"问题分析\",{\"1\":{\"414\":1}}],[\"问题解决\",{\"1\":{\"413\":1}}],[\"问题\",{\"0\":{\"336\":1,\"712\":1},\"1\":{\"479\":1,\"534\":2}}],[\"问题就出在这个过程还比较耗时\",{\"1\":{\"279\":1}}],[\"久⽽久之就会占满服务端的\",{\"1\":{\"573\":1}}],[\"伪造不存在的\",{\"1\":{\"573\":1}}],[\"半数以上持有槽的主节点都标记某个节点是主观下线时\",{\"1\":{\"698\":1}}],[\"半连接队列存放的是三次握手未完成的连接\",{\"1\":{\"573\":1}}],[\"半连接队列\",{\"1\":{\"573\":2}}],[\"半消息\",{\"0\":{\"765\":1},\"1\":{\"206\":1,\"765\":1}}],[\"攻击一般分三种类型\",{\"1\":{\"615\":1}}],[\"攻击也是比较常见\",{\"1\":{\"615\":1}}],[\"攻击包\",{\"1\":{\"614\":1}}],[\"攻击有\",{\"1\":{\"614\":1}}],[\"攻击就有计算机网络宽带攻击\",{\"1\":{\"614\":1}}],[\"攻击而拒绝该请求\",{\"1\":{\"613\":1}}],[\"攻击呢\",{\"1\":{\"613\":1}}],[\"攻击者就可以窃取用户的数据\",{\"1\":{\"615\":1}}],[\"攻击者构造出特殊的\",{\"1\":{\"615\":1}}],[\"攻击者将伪造的转账请求\",{\"1\":{\"613\":1}}],[\"攻击者便成功完成\",{\"1\":{\"612\":1}}],[\"攻击者\",{\"1\":{\"612\":1}}],[\"攻击者通过暴力破解或者专门的方法破解公司注册域名时使用的\",{\"1\":{\"612\":1}}],[\"攻击者会首先访问域名查询要劫持的站点的域名信息\",{\"1\":{\"612\":1}}],[\"攻击者可以冒充原域名所属机构\",{\"1\":{\"612\":1}}],[\"攻击者向服务器不停地发送分组\",{\"1\":{\"611\":1}}],[\"攻击者故意篡改网络上送的报文\",{\"1\":{\"611\":1}}],[\"攻击者每次在\",{\"1\":{\"572\":1}}],[\"攻击\",{\"0\":{\"613\":1,\"614\":1,\"615\":1},\"1\":{\"573\":1,\"613\":3,\"614\":2,\"615\":1}}],[\"攻击的关系\",{\"0\":{\"573\":1}}],[\"丢弃此消息\",{\"1\":{\"765\":1}}],[\"丢弃阻塞队列里最老的任务\",{\"1\":{\"355\":1}}],[\"丢包导致的数据包重复\",{\"1\":{\"594\":1}}],[\"丢包\",{\"1\":{\"585\":1}}],[\"丢失的分组数\",{\"1\":{\"609\":1}}],[\"丢失\",{\"1\":{\"594\":1,\"668\":1}}],[\"丢失等\",{\"1\":{\"585\":1}}],[\"丢失之后客户端就一直没有接收到服务器返回的数据包\",{\"1\":{\"569\":1}}],[\"防⽌此类现象\",{\"1\":{\"702\":1}}],[\"防⽌旧连接的数据包\",{\"1\":{\"578\":1}}],[\"防止故障扩散\",{\"1\":{\"858\":1}}],[\"防止一次命令操作过多的数据\",{\"1\":{\"718\":1}}],[\"防止某进程正在访问共享资源时\",{\"1\":{\"641\":1}}],[\"防止非法操作和入侵的安全性管理\",{\"1\":{\"629\":1}}],[\"防止包丢失\",{\"1\":{\"581\":1}}],[\"防止已失效的连接请求报文段出现在本连接中\",{\"1\":{\"576\":1}}],[\"防止已失效的连接请求报文段突然又传送到了服务端\",{\"1\":{\"569\":1}}],[\"防火墙\",{\"1\":{\"573\":1,\"614\":1}}],[\"防火墙等\",{\"1\":{\"573\":1}}],[\"防重包含幂等\",{\"1\":{\"224\":1}}],[\"防重强调的防止数据重复\",{\"1\":{\"224\":1}}],[\"握手为什么是三次\",{\"0\":{\"569\":1}}],[\"握手的故事充满了幸福和美满\",{\"1\":{\"568\":1}}],[\"赶紧回家吧\",{\"1\":{\"568\":1}}],[\"赶紧来看看面试都会问哪些问题吧\",{\"1\":{\"431\":1}}],[\"嗯\",{\"1\":{\"568\":1}}],[\"电话没有普及\",{\"1\":{\"568\":1}}],[\"电商的订单超时自动取消\",{\"1\":{\"763\":1}}],[\"电商网站\",{\"1\":{\"434\":1}}],[\"电商公司的运营后台系统\",{\"1\":{\"413\":1}}],[\"放⼊⼀级缓存\",{\"1\":{\"800\":1}}],[\"放⼊⼆级缓存\",{\"1\":{\"800\":1}}],[\"放入⼀级缓存\",{\"1\":{\"800\":1}}],[\"放大了512\",{\"1\":{\"718\":1}}],[\"放置在这个圆环上\",{\"1\":{\"694\":1}}],[\"放弃cpu\",{\"1\":{\"645\":1}}],[\"放弃a\",{\"1\":{\"192\":1}}],[\"放到缓冲队列里面\",{\"1\":{\"582\":1}}],[\"放到请求的\",{\"1\":{\"566\":1}}],[\"放到请求头里\",{\"1\":{\"566\":1}}],[\"拼接在\",{\"1\":{\"615\":1}}],[\"拼接到\",{\"1\":{\"566\":1}}],[\"拼接后的对象位于堆中\",{\"1\":{\"266\":1}}],[\"证明用户已经登录可执行后面操作\",{\"1\":{\"566\":1}}],[\"证书认证机构\",{\"1\":{\"564\":1}}],[\"证书颁发机构\",{\"1\":{\"563\":1}}],[\"证书内容有公钥\",{\"1\":{\"563\":1}}],[\"证书权威机构\",{\"1\":{\"561\":1}}],[\"隐私策略不同\",{\"1\":{\"566\":1}}],[\"隐式字段\",{\"1\":{\"523\":1}}],[\"⽣成\",{\"1\":{\"564\":1}}],[\"颁发者\",{\"1\":{\"564\":1}}],[\"⾸先客户端会使⽤同样的\",{\"1\":{\"564\":1}}],[\"⾸先\",{\"1\":{\"564\":1,\"662\":1}}],[\"签发证书的过程\",{\"1\":{\"564\":1}}],[\"签名的\",{\"1\":{\"564\":1}}],[\"酱紫传输的数据都是密文啦\",{\"1\":{\"563\":1}}],[\"失效\",{\"1\":{\"813\":1}}],[\"失效日期等\",{\"1\":{\"563\":1}}],[\"失去了缓存保护后端存储的意义\",{\"1\":{\"703\":1}}],[\"失败后\",{\"1\":{\"333\":1}}],[\"篡改\",{\"1\":{\"611\":1}}],[\"篡改了就不能正常显示\",{\"1\":{\"562\":1}}],[\"篡改⻛险\",{\"1\":{\"562\":1}}],[\"冒充⻛险\",{\"1\":{\"562\":1}}],[\"窃听⻛险\",{\"1\":{\"562\":1}}],[\"闲置了\",{\"1\":{\"560\":1}}],[\"守护进程\",{\"1\":{\"560\":1}}],[\"守护线程\",{\"1\":{\"305\":1}}],[\"守护线程了解吗\",{\"0\":{\"305\":1}}],[\"报⽂中都会有\",{\"1\":{\"584\":1}}],[\"报⽂的承载的数据⾮常⼩的时候\",{\"1\":{\"584\":1}}],[\"报⽂\",{\"1\":{\"576\":2,\"592\":1}}],[\"报⽂最⼤⽣存时间\",{\"1\":{\"576\":1}}],[\"报头压缩\",{\"1\":{\"558\":1}}],[\"报文的最大长度\",{\"1\":{\"600\":1}}],[\"报文长度\",{\"1\":{\"595\":1}}],[\"报文首部的格式\",{\"0\":{\"580\":1},\"1\":{\"580\":1}}],[\"报文之后立即关闭连接\",{\"1\":{\"578\":1}}],[\"报文段在传输过程中是否损坏\",{\"1\":{\"580\":1}}],[\"报文段执行\",{\"1\":{\"580\":1}}],[\"报文段的序号值加\",{\"1\":{\"580\":1}}],[\"报文段的响应\",{\"1\":{\"580\":1}}],[\"报文段的确认\",{\"1\":{\"576\":1}}],[\"报文段后\",{\"1\":{\"576\":1}}],[\"报文段\",{\"1\":{\"576\":2}}],[\"报文段有可能丢失\",{\"1\":{\"576\":1}}],[\"报文段能够到达服务端\",{\"1\":{\"576\":1}}],[\"报文时\",{\"1\":{\"575\":1}}],[\"报文进行代理和回应\",{\"1\":{\"573\":1}}],[\"报文后\",{\"1\":{\"573\":1,\"599\":1}}],[\"报文中携带大量数据\",{\"1\":{\"572\":1}}],[\"报文给客户端来表示同意现在关闭连接\",{\"1\":{\"575\":1}}],[\"报文给客户端\",{\"1\":{\"570\":1}}],[\"报文\",{\"1\":{\"570\":5,\"573\":1,\"578\":1,\"591\":1}}],[\"报文有两种\",{\"1\":{\"556\":1}}],[\"报文层面来看\",{\"1\":{\"553\":1}}],[\"报文格式\",{\"1\":{\"546\":1}}],[\"男\",{\"1\":{\"557\":1}}],[\"职业技术学院\",{\"1\":{\"557\":1}}],[\"海淀区\",{\"1\":{\"557\":1}}],[\"北京市\",{\"1\":{\"557\":1}}],[\"地理信息定位\",{\"1\":{\"668\":1}}],[\"地球\",{\"1\":{\"557\":1}}],[\"地址或者主机名做\",{\"1\":{\"694\":1}}],[\"地址缓存\",{\"1\":{\"669\":1}}],[\"地址源做出大量回应\",{\"1\":{\"614\":1}}],[\"地址访问网站\",{\"1\":{\"612\":1}}],[\"地址进行替换\",{\"1\":{\"612\":1}}],[\"地址进行寻址的话\",{\"1\":{\"607\":1}}],[\"地址为目标地址\",{\"1\":{\"609\":1}}],[\"地址为源地址\",{\"1\":{\"609\":1}}],[\"地址为收件人\",{\"1\":{\"607\":1}}],[\"地址打包\",{\"1\":{\"609\":1}}],[\"地址可以比作为地址\",{\"1\":{\"607\":1}}],[\"地址可以得到充分利用\",{\"1\":{\"605\":1}}],[\"地址来区分不同的设备\",{\"1\":{\"607\":1}}],[\"地址来表示该数据包的源主机和目标主机\",{\"1\":{\"602\":1}}],[\"地址前缀都是一样的\",{\"1\":{\"607\":1}}],[\"地址属于哪个子网\",{\"1\":{\"607\":1}}],[\"地址还需要\",{\"1\":{\"607\":2}}],[\"地址用来区别网络上的计算机\",{\"1\":{\"607\":1}}],[\"地址是否一致\",{\"1\":{\"609\":1}}],[\"地址是和地域相关的\",{\"1\":{\"607\":1}}],[\"地址是网络层和以上各层使用的地址\",{\"1\":{\"607\":1}}],[\"地址是数据链路层和物理层使用的地址\",{\"1\":{\"607\":1}}],[\"地址是不能在公网中使用的\",{\"1\":{\"605\":1}}],[\"地址都有什么作用\",{\"1\":{\"607\":1}}],[\"地址添加到自己的\",{\"1\":{\"606\":2}}],[\"地址一致\",{\"1\":{\"606\":1}}],[\"地址对应的\",{\"1\":{\"606\":1}}],[\"地址和\",{\"1\":{\"606\":3,\"607\":1}}],[\"地址和目的\",{\"1\":{\"602\":1}}],[\"地址到\",{\"1\":{\"606\":1}}],[\"地址解析协议\",{\"1\":{\"606\":1}}],[\"地址也够用\",{\"1\":{\"605\":1}}],[\"地址转换为全球\",{\"1\":{\"605\":1}}],[\"地址不同\",{\"1\":{\"607\":1}}],[\"地址不够用的问题\",{\"1\":{\"605\":1}}],[\"地址不够如何解决\",{\"0\":{\"605\":1}}],[\"地址不足的问题\",{\"1\":{\"605\":1}}],[\"地址不一定是相同的\",{\"1\":{\"605\":1}}],[\"地址的数据包给攻击主机\",{\"1\":{\"614\":1}}],[\"地址的时候\",{\"1\":{\"607\":1}}],[\"地址的前缀知道这个设备属于哪个子网\",{\"1\":{\"607\":1}}],[\"地址的长度为\",{\"1\":{\"607\":1}}],[\"地址的对应关系\",{\"1\":{\"606\":1}}],[\"地址的映射\",{\"1\":{\"606\":1}}],[\"地址的设备\",{\"1\":{\"605\":1}}],[\"地址的列表\",{\"1\":{\"547\":1}}],[\"地址已经不够用了\",{\"1\":{\"605\":1}}],[\"地址有\",{\"1\":{\"605\":1}}],[\"地址有哪些分类\",{\"0\":{\"603\":1}}],[\"地址在同一个网络中是惟一的\",{\"1\":{\"604\":1}}],[\"地址在这鞥个互联网范围内是惟一的\",{\"1\":{\"603\":1}}],[\"地址分为\",{\"1\":{\"603\":1}}],[\"地址列表\",{\"1\":{\"547\":1}}],[\"地址\",{\"0\":{\"607\":2},\"1\":{\"460\":1,\"546\":1,\"547\":3,\"548\":1,\"573\":1,\"603\":1,\"605\":4,\"606\":6,\"607\":5,\"609\":4,\"612\":1}}],[\"人类住址协议\",{\"1\":{\"557\":1}}],[\"人工接入处理\",{\"1\":{\"205\":1}}],[\"视图解析器解析\",{\"1\":{\"816\":1}}],[\"视图解析器\",{\"1\":{\"815\":1}}],[\"视图等\",{\"1\":{\"472\":1}}],[\"视频\",{\"1\":{\"670\":1}}],[\"视频的话\",{\"1\":{\"598\":1}}],[\"视频片段\",{\"1\":{\"557\":1}}],[\"视觉污染\",{\"1\":{\"562\":1}}],[\"统一暴露服务\",{\"1\":{\"832\":1}}],[\"统一资源定位符\",{\"1\":{\"557\":1}}],[\"统一资源标识符\",{\"1\":{\"557\":1}}],[\"统一各线程动作开始的时机\",{\"1\":{\"345\":1}}],[\"控制其他组件的执行\",{\"1\":{\"815\":1}}],[\"控制对象生命周期的不再是引用它的对象\",{\"1\":{\"787\":1}}],[\"控制反转\",{\"1\":{\"787\":1}}],[\"控制层\",{\"1\":{\"784\":1}}],[\"控制台提供对死信消息的查询\",{\"1\":{\"766\":1}}],[\"控制信号量的⽅式有两种原⼦操作\",{\"1\":{\"641\":1}}],[\"控制信息被分成两部分\",{\"1\":{\"544\":1}}],[\"控制域名响应的\",{\"1\":{\"612\":1}}],[\"控制的⽬的就是避免发送⽅的数据填满整个⽹络\",{\"1\":{\"585\":1}}],[\"控制缓存策略\",{\"1\":{\"556\":1}}],[\"首部行首部可以分为四种首部\",{\"1\":{\"556\":1}}],[\"首部行后还可以跟一个实体主体\",{\"1\":{\"556\":1}}],[\"首先进行预提交阶段\",{\"1\":{\"871\":1}}],[\"首先进行哈希值的扰动\",{\"1\":{\"164\":1}}],[\"首先结论在这\",{\"1\":{\"798\":1}}],[\"首先操作起来太复杂\",{\"1\":{\"770\":1}}],[\"首先要注册消费监听器\",{\"1\":{\"751\":1}}],[\"首先要从数据库里面查询出来订单信息\",{\"1\":{\"413\":1}}],[\"首先借助于\",{\"1\":{\"730\":1}}],[\"首先延迟较小\",{\"1\":{\"598\":1}}],[\"首先计算\",{\"1\":{\"591\":1}}],[\"首先计算hash\",{\"1\":{\"181\":1}}],[\"首先双方三次握手\",{\"1\":{\"582\":1}}],[\"首先是\",{\"1\":{\"566\":1}}],[\"首先会通过某种途径加载\",{\"1\":{\"792\":1}}],[\"首先会查找浏览器的缓存\",{\"1\":{\"547\":1}}],[\"首先会写入\",{\"1\":{\"519\":1}}],[\"首先会在undo\",{\"1\":{\"519\":1}}],[\"首先理解聚簇索引不是一种新的索引\",{\"1\":{\"506\":1}}],[\"首先通过\",{\"1\":{\"428\":1}}],[\"首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用\",{\"1\":{\"382\":1}}],[\"首先需要判断任务是否足够小\",{\"1\":{\"373\":1}}],[\"首先需要理解两个点\",{\"1\":{\"373\":1}}],[\"首先线程使用\",{\"1\":{\"348\":1}}],[\"首先就会调用\",{\"1\":{\"333\":1}}],[\"首先\",{\"1\":{\"325\":1,\"564\":1,\"598\":1,\"606\":1,\"732\":1}}],[\"首先对于分布式系统\",{\"1\":{\"191\":1}}],[\"符合就处理返回\",{\"1\":{\"609\":1}}],[\"符合幂等性和安全性\",{\"1\":{\"553\":1}}],[\"符号在后就后加\",{\"1\":{\"245\":1}}],[\"符号在前就先加\",{\"1\":{\"245\":1}}],[\"响应以及执行其他自定义逻辑\",{\"1\":{\"865\":2}}],[\"响应时间等\",{\"1\":{\"859\":1}}],[\"响应时间\",{\"1\":{\"858\":1}}],[\"响应时间就变长了\",{\"1\":{\"740\":1}}],[\"响应模型\",{\"1\":{\"845\":1}}],[\"响应格式是\",{\"1\":{\"817\":1}}],[\"响应数据包后\",{\"1\":{\"606\":1}}],[\"响应数据包\",{\"1\":{\"606\":2}}],[\"响应首部\",{\"1\":{\"556\":1}}],[\"响应报文的第一行叫做状态行\",{\"1\":{\"556\":1}}],[\"响应报文的格式如下\",{\"1\":{\"556\":1}}],[\"响应报文\",{\"1\":{\"556\":2}}],[\"响应\",{\"1\":{\"546\":1}}],[\"网上有这样的回答\",{\"1\":{\"673\":1}}],[\"网名三分恶\",{\"1\":{\"619\":1}}],[\"网站服务端将恶意代码从\",{\"1\":{\"615\":1}}],[\"网卡\",{\"1\":{\"614\":1}}],[\"网际控制报文协议\",{\"1\":{\"608\":1}}],[\"网际层\",{\"1\":{\"542\":1}}],[\"网关过滤器链由一系列过滤器组成\",{\"1\":{\"865\":1}}],[\"网关过滤器链\",{\"1\":{\"865\":1}}],[\"网关处理器还会依次应用配置的过滤器链\",{\"1\":{\"865\":1}}],[\"网关处理器是spring\",{\"1\":{\"865\":1}}],[\"网关处理器\",{\"1\":{\"865\":1}}],[\"网关\",{\"1\":{\"602\":1,\"830\":1}}],[\"网络输入等\",{\"1\":{\"877\":1}}],[\"网络\",{\"1\":{\"877\":1}}],[\"网络等等进行操作的模板类\",{\"1\":{\"785\":1}}],[\"网络安全攻击主要分为两种类型\",{\"1\":{\"611\":1}}],[\"网络安全\",{\"0\":{\"610\":1}}],[\"网络体系结构中应用层的一个服务命令\",{\"1\":{\"609\":1}}],[\"网络中所有的主机收到这个\",{\"1\":{\"606\":1}}],[\"网络地址转换协议\",{\"1\":{\"605\":1}}],[\"网络号占前\",{\"1\":{\"603\":3}}],[\"网络号\",{\"1\":{\"603\":1}}],[\"网络语音电话\",{\"1\":{\"597\":1}}],[\"网络连接数变多\",{\"1\":{\"713\":1}}],[\"网络连接\",{\"1\":{\"559\":1}}],[\"网络综合\",{\"0\":{\"545\":1}}],[\"网络接口层\",{\"1\":{\"542\":1}}],[\"网络层协议负责提供主机间的逻辑通信\",{\"1\":{\"602\":1}}],[\"网络层\",{\"1\":{\"542\":2}}],[\"网络通讯传输等\",{\"1\":{\"359\":1}}],[\"网络编程\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"断言用于匹配请求的条件\",{\"1\":{\"865\":1}}],[\"断言\",{\"1\":{\"865\":1}}],[\"断路器\",{\"1\":{\"830\":1,\"864\":1}}],[\"断线\",{\"1\":{\"690\":1}}],[\"断开连接\",{\"1\":{\"546\":1}}],[\"断开物理连接\",{\"1\":{\"542\":1}}],[\"断电之后正在处理任务的回滚\",{\"1\":{\"371\":1}}],[\"压缩列表由这么几部分组成\",{\"1\":{\"733\":1}}],[\"压缩列表是\",{\"1\":{\"733\":1}}],[\"压缩列表是为节约内存⽽开发的顺序性数据结构\",{\"1\":{\"729\":1}}],[\"压缩列表了解吗\",{\"0\":{\"733\":1}}],[\"压缩列表ziplist\",{\"1\":{\"729\":1}}],[\"压缩列表\",{\"1\":{\"729\":1}}],[\"压缩之后仍然是大key\",{\"1\":{\"719\":1}}],[\"压缩算法将key的大小控制在合理范围内\",{\"1\":{\"719\":1}}],[\"压缩和拆分key\",{\"1\":{\"719\":1}}],[\"压缩后再发送\",{\"1\":{\"558\":1}}],[\"压缩\",{\"1\":{\"542\":1}}],[\"制定的一个用于计算机或通信系统间互联的标准体系\",{\"1\":{\"542\":1}}],[\"制定回收计划\",{\"1\":{\"404\":1}}],[\"金三银四冲\",{\"1\":{\"540\":1}}],[\"金九银十\",{\"1\":{\"540\":1}}],[\"春招\",{\"1\":{\"540\":1}}],[\"秋招\",{\"1\":{\"540\":1}}],[\"七层模型是国际标准化组织\",{\"1\":{\"542\":1}}],[\"七层模型\",{\"1\":{\"542\":2}}],[\"七十图详解\",{\"1\":{\"540\":1}}],[\"七拐八绕地进去看一下\",{\"1\":{\"450\":1}}],[\"今天给大家隆重推荐一位美团后端研发工程师\",{\"1\":{\"619\":1}}],[\"今天继续来给大家分享三弟的面渣逆袭\",{\"1\":{\"540\":1}}],[\"今天没办法\",{\"1\":{\"353\":1}}],[\"飙升\",{\"1\":{\"538\":1}}],[\"飙升的话\",{\"0\":{\"538\":1}}],[\"掉这些线程\",{\"1\":{\"538\":1}}],[\"删\",{\"1\":{\"552\":1}}],[\"删的执行效率\",{\"1\":{\"536\":1}}],[\"删除⼆级缓存中的\",{\"1\":{\"800\":1}}],[\"删除大key\",{\"1\":{\"719\":1}}],[\"删除最近将要过期数据\",{\"1\":{\"717\":1}}],[\"删除⾥⾯的过期key\",{\"1\":{\"716\":1}}],[\"删除对应的本地key\",{\"1\":{\"709\":1}}],[\"删除对应的本地缓存key\",{\"1\":{\"709\":1}}],[\"删除redis缓存的节点\",{\"1\":{\"709\":1}}],[\"删除缓存的速度比更新缓存的速度快很多\",{\"1\":{\"707\":1}}],[\"删除缓存而不是更新缓存\",{\"1\":{\"707\":1}}],[\"删除任意一个条目\",{\"1\":{\"660\":1}}],[\"删除它\",{\"1\":{\"658\":1}}],[\"删除旧表\",{\"1\":{\"537\":1}}],[\"删除完成后重新创建索引创建索引也非常快\",{\"1\":{\"536\":1}}],[\"删除了数据\",{\"1\":{\"521\":1}}],[\"删除速度快\",{\"1\":{\"467\":1}}],[\"删除速度慢\",{\"1\":{\"467\":1}}],[\"删除速度\",{\"1\":{\"467\":1}}],[\"删除表中的所有数据\",{\"1\":{\"467\":1}}],[\"删除表的全部或者一部分数据行\",{\"1\":{\"467\":1}}],[\"删除内容\",{\"1\":{\"467\":1}}],[\"删除语句\",{\"1\":{\"435\":1}}],[\"删除\",{\"1\":{\"157\":1,\"162\":1,\"536\":1}}],[\"删除线\",{\"1\":{\"10\":1}}],[\"百万千万级大表如何添加字段\",{\"0\":{\"537\":1}}],[\"百万级别以上的数据如何删除\",{\"0\":{\"536\":1}}],[\"百度网盘链接\",{\"1\":{\"107\":1,\"115\":1}}],[\"雪花算法\",{\"1\":{\"534\":1}}],[\"增强拦截器\",{\"1\":{\"812\":1}}],[\"增删查⼀般时间复杂度是o\",{\"1\":{\"664\":1}}],[\"增长过大引起网络拥塞\",{\"1\":{\"586\":1}}],[\"增长是\",{\"1\":{\"534\":1}}],[\"增加集群的抗压能力\",{\"1\":{\"770\":1}}],[\"增加消费者\",{\"1\":{\"758\":1}}],[\"增加积分\",{\"1\":{\"740\":1}}],[\"增加或删除节点对系统的影响很小\",{\"1\":{\"695\":1}}],[\"增加子表数量是非常麻烦的\",{\"1\":{\"531\":1}}],[\"增加维护复杂度\",{\"1\":{\"531\":1}}],[\"增加冗余字段可以减少大量的连表查询\",{\"1\":{\"490\":1}}],[\"增加很快\",{\"1\":{\"418\":1}}],[\"增加了端到端的时延\",{\"1\":{\"591\":1}}],[\"增加了一些高级功能\",{\"1\":{\"330\":1}}],[\"增加了适应性自旋\",{\"1\":{\"330\":1}}],[\"增加\",{\"1\":{\"157\":1,\"586\":4,\"715\":1}}],[\"跨语言性|支持跨语言通信\",{\"1\":{\"845\":1,\"846\":1}}],[\"跨度是用来计算排位\",{\"1\":{\"732\":1}}],[\"跨度\",{\"1\":{\"732\":1}}],[\"跨站请求伪造\",{\"1\":{\"613\":1}}],[\"跨节点的\",{\"1\":{\"534\":1}}],[\"跨库\",{\"1\":{\"534\":1}}],[\"跨平台\",{\"1\":{\"411\":1}}],[\"旧库不再写入新的数据\",{\"1\":{\"532\":1}}],[\"旧库下线\",{\"1\":{\"532\":1}}],[\"尤其是电商里面的订单扣款\",{\"1\":{\"742\":1}}],[\"尤其是在写少读多的场景下\",{\"1\":{\"682\":1}}],[\"尤其是在扩充表的时候\",{\"1\":{\"531\":1}}],[\"尤其当字段多\",{\"1\":{\"433\":1}}],[\"路径匹配\",{\"1\":{\"865\":1}}],[\"路由规则可以根据请求的路径\",{\"1\":{\"865\":1}}],[\"路由是spring\",{\"1\":{\"865\":1}}],[\"路由转发\",{\"1\":{\"863\":1}}],[\"路由器无法按当前的传输速率转发数据包等情况时\",{\"1\":{\"608\":1}}],[\"路由器\",{\"1\":{\"602\":1}}],[\"路由的优点是表分布比较均匀\",{\"1\":{\"531\":1}}],[\"路由的优缺点和范围路由基本相反\",{\"1\":{\"531\":1}}],[\"路由后\",{\"1\":{\"531\":1}}],[\"路由设计的复杂点主要体现在初始表数量的选取上\",{\"1\":{\"531\":1}}],[\"路由算法可以简单地用\",{\"1\":{\"531\":1}}],[\"路由\",{\"1\":{\"531\":1,\"865\":1}}],[\"路数更多\",{\"1\":{\"504\":1}}],[\"条\",{\"1\":{\"531\":1,\"726\":1}}],[\"条件下推\",{\"1\":{\"492\":1}}],[\"条件提取出主键\",{\"1\":{\"488\":1}}],[\"条件后\",{\"1\":{\"477\":1}}],[\"垂直分表\",{\"1\":{\"530\":1}}],[\"垂直分库\",{\"1\":{\"529\":1}}],[\"水管会被撑爆\",{\"1\":{\"585\":1}}],[\"水平分表主要有三种路由方式\",{\"1\":{\"531\":1}}],[\"水平分表有哪几种路由方式\",{\"0\":{\"531\":1}}],[\"水平分表\",{\"1\":{\"530\":1}}],[\"水平分库\",{\"1\":{\"529\":1}}],[\"水会被装在桶里\",{\"1\":{\"227\":1}}],[\"爰好\",{\"1\":{\"528\":1}}],[\"黑客暴力破解账号\",{\"1\":{\"528\":1}}],[\"登录失败超过一定次数\",{\"1\":{\"669\":1}}],[\"登录失败次数计数\",{\"1\":{\"669\":1}}],[\"登录的业务读写操作全部访问主机\",{\"1\":{\"528\":1}}],[\"登录时读取账号的读操作也发给数据库主服务器\",{\"1\":{\"528\":1}}],[\"登录后的用户每次访问接口\",{\"1\":{\"309\":1}}],[\"推\",{\"1\":{\"843\":1}}],[\"推断并设置\",{\"1\":{\"822\":1}}],[\"推断应用的类型是普通的项目还是\",{\"1\":{\"822\":1}}],[\"推送型消费者\",{\"1\":{\"751\":1}}],[\"推送\",{\"1\":{\"527\":1,\"669\":1,\"843\":2}}],[\"推荐✨\",{\"1\":{\"440\":1}}],[\"推荐使用resilience4j代替|\",{\"1\":{\"857\":1}}],[\"推荐使用\",{\"1\":{\"436\":3,\"445\":1}}],[\"推荐\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"采取的是读不加锁原理\",{\"1\":{\"522\":1}}],[\"采用了长轮询来进行配置的动态刷新\",{\"1\":{\"843\":1}}],[\"采用微服务需要权衡这些问题和挑战\",{\"1\":{\"829\":1}}],[\"采用编译期织入和类加载器织入\",{\"1\":{\"804\":1}}],[\"采用运行期织入\",{\"1\":{\"804\":1}}],[\"采用随机递增取模的方式选择一个队列\",{\"1\":{\"776\":1}}],[\"采用哈希与运算计算下标位置\",{\"1\":{\"731\":1}}],[\"采用redis本身的pub\",{\"1\":{\"709\":1}}],[\"采用对称加密的方式\",{\"1\":{\"617\":1}}],[\"采用公钥进行加密\",{\"1\":{\"617\":1}}],[\"采用非对称加密的方式\",{\"1\":{\"617\":1}}],[\"采用的通信协议以\",{\"1\":{\"598\":1}}],[\"采用的是延迟初始化的方式\",{\"1\":{\"793\":1}}],[\"采用的是聚簇索引\",{\"1\":{\"506\":1}}],[\"采用的是非聚簇索引\",{\"1\":{\"506\":1}}],[\"采用多路复用\",{\"1\":{\"558\":1}}],[\"采用parallel\",{\"1\":{\"406\":1}}],[\"采用不同的策略去处理\",{\"1\":{\"404\":1}}],[\"采用标记\",{\"1\":{\"401\":1}}],[\"采用ab岗两人进行录入\",{\"1\":{\"349\":1}}],[\"采用\",{\"0\":{\"598\":1},\"1\":{\"261\":1,\"384\":1}}],[\"采用字节码的好处是什么\",{\"0\":{\"235\":1}}],[\"采用更简单的判断逻辑\",{\"1\":{\"175\":1}}],[\"采用安全失败机制的集合容器\",{\"1\":{\"157\":1}}],[\"否\",{\"1\":{\"521\":6}}],[\"否则没法编译类\",{\"1\":{\"807\":1}}],[\"否则使用\",{\"1\":{\"804\":1,\"812\":1}}],[\"否则采用\",{\"1\":{\"796\":1}}],[\"否则拒绝\",{\"1\":{\"689\":1}}],[\"否则继续\",{\"1\":{\"645\":1}}],[\"否则继续进行下一步\",{\"1\":{\"547\":1}}],[\"否则新的进程等待\",{\"1\":{\"640\":1}}],[\"否则丢弃该包\",{\"1\":{\"573\":1}}],[\"否则建立\",{\"1\":{\"569\":1}}],[\"否则则认为证书不可信\",{\"1\":{\"564\":1}}],[\"否则进行下一步\",{\"1\":{\"547\":1}}],[\"否则进入步骤\",{\"1\":{\"328\":1}}],[\"否则可能会导致存储引擎无法正确使用索引\",{\"1\":{\"489\":1}}],[\"否则插入操作一直处于阻塞状态\",{\"1\":{\"356\":1}}],[\"否则根据插入到队列的先后排序\",{\"1\":{\"356\":1}}],[\"否则执行\",{\"1\":{\"329\":2}}],[\"否则会因为隐式类型转换\",{\"1\":{\"498\":1}}],[\"否则会报错无法获取数据库连接\",{\"1\":{\"348\":1}}],[\"否则会有可读性等问题\",{\"1\":{\"291\":1}}],[\"否则会产生\",{\"1\":{\"241\":1}}],[\"否则将触发限流\",{\"1\":{\"227\":1}}],[\"否则返回no响应\",{\"1\":{\"203\":1}}],[\"否则等待\",{\"1\":{\"197\":1}}],[\"否则就遍历链表获取\",{\"1\":{\"181\":1}}],[\"否则\",{\"1\":{\"165\":2,\"265\":1,\"267\":1,\"364\":1,\"481\":1}}],[\"否则向链表中插入数据\",{\"1\":{\"164\":1}}],[\"否则抛出异常\",{\"1\":{\"157\":1,\"270\":1}}],[\"脏读\",{\"0\":{\"521\":1},\"1\":{\"521\":1}}],[\"靠什么保证的呢\",{\"0\":{\"519\":1}}],[\"隔离级别的的一个非常大的区别就是它们生成\",{\"1\":{\"523\":1}}],[\"隔离级别\",{\"1\":{\"521\":1}}],[\"隔离级别下\",{\"1\":{\"513\":1}}],[\"隔离性和持久性\",{\"1\":{\"519\":1}}],[\"隔离性\",{\"1\":{\"518\":1,\"519\":2}}],[\"块钱\",{\"1\":{\"518\":1}}],[\"块的大小是固定的\",{\"1\":{\"483\":1}}],[\"遇到的第一个缓存节点就是要访问的节点\",{\"1\":{\"694\":1}}],[\"遇到过死锁问题吗\",{\"0\":{\"516\":1}}],[\"遇到异常不进行具体处理\",{\"1\":{\"275\":1}}],[\"乐观锁通常是由开发者实现的\",{\"1\":{\"515\":1}}],[\"乐观锁通常是通过在表中增加一个版本\",{\"1\":{\"515\":1}}],[\"乐观锁认为数据的变动不会太频繁\",{\"1\":{\"515\":1}}],[\"乐观锁\",{\"1\":{\"515\":1}}],[\"悲观锁认为被它保护的数据是极其不安全的\",{\"1\":{\"515\":1}}],[\"悲观锁\",{\"1\":{\"515\":1}}],[\"意思是工厂方法不是静态的\",{\"1\":{\"795\":1}}],[\"意思也很好懂\",{\"1\":{\"267\":1}}],[\"意味着\",{\"1\":{\"784\":2}}],[\"意味着缓存层中存了更多的键\",{\"1\":{\"703\":1}}],[\"意味着当前事务在访问它自己修改过的记录\",{\"1\":{\"523\":1}}],[\"意向锁的出现是为了支持\",{\"1\":{\"514\":1}}],[\"意向锁是一个表级锁\",{\"1\":{\"514\":1}}],[\"意向锁是什么知道吗\",{\"0\":{\"514\":1}}],[\"间隙\",{\"1\":{\"513\":1}}],[\"间隙锁就是锁定某些间隙区间的\",{\"1\":{\"513\":1}}],[\"间隙锁\",{\"1\":{\"513\":4}}],[\"临时存储+定时任务\",{\"1\":{\"764\":1}}],[\"临时的topic多设置一些message\",{\"1\":{\"758\":1}}],[\"临时性性移动\",{\"1\":{\"551\":1}}],[\"临界区同步的一些实现方式\",{\"1\":{\"645\":1}}],[\"临界区不仅针对线程\",{\"1\":{\"645\":1}}],[\"临界区\",{\"1\":{\"645\":1}}],[\"临界值\",{\"1\":{\"173\":1}}],[\"临键指的是间隙加上它右边的记录组成的左开右闭区间\",{\"1\":{\"513\":1}}],[\"临键锁锁住的区间会包含最后一个\",{\"1\":{\"513\":1}}],[\"临键锁就是记录锁\",{\"1\":{\"513\":1}}],[\"临键锁\",{\"1\":{\"513\":2}}],[\"浪费了联合索引的另外一个字段age\",{\"1\":{\"510\":1}}],[\"张铁钢\",{\"1\":{\"793\":1}}],[\"张\",{\"1\":{\"510\":3}}],[\"张三\",{\"1\":{\"507\":1,\"508\":1,\"509\":1,\"557\":1,\"817\":1}}],[\"张手绘图\",{\"1\":{\"150\":1,\"188\":1,\"229\":1,\"296\":1,\"375\":1,\"431\":1,\"456\":1,\"540\":1,\"626\":1,\"666\":1,\"738\":1,\"780\":1,\"826\":1,\"877\":1}}],[\"聚簇索引\",{\"1\":{\"506\":2}}],[\"聚簇索引的索引和数据存储在一棵树上\",{\"1\":{\"506\":1}}],[\"聚簇索引与非聚簇索引的区别\",{\"0\":{\"506\":1}}],[\"聚簇表示数据行和相邻的键值紧凑地存储在一起\",{\"1\":{\"506\":1}}],[\"永远不过期\",{\"1\":{\"712\":2}}],[\"永远是在叶子节点拿到数据\",{\"1\":{\"504\":1}}],[\"永久性移动\",{\"1\":{\"551\":1}}],[\"永久代空间不足\",{\"1\":{\"399\":1}}],[\"永久代有\",{\"1\":{\"381\":1}}],[\"永久保存\",{\"1\":{\"287\":1}}],[\"拿到毕业证啦\",{\"1\":{\"793\":2}}],[\"拿到的话返回true\",{\"1\":{\"777\":1}}],[\"拿到这个消息做数据库的insert操作\",{\"1\":{\"757\":1}}],[\"拿到所有的数据\",{\"1\":{\"504\":1}}],[\"拿例子理解几种i\",{\"1\":{\"663\":1}}],[\"拿反射型举个例子吧\",{\"1\":{\"615\":1}}],[\"拿hashset来凑个数\",{\"1\":{\"185\":1}}],[\"扫表能力更强\",{\"1\":{\"504\":1}}],[\"扫库\",{\"1\":{\"504\":1}}],[\"扫描的行数降低的有限\",{\"1\":{\"497\":1}}],[\"真正需要开发人员进行处理的只有\",{\"1\":{\"816\":1}}],[\"真正存储消息的地方是\",{\"1\":{\"749\":1}}],[\"真正的异步i\",{\"1\":{\"663\":1}}],[\"真正限制\",{\"1\":{\"554\":1}}],[\"真正干活的是是executor\",{\"1\":{\"448\":1}}],[\"真实的数据存在于叶子节点即\",{\"1\":{\"501\":1}}],[\"黄色\",{\"1\":{\"501\":1}}],[\"黄金分割数\",{\"1\":{\"312\":1}}],[\"叶子节点之间使用双向指针连接\",{\"1\":{\"501\":2}}],[\"搜索起来也会很慢\",{\"1\":{\"497\":1}}],[\"离不开下面这四个角色\",{\"1\":{\"747\":1}}],[\"离散低的字段不适合加索引\",{\"1\":{\"499\":1}}],[\"离散度太低的字段\",{\"1\":{\"497\":1}}],[\"离开停车场就是线程执行完毕\",{\"1\":{\"348\":1}}],[\"普通二叉树存在退化的情况\",{\"1\":{\"503\":1}}],[\"普通索引\",{\"1\":{\"495\":1}}],[\"普通的直接引用\",{\"1\":{\"251\":1}}],[\"越远越好\",{\"1\":{\"574\":1}}],[\"越少越好\",{\"1\":{\"493\":1}}],[\"越糟糕的散列算法越容易碰撞\",{\"1\":{\"258\":1}}],[\"估算\",{\"1\":{\"493\":1}}],[\"替换主节点\",{\"1\":{\"698\":1}}],[\"替换下面的\",{\"1\":{\"493\":1}}],[\"替换为\",{\"1\":{\"439\":1}}],[\"唯一不足地方是\",{\"1\":{\"809\":1}}],[\"唯一的不同点在于\",{\"1\":{\"743\":1}}],[\"唯一的区别就是会唤醒在此对象监视器上等待的所有线程\",{\"1\":{\"272\":1}}],[\"唯一索引\",{\"1\":{\"493\":1,\"495\":1}}],[\"速度快的原因主要有⼏点\",{\"1\":{\"671\":1}}],[\"速度快\",{\"1\":{\"598\":1,\"641\":1}}],[\"速度要求高\",{\"1\":{\"597\":1}}],[\"速度非常快\",{\"1\":{\"493\":2}}],[\"速度肯定慢很多\",{\"1\":{\"351\":1}}],[\"决定发展一个轻量级的\",{\"1\":{\"782\":1}}],[\"决定如何查找表中的行\",{\"1\":{\"493\":1}}],[\"决定是提交还是回滚\",{\"1\":{\"208\":1}}],[\"太多降低查询的速度\",{\"1\":{\"490\":1}}],[\"太赞了\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"合理使用缓存来减轻后端服务的负载压力\",{\"1\":{\"853\":1}}],[\"合理地使用这些数据结构可以很方便地构建各种排行榜系统\",{\"1\":{\"669\":1}}],[\"合理地设计和使用索引\",{\"1\":{\"489\":1}}],[\"合适\",{\"1\":{\"806\":1}}],[\"合并子任务\",{\"1\":{\"373\":1}}],[\"书签方式就是找到\",{\"1\":{\"488\":1}}],[\"书签方式\",{\"1\":{\"488\":1}}],[\"擦除记录前要把记录更新到磁盘\",{\"1\":{\"483\":1}}],[\"组件\",{\"1\":{\"784\":1,\"830\":1}}],[\"组的\",{\"1\":{\"767\":1}}],[\"组\",{\"1\":{\"767\":1}}],[\"组上\",{\"1\":{\"767\":1}}],[\"组合了\",{\"1\":{\"784\":3}}],[\"组合注解\",{\"1\":{\"784\":3}}],[\"组合在一起的原子指令\",{\"1\":{\"727\":1}}],[\"组合索引在\",{\"1\":{\"509\":1}}],[\"组合索引代替多个单列索引\",{\"1\":{\"497\":1}}],[\"组合索引把散列性高\",{\"1\":{\"497\":1}}],[\"组合索引\",{\"1\":{\"495\":1}}],[\"组成\",{\"1\":{\"483\":1,\"769\":1}}],[\"组线程到达一个屏障\",{\"1\":{\"346\":1}}],[\"称这一组线程产生了死锁\",{\"1\":{\"646\":1}}],[\"称之为重做日志块\",{\"1\":{\"483\":1}}],[\"称为被动消费类型\",{\"1\":{\"751\":1}}],[\"称为主动消费型\",{\"1\":{\"751\":1}}],[\"称为主类\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"称为雪崩\",{\"1\":{\"704\":1}}],[\"称为oopmap\",{\"1\":{\"402\":1}}],[\"却可以对应多个域名\",{\"1\":{\"604\":1}}],[\"却返回了不同的数据\",{\"1\":{\"521\":1}}],[\"却不断有\",{\"1\":{\"480\":1}}],[\"却能和前面达到一样的效果\",{\"1\":{\"168\":1}}],[\"慢查询\",{\"1\":{\"729\":1}}],[\"慢查询日志是用来记录执行时间超过\",{\"1\":{\"479\":1}}],[\"慢查询日志\",{\"1\":{\"479\":1,\"485\":1}}],[\"慢慢启动\",{\"1\":{\"586\":1}}],[\"慢慢把书读完\",{\"1\":{\"236\":1}}],[\"慢启动阀值\",{\"1\":{\"587\":1,\"588\":2}}],[\"慢启动算法\",{\"0\":{\"586\":1},\"1\":{\"586\":1}}],[\"慢启动\",{\"1\":{\"585\":1}}],[\"慢\",{\"0\":{\"485\":1},\"1\":{\"485\":1,\"486\":1}}],[\"附加索引保存的是主索引的值\",{\"1\":{\"477\":1}}],[\"树形结构需要执行一些类似于\",{\"1\":{\"732\":1}}],[\"树状主从结构\",{\"1\":{\"683\":3}}],[\"树的叶子节点就是数据\",{\"1\":{\"506\":1}}],[\"树的高度也会降低\",{\"1\":{\"503\":1}}],[\"树使用\",{\"1\":{\"505\":1}}],[\"树效率更高\",{\"1\":{\"505\":1}}],[\"树支持\",{\"1\":{\"505\":1}}],[\"树支持联合索引的最左侧原则\",{\"1\":{\"505\":1}}],[\"树可以进行范围查询\",{\"1\":{\"505\":1}}],[\"树索引区别是什么\",{\"0\":{\"505\":1}}],[\"树呢\",{\"0\":{\"504\":1}}],[\"树而不用\",{\"0\":{\"504\":1}}],[\"树深度一般为\",{\"1\":{\"502\":1}}],[\"树深度为\",{\"1\":{\"502\":1}}],[\"树\",{\"0\":{\"503\":1},\"1\":{\"477\":1,\"503\":1,\"504\":1}}],[\"树化发生在table数组的长度大于64\",{\"1\":{\"172\":1}}],[\"兼容性很好\",{\"1\":{\"741\":1}}],[\"兼容性上不是太好\",{\"1\":{\"741\":1}}],[\"兼容的协议\",{\"1\":{\"526\":1}}],[\"兼容\",{\"1\":{\"476\":1}}],[\"触发熔断机制\",{\"1\":{\"855\":1}}],[\"触发替换主节点操作\",{\"1\":{\"698\":1}}],[\"触发客观下线流程\",{\"1\":{\"698\":1}}],[\"触发rdb持久化过程分为手动触发和自动触发\",{\"1\":{\"676\":1}}],[\"触发后\",{\"1\":{\"483\":1}}],[\"触发\",{\"1\":{\"483\":1}}],[\"触发器\",{\"1\":{\"472\":1}}],[\"触发leader选举\",{\"1\":{\"222\":1}}],[\"层的跨度用于记录两个节点之间的距离\",{\"1\":{\"732\":1}}],[\"层的数量月多\",{\"1\":{\"732\":1}}],[\"层传过来的\",{\"1\":{\"609\":1}}],[\"层协议将本机\",{\"1\":{\"609\":1}}],[\"层之间加⼊了\",{\"1\":{\"562\":1}}],[\"层层解开包装\",{\"1\":{\"544\":1}}],[\"层去过滤age=10这个条件\",{\"1\":{\"510\":1}}],[\"层和引擎层配合完成\",{\"1\":{\"481\":1}}],[\"层通过\",{\"1\":{\"472\":1}}],[\"层\",{\"1\":{\"472\":1,\"502\":1,\"732\":1,\"784\":3}}],[\"～步骤\",{\"1\":{\"470\":1}}],[\"货币在数据库中\",{\"1\":{\"465\":1}}],[\"连通性攻击\",{\"1\":{\"614\":1}}],[\"连进来导致\",{\"1\":{\"538\":1}}],[\"连接点\",{\"1\":{\"804\":1}}],[\"连接池\",{\"1\":{\"713\":1}}],[\"连接池扩展\",{\"1\":{\"485\":1}}],[\"连接的时候\",{\"1\":{\"581\":1}}],[\"连接的每一方都有固定大小的缓冲空间\",{\"1\":{\"581\":1}}],[\"连接管理\",{\"1\":{\"581\":1}}],[\"连接建立成功后从节点发送ping请求进行首次通信\",{\"1\":{\"684\":1}}],[\"连接建立到断开\",{\"1\":{\"580\":1}}],[\"连接建⽴完成后\",{\"1\":{\"586\":1}}],[\"连接建⽴相对简单\",{\"1\":{\"561\":1}}],[\"连接位于\",{\"1\":{\"579\":1}}],[\"连接⾄少消耗⼀个本地端⼝\",{\"1\":{\"579\":1}}],[\"连接失败\",{\"1\":{\"569\":1}}],[\"连接是通过三次握手建立的\",{\"1\":{\"568\":1}}],[\"连接是一个双向的通道\",{\"1\":{\"560\":1}}],[\"连接之后\",{\"1\":{\"560\":1}}],[\"连接闲置超过这个时间就会关闭\",{\"1\":{\"560\":1}}],[\"连接默认都是长连接\",{\"1\":{\"560\":1}}],[\"连接默认不关闭\",{\"1\":{\"558\":1}}],[\"连接才具有真正的长连接和短连接这一说法\",{\"1\":{\"560\":1}}],[\"连接里面\",{\"1\":{\"558\":1}}],[\"连接结束\",{\"1\":{\"546\":1}}],[\"连接到服务端的\",{\"1\":{\"563\":1}}],[\"连接到\",{\"1\":{\"527\":1}}],[\"连接\",{\"1\":{\"464\":1,\"546\":2,\"555\":2,\"558\":1,\"560\":1,\"569\":1,\"573\":1,\"577\":1}}],[\"连同类加载器一起换掉以实现代码的热替换\",{\"1\":{\"427\":1}}],[\"``2038\",{\"1\":{\"463\":1}}],[\"姓名\",{\"1\":{\"460\":1,\"793\":1}}],[\"市面上用的已经不多\",{\"1\":{\"741\":1}}],[\"市场上几大消息队列对比如下\",{\"1\":{\"741\":1}}],[\"市\",{\"1\":{\"460\":1}}],[\"省略getter\",{\"1\":{\"788\":1,\"821\":1}}],[\"省略异常处理\",{\"1\":{\"448\":1}}],[\"省份\",{\"1\":{\"460\":1}}],[\"笛卡尔积\",{\"1\":{\"458\":1}}],[\"笛卡尔积呢\",{\"0\":{\"458\":1}}],[\"交给\",{\"1\":{\"816\":1}}],[\"交易完成消息等\",{\"1\":{\"744\":1}}],[\"交易创建消息\",{\"1\":{\"744\":1}}],[\"交易消息\",{\"1\":{\"744\":1}}],[\"交换机等硬件设施的配置\",{\"1\":{\"614\":1}}],[\"交换受限控制和状态信息等\",{\"1\":{\"608\":1}}],[\"交换者\",{\"1\":{\"349\":1}}],[\"交互信息⽆法被窃取\",{\"1\":{\"562\":1}}],[\"交替执行\",{\"1\":{\"521\":1}}],[\"交叉连接的结果就有\",{\"1\":{\"458\":1}}],[\"交叉连接\",{\"0\":{\"458\":1},\"1\":{\"458\":1}}],[\"添加认证信息到请求头中\",{\"1\":{\"849\":1}}],[\"添加了一个属性\",{\"1\":{\"807\":1}}],[\"添加更多图解\",{\"1\":{\"622\":1}}],[\"添加校验\",{\"1\":{\"613\":1}}],[\"添加在⽂件证书上\",{\"1\":{\"564\":1}}],[\"添加字段\",{\"1\":{\"537\":1}}],[\"添加的\",{\"1\":{\"510\":1}}],[\"添加对应的物理分页语句和物理分页参数\",{\"1\":{\"454\":1}}],[\"添加一条订单和一条消息\",{\"1\":{\"205\":1}}],[\"拦截sql后重写为\",{\"1\":{\"454\":1}}],[\"拦截待执行的sql\",{\"1\":{\"454\":1}}],[\"拦截executor的query方法\",{\"1\":{\"454\":1}}],[\"拦截方法的参数\",{\"1\":{\"453\":1}}],[\"拦截器invoke\",{\"1\":{\"442\":1}}],[\"批处理\",{\"1\":{\"451\":1}}],[\"批量操作通常需要从不同节点上获取\",{\"1\":{\"713\":1}}],[\"批量\",{\"1\":{\"445\":1}}],[\"批量保存员工\",{\"1\":{\"445\":2}}],[\"批量保存执行后的时间\",{\"1\":{\"445\":1}}],[\"批量保存执行前时间\",{\"1\":{\"445\":1}}],[\"批量保存方法测试\",{\"1\":{\"445\":1}}],[\"供平时使⽤和rehash时使⽤\",{\"1\":{\"729\":1}}],[\"供下一次使用\",{\"1\":{\"451\":1}}],[\"供业务系统进行查询支付操作是否成功\",{\"1\":{\"207\":1}}],[\"顾名思义\",{\"1\":{\"448\":1,\"479\":1,\"573\":1}}],[\"显然是不现实的\",{\"1\":{\"607\":1}}],[\"显然这是一个线性上升的算法\",{\"1\":{\"587\":1}}],[\"显然\",{\"1\":{\"577\":1,\"716\":1}}],[\"显然batch性能将更优\",{\"1\":{\"445\":1}}],[\"显示不适合在其它列的额外信息\",{\"1\":{\"493\":1}}],[\"显示了\",{\"1\":{\"493\":1}}],[\"显示查询可能使用哪些索引来查找\",{\"1\":{\"493\":1}}],[\"显示的值也依赖于时区\",{\"1\":{\"463\":1}}],[\"显示两张表所有记录一一对应\",{\"1\":{\"458\":1}}],[\"显示系统整体资源使用情况\",{\"1\":{\"410\":1}}],[\"显示空车位数量\",{\"1\":{\"348\":1}}],[\"​\",{\"1\":{\"441\":1}}],[\"商品类型\",{\"1\":{\"460\":1}}],[\"商品价格\",{\"1\":{\"460\":1}}],[\"商品列表\",{\"1\":{\"441\":1}}],[\"商用的性能分析利器\",{\"1\":{\"411\":1}}],[\"模式\",{\"1\":{\"870\":2}}],[\"模式写文件\",{\"1\":{\"677\":1}}],[\"模板模式\",{\"1\":{\"785\":1}}],[\"模板封装\",{\"1\":{\"782\":1}}],[\"模拟死锁案发\",{\"1\":{\"516\":1}}],[\"模糊查询like语句该怎么写\",{\"0\":{\"440\":1}}],[\"模块热部署\",{\"1\":{\"427\":1}}],[\"办公自动化系统\",{\"1\":{\"434\":1}}],[\"适配器模式\",{\"1\":{\"785\":1}}],[\"适合基建完善的大厂\",{\"1\":{\"708\":1}}],[\"适合于需求变化频繁\",{\"1\":{\"434\":1}}],[\"适合于需求相对稳定\",{\"1\":{\"434\":1}}],[\"适当增加冗余字段\",{\"1\":{\"490\":1}}],[\"适当地使用前缀所云\",{\"1\":{\"489\":1}}],[\"适当使用前缀索引\",{\"1\":{\"489\":1}}],[\"适用于后端服务器性能相近且无需考虑请求处理能力的场景\",{\"1\":{\"851\":1}}],[\"适用于需要高性能和低延迟的分布式系统\",{\"1\":{\"845\":1}}],[\"适用于不同类型的应用场景\",{\"1\":{\"845\":1}}],[\"适用于微服务和云原生应用\",{\"1\":{\"836\":1}}],[\"适用于构建基于\",{\"1\":{\"836\":1}}],[\"适用于某些耗时非常短但对可靠性要求并不高的场景\",{\"1\":{\"750\":1}}],[\"适用于单\",{\"1\":{\"412\":1}}],[\"适用于处理cpu密集型的任务\",{\"1\":{\"363\":1}}],[\"适用于串行执行任务的场景\",{\"1\":{\"362\":1}}],[\"适用于一些对最终一致性实时性要求没那么高的业务\",{\"1\":{\"207\":1}}],[\"适用场景|适用于构建restful风格的微服务架构\",{\"1\":{\"846\":1}}],[\"适用场景\",{\"1\":{\"362\":1,\"364\":1}}],[\"级联比\",{\"1\":{\"434\":1}}],[\"级联\",{\"1\":{\"434\":1}}],[\"框架紧密结合用于提升\",{\"1\":{\"819\":1}}],[\"框架的应用程序\",{\"1\":{\"819\":1}}],[\"框架的核心特性以及扩展功能\",{\"1\":{\"819\":1}}],[\"框架的开发者\",{\"1\":{\"789\":1}}],[\"框架的基础设施\",{\"1\":{\"789\":1}}],[\"框架的整合\",{\"1\":{\"783\":1}}],[\"框架中广泛使用了不同类型的设计模式\",{\"1\":{\"785\":1}}],[\"框架是分模块存在\",{\"1\":{\"783\":1}}],[\"框架过程\",{\"1\":{\"485\":1}}],[\"框架\",{\"1\":{\"433\":1,\"807\":1,\"817\":1,\"830\":1,\"857\":1}}],[\"版的\",{\"1\":{\"788\":1}}],[\"版本中得到了解决\",{\"1\":{\"727\":1}}],[\"版本的头信息是文本\",{\"1\":{\"558\":1}}],[\"版本字段\",{\"1\":{\"556\":1}}],[\"版本链中哪个版本是能被当前事务读取的\",{\"1\":{\"523\":1}}],[\"版本链的头节点就是当前记录最新的值\",{\"1\":{\"523\":1}}],[\"版本链\",{\"1\":{\"523\":2}}],[\"版本最为常用\",{\"1\":{\"515\":1}}],[\"版本使用\",{\"1\":{\"489\":1}}],[\"版本以前\",{\"1\":{\"473\":1}}],[\"版本\",{\"1\":{\"429\":2,\"624\":1}}],[\"版之后提供了\",{\"1\":{\"392\":3}}],[\"销毁\",{\"1\":{\"793\":2}}],[\"销毁原来的自定义\",{\"1\":{\"428\":1}}],[\"销毁一个对象\",{\"1\":{\"351\":1}}],[\"历史上有哪几次双亲委派机制的破坏\",{\"0\":{\"427\":1}}],[\"历史最悠久的收集器\",{\"1\":{\"401\":1}}],[\"子进程退出信号\",{\"1\":{\"641\":1}}],[\"子查询返回不重复的集合\",{\"1\":{\"493\":1}}],[\"子查询等等分类\",{\"1\":{\"493\":1}}],[\"子查询表小的用\",{\"1\":{\"464\":1}}],[\"子句的顺序完全一致\",{\"1\":{\"491\":1}}],[\"子句中的列\",{\"1\":{\"470\":1}}],[\"子句中的左表<left\",{\"1\":{\"470\":1}}],[\"子句包含两个以上表\",{\"1\":{\"470\":1}}],[\"子加载器才会尝试自己去完成加载\",{\"1\":{\"424\":1}}],[\"子线程\",{\"1\":{\"315\":2}}],[\"四是负责协调各个地方邮局的管理机构\",{\"1\":{\"747\":1}}],[\"四种\",{\"1\":{\"590\":1}}],[\"四次挥手过程中\",{\"0\":{\"576\":1}}],[\"四次挥手过程\",{\"1\":{\"574\":1}}],[\"四次挥手的过程\",{\"0\":{\"574\":1}}],[\"四次挥手\",{\"1\":{\"546\":1}}],[\"四次挥手等等\",{\"1\":{\"546\":1}}],[\"四层模型\",{\"1\":{\"542\":2}}],[\"四个字回答\",{\"1\":{\"450\":1}}],[\"四\",{\"0\":{\"420\":1}}],[\"工程类\",{\"1\":{\"795\":1}}],[\"工厂方法注入\",{\"1\":{\"795\":2}}],[\"工厂\",{\"1\":{\"789\":1}}],[\"工厂根据什么来提供产品呢\",{\"1\":{\"788\":1}}],[\"工厂一般都是有库房的\",{\"1\":{\"788\":1}}],[\"工厂模式\",{\"1\":{\"785\":1,\"788\":1}}],[\"工厂用于生成\",{\"1\":{\"782\":1}}],[\"工具类\",{\"1\":{\"806\":1}}],[\"工具解决数据一致性问题\",{\"1\":{\"677\":1}}],[\"工具查看\",{\"1\":{\"418\":1}}],[\"工具\",{\"1\":{\"418\":1,\"824\":1}}],[\"工作\",{\"1\":{\"793\":2}}],[\"工作过程如下\",{\"1\":{\"609\":1}}],[\"工作在网际层\",{\"1\":{\"602\":1}}],[\"工作窃取发生的时候\",{\"1\":{\"373\":1}}],[\"工作窃取算法\",{\"1\":{\"373\":1}}],[\"工作机制\",{\"1\":{\"365\":1}}],[\"工作流程是怎样的\",{\"0\":{\"563\":1}}],[\"工作流程\",{\"1\":{\"362\":1,\"363\":1,\"364\":1}}],[\"借助工具分析哪\",{\"1\":{\"418\":1}}],[\"及时释放内存空间\",{\"1\":{\"715\":1}}],[\"及时调用remove\",{\"1\":{\"311\":1}}],[\"及全限定类名\",{\"1\":{\"418\":1}}],[\"摘要信息\",{\"1\":{\"418\":1}}],[\"信号可以理解成一种电报\",{\"1\":{\"641\":1}}],[\"信号\",{\"1\":{\"641\":2}}],[\"信号量是操作系统提供的⼀种协调共享资源访问的⽅法\",{\"1\":{\"645\":1}}],[\"信号量表示资源的数量\",{\"1\":{\"641\":1}}],[\"信号量我们可以理解成红绿灯\",{\"1\":{\"641\":1}}],[\"信号量\",{\"0\":{\"348\":1},\"1\":{\"348\":1,\"641\":2,\"645\":1}}],[\"信任的⼀⽅签发的证书\",{\"1\":{\"564\":1}}],[\"信息同步到\",{\"1\":{\"749\":1}}],[\"信息发现只有\",{\"1\":{\"593\":1}}],[\"信息也发送给服务端\",{\"1\":{\"566\":1}}],[\"信息后\",{\"1\":{\"566\":1}}],[\"信息加密\",{\"1\":{\"562\":1}}],[\"信息是明⽂传输\",{\"1\":{\"561\":1}}],[\"信息性状态码\",{\"1\":{\"551\":1}}],[\"信息\",{\"1\":{\"418\":1,\"566\":2,\"684\":1}}],[\"抓取线程栈\",{\"1\":{\"418\":1}}],[\"严重影响性能\",{\"1\":{\"772\":1}}],[\"严重点可能直接打挂了\",{\"1\":{\"740\":1}}],[\"严重内存泄漏往往伴随频繁的\",{\"1\":{\"418\":1}}],[\"严格来讲\",{\"1\":{\"845\":1}}],[\"严格上ca指的是允许分区后各子系统依然保持ca\",{\"1\":{\"192\":1}}],[\"严格的一致性\",{\"1\":{\"190\":1}}],[\"错误处理信息\",{\"1\":{\"704\":1}}],[\"错误日志文件对\",{\"1\":{\"479\":1}}],[\"错误日志\",{\"1\":{\"479\":1}}],[\"错误\",{\"1\":{\"418\":1}}],[\"弄清楚可疑对象是否满足了进入到老年代的条件才能下结论\",{\"1\":{\"417\":1}}],[\"元空间大小\",{\"1\":{\"417\":1}}],[\"元素数组\",{\"1\":{\"312\":1}}],[\"元素数组和散列方法\",{\"1\":{\"312\":1}}],[\"元素会存入链表\",{\"1\":{\"175\":1}}],[\"元素在重新计算hash之后\",{\"1\":{\"174\":1}}],[\"元素\",{\"1\":{\"174\":1}}],[\"元素比较少\",{\"1\":{\"173\":1}}],[\"元素比较多\",{\"1\":{\"173\":1}}],[\"元素产生过渡动画效果\",{\"1\":{\"33\":1}}],[\"元素使其拥有多个动画片段\",{\"1\":{\"27\":1}}],[\"元素上添加属性\",{\"1\":{\"7\":1}}],[\"次用户态到内核态的上下文切换\",{\"1\":{\"726\":1}}],[\"次上下⽂切换\",{\"1\":{\"662\":1}}],[\"次上下⽂切换的开销\",{\"1\":{\"662\":1}}],[\"次方个\",{\"1\":{\"607\":1}}],[\"次方个地址\",{\"1\":{\"605\":2}}],[\"次握手是可以携带数据的\",{\"1\":{\"572\":1}}],[\"次握手可以携带数据吗\",{\"0\":{\"572\":1}}],[\"次交互合并成了\",{\"1\":{\"559\":1}}],[\"次交互\",{\"1\":{\"559\":1}}],[\"次磁盘\",{\"1\":{\"502\":1}}],[\"次\",{\"1\":{\"418\":1,\"559\":1}}],[\"次数据拷⻉\",{\"1\":{\"662\":1}}],[\"次数是稳定的\",{\"1\":{\"504\":1}}],[\"次数更少\",{\"1\":{\"504\":2}}],[\"次数增多\",{\"1\":{\"497\":1}}],[\"次数太多\",{\"1\":{\"418\":1}}],[\"次数频繁\",{\"1\":{\"415\":1}}],[\"次数\",{\"1\":{\"415\":1,\"418\":1}}],[\"次的话\",{\"1\":{\"175\":1}}],[\"持有槽的主节点处理故障选举消息\",{\"1\":{\"698\":1}}],[\"持有并等待条件\",{\"1\":{\"648\":1}}],[\"持续迭代\",{\"0\":{\"622\":1}}],[\"持续飚高说明垃圾回收跟不上对象创建的速度\",{\"1\":{\"415\":1}}],[\"持久化的机制来带的问题\",{\"1\":{\"770\":1}}],[\"持久化相关的阻塞\",{\"1\":{\"718\":1}}],[\"持久化可以配置\",{\"1\":{\"677\":1}}],[\"持久化\",{\"0\":{\"675\":1},\"1\":{\"676\":1,\"678\":2}}],[\"持久性\",{\"1\":{\"518\":1,\"519\":2}}],[\"持久代等\",{\"1\":{\"404\":1}}],[\"列举一下\",{\"0\":{\"512\":1}}],[\"列展示的就是与索引列作等值匹配的值\",{\"1\":{\"493\":1}}],[\"列\",{\"1\":{\"493\":10}}],[\"列名不为主键\",{\"1\":{\"469\":1}}],[\"列名为主键\",{\"1\":{\"469\":1}}],[\"列名\",{\"0\":{\"469\":1},\"1\":{\"469\":3}}],[\"列中的值的范围是从\",{\"1\":{\"465\":1}}],[\"列出对应进程里面的线程占用资源情况\",{\"1\":{\"414\":1}}],[\"列出系统各个进程的资源占用情况\",{\"1\":{\"414\":1}}],[\"列表数据结构使用的是压缩列表\",{\"1\":{\"734\":1}}],[\"列表节点\",{\"1\":{\"733\":1}}],[\"列表主要有以下几种使用场景\",{\"1\":{\"670\":1}}],[\"列表是一种比较灵活的数据结构\",{\"1\":{\"670\":1}}],[\"列表中\",{\"1\":{\"523\":1,\"606\":2}}],[\"列表\",{\"1\":{\"152\":1,\"260\":1,\"523\":1,\"606\":2,\"668\":1,\"670\":1,\"736\":2}}],[\"列表默认为\",{\"1\":{\"11\":1}}],[\"知道了自动配置原理\",{\"1\":{\"821\":1}}],[\"知道了\",{\"1\":{\"592\":1}}],[\"知道了问题就容易解决了\",{\"1\":{\"413\":1}}],[\"知道有哪些垃圾收集器吗\",{\"0\":{\"401\":1}}],[\"偶发性的引发\",{\"1\":{\"413\":1}}],[\"好像人的一生\",{\"1\":{\"793\":1}}],[\"好像跟本地消息表的实现方案类似\",{\"1\":{\"206\":1}}],[\"好好把烂代码重构一下不比瞎调\",{\"1\":{\"413\":1}}],[\"打开的⽂件等\",{\"1\":{\"642\":1}}],[\"打开的⽂件等资源\",{\"1\":{\"642\":1}}],[\"打开的临时窗口在多少时间内无人办理则关闭对应\",{\"1\":{\"353\":1}}],[\"打开手册\",{\"1\":{\"621\":1}}],[\"打印出参\",{\"1\":{\"805\":1}}],[\"打印出进程的所有线程信息\",{\"1\":{\"414\":1}}],[\"打印调用\",{\"1\":{\"805\":1}}],[\"打印请求入参\",{\"1\":{\"805\":1}}],[\"打印请求的\",{\"1\":{\"805\":1}}],[\"打印请求\",{\"1\":{\"805\":1}}],[\"打印请求相关参数\",{\"1\":{\"805\":1}}],[\"打印返回参数和接口执行时间\",{\"1\":{\"805\":1}}],[\"打印了一些入参信息\",{\"1\":{\"805\":1}}],[\"打印接口的入参和出参日志\",{\"1\":{\"805\":1}}],[\"打印\",{\"1\":{\"412\":1,\"805\":1}}],[\"情况下\",{\"1\":{\"799\":1}}],[\"情况\",{\"1\":{\"412\":1,\"538\":1}}],[\"公钥与私钥是成对存在的\",{\"1\":{\"616\":1}}],[\"公钥解密的内容就不一致\",{\"1\":{\"564\":1}}],[\"公钥在证书里面\",{\"1\":{\"563\":1}}],[\"公证中⼼\",{\"1\":{\"564\":1}}],[\"公私钥\",{\"1\":{\"563\":1}}],[\"公司开发的一个工具\",{\"1\":{\"537\":1}}],[\"公司的监控系统\",{\"1\":{\"417\":1}}],[\"公式为\",{\"1\":{\"412\":1}}],[\"公平锁的优点是等待锁的线程不会饿死\",{\"1\":{\"332\":1}}],[\"公平锁是指多个线程按照申请锁的顺序来获取锁\",{\"1\":{\"332\":1}}],[\"公平锁\",{\"1\":{\"332\":1}}],[\"年\",{\"1\":{\"782\":1,\"824\":1}}],[\"年轻代中\",{\"1\":{\"412\":1}}],[\"年轻代占整个年轻代年老代和的\",{\"1\":{\"412\":1}}],[\"年龄大于或等于该年龄的对象就可以直接进入老年代\",{\"1\":{\"400\":1}}],[\"年龄到达阈值需要晋升这两种情况\",{\"1\":{\"399\":1}}],[\"火焰图\",{\"1\":{\"411\":1}}],[\"日志收集有很多种方案\",{\"1\":{\"877\":1}}],[\"日志级别等\",{\"1\":{\"840\":1}}],[\"日志就可以完全替代之前的\",{\"1\":{\"680\":1}}],[\"日志很小\",{\"1\":{\"680\":1}}],[\"日志不再是全量的日志\",{\"1\":{\"680\":1}}],[\"日志文件\",{\"1\":{\"720\":1,\"749\":1,\"755\":1}}],[\"日志文件存在一起\",{\"1\":{\"680\":1}}],[\"日志文件有很多\",{\"1\":{\"479\":1}}],[\"日志文件有哪些\",{\"0\":{\"479\":1}}],[\"日志性能相对\",{\"1\":{\"680\":1}}],[\"日志重放\",{\"1\":{\"680\":1}}],[\"日志已经写满\",{\"1\":{\"483\":1}}],[\"日志量已经占满了\",{\"1\":{\"483\":1}}],[\"日志缓冲区\",{\"1\":{\"483\":1}}],[\"日志\",{\"0\":{\"478\":1},\"1\":{\"479\":1,\"523\":2,\"680\":1}}],[\"日志分析工具\",{\"1\":{\"411\":2}}],[\"日期范围\",{\"1\":{\"463\":1}}],[\"日期\",{\"1\":{\"463\":1,\"472\":1}}],[\"日期时间\",{\"1\":{\"291\":1}}],[\"日常的设计\",{\"1\":{\"461\":1}}],[\"外存\",{\"1\":{\"629\":1}}],[\"外存管理\",{\"1\":{\"629\":1}}],[\"外号\",{\"1\":{\"526\":1}}],[\"外键支持\",{\"1\":{\"477\":1}}],[\"外连接常用的有左连接\",{\"1\":{\"459\":1}}],[\"外连接\",{\"0\":{\"458\":1},\"1\":{\"458\":1}}],[\"外\",{\"1\":{\"439\":1}}],[\"外在病症表现可能有\",{\"1\":{\"418\":1}}],[\"外所有命令的功能\",{\"1\":{\"410\":1}}],[\"外部类\",{\"1\":{\"250\":2}}],[\"逃逸分析的好处\",{\"1\":{\"408\":1}}],[\"逃逸分析是指分析指针动态范围的方法\",{\"1\":{\"408\":1}}],[\"逃过一劫\",{\"1\":{\"393\":1}}],[\"绝对\",{\"1\":{\"408\":1}}],[\"亦或它在没有停顿时间要求的单线程处理器上运行\",{\"1\":{\"407\":1}}],[\"亦或是\",{\"1\":{\"294\":1}}],[\"浮动垃圾\",{\"1\":{\"405\":1}}],[\"浮点数\",{\"1\":{\"670\":1}}],[\"浮点类型\",{\"1\":{\"238\":1}}],[\"浮点型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"低版本避免使用\",{\"1\":{\"489\":1}}],[\"低停顿\",{\"1\":{\"405\":1}}],[\"低位掩码\",{\"1\":{\"167\":1}}],[\"构建一个\",{\"1\":{\"609\":1}}],[\"构建出来的实际上是它的实现类的实例\",{\"1\":{\"448\":1}}],[\"构建sqlsessionfactory\",{\"1\":{\"448\":1}}],[\"构建会话工厂\",{\"1\":{\"448\":1}}],[\"构成回收集\",{\"1\":{\"404\":1}}],[\"构造器注入和\",{\"1\":{\"799\":1}}],[\"构造器参数跟方法参数\",{\"1\":{\"784\":1}}],[\"构造函数的入参\",{\"1\":{\"796\":1}}],[\"构造函数包含一个\",{\"1\":{\"796\":1}}],[\"构造函数默认创建的是非公平锁\",{\"1\":{\"332\":1,\"333\":1}}],[\"构造方法注入\",{\"1\":{\"795\":1}}],[\"构造方法是atomicmarkablereference\",{\"1\":{\"340\":1}}],[\"构造会话工厂\",{\"1\":{\"448\":1}}],[\"构造会话工厂也可以分为两步\",{\"1\":{\"448\":1}}],[\"构造下列一个uservo对象同时设置一个map属性\",{\"1\":{\"91\":1}}],[\"构造下列一个uservo对象同时设置一个array属性\",{\"1\":{\"90\":1}}],[\"构造下列一个uservo对象同时设置一个list集合属性\",{\"1\":{\"89\":1}}],[\"筛选\",{\"1\":{\"470\":1}}],[\"筛选回收\",{\"1\":{\"404\":1}}],[\"筛选的条件是此对象是否有必要执行\",{\"1\":{\"393\":1}}],[\"找出所有的应用程序监听器\",{\"1\":{\"822\":1}}],[\"找出消耗高的\",{\"1\":{\"538\":1}}],[\"找出死锁\",{\"1\":{\"516\":1}}],[\"找出要回收的对象\",{\"1\":{\"404\":1}}],[\"找到发生变更的配置项对应的客户端连接\",{\"1\":{\"843\":1}}],[\"找到运行的主类\",{\"1\":{\"822\":1}}],[\"找到接收进程\",{\"1\":{\"641\":1}}],[\"找到这个人\",{\"1\":{\"557\":1}}],[\"找到这一行\",{\"1\":{\"481\":1}}],[\"找到就直接返回\",{\"1\":{\"547\":1}}],[\"找到索引文件进行遍历\",{\"1\":{\"496\":1}}],[\"找到占用内存高的对象\",{\"1\":{\"415\":1}}],[\"找到对应线程\",{\"1\":{\"414\":1}}],[\"找到空闲位置的方法也有很多种\",{\"1\":{\"171\":1}}],[\"递归扫描整个堆里的对象图\",{\"1\":{\"404\":1}}],[\"价值\",{\"1\":{\"404\":1}}],[\"扮演新生代的\",{\"1\":{\"404\":1}}],[\"喝口水\",{\"1\":{\"402\":1}}],[\"车上东西很重\",{\"1\":{\"402\":1}}],[\"车辆就是线程\",{\"1\":{\"348\":1}}],[\"车辆就得等待\",{\"1\":{\"348\":1}}],[\"车辆就可以驶入\",{\"1\":{\"348\":1}}],[\"串联\",{\"1\":{\"791\":1}}],[\"串联起参数映射的处理和运行结果映射的处理\",{\"1\":{\"448\":1}}],[\"串行化的情况下\",{\"1\":{\"522\":1}}],[\"串行化的实现采用的是读写都加锁的原理\",{\"1\":{\"522\":1}}],[\"串行化\",{\"1\":{\"519\":1,\"520\":1,\"522\":1,\"810\":1}}],[\"串行\",{\"1\":{\"401\":1}}],[\"串转化为对象\",{\"1\":{\"283\":1}}],[\"长作业有可能会饿死\",{\"1\":{\"640\":1}}],[\"长连接可以复用一个\",{\"1\":{\"560\":1}}],[\"长度的是浏览器\",{\"1\":{\"554\":1}}],[\"长度为\",{\"1\":{\"502\":1}}],[\"长度是可变的\",{\"1\":{\"461\":1}}],[\"长度是固定的\",{\"1\":{\"461\":1}}],[\"长字符串之类的对\",{\"1\":{\"400\":1}}],[\"长期存活的对象将进入老年代\",{\"1\":{\"400\":1}}],[\"长时间保持空闲的\",{\"1\":{\"364\":1}}],[\"拷贝过来对象\",{\"1\":{\"399\":1}}],[\"拷贝被拷贝对象的成员变量的值\",{\"1\":{\"260\":1}}],[\"达到最大重试次数后\",{\"1\":{\"766\":1}}],[\"达到最大通知次数后\",{\"1\":{\"207\":1}}],[\"达到感知对方的过程\",{\"1\":{\"697\":1}}],[\"达到压缩\",{\"1\":{\"676\":1}}],[\"达到一定比例\",{\"1\":{\"399\":1}}],[\"往⼆级缓存中放的显示⼀个普通的\",{\"1\":{\"801\":1}}],[\"往返时间的最小\",{\"1\":{\"609\":1}}],[\"往返时间\",{\"1\":{\"591\":1}}],[\"往这个范围中插入\",{\"1\":{\"521\":1}}],[\"往左还是往右\",{\"1\":{\"509\":1}}],[\"往往不需要进行磁盘\",{\"1\":{\"493\":1}}],[\"往下看\",{\"1\":{\"399\":1}}],[\"往一群猫里放条狗\",{\"1\":{\"285\":1}}],[\"移除重复的配置\",{\"1\":{\"820\":1}}],[\"移动存活对象是个极为负重的操作\",{\"1\":{\"395\":1}}],[\"移植到\",{\"1\":{\"381\":1}}],[\"见图6\",{\"1\":{\"683\":1}}],[\"见名知义\",{\"1\":{\"395\":1}}],[\"见一次吊一次\",{\"1\":{\"245\":1}}],[\"清楚排查问题时能使用哪些工具\",{\"1\":{\"417\":1}}],[\"清楚从程序角度\",{\"1\":{\"417\":1}}],[\"清理掉标记阶段标记的死亡的对象\",{\"1\":{\"403\":1}}],[\"清理过期entry\",{\"1\":{\"314\":2}}],[\"清除之后会产生大量不连续的内存碎片\",{\"1\":{\"395\":1}}],[\"清除\",{\"1\":{\"395\":3}}],[\"清除算法面对大量可回收对象时执行效率低的问题\",{\"1\":{\"395\":1}}],[\"清除算法比较基础\",{\"1\":{\"395\":1}}],[\"清除算法\",{\"1\":{\"395\":1,\"401\":1}}],[\"需\",{\"1\":{\"694\":1}}],[\"需不需要刀下留人\",{\"1\":{\"393\":1}}],[\"需要结合其他组件或框架进行服务治理\",{\"1\":{\"846\":1}}],[\"需要结合测试和监控来进行调整\",{\"1\":{\"359\":1}}],[\"需要考虑服务的注册发现\",{\"1\":{\"829\":1}}],[\"需要考虑分页的优化\",{\"1\":{\"488\":1}}],[\"需要有效的沟通渠道和协作机制\",{\"1\":{\"829\":1}}],[\"需要有严密的分析和监控机制\",{\"1\":{\"413\":1}}],[\"需要额外解决分布式事务和数据同步的问题\",{\"1\":{\"829\":1}}],[\"需要处理服务之间的通信\",{\"1\":{\"829\":1}}],[\"需要进行一系列的操作\",{\"1\":{\"815\":1}}],[\"需要显式执行事务\",{\"1\":{\"809\":1}}],[\"需要用到单独的编译器\",{\"1\":{\"807\":1}}],[\"需要依赖\",{\"1\":{\"807\":1}}],[\"需要实现对应接口\",{\"1\":{\"806\":1}}],[\"需要特殊的类加载器\",{\"1\":{\"804\":1}}],[\"需要把\",{\"1\":{\"767\":1}}],[\"需要保证每条消息都有一个惟一的编号\",{\"1\":{\"757\":1}}],[\"需要保证幂等操作\",{\"1\":{\"205\":1}}],[\"需要获取\",{\"1\":{\"744\":1}}],[\"需要订单服务去调用库存服务减库存\",{\"1\":{\"740\":1}}],[\"需要对字符串进行修改时\",{\"1\":{\"730\":1}}],[\"需要对原数组中的元素进行重新\",{\"1\":{\"175\":1}}],[\"需要排查是否是持久化导致的阻塞\",{\"1\":{\"718\":1}}],[\"需要更多的内存空间\",{\"1\":{\"703\":1}}],[\"需要通过相关命令把一部分槽和内容迁移给新节点\",{\"1\":{\"699\":1}}],[\"需要手动将一个从节点晋升为主节点\",{\"1\":{\"686\":1}}],[\"需要手动编写\",{\"1\":{\"434\":1}}],[\"需要手动编写sql来完成\",{\"1\":{\"433\":1}}],[\"需要定期对aof文件进行重写\",{\"1\":{\"676\":1}}],[\"需要在死信消息产生后的\",{\"1\":{\"766\":1}}],[\"需要在内存中维护⼀个所有⻚⾯的链表\",{\"1\":{\"658\":1}}],[\"需要在业务系统里增加消息表\",{\"1\":{\"205\":1}}],[\"需要建立适当的部署管道和自动化工具\",{\"1\":{\"829\":1}}],[\"需要建立连接\",{\"1\":{\"598\":1}}],[\"需要建一个实体类\",{\"1\":{\"436\":1}}],[\"需要重传\",{\"1\":{\"581\":1}}],[\"需要重点关注corepoolsize\",{\"1\":{\"354\":1}}],[\"需要将表的数据从头到尾遍历一遍\",{\"1\":{\"496\":1}}],[\"需要执行checkpoint规则腾出可写空间\",{\"1\":{\"483\":1}}],[\"需要逐行删除\",{\"1\":{\"467\":1}}],[\"需要加属性\",{\"1\":{\"436\":1}}],[\"需要编写较多sql\",{\"1\":{\"434\":1}}],[\"需要\",{\"1\":{\"403\":2,\"404\":1}}],[\"需要调用\",{\"1\":{\"389\":1}}],[\"需要调⽤这个实例对象所属类的静态\",{\"1\":{\"324\":1}}],[\"需要限制线程数量的场景\",{\"1\":{\"365\":1}}],[\"需要向第三方推送数据\",{\"1\":{\"352\":1}}],[\"需要走gc垃圾回收流程\",{\"1\":{\"351\":1}}],[\"需要经过类加载过程\",{\"1\":{\"351\":1}}],[\"需要一定的阻塞等待唤醒机制来保证锁的分配\",{\"1\":{\"331\":1}}],[\"需要注意的点有\",{\"1\":{\"724\":1}}],[\"需要注意的是这种划分只是根据垃圾回收机制来进行的划分\",{\"1\":{\"379\":1}}],[\"需要注意的是value是volatile的\",{\"1\":{\"180\":1}}],[\"需要注意的是\",{\"1\":{\"86\":1,\"88\":1,\"90\":1,\"345\":1,\"489\":1,\"828\":1,\"846\":1}}],[\"需要注意\",{\"1\":{\"360\":1}}],[\"需要注意浅拷贝和深拷贝的区别\",{\"1\":{\"261\":1}}],[\"需要使用双引号\",{\"1\":{\"440\":1}}],[\"需要使用synchronized\",{\"1\":{\"318\":1}}],[\"需要使用\",{\"1\":{\"254\":1,\"466\":1}}],[\"需要强制转换类型才能赋值给\",{\"1\":{\"239\":1}}],[\"需要强制转换\",{\"1\":{\"239\":1}}],[\"需要先把\",{\"1\":{\"761\":1}}],[\"需要先从磁盘读入内存\",{\"1\":{\"481\":1}}],[\"需要先获取mapperproxyfactory\",{\"1\":{\"450\":1}}],[\"需要先获取一个唯一的token\",{\"1\":{\"225\":1}}],[\"需要先定位到可疑对象\",{\"1\":{\"417\":1}}],[\"需要先创建对象然后通过对象才能访问到它\",{\"1\":{\"254\":1}}],[\"需要先对该元素对象进行判空\",{\"1\":{\"88\":1,\"90\":1}}],[\"需要说服\",{\"1\":{\"219\":1}}],[\"需要根据特定的场景和业务逻辑来设计相应的操作\",{\"1\":{\"204\":1}}],[\"需要记录事务在任何节点所做的所有动作\",{\"1\":{\"200\":1}}],[\"需要旋转的次数更多\",{\"1\":{\"162\":1}}],[\"需要存储前驱和后继\",{\"1\":{\"154\":1}}],[\"需要遍历链表\",{\"1\":{\"154\":1}}],[\"青天大老爷看看有没有什么冤情\",{\"1\":{\"393\":1}}],[\"幻读\",{\"1\":{\"521\":1}}],[\"幻影引用\",{\"1\":{\"392\":1}}],[\"幻灯片演示\",{\"0\":{\"5\":1}}],[\"幻灯片页\",{\"0\":{\"4\":1}}],[\"幽灵引用\",{\"1\":{\"392\":1}}],[\"虚拟节点\",{\"1\":{\"695\":1}}],[\"虚拟槽分区\",{\"0\":{\"695\":1}}],[\"虚拟地址\",{\"1\":{\"652\":1}}],[\"虚拟地址和物理地址通过段表映射\",{\"1\":{\"652\":1}}],[\"虚拟内存是操作系统提供的⼀种机制\",{\"1\":{\"651\":1}}],[\"虚拟内存这些资源就保持不动\",{\"1\":{\"643\":1}}],[\"虚拟机篇面试题八股文\",{\"1\":{\"623\":1}}],[\"虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了\",{\"1\":{\"422\":1}}],[\"虚拟机配置查看\",{\"1\":{\"410\":1}}],[\"虚拟机运行时信息查看\",{\"1\":{\"410\":1}}],[\"虚拟机进程查看\",{\"1\":{\"410\":1}}],[\"虚拟机设计者形象描述为stop\",{\"1\":{\"402\":1}}],[\"虚拟机并不是永远要求对象的年龄必须达到\",{\"1\":{\"400\":1}}],[\"虚拟机提供了这个参数来设置\",{\"1\":{\"400\":1}}],[\"虚拟机的实现会提供一个扩展库目录\",{\"1\":{\"423\":1}}],[\"虚拟机的主流垃圾回收器采取的是可达性分析算法\",{\"1\":{\"390\":1}}],[\"虚拟机的栈内存大小是固定的\",{\"1\":{\"388\":1}}],[\"虚拟机主要使用直接指针来进行对象访问\",{\"1\":{\"386\":1}}],[\"虚拟机里\",{\"1\":{\"385\":1}}],[\"虚拟机就必须维护一个列表\",{\"1\":{\"383\":1}}],[\"虚拟机将内存分为一块较大的\",{\"1\":{\"396\":1}}],[\"虚拟机将分配到的内存空间\",{\"1\":{\"382\":1}}],[\"虚拟机将字节转换得到的\",{\"1\":{\"279\":1}}],[\"虚拟机时\",{\"1\":{\"381\":1}}],[\"虚拟机规范\",{\"1\":{\"386\":1,\"422\":2}}],[\"虚拟机规范规定的方法区只是换种方式实现\",{\"1\":{\"381\":1}}],[\"虚拟机规范对它的约束非常宽松\",{\"1\":{\"379\":1}}],[\"虚拟机规范本身制定的\",{\"1\":{\"379\":1}}],[\"虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的\",{\"1\":{\"379\":1}}],[\"虚拟机栈描述的是\",{\"1\":{\"379\":1}}],[\"虚拟机栈\",{\"1\":{\"379\":3,\"388\":1,\"391\":1}}],[\"虚拟机面试高频题\",{\"1\":{\"375\":1}}],[\"虚拟机即时编译器在运行时\",{\"1\":{\"327\":1}}],[\"虚拟机能识别的\",{\"1\":{\"235\":1}}],[\"虚拟机执行\",{\"0\":{\"420\":1},\"1\":{\"235\":1}}],[\"虚拟机在系统平台上运行的\",{\"1\":{\"234\":1}}],[\"虚拟机上\",{\"1\":{\"233\":1,\"384\":1}}],[\"虚拟机\",{\"1\":{\"233\":2,\"234\":1,\"235\":1,\"377\":1,\"623\":1}}],[\"虚引用也称为\",{\"1\":{\"392\":1}}],[\"软链接相当于重新创建⼀个⽂件\",{\"1\":{\"660\":1}}],[\"软引用是用来描述一些还有用\",{\"1\":{\"392\":1}}],[\"软引用\",{\"1\":{\"392\":1}}],[\"软状态也称为弱状态\",{\"1\":{\"193\":1}}],[\"软状态\",{\"1\":{\"193\":1}}],[\"探索所有能够被该集合引用到的对象\",{\"1\":{\"390\":1}}],[\"忘记关闭这些资源会导致持续占有内存\",{\"1\":{\"389\":1}}],[\"回退到noeviction策略\",{\"1\":{\"717\":2}}],[\"回客户端错误信息\",{\"1\":{\"717\":1}}],[\"回到⽤户态继续⼯作\",{\"1\":{\"633\":1}}],[\"回送回答报文中的时间戳\",{\"1\":{\"609\":1}}],[\"回\",{\"1\":{\"592\":4,\"690\":1}}],[\"回应报文\",{\"1\":{\"573\":1}}],[\"回表了解吗\",{\"0\":{\"507\":1}}],[\"回滚反向补偿\",{\"1\":{\"871\":1}}],[\"回滚的\",{\"1\":{\"782\":1}}],[\"回滚指针\",{\"1\":{\"523\":1}}],[\"回滚数据\",{\"1\":{\"519\":1}}],[\"回滚日志的管理和存储是seata的核心机制\",{\"1\":{\"874\":1}}],[\"回滚日志的作用就是对数据进行回滚\",{\"1\":{\"479\":1}}],[\"回滚日志同样也是\",{\"1\":{\"479\":1}}],[\"回滚日志\",{\"1\":{\"479\":1}}],[\"回滚和恢复的事务安全\",{\"1\":{\"476\":1}}],[\"回滚\",{\"1\":{\"467\":1,\"477\":1}}],[\"回收的过程日志信息\",{\"1\":{\"412\":1}}],[\"回收的\",{\"1\":{\"404\":1}}],[\"回收所有被标记的对象\",{\"1\":{\"395\":1}}],[\"回收\",{\"1\":{\"389\":2}}],[\"回复+fullresync响应\",{\"1\":{\"685\":1}}],[\"回复已经通过的提案中提案号最大的那个提案所设定的值和提案号mmax\",{\"1\":{\"215\":1}}],[\"回复\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"573\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"624\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"占坑一般是使用\",{\"1\":{\"727\":1}}],[\"占着茅坑不拉屎\",{\"1\":{\"621\":1}}],[\"占着茅坑不拉屎的多了可能会导致坑位不够用\",{\"1\":{\"387\":1}}],[\"占资源少\",{\"1\":{\"598\":1}}],[\"占位\",{\"1\":{\"450\":1}}],[\"占位符需要和参数一一对应\",{\"1\":{\"433\":1}}],[\"占用过高怎么排查\",{\"0\":{\"414\":1}}],[\"占用部分资源的线程进一步申请其他资源时\",{\"1\":{\"342\":1,\"648\":1}}],[\"占用的资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"垃圾收集的压力就降低很多\",{\"1\":{\"408\":1}}],[\"垃圾收集器的选择需要权衡的点还是比较多的\",{\"1\":{\"407\":1}}],[\"垃圾收集器应该如何选择\",{\"0\":{\"407\":1}}],[\"垃圾收集器\",{\"1\":{\"406\":1}}],[\"垃圾收集器了解吗\",{\"0\":{\"404\":1}}],[\"垃圾收集器就永远不会回收掉被引用的对象\",{\"1\":{\"392\":1}}],[\"垃圾收集算法\",{\"1\":{\"401\":1}}],[\"垃圾收集算法主要有三种\",{\"1\":{\"395\":1}}],[\"垃圾收集算法了解吗\",{\"0\":{\"395\":1}}],[\"垃圾收集时移动对象是非常普遍的行为\",{\"1\":{\"386\":1}}],[\"垃圾回收算法等等\",{\"1\":{\"417\":1}}],[\"垃圾回收器依然没有回收完\",{\"1\":{\"412\":1}}],[\"垃圾回收就是古代的秋后问斩\",{\"1\":{\"393\":1}}],[\"垃圾回收\",{\"1\":{\"272\":1}}],[\"访问协议\",{\"1\":{\"836\":1}}],[\"访问\",{\"1\":{\"791\":1}}],[\"访问其它节点的速度就越快\",{\"1\":{\"732\":1}}],[\"访问二级缓存\",{\"1\":{\"704\":1}}],[\"访问计数器\",{\"1\":{\"658\":1}}],[\"访问分页系统中内存数据需要两次的内存访问\",{\"1\":{\"653\":1}}],[\"访问正常网站服务器\",{\"1\":{\"615\":1}}],[\"访问一个安全受限页面的请求来自于同一个网站\",{\"1\":{\"613\":1}}],[\"访问中间件和访问数据库没有区别\",{\"1\":{\"526\":1}}],[\"访问到堆中对象的具体位置\",{\"1\":{\"386\":1}}],[\"访问修饰符\",{\"0\":{\"250\":1}}],[\"考虑到\",{\"1\":{\"381\":1}}],[\"考虑github国外网站比较慢\",{\"1\":{\"106\":1}}],[\"譬如把自己\",{\"1\":{\"393\":1}}],[\"譬如\",{\"1\":{\"381\":1}}],[\"收藏\",{\"0\":{\"896\":1}}],[\"收的一个模型\",{\"1\":{\"769\":1}}],[\"收\",{\"1\":{\"743\":1,\"746\":1}}],[\"收发客户消息是不会阻塞的\",{\"1\":{\"672\":1}}],[\"收发确认函\",{\"1\":{\"612\":1}}],[\"收发邮件\",{\"1\":{\"597\":1}}],[\"收集日志数据\",{\"1\":{\"877\":1}}],[\"收集齐的垃圾收集分为四步\",{\"1\":{\"403\":1}}],[\"收集器设置\",{\"1\":{\"412\":1}}],[\"收集器能够对扮演不同角色的\",{\"1\":{\"404\":1}}],[\"收集器是垃圾收集器的一个颠覆性的产物\",{\"1\":{\"401\":1,\"404\":1}}],[\"收集器是一种以获取最短回收停顿时间为目标的收集器\",{\"1\":{\"401\":1}}],[\"收集器是一款新生代收集器\",{\"1\":{\"401\":1}}],[\"收集器是最基础\",{\"1\":{\"401\":1}}],[\"收集器运行示意图如下\",{\"1\":{\"401\":1,\"403\":1}}],[\"收集器的运行过程大致可划分为以下四个步骤\",{\"1\":{\"404\":1}}],[\"收集器的运行过程如图\",{\"1\":{\"401\":1}}],[\"收集器的垃圾收集过程吗\",{\"0\":{\"403\":1}}],[\"收集器的老年代版本\",{\"1\":{\"401\":2}}],[\"收集器的多线程并行版本\",{\"1\":{\"401\":1}}],[\"收集器实质上是\",{\"1\":{\"401\":1}}],[\"收集器\",{\"1\":{\"401\":3,\"406\":1}}],[\"收集器会有这种行为\",{\"1\":{\"397\":1}}],[\"收集器会有单独收集老年代的行为\",{\"1\":{\"397\":1}}],[\"收集整个\",{\"1\":{\"397\":1}}],[\"收购\",{\"1\":{\"381\":1}}],[\"收到命令的sentinel节点\",{\"1\":{\"689\":1}}],[\"收到后\",{\"1\":{\"609\":1}}],[\"收到了\",{\"1\":{\"592\":1}}],[\"收到了leader的消息\",{\"1\":{\"222\":1}}],[\"收到这个重传的\",{\"1\":{\"576\":1}}],[\"收到且没有问题\",{\"1\":{\"569\":1}}],[\"收到\",{\"1\":{\"345\":1,\"589\":1,\"609\":1}}],[\"客服小姐姐\",{\"1\":{\"806\":2}}],[\"客服中转\",{\"1\":{\"806\":1}}],[\"客观下线\",{\"1\":{\"688\":1}}],[\"客观下线就是超过一定数量的哨兵节点认为主节点有问题\",{\"1\":{\"688\":1}}],[\"客观上使用永久代来实现方法区的决定的设计导致了\",{\"1\":{\"381\":1}}],[\"客户已主动与服务器建立了\",{\"1\":{\"577\":1}}],[\"客户端库\",{\"1\":{\"868\":1}}],[\"客户端调用远程方法并等待结果\",{\"1\":{\"845\":1}}],[\"客户端定时向服务端发起请求\",{\"1\":{\"843\":1}}],[\"客户端可以使用负载均衡算法选择其中一个进行调用\",{\"1\":{\"837\":1}}],[\"客户端可以同时发送多个请求\",{\"1\":{\"558\":1}}],[\"客户端通过向注册中心查询特定服务的注册信息\",{\"1\":{\"834\":1}}],[\"客户端负载均衡\",{\"1\":{\"830\":1}}],[\"客户端怎么访问\",{\"1\":{\"824\":1}}],[\"客户端怎么去校验证书的合法性\",{\"0\":{\"564\":1}}],[\"客户端耗时增加\",{\"1\":{\"719\":1}}],[\"客户端一次批量操作会涉及多次网络操作\",{\"1\":{\"713\":1}}],[\"客户端其实是距离key\",{\"1\":{\"710\":1}}],[\"客户端在初始化时\",{\"1\":{\"687\":1}}],[\"客户端在发送完最后一个\",{\"1\":{\"576\":1}}],[\"客户端向服务端发送一次请求\",{\"1\":{\"816\":1,\"817\":1}}],[\"客户端向服务端发送\",{\"1\":{\"575\":1}}],[\"客户端向服务器发起请求时\",{\"1\":{\"566\":1}}],[\"客户端接收到来自服务器端的关闭请求\",{\"1\":{\"574\":1}}],[\"客户端接收到这个确认包之后\",{\"1\":{\"574\":1}}],[\"客户端会继续重传\",{\"1\":{\"570\":1}}],[\"客户端有没有收到服务器\",{\"1\":{\"569\":1}}],[\"客户端进入\",{\"1\":{\"568\":1,\"574\":1}}],[\"客户端就会使用\",{\"1\":{\"578\":1}}],[\"客户端就进入\",{\"1\":{\"568\":1}}],[\"客户端就把\",{\"1\":{\"566\":1}}],[\"客户端端发送连接请求\",{\"1\":{\"568\":1}}],[\"客户端和服务器都正常进入到\",{\"1\":{\"576\":1}}],[\"客户端和服务端都处于\",{\"1\":{\"568\":1}}],[\"客户端和浏览器都可以同时发送多个请求或回应\",{\"1\":{\"558\":1}}],[\"客户端无法使用\",{\"1\":{\"566\":1}}],[\"客户端请求经过负载均衡\",{\"1\":{\"566\":1}}],[\"客户端关闭或者\",{\"1\":{\"566\":1}}],[\"客户端浏览器再次访问时只需要从该\",{\"1\":{\"566\":1}}],[\"客户端浏览器访问服务器的时候\",{\"1\":{\"566\":1}}],[\"客户端校验服务端的数字证书的过程\",{\"1\":{\"564\":1}}],[\"客户端收到服务端的确认之后\",{\"1\":{\"568\":1}}],[\"客户端收到后\",{\"1\":{\"563\":1}}],[\"客户端收到数字证书之后\",{\"1\":{\"563\":1}}],[\"客户端将公钥加密后的密钥发送到服务器\",{\"1\":{\"563\":1}}],[\"客户端发送请求\",{\"1\":{\"845\":1}}],[\"客户端发送确认报文\",{\"1\":{\"574\":1}}],[\"客户端发送释放连接报文\",{\"1\":{\"574\":1}}],[\"客户端发送\",{\"1\":{\"573\":1}}],[\"客户端发送的连接请求会注册到多路复用器上\",{\"1\":{\"280\":1}}],[\"客户端发起pull请求\",{\"1\":{\"843\":1}}],[\"客户端发起\",{\"1\":{\"563\":1}}],[\"客户端重定向的\",{\"1\":{\"556\":1}}],[\"客户端错误状态码\",{\"1\":{\"551\":1}}],[\"客户端\",{\"1\":{\"472\":1,\"710\":1,\"769\":1,\"806\":2}}],[\"老古董\",{\"1\":{\"741\":1}}],[\"老婆顺利地生了个带把的大胖小子\",{\"1\":{\"568\":1}}],[\"老张风风火火地赶回家\",{\"1\":{\"568\":1}}],[\"老张\",{\"1\":{\"568\":1}}],[\"老张一听\",{\"1\":{\"568\":1}}],[\"老张唉\",{\"1\":{\"568\":1}}],[\"老张和老王是邻居\",{\"1\":{\"568\":1}}],[\"老王一听\",{\"1\":{\"568\":1}}],[\"老王老王\",{\"1\":{\"568\":1}}],[\"老王\",{\"1\":{\"568\":1}}],[\"老王累的汗流浃背\",{\"1\":{\"402\":1}}],[\"老年代用的是parallel\",{\"1\":{\"406\":1}}],[\"老年代如果放不下的话都会触发\",{\"1\":{\"399\":1}}],[\"老年代内存使用率过高\",{\"1\":{\"399\":1}}],[\"老年代空间不足\",{\"1\":{\"399\":1}}],[\"老年代收集\",{\"1\":{\"397\":1}}],[\"老年代使用标记\",{\"1\":{\"395\":1}}],[\"老年代\",{\"1\":{\"379\":1,\"404\":1}}],[\"老三说up你该更了\",{\"1\":{\"663\":1}}],[\"老三不干别的\",{\"1\":{\"663\":1}}],[\"老三关注了很多up主\",{\"1\":{\"663\":1}}],[\"老三急了\",{\"1\":{\"353\":1}}],[\"老三一看\",{\"1\":{\"353\":1,\"663\":1}}],[\"老三去排队区排队\",{\"1\":{\"353\":1}}],[\"老三去办业务\",{\"1\":{\"353\":1}}],[\"老三发现up没更\",{\"1\":{\"663\":2}}],[\"老三发现没有空闲的窗口\",{\"1\":{\"353\":2}}],[\"老三发现有空间的在营业的窗口\",{\"1\":{\"353\":1}}],[\"几十张手绘图\",{\"1\":{\"619\":1}}],[\"几个常用的\",{\"1\":{\"551\":1}}],[\"几个阿姨同时打菜\",{\"1\":{\"298\":1}}],[\"几亿条数据\",{\"1\":{\"531\":1}}],[\"几乎所有的包括hibernate\",{\"1\":{\"442\":1}}],[\"几乎\",{\"1\":{\"379\":1}}],[\"动态配置管理\",{\"1\":{\"836\":1,\"841\":1}}],[\"动态\",{\"1\":{\"835\":1}}],[\"动态扩缩容\",{\"1\":{\"834\":1}}],[\"动态创建一个符合目标类实现的接口的实例\",{\"1\":{\"806\":1}}],[\"动态分配\",{\"1\":{\"605\":1}}],[\"动态主机配置协议\",{\"1\":{\"605\":1}}],[\"动态代理创建代理\",{\"1\":{\"812\":1}}],[\"动态代理工厂\",{\"1\":{\"806\":1}}],[\"动态代理实现\",{\"1\":{\"806\":2}}],[\"动态代理是使用字节码处理框架\",{\"1\":{\"806\":1}}],[\"动态代理就没有这个限制\",{\"1\":{\"806\":1}}],[\"动态代理主要有两种方式\",{\"1\":{\"806\":1}}],[\"动态代理和\",{\"0\":{\"806\":1},\"1\":{\"806\":1}}],[\"动态代理\",{\"1\":{\"450\":1,\"804\":1,\"806\":4,\"812\":2}}],[\"动态生成表名\",{\"1\":{\"434\":1}}],[\"动态对象年龄判定\",{\"1\":{\"400\":1}}],[\"动态连接等\",{\"1\":{\"379\":1}}],[\"动画\",{\"0\":{\"23\":1,\"25\":1}}],[\"动画片段用于高亮或显隐幻灯片中的元素\",{\"1\":{\"21\":1}}],[\"动画片段\",{\"0\":{\"20\":1,\"21\":1,\"22\":1,\"24\":1,\"26\":1,\"28\":1}}],[\"负载均衡和限流等操作\",{\"1\":{\"864\":1}}],[\"负载均衡等\",{\"1\":{\"864\":1}}],[\"负载均衡等功能\",{\"1\":{\"864\":1}}],[\"负载均衡器会选择当前连接数最少的服务器进行请求分配\",{\"1\":{\"851\":1}}],[\"负载均衡器按照事先定义的顺序选择下一个服务器\",{\"1\":{\"851\":1}}],[\"负载均衡是通过集成ribbon来实现的\",{\"1\":{\"850\":1}}],[\"负载均衡\",{\"1\":{\"614\":1,\"682\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"834\":1,\"846\":1,\"863\":1}}],[\"负载因子决定元素个数达到多少时候扩容\",{\"1\":{\"173\":1}}],[\"负责将请求转发到匹配的路由上\",{\"1\":{\"865\":1}}],[\"负责消费消息\",{\"1\":{\"751\":1}}],[\"负责存储和转发消息\",{\"1\":{\"749\":1}}],[\"负责最基础的功能支撑\",{\"1\":{\"449\":1}}],[\"负责具体的sql查找\",{\"1\":{\"449\":1}}],[\"负责加载本身的目录下的\",{\"1\":{\"429\":1}}],[\"负责计算1+2+3+4\",{\"1\":{\"373\":1}}],[\"阈值\",{\"1\":{\"373\":1}}],[\"阈值为什么要选8呢\",{\"1\":{\"172\":1}}],[\"干完活的线程不能让它空下来\",{\"1\":{\"373\":1}}],[\"求\",{\"1\":{\"591\":1}}],[\"求出子问题的解\",{\"1\":{\"373\":1}}],[\"求爱理搭理\",{\"1\":{\"346\":1}}],[\"美团技术博客\",{\"1\":{\"369\":1}}],[\"监听微服务的日志输出\",{\"1\":{\"877\":1}}],[\"监听配置变化\",{\"1\":{\"842\":1}}],[\"监听到连接请求\",{\"1\":{\"555\":1}}],[\"监听线程池参数变化\",{\"1\":{\"368\":1}}],[\"监控与日志\",{\"1\":{\"863\":1}}],[\"监控流量\",{\"1\":{\"859\":1}}],[\"监控中心等组件\",{\"1\":{\"846\":1}}],[\"监控和扩展能力\",{\"1\":{\"864\":1}}],[\"监控和故障处理等方面\",{\"1\":{\"829\":1}}],[\"监控和容错机制的要求更高\",{\"1\":{\"829\":1}}],[\"监控和维护等方面的复杂性\",{\"1\":{\"829\":1}}],[\"监控和自动故障转移功能\",{\"1\":{\"687\":1}}],[\"监控网络使用\",{\"1\":{\"410\":1}}],[\"监控\",{\"1\":{\"410\":1,\"687\":1}}],[\"监控内存和\",{\"1\":{\"410\":1}}],[\"监视器功能都是使⽤到了链表来实现\",{\"1\":{\"729\":1}}],[\"监视器锁规则\",{\"1\":{\"320\":1}}],[\"监视器相当于就是锁的概念\",{\"1\":{\"272\":1}}],[\"记录压缩列表包含的节点数量\",{\"1\":{\"733\":1}}],[\"记录压缩列表表尾节点距离压缩列表的起始地址有多少字节\",{\"1\":{\"733\":1}}],[\"记录整个压缩列表占用的内存字节数\",{\"1\":{\"733\":1}}],[\"记录每个部分的key\",{\"1\":{\"719\":1}}],[\"记录着文件名与\",{\"1\":{\"660\":1}}],[\"记录此\",{\"1\":{\"566\":1}}],[\"记录\",{\"1\":{\"566\":1}}],[\"记录自己的\",{\"1\":{\"527\":1}}],[\"记录了对数据的修改操作\",{\"1\":{\"874\":1}}],[\"记录了对数据页的物理更改\",{\"1\":{\"519\":1}}],[\"记录了事务发生之前的数据\",{\"1\":{\"519\":1}}],[\"记录锁就是直接锁定某行记录\",{\"1\":{\"513\":1}}],[\"记录锁\",{\"1\":{\"513\":1}}],[\"记录的是关于每个页\",{\"1\":{\"480\":1}}],[\"记录的是关于一个事务的具体操作内容\",{\"1\":{\"480\":1}}],[\"记录的内容不同\",{\"1\":{\"480\":1}}],[\"记录的任务数量为0\",{\"1\":{\"367\":1}}],[\"记录下栈上和寄存器里哪些位置是引用\",{\"1\":{\"402\":1}}],[\"记录到\",{\"1\":{\"402\":1}}],[\"记录上哪些内存块是可用的\",{\"1\":{\"383\":1}}],[\"记录线程获取锁的次数\",{\"1\":{\"325\":1}}],[\"周期性执行任务的场景\",{\"1\":{\"365\":1}}],[\"极端情况下热点key甚至会超过\",{\"1\":{\"710\":1}}],[\"极端情况下会创建过多的线程\",{\"1\":{\"364\":1}}],[\"极好地实现了面向对象理论\",{\"1\":{\"231\":1}}],[\"尽管已经不再更新\",{\"1\":{\"858\":1}}],[\"尽它有很多优点\",{\"1\":{\"829\":1}}],[\"尽快把积压的消息消费玩\",{\"1\":{\"758\":1}}],[\"尽力而为的数据包传输服务\",{\"1\":{\"602\":1}}],[\"尽可能使用同一个索引既满足排序又用于查找行\",{\"1\":{\"491\":1}}],[\"尽可能的少的分配线程\",{\"1\":{\"363\":1}}],[\"尽量避免在压力较大的主库上增加从库\",{\"1\":{\"720\":1}}],[\"尽量使用\",{\"1\":{\"490\":1}}],[\"尽量保证了数据的强一致\",{\"1\":{\"202\":1}}],[\"确实没有设置过期时间\",{\"1\":{\"712\":1}}],[\"确切地说\",{\"1\":{\"580\":1}}],[\"确认报⽂丢了\",{\"1\":{\"594\":1}}],[\"确认报⽂\",{\"1\":{\"593\":1}}],[\"确认报文后进入\",{\"1\":{\"578\":1}}],[\"确认到来的时候\",{\"1\":{\"586\":1}}],[\"确认该数据已收到\",{\"1\":{\"584\":1}}],[\"确认\",{\"1\":{\"583\":2,\"587\":1}}],[\"确认应答都丢失了\",{\"1\":{\"594\":1}}],[\"确认应答后\",{\"1\":{\"586\":2}}],[\"确认应答\",{\"1\":{\"581\":2}}],[\"确认执行业务\",{\"1\":{\"204\":1}}],[\"确保只有经过身份验证的客户端才能访问后端服务\",{\"1\":{\"863\":1}}],[\"确保服务恢复正常后继续使用\",{\"1\":{\"855\":1}}],[\"确保服务之间的协调和一致性\",{\"1\":{\"829\":1}}],[\"确保系统稳定可用\",{\"1\":{\"855\":1}}],[\"确保各个服务都具备高可用性\",{\"1\":{\"853\":1}}],[\"确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取\",{\"1\":{\"542\":1}}],[\"确保数据的持久性\",{\"1\":{\"519\":1}}],[\"确保数据的原子性\",{\"1\":{\"519\":1}}],[\"确保每个事务都有自己的数据版本\",{\"1\":{\"519\":1}}],[\"确保cpu在长期被工作线程使用的情况下\",{\"1\":{\"363\":1}}],[\"确定在环上的位置\",{\"1\":{\"694\":1}}],[\"确定是不是有消耗资源的\",{\"1\":{\"538\":1}}],[\"确定是\",{\"1\":{\"538\":1}}],[\"确定旧库没有请求之后\",{\"1\":{\"532\":1}}],[\"确定执行的方案\",{\"1\":{\"473\":1}}],[\"确定要拦截的方法\",{\"1\":{\"453\":1}}],[\"确定要拦截的对象\",{\"1\":{\"453\":2}}],[\"核心\",{\"1\":{\"783\":1,\"819\":1}}],[\"核心类库\",{\"1\":{\"423\":1}}],[\"核心线程数为0\",{\"1\":{\"364\":1}}],[\"核心线程数为1\",{\"1\":{\"362\":1}}],[\"核心线程数和最大线程数大小一样\",{\"1\":{\"363\":1}}],[\"核心思想是即便不能达到强一致性\",{\"1\":{\"193\":1}}],[\"阿里云\",{\"1\":{\"831\":1}}],[\"阿里开源诊断工具\",{\"1\":{\"411\":1}}],[\"阿里巴巴开源的流量控制和熔断降级组件\",{\"1\":{\"857\":1}}],[\"阿里巴巴开源的服务发现\",{\"1\":{\"841\":1}}],[\"阿里巴巴\",{\"1\":{\"360\":1,\"490\":1,\"836\":1}}],[\"阿姨给这个打一勺\",{\"1\":{\"298\":1}}],[\"拆分成多个包进行发送\",{\"1\":{\"595\":1}}],[\"拆分可以提升吞吐量\",{\"1\":{\"359\":1}}],[\"拆箱\",{\"1\":{\"240\":2}}],[\"获得可用的服务实例列表\",{\"1\":{\"834\":1}}],[\"获得堆内存的\",{\"1\":{\"413\":1}}],[\"获得了\",{\"1\":{\"381\":1}}],[\"获得当前cpu核心数代码如下\",{\"1\":{\"359\":1}}],[\"获取认证信息的逻辑\",{\"1\":{\"849\":1}}],[\"获取自动配置类路径\",{\"1\":{\"820\":1}}],[\"获取自动配置类的路径\",{\"1\":{\"820\":1}}],[\"获取需要自动装配的所有配置类\",{\"1\":{\"820\":1}}],[\"获取需要操作的数据\",{\"1\":{\"708\":1}}],[\"获取所有需要自动装配的配置类的路径\",{\"1\":{\"820\":1}}],[\"获取注解的属性\",{\"1\":{\"820\":1}}],[\"获取注入类的方法是\",{\"1\":{\"820\":1}}],[\"获取bean\",{\"1\":{\"788\":1}}],[\"获取单例bean\",{\"1\":{\"788\":1}}],[\"获取该消费组下消费者id列表\",{\"1\":{\"777\":1}}],[\"获取该topic主题下的消息消费队列集合\",{\"1\":{\"777\":1}}],[\"获取字符串长度复杂度高\",{\"1\":{\"730\":1}}],[\"获取了子进程信息后才会释放\",{\"1\":{\"638\":1}}],[\"获取要劫持的域名信息\",{\"1\":{\"612\":1}}],[\"获取mapper\",{\"1\":{\"450\":1}}],[\"获取配置信息\",{\"1\":{\"842\":1}}],[\"获取配置这一步经过了几步转化\",{\"1\":{\"448\":1}}],[\"获取配置\",{\"1\":{\"448\":1}}],[\"获取队列中任务来执行\",{\"1\":{\"370\":1}}],[\"获取相应的线程池实例来修改线程池的参数\",{\"1\":{\"368\":1}}],[\"获取当前的latch数量\",{\"1\":{\"345\":1}}],[\"获取当前线程\",{\"1\":{\"310\":1}}],[\"获取失败的话\",{\"1\":{\"332\":1}}],[\"获取锁操作\",{\"1\":{\"332\":1}}],[\"获取不到才会到等待队列的队尾等待\",{\"1\":{\"332\":1}}],[\"获取不到同步状态\",{\"1\":{\"331\":1}}],[\"获取不到锁的请求一般只能报失败\",{\"1\":{\"225\":1}}],[\"获取state的方式分为两种\",{\"1\":{\"331\":1}}],[\"获取threadlocalmap\",{\"1\":{\"310\":1}}],[\"获取到注解的属性\",{\"1\":{\"820\":1}}],[\"获取到\",{\"1\":{\"302\":1}}],[\"获取\",{\"1\":{\"258\":1,\"325\":1,\"748\":1,\"788\":1,\"790\":1,\"801\":1,\"813\":1}}],[\"获取节点\",{\"1\":{\"165\":1}}],[\"获取新的哈希值\",{\"1\":{\"165\":1}}],[\"获取一个新的哈希值\",{\"1\":{\"164\":1}}],[\"获取int最小值\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"获取int最大值\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"跑完再彻底停止线程池\",{\"1\":{\"358\":1}}],[\"尝试将正在跑的任务interrupt中断\",{\"1\":{\"358\":1}}],[\"尝试待执行的业务\",{\"1\":{\"204\":1}}],[\"忽略队列里等待的任务\",{\"1\":{\"358\":1}}],[\"事件驱动模型就是观察者模式很经典的一个应用\",{\"1\":{\"785\":1}}],[\"事件并在\",{\"1\":{\"527\":1}}],[\"事实上当没有携带数据的\",{\"1\":{\"584\":1}}],[\"事实上在业务服务器看来\",{\"1\":{\"526\":1}}],[\"事实上不一定\",{\"1\":{\"358\":1}}],[\"事后要注意仔细观察\",{\"1\":{\"369\":1}}],[\"事中结合监控告警机制\",{\"1\":{\"369\":1}}],[\"事务发起方向事务协调器发送预提交请求\",{\"1\":{\"872\":1}}],[\"事务发起方将全局事务id和分支事务id发送给各个参与者\",{\"1\":{\"872\":1}}],[\"事务发起方是指发起分布式事务的应用程序或服务\",{\"1\":{\"872\":1}}],[\"事务发起方\",{\"1\":{\"872\":1}}],[\"事务同样会回滚\",{\"1\":{\"813\":1}}],[\"事务拦截器\",{\"1\":{\"813\":1}}],[\"事务拦截器transactioninterceptor在invoke方法中\",{\"1\":{\"812\":1}}],[\"事务提交\",{\"1\":{\"812\":1}}],[\"事务提交时\",{\"1\":{\"483\":1}}],[\"事务增强对该接口的实现为transactioninterceptor\",{\"1\":{\"812\":1}}],[\"事务增强\",{\"1\":{\"811\":1}}],[\"事务传播实际上是会失效的\",{\"1\":{\"811\":1}}],[\"事务传播机制是使用简单的\",{\"1\":{\"811\":1}}],[\"事务为什么不支持回滚\",{\"1\":{\"724\":1}}],[\"事务是不支持回滚的\",{\"1\":{\"724\":1}}],[\"事务写阻塞其他事务写\",{\"1\":{\"522\":1}}],[\"事务读不加锁\",{\"1\":{\"522\":1}}],[\"事务的传播机制说的是\",{\"1\":{\"811\":1}}],[\"事务的种类\",{\"0\":{\"809\":1}}],[\"事务的本质其实就是数据库对事务的支持\",{\"1\":{\"808\":1}}],[\"事务的问题\",{\"1\":{\"534\":1}}],[\"事务的各个隔离级别都是如何实现的\",{\"0\":{\"522\":1}}],[\"事务的四个隔离级别\",{\"1\":{\"520\":1}}],[\"事务的四大特性说一下\",{\"0\":{\"518\":1}}],[\"事务的隔离级别有哪些\",{\"0\":{\"520\":1}}],[\"事务不会看到其他事务所做的更改\",{\"1\":{\"519\":1}}],[\"事务不会查看到中间状态的数据\",{\"1\":{\"519\":1}}],[\"事务可能会看到其他未提交事务所做的更改\",{\"1\":{\"519\":1}}],[\"事务查看数据时\",{\"1\":{\"519\":1}}],[\"事务之间是相互隔离的\",{\"1\":{\"518\":1}}],[\"事务作为一个整体被执行\",{\"1\":{\"518\":1}}],[\"事务在从数据库中取数据时\",{\"1\":{\"515\":1}}],[\"事务\",{\"0\":{\"517\":1,\"808\":1},\"1\":{\"513\":3,\"521\":3,\"523\":3,\"668\":1,\"726\":1,\"784\":1}}],[\"事务支持\",{\"1\":{\"477\":1}}],[\"事务管理\",{\"1\":{\"449\":1,\"804\":1}}],[\"事务管理者\",{\"1\":{\"208\":1}}],[\"事务管理器还负责与事务协调器进行通信\",{\"1\":{\"871\":1}}],[\"事务管理器负责全局事务的管理和控制\",{\"1\":{\"871\":1}}],[\"事务管理器在整个流程中扮演的角色很关键\",{\"1\":{\"202\":1}}],[\"事务管理器要求每个涉及到事务的数据库预提交\",{\"1\":{\"202\":1}}],[\"事务管理器\",{\"1\":{\"202\":1,\"871\":2}}],[\"事务协调器向参与者发送回滚请求\",{\"1\":{\"874\":1}}],[\"事务协调器向各个资源管理器发送预提交请求\",{\"1\":{\"871\":1}}],[\"事务协调器接收到参与者的提交或回滚结果后\",{\"1\":{\"872\":1}}],[\"事务协调器接收到全局事务的开始请求后\",{\"1\":{\"872\":1}}],[\"事务协调器发送回滚请求给参与者\",{\"1\":{\"872\":1}}],[\"事务协调器发送真正的提交请求给参与者\",{\"1\":{\"872\":1}}],[\"事务协调器发出回滚请求\",{\"1\":{\"871\":1}}],[\"事务协调器发出真正的提交请求\",{\"1\":{\"871\":1}}],[\"事务协调器根据参与者反馈的结果进行判断\",{\"1\":{\"872\":1}}],[\"事务协调器将预提交请求发送给各个参与者\",{\"1\":{\"872\":1}}],[\"事务协调器创建全局事务记录\",{\"1\":{\"872\":1}}],[\"事务协调器还负责记录和管理事务的全局事务\",{\"1\":{\"871\":1}}],[\"事务协调器负责协调和管理分布式事务的整个过程\",{\"1\":{\"871\":1}}],[\"事务协调器\",{\"1\":{\"871\":2}}],[\"事务协调器要求每个数据库提交数据\",{\"1\":{\"202\":1}}],[\"事务协调者\",{\"1\":{\"208\":1}}],[\"事务进行的所有操作要么全部提交\",{\"1\":{\"200\":1}}],[\"停止接收外部submit的任务\",{\"1\":{\"358\":1}}],[\"停车场的车位是有限的\",{\"1\":{\"348\":1}}],[\"优势\",{\"1\":{\"730\":1}}],[\"优缺点\",{\"1\":{\"641\":1}}],[\"优化过的数据结构\",{\"1\":{\"671\":1}}],[\"优化答案\",{\"1\":{\"622\":1}}],[\"优化用户体验\",{\"1\":{\"622\":1}}],[\"优化体验\",{\"1\":{\"622\":1}}],[\"优化器估计使用全表扫描要比使用索引快\",{\"1\":{\"498\":1}}],[\"优化的利器\",{\"1\":{\"493\":1}}],[\"优化子查询\",{\"1\":{\"490\":1}}],[\"优化方案\",{\"1\":{\"488\":1}}],[\"优化\",{\"0\":{\"484\":1,\"490\":1,\"492\":1},\"1\":{\"416\":1,\"472\":1}}],[\"优先加载aof文件\",{\"1\":{\"679\":1}}],[\"优先级越高\",{\"1\":{\"804\":1}}],[\"优先级调度\",{\"1\":{\"640\":1}}],[\"优先级队列\",{\"1\":{\"356\":1}}],[\"优先收集价值高的\",{\"1\":{\"404\":1}}],[\"优点是不需要在业务逻辑代码中掺杂事务管理的代码\",{\"1\":{\"809\":1}}],[\"优点是运算速度较快\",{\"1\":{\"616\":1}}],[\"优点\",{\"1\":{\"202\":1,\"204\":1,\"405\":1,\"677\":2,\"741\":3}}],[\"容错机制\",{\"1\":{\"846\":1,\"847\":1}}],[\"容错\",{\"1\":{\"830\":1}}],[\"容易部署和使用\",{\"1\":{\"741\":1}}],[\"容灾性好\",{\"1\":{\"677\":1}}],[\"容量有限\",{\"1\":{\"641\":1}}],[\"容量如何规划\",{\"1\":{\"534\":1}}],[\"容量规划\",{\"1\":{\"534\":1}}],[\"容量可以选择进行设置\",{\"1\":{\"356\":1}}],[\"容器中\",{\"1\":{\"820\":1}}],[\"容器在初始化每个单例\",{\"1\":{\"812\":1}}],[\"容器来管理\",{\"1\":{\"807\":1}}],[\"容器会为目标对象动态地创建一个代理对象\",{\"1\":{\"804\":1}}],[\"容器仅存在一个\",{\"1\":{\"797\":1}}],[\"容器就可以按照某种规则对容器中的\",{\"1\":{\"796\":1}}],[\"容器就给我们送来什么\",{\"1\":{\"787\":1}}],[\"容器知道所有\",{\"1\":{\"796\":1}}],[\"容器需要依赖某些工具类\",{\"1\":{\"792\":1}}],[\"容器启动开始\",{\"1\":{\"792\":1}}],[\"容器启动阶段和bean\",{\"1\":{\"792\":1}}],[\"容器启动阶段会干什么吗\",{\"0\":{\"792\":1}}],[\"容器工作的过程\",{\"1\":{\"792\":1}}],[\"容器本质是一个大工厂\",{\"1\":{\"785\":1}}],[\"容器单独提供一个\",{\"1\":{\"429\":1}}],[\"容器\",{\"1\":{\"429\":1,\"784\":1,\"807\":1}}],[\"容器八股文\",{\"1\":{\"150\":1}}],[\"想要插入一个数据\",{\"1\":{\"513\":1}}],[\"想要实现热部署可以分以下三个步骤\",{\"1\":{\"428\":1}}],[\"想实现自己的拒绝策略\",{\"1\":{\"355\":1}}],[\"想结衣结衣不依\",{\"1\":{\"346\":1}}],[\"帮助开发人员和运维人员进行故障排查和性能优化\",{\"1\":{\"863\":1}}],[\"帮助记忆\",{\"1\":{\"355\":1}}],[\"帮助你控制注入图片或视频的大小\",{\"1\":{\"17\":1}}],[\"维护困难\",{\"1\":{\"828\":1}}],[\"维护一个目标对象\",{\"1\":{\"806\":2}}],[\"维护\",{\"1\":{\"542\":1,\"748\":1}}],[\"维护索引文件需要成本\",{\"1\":{\"497\":1}}],[\"维护着等待执行的runnable对象\",{\"1\":{\"354\":1}}],[\"维持其统治\",{\"1\":{\"222\":1}}],[\"纳秒\",{\"1\":{\"354\":1}}],[\"天内及时处理\",{\"1\":{\"766\":1}}],[\"天后会被自动删除\",{\"1\":{\"766\":1}}],[\"天生为金融互联网领域而生\",{\"1\":{\"742\":1}}],[\"天\",{\"1\":{\"354\":1,\"766\":1}}],[\"排行榜\",{\"1\":{\"669\":1}}],[\"排它锁是阻塞的\",{\"1\":{\"512\":1}}],[\"排他锁\",{\"1\":{\"512\":1}}],[\"排查起来非常困难\",{\"1\":{\"867\":1}}],[\"排查过程\",{\"1\":{\"538\":1}}],[\"排查过程和排查内存泄漏过程类似\",{\"1\":{\"419\":1}}],[\"排查和解决起来没那么简单\",{\"1\":{\"516\":1}}],[\"排查死锁的一般步骤是这样的\",{\"1\":{\"516\":1}}],[\"排查指南\",{\"1\":{\"417\":1}}],[\"排队区就是等待队列\",{\"1\":{\"353\":1}}],[\"排序等操作\",{\"1\":{\"597\":1}}],[\"排序能力更强\",{\"1\":{\"504\":1}}],[\"排序和\",{\"1\":{\"497\":1}}],[\"排序优化\",{\"0\":{\"491\":1}}],[\"排序\",{\"1\":{\"294\":1,\"505\":1,\"534\":1}}],[\"六个窗口都满了\",{\"1\":{\"353\":1}}],[\"蚌埠住了\",{\"1\":{\"353\":1}}],[\"秒杀的时候流量疯狂怼进来\",{\"1\":{\"740\":1}}],[\"秒杀商品库存不存在\",{\"1\":{\"725\":1}}],[\"秒杀商品库存存在\",{\"1\":{\"725\":1}}],[\"秒之后锁会自动释放\",{\"1\":{\"727\":1}}],[\"秒级持久化\",{\"1\":{\"677\":1}}],[\"秒钟发送一次\",{\"1\":{\"577\":1}}],[\"秒后\",{\"1\":{\"463\":1}}],[\"秒输出\",{\"1\":{\"418\":1}}],[\"秒以内\",{\"1\":{\"407\":1}}],[\"秒或更长的停顿时间\",{\"1\":{\"407\":1}}],[\"秒的线程会被终止\",{\"1\":{\"364\":1}}],[\"秒\",{\"1\":{\"352\":1,\"354\":1}}],[\"节省了rtt\",{\"1\":{\"726\":1}}],[\"节省资源\",{\"1\":{\"351\":1}}],[\"节点的成员对象\",{\"1\":{\"732\":1}}],[\"节点的分值\",{\"1\":{\"732\":1}}],[\"节点按照分值⼤⼩排序\",{\"1\":{\"729\":1}}],[\"节点上保持写一个事务日志\",{\"1\":{\"770\":1}}],[\"节点上\",{\"1\":{\"713\":1}}],[\"节点握手是集群彼此通信的第一步\",{\"1\":{\"697\":1}}],[\"节点握手是指一批运行在集群模式下的节点通过gossip协议彼此通信\",{\"1\":{\"697\":1}}],[\"节点握手\",{\"1\":{\"697\":1}}],[\"节点数量至少为6个才能保证组成完整高可用的集群\",{\"1\":{\"697\":1}}],[\"节点取余分区\",{\"0\":{\"693\":1},\"1\":{\"693\":1}}],[\"节点本身不持有具体线程\",{\"1\":{\"331\":1}}],[\"节点内部的\",{\"1\":{\"331\":1}}],[\"节点类\",{\"1\":{\"310\":1}}],[\"节点之间可能会失去联系\",{\"1\":{\"192\":1}}],[\"节点重新hash获取位置\",{\"1\":{\"176\":1}}],[\"节点增减刚好在8附近\",{\"1\":{\"172\":1}}],[\"节点个数为8的情况\",{\"1\":{\"172\":1}}],[\"节点\",{\"1\":{\"162\":1,\"183\":1,\"509\":1,\"687\":1}}],[\"银行网站看到身份认证信息\",{\"1\":{\"613\":1}}],[\"银行流水b\",{\"1\":{\"349\":1}}],[\"银行流水a\",{\"1\":{\"349\":1}}],[\"银行转账\",{\"1\":{\"306\":1}}],[\"录入到excel之后\",{\"1\":{\"349\":1}}],[\"遗传算法里需要选出两个人作为交配对象\",{\"1\":{\"349\":1}}],[\"特别适合基于http的微服务调用\",{\"1\":{\"846\":1}}],[\"特别是不要启用内存快照做持久化\",{\"1\":{\"720\":1}}],[\"特别是公用资源有限的应用场景\",{\"1\":{\"348\":1}}],[\"特性的分布式文件系统\",{\"1\":{\"836\":1}}],[\"特性\",{\"0\":{\"782\":1},\"1\":{\"783\":1,\"836\":1}}],[\"特点\",{\"1\":{\"748\":1,\"831\":1,\"836\":1,\"857\":1}}],[\"特洛伊木马\",{\"1\":{\"611\":1}}],[\"特殊含义\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"届时\",{\"1\":{\"347\":1}}],[\"突破了\",{\"1\":{\"691\":1}}],[\"突破了select\",{\"1\":{\"664\":1}}],[\"突然发现了铃木爱理\",{\"1\":{\"346\":1}}],[\"突刺现象\",{\"1\":{\"227\":1}}],[\"然而\",{\"1\":{\"828\":1,\"864\":1}}],[\"然而主机在局域网中使用的\",{\"1\":{\"605\":1}}],[\"然而实际关闭连接过程是正常的\",{\"1\":{\"578\":1}}],[\"然而新垣结衣回应嫁给了星野源\",{\"1\":{\"346\":1}}],[\"然后实现自动装配\",{\"1\":{\"802\":1}}],[\"然后在程序的执行的合适的地方动态地植入这些代码并执行\",{\"1\":{\"804\":1}}],[\"然后在\",{\"1\":{\"784\":1}}],[\"然后在新副本上执行写操作\",{\"1\":{\"159\":1}}],[\"然后查看这些队列是否可以移除出processqueuetable缓存变量\",{\"1\":{\"777\":1}}],[\"然后提交到消息消费线程池后\",{\"1\":{\"777\":1}}],[\"然后返回真正的视图\",{\"1\":{\"816\":1}}],[\"然后返回producer数据已经发送成功\",{\"1\":{\"774\":1}}],[\"然后返回给\",{\"1\":{\"510\":1}}],[\"然后broker端使用同步或者异步的方式对消息刷盘持久化\",{\"1\":{\"771\":1}}],[\"然后主动拉取消息来消费\",{\"1\":{\"769\":1}}],[\"然后到\",{\"1\":{\"765\":1}}],[\"然后到了真正要被回收的时候\",{\"1\":{\"256\":1}}],[\"然后消费者就可以正常消费这些消息\",{\"1\":{\"764\":1}}],[\"然后producer\",{\"1\":{\"761\":1}}],[\"然后先用一些消费者把消费的数据丢到临时的topic\",{\"1\":{\"758\":1}}],[\"然后按照顺时针方向在环上\",{\"1\":{\"694\":1}}],[\"然后启动redis\",{\"1\":{\"679\":1}}],[\"然后epoll帮你监听哪些socket上有消息到达\",{\"1\":{\"672\":1}}],[\"然后去处理e和a\",{\"1\":{\"672\":1}}],[\"然后继续回到讲台上等\",{\"1\":{\"672\":1}}],[\"然后检查学生做的是否正确\",{\"1\":{\"672\":1}}],[\"然后⽤户态还需要再通过遍历的⽅法找到可读或可写的\",{\"1\":{\"664\":1}}],[\"然后调用\",{\"1\":{\"802\":1}}],[\"然后调用a\",{\"1\":{\"442\":1}}],[\"然后调⽤\",{\"1\":{\"664\":1}}],[\"然后每次置换链表头上的页面就行了\",{\"1\":{\"658\":1}}],[\"然后⽐较\",{\"1\":{\"658\":1}}],[\"然后从用户态内存复制到网络驱动的内核态内存\",{\"1\":{\"773\":1}}],[\"然后从磁盘中把该页调入主存中\",{\"1\":{\"658\":1}}],[\"然后从该合集出发\",{\"1\":{\"390\":1}}],[\"然后发出特定的软件中断\",{\"1\":{\"641\":1}}],[\"然后攻击主机对\",{\"1\":{\"614\":1}}],[\"然后给源主机发送一个\",{\"1\":{\"606\":1}}],[\"然后傻傻等到我回复之后再接着发下一句\",{\"1\":{\"583\":1}}],[\"然后对这些信息进⾏\",{\"1\":{\"564\":1}}],[\"然后是b\",{\"1\":{\"672\":1}}],[\"然后是\",{\"1\":{\"559\":1}}],[\"然后删除其中无用数据\",{\"1\":{\"536\":1}}],[\"然后利用代码来关联得到最终的结果\",{\"1\":{\"534\":1}}],[\"然后修改路由表就可以了\",{\"1\":{\"531\":1}}],[\"然后访问不同的数据库服务器\",{\"1\":{\"526\":1}}],[\"然后事务\",{\"1\":{\"521\":1}}],[\"然后由存储引擎通过判断索引是否符合\",{\"1\":{\"510\":1}}],[\"然后映射到对应的数据\",{\"1\":{\"496\":1}}],[\"然后告知执行器执行完成了\",{\"1\":{\"481\":1}}],[\"然后判断进行删除\",{\"1\":{\"719\":1}}],[\"然后判断\",{\"1\":{\"473\":1}}],[\"然后判断该槽位entry对象中的key是否和get的key一致\",{\"1\":{\"313\":1}}],[\"然后重写sql\",{\"1\":{\"454\":1}}],[\"然后重新执行整个阻塞队列\",{\"1\":{\"371\":1}}],[\"然后就返回结果\",{\"1\":{\"453\":1}}],[\"然后就一直点\",{\"1\":{\"413\":1}}],[\"然后用消息队列分配策略算法\",{\"1\":{\"777\":1}}],[\"然后用一个公共的服务获取订阅程序传来的信息\",{\"1\":{\"708\":1}}],[\"然后用客户端密钥对返回数据进行对称加密\",{\"1\":{\"563\":1}}],[\"然后用objectfactory提供的规则组装对象\",{\"1\":{\"448\":1}}],[\"然后用函数把这些步骤一步一步实现\",{\"1\":{\"247\":1}}],[\"然后分析\",{\"1\":{\"417\":1}}],[\"然后根据哈希值选择相应的后端服务器\",{\"1\":{\"851\":1}}],[\"然后根据得到的切面创建一个代理对象\",{\"1\":{\"812\":1}}],[\"然后根据\",{\"1\":{\"531\":1}}],[\"然后根据锁的地址找到持有锁的线程\",{\"1\":{\"414\":1}}],[\"然后根据找到对应进行里哪个线程占用\",{\"1\":{\"414\":1}}],[\"然后逐一跟进业务线程看了下代码\",{\"1\":{\"413\":1}}],[\"然后逐个调用线程的interrupt方法来中断线程\",{\"1\":{\"358\":1}}],[\"然后直接清理掉\",{\"1\":{\"396\":1}}],[\"然后直接清理掉边界以外的内存\",{\"1\":{\"395\":1}}],[\"然后直接返回\",{\"1\":{\"332\":1}}],[\"然后不断地去创建线程\",{\"1\":{\"388\":1}}],[\"然后设置当前锁的拥有者为当前线程\",{\"1\":{\"332\":1}}],[\"然后当前线程栈帧中增加一个锁记录第一部分\",{\"1\":{\"329\":1}}],[\"然后被阻塞在安全点的线程继续往下执行同步代码块\",{\"1\":{\"328\":1}}],[\"然后执行此进程\",{\"1\":{\"636\":1}}],[\"然后执行excute方法\",{\"1\":{\"450\":1}}],[\"然后执行\",{\"1\":{\"328\":1}}],[\"然后再重放增量\",{\"1\":{\"680\":1}}],[\"然后再返回\",{\"1\":{\"481\":1}}],[\"然后再给插件编写注解\",{\"1\":{\"453\":1}}],[\"然后再执行sql语句\",{\"1\":{\"435\":1}}],[\"然后再把已使用过的内存空间一次清理掉\",{\"1\":{\"395\":1}}],[\"然后再从主内存获取最新值\",{\"1\":{\"322\":1}}],[\"然后再次发起\",{\"1\":{\"222\":1}}],[\"然后table引用指向newtab\",{\"1\":{\"314\":1}}],[\"然后放到新的newtab\",{\"1\":{\"314\":1}}],[\"然后遍历老的table数组\",{\"1\":{\"314\":1}}],[\"然后还要根据条件判断size\",{\"1\":{\"314\":1}}],[\"然后和table数组长度减一\",{\"1\":{\"312\":1}}],[\"然后进行\",{\"1\":{\"731\":1}}],[\"然后进行相应的操作\",{\"1\":{\"306\":1}}],[\"然后进行各种操作\",{\"1\":{\"289\":1}}],[\"然后进行自增运算\",{\"1\":{\"245\":1}}],[\"然后获取到类\",{\"1\":{\"289\":1}}],[\"然后搞一些事情\",{\"1\":{\"287\":1}}],[\"然后\",{\"1\":{\"276\":1,\"564\":1,\"589\":1,\"777\":1}}],[\"然后选举结束\",{\"1\":{\"221\":1}}],[\"然后向接受者的某个超过半数的子集成员发送编号为mn的准备请求\",{\"1\":{\"215\":1}}],[\"然后将其发送到elasticsearch进行存储和索引\",{\"1\":{\"877\":1}}],[\"然后将其注册到feign的配置中\",{\"1\":{\"849\":1}}],[\"然后将缓存节点的\",{\"1\":{\"694\":1}}],[\"然后将各个查询结果填充到临时表中最后再来做查询\",{\"1\":{\"492\":1}}],[\"然后将这个分支事务纳入\",{\"1\":{\"208\":2}}],[\"然后将可用库存数量设置为库存剩余数量\",{\"1\":{\"204\":1}}],[\"然后通过一个定时任务轮询这些队列\",{\"1\":{\"764\":1}}],[\"然后通过一个线程池定期从队列中获取请求来执行\",{\"1\":{\"227\":1}}],[\"然后通过得到的结果再去查另一张表\",{\"1\":{\"534\":1}}],[\"然后通过轮询的方式去查询消息表\",{\"1\":{\"205\":1}}],[\"然后通过reentrantlock去操作而已\",{\"1\":{\"180\":1}}],[\"然后这个目录下面的节点就是我们需要获取锁的客户端\",{\"1\":{\"197\":1}}],[\"然后把视频亲自呈到老三面前\",{\"1\":{\"663\":1}}],[\"然后把表针前移⼀个位置\",{\"1\":{\"658\":1}}],[\"然后把它移动到表头是⼀个⾮常费时的操作\",{\"1\":{\"658\":1}}],[\"然后把它们的叠加和作为映射的位置\",{\"1\":{\"170\":1}}],[\"然后把订单信息生成\",{\"1\":{\"413\":1}}],[\"然后把元素存到这个map中\",{\"1\":{\"310\":1}}],[\"然后把原数组的值拷贝过去\",{\"1\":{\"155\":1}}],[\"然后让hashcode的高16位和低16位进行异或操作\",{\"1\":{\"166\":1}}],[\"然后操作包装后的\",{\"1\":{\"158\":1}}],[\"于是在\",{\"1\":{\"680\":1}}],[\"于是计算机科学家们\",{\"1\":{\"655\":1}}],[\"于是回了⼀个\",{\"1\":{\"594\":1}}],[\"于是接收⽅发现数据是重复收到的\",{\"1\":{\"594\":1}}],[\"于是还是\",{\"1\":{\"592\":1}}],[\"于是这⼀次能够发送\",{\"1\":{\"587\":1}}],[\"于是⼀次能够发送\",{\"1\":{\"586\":1}}],[\"于是\",{\"1\":{\"585\":1,\"592\":1,\"651\":1}}],[\"于是会将该进程唤醒运⾏\",{\"1\":{\"641\":1}}],[\"于是会导致更⼤的延迟以及更多的丢包\",{\"1\":{\"585\":1}}],[\"于是会对该请求重试几次\",{\"1\":{\"224\":1}}],[\"于是自己也关闭连接\",{\"1\":{\"574\":1}}],[\"于是就会触发快速重发机制\",{\"1\":{\"593\":1}}],[\"于是就有\",{\"1\":{\"592\":1}}],[\"于是就\",{\"1\":{\"592\":1}}],[\"于是就可以⽐之前多发\",{\"1\":{\"586\":2}}],[\"于是就引入了readview这个概念来解决这个问题\",{\"1\":{\"523\":1}}],[\"于是就从线程信息里面找突破点\",{\"1\":{\"413\":1}}],[\"于是a的对象b属性就有值了\",{\"1\":{\"442\":1}}],[\"于是准备登录后台去测试下\",{\"1\":{\"413\":1}}],[\"于是小约翰决定第二次选妃\",{\"1\":{\"346\":1}}],[\"于是决定第一次选妃\",{\"1\":{\"346\":1}}],[\"迷爱理爱理不理\",{\"1\":{\"346\":1}}],[\"屏蔽网络细节\",{\"1\":{\"548\":1}}],[\"屏蔽差异性\",{\"1\":{\"247\":1}}],[\"屏障将被拆除\",{\"1\":{\"347\":1}}],[\"屏障被重设等情况\",{\"1\":{\"346\":1}}],[\"屏障被拆除\",{\"1\":{\"346\":1}}],[\"屏障才会开门\",{\"1\":{\"346\":1}}],[\"总之\",{\"1\":{\"668\":1}}],[\"总体的查找速度也更快\",{\"1\":{\"503\":1}}],[\"总容量的大约一半左右\",{\"1\":{\"483\":1}}],[\"总容量触及最大堆的容量限制后就会产生内存溢出异常\",{\"1\":{\"388\":1}}],[\"总的营业窗口数6对应\",{\"1\":{\"353\":1}}],[\"总共有六个窗口\",{\"1\":{\"353\":1}}],[\"总不能为了某个玩家等到天荒地老\",{\"1\":{\"345\":1}}],[\"总结就以下四点\",{\"1\":{\"599\":1}}],[\"总结⼀下\",{\"1\":{\"252\":1}}],[\"总结一下注册中心的作用\",{\"1\":{\"834\":1}}],[\"总结一下\",{\"1\":{\"215\":1,\"741\":1,\"771\":1}}],[\"敌方还有5秒达到战场\",{\"1\":{\"345\":1}}],[\"游戏开始时\",{\"1\":{\"345\":1}}],[\"王者游戏中也有类似的场景\",{\"1\":{\"345\":1}}],[\"稍等\",{\"1\":{\"345\":1}}],[\"铠\",{\"1\":{\"345\":4}}],[\"哪吒\",{\"1\":{\"345\":4}}],[\"哪吒和铠等五个玩家\",{\"1\":{\"345\":2}}],[\"各部分都设置成单线程处理\",{\"1\":{\"761\":1}}],[\"各自有什么优缺点\",{\"0\":{\"677\":1}}],[\"各自创建单独线程来执行队列里的任务\",{\"1\":{\"373\":1}}],[\"各个参与者执行各自的本地事务\",{\"1\":{\"872\":1}}],[\"各个资源管理器执行回滚操作\",{\"1\":{\"871\":1}}],[\"各个资源管理器执行最终的提交操作\",{\"1\":{\"871\":1}}],[\"各个服务在启动时向注册中心注册自己的网络地址\",{\"1\":{\"834\":1}}],[\"各个过程都使用了哪些协议\",{\"1\":{\"546\":1}}],[\"各个sqlsession之间的缓存相互隔离\",{\"1\":{\"446\":1}}],[\"各个厂商各有不同的\",{\"1\":{\"427\":1}}],[\"各种微服务治理的组件应运而生\",{\"1\":{\"832\":1}}],[\"各种报警\",{\"1\":{\"418\":1}}],[\"各种问法\",{\"1\":{\"160\":1}}],[\"各玩家虽然都调用了start\",{\"1\":{\"345\":1}}],[\"各玩家的初始状态必须一致\",{\"1\":{\"345\":1}}],[\"各玩家通过countdownlatch\",{\"1\":{\"345\":1}}],[\"兰陵王\",{\"1\":{\"345\":6}}],[\"倒计数器\",{\"0\":{\"345\":1},\"1\":{\"345\":1}}],[\"环绕\",{\"1\":{\"805\":1}}],[\"环绕切点\",{\"1\":{\"805\":1}}],[\"环绕通知\",{\"1\":{\"804\":1}}],[\"环境下\",{\"1\":{\"427\":1}}],[\"环境变量配置\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"环路等待\",{\"1\":{\"342\":1}}],[\"环路等待条件\",{\"1\":{\"342\":1,\"647\":1,\"648\":1}}],[\"循环往复\",{\"1\":{\"851\":1}}],[\"循环依赖\",{\"1\":{\"799\":3,\"800\":1}}],[\"循环再对内表进行查询\",{\"1\":{\"464\":1}}],[\"循环\",{\"1\":{\"402\":1,\"464\":1}}],[\"循环的末尾\",{\"1\":{\"402\":1}}],[\"循环性能开销\",{\"0\":{\"337\":1}}],[\"循环里拼接还是建议用\",{\"1\":{\"266\":1}}],[\"虽然比较简单\",{\"1\":{\"821\":1}}],[\"虽然整体流程复杂\",{\"1\":{\"816\":1}}],[\"虽然我对面试写这种百度就能出来的东西持保留意见\",{\"1\":{\"805\":1}}],[\"虽然我这个对象还不完整\",{\"1\":{\"800\":1}}],[\"虽然不太完善\",{\"1\":{\"800\":1}}],[\"虽然看上去不错\",{\"1\":{\"658\":1}}],[\"虽然两个人的状态一直在变化\",{\"1\":{\"649\":1}}],[\"虽然叫额外\",{\"1\":{\"493\":1}}],[\"虽然调优说的震天响\",{\"1\":{\"406\":1}}],[\"虽然\",{\"1\":{\"404\":1}}],[\"虽然有30个线程在执行\",{\"1\":{\"348\":1}}],[\"虽然a的值没变\",{\"1\":{\"336\":1}}],[\"虽然二者都要求运算符左右两端的布尔值都是\",{\"1\":{\"241\":1}}],[\"刚刚a\",{\"1\":{\"336\":1}}],[\"刚开始没有\",{\"1\":{\"221\":1}}],[\"去管理这些配置\",{\"1\":{\"840\":1}}],[\"去处理返回值\",{\"1\":{\"817\":1}}],[\"去⽣成代理对象之后\",{\"1\":{\"801\":1}}],[\"去重\",{\"1\":{\"762\":1}}],[\"去监听数据库的binlog\",{\"1\":{\"708\":1}}],[\"去申请表的互斥锁时就会失败\",{\"1\":{\"514\":1}}],[\"去查询数据的时候\",{\"1\":{\"509\":1}}],[\"去查找对应的内容\",{\"1\":{\"496\":1}}],[\"去分析对应的慢查询日志\",{\"1\":{\"485\":1}}],[\"去除重复数据\",{\"1\":{\"470\":1}}],[\"去加载更新后的\",{\"1\":{\"428\":1}}],[\"去阻塞队列取任务\",{\"1\":{\"363\":1}}],[\"去队里加个塞\",{\"1\":{\"353\":1}}],[\"去修改数据时\",{\"1\":{\"336\":1}}],[\"去掉重复的配置类和需要排除的重复类\",{\"1\":{\"820\":1}}],[\"去掉枝枝蔓蔓\",{\"1\":{\"270\":1}}],[\"去掉所有父级图标\",{\"1\":{\"73\":1}}],[\"去掉最后一级图标\",{\"1\":{\"73\":1}}],[\"⽐较合理的解释是\",{\"1\":{\"576\":1}}],[\"⽐较并交换\",{\"1\":{\"334\":1}}],[\"⽐如请求查询a\",{\"1\":{\"702\":1}}],[\"⽐如对于上⾯的例⼦\",{\"1\":{\"592\":1}}],[\"⽐如如果被动关闭⽅没有收到断开连接的最后的\",{\"1\":{\"576\":1}}],[\"⽐如冒充淘宝⽹站\",{\"1\":{\"562\":1}}],[\"⽐如强制植⼊垃圾⼴告\",{\"1\":{\"562\":1}}],[\"⽐如通信链路上可以获取通信内容\",{\"1\":{\"562\":1}}],[\"⽐如传了17\",{\"1\":{\"169\":1}}],[\"乖乖排到后面\",{\"1\":{\"333\":1}}],[\"抢锁\",{\"1\":{\"333\":1}}],[\"抢先进入此方法的线程会优先拥有\",{\"1\":{\"325\":1}}],[\"非静态工厂\",{\"1\":{\"795\":2}}],[\"非静态工厂注入\",{\"1\":{\"795\":1}}],[\"非入侵式的控制反转\",{\"1\":{\"782\":1}}],[\"非常高\",{\"1\":{\"742\":1}}],[\"非常好理解\",{\"1\":{\"693\":1}}],[\"非常便于进行数据备份\",{\"1\":{\"678\":1}}],[\"非常适合备份\",{\"1\":{\"677\":1}}],[\"非常良好地封装了分布式锁的api\",{\"1\":{\"198\":1}}],[\"非阻塞i\",{\"1\":{\"663\":3}}],[\"非抢占式的调度算法\",{\"1\":{\"640\":2}}],[\"非对称加密\",{\"1\":{\"563\":1,\"616\":1}}],[\"非关键业务采用读写分离\",{\"1\":{\"528\":1}}],[\"非聚集索引\",{\"1\":{\"506\":1}}],[\"非聚簇索引索引和数据不在一棵树上\",{\"1\":{\"506\":1}}],[\"非叶子节点\",{\"1\":{\"502\":1}}],[\"非叶子节点只不存储真实的数据\",{\"1\":{\"501\":1}}],[\"非叶子节点只存储键值\",{\"1\":{\"501\":1}}],[\"非主键列完全依赖于主键\",{\"1\":{\"460\":1}}],[\"非批量\",{\"1\":{\"445\":1}}],[\"非\",{\"1\":{\"402\":1}}],[\"非核心线程空闲存活时间为60秒\",{\"1\":{\"364\":1}}],[\"非核心线程闲置下来不干活最多存活时间\",{\"1\":{\"354\":1}}],[\"非核心线程\",{\"1\":{\"354\":1}}],[\"非核心线程数+核心线程数\",{\"1\":{\"354\":1}}],[\"非核心线程保持存活的时间选择了\",{\"1\":{\"352\":1}}],[\"非核心闲置线程存活时间直接置为0\",{\"1\":{\"352\":1}}],[\"非公平锁让获取锁的时间变得更加不确定\",{\"1\":{\"333\":1}}],[\"非公平锁会有更好的性能\",{\"1\":{\"333\":1}}],[\"非公平锁会直接\",{\"1\":{\"333\":1}}],[\"非公平锁会尝试去获取锁\",{\"1\":{\"332\":1}}],[\"非公平锁在\",{\"1\":{\"333\":1}}],[\"非公平锁在调用\",{\"1\":{\"333\":1}}],[\"非公平锁和公平锁的两处不同\",{\"1\":{\"333\":1}}],[\"非公平锁的优点是可以减少唤起线程的开销\",{\"1\":{\"332\":1}}],[\"非公平锁是多个线程加锁时直接尝试获取锁\",{\"1\":{\"332\":1}}],[\"非公平锁\",{\"1\":{\"332\":1}}],[\"唤醒⼀个等待中的进程\",{\"1\":{\"645\":1}}],[\"唤醒阻塞线程的开销比非公平锁大\",{\"1\":{\"332\":1}}],[\"唤醒一个在此对象监视器上等待的线程\",{\"1\":{\"272\":1}}],[\"头中的\",{\"1\":{\"613\":1}}],[\"头\",{\"1\":{\"584\":2}}],[\"头部长度\",{\"1\":{\"595\":1}}],[\"头部有个字段叫\",{\"1\":{\"583\":1}}],[\"头部有多少个\",{\"1\":{\"580\":1}}],[\"头部\",{\"1\":{\"580\":1,\"584\":2}}],[\"头部最长是\",{\"1\":{\"580\":1}}],[\"头信息和数据体都是二进制\",{\"1\":{\"558\":1}}],[\"头都大了\",{\"1\":{\"526\":1}}],[\"头尾两个节点来组成队列结构\",{\"1\":{\"331\":1}}],[\"头插法会使链表发生反转\",{\"1\":{\"175\":1}}],[\"头插法扩容时\",{\"1\":{\"175\":1}}],[\"另⼀个是\",{\"1\":{\"641\":1}}],[\"另⼀⽅接收到\",{\"1\":{\"576\":1}}],[\"另一种是在\",{\"1\":{\"762\":1}}],[\"另一方面\",{\"1\":{\"691\":1}}],[\"另一端读取\",{\"1\":{\"641\":1}}],[\"另一个开源的分布式服务发现和配置管理工具\",{\"1\":{\"841\":1}}],[\"另一个并发事务\",{\"1\":{\"521\":1}}],[\"另一个表示版本的过期时间\",{\"1\":{\"519\":1}}],[\"另一个为\",{\"1\":{\"384\":1}}],[\"另一个是通过\",{\"1\":{\"265\":1}}],[\"另外每个节点的内存都是单独分配\",{\"1\":{\"734\":1}}],[\"另外的进程⻢上就能看到\",{\"1\":{\"641\":1}}],[\"另外\",{\"1\":{\"640\":1,\"645\":1,\"772\":1,\"824\":1}}],[\"另外一个线程还可以通过cas的方式进行获取\",{\"1\":{\"331\":1}}],[\"独占方式和共享方式\",{\"1\":{\"331\":1}}],[\"队列就是主题\",{\"1\":{\"743\":1}}],[\"队列模式\",{\"1\":{\"743\":1}}],[\"队列模型无法满足这个需求\",{\"1\":{\"743\":1}}],[\"队列模型\",{\"1\":{\"743\":1}}],[\"队列模型和发布\",{\"1\":{\"743\":1}}],[\"队列里的连接旧不会出对队\",{\"1\":{\"573\":1}}],[\"队列为空\",{\"1\":{\"367\":1}}],[\"队列阻塞挂起\",{\"1\":{\"332\":1}}],[\"队列性能较好\",{\"1\":{\"331\":1}}],[\"队列中的第一个线程才能获得锁\",{\"1\":{\"332\":1}}],[\"队列中\",{\"1\":{\"331\":1}}],[\"队列\",{\"1\":{\"331\":1,\"573\":4}}],[\"队列的\",{\"1\":{\"331\":1}}],[\"升级\",{\"1\":{\"328\":1}}],[\"撤销\",{\"1\":{\"328\":2}}],[\"撤销等状态\",{\"1\":{\"225\":1}}],[\"竞争失败\",{\"1\":{\"328\":1}}],[\"扩展性都有很大的不足\",{\"1\":{\"788\":1}}],[\"扩展性好\",{\"1\":{\"742\":1}}],[\"扩展不容易\",{\"1\":{\"436\":1}}],[\"扩展类加载器\",{\"1\":{\"423\":1}}],[\"扩展成一个范围更大的锁\",{\"1\":{\"327\":1}}],[\"扩容和缩容就是将一部分槽和数据迁移给新节点\",{\"1\":{\"699\":1}}],[\"扩容等问题\",{\"1\":{\"534\":1}}],[\"扩容后的newtab的大小为老数组的两倍\",{\"1\":{\"314\":1}}],[\"扩容\",{\"1\":{\"176\":1,\"314\":1}}],[\"扩容时机\",{\"1\":{\"175\":1}}],[\"扩容的时候有可能导致环形链表的出现\",{\"1\":{\"177\":1}}],[\"扩容的时候\",{\"1\":{\"175\":1}}],[\"扩容rehash\",{\"1\":{\"175\":1}}],[\"扩容节点迁移主要逻辑\",{\"1\":{\"174\":1}}],[\"扩容之后的长度是原来的二倍\",{\"1\":{\"174\":1}}],[\"扩容在什么时候呢\",{\"0\":{\"173\":1}}],[\"偏向线程\",{\"1\":{\"385\":1}}],[\"偏向锁不会主动释放\",{\"1\":{\"328\":1}}],[\"偏向锁的撤销\",{\"1\":{\"328\":1}}],[\"偏向锁的获取\",{\"1\":{\"328\":1}}],[\"偏向锁升级为轻量级锁\",{\"1\":{\"328\":1}}],[\"偏向锁\",{\"0\":{\"328\":1},\"1\":{\"327\":1}}],[\"偏向时间戳等\",{\"1\":{\"385\":1}}],[\"偏向时间戳\",{\"1\":{\"327\":1}}],[\"得把创建出的对象存起来\",{\"1\":{\"788\":1}}],[\"得有\",{\"1\":{\"784\":1}}],[\"得不到执行\",{\"1\":{\"727\":1}}],[\"得出最终的\",{\"1\":{\"591\":1}}],[\"得到的结果就是目标节点在跳跃表中的排位\",{\"1\":{\"732\":1}}],[\"得到的\",{\"1\":{\"605\":1}}],[\"得到的余数才能用来访问数组下标\",{\"1\":{\"167\":1}}],[\"得到⼀个\",{\"1\":{\"564\":2}}],[\"得到服务器返回的数据\",{\"1\":{\"563\":1}}],[\"得到新的一行数据\",{\"1\":{\"481\":1}}],[\"得让它去帮没干完活的线程干活\",{\"1\":{\"373\":1}}],[\"得等所有人都上线之后\",{\"1\":{\"345\":1}}],[\"得先知道\",{\"1\":{\"327\":1}}],[\"他有⼀个缺点就是如果这些过期的key没有被访问\",{\"1\":{\"716\":1}}],[\"他一般只能在他自己的网站构造请求\",{\"1\":{\"613\":1}}],[\"他能够被缓存也是因为它的幂等性和安全性\",{\"1\":{\"553\":1}}],[\"他们被用于保存与货币有关的数据\",{\"1\":{\"465\":1}}],[\"他会记录下线程获取锁的次数\",{\"1\":{\"326\":1}}],[\"他把一个分布式事务理解成一个包含了若干分支事务的全局事务\",{\"1\":{\"208\":1}}],[\"归\",{\"1\":{\"325\":1}}],[\"归约成一个值\",{\"1\":{\"294\":1}}],[\"叫跨站脚本攻击\",{\"1\":{\"615\":1}}],[\"叫mark\",{\"1\":{\"327\":1}}],[\"叫新的线程\",{\"1\":{\"325\":1}}],[\"叫做自增运算符\",{\"1\":{\"245\":1}}],[\"门诊大厅\",{\"1\":{\"325\":1}}],[\"候诊室\",{\"1\":{\"325\":1}}],[\"候诊室的下一位候诊患者进入就诊室\",{\"1\":{\"325\":1}}],[\"候选人说了一堆\",{\"1\":{\"805\":1}}],[\"候选人\",{\"1\":{\"221\":3}}],[\"走出就诊室\",{\"1\":{\"325\":1}}],[\"诊室每次只能有一个患者就诊\",{\"1\":{\"325\":1}}],[\"随手写的一个自定义\",{\"1\":{\"821\":1}}],[\"随机算法将请求随机分配给后端服务器\",{\"1\":{\"851\":1}}],[\"随机算法\",{\"1\":{\"851\":1}}],[\"随机读的性能也会有所提升\",{\"1\":{\"772\":1}}],[\"随机生成一个介于1和32之间的值作为level数组的大小\",{\"1\":{\"732\":1}}],[\"随机删除过期键\",{\"1\":{\"717\":1}}],[\"随机删除所有键\",{\"1\":{\"717\":1}}],[\"随时接受大家的反馈\",{\"1\":{\"622\":1}}],[\"随时可以提交事务\",{\"1\":{\"481\":1}}],[\"随时调整\",{\"1\":{\"369\":1}}],[\"随便起的变量名\",{\"1\":{\"445\":1}}],[\"随着微服务数量的增加\",{\"1\":{\"829\":1}}],[\"随着应用程序规模的增长\",{\"1\":{\"828\":1}}],[\"随着aof文件越来越大\",{\"1\":{\"676\":1}}],[\"随着\",{\"1\":{\"408\":1}}],[\"随着对象状态变化\",{\"1\":{\"385\":1}}],[\"随着数据的插入数量增加以及负载因子的作用下\",{\"1\":{\"174\":1}}],[\"随后填充至接下来要创建的pullrequest对象属性中\",{\"1\":{\"777\":1}}],[\"随后通过异步的方式由pdflush内核线程将cache内的数据刷盘至物理磁盘上\",{\"1\":{\"772\":1}}],[\"随后进行一次筛选\",{\"1\":{\"393\":1}}],[\"随后\",{\"1\":{\"325\":1}}],[\"患者在门诊大厅前台或自助挂号机进行挂号\",{\"1\":{\"325\":1}}],[\"处\",{\"1\":{\"570\":1}}],[\"处的值更新为新值\",{\"1\":{\"334\":1}}],[\"处的值等于\",{\"1\":{\"334\":1}}],[\"处于活锁线程组里的线程状态可以改变\",{\"1\":{\"649\":1}}],[\"处于一直等待短作业执行完毕的状态\",{\"1\":{\"640\":1}}],[\"处于\",{\"1\":{\"481\":1}}],[\"处于等待锁block状态的线程\",{\"1\":{\"325\":1}}],[\"处于wait状态的线程\",{\"1\":{\"325\":1}}],[\"处理需要排除的配置\",{\"1\":{\"820\":1}}],[\"处理消息重复问题\",{\"1\":{\"757\":1}}],[\"处理步骤一般如下\",{\"1\":{\"718\":1}}],[\"处理器映射器\",{\"1\":{\"816\":1,\"817\":1}}],[\"处理器适配器去执行\",{\"1\":{\"816\":1,\"817\":1}}],[\"处理器适配器\",{\"1\":{\"815\":1,\"816\":1,\"817\":1}}],[\"处理器执行链\",{\"1\":{\"815\":1}}],[\"处理器拦截器\",{\"1\":{\"815\":1}}],[\"处理器\",{\"1\":{\"629\":1,\"815\":1}}],[\"处理器可以改变语句对应\",{\"1\":{\"319\":1}}],[\"处理\",{\"1\":{\"492\":1,\"538\":1}}],[\"处理的方式都一样\",{\"1\":{\"477\":1}}],[\"处理数据库会话的\",{\"1\":{\"448\":1}}],[\"处理列表\",{\"1\":{\"434\":1}}],[\"处理无法执行任务异常\",{\"1\":{\"357\":1}}],[\"处理中断异常\",{\"1\":{\"357\":1}}],[\"处理中文\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"区间的插入意向锁\",{\"1\":{\"513\":2}}],[\"区间加上了意向锁\",{\"1\":{\"513\":1}}],[\"区间锁定\",{\"1\":{\"513\":1}}],[\"区分度高\",{\"1\":{\"497\":1}}],[\"区分度低的字段\",{\"1\":{\"497\":1}}],[\"区的大小\",{\"1\":{\"417\":1}}],[\"区的比值\",{\"1\":{\"412\":1}}],[\"区和\",{\"1\":{\"417\":1}}],[\"区很快被填满\",{\"1\":{\"416\":1}}],[\"区占整个年轻代的\",{\"1\":{\"412\":1}}],[\"区有两个\",{\"1\":{\"412\":1}}],[\"区与两个\",{\"1\":{\"412\":1}}],[\"区放不下从\",{\"1\":{\"399\":1}}],[\"区没有足够的空间时\",{\"1\":{\"398\":1}}],[\"区进行分配\",{\"1\":{\"398\":1}}],[\"区时\",{\"1\":{\"325\":1}}],[\"区别于unique\",{\"1\":{\"493\":1}}],[\"区别在于请求首部和响应首部\",{\"1\":{\"556\":1}}],[\"区别在于index是遍历索引树读取\",{\"1\":{\"493\":1}}],[\"区别在于\",{\"1\":{\"493\":1}}],[\"区别在于前者实现的是编译时的多态性\",{\"1\":{\"249\":1}}],[\"区别之一是当最后一个非守护线程束时\",{\"1\":{\"305\":1}}],[\"区别\",{\"0\":{\"265\":1,\"807\":1},\"1\":{\"463\":1}}],[\"锁超时释放\",{\"1\":{\"727\":1}}],[\"锁永远得不到释放\",{\"1\":{\"727\":1}}],[\"锁结构\",{\"1\":{\"513\":1}}],[\"锁定账号\",{\"1\":{\"669\":1}}],[\"锁定粒度介于表锁和行锁之间\",{\"1\":{\"512\":1}}],[\"锁定粒度小\",{\"1\":{\"512\":1}}],[\"锁定力度大\",{\"1\":{\"512\":1}}],[\"锁的实现\",{\"1\":{\"330\":1}}],[\"锁的重入次数\",{\"1\":{\"325\":1}}],[\"锁粗化\",{\"1\":{\"327\":2}}],[\"锁消除等\",{\"1\":{\"330\":1}}],[\"锁消除\",{\"1\":{\"327\":2}}],[\"锁状态标志\",{\"1\":{\"327\":1,\"385\":1}}],[\"锁升级方向\",{\"1\":{\"327\":1}}],[\"锁升级的过程是什么样的\",{\"1\":{\"327\":1}}],[\"锁升级\",{\"0\":{\"327\":1}}],[\"锁对象有个计数器\",{\"1\":{\"326\":1}}],[\"锁对象的时候有个计数器\",{\"1\":{\"326\":1}}],[\"锁\",{\"0\":{\"323\":1,\"511\":1},\"1\":{\"513\":1,\"645\":1}}],[\"锁住整个table数组\",{\"1\":{\"178\":1}}],[\"楚门的世界\",{\"1\":{\"321\":1}}],[\"遵守as\",{\"1\":{\"321\":1}}],[\"规定不要\",{\"1\":{\"490\":1}}],[\"规则可以包括资源名称\",{\"1\":{\"859\":1}}],[\"规则\",{\"1\":{\"320\":2,\"483\":2}}],[\"规避了数据库的\",{\"1\":{\"204\":1}}],[\"寄存器等不共享的数据\",{\"1\":{\"643\":1}}],[\"寄存器\",{\"1\":{\"317\":1,\"379\":1}}],[\"寄存器以及其他的硬件和编译器优化\",{\"1\":{\"317\":1}}],[\"父线程能用threadlocal来给子线程传值吗\",{\"1\":{\"315\":1}}],[\"父子线程怎么共享数据\",{\"0\":{\"315\":1}}],[\"未产生死信消息\",{\"1\":{\"766\":1}}],[\"未消费的消息也能重新恢复再消费\",{\"1\":{\"755\":1}}],[\"未收到数据并不可以接收的数据\",{\"1\":{\"583\":1}}],[\"未收到数据但可以接收\",{\"1\":{\"583\":1}}],[\"未发送也不可以发送\",{\"1\":{\"583\":1}}],[\"未发送但可以发送\",{\"1\":{\"583\":1}}],[\"未来\",{\"1\":{\"658\":1}}],[\"未来是否可能再次需要扩容\",{\"1\":{\"534\":1}}],[\"未来的发展\",{\"1\":{\"381\":1}}],[\"未被确认\",{\"1\":{\"584\":1}}],[\"未被同步到从服务器里\",{\"1\":{\"528\":1}}],[\"未被探索到的对象便是死亡的\",{\"1\":{\"390\":1}}],[\"未提交的数据\",{\"1\":{\"521\":1}}],[\"未规定此区域的具体数据结构\",{\"1\":{\"422\":1}}],[\"未清理到任何数据\",{\"1\":{\"314\":1}}],[\"未使用\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"栈段\",{\"1\":{\"652\":1}}],[\"栈上分配\",{\"1\":{\"408\":1}}],[\"栈帧中的本地变量表\",{\"1\":{\"391\":1}}],[\"栈中存储了threadlocal\",{\"1\":{\"311\":1}}],[\"栈内存线程私有\",{\"1\":{\"311\":1}}],[\"堆段组成\",{\"1\":{\"652\":1}}],[\"堆空间各个区域的大小设置\",{\"1\":{\"417\":1}}],[\"堆配置\",{\"1\":{\"412\":1}}],[\"堆内存中实例化一个\",{\"1\":{\"422\":1}}],[\"堆内存文件作进一步分析\",{\"1\":{\"417\":1}}],[\"堆内存信息到文件\",{\"1\":{\"415\":1}}],[\"堆内存产生了大量的订单对象和\",{\"1\":{\"413\":1}}],[\"堆内存溢出\",{\"1\":{\"413\":1}}],[\"堆内存分析工具\",{\"1\":{\"411\":1}}],[\"堆内存线程共享\",{\"1\":{\"311\":1}}],[\"堆栈跟踪\",{\"1\":{\"410\":1}}],[\"堆转储快照分析\",{\"1\":{\"410\":1}}],[\"堆和方法区的垃圾收集\",{\"1\":{\"397\":1}}],[\"堆的垃圾收集\",{\"1\":{\"397\":1}}],[\"堆的内存分区了解吗\",{\"0\":{\"394\":1}}],[\"堆划分为多个大小相等的独立区域\",{\"1\":{\"404\":1}}],[\"堆划分为\",{\"1\":{\"394\":1}}],[\"堆用于储存对象实例\",{\"1\":{\"388\":1}}],[\"堆溢出\",{\"1\":{\"388\":1}}],[\"堆会发生抢占吗\",{\"0\":{\"384\":1}}],[\"堆是否规整是由选择的垃圾收集器是否具有压缩整理能力决定的\",{\"1\":{\"383\":1}}],[\"堆是否规整决定\",{\"1\":{\"383\":1}}],[\"堆是垃圾收集器管理的内存区域\",{\"1\":{\"379\":1}}],[\"堆是被所有线程共享的一块内存区域\",{\"1\":{\"379\":1}}],[\"堆\",{\"1\":{\"379\":3,\"413\":1}}],[\"堆中包含大量对象\",{\"1\":{\"395\":1}}],[\"堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息\",{\"1\":{\"386\":1}}],[\"堆中将可能会划分出一块内存来作为句柄池\",{\"1\":{\"386\":1}}],[\"堆中预先分配一小块内存\",{\"1\":{\"384\":1}}],[\"堆中的内存并不是规整的\",{\"1\":{\"383\":1}}],[\"堆中的对象也会拷贝一份\",{\"1\":{\"260\":1}}],[\"堆中内存是绝对规整的\",{\"1\":{\"383\":1}}],[\"堆中经常会出现新生代\",{\"1\":{\"379\":1}}],[\"堆中存储了它们的具体实例\",{\"1\":{\"311\":1}}],[\"弱引用也是用来描述那些非必须对象\",{\"1\":{\"392\":1}}],[\"弱引用很容易被回收\",{\"1\":{\"311\":1}}],[\"弱引用\",{\"1\":{\"310\":1,\"311\":1,\"392\":1}}],[\"讲当前元素存入map\",{\"1\":{\"310\":1}}],[\"讲讲hashset的底层实现\",{\"0\":{\"186\":1}}],[\"讲讲\",{\"0\":{\"183\":1,\"184\":1}}],[\"读还是从\",{\"1\":{\"767\":1}}],[\"读脏数据的概率也小很多\",{\"1\":{\"707\":1}}],[\"读到的就是脏数据\",{\"1\":{\"707\":1}}],[\"读\",{\"1\":{\"682\":1}}],[\"读写特别频繁\",{\"1\":{\"537\":1}}],[\"读写分离的基本实现是\",{\"1\":{\"525\":1}}],[\"读写分离的基本原理是将数据库读写操作分散到不同的节点上\",{\"1\":{\"525\":1}}],[\"读从机失败后再读一次主机\",{\"1\":{\"528\":1}}],[\"读会加读锁\",{\"1\":{\"522\":1}}],[\"读已提交\",{\"1\":{\"520\":1,\"810\":1}}],[\"读未提交\",{\"1\":{\"519\":1,\"520\":1,\"522\":2,\"810\":1}}],[\"读锁\",{\"1\":{\"515\":1}}],[\"读也是以某个threadlocal作为引用\",{\"1\":{\"310\":1}}],[\"读取meta\",{\"1\":{\"820\":1}}],[\"读取消息内容时候会产生较多的随机访问读取\",{\"1\":{\"772\":1}}],[\"读取消息\",{\"1\":{\"767\":2}}],[\"读取已提交和可重复读级别利用了readview和mvcc\",{\"1\":{\"522\":1}}],[\"读取已提交\",{\"1\":{\"521\":1,\"522\":1}}],[\"读取未提交\",{\"1\":{\"521\":1}}],[\"读取同一条记录\",{\"1\":{\"521\":1}}],[\"读取到事务\",{\"1\":{\"521\":1}}],[\"读取数据的时候\",{\"1\":{\"503\":1}}],[\"读取配置文件\",{\"1\":{\"448\":1,\"794\":1}}],[\"读取\",{\"1\":{\"308\":1,\"448\":1}}],[\"读操作是无锁的\",{\"1\":{\"159\":1}}],[\"鄙人三某\",{\"1\":{\"308\":1,\"311\":1,\"315\":1}}],[\"涉及到多线程\",{\"1\":{\"307\":1}}],[\"涉及内存关系的使用\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"管道是三者之中最简单的\",{\"1\":{\"726\":1}}],[\"管道只能承载无格式字节流以及缓冲区大小受限等缺点\",{\"1\":{\"641\":1}}],[\"管道可以分为两类\",{\"1\":{\"641\":1}}],[\"管道可以理解成不同进程之间的对白\",{\"1\":{\"641\":1}}],[\"管道\",{\"1\":{\"641\":2,\"726\":2}}],[\"管道机制\",{\"1\":{\"558\":1}}],[\"管道输入\",{\"1\":{\"306\":3}}],[\"管你\",{\"1\":{\"406\":1}}],[\"管理微服务的地址信息\",{\"1\":{\"832\":1}}],[\"管理所有对象\",{\"1\":{\"795\":1}}],[\"管理的\",{\"1\":{\"784\":1}}],[\"管理持久连接\",{\"1\":{\"556\":1}}],[\"管理\",{\"1\":{\"542\":1,\"629\":1}}],[\"管理工具\",{\"1\":{\"381\":1}}],[\"管理全局的分支事务的状态\",{\"1\":{\"208\":1}}],[\"换句话说\",{\"1\":{\"519\":1}}],[\"换行输出\",{\"1\":{\"418\":1}}],[\"换而言之\",{\"1\":{\"305\":1}}],[\"换种哈希函数\",{\"1\":{\"171\":1}}],[\"阻塞只发生在fork阶段\",{\"1\":{\"676\":1}}],[\"阻塞当前redis服务器\",{\"1\":{\"676\":1}}],[\"阻塞等待的是内核数据准备好和数据从内核态拷⻉到⽤户态这两个过程\",{\"1\":{\"663\":1}}],[\"阻塞i\",{\"1\":{\"663\":2}}],[\"阻塞\",{\"1\":{\"642\":1}}],[\"阻塞队列是delayedworkqueue\",{\"1\":{\"365\":1}}],[\"阻塞队列是synchronousqueue\",{\"1\":{\"364\":1}}],[\"阻塞队列是无界队列linkedblockingqueue\",{\"1\":{\"362\":1}}],[\"阻塞队列为无界队列linkedblockingqueue\",{\"1\":{\"363\":1}}],[\"阻塞状态\",{\"1\":{\"303\":1,\"637\":1}}],[\"阻止实例中那些用此关键字修饰的的变量序列化\",{\"1\":{\"282\":1}}],[\"初始值分别是\",{\"1\":{\"534\":1}}],[\"初始堆大小\",{\"1\":{\"412\":1}}],[\"初始标记\",{\"1\":{\"403\":1,\"404\":1}}],[\"初始状态\",{\"1\":{\"303\":1}}],[\"初始化阶段创建代理对象\",{\"1\":{\"812\":1}}],[\"初始化过程中\",{\"1\":{\"801\":1}}],[\"初始化都完成的\",{\"1\":{\"800\":1}}],[\"初始化完成的\",{\"1\":{\"800\":1}}],[\"初始化完成\",{\"1\":{\"800\":1}}],[\"初始化完成之后\",{\"1\":{\"793\":1}}],[\"初始化的过程\",{\"1\":{\"793\":1}}],[\"初始化的阶段的步骤比较多\",{\"1\":{\"793\":1}}],[\"初始化各自的窗口大小\",{\"1\":{\"582\":1}}],[\"初始化基础配置\",{\"1\":{\"448\":1}}],[\"初始化\",{\"1\":{\"421\":1,\"793\":2}}],[\"初始化时位于字符串常量池\",{\"1\":{\"266\":1}}],[\"初始化为follower\",{\"1\":{\"222\":1}}],[\"状态变量\",{\"1\":{\"586\":1}}],[\"状态变为\",{\"1\":{\"573\":1}}],[\"状态时可以重用端口\",{\"1\":{\"579\":1}}],[\"状态过多\",{\"1\":{\"579\":1}}],[\"状态过多会导致什么问题\",{\"0\":{\"579\":1},\"1\":{\"579\":1}}],[\"状态主要的危害有两种\",{\"1\":{\"579\":1}}],[\"状态的\",{\"1\":{\"579\":1}}],[\"状态的服务端就收不到对已发送的\",{\"1\":{\"576\":1}}],[\"状态而直接关闭的话\",{\"1\":{\"578\":1}}],[\"状态发生在第四次挥手\",{\"1\":{\"578\":1}}],[\"状态就是为了保证服务端在关闭连接之前将待发送的数据处理完\",{\"1\":{\"578\":1}}],[\"状态有什么意义\",{\"1\":{\"578\":1}}],[\"状态由\",{\"1\":{\"573\":1}}],[\"状态码和相应的状态信息\",{\"1\":{\"556\":1}}],[\"状态码首先应该知道个大概的分类\",{\"1\":{\"551\":1}}],[\"状态行包含了三个字段\",{\"1\":{\"556\":1}}],[\"状态下\",{\"1\":{\"414\":1}}],[\"状态\",{\"1\":{\"303\":1,\"481\":2,\"568\":6,\"572\":1,\"573\":1,\"574\":7,\"576\":1,\"578\":2,\"579\":1,\"698\":1,\"765\":2}}],[\"状态机\",{\"1\":{\"225\":1}}],[\"检查配置信息是否发生变更\",{\"1\":{\"843\":1}}],[\"检查hold住的请求\",{\"1\":{\"778\":1}}],[\"检查空间是否满足修改所需的要求\",{\"1\":{\"730\":1}}],[\"检查的⽅式很粗暴\",{\"1\":{\"664\":1}}],[\"检查的代码污染\",{\"1\":{\"291\":1}}],[\"检查\",{\"1\":{\"613\":1}}],[\"检查这个符号引用代表的类是否已被加载\",{\"1\":{\"382\":1}}],[\"检测当前线程是否被中断\",{\"1\":{\"302\":2}}],[\"缩减大对象数据或把大对象拆分为多个小对象\",{\"1\":{\"718\":1}}],[\"缩容也是类似\",{\"1\":{\"699\":1}}],[\"缩小\",{\"1\":{\"294\":1}}],[\"缩放\",{\"0\":{\"42\":1}}],[\"让业务逻辑更加清爽\",{\"1\":{\"804\":1}}],[\"让其自动剔除\",{\"1\":{\"703\":1}}],[\"让其他线程占用\",{\"1\":{\"304\":1}}],[\"让redis运行在集群模式下\",{\"1\":{\"697\":1}}],[\"让它们成为新主节点的从节点\",{\"1\":{\"688\":1}}],[\"让30个学生解答一道题目\",{\"1\":{\"672\":1}}],[\"让内核来检查是否有⽹络事件产⽣\",{\"1\":{\"664\":1}}],[\"让大家带着理解去记忆面试题\",{\"1\":{\"621\":1}}],[\"让\",{\"1\":{\"594\":1}}],[\"让字段名的别名和实体类的属性名一致\",{\"1\":{\"437\":1}}],[\"让一\",{\"1\":{\"346\":1}}],[\"让出优先权\",{\"1\":{\"302\":1}}],[\"让后统计数量\",{\"1\":{\"294\":1}}],[\"让天下没有难背的八股\",{\"1\":{\"150\":1,\"188\":1,\"229\":1,\"296\":1,\"375\":1,\"431\":1,\"456\":1,\"540\":1,\"626\":1,\"666\":1,\"738\":1,\"780\":1,\"826\":1,\"877\":1}}],[\"验证码确认这样的方式多重校验\",{\"1\":{\"613\":1}}],[\"验证\",{\"1\":{\"294\":3,\"421\":1}}],[\"匹配的切面\",{\"1\":{\"812\":1}}],[\"匹配到第一个\",{\"1\":{\"294\":1}}],[\"匹配\",{\"1\":{\"294\":1}}],[\"库的一部分\",{\"1\":{\"291\":1}}],[\"库存产品\",{\"1\":{\"788\":1}}],[\"库存未预热\",{\"1\":{\"725\":1}}],[\"库存服务接收消息\",{\"1\":{\"206\":1}}],[\"库存服务需要保证幂等\",{\"1\":{\"205\":1}}],[\"库存服务\",{\"1\":{\"205\":1}}],[\"库存服务去消费mq\",{\"1\":{\"205\":1}}],[\"库存剩余数量修改为可用库存数量\",{\"1\":{\"204\":1}}],[\"库存系统校验当前剩余库存数量是否大于1\",{\"1\":{\"204\":1}}],[\"受\",{\"1\":{\"291\":1}}],[\"受检异常\",{\"1\":{\"274\":1}}],[\"改内存参数\",{\"1\":{\"538\":1}}],[\"改\",{\"1\":{\"536\":1,\"538\":1,\"552\":1}}],[\"改成column>\",{\"1\":{\"489\":1}}],[\"改成提交\",{\"1\":{\"481\":1}}],[\"改用与\",{\"1\":{\"381\":1}}],[\"改进了日期时间的管理\",{\"1\":{\"291\":1}}],[\"改为一次\",{\"1\":{\"175\":1}}],[\"简化了\",{\"1\":{\"783\":1}}],[\"简言之\",{\"1\":{\"451\":1,\"518\":1}}],[\"简称\",{\"1\":{\"331\":1,\"401\":1,\"404\":1}}],[\"简而言之\",{\"1\":{\"291\":1,\"519\":1}}],[\"简单易用\",{\"1\":{\"836\":1}}],[\"简单看一下底层数据结构\",{\"1\":{\"729\":1}}],[\"简单的字符串\",{\"1\":{\"670\":1}}],[\"简单\",{\"1\":{\"641\":1,\"764\":1}}],[\"简单点说就是针对一个有索引的字段\",{\"1\":{\"493\":1}}],[\"简单总结一下\",{\"1\":{\"448\":1,\"598\":1,\"793\":1}}],[\"简单理解就是每次在扩展时是成倍的多分配的\",{\"1\":{\"730\":1}}],[\"简单理解\",{\"1\":{\"351\":1}}],[\"简单说\",{\"1\":{\"224\":1,\"482\":1,\"542\":1,\"569\":1,\"615\":1,\"651\":1,\"664\":1,\"708\":1,\"804\":1,\"829\":1,\"877\":1}}],[\"简单说就是自己依赖自己\",{\"1\":{\"799\":1}}],[\"简单说就是可靠性优先的场景都应该使用同步\",{\"1\":{\"755\":1}}],[\"简单说就是在多个提议者的情况下\",{\"1\":{\"217\":1}}],[\"简单说就是插入时\",{\"1\":{\"175\":1}}],[\"简单来说一下\",{\"1\":{\"730\":1}}],[\"简单来说就是通过维护数据历史版本\",{\"1\":{\"523\":1}}],[\"简单来说\",{\"1\":{\"169\":1,\"173\":1,\"233\":1,\"236\":1,\"294\":1,\"313\":1,\"433\":1,\"761\":1,\"769\":1}}],[\"配合读写分离\",{\"1\":{\"682\":1}}],[\"配合使用\",{\"1\":{\"641\":1}}],[\"配合\",{\"1\":{\"291\":1,\"820\":1}}],[\"配置logstash的输出插件\",{\"1\":{\"877\":1}}],[\"配置logstash收集器\",{\"1\":{\"877\":1}}],[\"配置限流规则\",{\"1\":{\"859\":1}}],[\"配置信息存储\",{\"1\":{\"842\":1}}],[\"配置信息的crud\",{\"1\":{\"842\":1}}],[\"配置变更通知和灰度发布等高级特性\",{\"1\":{\"841\":1}}],[\"配置管理和服务管理平台\",{\"1\":{\"835\":1,\"841\":1}}],[\"配置管理\",{\"1\":{\"831\":1,\"835\":1,\"836\":2}}],[\"配置中心\",{\"0\":{\"839\":1},\"1\":{\"831\":1,\"832\":1,\"842\":1,\"846\":1}}],[\"配置自动类\",{\"1\":{\"821\":1}}],[\"配置浓缩在一个\",{\"1\":{\"819\":1}}],[\"配置改为\",{\"1\":{\"819\":1}}],[\"配置相应的依赖关系\",{\"1\":{\"794\":1}}],[\"配置类中使用\",{\"1\":{\"784\":1}}],[\"配置的属性值赋值给变量\",{\"1\":{\"784\":1}}],[\"配置的\",{\"1\":{\"784\":1}}],[\"配置提供者\",{\"1\":{\"687\":1}}],[\"配置路由的缺点就是必须多查询一次\",{\"1\":{\"531\":1}}],[\"配置路由设计简单\",{\"1\":{\"531\":1}}],[\"配置路由就是路由表\",{\"1\":{\"531\":1}}],[\"配置路由\",{\"1\":{\"531\":1}}],[\"配置默认的执行器\",{\"1\":{\"451\":1}}],[\"配置加载和缓存处理\",{\"1\":{\"449\":1}}],[\"配置文件方式\",{\"1\":{\"794\":2}}],[\"配置文件中\",{\"1\":{\"788\":1,\"819\":1}}],[\"配置文件开启aof\",{\"1\":{\"679\":1}}],[\"配置文件\",{\"1\":{\"448\":1,\"793\":1}}],[\"配置java对象与数据库表的对应关系\",{\"1\":{\"434\":1}}],[\"配置java对象与sql语句执行结果的对应关系\",{\"1\":{\"434\":1}}],[\"配置\",{\"0\":{\"928\":1},\"1\":{\"805\":1,\"819\":1},\"2\":{\"139\":1,\"142\":1,\"149\":1,\"881\":1}}],[\"配置picgo\",{\"0\":{\"112\":1}}],[\"行走\",{\"1\":{\"694\":1}}],[\"行为的攻击都被称为\",{\"1\":{\"614\":1}}],[\"行数据\",{\"1\":{\"513\":1}}],[\"行锁\",{\"1\":{\"512\":1}}],[\"行\",{\"1\":{\"291\":1,\"458\":3}}],[\"行业内通用的技术实现标准\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"函数时\",{\"1\":{\"664\":1}}],[\"函数加⼊内核中的红⿊树⾥\",{\"1\":{\"664\":1}}],[\"函数将fd\",{\"1\":{\"664\":1}}],[\"函数会唤醒被阻塞到该共享变量上的一个线程\",{\"1\":{\"302\":1}}],[\"函数\",{\"1\":{\"302\":1,\"305\":1,\"440\":1,\"859\":1}}],[\"函数在的线程就是这个进程中的一个线程\",{\"1\":{\"299\":1}}],[\"函数其实就启动了一个jvm进程\",{\"1\":{\"299\":1}}],[\"函数作为参数传递到方法中\",{\"1\":{\"291\":1}}],[\"函数调用的是\",{\"1\":{\"167\":1}}],[\"究竟是怎么起作用的呢\",{\"1\":{\"289\":1}}],[\"呢\",{\"1\":{\"289\":1,\"592\":2,\"787\":1}}],[\"正如前面所说\",{\"1\":{\"589\":1}}],[\"正因为需要使用内存映射机制\",{\"1\":{\"772\":1}}],[\"正因为如此\",{\"1\":{\"771\":1}}],[\"正因为\",{\"1\":{\"553\":1}}],[\"正确使用联合索引\",{\"1\":{\"489\":1}}],[\"正常情况本地事务执行完成\",{\"1\":{\"765\":1}}],[\"正常情况下jvm就不会退出\",{\"1\":{\"305\":1}}],[\"正常关闭服务器时\",{\"1\":{\"483\":1}}],[\"正在复制主节点\",{\"1\":{\"685\":1}}],[\"正在处理任务事务控制\",{\"1\":{\"371\":1}}],[\"正在跑的和正在等待的任务都停下了\",{\"1\":{\"358\":1}}],[\"正在等待一\",{\"1\":{\"342\":1,\"647\":1}}],[\"正是因为反射\",{\"1\":{\"289\":1}}],[\"正射\",{\"1\":{\"289\":1}}],[\"正好是\",{\"1\":{\"167\":1}}],[\"正好相当于一个\",{\"1\":{\"167\":1}}],[\"像上面一样尝试移除entry\",{\"1\":{\"777\":1}}],[\"像twemproxy\",{\"1\":{\"710\":1}}],[\"像是身份证\",{\"1\":{\"557\":1}}],[\"像slect\",{\"1\":{\"487\":1}}],[\"像插件\",{\"1\":{\"448\":1}}],[\"像这样的停顿\",{\"1\":{\"402\":1}}],[\"像什么数据清洗啊\",{\"1\":{\"352\":1}}],[\"像\",{\"1\":{\"289\":2,\"554\":1}}],[\"像常见的\",{\"1\":{\"287\":1}}],[\"像我们熟悉的注册中心zookeeper\",{\"1\":{\"192\":1}}],[\"没人会去自己写分布式锁的命令\",{\"1\":{\"727\":1}}],[\"没法通过客户端的请求删除本地缓存的key\",{\"1\":{\"709\":1}}],[\"没法完成自动故障转移\",{\"1\":{\"687\":1}}],[\"没法做到实时持久化\",{\"1\":{\"677\":1}}],[\"没听懂再讲一遍\",{\"1\":{\"581\":1}}],[\"没错\",{\"1\":{\"568\":1}}],[\"没写具体是解析啥\",{\"1\":{\"287\":1}}],[\"没有考虑服务器的实际负载情况\",{\"1\":{\"851\":1}}],[\"没有声明注解事务\",{\"1\":{\"813\":1}}],[\"没有数据库的事务支持\",{\"1\":{\"808\":1}}],[\"没有解耦\",{\"1\":{\"788\":1}}],[\"没有面向接口\",{\"1\":{\"788\":1}}],[\"没有确认\",{\"1\":{\"756\":1}}],[\"没有在\",{\"1\":{\"742\":1}}],[\"没有在指定的\",{\"1\":{\"302\":1}}],[\"没有\",{\"1\":{\"717\":1}}],[\"没有退出\",{\"1\":{\"613\":1}}],[\"没有界限的一串数据\",{\"1\":{\"595\":1}}],[\"没有已发送未确认报⽂\",{\"1\":{\"584\":1}}],[\"没有已发送未确认报⽂时\",{\"1\":{\"584\":1}}],[\"没有收到对方发送的\",{\"1\":{\"584\":1}}],[\"没有收到服务器端的\",{\"1\":{\"574\":1}}],[\"没有必要再多一次握手导致花费更多的时间建立连接\",{\"1\":{\"569\":1}}],[\"没有其他事务对数据进行修改\",{\"1\":{\"515\":1}}],[\"没有匹配到任何记录的时候\",{\"1\":{\"513\":1}}],[\"没有匹配关系进行筛选\",{\"1\":{\"458\":1}}],[\"没有唯一性的限制\",{\"1\":{\"495\":1}}],[\"没有对上面的更新语句进行保存\",{\"1\":{\"482\":1}}],[\"没有保存表的总行数\",{\"1\":{\"477\":1}}],[\"没有用到索引\",{\"1\":{\"464\":1}}],[\"没有字符集\",{\"1\":{\"462\":1}}],[\"没有select\",{\"1\":{\"451\":1}}],[\"没有server赢得多数的选票\",{\"1\":{\"222\":1}}],[\"没有预编译处理\",{\"1\":{\"439\":1}}],[\"没有特别含义\",{\"1\":{\"385\":1}}],[\"没有所谓的非空闲时间\",{\"1\":{\"363\":1}}],[\"没有范型\",{\"1\":{\"285\":1}}],[\"没有具体的作用\",{\"1\":{\"282\":1}}],[\"没有超时时间这个概念\",{\"1\":{\"272\":1}}],[\"没有取到才会创建新的对象\",{\"1\":{\"269\":1}}],[\"没有什么使我停留\",{\"1\":{\"186\":1,\"227\":1,\"294\":2,\"373\":2,\"429\":2,\"454\":2,\"538\":2,\"617\":2,\"664\":1,\"736\":2,\"778\":2,\"824\":2,\"877\":1}}],[\"给这个消息做一个唯一主键\",{\"1\":{\"757\":1}}],[\"给缓存设置一个合理的过期时间\",{\"1\":{\"708\":1}}],[\"给各位朋友介绍一下这份手册\",{\"1\":{\"619\":1}}],[\"给发送的每一个包进行编号\",{\"1\":{\"581\":1}}],[\"给被动关闭⽅\",{\"1\":{\"576\":1}}],[\"给\",{\"1\":{\"513\":1}}],[\"给定范围检索数据\",{\"1\":{\"493\":1}}],[\"给编译器用的\",{\"1\":{\"287\":1}}],[\"给冲突元素找个空位\",{\"1\":{\"171\":1}}],[\"戴什么眼镜\",{\"1\":{\"287\":1}}],[\"官方已宣布停止维护\",{\"1\":{\"857\":1}}],[\"官方推荐的配置中心\",{\"1\":{\"841\":1}}],[\"官方推出的微服务治理框架\",{\"1\":{\"824\":1}}],[\"官方faq表示\",{\"1\":{\"673\":1}}],[\"官方解释\",{\"1\":{\"673\":1}}],[\"官方手册得知删除数据的速度和创建的索引数量是成正比的\",{\"1\":{\"536\":1}}],[\"官方称它为\",{\"1\":{\"385\":1}}],[\"官方名叫\",{\"1\":{\"285\":1}}],[\"官方中文站\",{\"1\":{\"115\":1}}],[\"泛型常用的通配符有哪些\",{\"1\":{\"285\":1}}],[\"泛型方法\",{\"1\":{\"285\":2}}],[\"泛型接口\",{\"1\":{\"285\":2}}],[\"泛型类\",{\"1\":{\"285\":2}}],[\"泛型一般有三种使用方式\",{\"1\":{\"285\":1}}],[\"泛型的本质是参数化类型\",{\"1\":{\"285\":1}}],[\"泛型提供了编译时类型安全检测机制\",{\"1\":{\"285\":1}}],[\"泛型了解么\",{\"0\":{\"285\":1}}],[\"泛型\",{\"0\":{\"284\":1},\"1\":{\"285\":1}}],[\"底层传输协议其实也是用的http2\",{\"1\":{\"845\":1}}],[\"底层实现为数组\",{\"1\":{\"729\":1}}],[\"底层结构\",{\"0\":{\"728\":1}}],[\"底层并不了解上层业务数据的具体含义\",{\"1\":{\"595\":1}}],[\"底层使用\",{\"1\":{\"559\":1}}],[\"底层定义了一个\",{\"1\":{\"448\":1}}],[\"底层是数据\",{\"1\":{\"280\":1}}],[\"底层就是基于\",{\"1\":{\"186\":1}}],[\"示意图\",{\"1\":{\"280\":1}}],[\"方案三\",{\"0\":{\"695\":1}}],[\"方案二\",{\"0\":{\"694\":1}}],[\"方案一\",{\"0\":{\"693\":1}}],[\"方式要更为合适一些\",{\"1\":{\"806\":1}}],[\"方式\",{\"1\":{\"641\":1,\"762\":1}}],[\"方式适用于连接数目比较小且固定的架构\",{\"1\":{\"280\":1}}],[\"方便查看\",{\"1\":{\"805\":1}}],[\"方便的\",{\"1\":{\"791\":1}}],[\"方便集成各种优秀框架\",{\"1\":{\"782\":1}}],[\"方便一次将整个文件映射至内存\",{\"1\":{\"772\":1}}],[\"方便结合公司自己的业务二次开发\",{\"1\":{\"742\":1}}],[\"方便存储和传输\",{\"1\":{\"282\":1}}],[\"方便我们平时对字符进行流操作\",{\"1\":{\"279\":1}}],[\"方法等\",{\"1\":{\"859\":1}}],[\"方法此时\",{\"1\":{\"813\":1}}],[\"方法内部抛了异常\",{\"1\":{\"813\":1}}],[\"方法内通过对象锁实现\",{\"1\":{\"178\":1}}],[\"方法有\",{\"1\":{\"813\":1}}],[\"方法有什么作用\",{\"0\":{\"267\":1}}],[\"方法织入\",{\"1\":{\"807\":1}}],[\"方法解析出\",{\"1\":{\"802\":1}}],[\"方法注入的时候\",{\"1\":{\"799\":1}}],[\"方法完成调用类所需依赖的注入\",{\"1\":{\"795\":1}}],[\"方法不同\",{\"1\":{\"777\":1}}],[\"方法向broker端发送通信请求\",{\"1\":{\"777\":1}}],[\"方法会间接调用\",{\"1\":{\"813\":1}}],[\"方法会根据消费者通信类型为\",{\"1\":{\"777\":1}}],[\"方法会从topicpublishinfo中的messagequeuelist中选择一个队列\",{\"1\":{\"776\":1}}],[\"方法最终调用的是rebalanceimpl类的rebalancebytopic\",{\"1\":{\"777\":1}}],[\"方法可以将该主机\",{\"1\":{\"605\":1}}],[\"方法可以非常简单地实现对象的浅拷贝\",{\"1\":{\"260\":1}}],[\"方法字段\",{\"1\":{\"556\":1}}],[\"方法是通过\",{\"1\":{\"554\":1}}],[\"方法发现a\",{\"1\":{\"442\":1}}],[\"方法4\",{\"1\":{\"436\":1}}],[\"方法3\",{\"1\":{\"436\":1}}],[\"方法2\",{\"1\":{\"436\":1}}],[\"方法1\",{\"1\":{\"436\":1}}],[\"方法即可\",{\"1\":{\"426\":1}}],[\"方法比较容易排查\",{\"1\":{\"417\":1}}],[\"方法临返回前\",{\"1\":{\"402\":1}}],[\"方法了解吗\",{\"0\":{\"393\":1}}],[\"方法关闭连接\",{\"1\":{\"389\":1}}],[\"方法区内存空间不足\",{\"1\":{\"399\":1}}],[\"方法区中的数据存储格式完全由虚拟机实现自行定义\",{\"1\":{\"422\":1}}],[\"方法区中常量引用的对象\",{\"1\":{\"391\":1}}],[\"方法区中类静态属性引用的对象\",{\"1\":{\"391\":1}}],[\"方法区是比较特别的一块区域\",{\"1\":{\"379\":1}}],[\"方法区\",{\"1\":{\"379\":1}}],[\"方法服务\",{\"1\":{\"379\":1}}],[\"方法执行时\",{\"1\":{\"379\":1}}],[\"方法执行的线程内存模型\",{\"1\":{\"379\":1}}],[\"方法来进行清除\",{\"1\":{\"389\":1}}],[\"方法来获取返回值\",{\"1\":{\"357\":1}}],[\"方法来设置一个值\",{\"1\":{\"306\":1}}],[\"方法来设置线程的中断标志为true\",{\"1\":{\"302\":1}}],[\"方法用于提交需要返回值的任务\",{\"1\":{\"357\":1}}],[\"方法添加一个任务时\",{\"1\":{\"353\":1}}],[\"方法尝试获取许可证\",{\"1\":{\"348\":1}}],[\"方法归还许可证\",{\"1\":{\"348\":1}}],[\"方法获取该messagequeue对象的下一个进度消费值offset\",{\"1\":{\"777\":1}}],[\"方法获取一个许可证\",{\"1\":{\"348\":1}}],[\"方法获取到原先设置的值\",{\"1\":{\"306\":1}}],[\"方法中一共调用了两次后置处理器\",{\"1\":{\"802\":1}}],[\"方法中会调用\",{\"1\":{\"802\":1}}],[\"方法中\",{\"1\":{\"333\":1}}],[\"方法实现\",{\"1\":{\"330\":1}}],[\"方法结合实现等待\",{\"1\":{\"330\":1}}],[\"方法配合try\",{\"1\":{\"330\":1}}],[\"方法释放资源\",{\"1\":{\"417\":1}}],[\"方法释放内存空间\",{\"1\":{\"311\":1}}],[\"方法释放了锁\",{\"1\":{\"272\":1}}],[\"方法之外\",{\"1\":{\"306\":1}}],[\"方法则会唤醒所有在该共享变量上由于调用\",{\"1\":{\"302\":1}}],[\"方法后\",{\"1\":{\"302\":2}}],[\"方法多了一个超时参数\",{\"1\":{\"302\":1}}],[\"方法时会遍历容器中所有的切面\",{\"1\":{\"812\":1}}],[\"方法时会执行run\",{\"0\":{\"301\":1}}],[\"方法时\",{\"1\":{\"302\":2}}],[\"方法启动线程\",{\"1\":{\"300\":1}}],[\"方法进行设置\",{\"1\":{\"427\":1}}],[\"方法进行对应的处理\",{\"1\":{\"289\":1}}],[\"方法进行处理\",{\"1\":{\"266\":1}}],[\"方法上\",{\"1\":{\"287\":1,\"784\":4}}],[\"方法一样\",{\"1\":{\"272\":1}}],[\"方法一般是比较两个对象的内容是否相同\",{\"1\":{\"257\":1}}],[\"方法没有释放锁\",{\"1\":{\"272\":1}}],[\"方法并且进行调用的话会发生\",{\"1\":{\"272\":1}}],[\"方法为\",{\"1\":{\"267\":1}}],[\"方法的定义类\",{\"1\":{\"822\":1}}],[\"方法的异常\",{\"1\":{\"813\":1}}],[\"方法的时候\",{\"1\":{\"812\":1}}],[\"方法的源码如下\",{\"1\":{\"802\":1}}],[\"方法的最后\",{\"1\":{\"314\":1}}],[\"方法的参数上的注解\",{\"1\":{\"289\":1}}],[\"方法的调用\",{\"1\":{\"266\":1,\"442\":1}}],[\"方法的重载和重写都是实现多态的方式\",{\"1\":{\"249\":1}}],[\"方法只会被调用一次\",{\"1\":{\"256\":1}}],[\"方法和\",{\"1\":{\"784\":1}}],[\"方法和类\",{\"1\":{\"256\":1}}],[\"方法和构造方法的访问\",{\"1\":{\"250\":1}}],[\"方法\",{\"0\":{\"301\":2},\"1\":{\"250\":4,\"256\":1,\"270\":1,\"272\":6,\"289\":1,\"292\":1,\"300\":3,\"301\":2,\"302\":4,\"303\":1,\"310\":1,\"314\":1,\"325\":1,\"333\":1,\"347\":1,\"349\":2,\"367\":2,\"379\":1,\"393\":1,\"426\":1,\"427\":1,\"428\":1,\"453\":1,\"777\":5,\"784\":1,\"795\":1,\"802\":5,\"806\":2,\"812\":1,\"813\":2,\"817\":2,\"865\":1}}],[\"方法名一致\",{\"1\":{\"249\":1}}],[\"方法重载的规则\",{\"1\":{\"249\":1}}],[\"篇幅限制\",{\"1\":{\"448\":1}}],[\"篇幅所限\",{\"1\":{\"441\":1}}],[\"篇幅有限\",{\"1\":{\"278\":1}}],[\"篇👍\",{\"1\":{\"186\":6,\"227\":6,\"294\":6,\"373\":6,\"429\":6,\"454\":6,\"538\":6,\"617\":6,\"664\":6,\"736\":6,\"778\":6,\"824\":6,\"877\":6}}],[\"装载了模型数据和视图信息\",{\"1\":{\"815\":1}}],[\"装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能\",{\"1\":{\"804\":1}}],[\"装入\",{\"1\":{\"418\":1}}],[\"装饰器模式就不展开说了\",{\"1\":{\"278\":1}}],[\"装饰器模式\",{\"1\":{\"278\":1}}],[\"装箱\",{\"1\":{\"240\":2}}],[\"按类型匹配等\",{\"1\":{\"790\":1}}],[\"按功能来看一下一些常用的注解\",{\"1\":{\"784\":1}}],[\"按一定的时间做退避\",{\"1\":{\"776\":1}}],[\"按顺序逐个检查\",{\"1\":{\"672\":1}}],[\"按ctrl+\",{\"1\":{\"641\":1}}],[\"按ctrl+c键将产生该信号\",{\"1\":{\"641\":1}}],[\"按剩余运行时间的顺序进行调度\",{\"1\":{\"640\":1}}],[\"按优先级进行调度\",{\"1\":{\"640\":1}}],[\"按估计运行时间最短的顺序进行调度\",{\"1\":{\"640\":1}}],[\"按工作原理\",{\"1\":{\"448\":1}}],[\"按某种速率周期执行\",{\"1\":{\"365\":1}}],[\"按fifo排序任务\",{\"1\":{\"356\":1}}],[\"按fifo排序量\",{\"1\":{\"356\":1}}],[\"按照配置的顺序依次执行\",{\"1\":{\"865\":1}}],[\"按照某种规则\",{\"1\":{\"790\":1}}],[\"按照请求的顺序进行调度\",{\"1\":{\"640\":1}}],[\"按照\",{\"1\":{\"553\":1}}],[\"按照字段的活跃性\",{\"1\":{\"530\":1}}],[\"按照一定策略\",{\"1\":{\"529\":1,\"530\":1}}],[\"按照业务归属不同\",{\"1\":{\"529\":1}}],[\"按照生成的执行计划调用数据库引擎接口\",{\"1\":{\"473\":1}}],[\"按照垃圾收集\",{\"1\":{\"394\":1}}],[\"按照虚拟机规范\",{\"1\":{\"379\":1}}],[\"按照流的角色划分为节点流和处理流\",{\"1\":{\"278\":1}}],[\"按照流的流向分\",{\"1\":{\"278\":1}}],[\"按照操作单元划分\",{\"1\":{\"278\":1}}],[\"按下\",{\"1\":{\"38\":1,\"40\":1,\"42\":1}}],[\"流量管理\",{\"1\":{\"836\":1}}],[\"流量控制\",{\"1\":{\"581\":1,\"831\":1,\"857\":1,\"864\":1}}],[\"流量控制的一个手段\",{\"1\":{\"580\":1}}],[\"流程如图所示\",{\"1\":{\"774\":1}}],[\"流程如下\",{\"1\":{\"676\":1}}],[\"流程图如下\",{\"1\":{\"615\":1}}],[\"流水线\",{\"1\":{\"668\":1}}],[\"流氓软件等等\",{\"1\":{\"611\":1}}],[\"流入水管\",{\"1\":{\"585\":1}}],[\"流模式\",{\"1\":{\"558\":1}}],[\"流中的元素总数\",{\"1\":{\"294\":1}}],[\"流一般用于集合\",{\"1\":{\"294\":1}}],[\"流\",{\"1\":{\"294\":2}}],[\"流用过吗\",{\"0\":{\"294\":1}}],[\"流用到了什么设计模式\",{\"1\":{\"278\":1}}],[\"流就干脆提供了一个直接操作字符的接口\",{\"1\":{\"279\":1}}],[\"流体系还用到了一个设计模式\",{\"1\":{\"278\":1}}],[\"流的\",{\"1\":{\"278\":1}}],[\"流共涉及\",{\"1\":{\"278\":1}}],[\"流按照不同的特点\",{\"1\":{\"278\":1}}],[\"流分为几种\",{\"0\":{\"278\":1}}],[\"吗\",{\"0\":{\"805\":1},\"1\":{\"276\":1,\"788\":1}}],[\"仅在当前\",{\"1\":{\"797\":1}}],[\"仅在事务提交前进行提交\",{\"1\":{\"480\":1}}],[\"仅仅表示客户端不再发送数据了但是还能接收数据\",{\"1\":{\"575\":1}}],[\"仅仅起着占位符的作用\",{\"1\":{\"385\":1}}],[\"仅检索给定范围内的行\",{\"1\":{\"493\":1}}],[\"仅存在于面试题中\",{\"1\":{\"276\":1}}],[\"仅拷贝被拷贝对象的成员变量的值\",{\"1\":{\"260\":1}}],[\"题目\",{\"1\":{\"276\":3}}],[\"必然会导致主线程的阻塞\",{\"1\":{\"718\":1}}],[\"必然存在一个线程\",{\"1\":{\"342\":1,\"647\":1}}],[\"必看👍\",{\"1\":{\"623\":13}}],[\"必执行的代码\",{\"1\":{\"275\":1}}],[\"必须刷到commitlog日志文件中才算成功\",{\"1\":{\"774\":1}}],[\"必须保证顺序\",{\"1\":{\"759\":1}}],[\"必须先执⾏加锁操作\",{\"1\":{\"645\":1}}],[\"必须依靠辅助的算法来完成传输控制\",{\"1\":{\"598\":1}}],[\"必须依存于某一实例\",{\"1\":{\"254\":1}}],[\"必须按照规定的格式和遵循一定的规则\",{\"1\":{\"555\":1}}],[\"必须使用分布式事务来解决\",{\"1\":{\"534\":1}}],[\"必须到下一次垃圾收集才能处理\",{\"1\":{\"405\":1}}],[\"必须暂停所有的用户线程\",{\"1\":{\"402\":1}}],[\"必须暂停其他所有工作线程\",{\"1\":{\"401\":1}}],[\"必须把共享变量的最新值刷新到主内存中\",{\"1\":{\"326\":1}}],[\"必须得先说说进程\",{\"1\":{\"299\":1}}],[\"必须指定t的具体类型\",{\"1\":{\"285\":1}}],[\"必须从\",{\"1\":{\"280\":1}}],[\"必须在由程序运⾏期间才能决定\",{\"1\":{\"248\":1}}],[\"捕获异常的时候还可以选择加上\",{\"1\":{\"275\":1}}],[\"捕获异常并进行处理\",{\"1\":{\"275\":1}}],[\"捕获异常\",{\"1\":{\"275\":1}}],[\"抛出异常后\",{\"1\":{\"366\":1}}],[\"抛出异常有三种形式\",{\"1\":{\"275\":1}}],[\"抛去一些边界之类的看看核心代码\",{\"1\":{\"270\":1}}],[\"又重新开始迭代\",{\"1\":{\"830\":1}}],[\"又一个名为\",{\"1\":{\"796\":1}}],[\"又一层层解封\",{\"1\":{\"544\":1}}],[\"又可以分为静态工厂方法注入和非静态工厂方法注入\",{\"1\":{\"795\":1}}],[\"又\",{\"1\":{\"777\":1}}],[\"又保证数据的定期更新\",{\"1\":{\"712\":1}}],[\"又称为树状拓扑结构\",{\"1\":{\"683\":1}}],[\"又称为星形拓扑结构\",{\"1\":{\"683\":1}}],[\"又不断迭代新功能\",{\"1\":{\"622\":1}}],[\"又被称为互联网协议\",{\"1\":{\"602\":1}}],[\"又使用\",{\"1\":{\"600\":1}}],[\"又有两个比较重要的概念\",{\"1\":{\"865\":1}}],[\"又有点兴奋\",{\"1\":{\"621\":1}}],[\"又有\",{\"0\":{\"607\":1}}],[\"又有有个\",{\"1\":{\"513\":1}}],[\"又有什么用\",{\"1\":{\"282\":1}}],[\"又引用了这个指针来分配内存\",{\"1\":{\"384\":1}}],[\"又会进compute方法\",{\"1\":{\"373\":1}}],[\"又手忙脚乱地给那个打一勺\",{\"1\":{\"298\":1}}],[\"又分为两种\",{\"1\":{\"274\":1}}],[\"又分为error和exception\",{\"1\":{\"274\":1}}],[\"又变回\",{\"1\":{\"221\":1}}],[\"反编译一段synchronized修饰代码块代码\",{\"1\":{\"325\":1}}],[\"反射机制还可以获知实现类的结构信息\",{\"1\":{\"796\":1}}],[\"反射型\",{\"1\":{\"615\":1}}],[\"反射就是去获取这些信息\",{\"1\":{\"289\":1}}],[\"反射的原理\",{\"1\":{\"289\":1}}],[\"反射的应用场景\",{\"1\":{\"289\":1}}],[\"反射最核心的四个类\",{\"1\":{\"289\":1}}],[\"反射\",{\"0\":{\"288\":1},\"1\":{\"272\":1,\"788\":1}}],[\"反之没有必要\",{\"1\":{\"359\":1}}],[\"反之\",{\"1\":{\"239\":1,\"258\":1,\"425\":1,\"806\":1}}],[\"反之就尾插法\",{\"1\":{\"181\":1}}],[\"毫秒\",{\"1\":{\"272\":1,\"354\":1}}],[\"毫无疑问\",{\"1\":{\"160\":1,\"315\":1,\"707\":1}}],[\"范围外的\",{\"1\":{\"612\":1}}],[\"范围路由的一个比较隐含的缺点是分布不均匀\",{\"1\":{\"531\":1}}],[\"范围路由的优点是可以随着数据的增加平滑地扩充新的表\",{\"1\":{\"531\":1}}],[\"范围路由设计的复杂点主要体现在分段大小的选取上\",{\"1\":{\"531\":1}}],[\"范围路由\",{\"1\":{\"531\":1}}],[\"范围是\",{\"1\":{\"272\":1}}],[\"范例\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"本质就是一个大工厂\",{\"1\":{\"788\":1}}],[\"本质是解决查找问题\",{\"1\":{\"732\":1}}],[\"本质上说的是\",{\"1\":{\"560\":1}}],[\"本质上它的流程就是这样就是这样\",{\"1\":{\"346\":1}}],[\"本来想跟踪着\",{\"1\":{\"413\":1}}],[\"本次垃圾收集无法处理浮动垃圾\",{\"1\":{\"405\":1}}],[\"本身并不提供\",{\"1\":{\"819\":1}}],[\"本身\",{\"1\":{\"789\":1}}],[\"本身的特性导致的\",{\"1\":{\"559\":1}}],[\"本身其实并没有对数据的长度进行限制\",{\"1\":{\"554\":1}}],[\"本身是有长度限制的\",{\"1\":{\"553\":1}}],[\"本身不需要被修改\",{\"1\":{\"386\":1}}],[\"本身没有实现\",{\"1\":{\"272\":1}}],[\"本地\",{\"1\":{\"547\":3}}],[\"本地缓存可以设置相对短一些的过期时间\",{\"1\":{\"709\":1}}],[\"本地缓存和分布式缓存怎么保持数据一致\",{\"1\":{\"709\":1}}],[\"本地缓存+分布式缓存\",{\"1\":{\"709\":1}}],[\"本地缓存\",{\"1\":{\"446\":1}}],[\"本地方法栈中\",{\"1\":{\"391\":1}}],[\"本地方法栈\",{\"1\":{\"379\":2}}],[\"本地方法栈和程序计数器是线程隔离的数据区\",{\"1\":{\"379\":1}}],[\"本地内存是jmm的\",{\"1\":{\"317\":1}}],[\"本地内存中存储了该线程以读\",{\"1\":{\"317\":1}}],[\"本地消息表这种方案实现了最终一致性\",{\"1\":{\"205\":1}}],[\"本地消息表的核心思想是将分布式事务拆分成本地事务进行处理\",{\"1\":{\"205\":1}}],[\"本地消息表了解吗\",{\"0\":{\"205\":1}}],[\"本地消息表\",{\"1\":{\"201\":1}}],[\"本地的图片就可以上传到gitee中了\",{\"1\":{\"116\":1}}],[\"转而支持新的api网关项目\",{\"1\":{\"864\":1}}],[\"转址旁路缓存\",{\"1\":{\"655\":1}}],[\"转⽽跳转到中断处理程序\",{\"1\":{\"633\":1}}],[\"转义\",{\"1\":{\"615\":1}}],[\"转换为\",{\"1\":{\"414\":1,\"418\":1}}],[\"转换\",{\"1\":{\"294\":1}}],[\"转成\",{\"1\":{\"270\":1,\"767\":1}}],[\"转为链表\",{\"1\":{\"161\":1}}],[\"搞了个缓存池\",{\"1\":{\"269\":1}}],[\"到学校报名啦\",{\"1\":{\"793\":2}}],[\"到磁盘来保证数据的一致性和持久性\",{\"1\":{\"770\":1}}],[\"到期后\",{\"1\":{\"764\":1}}],[\"到期任务是指scheduledfuturetask的time大于等于当前时间\",{\"1\":{\"365\":1}}],[\"到腾出足够空间为止\",{\"1\":{\"717\":1}}],[\"到达后\",{\"1\":{\"698\":1}}],[\"到达了\",{\"1\":{\"592\":1}}],[\"到⽤户空间\",{\"1\":{\"662\":1}}],[\"到收到确认信号的时间\",{\"1\":{\"591\":1}}],[\"到服务端\",{\"1\":{\"573\":1}}],[\"到底设置多大呢\",{\"1\":{\"591\":1}}],[\"到底有什么不同呢\",{\"1\":{\"566\":1}}],[\"到底如何做呢\",{\"1\":{\"342\":1}}],[\"到显示主页的过程\",{\"0\":{\"546\":1}}],[\"到此\",{\"1\":{\"428\":1}}],[\"到从内存中卸载\",{\"1\":{\"421\":1}}],[\"到了现在\",{\"1\":{\"782\":1}}],[\"到了更新的时间\",{\"1\":{\"663\":1}}],[\"到了目的地之后\",{\"1\":{\"544\":1}}],[\"到了数据链路层\",{\"1\":{\"544\":1}}],[\"到了这里\",{\"1\":{\"448\":1}}],[\"到了\",{\"1\":{\"381\":1}}],[\"到\",{\"1\":{\"269\":2,\"463\":2,\"465\":1,\"748\":1,\"765\":1}}],[\"到处运行\",{\"1\":{\"232\":1}}],[\"大体上相同\",{\"1\":{\"817\":1}}],[\"大体上省简的升级过程\",{\"1\":{\"329\":1}}],[\"大多是无状态的\",{\"1\":{\"798\":1}}],[\"大多数情况下\",{\"1\":{\"476\":1}}],[\"大多数\",{\"1\":{\"472\":1}}],[\"大多数基于网络的客户端\",{\"1\":{\"472\":1}}],[\"大多数选民\",{\"1\":{\"219\":1}}],[\"大key会造成什么问题呢\",{\"1\":{\"719\":1}}],[\"大key问题了解吗\",{\"0\":{\"719\":1}}],[\"大量key在同一时间过期\",{\"1\":{\"704\":1}}],[\"大量积压\",{\"1\":{\"528\":1}}],[\"大大提高了集群的响应能力\",{\"1\":{\"691\":1}}],[\"大大减少了\",{\"1\":{\"553\":1}}],[\"大致流程如下\",{\"1\":{\"689\":1}}],[\"大致上可以这么选择\",{\"1\":{\"476\":1}}],[\"大\",{\"1\":{\"673\":1,\"725\":1}}],[\"大小就加\",{\"1\":{\"586\":1}}],[\"大于\",{\"1\":{\"582\":1}}],[\"大白话说四次挥手\",{\"1\":{\"574\":1}}],[\"大表添加字段\",{\"1\":{\"537\":1}}],[\"大家都知道\",{\"1\":{\"621\":1}}],[\"大家好\",{\"1\":{\"431\":1,\"540\":1,\"619\":1}}],[\"大家可能会以为结果应该是\",{\"1\":{\"276\":1}}],[\"大家可以自行实验\",{\"1\":{\"266\":1}}],[\"大部分的组件不需要开发人员创建和管理\",{\"1\":{\"816\":1}}],[\"大部分公司都会有\",{\"1\":{\"417\":1}}],[\"大部分都在用cpu跟内存\",{\"1\":{\"359\":1}}],[\"大对象\",{\"1\":{\"417\":1}}],[\"大对象直接进入老年代\",{\"1\":{\"400\":1}}],[\"大概可以从这几个方面来看\",{\"1\":{\"837\":1}}],[\"大概可以分为六类\",{\"1\":{\"272\":1}}],[\"大概分为这么几步\",{\"1\":{\"690\":1}}],[\"大概\",{\"1\":{\"554\":1}}],[\"大概的过程比较简单\",{\"1\":{\"546\":1}}],[\"大概的一个\",{\"1\":{\"413\":1}}],[\"大概是全网最全的计算机网络面试题\",{\"1\":{\"540\":1}}],[\"大约有\",{\"1\":{\"783\":1}}],[\"大约每秒都会刷新一次log\",{\"1\":{\"483\":1}}],[\"大约\",{\"1\":{\"407\":1}}],[\"大任务拆成了若干个小任务\",{\"1\":{\"373\":1}}],[\"大乔\",{\"1\":{\"345\":4}}],[\"差别不大\",{\"1\":{\"464\":1}}],[\"差\",{\"1\":{\"266\":1}}],[\"号寝\",{\"1\":{\"557\":1}}],[\"号宿舍楼\",{\"1\":{\"557\":1}}],[\"号文件开头\",{\"1\":{\"483\":1}}],[\"号文件末尾后就回到\",{\"1\":{\"483\":1}}],[\"号\",{\"1\":{\"439\":1}}],[\"号进行处理\",{\"1\":{\"266\":1}}],[\"号拼接进行了优化\",{\"1\":{\"266\":1}}],[\"经\",{\"1\":{\"725\":1}}],[\"经典的四次挥手\",{\"1\":{\"621\":1}}],[\"经理该怎么办呢\",{\"1\":{\"353\":1}}],[\"经理赶紧出来了\",{\"1\":{\"353\":1}}],[\"经理就让她们接着休息\",{\"1\":{\"353\":1}}],[\"经理一看\",{\"1\":{\"353\":1}}],[\"经过大规模实践验证的微服务组件\",{\"1\":{\"830\":1}}],[\"经过参数优化配置\",{\"1\":{\"742\":1}}],[\"经过一段时间\",{\"1\":{\"532\":1}}],[\"经过两个线程操作之后可能i不等于3\",{\"1\":{\"340\":1}}],[\"经过拼接新生成了\",{\"1\":{\"266\":1}}],[\"经常被用在需要释放资源的情况下\",{\"1\":{\"256\":1}}],[\"之上的\",{\"1\":{\"809\":1}}],[\"之类的网站来练习\",{\"1\":{\"457\":1}}],[\"之中\",{\"1\":{\"425\":1}}],[\"之后再访问这个数据\",{\"1\":{\"703\":1}}],[\"之后根据参数offset在自身复制积压缓冲区查找\",{\"1\":{\"685\":1}}],[\"之后开始变成多线程\",{\"1\":{\"673\":1}}],[\"之后是c\",{\"1\":{\"672\":1}}],[\"之后便不再需要\",{\"1\":{\"657\":1}}],[\"之后变成了\",{\"1\":{\"475\":1}}],[\"之后的消息都没有被消费过\",{\"1\":{\"744\":1}}],[\"之后的\",{\"1\":{\"427\":1}}],[\"之后才被引入\",{\"1\":{\"427\":1}}],[\"之后\",{\"1\":{\"400\":2,\"446\":1,\"482\":2,\"574\":1,\"663\":1,\"787\":1,\"813\":1}}],[\"之后对象的移区操作中增加\",{\"1\":{\"400\":1}}],[\"之后有一批对象需要放入老年代\",{\"1\":{\"399\":1}}],[\"之后老年代空间不足\",{\"1\":{\"399\":1}}],[\"之间服务器进程突然挂掉了\",{\"1\":{\"727\":1}}],[\"之间的关系\",{\"1\":{\"695\":1}}],[\"之间的磁盘块\",{\"1\":{\"501\":1}}],[\"之间的转化\",{\"1\":{\"283\":1}}],[\"之间\",{\"1\":{\"269\":1,\"523\":1}}],[\"之前不执行\",{\"1\":{\"724\":1}}],[\"之前的所有数据都已收到\",{\"1\":{\"594\":1}}],[\"之前的版本要尽量避免使用\",{\"1\":{\"489\":1}}],[\"之前写过一篇\",{\"1\":{\"551\":1}}],[\"之前检查老年代\",{\"1\":{\"399\":1}}],[\"之前使用永久代作为方法区的实现\",{\"1\":{\"379\":1}}],[\"之前我们有一个和第三方对接的需求\",{\"1\":{\"352\":1}}],[\"之前是没有泛型的\",{\"1\":{\"285\":1}}],[\"之前\",{\"1\":{\"266\":1,\"276\":1,\"475\":1,\"514\":1}}],[\"之所以不使用\",{\"1\":{\"465\":1}}],[\"之所以不用平衡二叉树\",{\"1\":{\"162\":1}}],[\"之所以不用二叉树\",{\"1\":{\"162\":1}}],[\"之所以\",{\"1\":{\"326\":1}}],[\"之所以称为短路运算是因为\",{\"1\":{\"241\":1}}],[\"很显然\",{\"1\":{\"743\":1}}],[\"很显然可以看到\",{\"1\":{\"266\":1}}],[\"很好解决了\",{\"1\":{\"664\":1}}],[\"很快它就会被填满\",{\"1\":{\"483\":1}}],[\"很可能导致内存泄漏的发生\",{\"1\":{\"389\":1}}],[\"很可能存在内存泄漏\",{\"1\":{\"389\":1}}],[\"很久以前\",{\"1\":{\"291\":1}}],[\"很少会接触到直接使用反射机制的场景\",{\"1\":{\"289\":1}}],[\"很简单\",{\"1\":{\"269\":1,\"311\":1,\"788\":1}}],[\"很明显\",{\"1\":{\"265\":1}}],[\"很多时候单体能搞定的也可以用单体\",{\"1\":{\"829\":1}}],[\"很多时候我们可能都需要用\",{\"1\":{\"241\":1}}],[\"很多发布订阅\",{\"1\":{\"729\":1}}],[\"很多开源项目如kafka\",{\"1\":{\"662\":1}}],[\"很多朋友看完\",{\"1\":{\"621\":1}}],[\"很多优化策略在\",{\"1\":{\"492\":1}}],[\"很多使用自旋cas的地方\",{\"1\":{\"337\":1}}],[\"很多其它场景的cookie\",{\"1\":{\"309\":1}}],[\"很多传统的数据库分布式事务都属于这种模式\",{\"1\":{\"192\":1}}],[\"跟踪进去的时候总是卡死\",{\"1\":{\"413\":1}}],[\"跟踪各个\",{\"1\":{\"404\":1}}],[\"跟之前的\",{\"1\":{\"272\":1}}],[\"跟\",{\"1\":{\"264\":1,\"272\":1,\"784\":1}}],[\"跟随者\",{\"1\":{\"221\":3}}],[\"任意时刻\",{\"1\":{\"584\":1}}],[\"任意对象为值的存储结构\",{\"1\":{\"306\":1}}],[\"任务有结果\",{\"1\":{\"373\":1}}],[\"任务大于阈值就拆分任务\",{\"1\":{\"373\":1}}],[\"任务代码可能抛出runtimeexception\",{\"1\":{\"366\":1}}],[\"任务的执行时间比较长\",{\"1\":{\"365\":1}}],[\"任务分为计算密集型\",{\"1\":{\"359\":1}}],[\"任务队列是作为参数传进来的\",{\"1\":{\"353\":1}}],[\"任何想进⼊临界区的线程\",{\"1\":{\"645\":1}}],[\"任何时刻计数器为零的对象就是不可能再被使用的\",{\"1\":{\"390\":1}}],[\"任何语言\",{\"1\":{\"377\":1}}],[\"任何一个线程都能并发访问localvariable\",{\"1\":{\"308\":1}}],[\"任何对\",{\"1\":{\"264\":1}}],[\"任期\",{\"1\":{\"221\":1}}],[\"无需再像\",{\"1\":{\"819\":1}}],[\"无限套娃\",{\"1\":{\"799\":1}}],[\"无本质区别\",{\"1\":{\"743\":1}}],[\"无底洞问题如何优化呢\",{\"1\":{\"713\":1}}],[\"无底洞问题吗\",{\"0\":{\"713\":1}}],[\"无底洞\",{\"1\":{\"713\":1}}],[\"无用连接的释放\",{\"1\":{\"673\":1}}],[\"无类别域间路由\",{\"1\":{\"605\":1}}],[\"无超时\",{\"1\":{\"599\":1}}],[\"无停顿\",{\"1\":{\"403\":2}}],[\"无法做到像编程式事务那样可以作用到代码块级别\",{\"1\":{\"809\":1}}],[\"无法进行代理\",{\"1\":{\"806\":1}}],[\"无法抉择\",{\"1\":{\"784\":1}}],[\"无法保证一致性\",{\"1\":{\"706\":1}}],[\"无法利用前缀索引做\",{\"1\":{\"489\":1}}],[\"无法容纳的对象直接送入老年代\",{\"1\":{\"400\":1}}],[\"无法被父类加载器加载的类最终会通过这个方法被加载\",{\"1\":{\"426\":1}}],[\"无法被其他线程访问\",{\"1\":{\"408\":1}}],[\"无法被\",{\"1\":{\"389\":1,\"423\":1}}],[\"无法被继承\",{\"1\":{\"263\":1}}],[\"无法办理业务时的处理方式\",{\"1\":{\"355\":1}}],[\"无法办理的时候银行给出的解决方法对应\",{\"1\":{\"353\":1}}],[\"无法重复利用\",{\"1\":{\"346\":1}}],[\"无锁\",{\"1\":{\"327\":1}}],[\"无论请求是否正确执行\",{\"1\":{\"479\":1}}],[\"无论当前内存是否足够\",{\"1\":{\"392\":1}}],[\"无论任何情况下\",{\"1\":{\"392\":1}}],[\"无论是从父类继承的\",{\"1\":{\"385\":1}}],[\"无论是\",{\"1\":{\"282\":1}}],[\"无论是否抛出异常\",{\"1\":{\"256\":1}}],[\"无论是2pc还是3pc都不能保证分布式系统中的数据100\",{\"1\":{\"203\":1}}],[\"无论成功还是失败\",{\"1\":{\"207\":1}}],[\"无论访问n1还是n2\",{\"1\":{\"191\":1}}],[\"无论你把这个md文件发给谁他就可以看见图片了\",{\"1\":{\"116\":1}}],[\"个服务类的三个方法通过\",{\"1\":{\"811\":1}}],[\"个接口\",{\"1\":{\"793\":1}}],[\"个消息能按顺序消费即可\",{\"1\":{\"759\":1}}],[\"个别节点出现ops过大的情况\",{\"1\":{\"710\":1}}],[\"个主节点部署在一台机器上\",{\"1\":{\"698\":1}}],[\"个槽\",{\"1\":{\"695\":1}}],[\"个槽位中\",{\"1\":{\"313\":1}}],[\"个实际节点\",{\"1\":{\"695\":1}}],[\"个比特\",{\"1\":{\"617\":1}}],[\"个重复\",{\"1\":{\"589\":1}}],[\"个连续重复的\",{\"1\":{\"588\":1}}],[\"个确认\",{\"1\":{\"586\":1}}],[\"个的\",{\"1\":{\"586\":2}}],[\"个探测报文段后仍然无客户端的响应\",{\"1\":{\"577\":1}}],[\"个字节的\",{\"1\":{\"584\":3}}],[\"个字节\",{\"1\":{\"582\":4,\"734\":2}}],[\"个字节存储字符\",{\"1\":{\"466\":1}}],[\"个字符\",{\"1\":{\"554\":2}}],[\"个数据库表\",{\"1\":{\"531\":1}}],[\"个数不同\",{\"1\":{\"249\":1}}],[\"个叶子节点\",{\"1\":{\"502\":1}}],[\"个指针\",{\"1\":{\"502\":1}}],[\"个这样的\",{\"1\":{\"502\":1}}],[\"个对象非常多\",{\"1\":{\"418\":1}}],[\"个对象类型\",{\"1\":{\"415\":1}}],[\"个对象的内存地址是否相等\",{\"1\":{\"272\":1}}],[\"个参数\",{\"1\":{\"334\":1}}],[\"个抽象类基类中派生出来的\",{\"1\":{\"278\":1}}],[\"个方法\",{\"1\":{\"272\":1}}],[\"个\",{\"1\":{\"263\":1,\"272\":1,\"576\":1,\"583\":2,\"586\":5,\"587\":3}}],[\"机构的私钥\",{\"1\":{\"564\":1}}],[\"机器\",{\"1\":{\"609\":3}}],[\"机器的cpu核心数\",{\"1\":{\"359\":1}}],[\"机器指令的执行顺序\",{\"1\":{\"319\":1}}],[\"机器码\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"机制就是\",{\"1\":{\"593\":1}}],[\"机制来处理并发事务\",{\"1\":{\"519\":1}}],[\"机制来保证修改的原子性\",{\"1\":{\"331\":1}}],[\"机制\",{\"1\":{\"261\":2,\"592\":1,\"730\":1}}],[\"序列号\",{\"1\":{\"581\":2}}],[\"序列化对象可以很大程度上将其压缩\",{\"1\":{\"283\":1}}],[\"序列化的选择很多\",{\"1\":{\"283\":1}}],[\"序列化的时候是不包含静态变量的\",{\"1\":{\"282\":1}}],[\"序列化方式有很多\",{\"1\":{\"283\":1}}],[\"序列化不包含静态变量\",{\"1\":{\"282\":1}}],[\"序列化就是把\",{\"1\":{\"282\":1}}],[\"序列化\",{\"0\":{\"281\":1},\"1\":{\"260\":1,\"283\":2,\"817\":1}}],[\"序号在目录下最小\",{\"1\":{\"197\":1}}],[\"序号\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"浅拷贝如何实现呢\",{\"1\":{\"260\":1}}],[\"浅拷贝的话如果有引用类型\",{\"1\":{\"260\":1}}],[\"浅拷贝\",{\"1\":{\"260\":1}}],[\"键将产生该信号\",{\"1\":{\"641\":1}}],[\"键值存储等功能\",{\"1\":{\"835\":1}}],[\"键值数据库由于通常采用哈希函数将\",{\"1\":{\"713\":1}}],[\"键值+指针\",{\"1\":{\"502\":1}}],[\"键值中的\",{\"1\":{\"285\":1}}],[\"键值类型自带的哈希函数\",{\"1\":{\"167\":1}}],[\"键\",{\"1\":{\"258\":1}}],[\"哈希算法会根据请求的某个特定属性\",{\"1\":{\"851\":1}}],[\"哈希算法\",{\"1\":{\"851\":1}}],[\"哈希主要有以下典型应用场景\",{\"1\":{\"670\":1}}],[\"哈希类型是指键值本身又是一个键值对结构\",{\"1\":{\"670\":1}}],[\"哈希\",{\"1\":{\"668\":1}}],[\"哈希码\",{\"1\":{\"385\":1}}],[\"哈希码主要在哈希表这类集合映射的时候用到\",{\"1\":{\"258\":1}}],[\"哈希表存储的是键值对\",{\"1\":{\"258\":1}}],[\"么\",{\"1\":{\"258\":1}}],[\"⽅法占⽤的锁是当前实例对象锁\",{\"1\":{\"324\":1}}],[\"⽅法占⽤的锁是当前类的锁\",{\"1\":{\"324\":1}}],[\"⽅法也必须被覆盖\",{\"1\":{\"258\":1}}],[\"⽅法被覆盖过\",{\"1\":{\"258\":1}}],[\"⽅法都返回\",{\"1\":{\"258\":1}}],[\"⽅法\",{\"1\":{\"257\":2,\"258\":2,\"324\":2,\"592\":1}}],[\"⽅法名\",{\"1\":{\"254\":3}}],[\"启动大致流程如下\",{\"1\":{\"822\":1}}],[\"启动原理\",{\"0\":{\"822\":1}}],[\"启动类上的注解\",{\"1\":{\"820\":1}}],[\"启动类加载器它就加载不到厂商提供的\",{\"1\":{\"427\":1}}],[\"启动类加载器\",{\"1\":{\"423\":1}}],[\"启动之后会实例化所有的\",{\"1\":{\"793\":1}}],[\"启动之后实例化\",{\"1\":{\"791\":1}}],[\"启动生产者\",{\"1\":{\"763\":1}}],[\"启动需要花费很长的时间\",{\"1\":{\"680\":1}}],[\"启动时加载数据的流程\",{\"1\":{\"679\":1}}],[\"启动时会调用\",{\"1\":{\"305\":1}}],[\"启动效率低\",{\"1\":{\"677\":1}}],[\"启动线程b\",{\"1\":{\"320\":1}}],[\"启动线程\",{\"1\":{\"300\":1}}],[\"启动\",{\"1\":{\"256\":1}}],[\"依次从⼀级到三级缓存查询\",{\"1\":{\"800\":1}}],[\"依次判断下一个位置是否空闲\",{\"1\":{\"171\":1}}],[\"依赖的服务还在不断发起请求\",{\"1\":{\"853\":1}}],[\"依赖\",{\"1\":{\"805\":1,\"821\":1}}],[\"依赖注入\",{\"1\":{\"787\":1}}],[\"依赖半消息\",{\"1\":{\"765\":1}}],[\"依然可以保存最近一段时间的写命令数据\",{\"1\":{\"685\":1}}],[\"依此类推\",{\"1\":{\"523\":1}}],[\"依存于类的实例\",{\"1\":{\"254\":1}}],[\"静态工厂\",{\"1\":{\"795\":1}}],[\"静态工厂顾名思义\",{\"1\":{\"795\":1}}],[\"静态工厂注入\",{\"1\":{\"795\":1}}],[\"静态集合的生命周期和\",{\"1\":{\"389\":1}}],[\"静态集合类引起内存泄漏\",{\"1\":{\"389\":1}}],[\"静态内部类\",{\"1\":{\"333\":1}}],[\"静态⽅法和实例⽅法有何不同\",{\"1\":{\"254\":1}}],[\"静态变量等移出\",{\"1\":{\"381\":1}}],[\"静态变量可以实现让多个对象共享内存\",{\"1\":{\"254\":1}}],[\"静态变量在内存中有且仅有一个副本\",{\"1\":{\"254\":1}}],[\"静态变量\",{\"1\":{\"254\":1,\"379\":1,\"380\":1}}],[\"静态变量和实例变量的区别\",{\"0\":{\"254\":1},\"1\":{\"254\":1}}],[\"静态方法里不能访问类的非静态成员变量和方法\",{\"1\":{\"254\":1}}],[\"静态方法\",{\"0\":{\"254\":1},\"1\":{\"254\":1,\"795\":1}}],[\"⼀级缓存中保存着实例化\",{\"1\":{\"800\":1}}],[\"⼀直等到内核数据准备好\",{\"1\":{\"663\":1}}],[\"⼀共增加\",{\"1\":{\"587\":1}}],[\"⼀开始初始化\",{\"1\":{\"586\":1}}],[\"⼀般来说\",{\"1\":{\"585\":1}}],[\"⼀个表针指向最⽼的⻚⾯\",{\"1\":{\"658\":1}}],[\"⼀个是\",{\"1\":{\"641\":1}}],[\"⼀个\",{\"1\":{\"579\":1}}],[\"⼀个类可以实现多个接⼝\",{\"1\":{\"252\":1}}],[\"⼀来⼀去正好\",{\"1\":{\"576\":1}}],[\"⼀定也是相同的\",{\"1\":{\"258\":1}}],[\"⼀种情况例外\",{\"1\":{\"253\":1}}],[\"修复现有的小bug\",{\"1\":{\"622\":1}}],[\"修饰保证可见性\",{\"1\":{\"331\":1}}],[\"修饰代码块\",{\"1\":{\"324\":1}}],[\"修饰静态方法\",{\"1\":{\"324\":1}}],[\"修饰实例方法\",{\"1\":{\"324\":1}}],[\"修饰符修饰的变量\",{\"1\":{\"254\":1}}],[\"修饰\",{\"1\":{\"253\":1,\"263\":1,\"813\":1}}],[\"修饰的类不可被继承\",{\"1\":{\"256\":1}}],[\"修饰的类不可以被继承\",{\"1\":{\"255\":1}}],[\"修饰的变量值不会被持久化和恢复\",{\"1\":{\"282\":1}}],[\"修饰的变量必须被显式第指定初始值\",{\"1\":{\"255\":1}}],[\"修饰的变量不可变\",{\"1\":{\"255\":1,\"256\":1}}],[\"修饰的方法上\",{\"1\":{\"813\":2}}],[\"修饰的方法不可被重写\",{\"1\":{\"256\":1}}],[\"修饰的方法不可以被重写\",{\"1\":{\"255\":1}}],[\"修饰的方法\",{\"1\":{\"254\":1}}],[\"修饰的成员变量也必须显式地赋值\",{\"1\":{\"253\":1}}],[\"修饰的\",{\"1\":{\"253\":1,\"331\":1}}],[\"修改为低算法复杂度的命令\",{\"1\":{\"718\":1}}],[\"修改内存淘汰策略\",{\"1\":{\"715\":1}}],[\"修改配置文件\",{\"1\":{\"715\":1}}],[\"修改注册信息\",{\"1\":{\"612\":1}}],[\"修改同步状态成功即为获得锁\",{\"1\":{\"331\":1}}],[\"修改完之后就会把新的值刷新回主内存\",{\"1\":{\"322\":1}}],[\"修改库存表\",{\"1\":{\"205\":1}}],[\"修改了d1的数据\",{\"1\":{\"191\":1}}],[\"修改\",{\"1\":{\"157\":1,\"331\":1,\"536\":1}}],[\"修改图标\",{\"0\":{\"75\":1}}],[\"抽象层\",{\"1\":{\"783\":1}}],[\"抽象同步队列\",{\"1\":{\"331\":1}}],[\"抽象是对类的抽象\",{\"1\":{\"252\":1}}],[\"抽象⽅法就是为了被重写所以不能使⽤\",{\"1\":{\"252\":1}}],[\"抽象⽅法可以有\",{\"1\":{\"252\":1}}],[\"抽象类\",{\"0\":{\"252\":1}}],[\"⽽sds则保存了⻓度信息\",{\"1\":{\"729\":1}}],[\"⽽且⼀直占⽤内存\",{\"1\":{\"716\":1}}],[\"⽽且也需要在⽤户态与内核态之间拷⻉⽂件描述符集合\",{\"1\":{\"664\":1}}],[\"⽽且所⽀持的⽂件描述符的个数是有限制的\",{\"1\":{\"664\":1}}],[\"⽽暂时停⽌运⾏\",{\"1\":{\"637\":1}}],[\"⽽当程序使内核空间时\",{\"1\":{\"632\":1}}],[\"⽽内核空间的代码可以访问所有内存空间\",{\"1\":{\"632\":1}}],[\"⽽是渐进式的\",{\"1\":{\"729\":1}}],[\"⽽是⾃⼰实现的叫做简单动态字符串sds的抽象类型\",{\"1\":{\"729\":1}}],[\"⽽是以数据驱动重传\",{\"1\":{\"592\":1}}],[\"⽽是在程序运⾏期间才确定\",{\"1\":{\"248\":1}}],[\"⽽数据只有⼏个字节\",{\"1\":{\"584\":1}}],[\"⽽\",{\"1\":{\"561\":1,\"658\":1}}],[\"⽽访问⾮静态\",{\"1\":{\"324\":1}}],[\"⽽线程只独享必不可少的资源\",{\"1\":{\"642\":1}}],[\"⽽线程\",{\"1\":{\"324\":1}}],[\"⽽局部变量则不会⾃动赋值\",{\"1\":{\"253\":1}}],[\"⽽局部变量随着⽅法的调⽤⽽⾃动消失\",{\"1\":{\"253\":1}}],[\"⽽局部变量不能被访问控制修饰符及\",{\"1\":{\"253\":1}}],[\"⽽局部变量是在⽅法中定义的变量或是⽅法的参数\",{\"1\":{\"253\":1}}],[\"⽽接⼝是对⾏为的抽象\",{\"1\":{\"252\":1}}],[\"⽽抽象类中则不⼀定\",{\"1\":{\"252\":1}}],[\"⽽抽象类可以有⾮抽象的⽅法\",{\"1\":{\"252\":1}}],[\"形式\",{\"1\":{\"788\":1}}],[\"形成数字证书\",{\"1\":{\"564\":1}}],[\"形成死循环\",{\"1\":{\"177\":1}}],[\"形参与成员变量名字重名\",{\"1\":{\"251\":1}}],[\"种环绕方式\",{\"1\":{\"804\":1}}],[\"种自动装配类型\",{\"1\":{\"796\":1}}],[\"种现象称为缓存的\",{\"1\":{\"713\":1}}],[\"种引用强度依次逐渐减弱\",{\"1\":{\"392\":1}}],[\"种\",{\"1\":{\"251\":1,\"392\":1,\"512\":1}}],[\"种不同的访问权限\",{\"1\":{\"250\":1}}],[\"什么问题呢\",{\"1\":{\"663\":1}}],[\"什么时候会刷入磁盘\",{\"1\":{\"483\":1}}],[\"什么时候会触发\",{\"0\":{\"399\":1}}],[\"什么时候触发\",{\"0\":{\"398\":1}}],[\"什么也不写\",{\"1\":{\"250\":1}}],[\"什么是api网关\",{\"0\":{\"863\":1}}],[\"什么是服务降级\",{\"0\":{\"854\":1,\"856\":1}}],[\"什么是服务熔断\",{\"0\":{\"854\":1,\"855\":1}}],[\"什么是服务雪崩\",{\"0\":{\"853\":1}}],[\"什么是微服务\",{\"0\":{\"828\":1},\"1\":{\"824\":1}}],[\"什么是循环依赖\",{\"1\":{\"799\":1}}],[\"什么是自动装配\",{\"1\":{\"796\":1}}],[\"什么是自动拆箱\",{\"0\":{\"240\":1}}],[\"什么是无底洞问题\",{\"1\":{\"713\":1}}],[\"什么是热key\",{\"1\":{\"710\":1}}],[\"什么是缓存击穿\",{\"0\":{\"701\":1}}],[\"什么是交换空间\",{\"0\":{\"657\":1}}],[\"什么是块表\",{\"0\":{\"655\":1}}],[\"什么是虚拟内存\",{\"0\":{\"651\":1}}],[\"什么是死锁\",{\"0\":{\"646\":1}}],[\"什么是孤儿进程\",{\"0\":{\"639\":1}}],[\"什么是僵尸进程\",{\"0\":{\"638\":1}}],[\"什么是进程上下文切换\",{\"0\":{\"636\":1}}],[\"什么是用户态和内核态\",{\"0\":{\"632\":1}}],[\"什么是内存分页\",{\"0\":{\"653\":1}}],[\"什么是内存分段\",{\"0\":{\"652\":1}}],[\"什么是内核\",{\"0\":{\"631\":1}}],[\"什么是内连接\",{\"0\":{\"458\":1}}],[\"什么是操作系统\",{\"0\":{\"628\":1}}],[\"什么是拥塞窗⼝\",{\"1\":{\"585\":1}}],[\"什么是拥塞控制\",{\"1\":{\"585\":1}}],[\"什么是半连接队列\",{\"1\":{\"573\":1}}],[\"什么是路由呢\",{\"1\":{\"531\":1}}],[\"什么是幻读\",{\"0\":{\"521\":1}}],[\"什么是索引下推优化\",{\"0\":{\"510\":1}}],[\"什么是最左前缀原则\",{\"0\":{\"509\":1}}],[\"什么是双亲委派机制\",{\"0\":{\"424\":1}}],[\"什么是逃逸分析\",{\"1\":{\"408\":1}}],[\"什么是安全点\",{\"0\":{\"402\":1}}],[\"什么是空闲列表\",{\"0\":{\"383\":1}}],[\"什么是指针碰撞\",{\"0\":{\"383\":1}}],[\"什么是线程池\",{\"0\":{\"351\":1}}],[\"什么是线程上下文切换\",{\"0\":{\"304\":1}}],[\"什么是反射\",{\"0\":{\"289\":1},\"1\":{\"289\":1}}],[\"什么是反序列化\",{\"0\":{\"282\":1}}],[\"什么是泛型擦除\",{\"1\":{\"285\":1}}],[\"什么是泛型\",{\"1\":{\"285\":1}}],[\"什么是类型擦除\",{\"0\":{\"285\":1}}],[\"什么是序列化\",{\"0\":{\"282\":1},\"1\":{\"282\":1}}],[\"什么是字节码\",{\"0\":{\"235\":1}}],[\"什么是\",{\"0\":{\"231\":1,\"377\":1,\"402\":2,\"613\":1,\"614\":1,\"615\":1,\"787\":1},\"1\":{\"258\":1,\"269\":1,\"560\":1,\"573\":1,\"595\":1,\"613\":1}}],[\"什么是幂等性问题\",{\"1\":{\"224\":1}}],[\"什么是幂等性\",{\"1\":{\"224\":1}}],[\"什么是分布式事务\",{\"0\":{\"200\":1}}],[\"什么是硬状态呢\",{\"1\":{\"193\":1}}],[\"什么是基本可用呢\",{\"1\":{\"193\":1}}],[\"里也已经写入了响应\",{\"1\":{\"817\":1}}],[\"里存对象\",{\"1\":{\"788\":1}}],[\"里塞入日志\",{\"1\":{\"483\":1}}],[\"里记录货币用什么字段类型比较好\",{\"0\":{\"465\":1}}],[\"里\",{\"0\":{\"384\":1},\"1\":{\"379\":1,\"566\":2,\"788\":2,\"798\":1}}],[\"里禁止使用这种方式来创建线程池\",{\"1\":{\"360\":1}}],[\"里里只能有一个线程就诊\",{\"1\":{\"325\":1}}],[\"里不按套路出牌\",{\"1\":{\"276\":1}}],[\"里的值rehash到ht\",{\"1\":{\"731\":1}}],[\"里的行锁实现\",{\"0\":{\"513\":1}}],[\"里的很多\",{\"1\":{\"289\":1}}],[\"里的\",{\"1\":{\"276\":1}}],[\"里定义的方法\",{\"1\":{\"256\":1}}],[\"里氏代换原则\",{\"1\":{\"249\":1}}],[\"里面占一个\",{\"1\":{\"727\":1}}],[\"里面设置\",{\"1\":{\"560\":1}}],[\"里面设置超时时间\",{\"1\":{\"560\":1}}],[\"里面可以设置\",{\"1\":{\"560\":1}}],[\"里面可以自定义设置\",{\"1\":{\"113\":1}}],[\"里面\",{\"1\":{\"481\":1}}],[\"里面还会用到typehandler类型处理器\",{\"1\":{\"448\":1}}],[\"里面只规定了它是一个指向对象的引用\",{\"1\":{\"386\":1}}],[\"里面有copyonwritelist和concurrenthashmap这两种线程安全容器类的问答\",{\"1\":{\"372\":1}}],[\"里面有一个\",{\"1\":{\"260\":1}}],[\"里面没有一个线程\",{\"1\":{\"353\":1}}],[\"里面使用\",{\"1\":{\"276\":1}}],[\"里面的名称对应的是user类里面的成员属性\",{\"1\":{\"436\":1}}],[\"里面的名称对应的是map里面的key名称\",{\"1\":{\"436\":1}}],[\"里面的名称对应的是注解\",{\"1\":{\"436\":1}}],[\"里面的数字代表传入参数的顺序\",{\"1\":{\"436\":1}}],[\"里面的\",{\"1\":{\"276\":1,\"615\":1}}],[\"里面包含一个segment数组\",{\"1\":{\"180\":1}}],[\"⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法\",{\"1\":{\"248\":1}}],[\"⼦类可以拥有⾃⼰属性和⽅法\",{\"1\":{\"248\":1}}],[\"⼦类拥有⽗类对象所有的属性和⽅法\",{\"1\":{\"248\":1}}],[\"关键需要记住\",{\"1\":{\"558\":1}}],[\"关键业务读写操作全部指向主机\",{\"1\":{\"528\":1}}],[\"关键字synchronized可以修饰方法或者以同步块的形式来进行使用\",{\"1\":{\"306\":1}}],[\"关键字volatile可以用来修饰字段\",{\"1\":{\"306\":1}}],[\"关键字的作用是\",{\"1\":{\"282\":1}}],[\"关键字修饰即可\",{\"1\":{\"291\":1}}],[\"关键字修饰\",{\"1\":{\"252\":1,\"272\":1}}],[\"关键字扩展多个接⼝\",{\"1\":{\"252\":1}}],[\"关键字有什么作用\",{\"0\":{\"251\":1,\"255\":1}}],[\"关键字除以一个不大于哈希表长度的正整数p\",{\"1\":{\"170\":1}}],[\"关键字\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"178\":1,\"393\":1,\"492\":1,\"493\":1,\"879\":1}}],[\"关联太多的表\",{\"1\":{\"490\":1}}],[\"关联查询的时候要拿小表去驱动大表\",{\"1\":{\"490\":1}}],[\"关联查询分类和产品表\",{\"1\":{\"441\":1}}],[\"关联表多时\",{\"1\":{\"433\":1}}],[\"关闭状态\",{\"0\":{\"576\":1}}],[\"关闭连接时\",{\"1\":{\"575\":1}}],[\"关闭连接\",{\"1\":{\"574\":1}}],[\"关闭过程进行了记录\",{\"1\":{\"479\":1}}],[\"关闭会话\",{\"1\":{\"435\":1}}],[\"关闭线程池\",{\"1\":{\"357\":1}}],[\"关注二哥的公众号\",{\"1\":{\"624\":1}}],[\"关注老年代内存使用是否达到阀值\",{\"1\":{\"418\":1}}],[\"关注\",{\"1\":{\"414\":1}}],[\"关于dubbo\",{\"1\":{\"851\":1}}],[\"关于源码\",{\"1\":{\"793\":1}}],[\"关于排序问题\",{\"1\":{\"732\":1}}],[\"关于索引\",{\"1\":{\"536\":1}}],[\"关于它的实现\",{\"1\":{\"523\":1}}],[\"关于二进制日志\",{\"1\":{\"479\":1}}],[\"关于一些并发容器\",{\"1\":{\"372\":1}}],[\"关于多线程\",{\"1\":{\"306\":1}}],[\"关于继承有以下三个要点\",{\"1\":{\"248\":1}}],[\"⾯向对象\",{\"1\":{\"247\":1}}],[\"⾯向对象和⾯向过程的区别\",{\"0\":{\"247\":1}}],[\"⾯向过程\",{\"1\":{\"247\":1}}],[\"笔试面试可能会碰到的奇葩题\",{\"1\":{\"245\":1}}],[\"笔记\",{\"0\":{\"902\":1},\"2\":{\"52\":1,\"78\":1,\"81\":1,\"84\":1,\"102\":1,\"105\":1,\"118\":1,\"121\":1,\"124\":1,\"127\":1,\"130\":1}}],[\"减少对后端服务的请求次数\",{\"1\":{\"863\":1}}],[\"减少网络开销和资源占用\",{\"1\":{\"858\":1}}],[\"减少网络通信次数\",{\"1\":{\"713\":1}}],[\"减少业务代码的污染\",{\"1\":{\"809\":1}}],[\"减少用户态与内核态的上下文切换和内存拷贝的次数\",{\"1\":{\"773\":1}}],[\"减少重建缓存的次数\",{\"1\":{\"712\":1}}],[\"减少拥塞状态\",{\"1\":{\"586\":1}}],[\"减少了上下文切换\",{\"1\":{\"726\":1}}],[\"减少了客户端与服务端之间的网络调用次数\",{\"1\":{\"726\":1}}],[\"减少了内核和⽤户空间⼤量的数据拷⻉和内存分配\",{\"1\":{\"664\":1}}],[\"减少了交互次数\",{\"1\":{\"559\":1}}],[\"减少了回表的次数\",{\"1\":{\"510\":1}}],[\"减少不必要的cpu上下文切换\",{\"1\":{\"327\":1}}],[\"减少操作系统互斥量带来的性能消耗\",{\"1\":{\"327\":1}}],[\"减少\",{\"1\":{\"294\":1}}],[\"减少hash碰撞\",{\"1\":{\"168\":1}}],[\"减\",{\"1\":{\"245\":4,\"645\":1}}],[\"乘以\",{\"0\":{\"244\":1}}],[\"继续属性赋值\",{\"1\":{\"800\":1}}],[\"继续放到缓冲队列\",{\"1\":{\"582\":1}}],[\"继续按照上边的步骤判断可见性\",{\"1\":{\"523\":1}}],[\"继续执行\",{\"1\":{\"363\":1}}],[\"继续执行下次循环\",{\"1\":{\"243\":1}}],[\"继承自\",{\"1\":{\"813\":1}}],[\"继承了\",{\"1\":{\"791\":1}}],[\"继承thread类\",{\"1\":{\"300\":2}}],[\"继承是使⽤已存在的类的定义作为基础创建新的类\",{\"1\":{\"248\":1}}],[\"继承\",{\"1\":{\"232\":1,\"248\":2}}],[\"逻辑消费队列\",{\"1\":{\"771\":2}}],[\"逻辑执行失败了\",{\"1\":{\"756\":1}}],[\"逻辑架构图主要分三层\",{\"1\":{\"472\":1}}],[\"逻辑操作业务处理等\",{\"1\":{\"359\":1}}],[\"逻辑\",{\"1\":{\"314\":1}}],[\"逻辑或运算符\",{\"1\":{\"241\":1}}],[\"逻辑与跟短路与的差别是非常巨大的\",{\"1\":{\"241\":1}}],[\"逻辑与\",{\"1\":{\"241\":1}}],[\"右连接\",{\"1\":{\"459\":1}}],[\"右连接有有什么区别\",{\"0\":{\"459\":1}}],[\"右边的表达式会被直接短路掉\",{\"1\":{\"241\":1}}],[\"右移\",{\"1\":{\"167\":1}}],[\"左边补零\",{\"1\":{\"771\":1}}],[\"左边的值之后\",{\"1\":{\"509\":1}}],[\"左边的表达式的值是\",{\"1\":{\"241\":1}}],[\"左右\",{\"1\":{\"554\":1}}],[\"左表就是驱动表\",{\"1\":{\"490\":1}}],[\"左连接查询或者右连接查询查询关联的字段编码格式不一样\",{\"1\":{\"498\":1}}],[\"左连接\",{\"0\":{\"459\":1}}],[\"左旋和右旋\",{\"1\":{\"163\":1}}],[\"短时间内对于生产者和消费者并不会产生太大影响\",{\"1\":{\"770\":1}}],[\"短作业优先\",{\"1\":{\"640\":1}}],[\"短路与\",{\"1\":{\"241\":1}}],[\"短信通知\",{\"1\":{\"207\":1}}],[\"举个例子\",{\"1\":{\"586\":1}}],[\"举个例⼦\",{\"1\":{\"257\":1}}],[\"举个大家更熟悉的例子\",{\"1\":{\"192\":1}}],[\"举例\",{\"1\":{\"240\":1,\"454\":1}}],[\"封箱\",{\"0\":{\"240\":1}}],[\"封装一个pullrequest\",{\"1\":{\"778\":1}}],[\"封装了消息的拉取\",{\"1\":{\"751\":1}}],[\"封装把⼀个对象的属性私有化\",{\"1\":{\"248\":1}}],[\"封装\",{\"1\":{\"232\":1,\"248\":1}}],[\"封装出一个\",{\"1\":{\"178\":1}}],[\"型\",{\"1\":{\"239\":2,\"615\":1}}],[\"型散列值\",{\"1\":{\"167\":1}}],[\"属于静态织入\",{\"1\":{\"807\":1}}],[\"属于编译时增强\",{\"1\":{\"807\":1}}],[\"属于运行时增强\",{\"1\":{\"807\":1}}],[\"属于\",{\"1\":{\"467\":2}}],[\"属于4种类型的原子更新方式\",{\"1\":{\"340\":1}}],[\"属于下转型\",{\"1\":{\"239\":1}}],[\"属性中\",{\"1\":{\"822\":2}}],[\"属性填充\",{\"1\":{\"802\":1}}],[\"属性等信息\",{\"1\":{\"796\":1}}],[\"属性注入\",{\"1\":{\"795\":2}}],[\"属性赋值\",{\"1\":{\"793\":2,\"800\":2,\"802\":1}}],[\"属性值是不是在\",{\"1\":{\"523\":1}}],[\"属性值在\",{\"1\":{\"523\":1}}],[\"属性值大于\",{\"1\":{\"523\":1}}],[\"属性值小于\",{\"1\":{\"523\":1}}],[\"属性值与\",{\"1\":{\"523\":1}}],[\"属性上等\",{\"1\":{\"287\":1}}],[\"属性和方法\",{\"1\":{\"255\":1}}],[\"属性\",{\"1\":{\"183\":1,\"289\":2,\"677\":1,\"796\":1}}],[\"属性为\",{\"0\":{\"90\":1,\"91\":1}}],[\"属性局部设置\",{\"1\":{\"31\":1}}],[\"属性改变元素的动画顺序\",{\"1\":{\"29\":1}}],[\"属性自定义幻灯片背景\",{\"1\":{\"19\":1}}],[\"小段\",{\"1\":{\"584\":1}}],[\"小表驱动大表\",{\"1\":{\"490\":1}}],[\"小时\",{\"1\":{\"354\":1}}],[\"小姐姐比较辛苦\",{\"1\":{\"353\":1}}],[\"小约翰伤心欲绝\",{\"1\":{\"346\":1}}],[\"小约翰在亲政后认识了新垣结衣\",{\"1\":{\"346\":1}}],[\"小约翰生平有两大恨\",{\"1\":{\"346\":1}}],[\"小杯里的水倒进大杯没问题\",{\"1\":{\"239\":1}}],[\"小数double\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"强调的是服务之间的远程调用\",{\"1\":{\"845\":1}}],[\"强调将应用程序拆分为相互独立的服务\",{\"1\":{\"828\":1}}],[\"强制开启长连接\",{\"1\":{\"558\":1}}],[\"强制类型转换\",{\"0\":{\"239\":1}}],[\"强大\",{\"1\":{\"434\":1}}],[\"强\",{\"1\":{\"413\":1}}],[\"强引用对象滞空\",{\"1\":{\"392\":3}}],[\"强引用是最传统的引用的定义\",{\"1\":{\"392\":1}}],[\"强一致性\",{\"1\":{\"192\":1,\"835\":1,\"836\":1}}],[\"生态系统|集成了spring\",{\"1\":{\"846\":1}}],[\"生态系统集成的解决方案\",{\"1\":{\"831\":1}}],[\"生命周期里初始化的过程相对步骤会多一些\",{\"1\":{\"793\":1}}],[\"生命周期吗\",{\"0\":{\"793\":1}}],[\"生命周期\",{\"0\":{\"435\":1},\"1\":{\"793\":1}}],[\"生成全局事务id\",{\"1\":{\"872\":1}}],[\"生成的代理对象来管理\",{\"1\":{\"813\":1}}],[\"生成一个代理对象实例\",{\"1\":{\"806\":1}}],[\"生成一个计算任务\",{\"1\":{\"373\":1}}],[\"生成目标类的代理对象\",{\"1\":{\"806\":1}}],[\"生成会话工厂\",{\"1\":{\"448\":1}}],[\"生成\",{\"1\":{\"418\":2}}],[\"生成字节码\",{\"1\":{\"236\":1}}],[\"生产产品\",{\"1\":{\"788\":1}}],[\"生产端需要做到把同\",{\"1\":{\"760\":1}}],[\"生产\",{\"0\":{\"754\":1}}],[\"生产阶段\",{\"1\":{\"753\":1}}],[\"生产者在第一次发送消息的时候从nameserver获取到broker地址后缓存到本地\",{\"1\":{\"770\":1}}],[\"生产者的消息都是发送给master\",{\"1\":{\"755\":1}}],[\"生产者\",{\"1\":{\"744\":1,\"746\":1}}],[\"生产者就是发布者\",{\"1\":{\"743\":1}}],[\"生产者往某个队列里面发送消息\",{\"1\":{\"743\":1}}],[\"生产消费模型等等\",{\"1\":{\"306\":1}}],[\"生产的速度恒定\",{\"1\":{\"227\":1}}],[\"生产环境使用jdk1\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"命名为\",{\"1\":{\"821\":1}}],[\"命名管道是双向的\",{\"1\":{\"641\":1}}],[\"命名规范\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"命令的时候\",{\"1\":{\"726\":1}}],[\"命令将两条指令发送给\",{\"1\":{\"726\":1}}],[\"命令时\",{\"1\":{\"726\":1}}],[\"命令就可以一直往内存中生产消息\",{\"1\":{\"723\":1}}],[\"命令可以获取最近\",{\"1\":{\"718\":1}}],[\"命令本身的优化\",{\"1\":{\"713\":1}}],[\"命令实现\",{\"1\":{\"685\":1}}],[\"命令持续复制\",{\"1\":{\"684\":1}}],[\"命令写入\",{\"1\":{\"676\":1}}],[\"命令观察\",{\"1\":{\"538\":1}}],[\"命令分析\",{\"1\":{\"418\":1}}],[\"命令并结合\",{\"1\":{\"417\":1}}],[\"命令反编译字节码的结果\",{\"1\":{\"266\":1}}],[\"命令和其他的⼀些基础构件\",{\"1\":{\"233\":1}}],[\"运⾏状态\",{\"1\":{\"637\":1}}],[\"运⾏时环境\",{\"1\":{\"233\":1}}],[\"运输层\",{\"1\":{\"542\":1}}],[\"运输的时候把它拆了打包\",{\"1\":{\"282\":1}}],[\"运维\",{\"0\":{\"535\":1}}],[\"运行期织入\",{\"1\":{\"804\":1}}],[\"运行监控等切面功能\",{\"1\":{\"782\":1}}],[\"运行新的进程\",{\"1\":{\"640\":1}}],[\"运行时常量池\",{\"1\":{\"380\":1}}],[\"运行时异常\",{\"1\":{\"274\":1}}],[\"运行结果\",{\"1\":{\"346\":1,\"788\":1,\"793\":1,\"821\":1}}],[\"运行\",{\"1\":{\"303\":1,\"377\":1,\"479\":1}}],[\"运行状态\",{\"1\":{\"303\":1}}],[\"运算中出现致命错误\",{\"1\":{\"641\":1}}],[\"运算器执行算术逻辅运算\",{\"1\":{\"317\":1}}],[\"运算符可以放在变量之前\",{\"1\":{\"245\":1}}],[\"运算符\",{\"1\":{\"241\":1}}],[\"运算符是短路与运算\",{\"1\":{\"241\":1}}],[\"运算符有两种用法\",{\"1\":{\"241\":1}}],[\"运算结果也是\",{\"1\":{\"239\":1}}],[\"运算\",{\"1\":{\"168\":1,\"312\":1,\"531\":1}}],[\"运算要快\",{\"1\":{\"167\":1}}],[\"程序对文件进行顺序读写的速度几乎接近于内存的读写速度\",{\"1\":{\"772\":1}}],[\"程序都根据幂次定律\",{\"1\":{\"732\":1}}],[\"程序可以通过这些层来加快访问其它节点的速度\",{\"1\":{\"732\":1}}],[\"程序可能会有两种执行顺序\",{\"1\":{\"321\":1}}],[\"程序启动时很多内存页被用来初始化\",{\"1\":{\"657\":1}}],[\"程序是由若⼲个逻辑分段组成的\",{\"1\":{\"652\":1}}],[\"程序是通过\",{\"1\":{\"234\":1}}],[\"程序所使⽤的内存地址叫做虚拟内存地址\",{\"1\":{\"651\":1}}],[\"程序所需的所有内容的集合\",{\"1\":{\"233\":1}}],[\"程序退出信号\",{\"1\":{\"641\":1}}],[\"程序终止信号\",{\"1\":{\"641\":1}}],[\"程序则在内核态执⾏\",{\"1\":{\"632\":1}}],[\"程序等都是由一个\",{\"1\":{\"557\":1}}],[\"程序员\",{\"1\":{\"806\":2}}],[\"程序员五一被拉去相亲\",{\"1\":{\"551\":1}}],[\"程序员直接编写原生态\",{\"1\":{\"433\":1}}],[\"程序代码封装指在代码中抽象一个数据访问层\",{\"1\":{\"526\":1}}],[\"程序代码封装\",{\"1\":{\"526\":1}}],[\"程序代码封装和中间件封装\",{\"1\":{\"526\":1}}],[\"程序直接引用\",{\"1\":{\"423\":1}}],[\"程序频繁生成一些长生命周期的对象\",{\"1\":{\"417\":1}}],[\"程序会通过栈上的\",{\"1\":{\"386\":1}}],[\"程序计数器\",{\"1\":{\"379\":2}}],[\"程序顺序规则\",{\"1\":{\"320\":1}}],[\"程序的\",{\"1\":{\"678\":1}}],[\"程序的结果将会被改变\",{\"1\":{\"321\":1}}],[\"程序的执行分为编译和运行两步\",{\"1\":{\"289\":1}}],[\"程序的跨平台性\",{\"1\":{\"235\":1}}],[\"程序简单易理解\",{\"1\":{\"280\":1}}],[\"程序运行过程中\",{\"1\":{\"641\":2}}],[\"程序运行的时候\",{\"1\":{\"377\":1}}],[\"程序运行中出现异常\",{\"1\":{\"274\":1}}],[\"程序运行在\",{\"1\":{\"233\":1}}],[\"程序返回\",{\"1\":{\"243\":1}}],[\"程序要经过先编译\",{\"1\":{\"236\":1}}],[\"程序编译成\",{\"1\":{\"235\":1}}],[\"程序从源代码到运行主要有三步\",{\"1\":{\"235\":1}}],[\"程序经过编译之类产生的\",{\"1\":{\"235\":1}}],[\"程序\",{\"1\":{\"234\":1,\"417\":1,\"782\":1}}],[\"程序执行起点\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"允许同时存在多个api版本\",{\"1\":{\"863\":1}}],[\"允许\",{\"1\":{\"784\":1}}],[\"允许用户自定义函数进行过滤\",{\"1\":{\"762\":1}}],[\"允许的报文长度更长\",{\"1\":{\"600\":1}}],[\"允许服务器未经请求\",{\"1\":{\"558\":1}}],[\"允许为\",{\"1\":{\"495\":2}}],[\"允许没有任何索引和主键的表存在\",{\"1\":{\"477\":1}}],[\"允许一个线程二次请求自己持有对象锁的临界资源\",{\"1\":{\"326\":1}}],[\"允许把函数作为一个方法的参数\",{\"1\":{\"291\":1}}],[\"允许我们给接口添加一个非抽象的方法实现\",{\"1\":{\"291\":1}}],[\"允许程序员以优雅的思维方式进行复杂的编程\",{\"1\":{\"231\":1}}],[\"允许系统中的数据存在中间状态\",{\"1\":{\"193\":1}}],[\"哦\",{\"1\":{\"231\":1}}],[\"碎怂\",{\"1\":{\"231\":1}}],[\"万条\",{\"1\":{\"531\":1}}],[\"万来进行分表\",{\"1\":{\"531\":1}}],[\"万\",{\"1\":{\"531\":2}}],[\"万之间\",{\"1\":{\"531\":1}}],[\"万至\",{\"1\":{\"531\":1}}],[\"万左右的表\",{\"1\":{\"502\":1}}],[\"万物皆可集成spring\",{\"1\":{\"435\":1}}],[\"万字\",{\"1\":{\"229\":1,\"296\":1,\"375\":1,\"456\":1,\"540\":1,\"626\":1,\"666\":1,\"738\":1,\"780\":1,\"826\":1,\"877\":1}}],[\"万余字\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"敬请期待\",{\"1\":{\"227\":1}}],[\"微服务的实例一般非常多\",{\"1\":{\"840\":1}}],[\"微服务的各个组件和常见实现\",{\"1\":{\"832\":1}}],[\"微服务给系统开发带来了一些问题和挑战\",{\"1\":{\"832\":1}}],[\"微服务一般主要讨论的是spring\",{\"1\":{\"831\":1}}],[\"微服务网格\",{\"1\":{\"831\":1}}],[\"微服务框架\",{\"1\":{\"830\":1}}],[\"微服务之间通过网络进行通信\",{\"1\":{\"829\":1}}],[\"微服务带来了哪些挑战\",{\"0\":{\"829\":1}}],[\"微服务将应用程序拆分为更小的\",{\"1\":{\"828\":1}}],[\"微服务与单体服务的区别在于规模和部署方式\",{\"1\":{\"828\":1}}],[\"微服务可以看作是对soa思想的一种具体实践方式\",{\"1\":{\"828\":1}}],[\"微服务是一种特定的架构风格\",{\"1\":{\"828\":1}}],[\"微服务是在soa的基础上进一步发展而来\",{\"1\":{\"828\":1}}],[\"微服务后面有机会再扩展\",{\"1\":{\"824\":1}}],[\"微服务架构中的每个服务通常都需要一些配置信息\",{\"1\":{\"840\":1}}],[\"微服务架构涉及构建和管理分布式系统\",{\"1\":{\"829\":1}}],[\"微服务架构涉及多个独立部署的服务\",{\"1\":{\"829\":1}}],[\"微服务架构不是万金油\",{\"1\":{\"829\":1}}],[\"微服务架构强调将应用程序拆分为小型\",{\"1\":{\"828\":1}}],[\"微服务架构主要要解决哪些问题\",{\"1\":{\"824\":1}}],[\"微服务架构是一种架构模式\",{\"1\":{\"824\":1}}],[\"微服务化的核心就是将传统的一站式应用\",{\"1\":{\"824\":1}}],[\"微服务面试题八股文\",{\"1\":{\"623\":1}}],[\"微服务\",{\"1\":{\"620\":1,\"622\":1,\"624\":1,\"828\":1}}],[\"微服务相关的主题文章\",{\"1\":{\"227\":1}}],[\"微秒\",{\"1\":{\"354\":1}}],[\"微信搜\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"漏桶算法\",{\"1\":{\"227\":1}}],[\"计时器\",{\"1\":{\"576\":1}}],[\"计数\",{\"1\":{\"294\":1,\"326\":1,\"670\":1}}],[\"计数器值就减一\",{\"1\":{\"390\":1}}],[\"计数器值就加一\",{\"1\":{\"390\":1}}],[\"计数器就会\",{\"1\":{\"326\":1}}],[\"计数器比较简单粗暴\",{\"1\":{\"227\":1}}],[\"计数器\",{\"1\":{\"227\":1,\"325\":1,\"669\":1}}],[\"计算哈希值\",{\"1\":{\"851\":1}}],[\"计算出待拉取的消息队列\",{\"1\":{\"777\":1}}],[\"计算机能够并行运行多个进程\",{\"1\":{\"636\":1}}],[\"计算机网络面试题八股文\",{\"1\":{\"623\":1}}],[\"计算机网络\",{\"1\":{\"620\":1,\"623\":1,\"624\":1}}],[\"计算机网络体系结构\",{\"1\":{\"542\":1}}],[\"计算机基础\",{\"1\":{\"620\":1}}],[\"计算机蠕虫\",{\"1\":{\"611\":1}}],[\"计算机⽹络都处在⼀个共享的环境\",{\"1\":{\"585\":1}}],[\"计算\",{\"1\":{\"564\":1,\"591\":2}}],[\"计算1~n之间的和\",{\"1\":{\"373\":1}}],[\"计算密集型一般推荐线程池不要过大\",{\"1\":{\"359\":1}}],[\"计算密集型\",{\"1\":{\"359\":1}}],[\"计算hash\",{\"1\":{\"180\":1}}],[\"计算过程是向右移位1\",{\"1\":{\"169\":1}}],[\"计算数组下标\",{\"1\":{\"165\":1}}],[\"来帮助排查问题\",{\"1\":{\"867\":1}}],[\"来提前加载ribbon和其他相关组件\",{\"1\":{\"848\":1}}],[\"来提高消费能力\",{\"1\":{\"758\":1}}],[\"来处理\",{\"1\":{\"816\":1,\"817\":1}}],[\"来完成\",{\"1\":{\"815\":1}}],[\"来为\",{\"1\":{\"802\":1}}],[\"来发送消息\",{\"1\":{\"776\":1}}],[\"来发起多次的\",{\"1\":{\"560\":1}}],[\"来存储\",{\"1\":{\"771\":1}}],[\"来存储所关注的⽂件描述符\",{\"1\":{\"664\":1}}],[\"来解决单\",{\"1\":{\"760\":1}}],[\"来解决哈希冲突\",{\"1\":{\"731\":1}}],[\"来检查是否在broker存储成功\",{\"1\":{\"754\":1}}],[\"来体现的\",{\"1\":{\"744\":1}}],[\"来标识\",{\"1\":{\"744\":1}}],[\"来标识数据是否存在\",{\"1\":{\"705\":1}}],[\"来表示所有的key\",{\"1\":{\"729\":1}}],[\"来表示同步状态\",{\"1\":{\"331\":1}}],[\"来恢复内存状态\",{\"1\":{\"680\":1}}],[\"来降低数据源压力\",{\"1\":{\"669\":1}}],[\"来降低停顿时间\",{\"1\":{\"406\":1}}],[\"来进入内核态\",{\"1\":{\"633\":1}}],[\"来比喻内存泄露和内存溢出\",{\"1\":{\"621\":1}}],[\"来看一个例子\",{\"1\":{\"613\":1}}],[\"来看看它的主要工作流程\",{\"1\":{\"448\":1}}],[\"来看看具体的cas操作\",{\"1\":{\"341\":1}}],[\"来减少⼩报⽂的传输\",{\"1\":{\"584\":1}}],[\"来确定数据映射到哪一个节点上\",{\"1\":{\"693\":1}}],[\"来确定下一步应该搜索的方向\",{\"1\":{\"509\":1}}],[\"来确认这些节点当前是否可达\",{\"1\":{\"688\":1}}],[\"来确认这个过程\",{\"1\":{\"569\":1}}],[\"来保证消息的可靠传递\",{\"1\":{\"754\":1}}],[\"来保证服务器的身份是可信的\",{\"1\":{\"561\":1}}],[\"来保证线程安全\",{\"1\":{\"264\":1}}],[\"来去除需要关联的操作\",{\"1\":{\"534\":1}}],[\"来连表查询\",{\"1\":{\"534\":1}}],[\"来记录数据的更改\",{\"1\":{\"519\":1}}],[\"来说要慢很多\",{\"1\":{\"680\":1}}],[\"来说更强\",{\"1\":{\"504\":1}}],[\"来说\",{\"1\":{\"461\":2}}],[\"来源菜鸟教程\",{\"1\":{\"459\":1}}],[\"来获取对象\",{\"1\":{\"795\":1}}],[\"来获取它\",{\"1\":{\"423\":1}}],[\"来获取该map集合中的key\",{\"1\":{\"86\":1,\"91\":1}}],[\"来加载\",{\"1\":{\"423\":1}}],[\"来加锁\",{\"1\":{\"352\":1}}],[\"来清理新生代\",{\"1\":{\"398\":1}}],[\"来代替\",{\"1\":{\"381\":1}}],[\"来动态修改线程池参数\",{\"1\":{\"368\":1}}],[\"来执行的\",{\"1\":{\"321\":1}}],[\"来将多条指令重叠执行\",{\"1\":{\"319\":1}}],[\"来包装它\",{\"1\":{\"293\":1}}],[\"来并行执行操作\",{\"1\":{\"291\":1}}],[\"来实现分布式事务的一致性\",{\"1\":{\"870\":1}}],[\"来实现进程间的同步和通信\",{\"1\":{\"641\":1}}],[\"来实现方法区的计划了\",{\"1\":{\"381\":1}}],[\"来实现原子性\",{\"1\":{\"339\":1}}],[\"来实现这个机制\",{\"1\":{\"330\":1}}],[\"来实现\",{\"1\":{\"261\":1,\"515\":1}}],[\"来区分\",{\"1\":{\"251\":1}}],[\"来判断是否是重复的请求\",{\"1\":{\"225\":1}}],[\"已停止更新\",{\"1\":{\"864\":1}}],[\"已过期\",{\"1\":{\"790\":1}}],[\"已被更新\",{\"1\":{\"589\":1}}],[\"已被使用的内存和空闲的内存相互交错在一起\",{\"1\":{\"383\":1}}],[\"已成功接收并确认\",{\"1\":{\"583\":1}}],[\"已发送但未收到\",{\"1\":{\"583\":1}}],[\"已发送且已收到\",{\"1\":{\"583\":1}}],[\"已提交事务的更改也不会丢失\",{\"1\":{\"519\":1}}],[\"已支付\",{\"1\":{\"225\":1}}],[\"已经实例化并且初始化完成\",{\"1\":{\"800\":1}}],[\"已经意味着\",{\"1\":{\"594\":1}}],[\"已经把原本放在永久代的字符串常量池\",{\"1\":{\"381\":1}}],[\"已经有了\",{\"1\":{\"313\":1}}],[\"已经出到\",{\"1\":{\"290\":1}}],[\"已经被修改为\",{\"1\":{\"276\":1}}],[\"已经消费直接返回成功\",{\"1\":{\"225\":1}}],[\"已经明示了它的原理\",{\"1\":{\"159\":1}}],[\"下的所有消息都要保证顺序\",{\"1\":{\"759\":1}}],[\"下可以设置多个消息队列\",{\"1\":{\"744\":1}}],[\"下游服务自己去调用就行了\",{\"1\":{\"740\":1}}],[\"下线实例\",{\"1\":{\"837\":1}}],[\"下线时候\",{\"1\":{\"689\":1}}],[\"下线\",{\"1\":{\"688\":1}}],[\"下拉刷新\",{\"1\":{\"669\":1}}],[\"下\",{\"1\":{\"591\":1,\"653\":1}}],[\"下一个接收的位置\",{\"1\":{\"583\":1}}],[\"下一个发送的位置\",{\"1\":{\"583\":1}}],[\"下班肝博客\",{\"1\":{\"574\":1}}],[\"下面我们来看看到底有哪些设计模式\",{\"1\":{\"785\":1}}],[\"下面是官方对于哨兵功能的描述\",{\"1\":{\"687\":1}}],[\"下面是基本架构图\",{\"1\":{\"525\":1}}],[\"下面是通过\",{\"1\":{\"266\":1}}],[\"下面的表格列出出了两种锁之间的区别\",{\"1\":{\"330\":1}}],[\"下单完成之后\",{\"1\":{\"740\":1}}],[\"下单\",{\"1\":{\"225\":1}}],[\"下载\",{\"0\":{\"115\":1}}],[\"下载picgo软件\",{\"0\":{\"107\":1}}],[\"创建仪表盘\",{\"1\":{\"877\":1}}],[\"创建实时和历史数据的仪表板\",{\"1\":{\"876\":1}}],[\"创建自动配置类\",{\"1\":{\"821\":1}}],[\"创建子类对象代理\",{\"1\":{\"806\":1}}],[\"创建代理有一大限制\",{\"1\":{\"806\":1}}],[\"创建工厂\",{\"1\":{\"800\":1}}],[\"创建过程可以查看abstractbeanfactory\",{\"1\":{\"793\":1}}],[\"创建注册单例bean注册器的操作\",{\"1\":{\"788\":1}}],[\"创建bean工厂\",{\"1\":{\"788\":1}}],[\"创建bean\",{\"1\":{\"788\":2}}],[\"创建bean注册器\",{\"1\":{\"788\":1}}],[\"创建在多个\",{\"1\":{\"767\":1}}],[\"创建或撤销进程时\",{\"1\":{\"642\":1}}],[\"创建状态\",{\"1\":{\"637\":1}}],[\"创建对应的\",{\"1\":{\"566\":1}}],[\"创建对象有哪几种方式\",{\"0\":{\"261\":1}}],[\"创建组合索引\",{\"1\":{\"497\":1}}],[\"创建索引有哪些注意点\",{\"0\":{\"497\":1}}],[\"创建会话对象\",{\"1\":{\"448\":1}}],[\"创建sqlsessionfactory\",{\"1\":{\"435\":1}}],[\"创建statement\",{\"1\":{\"433\":1}}],[\"创建连接\",{\"1\":{\"433\":1}}],[\"创建新的\",{\"1\":{\"428\":1}}],[\"创建新对象\",{\"1\":{\"261\":1}}],[\"创建核心线程执行任务\",{\"1\":{\"363\":1}}],[\"创建大乔\",{\"1\":{\"345\":1}}],[\"创建非公平锁\",{\"1\":{\"332\":1}}],[\"创建一个工程\",{\"1\":{\"821\":1}}],[\"创建一个项目\",{\"1\":{\"821\":1}}],[\"创建一个自定义\",{\"1\":{\"821\":1}}],[\"创建一个临时的新表\",{\"1\":{\"537\":1}}],[\"创建一个\",{\"1\":{\"527\":1}}],[\"创建一个新线程时使用的工厂\",{\"1\":{\"354\":1}}],[\"创建一个对象\",{\"1\":{\"351\":1}}],[\"创建一个threadlocal变量\",{\"1\":{\"308\":1}}],[\"创建一个私人令牌\",{\"1\":{\"111\":1}}],[\"创建了\",{\"1\":{\"788\":1}}],[\"创建了一个threadloca变量localvariable\",{\"1\":{\"308\":1}}],[\"创建了几个对象\",{\"1\":{\"265\":1}}],[\"创建\",{\"1\":{\"308\":1,\"785\":1,\"799\":3,\"800\":1,\"817\":1}}],[\"创建异步任务\",{\"1\":{\"300\":1}}],[\"创建并运行线程\",{\"1\":{\"292\":1}}],[\"创建并初始化的\",{\"1\":{\"265\":1}}],[\"创建类实例\",{\"1\":{\"289\":1}}],[\"创建不同类型数组\",{\"1\":{\"285\":1}}],[\"创建的动态代理对象的性能高不少\",{\"1\":{\"806\":1}}],[\"创建的动态代理对象性能比\",{\"1\":{\"806\":1}}],[\"创建的连接不再使用时\",{\"1\":{\"389\":1}}],[\"创建的\",{\"1\":{\"282\":1}}],[\"创建integer对象存储\",{\"1\":{\"269\":1}}],[\"创建防重表\",{\"1\":{\"225\":1}}],[\"建了一个联合索引\",{\"1\":{\"510\":1}}],[\"建立在\",{\"1\":{\"789\":1}}],[\"建立连接池等操作\",{\"1\":{\"848\":1}}],[\"建立连接完成后\",{\"1\":{\"586\":1}}],[\"建立连接消息标志接\",{\"1\":{\"580\":1}}],[\"建立连接的次数就少\",{\"1\":{\"490\":1}}],[\"建立真正的\",{\"1\":{\"573\":1}}],[\"建立相邻结点之间的数据链路\",{\"1\":{\"542\":1}}],[\"建立\",{\"1\":{\"542\":2,\"546\":1}}],[\"建立好新的库表结构\",{\"1\":{\"532\":1}}],[\"建立了一个组合索引\",{\"1\":{\"509\":1}}],[\"建立索引会消耗很多的空间\",{\"1\":{\"497\":1}}],[\"建立索引\",{\"1\":{\"491\":1}}],[\"建立公共溢出区\",{\"1\":{\"171\":1}}],[\"建议可以选择rocketmq\",{\"1\":{\"742\":1}}],[\"建议大家收藏了慢慢看\",{\"1\":{\"540\":1}}],[\"建议有时间好好看看aqs源码\",{\"1\":{\"331\":1}}],[\"建议使用\",{\"1\":{\"291\":1,\"790\":1}}],[\"建议\",{\"1\":{\"272\":1}}],[\"建防重表\",{\"1\":{\"225\":1}}],[\"重建缓存不能在短时间完成\",{\"1\":{\"712\":1}}],[\"重试删除对应的key\",{\"1\":{\"708\":1}}],[\"重启效率因此大幅得到提升\",{\"1\":{\"680\":1}}],[\"重启的时候\",{\"1\":{\"680\":1}}],[\"重启的时候会优先载入\",{\"1\":{\"678\":1}}],[\"重启\",{\"1\":{\"680\":1}}],[\"重启加载\",{\"1\":{\"676\":1}}],[\"重启时再重新执行aof文件中的命令达到恢复数据的目的\",{\"1\":{\"676\":1}}],[\"重发\",{\"1\":{\"597\":1}}],[\"重传第⼀个数据包\",{\"1\":{\"594\":1}}],[\"重传丢失的\",{\"1\":{\"592\":1}}],[\"重传包括超时重传\",{\"1\":{\"590\":1}}],[\"重传重复的那几个\",{\"1\":{\"589\":1}}],[\"重传的时候也是以这个单位来进行重传\",{\"1\":{\"581\":1}}],[\"重置为\",{\"1\":{\"588\":1}}],[\"重定向状态码\",{\"1\":{\"551\":1}}],[\"重做\",{\"1\":{\"519\":1}}],[\"重做日志文件都是以块\",{\"1\":{\"483\":1}}],[\"重做日志缓存\",{\"1\":{\"483\":1}}],[\"重做日志至关重要\",{\"1\":{\"479\":1}}],[\"重做日志\",{\"1\":{\"479\":1}}],[\"重点关注堆和栈\",{\"1\":{\"388\":1}}],[\"重复工作\",{\"1\":{\"664\":1}}],[\"重复这个过程直到找到了⼀个访问位为\",{\"1\":{\"658\":1}}],[\"重复\",{\"0\":{\"594\":1},\"1\":{\"590\":1}}],[\"重复利用\",{\"1\":{\"351\":1}}],[\"重复更新请求进来就无法更新了\",{\"1\":{\"225\":1}}],[\"重排序可以分为编译器重排序和处理器重排序\",{\"1\":{\"322\":1}}],[\"重排序分3种类型\",{\"1\":{\"319\":1}}],[\"重写\",{\"1\":{\"720\":1}}],[\"重写方法\",{\"1\":{\"368\":1}}],[\"重写call\",{\"1\":{\"300\":1}}],[\"重写run\",{\"1\":{\"300\":2}}],[\"重写克隆方法\",{\"1\":{\"260\":2}}],[\"重写要求子类被重写方法与父类被重写方法有相同的返回类型\",{\"1\":{\"249\":1}}],[\"重写发生在子类与父类之间\",{\"1\":{\"249\":1}}],[\"重载与方法的返回值无关\",{\"1\":{\"249\":1}}],[\"重载发生在一个类中\",{\"1\":{\"249\":1}}],[\"重载\",{\"0\":{\"249\":1}}],[\"重新尝试对故障服务的请求\",{\"1\":{\"855\":1}}],[\"重新从缓存获取数据即可\",{\"1\":{\"712\":1}}],[\"重新分配即可\",{\"1\":{\"695\":1}}],[\"重新启动\",{\"1\":{\"576\":1}}],[\"重新根据数据包的源地址\",{\"1\":{\"573\":1}}],[\"重新跑这些\",{\"1\":{\"538\":1}}],[\"重新标记\",{\"1\":{\"403\":1}}],[\"重新去创建一条线程执行\",{\"1\":{\"351\":1}}],[\"重新开始计数\",{\"1\":{\"227\":1}}],[\"重新计算冲突元素的地址\",{\"1\":{\"171\":1}}],[\"比一般键值对数据库强大的地方\",{\"1\":{\"668\":1}}],[\"比喻spring\",{\"1\":{\"621\":1}}],[\"比值越大\",{\"1\":{\"401\":1}}],[\"比例是\",{\"1\":{\"394\":1}}],[\"比\",{\"1\":{\"330\":1,\"464\":1,\"677\":1}}],[\"比父类被重写方法更好访问\",{\"1\":{\"249\":1}}],[\"比较常见的一个做法是\",{\"1\":{\"849\":1}}],[\"比较常用\",{\"1\":{\"566\":1}}],[\"比较简陋\",{\"1\":{\"788\":1}}],[\"比较难拆分\",{\"1\":{\"719\":1}}],[\"比较难保证接口返回相同值\",{\"1\":{\"225\":1}}],[\"比较有效的方法是针对这类数据设置一个较短的过期时间\",{\"1\":{\"703\":1}}],[\"比较容易遭到不法获取\",{\"1\":{\"566\":1}}],[\"比较出名的就是\",{\"1\":{\"534\":1}}],[\"比较这两个对象\",{\"1\":{\"257\":1}}],[\"比较该类的两个对象时\",{\"1\":{\"257\":1}}],[\"比较的是内存地址\",{\"1\":{\"257\":1}}],[\"比较的是值\",{\"1\":{\"257\":1}}],[\"比较\",{\"1\":{\"241\":1,\"596\":1}}],[\"比较适用于单实例的系统\",{\"1\":{\"227\":1}}],[\"比如阿里云的sls\",{\"1\":{\"877\":1}}],[\"比如阿里的\",{\"1\":{\"210\":1,\"708\":1}}],[\"比如使用zookeeper\",{\"1\":{\"830\":1}}],[\"比如前置\",{\"1\":{\"793\":1}}],[\"比如前10ms已经通过了最大的请求数\",{\"1\":{\"227\":1}}],[\"比如按名字匹配\",{\"1\":{\"790\":1}}],[\"比如按照消息设置的\",{\"1\":{\"762\":1}}],[\"比如两个以上相同类型的\",{\"1\":{\"784\":1}}],[\"比如设置调度算法为\",{\"1\":{\"772\":1}}],[\"比如00000000000000000000代表了第一个文件\",{\"1\":{\"771\":1}}],[\"比如创建一个\",{\"1\":{\"761\":1}}],[\"比如交易消息又可以分为\",{\"1\":{\"744\":1}}],[\"比如交替打印\",{\"1\":{\"306\":1}}],[\"比如一个电商系统可以分为\",{\"1\":{\"744\":1}}],[\"比如一次请求\",{\"1\":{\"560\":1}}],[\"比如这一段很\",{\"1\":{\"725\":1}}],[\"比如这张https的工作流程图\",{\"1\":{\"621\":1}}],[\"比如caffeine\",{\"1\":{\"709\":1}}],[\"比如copyonwritearraylist类\",{\"1\":{\"157\":1}}],[\"比如ribbion\",{\"1\":{\"851\":1}}],[\"比如rocketmq\",{\"1\":{\"709\":1}}],[\"比如redis的键\",{\"1\":{\"693\":1}}],[\"比如rpc调用\",{\"1\":{\"309\":1}}],[\"比如百万连接却只有少数活跃连接时这样做就太没有效率\",{\"1\":{\"664\":1}}],[\"比如kill\",{\"1\":{\"641\":1}}],[\"比如客户端发起了\",{\"1\":{\"569\":1}}],[\"比如浏览器的\",{\"1\":{\"566\":1}}],[\"比如浏览器禁用\",{\"1\":{\"566\":1}}],[\"比如当浏览器第一次发送请求给服务器时\",{\"1\":{\"565\":1}}],[\"比如重传等等\",{\"1\":{\"559\":1}}],[\"比如说下面\",{\"1\":{\"694\":1}}],[\"比如说\",{\"1\":{\"566\":1}}],[\"比如说限制连接数等\",{\"1\":{\"538\":1}}],[\"比如说加索引\",{\"1\":{\"538\":1}}],[\"比如现在有三张表\",{\"1\":{\"534\":1}}],[\"比如以前的表就存储一个关联\",{\"1\":{\"534\":1}}],[\"比如上述的\",{\"1\":{\"513\":1}}],[\"比如有一个类\",{\"1\":{\"813\":1}}],[\"比如有一个\",{\"1\":{\"509\":1}}],[\"比如有玩家超时未确认\",{\"1\":{\"345\":1}}],[\"比如每次对表进行增删改操作\",{\"1\":{\"500\":1}}],[\"比如原来是\",{\"1\":{\"481\":1}}],[\"比如关键词是否正确等等\",{\"1\":{\"473\":1}}],[\"比如连接处理\",{\"1\":{\"472\":1}}],[\"比如数据源\",{\"1\":{\"448\":1}}],[\"比如数据库连接\",{\"1\":{\"348\":1}}],[\"比如mybatis的别名\",{\"1\":{\"448\":1}}],[\"比如调用a\",{\"1\":{\"442\":1}}],[\"比如商品分类和商品\",{\"1\":{\"441\":1}}],[\"比如订单消息\",{\"1\":{\"759\":1}}],[\"比如订单的生成\",{\"1\":{\"759\":1}}],[\"比如订单号\",{\"1\":{\"757\":1}}],[\"比如订单和支付是一对一的关系\",{\"1\":{\"441\":1}}],[\"比如订单表中有\",{\"1\":{\"225\":1}}],[\"比如静态对象\",{\"1\":{\"388\":1}}],[\"比如jconsole\",{\"1\":{\"343\":1}}],[\"比如变量i=1\",{\"1\":{\"340\":1}}],[\"比如账号\",{\"1\":{\"309\":1}}],[\"比如垃圾回收线程\",{\"1\":{\"305\":1}}],[\"比如锁还是持有不让出的\",{\"1\":{\"302\":1}}],[\"比如在使用\",{\"1\":{\"598\":1}}],[\"比如在insert操作时\",{\"1\":{\"445\":1}}],[\"比如在java中\",{\"1\":{\"299\":1}}],[\"比如在第二阶段中\",{\"1\":{\"202\":1}}],[\"比如在第一阶段已经完成\",{\"1\":{\"202\":1}}],[\"比如帽子颜色是绿色\",{\"1\":{\"287\":1}}],[\"比如戴什么什么帽子\",{\"1\":{\"287\":1}}],[\"比如将对象转化为\",{\"1\":{\"283\":1}}],[\"比如增加了一个成员变量\",{\"1\":{\"282\":1}}],[\"比如我们使用\",{\"1\":{\"726\":1}}],[\"比如我们日常使用得比较多的\",{\"1\":{\"608\":1}}],[\"比如我们经常使用的默认登录功能\",{\"1\":{\"566\":1}}],[\"比如我们需要将纸制银行流水通过人工的方式录入成电子银行流水\",{\"1\":{\"349\":1}}],[\"比如我们以前使用\",{\"1\":{\"292\":1}}],[\"比如我们熟悉的空指针\",{\"1\":{\"274\":1}}],[\"比如我们要限制1s能够通过的请求数\",{\"1\":{\"227\":1}}],[\"比如虚拟机异常\",{\"1\":{\"274\":1}}],[\"比如\",{\"1\":{\"236\":1,\"272\":1,\"287\":1,\"417\":2,\"434\":2,\"489\":1,\"490\":1,\"505\":1,\"508\":1,\"621\":2,\"710\":1,\"719\":1,\"727\":1,\"730\":1,\"783\":1,\"784\":1,\"790\":1,\"798\":1}}],[\"比如分布式调用\",{\"1\":{\"227\":1}}],[\"比如更新用户账户余额\",{\"1\":{\"225\":1}}],[\"比如支付通知\",{\"1\":{\"207\":1}}],[\"比如向容器中添加一个元素\",{\"1\":{\"159\":1}}],[\"比如arraylist\",{\"1\":{\"157\":1}}],[\"比如面试官也看了我这篇文章\",{\"1\":{\"153\":1}}],[\"才回滚事务\",{\"1\":{\"813\":1}}],[\"才存在循环依赖的情况\",{\"1\":{\"799\":1}}],[\"才开执行整个事务队列\",{\"1\":{\"724\":1}}],[\"才重传分组\",{\"1\":{\"591\":1}}],[\"才继续开始发送\",{\"1\":{\"582\":1}}],[\"才进入\",{\"0\":{\"576\":1}}],[\"才发送\",{\"1\":{\"575\":1}}],[\"才可进⼊加密报⽂传输\",{\"1\":{\"561\":1}}],[\"才可以继续运行\",{\"1\":{\"345\":1}}],[\"才是有序的\",{\"1\":{\"509\":1}}],[\"才满足第二范式\",{\"1\":{\"460\":1}}],[\"才会由\",{\"1\":{\"813\":1}}],[\"才会实例化\",{\"1\":{\"793\":1}}],[\"才会返回\",{\"1\":{\"663\":1}}],[\"才会返回插入的值\",{\"1\":{\"186\":1}}],[\"才会发送下一个数据\",{\"1\":{\"583\":1}}],[\"才会抛出内存溢出异常\",{\"1\":{\"392\":1}}],[\"才会回收对应的对象\",{\"1\":{\"389\":1}}],[\"才真正停止\",{\"1\":{\"358\":1}}],[\"才能消费此条消息\",{\"1\":{\"765\":1}}],[\"才能响应和这些槽关联的键命令\",{\"1\":{\"697\":1}}],[\"才能根据他进入了哪个子网来为其分配\",{\"1\":{\"607\":1}}],[\"才能继续执行\",{\"1\":{\"522\":1}}],[\"才能匹配下一个\",{\"1\":{\"509\":1}}],[\"才能够使用索引来对结果做排序\",{\"1\":{\"491\":1}}],[\"才能晋升老年代\",{\"1\":{\"400\":1}}],[\"才能进行\",{\"1\":{\"395\":1}}],[\"才能开打\",{\"1\":{\"345\":1}}],[\"才能将内存中地址\",{\"1\":{\"334\":1}}],[\"才能缩写成\",{\"1\":{\"292\":1}}],[\"才执行\",{\"1\":{\"225\":1}}],[\"幂等强调的是多次调用如一次\",{\"1\":{\"224\":1}}],[\"幂等和防重有些不同\",{\"1\":{\"224\":1}}],[\"幂等性是一个数学概念\",{\"1\":{\"224\":1}}],[\"通用的分布式协调服务框架\",{\"1\":{\"836\":1}}],[\"通用首部和实体首部在请求报文和响应报文中都可以设置\",{\"1\":{\"556\":1}}],[\"通用首部和实体首部\",{\"1\":{\"556\":1}}],[\"通俗的讲就是两个或多个线程无限期的阻塞\",{\"1\":{\"646\":1}}],[\"通俗点讲\",{\"1\":{\"408\":1,\"583\":1}}],[\"通信方式|基于http协议\",{\"1\":{\"846\":1}}],[\"通信方式|基于请求\",{\"1\":{\"845\":1}}],[\"通信双方在进行数据传输前需要获知加密密钥\",{\"1\":{\"617\":1}}],[\"通信双方都可以主动发起断开连接请求\",{\"1\":{\"574\":1}}],[\"通信\",{\"1\":{\"580\":1}}],[\"通信基本靠吼\",{\"1\":{\"568\":1}}],[\"通配符可能导致索引失效\",{\"1\":{\"498\":1}}],[\"通常推荐使用前者\",{\"1\":{\"791\":1}}],[\"通常作为\",{\"1\":{\"784\":1}}],[\"通常用户返回\",{\"1\":{\"784\":1}}],[\"通常是业务相关的\",{\"1\":{\"757\":1}}],[\"通常redis执行命令速度非常快\",{\"1\":{\"718\":1}}],[\"通常来说添加节点使得memcache集群\",{\"1\":{\"713\":1}}],[\"通常有这些方法\",{\"1\":{\"711\":1}}],[\"通常有这些做法\",{\"1\":{\"537\":1}}],[\"通常这部分\",{\"1\":{\"680\":1}}],[\"通常称为⻚表缓存\",{\"1\":{\"655\":1}}],[\"通常信号量表示资源的数量\",{\"1\":{\"645\":1}}],[\"通常把这类攻击称为截获\",{\"1\":{\"611\":1}}],[\"通常浏览器和操作系统中集成了\",{\"1\":{\"564\":1}}],[\"通常都是用这个实现类去进行结果的处理的\",{\"1\":{\"448\":1}}],[\"通常使用图形化工具分析\",{\"1\":{\"418\":1}}],[\"通常会比顺序全表扫描还慢\",{\"1\":{\"491\":1}}],[\"通常会生成一个mappermethod对象\",{\"1\":{\"450\":1}}],[\"通常会出现\",{\"1\":{\"418\":1}}],[\"通常会引入了重试机制\",{\"1\":{\"224\":1}}],[\"通常情况下只有一个哈希表\",{\"1\":{\"731\":1}}],[\"通常情况下\",{\"1\":{\"416\":1}}],[\"通常任务会使用双端队列\",{\"1\":{\"373\":1}}],[\"通常事前会对线程池进行一定评估\",{\"1\":{\"369\":1}}],[\"通知\",{\"1\":{\"687\":1,\"804\":1}}],[\"通知接收进程处理信号\",{\"1\":{\"641\":1}}],[\"通知系统\",{\"1\":{\"609\":1}}],[\"通知机制\",{\"1\":{\"306\":2,\"330\":1}}],[\"通知或中断\",{\"1\":{\"303\":1}}],[\"通知垃圾收集器回收对象\",{\"1\":{\"272\":1}}],[\"通过kibana连接到elasticsearch\",{\"1\":{\"877\":1}}],[\"通过key计算位置\",{\"1\":{\"181\":1}}],[\"通过配置输入插件\",{\"1\":{\"877\":1}}],[\"通过配置路由\",{\"1\":{\"865\":1}}],[\"通过配置路由规则\",{\"1\":{\"863\":1}}],[\"通过回滚日志的持久化和恢复\",{\"1\":{\"874\":1}}],[\"通过回调函数\",{\"1\":{\"664\":1}}],[\"通过事件的传递和处理来实现分布式事务的一致性\",{\"1\":{\"870\":1}}],[\"通过事务管理和持久性存储机制来确保\",{\"1\":{\"519\":1}}],[\"通过对数据库连接进行拦截和代理\",{\"1\":{\"870\":1}}],[\"通过对这棵⿊红树进⾏操作\",{\"1\":{\"664\":1}}],[\"通过链路追踪\",{\"1\":{\"867\":1}}],[\"通过使用\",{\"1\":{\"868\":1}}],[\"通过使用api网关\",{\"1\":{\"863\":1}}],[\"通过使用注解\",{\"1\":{\"847\":1}}],[\"通过动态地调整时间窗口的大小和滑动步长\",{\"1\":{\"860\":1}}],[\"通过线程池隔离\",{\"1\":{\"858\":1}}],[\"通过线程进行分析\",{\"1\":{\"413\":1}}],[\"通过监控数据\",{\"1\":{\"858\":1}}],[\"通过减少对资源的依赖\",{\"1\":{\"856\":1}}],[\"通过冗余部署\",{\"1\":{\"853\":1}}],[\"通过冗余一些数据\",{\"1\":{\"460\":1}}],[\"通过dubbo的idl生成不同语言的客户端和服务端代码\",{\"1\":{\"846\":1}}],[\"通过长轮询的方式\",{\"1\":{\"843\":1}}],[\"通过nacos\",{\"1\":{\"843\":1}}],[\"通过将多个eureka\",{\"1\":{\"838\":1}}],[\"通过将每条请求共享资源的线程封装成一个节点来实现锁的分配\",{\"1\":{\"331\":1}}],[\"通过注册中心可以进行服务的配置管理\",{\"1\":{\"834\":1}}],[\"通过标准化的接口进行通信\",{\"1\":{\"828\":1}}],[\"通过它将逻辑视图解析为物理视图\",{\"1\":{\"815\":1}}],[\"通过它可以还原某个时刻数据库的状态\",{\"1\":{\"676\":1}}],[\"通过调用父类transactionaspectsupport的invokewithintransaction方法进行事务处理\",{\"1\":{\"812\":1}}],[\"通过调用类的构造方法\",{\"1\":{\"795\":1}}],[\"通过修改代码来实现\",{\"1\":{\"807\":1}}],[\"通过代理对象调用目标对象方法\",{\"1\":{\"806\":1}}],[\"通过三级缓存解决了循环依赖\",{\"1\":{\"800\":1}}],[\"通过一个配置文件定义\",{\"1\":{\"788\":1}}],[\"通过一个类的全限定名来获取定义此类的二进制字节流\",{\"1\":{\"422\":1}}],[\"通过查看源码可以发现\",{\"1\":{\"777\":1}}],[\"通过部署多个结点来标识自己是一个伪集群\",{\"1\":{\"748\":1}}],[\"通过循环执行队列任务即可\",{\"1\":{\"723\":1}}],[\"通过集群来提升缓存的可用性\",{\"1\":{\"704\":1}}],[\"通过异步的⽅式不断的刷新过期时间\",{\"1\":{\"702\":1}}],[\"通过gossip消息传播\",{\"1\":{\"698\":1}}],[\"通过自动故障转移实现高可用\",{\"1\":{\"696\":1}}],[\"通过连接哨兵来获得当前\",{\"1\":{\"687\":1}}],[\"通过引入复制中间层\",{\"1\":{\"683\":1}}],[\"通过多个从节点分担读负载\",{\"1\":{\"682\":1}}],[\"通过epoll\",{\"1\":{\"664\":1}}],[\"通过两个⽅⾯\",{\"1\":{\"664\":1}}],[\"通过电子邮件的方式修改组织机构的域名注册信息\",{\"1\":{\"612\":1}}],[\"通过网际协议\",{\"1\":{\"602\":1}}],[\"通过滑动窗口来控制流量\",{\"1\":{\"582\":1}}],[\"通过第三次握手的数据告诉服务端\",{\"1\":{\"569\":1}}],[\"通过在头部\",{\"1\":{\"560\":1}}],[\"通过在查询的sql语句中定义字段名的别名\",{\"1\":{\"437\":1}}],[\"通过应用进程之间的交互来完成特定网络应用\",{\"1\":{\"542\":1}}],[\"通过中间表转换过去\",{\"1\":{\"537\":1}}],[\"通过写入磁盘来确保\",{\"1\":{\"519\":1}}],[\"通过提供数据版本来支持事务的隔离性\",{\"1\":{\"519\":1}}],[\"通过把不等于操作符改成\",{\"1\":{\"489\":1}}],[\"通过主键\",{\"1\":{\"488\":1}}],[\"通过慢查询日志\",{\"1\":{\"479\":1}}],[\"通过configuration创建executor\",{\"1\":{\"448\":1}}],[\"通过cas操作竞争锁\",{\"1\":{\"328\":1}}],[\"通过转化的configuration构建sqlsessionfactory\",{\"1\":{\"448\":1}}],[\"通过resultmap\",{\"1\":{\"437\":1}}],[\"通过sqlsession执行数据库操作\",{\"1\":{\"435\":1}}],[\"通过sqlsessionfactory创建sqlsession\",{\"1\":{\"435\":1}}],[\"通过双亲委派机制\",{\"1\":{\"425\":1}}],[\"通过可疑对象定位到具体代码再次分析\",{\"1\":{\"417\":1}}],[\"通过开启了\",{\"1\":{\"413\":1}}],[\"通过日志恢复该次操作\",{\"1\":{\"371\":1}}],[\"通过这个快照\",{\"1\":{\"523\":1}}],[\"通过这个\",{\"1\":{\"357\":1}}],[\"通过unsafe类的实例来进行添加操作\",{\"1\":{\"341\":1}}],[\"通过原子的方式更新数组里的某个元素\",{\"1\":{\"340\":1}}],[\"通过atomicreference来保证原子性\",{\"1\":{\"338\":1}}],[\"通过lock\",{\"1\":{\"330\":1}}],[\"通过禁止特定类型的编译器重排序和处理器重排序\",{\"1\":{\"319\":1}}],[\"通过设置线程的中断标志并不能直接终止该线程的执行\",{\"1\":{\"302\":1}}],[\"通过入参的\",{\"1\":{\"294\":1}}],[\"通过反射创建bean\",{\"1\":{\"788\":1}}],[\"通过反射你可以获取任意一个类的所有属性和方法\",{\"1\":{\"289\":1}}],[\"通过反射机制\",{\"1\":{\"261\":1}}],[\"通过加号拼接字符串会创建多个\",{\"1\":{\"266\":1}}],[\"通过序列化机制\",{\"1\":{\"261\":1}}],[\"通过继承可以很方便地进行代码复用\",{\"1\":{\"248\":1}}],[\"通过\",{\"1\":{\"222\":1,\"283\":1,\"313\":1,\"331\":2,\"413\":1,\"448\":1,\"534\":2,\"593\":1,\"677\":1,\"697\":1,\"731\":1,\"794\":1,\"795\":1,\"796\":1,\"801\":1,\"815\":2}}],[\"通过传入\",{\"1\":{\"178\":1}}],[\"通过⽅法\",{\"1\":{\"169\":1}}],[\"通过启用\",{\"1\":{\"36\":1}}],[\"保护和路由对后端服务的访问\",{\"1\":{\"863\":1}}],[\"保持着长连接和心跳\",{\"1\":{\"749\":1}}],[\"保持向下兼容\",{\"1\":{\"285\":1}}],[\"保留位为将来使用\",{\"1\":{\"603\":1}}],[\"保留为多播地址\",{\"1\":{\"603\":1}}],[\"保留软引用\",{\"1\":{\"392\":3}}],[\"保活计时器有什么用\",{\"0\":{\"577\":1}}],[\"保存到对应的\",{\"1\":{\"792\":1}}],[\"保存至commitlog中\",{\"1\":{\"771\":1}}],[\"保存了指定topic下的队列消息在commitlog中的起始物理偏移量offset\",{\"1\":{\"771\":1}}],[\"保存了表的总行数\",{\"1\":{\"477\":1}}],[\"保存主节点的ip和port\",{\"1\":{\"684\":1}}],[\"保存主节点\",{\"1\":{\"684\":1}}],[\"保存的数据不能超过\",{\"1\":{\"566\":1}}],[\"保存在服务器端\",{\"1\":{\"566\":1}}],[\"保存在服务器上\",{\"1\":{\"566\":1}}],[\"保存在客户端\",{\"1\":{\"566\":1}}],[\"保存在客户端浏览器中\",{\"1\":{\"566\":1}}],[\"保存起来\",{\"1\":{\"566\":1}}],[\"保存\",{\"1\":{\"224\":1}}],[\"保存按钮不小心快速点了两次\",{\"1\":{\"224\":1}}],[\"保证核心功能的可用性\",{\"1\":{\"853\":1}}],[\"保证整个系统的正常运行\",{\"1\":{\"838\":1}}],[\"保证跨多个微服务的一致性和原子性操作\",{\"1\":{\"832\":1}}],[\"保证消息不丢失\",{\"1\":{\"757\":1}}],[\"保证消息的可靠性\",{\"1\":{\"709\":1}}],[\"保证能够找出唯一的从节点\",{\"1\":{\"698\":1}}],[\"保证主从复制进入正常状态\",{\"1\":{\"685\":1}}],[\"保证主从之间数据一致性\",{\"1\":{\"685\":1}}],[\"保证主从数据一致性\",{\"1\":{\"684\":1}}],[\"保证在某时刻只能被一个线程执行\",{\"1\":{\"645\":1}}],[\"保证在事务开始之前和事务成功完成之后\",{\"1\":{\"519\":1}}],[\"保证连接正确关闭\",{\"1\":{\"578\":1}}],[\"保证了消息不会丢失\",{\"1\":{\"755\":1}}],[\"保证了数据包的顺序传送及数据的完整性\",{\"1\":{\"542\":1}}],[\"保证了变量在多线程之间的可见性\",{\"1\":{\"331\":1}}],[\"保证\",{\"1\":{\"425\":1,\"559\":1}}],[\"保证最终都是委派给处于模型最顶端的启动类加载器进行加载\",{\"1\":{\"425\":1}}],[\"保证最终一致性\",{\"1\":{\"204\":1}}],[\"保证导出的请求不会一直打到服务端\",{\"1\":{\"413\":1}}],[\"保证数据不会被重复推送\",{\"1\":{\"352\":1}}],[\"保证可见性和有序性\",{\"1\":{\"322\":1}}],[\"保证可用性\",{\"1\":{\"191\":1}}],[\"保证当前线程的操作都是同一个connnection\",{\"1\":{\"309\":1}}],[\"保证所有副本保持数据一致性\",{\"1\":{\"193\":1}}],[\"保证的则是\",{\"1\":{\"192\":1}}],[\"保证的是对一个变量执行操作的原子性\",{\"1\":{\"338\":1}}],[\"保证的是\",{\"1\":{\"192\":1}}],[\"保证一致性\",{\"1\":{\"191\":1}}],[\"保证一定获取锁成功\",{\"1\":{\"180\":1}}],[\"保证极端情况下的查找效率\",{\"1\":{\"172\":1}}],[\"保证arraylist的线程安全可以通过这些方案\",{\"1\":{\"158\":1}}],[\"过高\",{\"1\":{\"720\":1}}],[\"过了一段时间之后\",{\"1\":{\"708\":1}}],[\"过了一会儿b站推送消息了\",{\"1\":{\"663\":1}}],[\"过期时间随机生成\",{\"1\":{\"704\":1}}],[\"过期时间\",{\"1\":{\"704\":1}}],[\"过一会儿来盯一次\",{\"1\":{\"663\":1}}],[\"过多的\",{\"1\":{\"579\":1}}],[\"过长的字段\",{\"1\":{\"497\":1}}],[\"过滤和转发日志数据的工具\",{\"1\":{\"877\":1}}],[\"过滤和映射数据等操作\",{\"1\":{\"291\":1}}],[\"过滤标签等\",{\"1\":{\"615\":1}}],[\"过滤器链的执行过程可以修改请求\",{\"1\":{\"865\":1}}],[\"过滤器用于对请求进行处理和转换\",{\"1\":{\"865\":1}}],[\"过滤器\",{\"1\":{\"470\":1,\"865\":1}}],[\"过滤条件\",{\"1\":{\"470\":1}}],[\"过滤\",{\"1\":{\"294\":1,\"690\":1,\"864\":2}}],[\"过程如下\",{\"1\":{\"688\":1}}],[\"过程都是需要等待的\",{\"1\":{\"663\":1}}],[\"过程中某一个传输方向上的字节流的每个字节的编号\",{\"1\":{\"580\":1}}],[\"过程也比较简单\",{\"1\":{\"395\":1}}],[\"过程\",{\"1\":{\"222\":1}}],[\"过渡动画\",{\"0\":{\"33\":1}}],[\"若消费依然失败\",{\"1\":{\"766\":1}}],[\"若加锁操作顺利通过\",{\"1\":{\"645\":1}}],[\"若连续发送\",{\"1\":{\"577\":1}}],[\"若两个小时都没有收到客户端的数据\",{\"1\":{\"577\":1}}],[\"若发送的这个数据是\",{\"1\":{\"569\":1}}],[\"若在目标方法中抛出的异常是\",{\"1\":{\"813\":1}}],[\"若在\",{\"1\":{\"482\":1}}],[\"若达到阀值就会执行\",{\"1\":{\"418\":1}}],[\"若\",{\"1\":{\"222\":1}}],[\"成熟度较高\",{\"1\":{\"831\":2}}],[\"成员对象为o3的节点时\",{\"1\":{\"732\":1}}],[\"成员变量\",{\"1\":{\"306\":1,\"798\":1}}],[\"成员变量如果没有被赋初值\",{\"1\":{\"253\":1}}],[\"成员变量是对象的⼀部分\",{\"1\":{\"253\":1}}],[\"成员变量是属于类的\",{\"1\":{\"253\":1}}],[\"成员变量和局部变量都能被\",{\"1\":{\"253\":1}}],[\"成员变量可以被\",{\"1\":{\"253\":1}}],[\"成员变量与局部变量的区别有哪些\",{\"0\":{\"253\":1}}],[\"成体系的知识才是最有价值的\",{\"1\":{\"620\":1}}],[\"成功发送到\",{\"1\":{\"765\":1}}],[\"成功状态码\",{\"1\":{\"551\":1}}],[\"成功选举为leader\",{\"1\":{\"222\":1}}],[\"成为\",{\"1\":{\"784\":1}}],[\"成为网络层的数据单元\",{\"1\":{\"544\":1}}],[\"成为孤立区域的的情况\",{\"1\":{\"191\":1}}],[\"赢得了多数\",{\"1\":{\"222\":1}}],[\"表单数据验证以及一些外部配置这样的一些第三方功能\",{\"1\":{\"819\":1}}],[\"表尾节点\",{\"1\":{\"729\":1}}],[\"表头\",{\"1\":{\"729\":1}}],[\"表数量太少又可能导致单表性能存在问题\",{\"1\":{\"531\":1}}],[\"表数量太多维护比较麻烦\",{\"1\":{\"531\":1}}],[\"表明\",{\"1\":{\"645\":2}}],[\"表明恢复过程已经结束\",{\"1\":{\"589\":1}}],[\"表明生成该版本的事务在当前事务生成\",{\"1\":{\"523\":2}}],[\"表明有事务想在某个\",{\"1\":{\"513\":1}}],[\"表明这是该类的⼀个静态资源\",{\"1\":{\"324\":1}}],[\"表锁\",{\"1\":{\"512\":1,\"515\":1}}],[\"表\",{\"1\":{\"490\":1,\"509\":1,\"531\":1}}],[\"表小于\",{\"1\":{\"490\":1}}],[\"表的具体行数\",{\"1\":{\"477\":1}}],[\"表的大小只受限于操作系统文件的大小\",{\"1\":{\"477\":1}}],[\"表结构还在\",{\"1\":{\"467\":2}}],[\"表中已经存在该\",{\"1\":{\"606\":1}}],[\"表中只有一行记录\",{\"1\":{\"523\":1}}],[\"表中的非主键只依赖于主键\",{\"1\":{\"460\":1}}],[\"表中竟然产生了两条重复的数据\",{\"1\":{\"224\":1}}],[\"表有\",{\"1\":{\"458\":2}}],[\"表示一个带注释的类是一个\",{\"1\":{\"784\":1}}],[\"表示与分配到的消息队列集合mqset的交集\",{\"1\":{\"777\":1}}],[\"表示与分配到的消息队列集合mqset互不包含\",{\"1\":{\"777\":1}}],[\"表示消息成功发送到了broker\",{\"1\":{\"754\":1}}],[\"表示当前字符串的长度\",{\"1\":{\"730\":1}}],[\"表示当前线程已经执行完毕\",{\"1\":{\"303\":1}}],[\"表示m秒内数据集存在n次修改时\",{\"1\":{\"676\":1}}],[\"表示他们解答问题完毕\",{\"1\":{\"672\":1}}],[\"表示⽂件描述符集合\",{\"1\":{\"664\":1}}],[\"表示接收窗口的大小\",{\"1\":{\"583\":1}}],[\"表示发送窗口的大小\",{\"1\":{\"583\":1}}],[\"表示告知对方本端要关闭连接了\",{\"1\":{\"580\":1}}],[\"表示要求对方重新建立连接\",{\"1\":{\"580\":1}}],[\"表示确认号是否有效\",{\"1\":{\"580\":1}}],[\"表示层\",{\"1\":{\"542\":3}}],[\"表示生成该\",{\"1\":{\"523\":1}}],[\"表示生成\",{\"1\":{\"523\":1}}],[\"表示事务完成以后\",{\"1\":{\"518\":1}}],[\"表示大于\",{\"1\":{\"501\":1}}],[\"表示在生成\",{\"1\":{\"523\":2}}],[\"表示在\",{\"1\":{\"501\":1}}],[\"表示在每次进行迭代之间以什么符号作为分隔符\",{\"1\":{\"445\":1}}],[\"表示小于\",{\"1\":{\"501\":1}}],[\"表示对查询结果排序时会使用一个临时表\",{\"1\":{\"493\":1}}],[\"表示会在存储引擎检索之后再进行过滤\",{\"1\":{\"493\":1}}],[\"表示查询时命中\",{\"1\":{\"493\":1}}],[\"表示关联类型或访问类型\",{\"1\":{\"493\":1}}],[\"表示可以进行部分复制\",{\"1\":{\"685\":1}}],[\"表示可以传⼀个\",{\"1\":{\"586\":1}}],[\"表示可变长字符串\",{\"1\":{\"461\":1}}],[\"表示可用的许可证数量\",{\"1\":{\"348\":1}}],[\"表示定长字符串\",{\"1\":{\"461\":1}}],[\"表示以什么结束\",{\"1\":{\"445\":1}}],[\"表示该语句以什么开始\",{\"1\":{\"445\":1}}],[\"表示该锁对象已经被其他线程抢占\",{\"1\":{\"329\":1}}],[\"表示集合中每一个元素进行迭代时的别名\",{\"1\":{\"445\":1}}],[\"表示\",{\"1\":{\"412\":1,\"483\":1,\"493\":2,\"580\":1,\"606\":1,\"800\":1}}],[\"表示年轻代和年老代比值为\",{\"1\":{\"412\":1}}],[\"表示的是新生代用的parallel\",{\"1\":{\"406\":1}}],[\"表示允许10个线程获取许可证\",{\"1\":{\"348\":1}}],[\"表示锁重入\",{\"1\":{\"329\":1}}],[\"表示进⼊同步代码前要获得\",{\"1\":{\"324\":1}}],[\"表示进⼊同步代码库前要获得给定对象的锁\",{\"1\":{\"324\":1}}],[\"表示线程进入等待状态\",{\"1\":{\"303\":1}}],[\"表示线程阻塞于锁\",{\"1\":{\"303\":1}}],[\"表示式\",{\"1\":{\"292\":1}}],[\"表示具体的一个\",{\"1\":{\"285\":1}}],[\"表示不确定的\",{\"1\":{\"285\":1}}],[\"表示不可变的意思\",{\"1\":{\"255\":1}}],[\"表示有其它服务器已经抢先当选了leader\",{\"1\":{\"222\":1}}],[\"表达式过滤\",{\"1\":{\"762\":1}}],[\"表达式都会与这个抽象方法匹配\",{\"1\":{\"292\":1}}],[\"表达式了解多少\",{\"0\":{\"292\":1}}],[\"表达式可以方便的对集合进行处理\",{\"1\":{\"291\":1}}],[\"表达式最好不要超过\",{\"1\":{\"291\":1}}],[\"表达式使代码更加简洁\",{\"1\":{\"291\":1}}],[\"表达式本质上是一段匿名内部类\",{\"1\":{\"291\":1,\"292\":1}}],[\"表达式和函数式接口\",{\"1\":{\"291\":1}}],[\"表达式\",{\"1\":{\"272\":1,\"292\":3}}],[\"表达\",{\"1\":{\"221\":1}}],[\"表格和分割线\",{\"1\":{\"14\":1}}],[\"服从领导者领导\",{\"1\":{\"221\":1}}],[\"服务网关\",{\"0\":{\"862\":1}}],[\"服务高可用部署\",{\"1\":{\"853\":1}}],[\"服务容灾\",{\"0\":{\"852\":1}}],[\"服务运行期间\",{\"1\":{\"842\":1}}],[\"服务启动时\",{\"1\":{\"842\":1}}],[\"服务健康监测和动态dns服务等功能\",{\"1\":{\"841\":1}}],[\"服务健康检查\",{\"1\":{\"837\":1}}],[\"服务负载均衡\",{\"1\":{\"837\":1}}],[\"服务实例会定期向eureka\",{\"1\":{\"837\":1}}],[\"服务实例信息和其他相关元数据\",{\"1\":{\"834\":1}}],[\"服务消费者可以通过查询服务实例列表来获取可用的服务提供者实例\",{\"1\":{\"837\":1}}],[\"服务管理\",{\"1\":{\"836\":1}}],[\"服务等功能\",{\"1\":{\"835\":1}}],[\"服务路由\",{\"1\":{\"834\":1}}],[\"服务发现|通常结合服务注册中心\",{\"1\":{\"846\":1}}],[\"服务发现\",{\"1\":{\"834\":1,\"835\":1}}],[\"服务注册信息的复制\",{\"1\":{\"838\":1}}],[\"服务注册\",{\"1\":{\"834\":1}}],[\"服务注册与发现\",{\"1\":{\"830\":1,\"831\":2,\"836\":2,\"837\":1}}],[\"服务调用\",{\"1\":{\"831\":1}}],[\"服务治理|不直接提供服务治理功能\",{\"1\":{\"846\":1}}],[\"服务治理\",{\"1\":{\"831\":1,\"834\":1}}],[\"服务治理和版本管理\",{\"1\":{\"829\":1}}],[\"服务间通信开销\",{\"1\":{\"829\":1}}],[\"服务挂了怎么办\",{\"1\":{\"824\":1}}],[\"服务的动态管理等\",{\"1\":{\"832\":1}}],[\"服务的治理和版本管理变得更加复杂\",{\"1\":{\"829\":1}}],[\"服务的注册和发现\",{\"1\":{\"824\":1}}],[\"服务的主节点地址\",{\"1\":{\"687\":1}}],[\"服务之间如何通信\",{\"1\":{\"824\":1}}],[\"服务之间相互协调\",{\"1\":{\"824\":1}}],[\"服务很多\",{\"1\":{\"824\":1}}],[\"服务与服务之间采用轻量级的通信机制\",{\"1\":{\"824\":1}}],[\"服务才能恢复\",{\"1\":{\"736\":1}}],[\"服务降级示例\",{\"1\":{\"858\":1}}],[\"服务降级可以保证系统的可用性和性能\",{\"1\":{\"856\":1}}],[\"服务降级会主动屏蔽一些非核心或可选的功能\",{\"1\":{\"856\":1}}],[\"服务降级是也是一种微服务架构中的容错机制\",{\"1\":{\"856\":1}}],[\"服务降级等服务治理功能\",{\"1\":{\"846\":1}}],[\"服务降级\",{\"1\":{\"704\":1,\"857\":1,\"858\":1}}],[\"服务熔断还支持自动恢复\",{\"1\":{\"855\":1}}],[\"服务熔断可以快速隔离该服务\",{\"1\":{\"855\":1}}],[\"服务熔断是微服务架构中的容错机制\",{\"1\":{\"855\":1}}],[\"服务熔断\",{\"1\":{\"704\":1,\"858\":1}}],[\"服务端检查配置是否有变更\",{\"1\":{\"843\":1}}],[\"服务端口\",{\"1\":{\"840\":1}}],[\"服务端存放消息的容器称为主题\",{\"1\":{\"743\":1}}],[\"服务端需要从网络中读写数据时\",{\"1\":{\"726\":1}}],[\"服务端接收到管道发送过来的多条命令后\",{\"1\":{\"726\":1}}],[\"服务端接收后\",{\"1\":{\"573\":1}}],[\"服务端\",{\"1\":{\"726\":1}}],[\"服务端在执行事务的过程中\",{\"1\":{\"724\":1}}],[\"服务端将重发\",{\"1\":{\"578\":1}}],[\"服务端将自己的数字证书发送给客户端\",{\"1\":{\"563\":1}}],[\"服务端就认为客户端出了故障\",{\"1\":{\"577\":1}}],[\"服务端就认为这个连接是可用的\",{\"1\":{\"569\":1}}],[\"服务端就发送一个探测报文段\",{\"1\":{\"577\":1}}],[\"服务端通常需要等待完成数据的发送和处理\",{\"1\":{\"575\":1}}],[\"服务端收到客户端关闭连接的请求并确认之后\",{\"1\":{\"578\":1}}],[\"服务端收到客户端的\",{\"1\":{\"575\":1}}],[\"服务端收到之后\",{\"1\":{\"573\":1}}],[\"服务端发送释放连接报文\",{\"1\":{\"574\":1}}],[\"服务端发送确认报文\",{\"1\":{\"574\":1}}],[\"服务端响应的确实是客户端发送的报文\",{\"1\":{\"571\":1}}],[\"服务端建立连接失败\",{\"1\":{\"570\":1}}],[\"服务端同样会采用类似客户端的超时重传机制\",{\"1\":{\"570\":1}}],[\"服务端不会进行任何的动作\",{\"1\":{\"570\":1}}],[\"服务端确认连接\",{\"1\":{\"568\":1}}],[\"服务端监听客户端的请求\",{\"1\":{\"568\":1}}],[\"服务端会遍历等待队列\",{\"1\":{\"843\":1}}],[\"服务端会自动返回结果给客户端\",{\"1\":{\"843\":1}}],[\"服务端会立即返回结果给客户端\",{\"1\":{\"843\":1}}],[\"服务端会\",{\"1\":{\"843\":1}}],[\"服务端会超时重传这个\",{\"1\":{\"576\":1}}],[\"服务端会从\",{\"1\":{\"566\":1,\"573\":1}}],[\"服务端会向客户端发送一个\",{\"1\":{\"566\":1}}],[\"服务端可以根据这个\",{\"1\":{\"566\":1}}],[\"服务端的证书都是由\",{\"1\":{\"564\":1}}],[\"服务端的证书从哪来的呢\",{\"1\":{\"564\":1}}],[\"服务端有一套数字证书\",{\"1\":{\"563\":1}}],[\"服务端推送\",{\"1\":{\"558\":1}}],[\"服务端错误状态码\",{\"1\":{\"551\":1}}],[\"服务端根据这个token是否存在\",{\"1\":{\"225\":1}}],[\"服务监控和告警\",{\"1\":{\"867\":1}}],[\"服务监控\",{\"0\":{\"875\":1},\"1\":{\"485\":1}}],[\"服务使用这个线程上下文类加载器去加载所需的\",{\"1\":{\"427\":1}}],[\"服务代码\",{\"1\":{\"427\":2}}],[\"服务器进行可视化展示和分析\",{\"1\":{\"868\":1}}],[\"服务器返回响应\",{\"1\":{\"845\":1}}],[\"服务器返回此响应时\",{\"1\":{\"551\":1}}],[\"服务器一旦收到\",{\"1\":{\"724\":1}}],[\"服务器信息等\",{\"1\":{\"612\":1}}],[\"服务器中出现最为频繁的复合型数据结构\",{\"1\":{\"731\":1}}],[\"服务器中\",{\"1\":{\"612\":1}}],[\"服务器能够返回正常的\",{\"1\":{\"612\":1}}],[\"服务器查询域名\",{\"1\":{\"600\":1}}],[\"服务器可以设置\",{\"1\":{\"579\":1}}],[\"服务器每收到一次客户端的数据\",{\"1\":{\"577\":1}}],[\"服务器以后就不能再收到客户端发来的数据\",{\"1\":{\"577\":1}}],[\"服务器防火墙会对收到的每一个\",{\"1\":{\"573\":1}}],[\"服务器并不立即分配资源进行处理\",{\"1\":{\"573\":1}}],[\"服务器根据一定的方法\",{\"1\":{\"573\":1}}],[\"服务器根据用户提交的信息\",{\"1\":{\"566\":1}}],[\"服务器关闭连接端口\",{\"1\":{\"569\":1}}],[\"服务器就会重新开启一个端口连接\",{\"1\":{\"569\":1}}],[\"服务器把客户端信息以某种形式记录在服务器上\",{\"1\":{\"566\":1}}],[\"服务器不知道你就是刚才的那个浏览器\",{\"1\":{\"565\":1}}],[\"服务器响应了\",{\"1\":{\"565\":1}}],[\"服务器将加密后的密文返回到客户端\",{\"1\":{\"563\":1}}],[\"服务器接收到客户端发来的密文密钥之后\",{\"1\":{\"563\":1}}],[\"服务器接着就返回所请求的页面作为响应\",{\"1\":{\"555\":1}}],[\"服务器的一个事务队列中\",{\"1\":{\"724\":1}}],[\"服务器的并发量\",{\"1\":{\"682\":1}}],[\"服务器的数据\",{\"1\":{\"682\":1}}],[\"服务器的地址固定为\",{\"1\":{\"612\":1}}],[\"服务器的负担\",{\"1\":{\"553\":1}}],[\"服务器的工具或者服务都有类似的架构\",{\"1\":{\"472\":1}}],[\"服务器从另外的地址响应资源\",{\"1\":{\"551\":1}}],[\"服务器从存储引擎接收数据的次数\",{\"1\":{\"510\":1}}],[\"服务器再向其中一个权限域名服务器发送一个请求\",{\"1\":{\"547\":1}}],[\"服务器再向其中一个负责com的顶级域名服务器发送一个请求\",{\"1\":{\"547\":1}}],[\"服务器向根域名服务器发送请求\",{\"1\":{\"547\":1}}],[\"服务器处理请求\",{\"1\":{\"546\":1}}],[\"服务器\",{\"1\":{\"510\":1,\"547\":1,\"682\":1,\"868\":2}}],[\"服务器之一\",{\"1\":{\"429\":1}}],[\"服务器重启后阻塞队列中的数据再加载\",{\"1\":{\"371\":1}}],[\"服务器端接收到这个确认包之后\",{\"1\":{\"574\":1}}],[\"服务器端进入\",{\"1\":{\"574\":2}}],[\"服务器端以为是客户端发出的有效请求\",{\"1\":{\"569\":1}}],[\"服务器端是不知道客户端有没有接收到服务器端返回的信息的\",{\"1\":{\"569\":1}}],[\"服务器端就进入\",{\"1\":{\"568\":1}}],[\"服务器端得到通知\",{\"1\":{\"280\":1}}],[\"服务器端用一个线程处理多个连接\",{\"1\":{\"280\":1}}],[\"服务器实现模式为一个连接一个线程\",{\"1\":{\"280\":1}}],[\"服务b开始执行分支事务\",{\"1\":{\"208\":1}}],[\"服务b中的\",{\"1\":{\"208\":1}}],[\"服务a开始远程调用b服务\",{\"1\":{\"208\":1}}],[\"服务a开始执行分支事务\",{\"1\":{\"208\":1}}],[\"服务a中的\",{\"1\":{\"208\":2}}],[\"服务\",{\"1\":{\"202\":1,\"379\":1,\"418\":1}}],[\"民主投票选出领袖后就开始了这届领袖的任期\",{\"1\":{\"221\":1}}],[\"领导者选举出的sentinel节点负责故障转移\",{\"1\":{\"688\":1}}],[\"领导者sentinel节点选举了解吗\",{\"0\":{\"689\":1}}],[\"领导者sentinel节点选举\",{\"1\":{\"688\":1}}],[\"领导者由跟随者投票选出\",{\"1\":{\"221\":1}}],[\"领导者\",{\"1\":{\"217\":1,\"221\":3}}],[\"前置控制器\",{\"1\":{\"815\":1}}],[\"前置通知\",{\"1\":{\"804\":1}}],[\"前进指针\",{\"1\":{\"732\":1}}],[\"前面说到了主从存在高可用和分布式的问题\",{\"1\":{\"691\":1}}],[\"前面描述的可以称之为basic\",{\"1\":{\"217\":1}}],[\"前者称为\",{\"1\":{\"682\":1}}],[\"前者是字节输出流\",{\"1\":{\"278\":1}}],[\"前者是字节输入流\",{\"1\":{\"278\":1}}],[\"前⾯的流量控制是避免发送⽅的数据填满接收⽅的缓存\",{\"1\":{\"585\":1}}],[\"前已经提交\",{\"1\":{\"523\":1}}],[\"前三种线程池的构造直接调用threadpoolexecutor的构造方法\",{\"1\":{\"361\":1}}],[\"前两种面向字节\",{\"1\":{\"306\":1}}],[\"前两者都需要显式地调用构造方法\",{\"1\":{\"261\":1}}],[\"前会执行\",{\"1\":{\"276\":1}}],[\"前会先执行\",{\"1\":{\"276\":1}}],[\"前缀索引也存在缺点\",{\"1\":{\"489\":1}}],[\"前缀\",{\"1\":{\"245\":1}}],[\"前端demo\",{\"0\":{\"128\":1}}],[\"前端开发\",{\"0\":{\"910\":1},\"2\":{\"69\":1,\"136\":1}}],[\"前端\",{\"0\":{\"50\":1,\"134\":1,\"916\":1},\"1\":{\"67\":1},\"2\":{\"81\":1}}],[\"怎么处理消息积压\",{\"0\":{\"758\":1}}],[\"怎么处理热key\",{\"0\":{\"710\":1},\"1\":{\"710\":1}}],[\"怎么处理呢\",{\"1\":{\"566\":1,\"712\":1}}],[\"怎么6\",{\"1\":{\"674\":1}}],[\"怎么应对\",{\"1\":{\"612\":1,\"613\":1}}],[\"怎么传给服务端呢\",{\"1\":{\"566\":1}}],[\"怎么存\",{\"1\":{\"566\":1}}],[\"怎么存储\",{\"0\":{\"466\":1}}],[\"怎么实现分布式消息事务的\",{\"0\":{\"765\":1}}],[\"怎么实现的\",{\"0\":{\"523\":1}}],[\"怎么实现有序的\",{\"0\":{\"183\":1,\"184\":1}}],[\"怎么看执行计划\",{\"0\":{\"493\":1}}],[\"怎么刷入磁盘的知道吗\",{\"0\":{\"483\":1}}],[\"怎么升\",{\"1\":{\"406\":1}}],[\"怎么说呢\",{\"1\":{\"406\":1}}],[\"怎么解决循环依赖的呢\",{\"0\":{\"800\":1}}],[\"怎么解决循环性能开销问题\",{\"1\":{\"337\":1}}],[\"怎么解决\",{\"0\":{\"579\":1,\"718\":1},\"1\":{\"579\":1}}],[\"怎么解决只能保证一个变量的原子操作问题\",{\"1\":{\"338\":1}}],[\"怎么解决aba问题\",{\"1\":{\"336\":1}}],[\"怎么使用\",{\"0\":{\"324\":1}}],[\"怎么回答threadlocal原理\",{\"1\":{\"310\":1}}],[\"怎么办\",{\"0\":{\"416\":1,\"417\":1,\"437\":1},\"1\":{\"282\":1,\"566\":1}}],[\"怎么转成\",{\"0\":{\"270\":1}}],[\"怎么把\",{\"1\":{\"258\":1}}],[\"怎么保证接口幂等性\",{\"0\":{\"225\":1}}],[\"怎么优化\",{\"0\":{\"217\":1}}],[\"共同关注\",{\"1\":{\"670\":1}}],[\"共同好友\",{\"1\":{\"669\":1}}],[\"共有\",{\"1\":{\"620\":1}}],[\"共享一个\",{\"1\":{\"797\":2}}],[\"共享session\",{\"1\":{\"670\":1}}],[\"共享内存区\",{\"1\":{\"641\":1}}],[\"共享内存是最快的\",{\"1\":{\"641\":1}}],[\"共享内存的机制\",{\"1\":{\"641\":1}}],[\"共享内存\",{\"1\":{\"641\":1}}],[\"共享锁\",{\"1\":{\"512\":1}}],[\"共享变量的内存地址\",{\"1\":{\"334\":1}}],[\"共享的二级缓存\",{\"1\":{\"317\":1}}],[\"共识决议形成\",{\"1\":{\"216\":1}}],[\"共计\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"算法⾸先检查表针指向的⻚⾯\",{\"1\":{\"658\":1}}],[\"算法的思想\",{\"1\":{\"658\":1}}],[\"算法的策略\",{\"1\":{\"584\":1}}],[\"算法有什么区别\",{\"0\":{\"617\":1}}],[\"算法意味着延迟发\",{\"1\":{\"584\":1}}],[\"算法和延迟确认不能一起使用\",{\"1\":{\"584\":1}}],[\"算法和延迟确认是干什么的\",{\"1\":{\"584\":1}}],[\"算法和延迟确认吗\",{\"0\":{\"584\":1}}],[\"算法以检验\",{\"1\":{\"580\":1}}],[\"算法获取该证书的\",{\"1\":{\"564\":1}}],[\"算法生成一个索引文件\",{\"1\":{\"496\":1}}],[\"算法会导致内存碎片比较多\",{\"1\":{\"405\":1}}],[\"算法一样\",{\"1\":{\"395\":1}}],[\"算法分为两个阶段\",{\"1\":{\"395\":1}}],[\"算法实现\",{\"1\":{\"227\":1}}],[\"算法\",{\"1\":{\"217\":1,\"395\":1,\"584\":3,\"591\":1}}],[\"算法流程\",{\"0\":{\"214\":1}}],[\"算法是\",{\"1\":{\"211\":1}}],[\"被选中的概率就越大\",{\"1\":{\"851\":2}}],[\"被封装成了\",{\"1\":{\"817\":1}}],[\"被拦截到的点\",{\"1\":{\"804\":1}}],[\"被消费的顺序和写人的顺序是否一致是不确定的\",{\"1\":{\"761\":1}}],[\"被设计成几乎是无状态的\",{\"1\":{\"748\":1}}],[\"被分配到同⼀个索引位置的多个键值对会形成⼀个单向链表\",{\"1\":{\"729\":1}}],[\"被分段后的\",{\"1\":{\"602\":1}}],[\"被动删等\",{\"1\":{\"719\":1}}],[\"被动攻击主要有两种形式\",{\"1\":{\"611\":1}}],[\"被动攻击\",{\"1\":{\"611\":1}}],[\"被动攻击和主动攻击\",{\"1\":{\"611\":1}}],[\"被赋予读权限的进程则可以读走队列中的消息\",{\"1\":{\"641\":1}}],[\"被携带发送到服务器\",{\"1\":{\"566\":1}}],[\"被写入\",{\"1\":{\"480\":1}}],[\"被称之为半自动orm映射工具\",{\"1\":{\"433\":1}}],[\"被子类覆盖的可能性\",{\"1\":{\"427\":1}}],[\"被破坏\",{\"1\":{\"427\":3}}],[\"被弱引用关联的对象只能生存到下一次垃圾收集发生为止\",{\"1\":{\"392\":1}}],[\"被窃取任务线程永远从双端队列的头部拿\",{\"1\":{\"373\":1}}],[\"被销毁\",{\"1\":{\"364\":1}}],[\"被定义出来屏蔽各种硬件和操作系统的内存访问差异\",{\"1\":{\"317\":1}}],[\"被垃圾回收器回收了\",{\"1\":{\"311\":1}}],[\"被推荐使用的做法\",{\"1\":{\"293\":1}}],[\"被统称为\",{\"1\":{\"280\":1}}],[\"被调用不一定会立即回收该对象\",{\"1\":{\"256\":1}}],[\"被\",{\"1\":{\"253\":1,\"255\":4,\"282\":1}}],[\"被告知投票的结果\",{\"1\":{\"213\":1}}],[\"被后一个\",{\"1\":{\"177\":1}}],[\"学习者\",{\"1\":{\"213\":1}}],[\"角色的机器出现故障后\",{\"1\":{\"767\":1}}],[\"角色类似于\",{\"1\":{\"748\":1}}],[\"角色\",{\"0\":{\"213\":1}}],[\"目的地址是\",{\"1\":{\"609\":1}}],[\"目的是不管线程之间的执行如何穿插\",{\"1\":{\"645\":1}}],[\"目的是检测数据在传输过程中的任何变化\",{\"1\":{\"581\":1}}],[\"目的是为了写出通用的代码\",{\"1\":{\"247\":1}}],[\"目的是为了保证分布式系统中的数据一致性\",{\"1\":{\"200\":1}}],[\"目标方法\",{\"1\":{\"806\":2}}],[\"目标类\",{\"1\":{\"806\":2}}],[\"目标类需要实现一个\",{\"1\":{\"806\":1}}],[\"目标对象\",{\"1\":{\"804\":1,\"806\":2}}],[\"目标端口号\",{\"1\":{\"580\":1}}],[\"目标相同\",{\"1\":{\"219\":1}}],[\"目前常见的服务熔断降级实现方案有这么几种\",{\"1\":{\"857\":1}}],[\"目前常用的几个中间件\",{\"1\":{\"741\":1}}],[\"目前较低\",{\"1\":{\"831\":1}}],[\"目前最主流的微服务开源解决方案有三种\",{\"1\":{\"830\":1}}],[\"目前最流行的缓存读写策略cache\",{\"1\":{\"707\":1}}],[\"目前最流行的分布式锁实现是通过redis\",{\"1\":{\"225\":1}}],[\"目前还不支持把slave自动转成\",{\"1\":{\"767\":1}}],[\"目前是java及c++\",{\"1\":{\"742\":1}}],[\"目前已经是redis持久化的主流方式\",{\"1\":{\"676\":1}}],[\"目前开源的实现方案中\",{\"1\":{\"526\":1}}],[\"目前只有\",{\"1\":{\"397\":1}}],[\"目前只有cms\",{\"1\":{\"397\":1}}],[\"目前\",{\"1\":{\"390\":1}}],[\"目前无法直接保证操作的原子性的\",{\"1\":{\"338\":1}}],[\"目前公认的解决\",{\"1\":{\"211\":1}}],[\"且部署和扩展困难\",{\"1\":{\"828\":1}}],[\"且程序中存在调用链\",{\"1\":{\"811\":1}}],[\"且不相互通信的\",{\"1\":{\"767\":1}}],[\"且定时同步维护的\",{\"1\":{\"748\":1}}],[\"且数据的复制是\",{\"1\":{\"682\":1}}],[\"且\",{\"1\":{\"677\":1}}],[\"且有一个字段声明内容体的大小\",{\"1\":{\"595\":1}}],[\"且参数易变能灵活传递的情况\",{\"1\":{\"436\":1}}],[\"且一旦顺序调整容易出错\",{\"1\":{\"436\":1}}],[\"且解析前需要遍历\",{\"1\":{\"433\":1}}],[\"且b\",{\"1\":{\"320\":1}}],[\"且当前散列数组中entry的数量已经达到了列表的扩容阈值\",{\"1\":{\"314\":1}}],[\"且具有\",{\"1\":{\"211\":1}}],[\"且链表的长度大于8的时候\",{\"1\":{\"172\":1}}],[\"向应用程序提供硬件的抽象\",{\"1\":{\"628\":1}}],[\"向服务器发送大量\",{\"1\":{\"573\":1}}],[\"向服务器发送\",{\"1\":{\"546\":1}}],[\"向sql语句传参数麻烦\",{\"1\":{\"433\":1}}],[\"向结衣表白\",{\"1\":{\"346\":1}}],[\"向所有\",{\"1\":{\"222\":1}}],[\"向\",{\"1\":{\"208\":4,\"765\":2}}],[\"着手\",{\"1\":{\"208\":1}}],[\"支付对象\",{\"1\":{\"441\":1}}],[\"支付平台提供查询订单支付操作结果接口\",{\"1\":{\"207\":1}}],[\"支付平台进行支付操作之后\",{\"1\":{\"207\":1}}],[\"支付平台进行支付\",{\"1\":{\"207\":1}}],[\"支付状态为支付中\",{\"1\":{\"207\":1}}],[\"支持服务注册与发现\",{\"1\":{\"841\":1}}],[\"支持多种序列化协议如grpc\",{\"1\":{\"846\":1}}],[\"支持多种语言和框架\",{\"1\":{\"841\":1}}],[\"支持多种配置文件格式\",{\"1\":{\"841\":1}}],[\"支持多线程并发收集\",{\"1\":{\"401\":1}}],[\"支持多线程\",{\"1\":{\"232\":1}}],[\"支持多线程编程\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"支持将配置文件存储在git\",{\"1\":{\"841\":1}}],[\"支持将返回值放在\",{\"1\":{\"784\":1}}],[\"支持编程式事务管理和声明式事务管理两种方式\",{\"1\":{\"809\":1}}],[\"支持构造方法注入\",{\"1\":{\"795\":1}}],[\"支持通过配置就来完成对事务的管理\",{\"1\":{\"782\":1}}],[\"支持集群消费和广播消费\",{\"1\":{\"751\":1}}],[\"支持push和pull两种消费模式\",{\"1\":{\"751\":1}}],[\"支持快速失败\",{\"1\":{\"750\":1}}],[\"支持的客户端语言不多\",{\"1\":{\"742\":1}}],[\"支持的哈希索引是自适应的\",{\"1\":{\"475\":1}}],[\"支持10亿级别的消息堆积\",{\"1\":{\"742\":1}}],[\"支持在系统内核的\",{\"1\":{\"560\":1}}],[\"支持行级锁\",{\"1\":{\"477\":1}}],[\"支持外键\",{\"1\":{\"475\":1,\"477\":1}}],[\"支持数据缓存\",{\"1\":{\"475\":1}}],[\"支持哈希索引\",{\"1\":{\"475\":1}}],[\"支持树索引\",{\"1\":{\"475\":1}}],[\"支持全文索引\",{\"1\":{\"475\":2}}],[\"支持事务吗\",{\"0\":{\"724\":1}}],[\"支持事务\",{\"1\":{\"475\":1}}],[\"支持延迟加载的原理都是一样的\",{\"1\":{\"442\":1}}],[\"支持存储过程\",{\"1\":{\"434\":1}}],[\"支持动态\",{\"1\":{\"434\":1}}],[\"支持\",{\"1\":{\"250\":1,\"784\":1,\"836\":2,\"868\":1}}],[\"支持随机访问\",{\"1\":{\"154\":1}}],[\"业务数据和回滚日志记录在同一个本地事务中提交\",{\"1\":{\"871\":1}}],[\"业务模块更简洁\",{\"1\":{\"804\":1}}],[\"业务幂等\",{\"1\":{\"757\":1}}],[\"业务幂等和消息去重\",{\"1\":{\"757\":1}}],[\"业务端负责发送消息\",{\"1\":{\"750\":1}}],[\"业务影响与不能登录相比就小很多\",{\"1\":{\"528\":1}}],[\"业务服务器无须自己进行读写分离\",{\"1\":{\"526\":1}}],[\"业务服务器将写操作发给数据库主机\",{\"1\":{\"525\":1}}],[\"业务服务读取线程池配置\",{\"1\":{\"368\":1}}],[\"业务逻辑需要实现try\",{\"1\":{\"870\":1}}],[\"业务逻辑代码中没有参和通用逻辑的代码\",{\"1\":{\"804\":1}}],[\"业务逻辑层\",{\"1\":{\"784\":1}}],[\"业务逻辑处理方便\",{\"1\":{\"436\":1}}],[\"业务逻辑中多一次插入的db操作\",{\"1\":{\"205\":1}}],[\"业务代码\",{\"1\":{\"324\":3}}],[\"业务系统根据一定业务规则去支付平台查询支付结果\",{\"1\":{\"207\":1}}],[\"业务系统调用支付平台支付接口\",{\"1\":{\"207\":1}}],[\"业务系统调用支付平台进行支付\",{\"1\":{\"207\":1}}],[\"业务系统自行调用支付平台提供一个查询接口\",{\"1\":{\"207\":1}}],[\"消除环路等待条件\",{\"1\":{\"648\":1}}],[\"消除不可剥夺条件\",{\"1\":{\"648\":1}}],[\"消除这个条件的办法很简单\",{\"1\":{\"648\":1}}],[\"消除请求并持有条件\",{\"1\":{\"648\":1}}],[\"消除互斥条件\",{\"1\":{\"648\":1}}],[\"消除了传统的\",{\"1\":{\"605\":1}}],[\"消除客户端单方面建立连接的状态\",{\"1\":{\"570\":1}}],[\"消耗资源并不多\",{\"1\":{\"538\":1}}],[\"消费不了\",{\"1\":{\"765\":1}}],[\"消费的消息\",{\"1\":{\"765\":1}}],[\"消费的记录需要落库\",{\"1\":{\"757\":1}}],[\"消费端通过使用\",{\"1\":{\"760\":1}}],[\"消费端不能并发处理顺序消息\",{\"1\":{\"760\":1}}],[\"消费端接收到消息进行消费\",{\"1\":{\"206\":1}}],[\"消费完了之后\",{\"1\":{\"758\":1}}],[\"消费\",{\"0\":{\"756\":1},\"1\":{\"761\":1}}],[\"消费阶段\",{\"1\":{\"753\":1}}],[\"消费进度和其他的内部维护工作\",{\"1\":{\"751\":1}}],[\"消费位置就加一\",{\"1\":{\"744\":1}}],[\"消费组中包含多个消费者\",{\"1\":{\"744\":1}}],[\"消费者id排序\",{\"1\":{\"777\":1}}],[\"消费者段消费到消息之后\",{\"1\":{\"765\":1}}],[\"消费者扩容\",{\"1\":{\"758\":1}}],[\"消费者\",{\"1\":{\"746\":1}}],[\"消费者和主题\",{\"1\":{\"744\":1}}],[\"消费者就是订阅者\",{\"1\":{\"743\":1}}],[\"消费者死循环rpop从队列中消费消息\",{\"1\":{\"722\":1}}],[\"消费时先去查询是否已经消费\",{\"1\":{\"225\":1}}],[\"消息通信模式和客户端id的值等信息\",{\"1\":{\"777\":1}}],[\"消息刷盘怎么实现的呢\",{\"0\":{\"774\":1}}],[\"消息大小size和消息tag的hashcode值\",{\"1\":{\"771\":1}}],[\"消息主要是顺序写入日志文件\",{\"1\":{\"771\":1}}],[\"消息主体以及元数据的存储主体\",{\"1\":{\"771\":1}}],[\"消息内容不是定长的\",{\"1\":{\"771\":1}}],[\"消息内容泄露攻击和流量分析攻击\",{\"1\":{\"611\":1}}],[\"消息存储的整体的设计\",{\"1\":{\"771\":1}}],[\"消息存储和中转角色\",{\"1\":{\"749\":1}}],[\"消息发送应该弱依赖注册中心\",{\"1\":{\"770\":1}}],[\"消息发送成功\",{\"1\":{\"765\":1}}],[\"消息迁移queue扩容\",{\"1\":{\"758\":1}}],[\"消息去重\",{\"1\":{\"757\":1}}],[\"消息肯定在slave中有备份\",{\"1\":{\"755\":1}}],[\"消息只要持久化到commitlog\",{\"1\":{\"755\":1}}],[\"消息消费分组名称\",{\"1\":{\"777\":1}}],[\"消息消费是针对主题进行的\",{\"1\":{\"771\":1}}],[\"消息消费队列在同一消费组不同消费者之间的负载均衡\",{\"1\":{\"777\":1}}],[\"消息消费队列\",{\"1\":{\"771\":1}}],[\"消息消费者\",{\"1\":{\"751\":1}}],[\"消息消费模式有两种\",{\"1\":{\"745\":1}}],[\"消息由producer通过多种负载均衡模式发送到broker集群\",{\"1\":{\"750\":1}}],[\"消息生产者\",{\"1\":{\"750\":1}}],[\"消息的消费模式了解吗\",{\"0\":{\"745\":1}}],[\"消息的接收方称为订阅者\",{\"1\":{\"743\":1}}],[\"消息的发送方称为发布者\",{\"1\":{\"743\":1}}],[\"消息可能在哪些阶段丢失呢\",{\"1\":{\"753\":1}}],[\"消息可以做到0丢失\",{\"1\":{\"742\":1}}],[\"消息可靠性\",{\"1\":{\"742\":1}}],[\"消息作为响应\",{\"1\":{\"698\":1}}],[\"消息队列等\",{\"1\":{\"877\":1}}],[\"消息队列的平均分配算法\",{\"1\":{\"777\":1}}],[\"消息队列有两种模型\",{\"1\":{\"743\":1}}],[\"消息队列有哪些消息模型\",{\"0\":{\"743\":1}}],[\"消息队列合一用来削峰\",{\"1\":{\"740\":1}}],[\"消息队列主要有三大用途\",{\"1\":{\"740\":1}}],[\"消息队列保证key被删除\",{\"1\":{\"708\":1}}],[\"消息队列克服了信号承载信息量少\",{\"1\":{\"641\":1}}],[\"消息队列就是保存在内核中的消息链表\",{\"1\":{\"641\":1}}],[\"消息队列\",{\"1\":{\"641\":2,\"669\":1,\"670\":1,\"744\":1,\"766\":3,\"831\":1}}],[\"消息\",{\"1\":{\"608\":1,\"744\":1}}],[\"消息中间件将这条prepare消息删除\",{\"1\":{\"206\":1}}],[\"消息中间件将消息下发至消费端\",{\"1\":{\"206\":1}}],[\"消息事务依赖于消息中间件的事务消息\",{\"1\":{\"206\":1}}],[\"消息事务一定要保证业务操作与消息发送的一致性\",{\"1\":{\"206\":1}}],[\"消息事务的原理是将两个事务通过消息中间件进行异步解耦\",{\"1\":{\"206\":1}}],[\"了解seata的实现原理吗\",{\"0\":{\"871\":1}}],[\"了解多少\",{\"0\":{\"824\":1}}],[\"了解\",{\"0\":{\"584\":1},\"1\":{\"417\":1}}],[\"了解该时间点之前有没有程序上线\",{\"1\":{\"417\":1}}],[\"了解哪些可视化的性能监控和故障处理工具\",{\"0\":{\"411\":1}}],[\"了解锁升级\",{\"1\":{\"327\":1}}],[\"了解吗\",{\"0\":{\"157\":1,\"203\":1,\"293\":1,\"345\":1,\"346\":1,\"348\":1,\"349\":1,\"523\":1,\"559\":1,\"687\":1,\"731\":1,\"734\":1}}],[\"了多少个对象\",{\"1\":{\"324\":1}}],[\"了很多情况\",{\"1\":{\"270\":1}}],[\"了\",{\"1\":{\"256\":1,\"276\":3,\"287\":1,\"290\":1,\"408\":1,\"504\":1,\"534\":1,\"594\":1,\"813\":1}}],[\"了对本地消息表的操作和轮询发送mq的操作\",{\"1\":{\"206\":1}}],[\"乍一看\",{\"1\":{\"206\":1}}],[\"调整大对象\",{\"1\":{\"718\":1}}],[\"调整到\",{\"1\":{\"413\":1}}],[\"调⽤才可以获取到结果\",{\"1\":{\"663\":1}}],[\"调⽤⼀个实例对象的⾮静态\",{\"1\":{\"324\":1}}],[\"调度的单位\",{\"1\":{\"642\":1}}],[\"调度\",{\"1\":{\"642\":1}}],[\"调度程序便停止该进程的执行\",{\"1\":{\"640\":1}}],[\"调出的最优参数\",{\"1\":{\"591\":1}}],[\"调节所要发送数据的量\",{\"1\":{\"585\":1}}],[\"调优是不得已而为之\",{\"1\":{\"413\":1}}],[\"调优是一件很严肃的事情\",{\"1\":{\"413\":1}}],[\"调优流程图\",{\"1\":{\"413\":1}}],[\"调优吗\",{\"0\":{\"413\":1}}],[\"调优\",{\"0\":{\"409\":1}}],[\"调优问题\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"调用目标对象方法\",{\"1\":{\"806\":1}}],[\"调用目标类的代码\",{\"1\":{\"806\":1}}],[\"调用目标网站接口执行攻击者指定的操作\",{\"1\":{\"615\":1}}],[\"调用instantiationawarebeanpostprocessor的postprocesspropertyvalues\",{\"1\":{\"802\":1}}],[\"调用beanfactoryaware\",{\"1\":{\"793\":2}}],[\"调用beannameaware\",{\"1\":{\"793\":2}}],[\"调用构造方法\",{\"1\":{\"793\":2}}],[\"调用updateprocessqueuetableinrebalance\",{\"1\":{\"777\":1}}],[\"调用营销服务加营销数据\",{\"1\":{\"740\":1}}],[\"调用\",{\"1\":{\"720\":1,\"816\":1,\"817\":2}}],[\"调用返回\",{\"1\":{\"570\":1}}],[\"调用preparedstatement的set方法来赋值\",{\"1\":{\"439\":1}}],[\"调用session\",{\"1\":{\"435\":2}}],[\"调用start\",{\"1\":{\"300\":1}}],[\"调用方法的\",{\"1\":{\"402\":1}}],[\"调用线程池的shutdownnow\",{\"1\":{\"367\":1}}],[\"调用线程池的shutdown\",{\"1\":{\"367\":1}}],[\"调用类方法这时候就要用到反射\",{\"1\":{\"289\":1}}],[\"调用rpc接口修改订单系统消息表的状态为已完成或者直接删除这条消息\",{\"1\":{\"205\":1}}],[\"发货\",{\"1\":{\"759\":1}}],[\"发\",{\"1\":{\"743\":1,\"746\":1}}],[\"发布者将消息发送到主题中\",{\"1\":{\"743\":1}}],[\"发布者将消息发布到指定的频道频道\",{\"1\":{\"722\":1}}],[\"发布\",{\"1\":{\"722\":1,\"743\":1}}],[\"发布订阅\",{\"1\":{\"668\":1}}],[\"发⽣缺⻚时\",{\"1\":{\"658\":1}}],[\"发⽣中断后\",{\"1\":{\"633\":1}}],[\"发⽣快速重传的拥塞发⽣算法\",{\"1\":{\"588\":1}}],[\"发包的个数是指数性的增⻓\",{\"1\":{\"586\":1}}],[\"发誓生平不娶\",{\"1\":{\"346\":1}}],[\"发起全局事务\",{\"1\":{\"872\":1}}],[\"发起全局事务的提交或回滚\",{\"1\":{\"208\":1}}],[\"发起选举流程\",{\"1\":{\"698\":1}}],[\"发起选举\",{\"1\":{\"698\":1}}],[\"发起\",{\"1\":{\"663\":1}}],[\"发起进攻\",{\"1\":{\"345\":1}}],[\"发现潜在的问题和趋势\",{\"1\":{\"877\":1}}],[\"发现依赖\",{\"1\":{\"799\":1,\"800\":1}}],[\"发现\",{\"1\":{\"746\":1,\"800\":1}}],[\"发现已经有人蹲在那里了\",{\"1\":{\"727\":1}}],[\"发现慢查询后\",{\"1\":{\"718\":1}}],[\"发现慢查询\",{\"1\":{\"718\":1}}],[\"发现缓存中没有\",{\"1\":{\"702\":1}}],[\"发现新的主节点后\",{\"1\":{\"684\":1}}],[\"发现只能查一年范围内的支付记录\",{\"1\":{\"531\":1}}],[\"发现获取mapper的过程\",{\"1\":{\"450\":1}}],[\"发现老年代可用的连续内存空间\",{\"1\":{\"399\":1}}],[\"发现没坑位了\",{\"1\":{\"387\":1}}],[\"发现countdownlatch无能为力了\",{\"1\":{\"346\":1}}],[\"发现是a就会执行修改\",{\"1\":{\"336\":1}}],[\"发现不用自己去lock和unlock\",{\"1\":{\"325\":1}}],[\"发现先获取到当前线程\",{\"1\":{\"310\":1}}],[\"发送半消息\",{\"1\":{\"765\":1}}],[\"发送低延时\",{\"1\":{\"750\":1}}],[\"发送消息\",{\"1\":{\"744\":1,\"763\":1}}],[\"发送消息等等\",{\"1\":{\"740\":1}}],[\"发送psync命令进行数据同步\",{\"1\":{\"685\":1}}],[\"发送ping命令\",{\"1\":{\"684\":1}}],[\"发送prepare消息到消息中间件\",{\"1\":{\"206\":1}}],[\"发送用户数据\",{\"1\":{\"615\":1}}],[\"发送到银行网站\",{\"1\":{\"613\":1}}],[\"发送到目的主机的\",{\"1\":{\"609\":1}}],[\"发送到mq\",{\"1\":{\"205\":1}}],[\"发送缓冲区剩余空间大小\",{\"1\":{\"595\":1}}],[\"发送缓冲区的大小\",{\"1\":{\"595\":1}}],[\"发送⽅\",{\"1\":{\"594\":1}}],[\"发送⽅收到了三次同样的\",{\"1\":{\"593\":1}}],[\"发送⽅发出了\",{\"1\":{\"592\":1}}],[\"发送⽅⼀直在囤积数据\",{\"1\":{\"584\":1}}],[\"发送端使用\",{\"1\":{\"760\":1}}],[\"发送端将每个数据包封装为固定长度\",{\"1\":{\"595\":1}}],[\"发送端收到了三个\",{\"1\":{\"592\":1}}],[\"发送端会认为也丢失了\",{\"1\":{\"591\":1}}],[\"发送端的滑动窗口包含四大部分\",{\"1\":{\"583\":1}}],[\"发送窗⼝\",{\"1\":{\"585\":1}}],[\"发送窗口和接收窗口\",{\"1\":{\"583\":1}}],[\"发送一个数据\",{\"1\":{\"583\":1}}],[\"发送一个确认包\",{\"1\":{\"574\":1}}],[\"发送方发送内容\",{\"1\":{\"641\":1}}],[\"发送方收到\",{\"1\":{\"588\":1}}],[\"发送方维护一个拥塞窗口\",{\"1\":{\"585\":1}}],[\"发送方停止发送\",{\"1\":{\"582\":1}}],[\"发送方继续发送\",{\"1\":{\"582\":1}}],[\"发送方又发送\",{\"1\":{\"582\":1}}],[\"发送方的snd\",{\"1\":{\"582\":1}}],[\"发送方的应用进程向接收方的应用进程传送数据\",{\"1\":{\"544\":1}}],[\"发送方就会知道接收方是否收到对应的包\",{\"1\":{\"581\":1}}],[\"发送完毕后\",{\"1\":{\"568\":3,\"574\":3}}],[\"发送\",{\"1\":{\"222\":1,\"609\":1,\"765\":1}}],[\"发送成功后\",{\"1\":{\"206\":1}}],[\"发生了消息积压\",{\"1\":{\"758\":1}}],[\"发生锁冲突的概率低\",{\"1\":{\"512\":1}}],[\"发生锁冲突概率高\",{\"1\":{\"512\":1}}],[\"发生垃圾收集时\",{\"1\":{\"396\":1}}],[\"发生下面几种情况才会返回\",{\"1\":{\"302\":1}}],[\"发生\",{\"1\":{\"175\":1}}],[\"发生哈希碰撞的概率就降低了\",{\"1\":{\"173\":1}}],[\"发生概率仅为0\",{\"1\":{\"172\":1}}],[\"开销要⼩很多\",{\"1\":{\"643\":1}}],[\"开销和加锁速度介于表锁和行锁之间\",{\"1\":{\"512\":1}}],[\"开销大\",{\"1\":{\"512\":1}}],[\"开销小\",{\"1\":{\"512\":1}}],[\"开头\",{\"1\":{\"505\":1,\"603\":5}}],[\"开头的非法链接\",{\"1\":{\"615\":1}}],[\"开头的\",{\"1\":{\"294\":3}}],[\"开启集群限流后\",{\"1\":{\"861\":1}}],[\"开启自动配置的注解是\",{\"1\":{\"820\":1}}],[\"开启一个定时任务\",{\"1\":{\"582\":1}}],[\"开启\",{\"1\":{\"485\":1,\"720\":1}}],[\"开源的分布式应用性能监控系统\",{\"1\":{\"868\":1}}],[\"开源的分布式追踪系统\",{\"1\":{\"868\":1}}],[\"开源的一种分布式键值存储系统\",{\"1\":{\"835\":1}}],[\"开源的服务发现框架\",{\"1\":{\"835\":1}}],[\"开源的多个组件\",{\"1\":{\"830\":1}}],[\"开源的\",{\"1\":{\"534\":1}}],[\"开源\",{\"1\":{\"411\":1}}],[\"开车出门在外的一个老大难问题就是停车\",{\"1\":{\"348\":1}}],[\"开黑的时候\",{\"1\":{\"345\":1}}],[\"开放地址解决冲突\",{\"1\":{\"314\":1}}],[\"开放定址法是什么意思呢\",{\"1\":{\"313\":1}}],[\"开放定址法就是从冲突的位置再接着往下找\",{\"1\":{\"171\":1}}],[\"开放定址法\",{\"1\":{\"171\":1,\"313\":1}}],[\"开始时间\",{\"1\":{\"805\":1}}],[\"开始打印请求日志\",{\"1\":{\"805\":1}}],[\"开始实例化了\",{\"1\":{\"800\":1}}],[\"开始叫唤老王\",{\"1\":{\"568\":1}}],[\"开始对堆中对象进行可达性分析\",{\"1\":{\"404\":1}}],[\"开始直接关联可达的对象\",{\"1\":{\"404\":1}}],[\"开始接⼝⽅法可以有默认实现\",{\"1\":{\"252\":1}}],[\"开始\",{\"1\":{\"242\":2,\"280\":1,\"475\":1}}],[\"开发并贡献给开源社区\",{\"1\":{\"868\":1}}],[\"开发并于2011年开源\",{\"1\":{\"830\":1}}],[\"开发公司\",{\"1\":{\"836\":1}}],[\"开发语言\",{\"1\":{\"831\":1}}],[\"开发库\",{\"1\":{\"819\":1}}],[\"开发\",{\"1\":{\"819\":1,\"835\":1}}],[\"开发者可以定义降级逻辑\",{\"1\":{\"858\":1}}],[\"开发者可以轻松地指定url\",{\"1\":{\"847\":1}}],[\"开发者体验的工具\",{\"1\":{\"819\":1}}],[\"开发者只需将注意力集中业务逻辑的处理上\",{\"1\":{\"815\":1}}],[\"开发者嫌多线程麻烦\",{\"1\":{\"673\":1}}],[\"开发中避免不了会对同一个类里面的方法调用\",{\"1\":{\"813\":1}}],[\"开发中非常难用的一些\",{\"1\":{\"782\":1}}],[\"开发框架\",{\"1\":{\"782\":1}}],[\"开发的时候一般使用\",{\"1\":{\"712\":1}}],[\"开发手册\",{\"1\":{\"490\":1}}],[\"开发人员通过这些本地api来操纵数据库\",{\"1\":{\"449\":1}}],[\"开发人员在项目中为了解决接口超时问题\",{\"1\":{\"224\":1}}],[\"开发工作量相对大些\",{\"1\":{\"434\":1}}],[\"开发时只需要关注\",{\"1\":{\"433\":1}}],[\"开发团队就有放弃永久代\",{\"1\":{\"381\":1}}],[\"开发这么写\",{\"1\":{\"245\":1}}],[\"开发成本高\",{\"1\":{\"204\":1}}],[\"性能好\",{\"1\":{\"741\":1}}],[\"性能和吞吐量不太理想\",{\"1\":{\"741\":1}}],[\"性能考虑\",{\"1\":{\"732\":1}}],[\"性能应该更强了\",{\"1\":{\"713\":1}}],[\"性能极⾼\",{\"1\":{\"671\":1}}],[\"性能是mysql的⼏⼗倍\",{\"1\":{\"671\":1}}],[\"性能的损耗会呈指数级增⻓\",{\"1\":{\"664\":1}}],[\"性能各异的网络看作一个统一的网络\",{\"1\":{\"602\":1}}],[\"性能比较差\",{\"1\":{\"534\":1}}],[\"性能同样可能成为瓶颈\",{\"1\":{\"531\":1}}],[\"性能优化的利器\",{\"1\":{\"497\":1}}],[\"性能从最优到最差分别为\",{\"1\":{\"493\":1}}],[\"性能监控工具\",{\"1\":{\"410\":1}}],[\"性能高效\",{\"1\":{\"340\":1}}],[\"性能\",{\"0\":{\"524\":1},\"1\":{\"330\":1,\"741\":1}}],[\"性能等几个维度去回答这个问题\",{\"1\":{\"330\":1}}],[\"性能上更高一些\",{\"1\":{\"264\":1}}],[\"性能更好\",{\"1\":{\"225\":1}}],[\"性能低下问题\",{\"1\":{\"204\":1}}],[\"性能较高\",{\"1\":{\"159\":1}}],[\"取值\",{\"1\":{\"694\":1}}],[\"取值后\",{\"1\":{\"694\":1}}],[\"取⽽代之⽤动态数组\",{\"1\":{\"664\":1}}],[\"取代了netflix\",{\"1\":{\"864\":1}}],[\"取代\",{\"1\":{\"558\":1}}],[\"取出指定行的记录\",{\"1\":{\"470\":1}}],[\"取出key的threadlocalhashcode\",{\"1\":{\"312\":1}}],[\"取得两张表中满足存在连接匹配关系的记录\",{\"1\":{\"458\":1}}],[\"取独占资源时被挂起后放入aqs\",{\"1\":{\"331\":1}}],[\"取消待执行的业务\",{\"1\":{\"204\":1}}],[\"取key平方的中间几位作为映射的位置\",{\"1\":{\"170\":1}}],[\"取key的某些数字\",{\"1\":{\"170\":1}}],[\"阶段\",{\"0\":{\"215\":1,\"216\":1},\"1\":{\"204\":2}}],[\"针对producer和consumer分别采用了数据和索引部分相分离的存储结构\",{\"1\":{\"771\":1}}],[\"针对这种情况\",{\"1\":{\"718\":1}}],[\"针对资源耗尽攻击\",{\"1\":{\"614\":1}}],[\"针对\",{\"1\":{\"614\":1}}],[\"针对大对象或者长生命周期对象导致的\",{\"1\":{\"417\":1}}],[\"针对该接口类型的所有\",{\"1\":{\"292\":1}}],[\"针对异常的处理主要有两种方式\",{\"1\":{\"275\":1}}],[\"针对不同系统的实现\",{\"1\":{\"233\":1}}],[\"针对每个操作\",{\"1\":{\"204\":1}}],[\"针对特定的场景进行编码\",{\"1\":{\"76\":1}}],[\"超文本传输协议\",{\"1\":{\"845\":1}}],[\"超时时间应该设置为多少呢\",{\"1\":{\"591\":1}}],[\"超时那么强烈\",{\"1\":{\"589\":1}}],[\"超时再重传\",{\"1\":{\"588\":1}}],[\"超时重传不是十分完美的重传方案\",{\"1\":{\"591\":1}}],[\"超时重传时间\",{\"1\":{\"591\":1}}],[\"超时重传是指发送出去的数据包到接收到确认包之间的时间\",{\"1\":{\"581\":1}}],[\"超时重传\",{\"0\":{\"591\":1},\"1\":{\"581\":2,\"588\":2,\"591\":1}}],[\"超时都会失效\",{\"1\":{\"566\":1}}],[\"超时等问题时\",{\"1\":{\"347\":1}}],[\"超时等待状态\",{\"1\":{\"303\":1}}],[\"超时\",{\"1\":{\"203\":1,\"576\":1}}],[\"超过这个时间报⽂将被丢弃\",{\"1\":{\"576\":1}}],[\"超过三张表\",{\"1\":{\"490\":1}}],[\"超过一定的时间\",{\"1\":{\"353\":1}}],[\"超过一定次数\",{\"1\":{\"337\":1}}],[\"超过范围\",{\"1\":{\"269\":1}}],[\"超过最大请求数的请求会被拒绝\",{\"1\":{\"227\":1}}],[\"超过1000l\",{\"1\":{\"776\":1}}],[\"超过1\",{\"1\":{\"222\":1}}],[\"超过则扩容\",{\"1\":{\"164\":1}}],[\"超过int范围\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"预编译=设置参数=执行\",{\"1\":{\"445\":1}}],[\"预编译sql一次==\",{\"1\":{\"445\":1}}],[\"预编译处理\",{\"1\":{\"439\":1}}],[\"预期的值\",{\"1\":{\"334\":1}}],[\"预提交请求\",{\"1\":{\"203\":1}}],[\"预提交阶段\",{\"1\":{\"203\":2,\"872\":1}}],[\"预览模式\",{\"0\":{\"38\":1}}],[\"协商结束\",{\"1\":{\"216\":1}}],[\"协调子线程开始动作\",{\"1\":{\"345\":1}}],[\"协调子线程结束动作\",{\"1\":{\"345\":1}}],[\"协调其管辖之下的所有分支事务\",{\"1\":{\"208\":1}}],[\"协调者根据参与者在准备阶段的响应判断是否执行事务还是中断事务\",{\"1\":{\"203\":2}}],[\"协调者向参与者发送commit请求\",{\"1\":{\"203\":1}}],[\"协议对每一个写请求\",{\"1\":{\"770\":1}}],[\"协议层\",{\"1\":{\"609\":1}}],[\"协议通过给每个\",{\"1\":{\"602\":1}}],[\"协议根据路由选择协议提供的路由信息对\",{\"1\":{\"602\":1}}],[\"协议主要有以下几个作用\",{\"1\":{\"602\":1}}],[\"协议一起构成了\",{\"1\":{\"602\":1}}],[\"协议为什么不可靠\",{\"0\":{\"599\":1}}],[\"协议与客户端进行通讯才能保证这种超大规模的服务\",{\"1\":{\"598\":1}}],[\"协议保证数据可靠性的另一个重要机制\",{\"1\":{\"591\":1}}],[\"协议保证了\",{\"1\":{\"559\":1}}],[\"协议的分布式事务模式\",{\"1\":{\"870\":1}}],[\"协议的功能\",{\"0\":{\"608\":1}}],[\"协议的工作过程\",{\"0\":{\"606\":1}}],[\"协议的核心\",{\"1\":{\"602\":1}}],[\"协议的定义和作用\",{\"0\":{\"602\":1}}],[\"协议的超时重传机制\",{\"1\":{\"578\":1}}],[\"协议的变迁\",{\"1\":{\"559\":1}}],[\"协议中服务端不会保存客户端的任何信息\",{\"1\":{\"565\":1}}],[\"协议是一种面向无连接的协议\",{\"1\":{\"608\":1}}],[\"协议是一种无连接\",{\"1\":{\"602\":1}}],[\"协议是什么\",{\"1\":{\"602\":1}}],[\"协议是无连接方式的协议\",{\"1\":{\"598\":1}}],[\"协议是无状态的\",{\"0\":{\"565\":1}}],[\"协议是能保证通信是安全的\",{\"1\":{\"562\":1}}],[\"协议需要向\",{\"1\":{\"561\":1}}],[\"协议支持\",{\"1\":{\"560\":1}}],[\"协议不带有状态\",{\"1\":{\"558\":1}}],[\"协议版本字段\",{\"1\":{\"556\":1}}],[\"协议定义了浏览器怎么向服务器请求文档\",{\"1\":{\"555\":1}}],[\"协议有哪些作用\",{\"1\":{\"602\":1}}],[\"协议有\",{\"1\":{\"542\":1}}],[\"协议将\",{\"1\":{\"221\":1}}],[\"协议\",{\"0\":{\"598\":1},\"1\":{\"202\":1,\"548\":1,\"562\":1,\"598\":1,\"602\":1,\"606\":1,\"609\":1,\"836\":1,\"871\":1}}],[\"三种方案的区别\",{\"1\":{\"831\":1}}],[\"三级没有问题\",{\"1\":{\"801\":1}}],[\"三级缓存\",{\"1\":{\"800\":1}}],[\"三是负责暂存传输的邮局\",{\"1\":{\"747\":1}}],[\"三个问题属于redis的分布式问题\",{\"1\":{\"686\":1}}],[\"三个索引\",{\"1\":{\"509\":1}}],[\"三次握⼿之后\",{\"1\":{\"561\":1}}],[\"三次握⼿之后便可进⾏\",{\"1\":{\"561\":1}}],[\"三次握手就完成了\",{\"1\":{\"573\":1}}],[\"三次握手时\",{\"1\":{\"573\":1}}],[\"三次握手中每一次没收到报文会发生什么情况\",{\"0\":{\"570\":1}}],[\"三次握手通俗比喻\",{\"1\":{\"568\":1}}],[\"三次握手的过程\",{\"1\":{\"568\":1}}],[\"三次握手是最重要的知识点\",{\"1\":{\"568\":1}}],[\"三次握手\",{\"1\":{\"546\":1}}],[\"三万字\",{\"1\":{\"540\":1}}],[\"三张表\",{\"1\":{\"534\":1}}],[\"三者都表示删除\",{\"1\":{\"467\":1}}],[\"三大范式的作用是为了控制数据库的冗余\",{\"1\":{\"460\":1}}],[\"三\",{\"0\":{\"409\":1}}],[\"三步操作了\",{\"1\":{\"318\":1}}],[\"三道经典异常处理代码题\",{\"0\":{\"276\":1}}],[\"三类角色的变迁图如下\",{\"1\":{\"221\":1}}],[\"三阶段提交解决的只是两阶段提交中单体故障和同步阻塞的问题\",{\"1\":{\"203\":1}}],[\"三阶段提交有这么三个阶段\",{\"1\":{\"203\":1}}],[\"三阶段提交\",{\"0\":{\"203\":1},\"1\":{\"203\":1}}],[\"三分恶\",{\"1\":{\"150\":1,\"186\":1,\"188\":1,\"227\":1,\"229\":1,\"294\":1,\"296\":1,\"373\":1,\"375\":1,\"429\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"释放\",{\"1\":{\"555\":1}}],[\"释放频繁造成系统资源浪费从而影响系统性能\",{\"1\":{\"433\":1}}],[\"释放资源\",{\"1\":{\"202\":1}}],[\"释放锁\",{\"1\":{\"197\":1}}],[\"释放锁的时候删除记录就行\",{\"1\":{\"196\":1}}],[\"两列\",{\"1\":{\"531\":1}}],[\"两次读取得到的结果集不一样了\",{\"1\":{\"521\":1}}],[\"两者是缺一不可的\",{\"1\":{\"607\":1}}],[\"两者关系\",{\"1\":{\"387\":1}}],[\"两者最核心的区别\",{\"1\":{\"347\":1}}],[\"两者都是\",{\"1\":{\"333\":1}}],[\"两者性能就差不多了\",{\"1\":{\"330\":1}}],[\"两种解决方案的对比\",{\"1\":{\"703\":1}}],[\"两种\",{\"1\":{\"682\":1}}],[\"两种方式的选择由\",{\"1\":{\"383\":1}}],[\"两种情况\",{\"1\":{\"328\":1}}],[\"两种集合都需要遍历\",{\"1\":{\"154\":1}}],[\"两步操作\",{\"1\":{\"318\":1}}],[\"两个类发生循环依赖时\",{\"1\":{\"800\":1}}],[\"两个方式\",{\"1\":{\"784\":1}}],[\"两个方法\",{\"1\":{\"438\":1}}],[\"两个人都往旁边让\",{\"1\":{\"649\":1}}],[\"两个凑在一起就会造成更大的延迟\",{\"1\":{\"584\":1}}],[\"两个最大段生命周期\",{\"1\":{\"574\":1}}],[\"两个相同的查询\",{\"1\":{\"521\":1}}],[\"两个数据类型都可以存储微秒的小数秒\",{\"1\":{\"463\":1}}],[\"两个数据类型都包含\",{\"1\":{\"463\":1}}],[\"两个数据类型存储时间的表现格式一致\",{\"1\":{\"463\":1}}],[\"两个区域\",{\"1\":{\"394\":1}}],[\"两个线程可以交换彼此的数据\",{\"1\":{\"349\":1}}],[\"两个线程都执行了\",{\"1\":{\"298\":1}}],[\"两个线程都在执行\",{\"1\":{\"298\":1}}],[\"两个操作之间存在happens\",{\"1\":{\"320\":1}}],[\"两个具备超时特性的方法\",{\"1\":{\"306\":1}}],[\"两个\",{\"1\":{\"265\":1,\"731\":1}}],[\"两个语句都会去字符串常量池中检查是否已经存在\",{\"1\":{\"265\":1}}],[\"两个对象有相同的\",{\"1\":{\"258\":1}}],[\"两个对象相等\",{\"1\":{\"258\":1}}],[\"两个承诺\",{\"1\":{\"215\":1}}],[\"两阶段提交协议虽然为分布式数据强一致性所设计\",{\"1\":{\"202\":1}}],[\"两阶段提交的思路可以概括为\",{\"1\":{\"202\":1}}],[\"等语言的支持\",{\"1\":{\"868\":1}}],[\"等组件\",{\"1\":{\"831\":1}}],[\"等以\",{\"1\":{\"785\":1}}],[\"等底层数据结构\",{\"1\":{\"729\":1}}],[\"等多种数据结构\",{\"1\":{\"668\":1}}],[\"等技术都能有效对抗\",{\"1\":{\"614\":1}}],[\"等流量型攻击\",{\"1\":{\"614\":1}}],[\"等了很久都没重发\",{\"1\":{\"591\":1}}],[\"等服务端不再发送数据时\",{\"1\":{\"575\":1}}],[\"等我把东西收拾收拾\",{\"1\":{\"574\":1}}],[\"等发送方将\",{\"1\":{\"573\":1}}],[\"等收到发送方的\",{\"1\":{\"573\":1}}],[\"等内容的数据包给客户端\",{\"1\":{\"569\":1}}],[\"等分布式缓存来存储\",{\"1\":{\"566\":1}}],[\"等请方法\",{\"1\":{\"556\":1}}],[\"等浏览器支持的\",{\"1\":{\"554\":1}}],[\"等存储结构中\",{\"1\":{\"534\":1}}],[\"等存储引擎的日志\",{\"1\":{\"480\":1}}],[\"等级等业务\",{\"1\":{\"528\":1}}],[\"等值查询匹配到一条记录的时候\",{\"1\":{\"513\":1}}],[\"等条件查询\",{\"1\":{\"493\":1}}],[\"等子句下推到\",{\"1\":{\"492\":1}}],[\"等关键元素\",{\"1\":{\"473\":1}}],[\"等特性\",{\"1\":{\"434\":1}}],[\"等繁杂的过程\",{\"1\":{\"433\":1}}],[\"等常用命令\",{\"1\":{\"417\":1}}],[\"等后端响应之后按钮才可以进行点击\",{\"1\":{\"413\":1}}],[\"等命令会触发\",{\"1\":{\"399\":1}}],[\"等命令触发\",{\"1\":{\"399\":1}}],[\"等容器中时候\",{\"1\":{\"389\":1}}],[\"等连接\",{\"1\":{\"389\":1}}],[\"等到客户端因超时重新发出请求时\",{\"1\":{\"569\":1}}],[\"等到第二步完成后\",{\"1\":{\"358\":1}}],[\"等到1s结束后计数清零\",{\"1\":{\"227\":1}}],[\"等\",{\"1\":{\"327\":1,\"417\":1,\"427\":1,\"479\":1,\"513\":1,\"529\":1,\"530\":1,\"542\":1,\"566\":1,\"614\":1,\"615\":1,\"616\":1,\"782\":1,\"798\":1,\"815\":1,\"819\":1,\"830\":1,\"836\":1,\"859\":1,\"865\":1}}],[\"等价于通过\",{\"1\":{\"257\":1}}],[\"等修饰符所修饰\",{\"1\":{\"253\":1}}],[\"等等框架中都大量使用了反射机制\",{\"1\":{\"289\":1}}],[\"等等\",{\"1\":{\"201\":1,\"292\":1,\"407\":1,\"534\":1,\"566\":1}}],[\"等待时间达到预设的超时时间后\",{\"1\":{\"843\":1}}],[\"等待被调度\",{\"1\":{\"645\":1}}],[\"等待被唤醒\",{\"1\":{\"325\":1}}],[\"等待了某个固定时间\",{\"1\":{\"574\":1}}],[\"等待来自客户端的最后一个\",{\"1\":{\"574\":1}}],[\"等待客户端发送\",{\"1\":{\"570\":1}}],[\"等待一段时间后会重新发送\",{\"1\":{\"570\":1}}],[\"等待逐一执行executebatch\",{\"1\":{\"451\":1}}],[\"等待统一执行\",{\"1\":{\"451\":1}}],[\"等待子任务执行完\",{\"1\":{\"373\":1}}],[\"等待队列应该尽量用有界的\",{\"1\":{\"354\":1}}],[\"等待队列中除第一个线程以外的所有线程都会阻塞\",{\"1\":{\"332\":1}}],[\"等待的车辆就能进停车场\",{\"1\":{\"348\":1}}],[\"等待回应\",{\"1\":{\"346\":2}}],[\"等待latch降为0\",{\"1\":{\"345\":2}}],[\"等待所有子线程运行结束\",{\"1\":{\"345\":1}}],[\"等待次数达到阈值仍未获取到锁\",{\"1\":{\"329\":1}}],[\"等待区也没位置了\",{\"1\":{\"353\":1}}],[\"等待区也满了\",{\"1\":{\"353\":1}}],[\"等待区号靠前的赶紧去新窗口办\",{\"1\":{\"353\":1}}],[\"等待区\",{\"1\":{\"325\":1}}],[\"等待叫号\",{\"1\":{\"325\":1}}],[\"等待状态\",{\"1\":{\"303\":1}}],[\"等待执行完成\",{\"1\":{\"300\":1}}],[\"等待选举时间超时\",{\"1\":{\"222\":1}}],[\"等待重试\",{\"1\":{\"205\":1}}],[\"等待\",{\"1\":{\"181\":1,\"306\":1,\"345\":1,\"576\":1,\"778\":1}}],[\"对请求进行处理和转换\",{\"1\":{\"865\":1}}],[\"对请求进行限制和降级处理\",{\"1\":{\"832\":1}}],[\"对其进行构建\",{\"1\":{\"824\":1}}],[\"对其他节点无影响\",{\"1\":{\"694\":1}}],[\"对具体的一个服务而言\",{\"1\":{\"824\":1}}],[\"对具体对象\",{\"1\":{\"787\":1}}],[\"对返回值进行\",{\"1\":{\"817\":1}}],[\"对返回结果的类型进行处理\",{\"1\":{\"448\":1}}],[\"对原生\",{\"1\":{\"817\":1}}],[\"对方法前后进行拦截\",{\"1\":{\"809\":1}}],[\"对目标方法进行前置后置处理\",{\"1\":{\"806\":1}}],[\"对连接点进行拦截的定位\",{\"1\":{\"804\":1}}],[\"对加载的\",{\"1\":{\"792\":1}}],[\"对消息的过滤有三种方式\",{\"1\":{\"762\":1}}],[\"对重复的消息就不再消费了\",{\"1\":{\"757\":1}}],[\"对业务都没有影响\",{\"1\":{\"757\":1}}],[\"对业务的侵入和影响较大\",{\"1\":{\"528\":1}}],[\"对业务的侵入较大和业务紧耦合\",{\"1\":{\"204\":1}}],[\"对分布式消息队列来说\",{\"1\":{\"757\":1}}],[\"对性能也有比较高的要求\",{\"1\":{\"741\":1}}],[\"对性能的影响\",{\"1\":{\"726\":1}}],[\"对性能的损耗和业务的入侵更小\",{\"1\":{\"206\":1}}],[\"对列表数据结构进行了改造\",{\"1\":{\"734\":1}}],[\"对字符串在安全性\",{\"1\":{\"730\":1}}],[\"对字节码文件进行解释\",{\"1\":{\"377\":1}}],[\"对大key进行io操作时\",{\"1\":{\"719\":1}}],[\"对慢查询的处理分为两步\",{\"1\":{\"718\":1}}],[\"对节点的性能也有一定影响\",{\"1\":{\"713\":1}}],[\"对热key的处理就简单了\",{\"1\":{\"710\":1}}],[\"对热key的处理\",{\"1\":{\"710\":1}}],[\"对存储这类信息的\",{\"1\":{\"710\":1}}],[\"对缓存依赖性很强\",{\"1\":{\"708\":1}}],[\"对a这个key加锁\",{\"1\":{\"702\":1}}],[\"对响应的hash值取余\",{\"1\":{\"693\":1}}],[\"对省市区数据的缓存\",{\"1\":{\"669\":1}}],[\"对每个⻚⾯设置⼀个\",{\"1\":{\"658\":1}}],[\"对用户是透明的\",{\"1\":{\"656\":1}}],[\"对i\",{\"1\":{\"640\":1}}],[\"对i++操作加锁\",{\"1\":{\"339\":1}}],[\"对i++操作加锁lock\",{\"1\":{\"339\":1}}],[\"对输入\",{\"1\":{\"629\":1}}],[\"对输入进行过滤\",{\"1\":{\"615\":1}}],[\"对输入参数的类型进行处理\",{\"1\":{\"448\":1}}],[\"对比目标地址\",{\"1\":{\"609\":1}}],[\"对比本地消息表实现方案\",{\"1\":{\"206\":1}}],[\"对服务之间的请求进行限流和熔断\",{\"1\":{\"853\":1}}],[\"对服务器的压力比较小\",{\"1\":{\"598\":1}}],[\"对服务运行中的慢\",{\"1\":{\"485\":1}}],[\"对数据节点进行监控\",{\"1\":{\"687\":1}}],[\"对数据丢失的处理比较简单\",{\"1\":{\"598\":1}}],[\"对数据库的一次或多次操作获得的结果是一致的\",{\"1\":{\"553\":1}}],[\"对准确性要求相对低的场景\",{\"1\":{\"597\":1}}],[\"对⽅的第⼆个数据报⽂⼜到达了\",{\"1\":{\"584\":1}}],[\"对证书做了签名\",{\"1\":{\"564\":1}}],[\"对称加密与非对称加密有什么区别\",{\"0\":{\"616\":1}}],[\"对称加密\",{\"1\":{\"563\":1,\"616\":1}}],[\"对该条记录的修改日志串联起来就形成了一个版本链\",{\"1\":{\"523\":1}}],[\"对索引列运算\",{\"1\":{\"498\":1}}],[\"对表\",{\"1\":{\"470\":1}}],[\"对虚拟表\",{\"1\":{\"470\":3}}],[\"对类型进行处理\",{\"1\":{\"448\":1}}],[\"对sql语句封装\",{\"1\":{\"434\":1}}],[\"对结果集解析麻烦\",{\"1\":{\"433\":1}}],[\"对开发人员编写sql语句的功底有一定要求\",{\"1\":{\"433\":1}}],[\"对实例\",{\"1\":{\"428\":1}}],[\"对这个变量实施的同步措施也就可以安全地消除掉\",{\"1\":{\"408\":1}}],[\"对齐填充不是必须的\",{\"1\":{\"385\":1}}],[\"对阻塞队列持久化\",{\"1\":{\"371\":1}}],[\"对一些敏感的操作\",{\"1\":{\"613\":1}}],[\"对一些代码上要求同步\",{\"1\":{\"327\":1}}],[\"对一个volatile域的写\",{\"1\":{\"320\":1}}],[\"对一个锁的解锁\",{\"1\":{\"320\":1}}],[\"对一个包含一个或多个元素的集合做各种操作\",{\"1\":{\"294\":1}}],[\"对给定对象\",{\"1\":{\"324\":1}}],[\"对集合数据进行操作\",{\"1\":{\"291\":1}}],[\"对应接口为methodinterceptor\",{\"1\":{\"812\":1}}],[\"对应下面的配置文件\",{\"1\":{\"795\":2}}],[\"对应到\",{\"1\":{\"747\":1}}],[\"对应着消息队列\",{\"1\":{\"743\":1}}],[\"对应\",{\"1\":{\"542\":5}}],[\"对应于\",{\"1\":{\"542\":3}}],[\"对应图中事后\",{\"1\":{\"413\":1}}],[\"对应一个线程\",{\"1\":{\"280\":1}}],[\"对应一个\",{\"1\":{\"280\":1}}],[\"对应的类中可以定义\",{\"1\":{\"784\":1}}],[\"对应的就是broker\",{\"1\":{\"769\":1}}],[\"对应的就是producer\",{\"1\":{\"769\":1}}],[\"对应的变量是⼀个整型\",{\"1\":{\"645\":1}}],[\"对应的线程信息\",{\"1\":{\"414\":1}}],[\"对应的jvm指令分为三步\",{\"1\":{\"319\":1}}],[\"对应的\",{\"1\":{\"258\":1}}],[\"对应的机器执行二进制机器码\",{\"1\":{\"235\":1}}],[\"对应的全局事务管辖中\",{\"1\":{\"208\":2}}],[\"对\",{\"0\":{\"824\":1},\"1\":{\"266\":1,\"413\":1,\"415\":1,\"470\":2,\"720\":1,\"782\":2,\"784\":1}}],[\"对两个对象分别调⽤\",{\"1\":{\"258\":1}}],[\"对同一包内的类和所有子类可见\",{\"1\":{\"250\":1}}],[\"对所有类可见\",{\"1\":{\"250\":1}}],[\"对吗\",{\"1\":{\"239\":3}}],[\"对提案进行投票\",{\"1\":{\"213\":1}}],[\"对于部署\",{\"1\":{\"829\":1}}],[\"对于数据的读取\",{\"1\":{\"772\":1}}],[\"对于数据的写入\",{\"1\":{\"772\":1}}],[\"对于可靠性要求很高的场景\",{\"1\":{\"742\":1}}],[\"对于图片\",{\"1\":{\"730\":1}}],[\"对于开启transparent\",{\"1\":{\"718\":1}}],[\"对于开启了持久化功能的redis节点\",{\"1\":{\"718\":1}}],[\"对于高并发的场景\",{\"1\":{\"718\":1}}],[\"对于从节点开始接收rdb快照到接收完成期间\",{\"1\":{\"685\":1}}],[\"对于读占比较大的场景\",{\"1\":{\"683\":1}}],[\"对于内存比较大的实例会造成长时间阻塞\",{\"1\":{\"676\":1}}],[\"对于单核单线程\",{\"1\":{\"636\":1}}],[\"对于单列索引\",{\"1\":{\"497\":1}}],[\"对于链接跳转\",{\"1\":{\"615\":1}}],[\"对于客户端来说\",{\"1\":{\"572\":1}}],[\"对于接收方而言\",{\"1\":{\"544\":1}}],[\"对于发送方而言\",{\"1\":{\"544\":1}}],[\"对于一个用户管理系统来说\",{\"1\":{\"528\":1}}],[\"对于业务服务器来说\",{\"1\":{\"526\":1}}],[\"对于read\",{\"1\":{\"523\":1}}],[\"对于同一行事务\",{\"1\":{\"522\":1}}],[\"对于如\",{\"1\":{\"519\":1}}],[\"对于长度不确定的\",{\"1\":{\"461\":1}}],[\"对于长度相对固定的字符串\",{\"1\":{\"461\":1}}],[\"对于不想进行序列化的变量\",{\"1\":{\"282\":1}}],[\"对于任何对象\",{\"1\":{\"272\":1}}],[\"对于引用数据类型==比较的是地址\",{\"1\":{\"269\":1}}],[\"对于基本数据类型==比较的值\",{\"1\":{\"269\":1}}],[\"对于序列化机制需要明确其实现原理\",{\"1\":{\"261\":1}}],[\"对于\",{\"1\":{\"239\":1,\"245\":1,\"261\":1,\"342\":3,\"379\":1,\"461\":2,\"523\":1,\"591\":1,\"806\":2}}],[\"对于每一种数据都定义了明确的具体的数据类型\",{\"1\":{\"238\":1}}],[\"对于mysql是从5\",{\"1\":{\"202\":1}}],[\"对于本地事务\",{\"1\":{\"200\":1}}],[\"对象池管理等\",{\"1\":{\"804\":1}}],[\"对象不一致了\",{\"1\":{\"801\":1}}],[\"对象创建也完成\",{\"1\":{\"800\":1}}],[\"对象创建的过程了解吗\",{\"0\":{\"382\":1}}],[\"对象⼯⼚放⼊三级缓存\",{\"1\":{\"800\":1}}],[\"对象中尽量避免定义可变的成员变量\",{\"1\":{\"798\":1}}],[\"对象工厂\",{\"1\":{\"788\":1}}],[\"对象注册器\",{\"1\":{\"788\":1}}],[\"对象关系映射\",{\"1\":{\"433\":2}}],[\"对象使用完后未调用\",{\"1\":{\"417\":1}}],[\"对象占用比较多也比较正常\",{\"1\":{\"413\":1}}],[\"对象占用的内存随着栈帧出栈而销毁\",{\"1\":{\"408\":1}}],[\"对象找到其引用的地方\",{\"1\":{\"413\":1}}],[\"对象拆散\",{\"1\":{\"408\":1}}],[\"对象一定分配在堆中吗\",{\"0\":{\"408\":1},\"1\":{\"408\":1}}],[\"对象什么时候会进入老年代\",{\"0\":{\"400\":1}}],[\"对象所分配的内存不会马上释放\",{\"1\":{\"389\":1}}],[\"对象怎么访问定位\",{\"0\":{\"386\":1}}],[\"对象头主要由两部分组成\",{\"1\":{\"385\":1}}],[\"对象头\",{\"1\":{\"385\":1}}],[\"对象头里面有一块结构叫mark\",{\"1\":{\"325\":1}}],[\"对象在堆内存中的存储布局可以划分为三个部分\",{\"1\":{\"385\":1}}],[\"对象分配内存的线程\",{\"1\":{\"384\":1}}],[\"对象分配内存\",{\"1\":{\"384\":1}}],[\"对象时\",{\"0\":{\"384\":1},\"1\":{\"384\":1}}],[\"对象列表\",{\"1\":{\"325\":1}}],[\"对象序列化\",{\"1\":{\"283\":1}}],[\"对象转为二进制流\",{\"1\":{\"282\":1}}],[\"对象转字符串\",{\"1\":{\"272\":1}}],[\"对象拷贝\",{\"1\":{\"272\":1}}],[\"对象比较\",{\"1\":{\"272\":1}}],[\"对象添加到池中\",{\"1\":{\"267\":1}}],[\"对象的\",{\"1\":{\"382\":1}}],[\"对象的哈希码\",{\"1\":{\"382\":1}}],[\"对象的线程进入\",{\"1\":{\"325\":1}}],[\"对象的引用\",{\"1\":{\"267\":1}}],[\"对象的生成\",{\"1\":{\"264\":1}}],[\"对象的属性可以在被调用过程中被改变\",{\"1\":{\"259\":1}}],[\"对象名\",{\"1\":{\"254\":2}}],[\"对象存于堆内存\",{\"1\":{\"253\":1}}],[\"对象\",{\"1\":{\"178\":1,\"260\":1,\"265\":1,\"266\":3,\"269\":4,\"272\":1,\"325\":1,\"389\":1,\"413\":3,\"422\":1,\"448\":1,\"785\":1,\"793\":1,\"800\":3,\"801\":2}}],[\"高性能\",{\"1\":{\"836\":1}}],[\"高性能的场景中用的不多\",{\"1\":{\"196\":1}}],[\"高度\",{\"1\":{\"732\":1}}],[\"高可用的基础\",{\"1\":{\"682\":1}}],[\"高可用基石\",{\"1\":{\"682\":1}}],[\"高可用\",{\"0\":{\"524\":1,\"681\":1},\"1\":{\"691\":1}}],[\"高版本引入了索引合并\",{\"1\":{\"489\":1}}],[\"高\",{\"1\":{\"414\":2,\"597\":1}}],[\"高一定是某个程序长期占用了\",{\"1\":{\"414\":1}}],[\"高吞吐的特性了\",{\"1\":{\"761\":1}}],[\"高吞吐量\",{\"1\":{\"741\":1}}],[\"高吞吐\",{\"1\":{\"406\":1}}],[\"高级编程语言按照程序的执行方式分为编译型和解释型两种\",{\"1\":{\"236\":1}}],[\"高效容错特性\",{\"1\":{\"211\":1}}],[\"高效的网络处理能力\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"常常也会顺道问问四次挥手\",{\"1\":{\"574\":1}}],[\"常用状态码\",{\"1\":{\"551\":1}}],[\"常用\",{\"1\":{\"445\":3,\"465\":1}}],[\"常用的方法有get\",{\"1\":{\"845\":1}}],[\"常用的数据格式有json\",{\"1\":{\"845\":1}}],[\"常用的状态码及其含义\",{\"0\":{\"551\":1}}],[\"常用的分库分表中间件有哪些\",{\"0\":{\"533\":1}}],[\"常用的阻塞队列主要有以下几种\",{\"1\":{\"356\":1}}],[\"常用的通配符为\",{\"1\":{\"285\":1}}],[\"常用到两种模式\",{\"1\":{\"280\":1}}],[\"常见的传递方式包括参数传递\",{\"1\":{\"873\":1}}],[\"常见的负载均衡器\",{\"1\":{\"851\":1}}],[\"常见的负载均衡算法包含以下几种\",{\"1\":{\"851\":1}}],[\"常见的配置中心选型包括\",{\"1\":{\"841\":1}}],[\"常见的注册中心包括\",{\"1\":{\"835\":1}}],[\"常见的实现保包括\",{\"1\":{\"832\":1}}],[\"常见的实现包括\",{\"1\":{\"832\":7}}],[\"常见的实体首部有\",{\"1\":{\"556\":1}}],[\"常见的优化思路如下\",{\"1\":{\"713\":1}}],[\"常见的数据分区规则三种\",{\"1\":{\"692\":1}}],[\"常见的页面置换算法\",{\"1\":{\"658\":1}}],[\"常见的进程调度算法有\",{\"1\":{\"640\":1}}],[\"常见的非对称加密算法有\",{\"1\":{\"616\":1}}],[\"常见的对称加密算法有\",{\"1\":{\"616\":1}}],[\"常见的主动攻击类型有\",{\"1\":{\"611\":1}}],[\"常见的通用首部有\",{\"1\":{\"556\":1}}],[\"常见的响应首部有\",{\"1\":{\"556\":1}}],[\"常见的请求首部有\",{\"1\":{\"556\":1}}],[\"常见的协议有\",{\"1\":{\"542\":1}}],[\"常见的有这么些解决办法\",{\"1\":{\"798\":1}}],[\"常见的有\",{\"1\":{\"493\":1}}],[\"常见的有三种\",{\"1\":{\"283\":1}}],[\"常见的查询类型有\",{\"1\":{\"493\":1}}],[\"常见的方案有字节码插桩\",{\"1\":{\"485\":1}}],[\"常见的评估方案如下\",{\"1\":{\"369\":1}}],[\"常见的异常处理方式\",{\"1\":{\"366\":1}}],[\"常见的\",{\"1\":{\"287\":1,\"614\":1}}],[\"常见的如t\",{\"1\":{\"285\":1}}],[\"常见的一种情况是需要某个整数类型变量增加\",{\"1\":{\"245\":1}}],[\"常见的分布式锁实现方案有三种\",{\"1\":{\"195\":1}}],[\"常量\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"379\":1,\"493\":1,\"879\":1}}],[\"单体服务过大\",{\"1\":{\"828\":1}}],[\"单体服务可能变得庞大且难以维护\",{\"1\":{\"828\":1}}],[\"单体服务通常由多个模块组成\",{\"1\":{\"828\":1}}],[\"单体服务\",{\"1\":{\"828\":1}}],[\"单体服务一般是所有项目最开始的样子\",{\"1\":{\"828\":1}}],[\"单体式\",{\"1\":{\"828\":1}}],[\"单体时代\",{\"1\":{\"194\":1}}],[\"单向发送是指只负责发送消息而不等待服务器回应且没有回调函数触发\",{\"1\":{\"750\":1}}],[\"单向发送\",{\"1\":{\"750\":1}}],[\"单向\",{\"1\":{\"682\":1}}],[\"单机吞吐量\",{\"1\":{\"742\":1}}],[\"单机内存大小的限制\",{\"1\":{\"691\":1}}],[\"单机的redis就可以⽀撑每秒十几万的并发\",{\"1\":{\"671\":1}}],[\"单机线程池执行断电了应该怎么处理\",{\"0\":{\"371\":1}}],[\"单核处理器做到的并发\",{\"1\":{\"635\":1}}],[\"单位是\",{\"1\":{\"586\":1}}],[\"单个文件由30w个条目组成\",{\"1\":{\"771\":1}}],[\"单个文件大小默认1g\",{\"1\":{\"771\":1}}],[\"单个简单的key存储的value很大\",{\"1\":{\"719\":1}}],[\"单个\",{\"1\":{\"566\":1,\"749\":1}}],[\"单元测试\",{\"1\":{\"788\":1}}],[\"单元\",{\"1\":{\"502\":1}}],[\"单阶段\",{\"1\":{\"482\":1}}],[\"单条提交sql\",{\"1\":{\"445\":1}}],[\"单方面的加大了堆内存从\",{\"1\":{\"413\":1}}],[\"单例池\",{\"1\":{\"800\":1}}],[\"单例\",{\"1\":{\"798\":1,\"800\":1}}],[\"单例bean缓存\",{\"1\":{\"788\":1}}],[\"单例对象在初始化后会以静态变量的方式在\",{\"1\":{\"389\":1}}],[\"单例模式\",{\"1\":{\"389\":1,\"785\":1}}],[\"单线程运行\",{\"1\":{\"403\":1}}],[\"单线程的redis处理命令时只能使用一个cpu\",{\"1\":{\"718\":1}}],[\"单线程的线程池\",{\"1\":{\"360\":1}}],[\"单线程的程序能保证最终结果是有序的\",{\"1\":{\"326\":1}}],[\"单线程的程序一定是顺序的吗\",{\"0\":{\"321\":1}}],[\"单线程程序是按程序的\",{\"1\":{\"321\":1}}],[\"单线程程序的执行结果不能被改变\",{\"1\":{\"321\":1}}],[\"单线程下可以认为程序是有序的\",{\"1\":{\"318\":1}}],[\"单点问题\",{\"1\":{\"202\":1}}],[\"单行注释\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"应根据业务上下文\",{\"1\":{\"824\":1}}],[\"应尽量避免统一的\",{\"1\":{\"824\":1}}],[\"应⽤程序并不需要主动发起拷⻉动作\",{\"1\":{\"663\":1}}],[\"应⽤程序如果需要进⼊内核空间\",{\"1\":{\"633\":1}}],[\"应答确认到来时\",{\"1\":{\"587\":1}}],[\"应答报文\",{\"1\":{\"575\":1}}],[\"应当有措施使服务器不要再白白等待下去\",{\"1\":{\"577\":1}}],[\"应当写为username\",{\"1\":{\"241\":1}}],[\"应该怎么实现呢\",{\"1\":{\"788\":1}}],[\"应该在回调方法里检查\",{\"1\":{\"754\":1}}],[\"应该不会怎么问\",{\"1\":{\"728\":1}}],[\"应该做集群化水品扩展来分摊ops压力\",{\"1\":{\"718\":1}}],[\"应该尽量避免在大对象上执行算法复杂\",{\"1\":{\"718\":1}}],[\"应该\",{\"1\":{\"678\":1}}],[\"应该只查询需要的列\",{\"1\":{\"487\":1}}],[\"应该到达一个最终的状态\",{\"1\":{\"193\":1}}],[\"应用上下文\",{\"1\":{\"789\":1}}],[\"应用在非\",{\"1\":{\"813\":1}}],[\"应用在\",{\"1\":{\"784\":3}}],[\"应用开发的支持\",{\"1\":{\"783\":1}}],[\"应用场景\",{\"1\":{\"597\":2}}],[\"应用层加上本层的控制信息\",{\"1\":{\"544\":1}}],[\"应用层协议定义的是应用进程间通信和交互的规则\",{\"1\":{\"542\":1}}],[\"应用层\",{\"1\":{\"542\":5}}],[\"应用需要依赖\",{\"1\":{\"429\":2}}],[\"应用中适用\",{\"1\":{\"797\":1}}],[\"应用中\",{\"1\":{\"428\":1,\"783\":1}}],[\"应用的类都是由它来完成加载的\",{\"1\":{\"423\":1}}],[\"应用的类路径\",{\"1\":{\"423\":1}}],[\"应用性能分析工具\",{\"1\":{\"411\":1}}],[\"应用更容易遇到内存溢出的问题\",{\"1\":{\"381\":1}}],[\"应用程序\",{\"1\":{\"819\":1}}],[\"应用程序要一直轮询\",{\"1\":{\"663\":1}}],[\"应用程序上执行非本意的操作的攻击方法\",{\"1\":{\"613\":1}}],[\"应用程序偶尔会耗尽连接对象\",{\"1\":{\"418\":1}}],[\"应用程序抛出\",{\"1\":{\"418\":1}}],[\"应用程序长时间连续运行时性能严重下降\",{\"1\":{\"418\":1}}],[\"应用程序来说\",{\"1\":{\"379\":1}}],[\"应用程序通过同步机制去控制\",{\"1\":{\"158\":1}}],[\"应用\",{\"0\":{\"289\":1},\"1\":{\"470\":3,\"797\":1}}],[\"应用系统\",{\"1\":{\"202\":1}}],[\"假定\",{\"1\":{\"587\":1}}],[\"假设只有⼆级缓存的情况\",{\"1\":{\"801\":1}}],[\"假设集群内节点规模是3主3从\",{\"1\":{\"698\":1}}],[\"假设为其分配\",{\"1\":{\"695\":1}}],[\"假设你是一个老师\",{\"1\":{\"672\":1}}],[\"假设你要查询\",{\"1\":{\"547\":1}}],[\"假设机器\",{\"1\":{\"609\":1}}],[\"假设客户端最后一次发送的\",{\"1\":{\"578\":1}}],[\"假设索引字段是\",{\"1\":{\"502\":1}}],[\"假设\",{\"1\":{\"383\":1,\"384\":1,\"796\":2}}],[\"假设初始条件是a\",{\"1\":{\"336\":1}}],[\"假设协调者发出了事务commit的通知\",{\"1\":{\"202\":1}}],[\"假设系统出现了不可预知的故障\",{\"1\":{\"193\":1}}],[\"假如这个\",{\"1\":{\"798\":1}}],[\"假如redis里面有1亿个key\",{\"0\":{\"736\":1}}],[\"假如redis集群部署\",{\"1\":{\"710\":1}}],[\"假如连接多了\",{\"1\":{\"664\":1}}],[\"假如需要文件传输\",{\"1\":{\"662\":1}}],[\"假如你不在\",{\"1\":{\"604\":1}}],[\"假如你有多个不用的绰号\",{\"1\":{\"604\":1}}],[\"假如我现在要\",{\"1\":{\"804\":1}}],[\"假如我没有及时回复呢\",{\"1\":{\"583\":1}}],[\"假如我们一开始就规划了\",{\"1\":{\"531\":1}}],[\"假如我们有个\",{\"1\":{\"513\":1}}],[\"假如我们设的比较大\",{\"1\":{\"173\":1}}],[\"假如当前发送方给接收方发送了\",{\"1\":{\"582\":1}}],[\"假如单身狗博主有一个女朋友\",{\"1\":{\"574\":1}}],[\"假如一个或者多个服务出现故障\",{\"1\":{\"853\":1}}],[\"假如一个用户的请求两次没有落到同一台服务器上\",{\"1\":{\"566\":1}}],[\"假如一段时间发现他们可以不用接着营业\",{\"1\":{\"353\":1}}],[\"假如按照\",{\"1\":{\"531\":1}}],[\"假如有一张user表\",{\"1\":{\"523\":1}}],[\"假如有一个需求\",{\"1\":{\"348\":1}}],[\"假如没有意向锁\",{\"1\":{\"514\":1}}],[\"假如逃逸分析能够证明一个对象不会被方法外部访问\",{\"1\":{\"408\":1}}],[\"假如老王去拉车\",{\"1\":{\"402\":1}}],[\"假如在\",{\"1\":{\"400\":1,\"564\":1}}],[\"假如在服务层和持久层都要用到用户信息\",{\"1\":{\"309\":1}}],[\"假如两个线程有一个没有执行exchange\",{\"1\":{\"349\":1}}],[\"假如key被设计成强引用\",{\"1\":{\"311\":1}}],[\"假如现在有这样的场景\",{\"1\":{\"191\":1}}],[\"假如现在有两个分区n1和n2\",{\"1\":{\"191\":1}}],[\"假如采用默认的构造方法\",{\"1\":{\"173\":1}}],[\"假如发生碰撞\",{\"1\":{\"172\":1}}],[\"假如\",{\"1\":{\"167\":1,\"518\":1}}],[\"现象\",{\"1\":{\"713\":1}}],[\"现领导者选举\",{\"1\":{\"689\":1}}],[\"现代操作系统基本都是将两种方式结合起来使用\",{\"1\":{\"644\":1}}],[\"现代处理器采用了指令级并行技术\",{\"1\":{\"319\":1}}],[\"现在都是前后端分离接口\",{\"1\":{\"817\":1}}],[\"现在所有对象都被容器控制\",{\"1\":{\"787\":1}}],[\"现在只支持固定的几个时间\",{\"1\":{\"763\":1}}],[\"现在的用户是\",{\"1\":{\"531\":1}}],[\"现在有哪些流行的微服务解决方案\",{\"0\":{\"830\":1}}],[\"现在有个\",{\"1\":{\"513\":1}}],[\"现在有三个窗口坐着三个营业员小姐姐在营业\",{\"1\":{\"353\":1}}],[\"现在简化它的聚簇索引结构\",{\"1\":{\"513\":1}}],[\"现在就是\",{\"1\":{\"481\":1}}],[\"现在开放了三个窗口\",{\"1\":{\"353\":1}}],[\"现在汽车多了\",{\"1\":{\"348\":1}}],[\"现在是我们需要什么\",{\"1\":{\"787\":1}}],[\"现在是\",{\"1\":{\"291\":1}}],[\"现在众多的nosql都属于此类\",{\"1\":{\"192\":1}}],[\"现居杭州\",{\"1\":{\"0\":1}}],[\"相关依赖\",{\"1\":{\"821\":1}}],[\"相关的部分类图如下\",{\"1\":{\"278\":1}}],[\"相应的节点状态会跟随消息在集群内传播\",{\"1\":{\"698\":1}}],[\"相应地\",{\"1\":{\"655\":1}}],[\"相邻的节点\",{\"1\":{\"694\":1}}],[\"相加后\",{\"1\":{\"645\":1}}],[\"相加后如果信号量\",{\"1\":{\"641\":2}}],[\"相减后\",{\"1\":{\"645\":1}}],[\"相减后如果信号量\",{\"1\":{\"641\":2}}],[\"相信你学习起来也是事半功倍\",{\"1\":{\"620\":1}}],[\"相互协作\",{\"1\":{\"828\":1}}],[\"相互依赖\",{\"1\":{\"799\":1}}],[\"相互等待的一种状态\",{\"1\":{\"646\":1}}],[\"相互映射\",{\"1\":{\"547\":1}}],[\"相互不阻塞\",{\"1\":{\"512\":1}}],[\"相同\",{\"1\":{\"767\":1}}],[\"相同的时候再比较\",{\"1\":{\"509\":1}}],[\"相同的实例\",{\"1\":{\"265\":1}}],[\"相同点\",{\"1\":{\"434\":1,\"463\":1}}],[\"相连接的引用链\",{\"1\":{\"393\":1}}],[\"相对较高\",{\"1\":{\"831\":2}}],[\"相对比\",{\"1\":{\"515\":1}}],[\"相对来说跳跃表的变化只涉及局部\",{\"1\":{\"732\":1}}],[\"相对来说\",{\"1\":{\"333\":1}}],[\"相对于mysql来说\",{\"1\":{\"671\":1}}],[\"相对于从线程池拿线程\",{\"1\":{\"351\":1}}],[\"相对于\",{\"1\":{\"331\":1}}],[\"相对重量级锁\",{\"1\":{\"327\":1}}],[\"相比于单机批量操作只涉及一次网络操作\",{\"1\":{\"713\":1}}],[\"相比较而言\",{\"1\":{\"707\":1}}],[\"相比较硬状态而言\",{\"1\":{\"193\":1}}],[\"相比\",{\"1\":{\"602\":1,\"819\":1}}],[\"相比之下效率没有\",{\"1\":{\"597\":1}}],[\"相比synchronized的加锁方式来解决共享变量的内存可见性问题\",{\"1\":{\"322\":1}}],[\"相反\",{\"1\":{\"289\":1,\"461\":1}}],[\"相等的时候\",{\"1\":{\"509\":1}}],[\"相等吗\",{\"0\":{\"269\":1}}],[\"相等\",{\"1\":{\"257\":1,\"269\":1}}],[\"相当于总指挥\",{\"1\":{\"815\":1}}],[\"相当于一个\",{\"1\":{\"784\":1}}],[\"相当于一个数据库连接池\",{\"1\":{\"435\":1}}],[\"相当于某时刻表记录的一个快照\",{\"1\":{\"523\":1}}],[\"相当于创建了\",{\"1\":{\"509\":1}}],[\"相当于全表扫描\",{\"1\":{\"503\":1}}],[\"相当于行数\",{\"1\":{\"469\":1}}],[\"相当于客服\",{\"1\":{\"448\":1}}],[\"相当于取余\",{\"1\":{\"312\":1}}],[\"相当于顺序执行\",{\"1\":{\"301\":1}}],[\"相当于是指向当前对象本身\",{\"1\":{\"251\":1}}],[\"相当于这样的代码\",{\"1\":{\"245\":1}}],[\"相当于\",{\"1\":{\"239\":1,\"784\":2,\"815\":1}}],[\"相当于每个请求都需要在server之间强一致\",{\"1\":{\"192\":1}}],[\"相册能够显示图片\",{\"1\":{\"113\":1}}],[\"理解这些结构应该不是特别难\",{\"1\":{\"729\":1}}],[\"理论上只要带宽大于攻击流量就可以了\",{\"1\":{\"614\":1}}],[\"理论上放弃p\",{\"1\":{\"192\":1}}],[\"理想的情况下是该长度的数据刚好不被网络层分块\",{\"1\":{\"581\":1}}],[\"理想情况下\",{\"1\":{\"172\":1}}],[\"立即响应\",{\"1\":{\"191\":1}}],[\"接到任务\",{\"1\":{\"364\":1}}],[\"接着\",{\"1\":{\"800\":1}}],[\"接着发送下个数据包\",{\"1\":{\"750\":1}}],[\"接着再把整个fd\",{\"1\":{\"664\":1}}],[\"接着上面慢启动的例子\",{\"1\":{\"587\":1}}],[\"接着就关闭这个连接\",{\"1\":{\"577\":1}}],[\"接着客户端重传一次确认\",{\"1\":{\"576\":1}}],[\"接着完成a\",{\"1\":{\"442\":1}}],[\"接着看看具体的resize\",{\"1\":{\"314\":1}}],[\"接着参与\",{\"1\":{\"302\":1}}],[\"接着执行confirm\",{\"1\":{\"204\":1}}],[\"接⼝⾥⾯只能有常量变量和抽象⽅法\",{\"1\":{\"252\":1}}],[\"接⼝中定义了⼀样的默认⽅法\",{\"1\":{\"252\":1}}],[\"接⼝中除了\",{\"1\":{\"252\":1}}],[\"接⼝也可以定义静态⽅法\",{\"1\":{\"252\":1}}],[\"接⼝⽅法默认修饰符是\",{\"1\":{\"252\":1}}],[\"接⼝⾃⼰本身可以通过\",{\"1\":{\"252\":1}}],[\"接⼝的⽅法默认是\",{\"1\":{\"252\":1}}],[\"接受方处理不了这么多字节\",{\"1\":{\"582\":1}}],[\"接受方收到后\",{\"1\":{\"582\":1}}],[\"接受一个整型的数字\",{\"1\":{\"348\":1}}],[\"接受\",{\"0\":{\"216\":1},\"1\":{\"214\":1}}],[\"接受达成共识的提案\",{\"1\":{\"213\":1}}],[\"接受者在收到提案后\",{\"1\":{\"215\":1}}],[\"接受者\",{\"1\":{\"213\":1}}],[\"接收到请求后会调用\",{\"1\":{\"816\":1,\"817\":1}}],[\"接收到请求之后\",{\"1\":{\"815\":1}}],[\"接收节点回复pong\",{\"1\":{\"698\":1}}],[\"接收数据端的应用层没有及时读取接收缓冲区中的数据\",{\"1\":{\"595\":1}}],[\"接收⽅发给发送⽅的两个\",{\"1\":{\"594\":1}}],[\"接收方返回最近收到报文段的序列号范围\",{\"1\":{\"593\":1}}],[\"接收方的滑动窗口包含三大部分\",{\"1\":{\"583\":1}}],[\"接收方会在\",{\"1\":{\"582\":1}}],[\"接收方会对收到的包进行应答\",{\"1\":{\"581\":1}}],[\"接收窗口\",{\"1\":{\"582\":1}}],[\"接收端对\",{\"1\":{\"580\":1}}],[\"接收缓冲区还能容纳多少字节的数据\",{\"1\":{\"580\":1,\"583\":1}}],[\"接收队列\",{\"1\":{\"573\":1}}],[\"接收后服务器就正常建立\",{\"1\":{\"569\":1}}],[\"接收后产生错误\",{\"1\":{\"569\":1}}],[\"接收\",{\"1\":{\"208\":1}}],[\"接收mq消息\",{\"1\":{\"205\":1}}],[\"接下来用扩容的消费者去消费新的topic里的数据\",{\"1\":{\"758\":1}}],[\"接下来主节点会持续地把写命令发送给从节点\",{\"1\":{\"684\":1}}],[\"接下来怎么传呢\",{\"1\":{\"566\":1}}],[\"接下来有两个db\",{\"1\":{\"523\":1}}],[\"接下来设置对象头\",{\"1\":{\"382\":1}}],[\"接下来虚拟机将为新生对象分配内存\",{\"1\":{\"382\":1}}],[\"接下来对应平台\",{\"1\":{\"377\":1}}],[\"接下来\",{\"1\":{\"191\":1,\"619\":1}}],[\"接口定义语言\",{\"1\":{\"845\":1}}],[\"接口定义|使用restful风格的接口进行定义\",{\"1\":{\"845\":1}}],[\"接口位于类结构树的顶端\",{\"1\":{\"790\":1}}],[\"接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理\",{\"1\":{\"449\":1}}],[\"接口来操作数据库\",{\"1\":{\"448\":1}}],[\"接口方法\",{\"1\":{\"438\":1}}],[\"接口默认方法\",{\"1\":{\"291\":1}}],[\"接口有什么用\",{\"1\":{\"282\":1}}],[\"接口的比较器\",{\"1\":{\"184\":1}}],[\"接口\",{\"0\":{\"790\":1,\"791\":1},\"1\":{\"137\":1,\"140\":1,\"147\":1,\"154\":2,\"184\":1,\"238\":1,\"250\":2,\"272\":1,\"300\":1,\"785\":1,\"791\":1,\"806\":1,\"817\":1,\"879\":1}}],[\"都工作在事务环境下\",{\"1\":{\"811\":1}}],[\"都采用构造器注入的时候\",{\"1\":{\"799\":1}}],[\"都在\",{\"1\":{\"791\":1}}],[\"都在这个变量的版本号上加1\",{\"1\":{\"336\":1}}],[\"都得现场来反射创建对象\",{\"1\":{\"788\":1}}],[\"都提供了模板化的封装\",{\"1\":{\"782\":1}}],[\"都允许\",{\"1\":{\"778\":1}}],[\"都应该进行重试\",{\"1\":{\"754\":1}}],[\"都应该重试\",{\"1\":{\"754\":1}}],[\"都放到⼀个⽂件描述符集合fd\",{\"1\":{\"664\":1}}],[\"都收到了\",{\"1\":{\"592\":1}}],[\"都到了\",{\"1\":{\"592\":1,\"594\":1}}],[\"都需要把fd\",{\"1\":{\"664\":1}}],[\"都需要读取已经提交的事务所修改的记录\",{\"1\":{\"523\":1}}],[\"都需要有一个其对应的确认和取消操作\",{\"1\":{\"204\":1}}],[\"都开始慢慢流行了\",{\"1\":{\"477\":1}}],[\"都比\",{\"1\":{\"464\":1}}],[\"都不可以再拆分\",{\"1\":{\"460\":1}}],[\"都严格限制在sqlsession生命周期范围内\",{\"1\":{\"451\":1}}],[\"都由各个类加载器自行去加载的话\",{\"1\":{\"425\":1}}],[\"都初始化为零值\",{\"1\":{\"382\":1}}],[\"都可以不用自己写了\",{\"1\":{\"782\":1}}],[\"都可以用于表示事务的提交状态\",{\"1\":{\"482\":1}}],[\"都可以根据需要\",{\"1\":{\"404\":1}}],[\"都可以套用\",{\"1\":{\"352\":1}}],[\"都可以协调多线程的结束动作\",{\"1\":{\"346\":1}}],[\"都可以取出threadlocal中存的用户数据\",{\"1\":{\"309\":1}}],[\"都会返回一个新的实例\",{\"1\":{\"797\":1}}],[\"都会产生一次系统调用\",{\"1\":{\"726\":1}}],[\"都会产生额外的对索引文件的操作\",{\"1\":{\"536\":1}}],[\"都会把该事务\",{\"1\":{\"523\":1}}],[\"都会生成记录的一个新版本\",{\"1\":{\"519\":1}}],[\"都会失效\",{\"1\":{\"513\":1}}],[\"都会回收掉只被弱引用关联的对象\",{\"1\":{\"392\":1}}],[\"都会回收该对象占用的内存\",{\"1\":{\"311\":1}}],[\"都会在请求头中携带一个token\",{\"1\":{\"309\":1}}],[\"都会检测modcount变量是否为expectedmodcount值\",{\"1\":{\"157\":1}}],[\"都有一个自己的类加载器\",{\"1\":{\"427\":1}}],[\"都有哪些新特性\",{\"0\":{\"291\":1}}],[\"都有可能会产生幂等性问题\",{\"1\":{\"224\":1}}],[\"都翻译成汉语\",{\"1\":{\"236\":1}}],[\"都能被\",{\"1\":{\"377\":1}}],[\"都能参与竞选\",{\"1\":{\"221\":1}}],[\"都能获取及时的响应\",{\"1\":{\"191\":1}}],[\"都是单例的\",{\"1\":{\"788\":1}}],[\"都是基于拉模式来获取消息的\",{\"1\":{\"777\":1}}],[\"都是使⽤线性结构存储进程关注的socket集合\",{\"1\":{\"664\":1}}],[\"都是同步调⽤\",{\"1\":{\"663\":1}}],[\"都是由于\",{\"1\":{\"559\":1}}],[\"都是需要考虑的问题\",{\"1\":{\"534\":1}}],[\"都是需要资源开销的\",{\"1\":{\"351\":1}}],[\"都是用来解决幻读问题的\",{\"1\":{\"513\":1}}],[\"都是应用于持久层的框架\",{\"1\":{\"434\":1}}],[\"都是对jdbc的封装\",{\"1\":{\"434\":1}}],[\"都是什么意思\",{\"0\":{\"397\":1}}],[\"都是通过工具类excutors创建出来的\",{\"1\":{\"360\":1}}],[\"都是往自己的threadlocalmap里存\",{\"1\":{\"310\":1}}],[\"都是\",{\"1\":{\"221\":1,\"493\":1}}],[\"都是为了实现\",{\"1\":{\"219\":1}}],[\"同事就势来一句\",{\"1\":{\"805\":1}}],[\"同事发布删除本地缓存消息\",{\"1\":{\"709\":1}}],[\"同⼀个进程内多个线程之间可以共享代码段\",{\"1\":{\"642\":1}}],[\"同样consumequeue文件采取定长设计\",{\"1\":{\"771\":1}}],[\"同样\",{\"1\":{\"705\":1,\"800\":1}}],[\"同样利用了局部性原理\",{\"1\":{\"655\":1}}],[\"同样针对进程\",{\"1\":{\"645\":1}}],[\"同样也可以针对进程\",{\"1\":{\"645\":1}}],[\"同样具有状态之间的转换关系\",{\"1\":{\"642\":1}}],[\"同样以订单\",{\"1\":{\"531\":2}}],[\"同样有三个明显的缺点\",{\"1\":{\"405\":1}}],[\"同样是输出\",{\"1\":{\"418\":1}}],[\"同样是老年代的收集器\",{\"1\":{\"401\":1}}],[\"同样是用了临时变量\",{\"1\":{\"245\":1}}],[\"同样可以写段代码反编译看一下\",{\"1\":{\"325\":1}}],[\"同类中\",{\"1\":{\"249\":1}}],[\"同名的方法如果有不同的参数列表\",{\"1\":{\"249\":1}}],[\"同一个类中方法调用\",{\"1\":{\"813\":1}}],[\"同一个全局\",{\"1\":{\"797\":1}}],[\"同一个\",{\"1\":{\"797\":1}}],[\"同一个组内的消费者是竞争消费的关系\",{\"1\":{\"744\":1}}],[\"同一个接口\",{\"1\":{\"224\":1}}],[\"同一业务模块不同目的的消息就可以用相同\",{\"1\":{\"744\":1}}],[\"同一时刻只允许一个请求获得锁\",{\"1\":{\"225\":1}}],[\"同步刷盘\",{\"1\":{\"774\":1}}],[\"同步刷盘和异步刷盘\",{\"1\":{\"755\":1,\"774\":1}}],[\"同步复制模式可以保证即使master宕机\",{\"1\":{\"755\":1}}],[\"同步发送的时候\",{\"1\":{\"754\":1}}],[\"同步发送指消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包\",{\"1\":{\"750\":1}}],[\"同步发送\",{\"1\":{\"750\":1}}],[\"同步\",{\"1\":{\"750\":1}}],[\"同步过程分为\",{\"1\":{\"685\":1}}],[\"同步数据集\",{\"1\":{\"684\":1}}],[\"同步与异步io\",{\"0\":{\"663\":1}}],[\"同步解决的多线程操作共享资源的问题\",{\"1\":{\"645\":1}}],[\"同步等方式\",{\"1\":{\"534\":1}}],[\"同步消除\",{\"1\":{\"408\":1}}],[\"同步队列\",{\"1\":{\"356\":1}}],[\"同步屏障\",{\"0\":{\"346\":1}}],[\"同步是锁住的什么东西\",{\"1\":{\"325\":1}}],[\"同步给业务系统一个结果通知\",{\"1\":{\"207\":1}}],[\"同步阻塞\",{\"1\":{\"202\":1,\"280\":1}}],[\"同生共死\",{\"1\":{\"191\":1}}],[\"同时把\",{\"1\":{\"800\":1}}],[\"同时删除三级缓存中的\",{\"1\":{\"800\":1}}],[\"同时完成了加载资源\",{\"1\":{\"788\":1}}],[\"同时并将封装后的客户端网络通道信息保存在本地缓存变量\",{\"1\":{\"777\":1}}],[\"同时服务端也支持长轮询模式\",{\"1\":{\"771\":1}}],[\"同时再加上定期的将内存数据镜像\",{\"1\":{\"770\":1}}],[\"同时最多只能满足两个点\",{\"1\":{\"770\":1}}],[\"同时做到确保一定投递和不重复投递是很难的\",{\"1\":{\"757\":1}}],[\"同时还有自定义的init\",{\"1\":{\"793\":1}}],[\"同时还可以认为是主题在消费时的一个逻辑副本\",{\"1\":{\"743\":1}}],[\"同时还用了synchronized\",{\"1\":{\"352\":1}}],[\"同时这样的结构也吸收了两种不同数据结构的优点\",{\"1\":{\"731\":1}}],[\"同时表头节点的前置和后置节点都指向null\",{\"1\":{\"729\":1}}],[\"同时可以避免缓冲区溢出和减少修改字符串⻓度时所需的内存重分配次数\",{\"1\":{\"729\":1}}],[\"同时可以作为其他从节点的主节点继续向下层复制\",{\"1\":{\"683\":1}}],[\"同时去数据库查询数据\",{\"1\":{\"702\":1}}],[\"同时需要修改应用方的主节点地址\",{\"1\":{\"686\":1}}],[\"同时使用两种持久化功能\",{\"1\":{\"678\":1}}],[\"同时faq里还提到了\",{\"1\":{\"673\":1}}],[\"同时继续把\",{\"1\":{\"640\":1}}],[\"同时告诉发送方\",{\"1\":{\"583\":1}}],[\"同时在内部创建了两个队列\",{\"1\":{\"573\":1}}],[\"同时在服务层对\",{\"1\":{\"481\":1}}],[\"同时观察\",{\"1\":{\"538\":1}}],[\"同时对于返回结果集比较大的子查询\",{\"1\":{\"490\":1}}],[\"同时将这个更新操作记录到\",{\"1\":{\"481\":1}}],[\"同时负责查询缓存的维护\",{\"1\":{\"448\":1}}],[\"同时维护一个优先级列表\",{\"1\":{\"404\":1}}],[\"同时也支持自定义过滤器\",{\"1\":{\"865\":1}}],[\"同时也支持自定义断言\",{\"1\":{\"865\":1}}],[\"同时也方便了服务治理和监控\",{\"1\":{\"863\":1}}],[\"同时也可以在创建锁构造函数中传入具体参数创建公平锁\",{\"1\":{\"333\":1}}],[\"同时也更新version\",{\"1\":{\"225\":1}}],[\"同时该等待线程进入\",{\"1\":{\"325\":1}}],[\"同时该接受者会承诺不会再批准任何编号小于mn的提案\",{\"1\":{\"215\":1}}],[\"同时b和c之间也存在数据依赖关系\",{\"1\":{\"321\":1}}],[\"同时提供⼀些可以被外界访问的属性的⽅法\",{\"1\":{\"248\":1}}],[\"同时开始等待最终指令\",{\"1\":{\"203\":1}}],[\"同时\",{\"1\":{\"169\":1,\"183\":1,\"377\":1,\"566\":1,\"598\":1,\"783\":1,\"784\":1,\"806\":1,\"843\":1}}],[\"指导工厂的出货\",{\"1\":{\"788\":1}}],[\"指加密和解密使用同一密钥\",{\"1\":{\"616\":1}}],[\"指的就是服务器和客户端一次会话的过程\",{\"1\":{\"566\":1}}],[\"指的是在加载类的时候进行织入\",{\"1\":{\"807\":1}}],[\"指的是在一个分布式系统中\",{\"1\":{\"190\":1}}],[\"指的是容器在实例化对象的时候把它依赖的类注入给它\",{\"1\":{\"787\":1}}],[\"指的是这个rehash的动作并不是一次性\",{\"1\":{\"731\":1}}],[\"指的是加密和解密使用不同的密钥\",{\"1\":{\"616\":1}}],[\"指的是小于\",{\"1\":{\"584\":1}}],[\"指的是接收通告窗口\",{\"1\":{\"580\":1}}],[\"指的是集合中元素的类型\",{\"1\":{\"441\":1}}],[\"指的是集合属性的值\",{\"1\":{\"441\":1}}],[\"指在事务开始之前和事务结束以后\",{\"1\":{\"518\":1}}],[\"指在发生死锁时\",{\"1\":{\"342\":1,\"647\":1}}],[\"指目标是收集整个新生代以及部分老年代的垃圾收集\",{\"1\":{\"397\":1}}],[\"指目标只是老年代的垃圾收集\",{\"1\":{\"397\":1}}],[\"指目标只是新生代的垃圾收集\",{\"1\":{\"397\":1}}],[\"指目标不是完整收集整个\",{\"1\":{\"397\":1}}],[\"指针就要占去\",{\"1\":{\"734\":1}}],[\"指针就会向右移动一个对象\",{\"1\":{\"384\":1}}],[\"指针大小在\",{\"1\":{\"502\":1}}],[\"指针还没有来的及修改\",{\"1\":{\"384\":1}}],[\"指针碰撞\",{\"1\":{\"383\":3}}],[\"指针等概念\",{\"1\":{\"231\":1}}],[\"指线程获取到的资源在自己使用完之前不能被其它线程抢占\",{\"1\":{\"342\":1,\"647\":1}}],[\"指线程对己经获取到的资源进行它性使用\",{\"1\":{\"342\":1,\"647\":1}}],[\"指一个\",{\"1\":{\"342\":1,\"647\":1}}],[\"指向正常的域名服务器以实现对目标网址的正常访问\",{\"1\":{\"612\":1}}],[\"指向回滚段的\",{\"1\":{\"523\":1}}],[\"指向对象的类元数据类型\",{\"1\":{\"385\":1}}],[\"指向对象本身的一个指针\",{\"1\":{\"251\":1}}],[\"指向节点为已获得锁的节点\",{\"1\":{\"331\":1}}],[\"指向持有objectmonitor对象的线程\",{\"1\":{\"325\":1}}],[\"指令长\",{\"1\":{\"736\":1}}],[\"指令会导致线程阻塞一段时间\",{\"1\":{\"736\":1}}],[\"指令可以无阻塞的提取出指定模式的\",{\"1\":{\"736\":1}}],[\"指令可以扫出指定模式的\",{\"1\":{\"736\":1}}],[\"指令可以一起执行\",{\"1\":{\"727\":1}}],[\"指令的扩展参数\",{\"1\":{\"727\":1}}],[\"指令没有被调用\",{\"1\":{\"727\":1}}],[\"指令释放茅坑\",{\"1\":{\"727\":1}}],[\"指令后\",{\"1\":{\"402\":1}}],[\"指令开始\",{\"1\":{\"382\":1}}],[\"指令本身是能够保证原子性的\",{\"1\":{\"334\":1}}],[\"指令\",{\"1\":{\"334\":1,\"636\":1,\"724\":1,\"727\":1,\"736\":1}}],[\"指令包含\",{\"1\":{\"334\":1}}],[\"指令则指向同步代码块的结束位置\",{\"1\":{\"325\":1}}],[\"指令指向同步代码块的开始位置\",{\"1\":{\"325\":1}}],[\"指令重排也是有一些限制的\",{\"1\":{\"320\":1}}],[\"指令重排有限制吗\",{\"0\":{\"320\":1}}],[\"指令级并行的重排序\",{\"1\":{\"319\":1}}],[\"指定的异常的子类\",{\"1\":{\"813\":1}}],[\"指定的睡眠时间到了后该函数会正常返回\",{\"1\":{\"302\":1}}],[\"指定先后顺序\",{\"1\":{\"804\":1}}],[\"指定调用哪个工厂方法\",{\"1\":{\"795\":1}}],[\"指定init\",{\"1\":{\"793\":1}}],[\"指定一个默认值\",{\"1\":{\"784\":1}}],[\"指定一个名字\",{\"1\":{\"445\":1}}],[\"指定接收进程\",{\"1\":{\"641\":1}}],[\"指定加锁对象\",{\"1\":{\"324\":1}}],[\"指定类型\",{\"1\":{\"285\":1}}],[\"指系统提供的服务必须一直处于可用的状态\",{\"1\":{\"190\":1}}],[\"指数据在多个副本之间能够保持一致的特性\",{\"1\":{\"190\":1}}],[\"系需要重新计算\",{\"1\":{\"693\":1}}],[\"系列方法而被挂起的线程\",{\"1\":{\"302\":1}}],[\"系列方法后被挂起的线程\",{\"1\":{\"302\":1}}],[\"系列内容\",{\"1\":{\"186\":1,\"227\":1,\"294\":2,\"373\":2,\"429\":2,\"454\":2,\"538\":2,\"617\":2,\"664\":1,\"736\":2,\"778\":2,\"824\":2,\"877\":1}}],[\"系统保护的时候调用\",{\"1\":{\"859\":1}}],[\"系统复杂性增加\",{\"1\":{\"829\":1}}],[\"系统会有一个默认的\",{\"1\":{\"815\":1}}],[\"系统中有\",{\"1\":{\"695\":1}}],[\"系统中\",{\"1\":{\"664\":1}}],[\"系统调用是非常耗时的操作\",{\"1\":{\"726\":1}}],[\"系统调用已经返回\",{\"1\":{\"570\":1}}],[\"系统调⽤函数会直接把内核缓冲区⾥的数据\",{\"1\":{\"662\":1}}],[\"系统都要为之分配或回收系统资源\",{\"1\":{\"642\":1}}],[\"系统开销\",{\"1\":{\"642\":1}}],[\"系统缺省状态下对该信号的处理是终止进程\",{\"1\":{\"641\":1}}],[\"系统设计\",{\"1\":{\"622\":1}}],[\"系统表\",{\"1\":{\"493\":1}}],[\"系统崩溃时\",{\"1\":{\"519\":1}}],[\"系统崩溃\",{\"1\":{\"482\":1}}],[\"系统发生了宕机\",{\"1\":{\"482\":1}}],[\"系统类加载器\",{\"1\":{\"423\":1}}],[\"系统一次性加载了过多数据到内存中\",{\"1\":{\"417\":1}}],[\"系统默认是添加一个任务才创建一个线程池\",{\"1\":{\"354\":1}}],[\"系统需要加载这两个excel\",{\"1\":{\"349\":1}}],[\"系统架构\",{\"1\":{\"317\":1}}],[\"系统负载\",{\"1\":{\"193\":1}}],[\"系统输出\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"纵然岸旁有玫瑰\",{\"1\":{\"186\":1,\"227\":1,\"294\":2,\"373\":2,\"429\":2,\"454\":2,\"538\":2,\"617\":2,\"664\":1,\"736\":2,\"778\":2,\"824\":2,\"877\":1}}],[\"实时监控和分析微服务的日志数据\",{\"1\":{\"877\":1}}],[\"实时监控和度量\",{\"1\":{\"858\":1}}],[\"实时性好\",{\"1\":{\"677\":1}}],[\"实时性低\",{\"1\":{\"677\":1}}],[\"实体主体的过期时间\",{\"1\":{\"556\":1}}],[\"实体主体的大小\",{\"1\":{\"556\":1}}],[\"实体部分是报文的主要部分\",{\"1\":{\"556\":1}}],[\"实体类\",{\"1\":{\"441\":2}}],[\"实体类属性名和表中字段名不一样\",{\"0\":{\"437\":1}}],[\"实操起来是个非常麻烦而且很有风险的操作\",{\"1\":{\"532\":1}}],[\"实例\",{\"1\":{\"797\":1,\"799\":2,\"800\":3,\"817\":1}}],[\"实例化的时候把\",{\"1\":{\"800\":1}}],[\"实例化的时候\",{\"1\":{\"799\":1}}],[\"实例化一个\",{\"1\":{\"793\":1}}],[\"实例化一个生产者来产生延时消息\",{\"1\":{\"763\":1}}],[\"实例化\",{\"1\":{\"793\":2}}],[\"实例化阶段\",{\"1\":{\"792\":1}}],[\"实例很大的情况下\",{\"1\":{\"680\":1}}],[\"实例的初始化过程\",{\"1\":{\"800\":1}}],[\"实例的生命周期只存在于方法的内部\",{\"1\":{\"435\":1}}],[\"实例的哈希码的\",{\"1\":{\"272\":1}}],[\"实例来直接执行已映射的\",{\"1\":{\"435\":1}}],[\"实例数据用来存储对象真正的有效信息\",{\"1\":{\"385\":1}}],[\"实例数据\",{\"1\":{\"385\":1}}],[\"实例对象结构里有对象头\",{\"1\":{\"325\":1}}],[\"实例⽅法\",{\"1\":{\"254\":1}}],[\"实例变量\",{\"1\":{\"254\":1}}],[\"实例方法呢\",{\"0\":{\"254\":1}}],[\"实现事务的管理和协调\",{\"1\":{\"870\":1}}],[\"实现客户端的负载均衡\",{\"1\":{\"850\":1}}],[\"实现对分布式事务的管理和协调\",{\"1\":{\"870\":1}}],[\"实现对分布式事务的管理\",{\"1\":{\"870\":1}}],[\"实现对配置信息的监听\",{\"1\":{\"842\":1}}],[\"实现对服务的动态管理和控制\",{\"1\":{\"834\":1}}],[\"实现类\",{\"1\":{\"812\":1}}],[\"实现类和实现是不可以调⽤的\",{\"1\":{\"252\":1}}],[\"实现接口重写也差不多\",{\"1\":{\"806\":1}}],[\"实现接⼝并覆盖接⼝中同⼀⽅法\",{\"1\":{\"248\":1}}],[\"实现了服务间的解耦\",{\"1\":{\"834\":1}}],[\"实现了业务逻辑和通用逻辑的代码分离\",{\"1\":{\"804\":1}}],[\"实现了invocationhandler接口\",{\"1\":{\"453\":1}}],[\"实现disposablebean\",{\"1\":{\"793\":1}}],[\"实现高内聚低耦合的设计理念\",{\"1\":{\"782\":1}}],[\"实现起来相对复杂\",{\"1\":{\"762\":1}}],[\"实现考虑\",{\"1\":{\"732\":1}}],[\"实现复用的效果\",{\"1\":{\"725\":1}}],[\"实现快速的故障恢复\",{\"1\":{\"682\":1}}],[\"实现多路复⽤的⽅式是\",{\"1\":{\"664\":1}}],[\"实现多个客户连接服务器\",{\"1\":{\"280\":1}}],[\"实现不同网络之间的路径选择\",{\"1\":{\"542\":1}}],[\"实现代价较小\",{\"1\":{\"528\":1}}],[\"实现代码\",{\"1\":{\"370\":1}}],[\"实现读写操作分离和数据库服务器连接的管理\",{\"1\":{\"526\":2}}],[\"实现为同样的类型\",{\"1\":{\"465\":1}}],[\"实现自定义插件\",{\"1\":{\"454\":1}}],[\"实现mybatis的interceptor接口并重写intercept\",{\"1\":{\"453\":1}}],[\"实现typehandler的setparameter\",{\"1\":{\"438\":1}}],[\"实现模块化热部署的关键是它自定义的类加载器机制的实现\",{\"1\":{\"427\":1}}],[\"实现上面除了\",{\"1\":{\"410\":1}}],[\"实现平台无关性的基石\",{\"1\":{\"377\":1}}],[\"实现rejectedexecutionhandler接口即可\",{\"1\":{\"355\":1}}],[\"实现runnable接口\",{\"1\":{\"300\":1}}],[\"实现重复利用\",{\"1\":{\"347\":1}}],[\"实现i++原子操作\",{\"1\":{\"339\":1}}],[\"实现一个线程修改一个对象的值\",{\"1\":{\"306\":1}}],[\"实现\",{\"1\":{\"300\":1,\"598\":1,\"720\":1,\"802\":2,\"807\":1}}],[\"实现callable接口\",{\"1\":{\"300\":2}}],[\"实现泛型接口\",{\"1\":{\"285\":1}}],[\"实现原理都是大同小异\",{\"1\":{\"837\":1}}],[\"实现原理知道吗\",{\"0\":{\"688\":1}}],[\"实现原理\",{\"0\":{\"332\":1},\"1\":{\"234\":1}}],[\"实现方案\",{\"1\":{\"227\":1,\"857\":1}}],[\"实现成本较低\",{\"1\":{\"202\":1}}],[\"实现分布式锁最简单的一个命令\",{\"1\":{\"198\":1}}],[\"实现的原理是\",{\"1\":{\"269\":1}}],[\"实现的思路就是从第一个请求进来开始计时\",{\"1\":{\"227\":1}}],[\"实现的\",{\"1\":{\"186\":1,\"749\":1,\"811\":1}}],[\"实际的服务调用逻辑\",{\"1\":{\"858\":1}}],[\"实际应⽤中⽐较少使⽤\",{\"1\":{\"658\":1}}],[\"实际应用中没有固定的公式\",{\"1\":{\"359\":1}}],[\"实际存在硬件⾥⾯的空间地址叫物理内存地址\",{\"1\":{\"651\":1}}],[\"实际采用哪个索引来优化对该表的访问\",{\"1\":{\"493\":1}}],[\"实际新生代的收集不是按照这个比例\",{\"1\":{\"395\":1}}],[\"实际是操作自己本地内存里面的变量\",{\"1\":{\"308\":1}}],[\"实际是等于临时变量的值\",{\"1\":{\"245\":1}}],[\"实际就是在暗示线程调度器当前线程请求让出自己的cpu\",{\"1\":{\"302\":1}}],[\"实际开发这么写要挨吊的\",{\"1\":{\"276\":1}}],[\"实际上连接点还可以是字段或者构造器\",{\"1\":{\"804\":1}}],[\"实际上是一种服务的冗余\",{\"1\":{\"682\":1}}],[\"实际上相当于访问到了另外⼀个⽂件\",{\"1\":{\"660\":1}}],[\"实际上生产中的死锁千奇百怪\",{\"1\":{\"516\":1}}],[\"实际上如果你在传入参数的时候\",{\"1\":{\"445\":1}}],[\"实际上也是破坏了双亲委派模型的\",{\"1\":{\"429\":1}}],[\"实际上还可以结合其他的业务\",{\"1\":{\"352\":1}}],[\"实际上应用没那么多了\",{\"1\":{\"197\":1}}],[\"实际上分区是不可避免的\",{\"1\":{\"192\":1}}],[\"实际上就是相当于每个segment都是一个hashmap\",{\"1\":{\"180\":1}}],[\"实际上\",{\"1\":{\"158\":1,\"413\":1,\"460\":1,\"532\":1,\"846\":1}}],[\"实际直接使用两个流objectoutputstream和objectinputstream来进行序列化和反序列化\",{\"1\":{\"156\":1}}],[\"值空间组织成一个虚拟的圆环\",{\"1\":{\"694\":1}}],[\"值来防御\",{\"1\":{\"613\":1}}],[\"值作为自己的\",{\"1\":{\"573\":1}}],[\"值作为字符串存储\",{\"1\":{\"465\":1}}],[\"值加密\",{\"1\":{\"564\":1}}],[\"值相同\",{\"1\":{\"523\":1}}],[\"值不同\",{\"1\":{\"389\":1}}],[\"值和存储进容器时的\",{\"1\":{\"389\":1}}],[\"值改变\",{\"1\":{\"389\":1}}],[\"值发生变化\",{\"1\":{\"389\":1}}],[\"值时通过\",{\"1\":{\"331\":1}}],[\"值\",{\"1\":{\"245\":1,\"258\":3,\"493\":2,\"495\":2,\"523\":3,\"564\":3}}],[\"值随机插入\",{\"1\":{\"182\":1}}],[\"值范围为\",{\"1\":{\"167\":1}}],[\"写满后自动生成一个新的文件\",{\"1\":{\"771\":1}}],[\"写⼊缓存\",{\"1\":{\"702\":1}}],[\"写一堆业务\",{\"1\":{\"804\":1}}],[\"写一些地址的信息\",{\"1\":{\"544\":1}}],[\"写一封信\",{\"1\":{\"544\":1}}],[\"写操作后的读操作指定发给数据库主服务器\",{\"1\":{\"528\":1}}],[\"写会加写锁\",{\"1\":{\"522\":1}}],[\"写锁均为悲观锁\",{\"1\":{\"515\":1}}],[\"写锁\",{\"1\":{\"514\":1}}],[\"写到第\",{\"1\":{\"483\":1}}],[\"写到末尾又回到开头循环写\",{\"1\":{\"483\":1}}],[\"写完\",{\"1\":{\"482\":1}}],[\"写完时候\",{\"1\":{\"482\":1}}],[\"写缓冲区\",{\"1\":{\"317\":1,\"319\":1}}],[\"写共享变量的副本\",{\"1\":{\"317\":1}}],[\"写入下一个文件\",{\"1\":{\"771\":1}}],[\"写入什么读取就是什么\",{\"1\":{\"730\":1}}],[\"写入了脏数据\",{\"1\":{\"708\":1}}],[\"写入和读取需要用户态\",{\"1\":{\"641\":1}}],[\"写入之前\",{\"1\":{\"482\":2}}],[\"写入之前prepare状态的写入\",{\"1\":{\"481\":1}}],[\"写入之后commit状态的写入\",{\"1\":{\"481\":1}}],[\"写入时有两个阶段的提交\",{\"1\":{\"481\":1}}],[\"写入磁盘\",{\"1\":{\"481\":1}}],[\"写入的方式也不相同\",{\"1\":{\"480\":1}}],[\"写入的时间不同\",{\"1\":{\"480\":1}}],[\"写入变量\",{\"1\":{\"308\":1}}],[\"写入\",{\"1\":{\"308\":1}}],[\"写入数据同样判断链表\",{\"1\":{\"181\":1}}],[\"写时复制\",{\"1\":{\"159\":1}}],[\"具这里有一个sendlatencyfaultenable开关变量\",{\"1\":{\"776\":1}}],[\"具有灵活的数据模型和强大的查询语言\",{\"1\":{\"876\":1}}],[\"具有更好的性能和更简洁的api\",{\"1\":{\"857\":1}}],[\"具有高可用\",{\"1\":{\"835\":1}}],[\"具有较高的性能和可扩展性\",{\"1\":{\"830\":1}}],[\"具有如下优势\",{\"1\":{\"819\":1}}],[\"具有一定的并发量\",{\"1\":{\"741\":1}}],[\"具有极⾼的可信度\",{\"1\":{\"564\":1}}],[\"具有事务\",{\"1\":{\"477\":1}}],[\"具有排他性\",{\"1\":{\"326\":1}}],[\"具有保存key\",{\"1\":{\"180\":1}}],[\"具体存储路径为\",{\"1\":{\"771\":1}}],[\"具体做法是可以建立一个消费记录表\",{\"1\":{\"757\":1}}],[\"具体来说的话\",{\"1\":{\"775\":1}}],[\"具体来说\",{\"1\":{\"548\":1,\"804\":1}}],[\"具体需要根据业务选取合适的分段大小\",{\"1\":{\"531\":1}}],[\"具体用法如下\",{\"1\":{\"445\":1}}],[\"具体什么时候开始加载\",{\"1\":{\"422\":1}}],[\"具体的传递方式可以根据业务场景和技术选型进行选择和调整\",{\"1\":{\"873\":1}}],[\"具体的机制如下\",{\"1\":{\"871\":1}}],[\"具体的实现过程如下\",{\"1\":{\"843\":1}}],[\"具体的实现大概可以分成这么几个部分\",{\"1\":{\"842\":1}}],[\"具体的做法是\",{\"1\":{\"777\":1}}],[\"具体的调优案例可以查看参考\",{\"1\":{\"369\":1}}],[\"具体的数字单元\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"具体代码\",{\"1\":{\"314\":1}}],[\"具体实现步骤如下\",{\"1\":{\"859\":1}}],[\"具体实现都是由各数据库自己实现\",{\"1\":{\"808\":1}}],[\"具体实现\",{\"1\":{\"314\":1}}],[\"具体实现一般都是使用redission框架\",{\"1\":{\"225\":1}}],[\"具体唤醒哪个等待的线程是随机的\",{\"1\":{\"302\":1}}],[\"具体过程\",{\"1\":{\"219\":1}}],[\"粒度比较大\",{\"1\":{\"178\":1}}],[\"此阶段主要包括提交异步化和回滚反向补偿两个步骤\",{\"1\":{\"871\":1}}],[\"此方法会检查目标方法的修饰符是否为\",{\"1\":{\"813\":1}}],[\"此\",{\"1\":{\"606\":1,\"717\":1}}],[\"此外还提供\",{\"1\":{\"434\":1}}],[\"此外\",{\"1\":{\"385\":1,\"492\":1,\"796\":1}}],[\"此内存区域的唯一目的就是存放对象实例\",{\"1\":{\"379\":1}}],[\"此值是用来初始化线程池中核心线程数\",{\"1\":{\"354\":1}}],[\"此处获取对象的方式是从工厂类中获取实例方法\",{\"1\":{\"795\":1}}],[\"此处获取对象的方式是从工厂类中获取静态方法\",{\"1\":{\"795\":1}}],[\"此处t可以随便写为任意标识\",{\"1\":{\"285\":1}}],[\"此处是十进制数值\",{\"1\":{\"270\":1}}],[\"此处即为\",{\"1\":{\"86\":1}}],[\"此操作\",{\"1\":{\"202\":1}}],[\"此时块存储采用ssd的话\",{\"1\":{\"772\":1}}],[\"此时消息是半消息\",{\"1\":{\"765\":1}}],[\"此时的socket应该采用非阻塞模式\",{\"1\":{\"672\":1}}],[\"此时的解决方案就是在业务代码中进行关联\",{\"1\":{\"534\":1}}],[\"此时e\",{\"1\":{\"672\":1}}],[\"此时应⽤程序不断轮询内核\",{\"1\":{\"663\":1}}],[\"此时因为\",{\"1\":{\"592\":1}}],[\"此时发送窗⼝的值是\",{\"1\":{\"585\":1}}],[\"此时再发送数据就会加重网络负担\",{\"1\":{\"581\":1}}],[\"此时服务端可能还有一些数据没有传输完成\",{\"1\":{\"578\":1}}],[\"此时这个连接就被推入了\",{\"1\":{\"573\":1}}],[\"此时客户端已经处于\",{\"1\":{\"572\":1}}],[\"此时不在监听状态\",{\"1\":{\"570\":1}}],[\"此时不允许数据更新到表中\",{\"1\":{\"515\":1}}],[\"此时锁住的就是临键区间\",{\"1\":{\"513\":1}}],[\"此时就会将对应的间隙区间锁定\",{\"1\":{\"513\":1}}],[\"此时就会直接将这条记录锁定\",{\"1\":{\"513\":1}}],[\"此时就会线性向后查找\",{\"1\":{\"313\":1}}],[\"此时必须立即触发一次\",{\"1\":{\"399\":1}}],[\"此时老年代就是没有足够的内存空间存放这些对象了\",{\"1\":{\"399\":1}}],[\"此时a已经非彼a\",{\"1\":{\"336\":1}}],[\"此时持有该偏向锁的线程\",{\"1\":{\"328\":1}}],[\"此时计数器\",{\"1\":{\"325\":1}}],[\"此时会释放\",{\"1\":{\"325\":1}}],[\"此时会创建如下两个对象\",{\"1\":{\"265\":1}}],[\"此时它指向threadloca的强引用就没有了\",{\"1\":{\"311\":1}}],[\"此时有可能已经成功了\",{\"1\":{\"224\":1}}],[\"此时\",{\"1\":{\"208\":1,\"266\":1,\"346\":1,\"481\":1,\"482\":1,\"515\":1,\"523\":1,\"766\":1,\"800\":2}}],[\"此时d1和d2数据不一致\",{\"1\":{\"191\":1}}],[\"此时d1和d2的数据不一致\",{\"1\":{\"191\":1}}],[\"此时执行\",{\"1\":{\"177\":1}}],[\"此问题在\",{\"1\":{\"177\":1}}],[\"覆盖掉⼆级缓存中的普通\",{\"1\":{\"801\":1}}],[\"覆盖索引了解吗\",{\"0\":{\"508\":1}}],[\"覆盖\",{\"1\":{\"177\":1}}],[\"中定义了表示隔离级别的常量\",{\"1\":{\"810\":1}}],[\"中连接点指的就是被拦截到的方法\",{\"1\":{\"804\":1}}],[\"中带有\",{\"1\":{\"802\":1}}],[\"中已经不存在了\",{\"1\":{\"797\":1}}],[\"中已被废弃\",{\"1\":{\"790\":1}}],[\"中也是用到了适配器模式适配\",{\"1\":{\"785\":1}}],[\"中应用了哪些设计模式呢\",{\"0\":{\"785\":1}}],[\"中字符串相比有什么优势\",{\"0\":{\"730\":1}}],[\"中字符串开头为\",{\"1\":{\"294\":1}}],[\"中返回给浏览器\",{\"1\":{\"615\":1}}],[\"中获取\",{\"1\":{\"566\":1,\"748\":1}}],[\"中获得的\",{\"1\":{\"435\":1}}],[\"中导致信息被窃取\",{\"1\":{\"566\":1}}],[\"中保持一些常用变量信息\",{\"1\":{\"566\":1}}],[\"中查找用户的状态\",{\"1\":{\"566\":1}}],[\"中查询\",{\"1\":{\"490\":1}}],[\"中国\",{\"1\":{\"557\":1}}],[\"中继日志中\",{\"1\":{\"527\":1}}],[\"中文是分布式反射拒绝服务\",{\"1\":{\"614\":1}}],[\"中文名是多版本并发控制\",{\"1\":{\"523\":1}}],[\"中文翻译为\",{\"1\":{\"294\":1}}],[\"中插入新记录\",{\"1\":{\"513\":1}}],[\"中日志页都刷到磁盘\",{\"1\":{\"483\":1}}],[\"中记录的这个事务会无效\",{\"1\":{\"482\":1}}],[\"中使用该引擎作为临时表\",{\"1\":{\"476\":1}}],[\"中如何执行的\",{\"0\":{\"473\":1}}],[\"中数据的存储和提取\",{\"1\":{\"472\":1}}],[\"中不满足匹配关系的记录\",{\"1\":{\"458\":1}}],[\"中小型的软件项目\",{\"1\":{\"434\":1}}],[\"中称为\",{\"1\":{\"427\":1}}],[\"中编写代码\",{\"1\":{\"427\":1}}],[\"中添加一个新的\",{\"1\":{\"427\":1}}],[\"中并没有进行强制约束\",{\"1\":{\"422\":1}}],[\"中列出的可能原因做排除法\",{\"1\":{\"417\":1}}],[\"中仍然存活的对象一次性复制到另外一块\",{\"1\":{\"396\":1}}],[\"中成功拯救自己\",{\"1\":{\"393\":1}}],[\"中引用的对象\",{\"1\":{\"391\":1}}],[\"中引入的一个新特性\",{\"1\":{\"285\":1}}],[\"中引入了枚举类型\",{\"1\":{\"242\":1}}],[\"中可作为\",{\"0\":{\"391\":1}}],[\"中非常频繁\",{\"1\":{\"386\":1}}],[\"中存储过多的元素\",{\"1\":{\"719\":1}}],[\"中存储的是稳定句柄地址\",{\"1\":{\"386\":1}}],[\"中存储的直接就是对象地址\",{\"1\":{\"386\":1}}],[\"中存储的就是对象的句柄地址\",{\"1\":{\"386\":1}}],[\"中存在这么几种重要角色\",{\"1\":{\"208\":1}}],[\"中对象的创建\",{\"1\":{\"382\":1}}],[\"中永久代还剩余的内容\",{\"1\":{\"381\":1}}],[\"中是复合的数据结构\",{\"1\":{\"509\":1}}],[\"中是\",{\"1\":{\"353\":1}}],[\"中间人篡改了证书原文\",{\"1\":{\"564\":1}}],[\"中间件\",{\"1\":{\"620\":1}}],[\"中间件就是一个数据库服务器\",{\"1\":{\"526\":1}}],[\"中间件对业务服务器提供\",{\"1\":{\"526\":1}}],[\"中间件封装指的是独立一套系统出来\",{\"1\":{\"526\":1}}],[\"中间件封装\",{\"1\":{\"526\":1}}],[\"中间层封装\",{\"1\":{\"526\":1}}],[\"中间的任何阶段\",{\"1\":{\"519\":1}}],[\"中间放着一个指针作为分界点的指示器\",{\"1\":{\"383\":1}}],[\"中间可能发生了a变b\",{\"1\":{\"336\":1}}],[\"中间操作\",{\"1\":{\"294\":1}}],[\"中队列是个双向链表\",{\"1\":{\"331\":1}}],[\"中会将竞争共享资源失败的线程添加到一个变体的\",{\"1\":{\"331\":1}}],[\"中断线程\",{\"1\":{\"302\":1}}],[\"中处理集合的关键抽象概念\",{\"1\":{\"291\":1}}],[\"中读取或写入\",{\"1\":{\"280\":1}}],[\"中被修改为\",{\"1\":{\"276\":1}}],[\"中异常处理体系\",{\"0\":{\"274\":1}}],[\"中取出\",{\"1\":{\"615\":1}}],[\"中取\",{\"1\":{\"269\":1}}],[\"中序列化可以通过实现\",{\"1\":{\"261\":1}}],[\"中接⼝的变化\",{\"1\":{\"252\":1}}],[\"中大体可以分为\",{\"1\":{\"251\":1}}],[\"中\",{\"0\":{\"278\":1,\"464\":1},\"1\":{\"242\":1,\"250\":1,\"252\":1,\"294\":3,\"317\":1,\"325\":2,\"342\":1,\"402\":1,\"404\":1,\"425\":1,\"435\":1,\"439\":1,\"470\":5,\"480\":1,\"489\":1,\"502\":1,\"519\":3,\"523\":1,\"530\":1,\"554\":1,\"558\":1,\"566\":1,\"647\":1,\"662\":1,\"676\":1,\"694\":4,\"747\":1,\"755\":1,\"777\":1,\"785\":1,\"793\":2,\"798\":1}}],[\"中有一个\",{\"1\":{\"785\":1}}],[\"中有哪几种锁\",{\"0\":{\"512\":1}}],[\"中有以下四种创建对象的方式\",{\"1\":{\"261\":1}}],[\"中有两种形式可以实现多态\",{\"1\":{\"248\":1}}],[\"中有\",{\"1\":{\"178\":1}}],[\"中都存在\",{\"1\":{\"177\":2}}],[\"中的一个组件\",{\"1\":{\"868\":1}}],[\"中的成员变量保存在\",{\"1\":{\"798\":1}}],[\"中的成员变量进行写操作\",{\"1\":{\"798\":1}}],[\"中的成员变量执行查询以外的操作\",{\"1\":{\"798\":1}}],[\"中的单例\",{\"0\":{\"798\":1},\"1\":{\"798\":1}}],[\"中的每个messagequeue创建一个processqueue对象并存入rebalanceimpl的processqueuetable队列中\",{\"1\":{\"777\":1}}],[\"中的字典相当于\",{\"1\":{\"731\":1}}],[\"中的流量攻击\",{\"1\":{\"614\":1}}],[\"中的最小值\",{\"1\":{\"523\":1}}],[\"中的日志全部刷到磁盘\",{\"1\":{\"483\":1}}],[\"中的信息将数据回滚到修改之前的样子\",{\"1\":{\"479\":1}}],[\"中的记录按照<order\",{\"1\":{\"470\":1}}],[\"中的记录进行分组操作\",{\"1\":{\"470\":1}}],[\"中的实现\",{\"1\":{\"458\":1}}],[\"中的所有\",{\"1\":{\"446\":1}}],[\"中的<result>来映射字段名和实体类属性名的一一对应的关系\",{\"1\":{\"437\":1}}],[\"中的引用有四种\",{\"1\":{\"392\":1}}],[\"中的优秀功能\",{\"1\":{\"381\":1}}],[\"中的队列是\",{\"1\":{\"331\":1}}],[\"中的线程中断是一种线程间的协作模式\",{\"1\":{\"302\":1}}],[\"中的基本数据类型只有\",{\"1\":{\"263\":1}}],[\"中的⽅法\",{\"1\":{\"186\":1}}],[\"中的\",{\"0\":{\"797\":1},\"1\":{\"177\":1,\"272\":1,\"331\":1,\"444\":1,\"464\":1,\"466\":1,\"523\":3,\"554\":1,\"731\":1,\"784\":1,\"785\":1}}],[\"中括号\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"完毕后\",{\"1\":{\"451\":1}}],[\"完整可运行代码地址\",{\"1\":{\"352\":1}}],[\"完整的升级过程\",{\"1\":{\"329\":1}}],[\"完整代码\",{\"1\":{\"176\":1}}],[\"完全基于内存操作\",{\"1\":{\"671\":1}}],[\"完全多路复用\",{\"1\":{\"558\":1}}],[\"完全不会对其生存时间构成影响\",{\"1\":{\"392\":1}}],[\"完全没问题\",{\"1\":{\"285\":1}}],[\"完全拷贝一个对象\",{\"1\":{\"260\":1}}],[\"完成全局事务\",{\"1\":{\"872\":1}}],[\"完成一次\",{\"1\":{\"843\":2}}],[\"完成对\",{\"1\":{\"817\":1}}],[\"完成具体的业务逻辑\",{\"1\":{\"815\":1}}],[\"完成自动装配\",{\"1\":{\"802\":1}}],[\"完成自动装配等工作\",{\"1\":{\"802\":1}}],[\"完成依赖关系的注入\",{\"1\":{\"794\":2}}],[\"完成了资源的加载\",{\"1\":{\"788\":1}}],[\"完成了历史数据的同步和校验\",{\"1\":{\"532\":1}}],[\"完成节点握手之后\",{\"1\":{\"697\":1}}],[\"完成后自动结束\",{\"1\":{\"676\":1}}],[\"完成后才通知服务端程序启动线程去处理\",{\"1\":{\"280\":1}}],[\"完成同步\",{\"1\":{\"527\":1}}],[\"完成查询优化后\",{\"1\":{\"473\":1}}],[\"完成状态确认\",{\"1\":{\"345\":1}}],[\"完成\",{\"1\":{\"225\":1}}],[\"完善的生态系统\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"快捷测试的支持\",{\"1\":{\"782\":1}}],[\"快照\",{\"1\":{\"678\":1}}],[\"快照读\",{\"1\":{\"523\":1}}],[\"快表等\",{\"1\":{\"655\":1}}],[\"快\",{\"1\":{\"469\":2}}],[\"快很多\",{\"1\":{\"461\":1,\"468\":1}}],[\"快速集成功能\",{\"1\":{\"782\":1}}],[\"快速列表\",{\"0\":{\"734\":1}}],[\"快速的特性\",{\"1\":{\"724\":1}}],[\"快速的映射到对应的\",{\"1\":{\"258\":1}}],[\"快速重传机制只解决了⼀个问题\",{\"1\":{\"592\":1}}],[\"快速重传流程如下\",{\"1\":{\"592\":1}}],[\"快速重传和快速恢复算法一般同时使用\",{\"1\":{\"589\":1}}],[\"快速重传\",{\"0\":{\"592\":1},\"1\":{\"588\":1,\"590\":1}}],[\"快速恢复算法认为\",{\"1\":{\"589\":1}}],[\"快速恢复\",{\"0\":{\"589\":1},\"1\":{\"585\":1}}],[\"快速迭代的项目\",{\"1\":{\"434\":1}}],[\"快速失败是java集合的一种错误检测机制\",{\"1\":{\"157\":1}}],[\"快速失败\",{\"0\":{\"157\":1},\"1\":{\"157\":1}}],[\"快手面试官直呼内行\",{\"1\":{\"176\":1}}],[\"手册目前共有java语言\",{\"1\":{\"620\":1}}],[\"手册的内容结构\",{\"1\":{\"620\":1}}],[\"手机就更不用说了\",{\"1\":{\"568\":1}}],[\"手写hashmap\",{\"1\":{\"176\":1}}],[\"手动触发分别对应save和bgsave命令\",{\"1\":{\"676\":1}}],[\"手动\",{\"1\":{\"150\":1,\"186\":1,\"188\":1,\"229\":1,\"294\":1,\"296\":1,\"375\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"做不同的逻辑处理\",{\"1\":{\"777\":1}}],[\"做一层过滤\",{\"1\":{\"703\":1}}],[\"做一个\",{\"1\":{\"167\":1}}],[\"做同样的\",{\"1\":{\"694\":1}}],[\"做负载均衡的\",{\"1\":{\"604\":1}}],[\"做防重处理\",{\"1\":{\"413\":1}}],[\"做\",{\"1\":{\"175\":1,\"720\":1}}],[\"做了四次移位和四次异或\",{\"1\":{\"175\":1}}],[\"更改配置文件\",{\"1\":{\"767\":1}}],[\"更轻量\",{\"1\":{\"748\":1}}],[\"更好记忆\",{\"1\":{\"621\":1}}],[\"更高级的攻击者甚至能够直接对\",{\"1\":{\"612\":1}}],[\"更准确地说\",{\"1\":{\"600\":1}}],[\"更像一个住址\",{\"1\":{\"557\":1}}],[\"更合适一些\",{\"1\":{\"461\":1}}],[\"更常用的方式是先获取mapper\",{\"1\":{\"435\":1}}],[\"更不能用\",{\"1\":{\"241\":1}}],[\"更新数据\",{\"1\":{\"707\":1}}],[\"更新触发故障选举的时间\",{\"1\":{\"698\":1}}],[\"更新比较频繁的字段也不适合加索引\",{\"1\":{\"499\":1}}],[\"更新时候也需要维护\",{\"1\":{\"497\":1}}],[\"更新时会锁住整张表\",{\"1\":{\"477\":1}}],[\"更新完成\",{\"1\":{\"481\":1}}],[\"更新语句的执行是\",{\"1\":{\"481\":1}}],[\"更新失败\",{\"1\":{\"329\":1}}],[\"更新成功\",{\"1\":{\"329\":1}}],[\"更新成功后\",{\"1\":{\"225\":1}}],[\"更新用户获取等等\",{\"1\":{\"309\":1}}],[\"更新逻辑\",{\"1\":{\"225\":2}}],[\"更新\",{\"1\":{\"224\":1,\"428\":1,\"527\":1}}],[\"更快地扩容\",{\"1\":{\"175\":1}}],[\"更多的是一种兜底的策略\",{\"1\":{\"172\":1}}],[\"定时任务刷新缓存\",{\"1\":{\"711\":1}}],[\"定时监控redis\",{\"1\":{\"688\":1}}],[\"定时器信号\",{\"1\":{\"641\":1}}],[\"定时及周期执行的线程池\",{\"1\":{\"360\":1}}],[\"定期删除指的是redis每隔⼀段时间对数据库做⼀次检查\",{\"1\":{\"716\":1}}],[\"定期删除\",{\"1\":{\"716\":1}}],[\"定期\",{\"1\":{\"222\":1}}],[\"定位\",{\"1\":{\"836\":1}}],[\"定位到table中的位置\",{\"1\":{\"313\":1}}],[\"定位到segment\",{\"1\":{\"180\":1}}],[\"定位在新数组的位置\",{\"1\":{\"175\":1}}],[\"定义资源\",{\"1\":{\"859\":1}}],[\"定义|feign是一个声明式的web服务客户端\",{\"1\":{\"846\":1}}],[\"定义|http\",{\"1\":{\"845\":1}}],[\"定义横切逻辑\",{\"1\":{\"806\":1}}],[\"定义切点有很多其它种方式\",{\"1\":{\"805\":1}}],[\"定义为多例\",{\"1\":{\"798\":1}}],[\"定义和依赖定义有哪些方式\",{\"0\":{\"794\":1}}],[\"定义一个mybeanpostprocessor实现beanpostprocessor接口\",{\"1\":{\"793\":1}}],[\"定义一个personbean类\",{\"1\":{\"793\":1}}],[\"定义必要信息的\",{\"1\":{\"792\":1}}],[\"定义中\",{\"1\":{\"792\":1}}],[\"定义了将容器中的\",{\"1\":{\"790\":1}}],[\"定义对应的实体\",{\"1\":{\"788\":1}}],[\"定义建言\",{\"1\":{\"784\":1}}],[\"定义我们采用什么模式去创建\",{\"1\":{\"784\":1}}],[\"定义在\",{\"1\":{\"258\":1}}],[\"定义\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":1,\"784\":1,\"788\":1,\"793\":1,\"879\":1}}],[\"定义所有可执行程序路径\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"定义类\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"788\":1,\"879\":1}}],[\"冲突解决\",{\"1\":{\"176\":1}}],[\"冲突\",{\"1\":{\"175\":1}}],[\"原方法调用被限流\",{\"1\":{\"859\":1}}],[\"原本的业务方法\",{\"1\":{\"859\":1}}],[\"原型\",{\"1\":{\"799\":1}}],[\"原来\",{\"1\":{\"787\":1}}],[\"原有的数据不需要动\",{\"1\":{\"531\":1}}],[\"原则上\",{\"1\":{\"493\":1}}],[\"原子更新带有版本号的引用类型\",{\"1\":{\"340\":1}}],[\"原子更新带有标记位的引用类型\",{\"1\":{\"340\":1}}],[\"原子更新基本类型的atomicinteger\",{\"1\":{\"340\":1}}],[\"原子更新引用类型里的字段\",{\"1\":{\"340\":1}}],[\"原子更新引用类型\",{\"1\":{\"340\":1}}],[\"原子更新引用类型数组里的元素\",{\"1\":{\"340\":1}}],[\"原子更新引用和原子更新属性\",{\"1\":{\"340\":1}}],[\"原子更新长整型字段的更新器\",{\"1\":{\"340\":1}}],[\"原子更新长整型数组里的元素\",{\"1\":{\"340\":1}}],[\"原子更新长整型\",{\"1\":{\"340\":1}}],[\"原子更新整型的字段的更新器\",{\"1\":{\"340\":1}}],[\"原子更新整型数组里的元素\",{\"1\":{\"340\":1}}],[\"原子更新整型\",{\"1\":{\"340\":1}}],[\"原子更新布尔类型\",{\"1\":{\"340\":1}}],[\"原子更新数组\",{\"1\":{\"340\":1}}],[\"原子操作类了解多少\",{\"0\":{\"340\":1}}],[\"原子性指的是一个操作是不可分割\",{\"1\":{\"318\":1}}],[\"原子性\",{\"1\":{\"318\":4,\"518\":1,\"519\":2}}],[\"原生流\",{\"1\":{\"283\":1}}],[\"原生序列化方法即通过\",{\"1\":{\"283\":1}}],[\"原始节点作为新节点的后继节点\",{\"1\":{\"175\":1}}],[\"原因很简单\",{\"1\":{\"799\":1}}],[\"原因\",{\"1\":{\"175\":4}}],[\"原理和\",{\"1\":{\"417\":1}}],[\"原理很简单\",{\"1\":{\"315\":1}}],[\"原理是什么\",{\"0\":{\"234\":1}}],[\"原理\",{\"0\":{\"270\":1,\"289\":1,\"442\":1,\"447\":1,\"732\":1,\"768\":1},\"1\":{\"157\":2,\"805\":1}}],[\"红⿊树是个⾼效的数据结构\",{\"1\":{\"664\":1}}],[\"红灯行\",{\"1\":{\"641\":1}}],[\"红色\",{\"1\":{\"174\":1}}],[\"红黑树\",{\"1\":{\"181\":1,\"732\":1}}],[\"红黑树版咱们多半是写不出来\",{\"1\":{\"176\":1}}],[\"红黑树节点的大小大概是普通节点大小的两倍\",{\"1\":{\"172\":1}}],[\"红黑树有两种方式保持平衡\",{\"1\":{\"163\":1}}],[\"红黑树怎么保持平衡的知道吗\",{\"0\":{\"163\":1}}],[\"红黑树是一种平衡的二叉树\",{\"1\":{\"162\":1}}],[\"红黑树是为了提高查询的效率\",{\"1\":{\"161\":1}}],[\"红黑树本质上是一种二叉查找树\",{\"1\":{\"162\":1}}],[\"图表和搜索查询\",{\"1\":{\"877\":1}}],[\"图片\",{\"1\":{\"670\":1}}],[\"图片等媒体文件用字节流比较好\",{\"1\":{\"279\":1}}],[\"图比文字更好理解\",{\"1\":{\"621\":1}}],[\"图文并貌\",{\"0\":{\"621\":1}}],[\"图文详解操作系统面试高频题\",{\"1\":{\"664\":1}}],[\"图文详解计算机网络面试高频题\",{\"1\":{\"617\":1}}],[\"图文详解\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"736\":1,\"778\":1,\"824\":1}}],[\"图像\",{\"1\":{\"557\":1}}],[\"图中标出了它们的工作区域\",{\"1\":{\"401\":1}}],[\"图里面的是一个双核\",{\"1\":{\"317\":1}}],[\"图b表示扩容后key1和key2两种key确定索引位置\",{\"1\":{\"174\":1}}],[\"图a表示扩容前的key1和key2两种key确定索引的位置\",{\"1\":{\"174\":1}}],[\"图标操作\",{\"0\":{\"71\":1}}],[\"看天\",{\"1\":{\"799\":1}}],[\"看queue中是否有数据\",{\"1\":{\"778\":1}}],[\"看起来也更加直观\",{\"1\":{\"732\":1}}],[\"看过作者面渣逆袭系列的朋友应该都知道\",{\"1\":{\"621\":1}}],[\"看到名字就知道了\",{\"1\":{\"444\":1}}],[\"看一个fork\",{\"1\":{\"373\":1}}],[\"看一下\",{\"1\":{\"580\":1}}],[\"看一下它的查询方法\",{\"1\":{\"448\":1}}],[\"看一下这段代码运行结果\",{\"1\":{\"245\":1}}],[\"看一下初始化计算table容量的过程\",{\"1\":{\"169\":1}}],[\"看一下扰动函数的示意图\",{\"1\":{\"167\":1}}],[\"看你比较急\",{\"1\":{\"353\":1}}],[\"看见红灯就表示线程被阻塞\",{\"1\":{\"348\":1}}],[\"看做是包装对象\",{\"1\":{\"293\":1}}],[\"看来和下面这段没区别\",{\"1\":{\"285\":1}}],[\"看上去杂乱\",{\"1\":{\"278\":1}}],[\"看下这几个代码运行结果\",{\"0\":{\"245\":1}}],[\"看下这张图\",{\"1\":{\"174\":1}}],[\"看看几种情形\",{\"1\":{\"799\":1}}],[\"看看等的up是不是更新了\",{\"1\":{\"663\":1}}],[\"看看目录就知道了\",{\"1\":{\"620\":1}}],[\"看看执行计划是否准确\",{\"1\":{\"538\":1}}],[\"看看是否能找到www\",{\"1\":{\"547\":1}}],[\"看看是否还有优化的空间\",{\"1\":{\"493\":1}}],[\"看看是否录入一致\",{\"1\":{\"349\":1}}],[\"看看批量保存的两种用法\",{\"1\":{\"445\":1}}],[\"看看当前子任务是否需要继续分割成子任务\",{\"1\":{\"373\":1}}],[\"看看reentrantlock的加锁操作\",{\"1\":{\"332\":1}}],[\"看看这几行代码\",{\"0\":{\"239\":1}}],[\"看看如16扩容为32的示意图\",{\"1\":{\"174\":1}}],[\"新版本\",{\"1\":{\"734\":1}}],[\"新加进来的页面则挂在链表的末端\",{\"1\":{\"658\":1}}],[\"新建一个固定格式的\",{\"1\":{\"609\":1}}],[\"新建线程执行任务\",{\"1\":{\"362\":1}}],[\"新表命名为旧表的名称\",{\"1\":{\"537\":1}}],[\"新旧库的数据对比\",{\"1\":{\"532\":1}}],[\"新增标签中添加\",{\"1\":{\"443\":1}}],[\"新增容量大小\",{\"1\":{\"175\":1}}],[\"新创建的对象优先在新生代\",{\"1\":{\"398\":1}}],[\"新生代和老年代分别采用了哪些垃圾收集器\",{\"1\":{\"417\":1}}],[\"新生代和老年代的大小\",{\"1\":{\"417\":1}}],[\"新生代仍然有大量对象存活\",{\"1\":{\"400\":1}}],[\"新生代的\",{\"1\":{\"399\":1}}],[\"新生代的垃圾收集主要采用标记\",{\"1\":{\"396\":1}}],[\"新生代历次young\",{\"1\":{\"399\":1}}],[\"新生代收集\",{\"1\":{\"397\":1}}],[\"新生代垃圾收集主要采用这种算法\",{\"1\":{\"395\":1}}],[\"新生代存放存活时间短的对象\",{\"1\":{\"394\":1}}],[\"新生代\",{\"1\":{\"394\":1}}],[\"新任务会追加到workqueue中\",{\"1\":{\"354\":1}}],[\"新类的定义可以增加新的属性或新的方法\",{\"1\":{\"248\":1}}],[\"新的主节点是怎样被挑选出来的\",{\"0\":{\"690\":1}}],[\"新的任务会被添加到workqueue中\",{\"1\":{\"354\":1}}],[\"新的\",{\"1\":{\"269\":1,\"730\":1}}],[\"新的位置不变或索引\",{\"1\":{\"175\":1}}],[\"新的容量也是2的次幂\",{\"1\":{\"174\":1}}],[\"新特性\",{\"0\":{\"290\":1},\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"由此得知\",{\"1\":{\"816\":1,\"817\":1}}],[\"由此减少服务器开销和接收到失效请求发生的错误\",{\"1\":{\"569\":1}}],[\"由用户自行实现和分布式部署\",{\"1\":{\"750\":1}}],[\"由子进程完成持久化文件重写工作\",{\"1\":{\"718\":1}}],[\"由客户端发起命\",{\"1\":{\"697\":1}}],[\"由从节点提供读服务\",{\"1\":{\"682\":1}}],[\"由内核中的\",{\"1\":{\"664\":1}}],[\"由内核直接管理直接管理线程\",{\"1\":{\"644\":1}}],[\"由系统决定\",{\"1\":{\"656\":1}}],[\"由计时器发出时钟中断\",{\"1\":{\"640\":1}}],[\"由浅入深\",{\"1\":{\"620\":1}}],[\"由小到大逐渐增加拥塞窗口的大小\",{\"1\":{\"586\":1}}],[\"由发送端填充\",{\"1\":{\"580\":1}}],[\"由一定数量的log\",{\"1\":{\"483\":1}}],[\"由会话工厂创建\",{\"1\":{\"448\":1}}],[\"由创建出来的新线程去执行thread的run方法\",{\"1\":{\"301\":1}}],[\"由\",{\"1\":{\"236\":1,\"519\":1,\"784\":1,\"791\":1,\"835\":1,\"868\":1}}],[\"由领导者作为唯一的提议者\",{\"1\":{\"217\":1}}],[\"由初始化参数确定\",{\"1\":{\"174\":1}}],[\"由于rocketmq是基于主题topic的订阅模式\",{\"1\":{\"771\":1}}],[\"由于rdb⽂件是保存在硬盘上的\",{\"1\":{\"676\":1}}],[\"由于消息需要被不同的组进行多次消费\",{\"1\":{\"744\":1}}],[\"由于不可能对所有key去做轮询来删除\",{\"1\":{\"716\":1}}],[\"由于从节点无法收集到\",{\"1\":{\"698\":1}}],[\"由于从节点之前保存了自身已复制的偏移量和主节点的运行id\",{\"1\":{\"685\":1}}],[\"由于在每个配置纪元内持有槽的主节点只能投票给一个\",{\"1\":{\"698\":1}}],[\"由于其他进程处于运⾏状态⽽暂时停⽌运⾏\",{\"1\":{\"637\":1}}],[\"由于是采用动态创建子类的方法\",{\"1\":{\"806\":1}}],[\"由于是第一次进行复制\",{\"1\":{\"685\":1}}],[\"由于是对称加密\",{\"1\":{\"617\":1}}],[\"由于是map集合\",{\"1\":{\"86\":2,\"91\":1}}],[\"由于需要大数的乘幂求模等运算\",{\"1\":{\"617\":1}}],[\"由于域名劫持往往只能在特定的网络范围内进行\",{\"1\":{\"612\":1}}],[\"由于攻击者没有修改数据\",{\"1\":{\"611\":1}}],[\"由于大量负载的原因\",{\"1\":{\"582\":1}}],[\"由于博主上班九九六\",{\"1\":{\"574\":1}}],[\"由于某种原因传输到了服务器端\",{\"1\":{\"569\":1}}],[\"由于网络传输是有延时的\",{\"1\":{\"569\":1}}],[\"由于他没有\",{\"1\":{\"564\":1}}],[\"由于索引需要额外的维护成本\",{\"1\":{\"536\":1}}],[\"由于每次变动都会先把undo日志记录下来\",{\"1\":{\"523\":1}}],[\"由于事务的更改已经记录在\",{\"1\":{\"519\":1}}],[\"由于数据可能还没有被真正写入数据文件\",{\"1\":{\"519\":1}}],[\"由于name使用了范围查询\",{\"1\":{\"510\":1}}],[\"由于双亲委派模型在\",{\"1\":{\"427\":1}}],[\"由于新生代空间较小\",{\"1\":{\"416\":1}}],[\"由于对象修改之后的\",{\"1\":{\"389\":1}}],[\"由于对象访问在\",{\"1\":{\"386\":1}}],[\"由于作用域原因\",{\"1\":{\"389\":1}}],[\"由于现代垃圾收集器大部分都是基于分代收集理论设计的\",{\"1\":{\"379\":1}}],[\"由于空闲\",{\"1\":{\"364\":1}}],[\"由于撤销需要知道当前持有该偏向锁的线程栈状态\",{\"1\":{\"328\":1}}],[\"由于处理器使用缓存和读\",{\"1\":{\"319\":1}}],[\"由于\",{\"1\":{\"239\":1,\"386\":1,\"578\":1,\"598\":1,\"741\":1,\"806\":1,\"807\":1}}],[\"由于迭代时是对原集合的拷贝进行遍历\",{\"1\":{\"157\":1}}],[\"空值做了缓存\",{\"1\":{\"703\":1}}],[\"空间预分配\",{\"1\":{\"730\":1}}],[\"空间不足时\",{\"1\":{\"483\":1}}],[\"空间分配担保\",{\"1\":{\"400\":1}}],[\"空间分配担保失败\",{\"1\":{\"399\":1}}],[\"空间的一半\",{\"1\":{\"400\":1}}],[\"空间中相同年龄所有对象大小的总和大于\",{\"1\":{\"400\":1}}],[\"空间上\",{\"1\":{\"396\":1}}],[\"空间\",{\"1\":{\"396\":2,\"404\":2}}],[\"空间和两块较小的\",{\"1\":{\"396\":1}}],[\"空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作\",{\"1\":{\"395\":1}}],[\"空间成本就增加了\",{\"1\":{\"173\":1}}],[\"空闲的内存被放在另一边\",{\"1\":{\"383\":1}}],[\"空闲列表\",{\"1\":{\"383\":3}}],[\"空位比较多的时候就扩容了\",{\"1\":{\"173\":1}}],[\"空位比较少的时候才扩容\",{\"1\":{\"173\":1}}],[\"把认证信息添加到请求头中\",{\"1\":{\"849\":1}}],[\"把它解析成一个类型\",{\"1\":{\"788\":1}}],[\"把它们置为1\",{\"1\":{\"705\":1}}],[\"把pullrequest挂起来\",{\"1\":{\"778\":1}}],[\"把消息投递到目标topic的队列中\",{\"1\":{\"764\":1}}],[\"把消息发往哪个\",{\"1\":{\"760\":1}}],[\"把ht\",{\"1\":{\"731\":1}}],[\"把热key打散到不同的服务器\",{\"1\":{\"710\":1}}],[\"把要删除的key或者删除失败的key丢尽消息队列\",{\"1\":{\"708\":1}}],[\"把接收节点标记为主观下线\",{\"1\":{\"698\":1}}],[\"把rdb或者aof文件拷贝到redis的数据目录下\",{\"1\":{\"679\":1}}],[\"把需要自动加载的配置类的路径存储起来\",{\"1\":{\"820\":1}}],[\"把需要监控的\",{\"1\":{\"664\":1}}],[\"把需要跨库\",{\"1\":{\"534\":1}}],[\"把所有的⻚⾯都保存在⼀个类似钟⾯的环形链表中\",{\"1\":{\"658\":1}}],[\"把所有元素rehash之后再放在扩容后的容器中\",{\"1\":{\"173\":1}}],[\"把最常访问的⼏个⻚表项存储到访问速度更快的硬件\",{\"1\":{\"655\":1}}],[\"把内存分成了两个区域\",{\"1\":{\"632\":1}}],[\"把旧表的结构完全复制过去\",{\"1\":{\"537\":1}}],[\"把对数据的读切换到新库\",{\"1\":{\"532\":1}}],[\"把对应用户的哪一行数据锁住\",{\"1\":{\"225\":1}}],[\"把差异补齐\",{\"1\":{\"532\":1}}],[\"把column<>\",{\"1\":{\"489\":1}}],[\"把这个值加上\",{\"1\":{\"481\":1}}],[\"把这些小任务放到不同的队列里\",{\"1\":{\"373\":1}}],[\"把b查询上来\",{\"1\":{\"442\":1}}],[\"把线程\",{\"1\":{\"414\":1}}],[\"把一个空对象或者默认值保存到缓存\",{\"1\":{\"703\":1}}],[\"把一个\",{\"1\":{\"408\":1}}],[\"把回收集中\",{\"1\":{\"404\":1}}],[\"把连续的\",{\"1\":{\"404\":1}}],[\"把\",{\"1\":{\"381\":1,\"400\":1,\"510\":1,\"566\":1,\"633\":1,\"640\":1,\"767\":1,\"800\":2}}],[\"把任务放入队列\",{\"1\":{\"370\":1}}],[\"把任务提交给线程池运行\",{\"1\":{\"370\":1}}],[\"把任务添加到linkedblockingqueue阻塞队列\",{\"1\":{\"363\":1}}],[\"把元素放到空的槽中\",{\"1\":{\"313\":1}}],[\"把构成问题的事务分解成各个对象\",{\"1\":{\"247\":1}}],[\"把数据库层的二阶段提交交给应用层来实现\",{\"1\":{\"204\":1}}],[\"把冲突的元素放进去\",{\"1\":{\"171\":2}}],[\"导出和重发的功能\",{\"1\":{\"766\":1}}],[\"导出堆内存文件快照\",{\"1\":{\"415\":1}}],[\"导出订单信息\",{\"1\":{\"413\":1}}],[\"导出\",{\"1\":{\"410\":1}}],[\"导致下游服务的负载急剧增加\",{\"1\":{\"853\":1}}],[\"导致\",{\"1\":{\"813\":1}}],[\"导致延迟比较高\",{\"1\":{\"741\":1}}],[\"导致服务之间是不连通的\",{\"1\":{\"770\":1}}],[\"导致服务\",{\"1\":{\"720\":1}}],[\"导致服务端以为有错误发生\",{\"1\":{\"578\":1}}],[\"导致大量写操作慢查询\",{\"1\":{\"718\":1}}],[\"导致大对象进入了老年代\",{\"1\":{\"417\":1}}],[\"导致阻塞\",{\"1\":{\"718\":1}}],[\"导致键值分布到更多的\",{\"1\":{\"713\":1}}],[\"导致所有的请求直接打在db上\",{\"1\":{\"702\":1}}],[\"导致更多的超时出现\",{\"1\":{\"591\":1}}],[\"导致不可预料的异常发生\",{\"1\":{\"578\":1}}],[\"导致没有时间陪女朋友\",{\"1\":{\"574\":1}}],[\"导致资源的浪费\",{\"1\":{\"569\":1}}],[\"导致资源浪费\",{\"1\":{\"172\":1}}],[\"导致的\",{\"1\":{\"538\":1}}],[\"导致还是其他原因\",{\"1\":{\"538\":1}}],[\"导致实际数据库中id=2这一行的数据并没有更新\",{\"1\":{\"482\":1}}],[\"导致当使用\",{\"1\":{\"482\":1}}],[\"导致事务需要回滚\",{\"1\":{\"479\":1}}],[\"导致其它查询和更新都会被阻塞\",{\"1\":{\"477\":1}}],[\"导致数据库移植性差\",{\"1\":{\"433\":1}}],[\"导致数据库无法使用\",{\"1\":{\"202\":1}}],[\"导致这一段时间内这些对象都无法被回收\",{\"1\":{\"413\":1}}],[\"导致性能降低\",{\"1\":{\"405\":1}}],[\"导致用户程序性能下降\",{\"1\":{\"405\":1}}],[\"导致标记和清除两个过程的执行效率都随对象数量增长而降低\",{\"1\":{\"395\":1}}],[\"导致内存泄漏\",{\"1\":{\"389\":1}}],[\"导致内存被白白占用\",{\"1\":{\"387\":1}}],[\"导致机器内存使用不停飙升\",{\"1\":{\"365\":1}}],[\"导致oom\",{\"1\":{\"364\":1}}],[\"导航\",{\"0\":{\"62\":1},\"1\":{\"59\":1}}],[\"出参和执行时间\",{\"1\":{\"805\":1}}],[\"出来之后\",{\"1\":{\"408\":1}}],[\"出于权限控制的考虑\",{\"1\":{\"632\":1}}],[\"出于提高吞吐量的考虑采用parallel\",{\"1\":{\"406\":1}}],[\"出于效率的考虑\",{\"1\":{\"156\":1}}],[\"出现短暂服务暂停现象\",{\"1\":{\"720\":1}}],[\"出现磁盘存储的碎片化\",{\"1\":{\"497\":1}}],[\"出现线程死锁以后\",{\"1\":{\"343\":1}}],[\"出现节点个数的概率是递减的\",{\"1\":{\"172\":1}}],[\"牺牲了空间换时间\",{\"1\":{\"172\":1}}],[\"直\",{\"1\":{\"717\":1}}],[\"直呼\",{\"1\":{\"621\":1}}],[\"直译为快速\",{\"1\":{\"559\":1}}],[\"直达对象开始遍历整个对象图\",{\"1\":{\"403\":1}}],[\"直至目标主机\",{\"1\":{\"602\":1}}],[\"直至占有资源的线程释放该资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"直至找到空闲的位置\",{\"1\":{\"171\":1}}],[\"直至找到空闲位置\",{\"1\":{\"171\":1}}],[\"直到配置发生变化或达到一定的超时时间\",{\"1\":{\"843\":1}}],[\"直到指令执行完毕\",{\"1\":{\"736\":1}}],[\"直到最后一条命令执行完成\",{\"1\":{\"726\":1}}],[\"直到最后一个线程到达屏障时\",{\"1\":{\"346\":1}}],[\"直到事务命令全部执行完毕才会执行其他客户端的命令\",{\"1\":{\"724\":1}}],[\"直到list中有值或者超时\",{\"1\":{\"722\":1}}],[\"直到写入完成\",{\"1\":{\"718\":1}}],[\"直到腾出足够空间为止\",{\"1\":{\"717\":3}}],[\"直到rdb过程完成为止\",{\"1\":{\"676\":1}}],[\"直到数据准备好\",{\"1\":{\"663\":1}}],[\"直到满⾜上⾯的发送条件\",{\"1\":{\"584\":1}}],[\"直到\",{\"1\":{\"582\":1,\"584\":1}}],[\"直到次数限制\",{\"1\":{\"570\":1}}],[\"直到发送成功为止\",{\"1\":{\"591\":1}}],[\"直到发送次数超过最大重传次数限制\",{\"1\":{\"570\":1}}],[\"直到发送了\",{\"1\":{\"560\":1}}],[\"直到版本链中的最后一个版本\",{\"1\":{\"523\":1}}],[\"直到它们被提交\",{\"1\":{\"519\":1}}],[\"直到拥有\",{\"1\":{\"513\":1}}],[\"直到处理完所有的表为止\",{\"1\":{\"470\":1}}],[\"直到垃圾收集结束\",{\"1\":{\"401\":1}}],[\"直到计数器为0\",{\"1\":{\"347\":1}}],[\"直到计数器清零\",{\"1\":{\"326\":1}}],[\"直到其他线程都到达\",{\"1\":{\"346\":1}}],[\"直到清零释放锁\",{\"1\":{\"326\":1}}],[\"直到提交完成\",{\"1\":{\"202\":1}}],[\"直接从缓存中获取\",{\"1\":{\"858\":1}}],[\"直接用反射方式生成一个目标对象的代理对象\",{\"1\":{\"806\":1}}],[\"直接用创建若干个成员变量代替\",{\"1\":{\"408\":1}}],[\"直接编码方式\",{\"1\":{\"794\":2}}],[\"直接全部流量照单全收肯定有问题啊\",{\"1\":{\"740\":1}}],[\"直接写个缓存刷新页面或者接口\",{\"1\":{\"711\":1}}],[\"直接删除缓存的key即可\",{\"1\":{\"709\":1}}],[\"直接让人有点yue\",{\"1\":{\"621\":1}}],[\"直接通过\",{\"1\":{\"612\":1}}],[\"直接对现有的数据和服务造成影响\",{\"1\":{\"611\":1}}],[\"直接把系统干垮\",{\"1\":{\"799\":1}}],[\"直接把\",{\"1\":{\"566\":1}}],[\"直接把以往的\",{\"1\":{\"559\":1}}],[\"直接根据name\",{\"1\":{\"510\":1}}],[\"直接根据key来映射到对应的数组位置\",{\"1\":{\"170\":1}}],[\"直接在\",{\"1\":{\"493\":1}}],[\"直接在数据库上加锁的做法性能不够友好\",{\"1\":{\"225\":1}}],[\"直接提交不行吗\",{\"1\":{\"482\":1}}],[\"直接使用sql语句操作数据库\",{\"1\":{\"434\":1}}],[\"直接抛出异常\",{\"1\":{\"355\":1}}],[\"直接去找小姐姐办理业务\",{\"1\":{\"353\":1}}],[\"直接进入就诊\",{\"1\":{\"325\":1}}],[\"直接\",{\"1\":{\"276\":1}}],[\"直接调用hashmap的put方法\",{\"1\":{\"186\":2}}],[\"直接定址法\",{\"1\":{\"170\":1}}],[\"直接返回错误信息\",{\"1\":{\"473\":1}}],[\"直接返回字符串常量池中的字符串\",{\"1\":{\"267\":1}}],[\"直接返回\",{\"1\":{\"165\":1,\"243\":1}}],[\"直接插入或者删除就可以了\",{\"1\":{\"154\":1}}],[\"直接创建就好了\",{\"1\":{\"110\":1}}],[\"线上环境不建议使用\",{\"1\":{\"676\":1}}],[\"线上服务会停顿\",{\"1\":{\"736\":1}}],[\"线上服务\",{\"0\":{\"414\":1}}],[\"线程数\",{\"1\":{\"859\":1}}],[\"线程数适当大一点\",{\"1\":{\"359\":1}}],[\"线程安全问题怎么解决呢\",{\"1\":{\"798\":1}}],[\"线程安全地更新一个变量的方式\",{\"1\":{\"340\":1}}],[\"线程处理连接\",{\"1\":{\"672\":1}}],[\"线程维护多个socket\",{\"1\":{\"664\":1}}],[\"线程会被阻塞\",{\"1\":{\"663\":1}}],[\"线程进⼊阻塞等待\",{\"1\":{\"645\":1}}],[\"线程间如何同步\",{\"0\":{\"645\":1}}],[\"线程间有哪些通信方式\",{\"0\":{\"306\":1}}],[\"线程的上下⽂切换相⽐进程\",{\"1\":{\"643\":1}}],[\"线程的信息\",{\"1\":{\"418\":1}}],[\"线程上下文传递和消息中间件传递\",{\"1\":{\"873\":1}}],[\"线程上下文切换了解吗\",{\"0\":{\"643\":1}}],[\"线程上下文类加载器\",{\"1\":{\"427\":1}}],[\"线程能减少并发执⾏的时间和空间开销\",{\"1\":{\"642\":1}}],[\"线程同样具有就绪\",{\"1\":{\"642\":1}}],[\"线程同步本身是一个相对耗时的过程\",{\"1\":{\"408\":1}}],[\"线程与进程的⽐较如下\",{\"1\":{\"642\":1}}],[\"线程和进程的联系\",{\"1\":{\"642\":1}}],[\"线程读取\",{\"1\":{\"527\":1}}],[\"线程接收\",{\"1\":{\"527\":1}}],[\"线程向\",{\"1\":{\"527\":1}}],[\"线程栈分析可使用\",{\"1\":{\"418\":1}}],[\"线程持有的锁\",{\"1\":{\"385\":1}}],[\"线程把这个修改time之后的scheduledfuturetask放回delayqueue中\",{\"1\":{\"365\":1}}],[\"线程修改scheduledfuturetask的time变量为下次将要被执行的时间\",{\"1\":{\"365\":1}}],[\"线程执行这个scheduledfuturetask\",{\"1\":{\"365\":1}}],[\"线程从delayqueue中获取已到期的scheduledfuturetask\",{\"1\":{\"365\":1}}],[\"线程工厂\",{\"1\":{\"353\":1}}],[\"线程核心参数选择了cpu数×2\",{\"1\":{\"352\":1}}],[\"线程用完\",{\"1\":{\"351\":1}}],[\"线程池隔离\",{\"1\":{\"858\":1}}],[\"线程池实现原理可以查看\",{\"1\":{\"370\":1}}],[\"线程池配置没有固定的公式\",{\"1\":{\"369\":1}}],[\"线程池调优了解吗\",{\"0\":{\"369\":1}}],[\"线程池提供了几个\",{\"1\":{\"368\":1}}],[\"线程池提交execute和submit有什么区别\",{\"0\":{\"357\":1}}],[\"线程池如何实现参数的动态修改\",{\"0\":{\"368\":1}}],[\"线程池中有n个工作线程\",{\"1\":{\"370\":1}}],[\"线程池中执行的任务为空\",{\"1\":{\"367\":1}}],[\"线程池中非核心线程保持存活的时间的单位\",{\"1\":{\"354\":1}}],[\"线程池各个状态切换图\",{\"1\":{\"367\":1}}],[\"线程池状态\",{\"1\":{\"367\":1}}],[\"线程池可能捕获它\",{\"1\":{\"366\":1}}],[\"线程池异常怎么处理知道吗\",{\"0\":{\"366\":1}}],[\"线程池是否有一条线程在\",{\"1\":{\"362\":1}}],[\"线程池特点\",{\"1\":{\"362\":1,\"363\":1,\"364\":1,\"365\":1}}],[\"线程池不是越大越好也不是越小越好\",{\"1\":{\"359\":1}}],[\"线程池怎么关闭知道吗\",{\"0\":{\"358\":1}}],[\"线程池有这几个状态\",{\"1\":{\"367\":1}}],[\"线程池有哪几种工作队列\",{\"0\":{\"356\":1}}],[\"线程池有七大参数\",{\"1\":{\"354\":1}}],[\"线程池主要参数有哪些\",{\"0\":{\"354\":1}}],[\"线程池会返回一个future类型的对象\",{\"1\":{\"357\":1}}],[\"线程池会判断\",{\"1\":{\"353\":1}}],[\"线程池会做如下判断\",{\"1\":{\"353\":1}}],[\"线程池也不会马上执行它们\",{\"1\":{\"353\":1}}],[\"线程池刚创建时\",{\"1\":{\"353\":1}}],[\"线程池的线程数应该怎么配置\",{\"0\":{\"359\":1}}],[\"线程池的拒绝策略有哪些\",{\"0\":{\"355\":1}}],[\"线程池的大致流程类似\",{\"1\":{\"353\":1}}],[\"线程池的参数如下\",{\"1\":{\"352\":1}}],[\"线程池等待队列\",{\"1\":{\"352\":1,\"354\":1}}],[\"线程池\",{\"0\":{\"350\":1},\"1\":{\"351\":1}}],[\"线程己经持有了至少一个资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"线程死锁了解吗\",{\"0\":{\"342\":1}}],[\"线程直接进入队列中排队\",{\"1\":{\"332\":1}}],[\"线程解锁前\",{\"1\":{\"326\":1}}],[\"线程加锁后\",{\"1\":{\"326\":1}}],[\"线程加锁前\",{\"1\":{\"326\":1}}],[\"线程之间的共享变量存储在主内存\",{\"1\":{\"317\":1}}],[\"线程可以在任何地方使用localvariable\",{\"1\":{\"308\":1}}],[\"线程thread除了提供join\",{\"1\":{\"306\":1}}],[\"线程在java中属于稀缺资源\",{\"1\":{\"359\":1}}],[\"线程在写入变量时不会把值缓存在寄存器或者其他地方\",{\"1\":{\"322\":1}}],[\"线程在任何地方读取的都是它写入的变量\",{\"1\":{\"308\":1}}],[\"线程在时间片内占用\",{\"1\":{\"304\":1}}],[\"线程在自身的生命周期中\",{\"1\":{\"303\":1}}],[\"线程被创建\",{\"1\":{\"303\":1}}],[\"线程共有六种状态\",{\"1\":{\"303\":1}}],[\"线程有哪些实现方式\",{\"0\":{\"644\":1}}],[\"线程有哪些常用的调度方法\",{\"0\":{\"302\":1}}],[\"线程有几种状态\",{\"0\":{\"303\":1}}],[\"线程b读取x的时候\",{\"1\":{\"322\":1}}],[\"线程b可以调用线程interrupt\",{\"1\":{\"302\":1}}],[\"线程b对集合对象的内容进行了修改\",{\"1\":{\"157\":1}}],[\"线程中断\",{\"1\":{\"302\":1}}],[\"线程休眠\",{\"1\":{\"302\":1}}],[\"线程a修改x=1\",{\"1\":{\"322\":1}}],[\"线程a实际并没有被中断\",{\"1\":{\"302\":1}}],[\"线程a会暂时让出指定时间的执行权\",{\"1\":{\"302\":1}}],[\"线程a会被阻塞挂起\",{\"1\":{\"302\":1}}],[\"线程a抛出interruptedexception异常返回\",{\"1\":{\"302\":1}}],[\"线程a调用了共享对象\",{\"1\":{\"302\":1}}],[\"线程等待与通知\",{\"1\":{\"302\":1}}],[\"线程是\",{\"1\":{\"642\":1}}],[\"线程是进程当中的⼀条执⾏流程\",{\"1\":{\"642\":1,\"645\":1}}],[\"线程是进程的一个执行路径\",{\"1\":{\"299\":1}}],[\"线程是cpu分配的最小单位\",{\"1\":{\"298\":1}}],[\"线程\",{\"1\":{\"177\":2,\"299\":1,\"305\":2,\"345\":1,\"645\":1,\"664\":2}}],[\"线行探查法\",{\"1\":{\"171\":1}}],[\"解耦\",{\"1\":{\"740\":2}}],[\"解密之后就得到客户端的密钥\",{\"1\":{\"563\":1}}],[\"解决问题\",{\"1\":{\"806\":2}}],[\"解决问题的要点在于\",{\"1\":{\"712\":1}}],[\"解决用户问题\",{\"1\":{\"806\":1}}],[\"解决的方式就是发布\",{\"1\":{\"743\":1}}],[\"解决的两大问题\",{\"1\":{\"504\":1}}],[\"解决\",{\"0\":{\"712\":1}}],[\"解决方案是延时双删\",{\"1\":{\"708\":1}}],[\"解决方法\",{\"1\":{\"489\":1}}],[\"解决⽅案\",{\"1\":{\"702\":1}}],[\"解决了哪些问题\",{\"0\":{\"562\":1}}],[\"解决了这个问题\",{\"1\":{\"489\":1}}],[\"解决主从复制延迟有几种常见的方法\",{\"1\":{\"528\":1}}],[\"解决哈希冲突有哪些方法呢\",{\"0\":{\"171\":1}}],[\"解析成sql语句时候\",{\"1\":{\"440\":1}}],[\"解析三个部分统称为连接\",{\"1\":{\"421\":1}}],[\"解析\",{\"1\":{\"421\":1,\"546\":2}}],[\"解析和初始化过\",{\"1\":{\"382\":1}}],[\"解析出用户的基本信息\",{\"1\":{\"309\":1}}],[\"解锁操作\",{\"1\":{\"332\":1}}],[\"解锁操作连接在一起\",{\"1\":{\"327\":1}}],[\"解释成操作系统能识别的机器码\",{\"1\":{\"236\":1}}],[\"解释\",{\"1\":{\"235\":1}}],[\"解释命令\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行\",{\"1\":{\"236\":1}}],[\"解释型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"折叠法\",{\"1\":{\"170\":1}}],[\"折叠时图片\",{\"1\":{\"76\":1}}],[\"作用范围\",{\"1\":{\"451\":1}}],[\"作用于当前对象实例加锁\",{\"1\":{\"324\":1}}],[\"作为微服务架构的入口\",{\"1\":{\"832\":1}}],[\"作为参数\",{\"1\":{\"784\":1}}],[\"作为消费消息的索引\",{\"1\":{\"771\":1}}],[\"作为消息队列\",{\"1\":{\"769\":1}}],[\"作为服务发现来说就应该是为可用性而设计\",{\"1\":{\"770\":1}}],[\"作为分布式系统\",{\"1\":{\"769\":1}}],[\"作为排序的依据\",{\"1\":{\"670\":1}}],[\"作为接替\",{\"1\":{\"605\":1}}],[\"作为可靠传输的保证\",{\"1\":{\"598\":1}}],[\"作为发送的单位\",{\"1\":{\"581\":1}}],[\"作为传输层进行通信\",{\"1\":{\"559\":1}}],[\"作为路由的条件\",{\"1\":{\"531\":1}}],[\"作为索引\",{\"1\":{\"497\":1}}],[\"作为联合主键\",{\"1\":{\"460\":1}}],[\"作为\",{\"1\":{\"457\":1,\"566\":1,\"796\":1,\"815\":1}}],[\"作为会话工厂构建的重要参数\",{\"1\":{\"448\":1}}],[\"作为当前国内最流行的orm框架\",{\"1\":{\"431\":1}}],[\"作为方法区这个类的各种数据的访问入口\",{\"1\":{\"422\":1}}],[\"作为初始的存活对象合集\",{\"1\":{\"390\":1}}],[\"作为一条\",{\"1\":{\"334\":1}}],[\"作为该锁的锁记录\",{\"1\":{\"329\":1}}],[\"作为解决空指针异常的一种方式\",{\"1\":{\"291\":1}}],[\"作为异常处理的一部分\",{\"1\":{\"256\":1}}],[\"作为映射的位置\",{\"1\":{\"170\":1}}],[\"作者会持续维护和更新这个册子\",{\"1\":{\"622\":1}}],[\"作者拿人的一生\",{\"1\":{\"621\":1}}],[\"作者还喜欢用一些有意思的比喻去讲解技术\",{\"1\":{\"621\":1}}],[\"作者经常是三十问\",{\"1\":{\"621\":1}}],[\"作者面试过很多次\",{\"1\":{\"621\":1}}],[\"作者\",{\"1\":{\"5\":1,\"150\":1,\"186\":1,\"188\":1,\"227\":1,\"229\":1,\"291\":1,\"294\":1,\"296\":1,\"373\":1,\"375\":1,\"429\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"例如返回缓存数据\",{\"1\":{\"858\":1}}],[\"例如替换耗时操作\",{\"1\":{\"856\":1}}],[\"例如数据库连接地址\",{\"1\":{\"840\":1}}],[\"例如日志收集\",{\"1\":{\"750\":1}}],[\"例如用户视频上传后通知启动转码服务\",{\"1\":{\"750\":1}}],[\"例如用户表\",{\"1\":{\"460\":1}}],[\"例如重要通知邮件\",{\"1\":{\"750\":1}}],[\"例如consumerqueue\",{\"1\":{\"744\":1}}],[\"例如秒杀系统\",{\"1\":{\"740\":1}}],[\"例如查找\",{\"1\":{\"732\":1}}],[\"例如中间出现的\",{\"1\":{\"730\":1}}],[\"例如客户端使用长连\",{\"1\":{\"713\":1}}],[\"例如优化操作语句等\",{\"1\":{\"713\":1}}],[\"例如复杂的\",{\"1\":{\"712\":1}}],[\"例如一个热门的娱乐新闻\",{\"1\":{\"712\":1}}],[\"例如一张表\",{\"1\":{\"510\":1}}],[\"例如在字符串拼接的时候\",{\"1\":{\"730\":1}}],[\"例如在客户端设置全局字典\",{\"1\":{\"710\":1}}],[\"例如在验证用户登录时判定用户名不是\",{\"1\":{\"241\":1}}],[\"例如缓存服务宕机\",{\"1\":{\"704\":1}}],[\"例如过期时间设置为5分钟\",{\"1\":{\"703\":1}}],[\"例如下面一个集群\",{\"1\":{\"699\":1}}],[\"例如槽\",{\"1\":{\"695\":1}}],[\"例如清理脏数据\",{\"1\":{\"673\":1}}],[\"例如epoll方式是将用户socket对应的fd注册进epoll\",{\"1\":{\"672\":1}}],[\"例如json\",{\"1\":{\"670\":1}}],[\"例如锁\",{\"1\":{\"648\":1}}],[\"例如互斥量是0无锁\",{\"1\":{\"645\":1}}],[\"例如有两个进程a和b\",{\"1\":{\"635\":1}}],[\"例如有一个lock节点\",{\"1\":{\"197\":1}}],[\"例如计算机首选\",{\"1\":{\"612\":1}}],[\"例如⼏个字节\",{\"1\":{\"584\":1}}],[\"例如select\",{\"1\":{\"513\":3}}],[\"例如身份证\",{\"1\":{\"497\":1}}],[\"例如性别\",{\"1\":{\"497\":1}}],[\"例如从基本使用使用的角度来讲\",{\"1\":{\"495\":1}}],[\"例如对于如下查询\",{\"1\":{\"489\":1}}],[\"例如订单表\",{\"1\":{\"460\":1}}],[\"例如订单表里\",{\"1\":{\"460\":1}}],[\"例如集合\",{\"1\":{\"458\":1}}],[\"例如代码热替换\",{\"1\":{\"427\":1}}],[\"例如类\",{\"1\":{\"425\":1}}],[\"例如接口超时报警等\",{\"1\":{\"418\":1}}],[\"例如赋值给可以在其它线程中访问的实例变量\",{\"1\":{\"408\":1}}],[\"例如运行应用的基础设施如何\",{\"1\":{\"407\":1}}],[\"例如newfixedthreadpool使用了无界的阻塞队列linkedblockingqueue\",{\"1\":{\"365\":1}}],[\"例如atomicinteger\",{\"1\":{\"339\":1}}],[\"例如我们比较熟悉的\",{\"1\":{\"427\":1}}],[\"例如我们常见的\",{\"1\":{\"287\":1}}],[\"例如我们熟悉的rocketmq就支持事务消息\",{\"1\":{\"206\":1}}],[\"例如这段代码\",{\"1\":{\"285\":1}}],[\"例如现在有一个\",{\"1\":{\"260\":1}}],[\"例如消息消费中\",{\"1\":{\"225\":1}}],[\"例如version\",{\"1\":{\"225\":1}}],[\"例如\",{\"1\":{\"205\":1,\"245\":1,\"255\":1,\"258\":1,\"266\":1,\"302\":1,\"322\":1,\"345\":1,\"379\":1,\"381\":2,\"418\":1,\"465\":1,\"472\":1,\"488\":3,\"489\":1,\"491\":1,\"507\":1,\"526\":1,\"528\":3,\"531\":3,\"554\":1,\"594\":1,\"597\":2,\"776\":1,\"819\":1}}],[\"例如十位和百位\",{\"1\":{\"170\":1}}],[\"例如1232放到下标1232的位置\",{\"1\":{\"170\":1}}],[\"还没有被创建出来\",{\"1\":{\"800\":1}}],[\"还没有收到\",{\"1\":{\"592\":1}}],[\"还通过其他的接口扩展了\",{\"1\":{\"791\":1}}],[\"还飞速倒车\",{\"1\":{\"588\":1}}],[\"还需要命令其他从节点去复制新的主节点\",{\"1\":{\"686\":1}}],[\"还需要存储到数据库中\",{\"1\":{\"348\":1}}],[\"还需设置一个慢启动阀值\",{\"1\":{\"586\":1}}],[\"还需进⾏\",{\"1\":{\"561\":1}}],[\"还提供了资源访问的方式\",{\"1\":{\"557\":1}}],[\"还提供了join\",{\"1\":{\"306\":1}}],[\"还比较有意思\",{\"1\":{\"551\":1}}],[\"还要经历用户态\",{\"1\":{\"773\":1}}],[\"还要再锁住索引之间的间隙\",{\"1\":{\"513\":1}}],[\"还要记录相应的日志\",{\"1\":{\"481\":1}}],[\"还要做最后一次审计\",{\"1\":{\"393\":1}}],[\"还会导致页分裂\",{\"1\":{\"497\":1}}],[\"还会生成对应的\",{\"1\":{\"479\":1}}],[\"还会通过\",{\"1\":{\"265\":1}}],[\"还包括某张表\",{\"1\":{\"458\":1}}],[\"还支持多对多\",{\"1\":{\"441\":1}}],[\"还额外有cas操作的开销\",{\"1\":{\"327\":1}}],[\"还能拿到标记的值\",{\"1\":{\"287\":1}}],[\"还是要考虑到服务拆分后可能带来的一些挑战和问题\",{\"1\":{\"829\":1}}],[\"还是比较快捷的\",{\"1\":{\"805\":1}}],[\"还是一个元注解\",{\"1\":{\"784\":1}}],[\"还是很快的\",{\"1\":{\"758\":1}}],[\"还是分布式的\",{\"1\":{\"742\":1}}],[\"还是轻一点的线程模型\",{\"1\":{\"664\":1}}],[\"还是⾮阻塞\",{\"1\":{\"663\":1}}],[\"还是重传\",{\"1\":{\"592\":1}}],[\"还是重传所有的问题\",{\"1\":{\"592\":1}}],[\"还是没有收到\",{\"1\":{\"592\":1}}],[\"还是自增\",{\"1\":{\"534\":1}}],[\"还是自己定义的\",{\"1\":{\"385\":1}}],[\"还是利用<association>和<collection>\",{\"1\":{\"441\":1}}],[\"还是\",{\"1\":{\"282\":1,\"777\":1,\"796\":1,\"813\":1,\"824\":1}}],[\"还是引用传递\",{\"0\":{\"259\":1}}],[\"还是相当于比较内存地址\",{\"1\":{\"257\":1}}],[\"还得注意的是\",{\"1\":{\"255\":1}}],[\"还可以采用mysql等关系型数据库\",{\"1\":{\"842\":1}}],[\"还可以根据请求类型使用不同的注解\",{\"1\":{\"784\":1}}],[\"还可以避免\",{\"1\":{\"678\":1}}],[\"还可以当作学习指南\",{\"1\":{\"620\":1}}],[\"还可以通过邮箱确认\",{\"1\":{\"613\":1}}],[\"还可以使用长连接的方式来减少\",{\"1\":{\"579\":1}}],[\"还可以忍受\",{\"1\":{\"528\":1}}],[\"还可以说\",{\"1\":{\"406\":1}}],[\"还可以存活60秒\",{\"1\":{\"364\":1}}],[\"还可以用tryacquire\",{\"1\":{\"348\":1}}],[\"还可以利用图形化工具\",{\"1\":{\"343\":1}}],[\"还可以更加简洁\",{\"1\":{\"292\":1}}],[\"还可以是字符串\",{\"1\":{\"242\":1}}],[\"还可以节省内存空间\",{\"1\":{\"156\":1}}],[\"还摒弃了\",{\"1\":{\"231\":1}}],[\"还有可视化的配置管理界面\",{\"1\":{\"841\":1}}],[\"还有可以适当的冗余一些字段\",{\"1\":{\"534\":1}}],[\"还有工厂销售上门签的\",{\"1\":{\"788\":1}}],[\"还有最重要的一点\",{\"1\":{\"788\":1}}],[\"还有带过期时间的\",{\"1\":{\"731\":1}}],[\"还有保证自身正常运行的健壮性管理\",{\"1\":{\"629\":1}}],[\"还有保存或者更新对应的索引文件\",{\"1\":{\"500\":1}}],[\"还有另外⼀种快速重传\",{\"1\":{\"592\":1}}],[\"还有两个原⼦操作的系统调⽤函数来控制信号量的\",{\"1\":{\"645\":1}}],[\"还有两个\",{\"1\":{\"479\":1}}],[\"还有其它的一些重要的类对象\",{\"1\":{\"448\":1}}],[\"还有其它的一些流式操作\",{\"1\":{\"294\":1}}],[\"还有更轻量级的选择\",{\"1\":{\"340\":1}}],[\"还有一个保活计时器\",{\"1\":{\"577\":1}}],[\"还有一种情况\",{\"1\":{\"708\":1}}],[\"还有一种情况是已经失效的客户端发出的请求信息\",{\"1\":{\"569\":1}}],[\"还有一种方式就是数据异构\",{\"1\":{\"534\":1}}],[\"还有一种系统自动抛异常\",{\"1\":{\"275\":1}}],[\"还有一些其它的方案比如fluentd\",{\"1\":{\"877\":1}}],[\"还有一些第三方的工具\",{\"1\":{\"411\":1}}],[\"还有一些常见的解决冲突的办法\",{\"1\":{\"171\":1}}],[\"还有编译器\",{\"1\":{\"233\":1}}],[\"还有\",{\"1\":{\"183\":1,\"292\":1,\"589\":1,\"621\":1}}],[\"还有这几种常见的哈希函数构造方法\",{\"1\":{\"170\":1}}],[\"除时间等待计时器外\",{\"1\":{\"577\":1}}],[\"除非确实需要服务器去重\",{\"1\":{\"492\":1}}],[\"除非发生被中断\",{\"1\":{\"346\":1}}],[\"除非整个网络环境都发生了故障\",{\"1\":{\"190\":1}}],[\"除了应用最广泛的elk\",{\"1\":{\"877\":1}}],[\"除了排查问题\",{\"1\":{\"867\":1}}],[\"除了最核心的spring\",{\"1\":{\"783\":1}}],[\"除了更新订单状态\",{\"1\":{\"740\":1}}],[\"除了\",{\"1\":{\"731\":1}}],[\"除了缓存空对象\",{\"1\":{\"703\":1}}],[\"除了上述作用以外\",{\"1\":{\"682\":1}}],[\"除了上述功能以外\",{\"1\":{\"668\":1}}],[\"除了主线程外\",{\"1\":{\"673\":1}}],[\"除了顶级页表\",{\"1\":{\"654\":1}}],[\"除了需要校验用户的认证信息\",{\"1\":{\"613\":1}}],[\"除了提供了资源的标识\",{\"1\":{\"557\":1}}],[\"除了返回结果没有其他多余的动作\",{\"1\":{\"553\":1}}],[\"除了优化慢\",{\"1\":{\"493\":1}}],[\"除了本事务的\",{\"1\":{\"483\":1}}],[\"除了数据查询语句\",{\"1\":{\"479\":1}}],[\"除了程序计数器外\",{\"1\":{\"388\":1}}],[\"除了互斥量本身开销\",{\"1\":{\"327\":1}}],[\"除了原子性\",{\"0\":{\"326\":1}}],[\"除了这两个之外\",{\"1\":{\"292\":1}}],[\"除了基本类型\",{\"1\":{\"263\":1}}],[\"除了目的\",{\"1\":{\"186\":1,\"227\":1,\"294\":2,\"373\":2,\"429\":2,\"454\":2,\"538\":2,\"617\":2,\"664\":1,\"736\":2,\"778\":2,\"824\":2,\"877\":1}}],[\"除此之外\",{\"1\":{\"170\":1,\"171\":1,\"318\":1,\"408\":1,\"411\":1,\"513\":1,\"629\":1,\"678\":1}}],[\"除留取余法\",{\"1\":{\"170\":1}}],[\"|适用于构建面向服务的微服务架构\",{\"1\":{\"846\":1}}],[\"|拥有完整的生态系统\",{\"1\":{\"846\":1}}],[\"|提供服务注册与发现\",{\"1\":{\"846\":1}}],[\"|通过zookeeper\",{\"1\":{\"846\":1}}],[\"|基于rpc协议\",{\"1\":{\"846\":1}}],[\"|基于方法调用模型\",{\"1\":{\"845\":1}}],[\"|dubbo是一个分布式服务框架\",{\"1\":{\"846\":1}}],[\"|feign|dubbo|\",{\"1\":{\"846\":1}}],[\"|更加高效\",{\"1\":{\"845\":1}}],[\"|支持跨语言通信\",{\"1\":{\"845\":1,\"846\":1}}],[\"|使用idl\",{\"1\":{\"845\":1}}],[\"|可以使用各种数据格式\",{\"1\":{\"845\":1}}],[\"|可以使用多种传输协议\",{\"1\":{\"845\":1}}],[\"|rpc\",{\"1\":{\"845\":1}}],[\"|rtt\",{\"1\":{\"591\":1}}],[\"|\",{\"1\":{\"241\":1,\"415\":1,\"417\":1,\"677\":4,\"788\":2,\"845\":11,\"846\":10}}],[\"|=\",{\"1\":{\"169\":5}}],[\"||\",{\"1\":{\"164\":1,\"181\":5,\"186\":1,\"241\":1,\"450\":1,\"762\":2}}],[\"阀值\",{\"1\":{\"169\":1}}],[\"传输协议|基于tcp协议\",{\"1\":{\"845\":1}}],[\"传输时\",{\"1\":{\"600\":1}}],[\"传输效率低问题\",{\"1\":{\"584\":1}}],[\"传输\",{\"1\":{\"576\":1}}],[\"传输层协议负责提供进程间的逻辑通信\",{\"1\":{\"602\":1}}],[\"传输层协议和网络层协议有什么区别\",{\"1\":{\"602\":1}}],[\"传输层协议为不同主机上运行的进程提供逻辑通信\",{\"1\":{\"542\":1}}],[\"传输层基于\",{\"1\":{\"559\":1}}],[\"传输层收到这个数据单元后\",{\"1\":{\"544\":1}}],[\"传输层\",{\"1\":{\"542\":2}}],[\"传向下一个目的地\",{\"1\":{\"544\":1}}],[\"传统的查询方法\",{\"1\":{\"496\":1}}],[\"传递数据需要额外的网络开销和序列化开销\",{\"1\":{\"829\":1}}],[\"传递数据的\",{\"1\":{\"554\":1}}],[\"传递的条件\",{\"1\":{\"510\":1}}],[\"传递的参数动态地生成需要执行的\",{\"1\":{\"448\":1}}],[\"传递性\",{\"1\":{\"320\":1}}],[\"传给\",{\"1\":{\"184\":1}}],[\"传的不是2的倍数时\",{\"1\":{\"169\":1}}],[\"传一个17的值\",{\"0\":{\"169\":1}}],[\"传入参数是以字符串传入\",{\"1\":{\"439\":1}}],[\"传入参数为uservo类型\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"传入参数为包含集合属性的pojo\",{\"0\":{\"89\":1}}],[\"传入参数为集合时\",{\"1\":{\"86\":1,\"87\":1,\"88\":1}}],[\"传入service\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"传入的参数为一个pojo\",{\"1\":{\"89\":1}}],[\"传入array类型\",{\"0\":{\"88\":1}}],[\"传入list类型\",{\"0\":{\"87\":1}}],[\"传入map类型\",{\"0\":{\"86\":1}}],[\"将经过处理的日志数据发送到elasticsearch进行存储和索引\",{\"1\":{\"877\":1}}],[\"将日志数据发送到elasticsearch\",{\"1\":{\"877\":1}}],[\"将微服务的日志输出到标准输出\",{\"1\":{\"877\":1}}],[\"将数据恢复到事务开始前的状态\",{\"1\":{\"874\":1}}],[\"将数据分为两部分\",{\"1\":{\"595\":1}}],[\"将追踪数据发送到\",{\"1\":{\"868\":1}}],[\"将追踪信息发送到\",{\"1\":{\"868\":1}}],[\"将自己的信息注册到注册中心\",{\"1\":{\"837\":1}}],[\"将自动把这个\",{\"1\":{\"796\":1}}],[\"将main同级的包下的所有组件注册到容器中\",{\"1\":{\"820\":1}}],[\"将原有的\",{\"1\":{\"819\":1}}],[\"将返回值写入\",{\"1\":{\"817\":1}}],[\"将结果响应给客户端\",{\"1\":{\"816\":1}}],[\"将模型数据填充到视图中\",{\"1\":{\"816\":1}}],[\"将表单数据封装到\",{\"1\":{\"815\":1}}],[\"将表中字段拆到不同的表\",{\"1\":{\"530\":1}}],[\"将事务处理的功能编织到拦截的方法中\",{\"1\":{\"809\":1}}],[\"将需要的可变成员变量保存在\",{\"1\":{\"798\":1}}],[\"将抛出异常\",{\"1\":{\"796\":1}}],[\"将接口实现类通过构造方法变量传入\",{\"1\":{\"795\":1}}],[\"将注解放在参数中前\",{\"1\":{\"784\":1}}],[\"将pull消息的请求对象pullrequest依次放入pullmessageservice服务线程的阻塞队列pullrequestqueue中\",{\"1\":{\"777\":1}}],[\"将映射区的数据写入到磁盘\",{\"1\":{\"774\":1}}],[\"将对文件的操作转化为直接对内存地址进行操作\",{\"1\":{\"772\":1}}],[\"将磁盘文件数据在操作系统内核地址空间的缓冲区\",{\"1\":{\"772\":1}}],[\"将一部分的内存用作pagecache\",{\"1\":{\"772\":1}}],[\"将一个大型应用程序划分为一组小型\",{\"1\":{\"828\":1}}],[\"将一个表中的数据拆分到多个表中\",{\"1\":{\"530\":1}}],[\"将一个库中的数据拆分到多个库中\",{\"1\":{\"529\":1}}],[\"将一个规模为n的问题分解为k个规模较小的子问题\",{\"1\":{\"373\":1}}],[\"将直接返回给消费端\",{\"1\":{\"771\":1}}],[\"将消息到达时执行的回调接口留给用户应用程序来实现\",{\"1\":{\"751\":1}}],[\"将消息推送到mq\",{\"1\":{\"205\":1}}],[\"将沿途访问过的所有层的跨度累计起来\",{\"1\":{\"732\":1}}],[\"将过期时间组合写在value中\",{\"1\":{\"702\":1}}],[\"将整个应用程序作为一个单一的\",{\"1\":{\"828\":1}}],[\"将整个\",{\"1\":{\"694\":1}}],[\"将进入下一次选举\",{\"1\":{\"689\":1}}],[\"将同意该请求\",{\"1\":{\"689\":1}}],[\"将已连接的\",{\"1\":{\"664\":1}}],[\"将已经产生hash碰撞的元素完美的转移到新的table中去\",{\"1\":{\"168\":1}}],[\"将其置换\",{\"1\":{\"658\":1}}],[\"将其用到的成员变量恢复为原始类型来访问\",{\"1\":{\"408\":1}}],[\"将不同的请求映射到不同的\",{\"1\":{\"815\":1}}],[\"将不同的表拆分到不同的库中\",{\"1\":{\"529\":1}}],[\"将不同进程的虚拟地址和不同内存的物理地址映射起来\",{\"1\":{\"651\":1}}],[\"将所有消费端consumer排好序类似页数\",{\"1\":{\"777\":1}}],[\"将所有messagequeue排好序类似于记录\",{\"1\":{\"777\":1}}],[\"将所有就绪进程按\",{\"1\":{\"640\":1}}],[\"将所有sql都添加到批处理中\",{\"1\":{\"451\":1}}],[\"将外存以文件的形式提供出去\",{\"1\":{\"629\":1}}],[\"将伪造的转账请求连同身份认证信息\",{\"1\":{\"613\":1}}],[\"将该数据包和目标机器\",{\"1\":{\"609\":1}}],[\"将得到的目的主机的\",{\"1\":{\"606\":1}}],[\"将发生粘包\",{\"1\":{\"595\":1}}],[\"将多条命令打包成一条一次性发送给服务端\",{\"1\":{\"726\":1}}],[\"将多条命令打包一次性发送给服务端\",{\"1\":{\"726\":1}}],[\"将多次写入缓冲区的数据一次发送出去\",{\"1\":{\"595\":1}}],[\"将多个变量封装成一个对象\",{\"1\":{\"338\":1}}],[\"将多个连续的加锁\",{\"1\":{\"327\":1}}],[\"将丢弃这个报文段和不确认收到此报文段\",{\"1\":{\"581\":1}}],[\"将保持它首部和数据的检验和\",{\"1\":{\"581\":1}}],[\"将请求平均分发到多个实例上\",{\"1\":{\"863\":1}}],[\"将请求路由到相应的后端服务\",{\"1\":{\"863\":1}}],[\"将请求分发到不同的实例上\",{\"1\":{\"834\":1}}],[\"将请求信息放在请求体中\",{\"1\":{\"553\":1}}],[\"将请求发往给本地\",{\"1\":{\"547\":1}}],[\"将域名解析成对应的\",{\"1\":{\"546\":1}}],[\"将网络地址翻译成对应的物理地址\",{\"1\":{\"542\":1}}],[\"将旧库中的历史数据迁移到新库\",{\"1\":{\"532\":1}}],[\"将大大增加主机的读操作压力\",{\"1\":{\"528\":1}}],[\"将读写操作区分开来\",{\"1\":{\"526\":1}}],[\"将读操作发给数据库从机\",{\"1\":{\"525\":1}}],[\"将持久地保存在数据库之中\",{\"1\":{\"518\":1}}],[\"将这些队列设置dropped属性为true\",{\"1\":{\"777\":1}}],[\"将这一部分判断条件下推给存储引擎\",{\"1\":{\"510\":1}}],[\"将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\",{\"1\":{\"422\":1}}],[\"将使用覆盖索引\",{\"1\":{\"493\":1}}],[\"将虚拟表\",{\"1\":{\"470\":1}}],[\"将他们抽取出来作为最基础的组件\",{\"1\":{\"449\":1}}],[\"将sql语句配置在xxxxmapper\",{\"1\":{\"433\":1}}],[\"将程序中的对象自动持久化到关系型数据库中\",{\"1\":{\"433\":1}}],[\"将线程\",{\"1\":{\"418\":1}}],[\"将线程池状态置为stop\",{\"1\":{\"358\":1}}],[\"将线程池状态置为shutdown\",{\"1\":{\"358\":1}}],[\"将可用内存按容量划分为大小相等的两块\",{\"1\":{\"395\":1}}],[\"将会失效\",{\"1\":{\"813\":1}}],[\"将会发生拆包\",{\"1\":{\"595\":1}}],[\"将会发生粘包\",{\"1\":{\"595\":1}}],[\"将会延迟⼀段时间\",{\"1\":{\"584\":1}}],[\"将会逐步晋升到老年代中存放\",{\"1\":{\"394\":1}}],[\"将会看到线程的死锁信息\",{\"1\":{\"343\":1}}],[\"将\",{\"1\":{\"394\":1,\"396\":1,\"428\":1,\"433\":1,\"483\":1,\"645\":2,\"680\":1,\"798\":2,\"816\":1,\"819\":1}}],[\"将字符串常量池\",{\"1\":{\"380\":1}}],[\"将字节码翻译成机器能识别的机器码\",{\"1\":{\"235\":1}}],[\"将任务加到阻塞队列\",{\"1\":{\"362\":1}}],[\"将是一个无边界的阻塞队列\",{\"1\":{\"356\":1}}],[\"将本线程生产出来的数据传递给对方\",{\"1\":{\"349\":1}}],[\"将清空工作内存中共享变量的值\",{\"1\":{\"326\":1}}],[\"将类型相关的所有信息加载进方法区\",{\"1\":{\"289\":1}}],[\"将此\",{\"1\":{\"267\":1,\"664\":1}}],[\"将包装类型转换为基本数据类型\",{\"1\":{\"240\":1}}],[\"将基本类型用它们对应的引用类型包装起来\",{\"1\":{\"240\":1}}],[\"将双精度型\",{\"1\":{\"239\":1}}],[\"将我们的代码\",{\"1\":{\"235\":1}}],[\"将version也作为更新的条件\",{\"1\":{\"225\":1}}],[\"将形成的决议发送给所有学习节点进行学习\",{\"1\":{\"216\":1}}],[\"将新增订单和新增消息放到一个事务里完成\",{\"1\":{\"205\":1}}],[\"将新元素放到数组中\",{\"1\":{\"175\":1}}],[\"将订单状态修改为支付失败\",{\"1\":{\"204\":1}}],[\"将订单状态修改为支付成功\",{\"1\":{\"204\":1}}],[\"将添加的元素作为key\",{\"1\":{\"186\":1}}],[\"将元素放置到链表的最后\",{\"1\":{\"175\":1}}],[\"将元素放在table数组上面\",{\"1\":{\"168\":1}}],[\"将时间复杂度由o\",{\"1\":{\"175\":1}}],[\"将key分割成位数相同的几段\",{\"1\":{\"170\":1}}],[\"能解决\",{\"1\":{\"800\":1}}],[\"能解决的问题\",{\"1\":{\"504\":1}}],[\"能保证多线程下变量的隔离\",{\"1\":{\"798\":1}}],[\"能用图说话就使劲肝图\",{\"1\":{\"621\":1}}],[\"能提示发送方降低发送的速率\",{\"1\":{\"581\":1}}],[\"能证明淘宝是真淘宝\",{\"1\":{\"562\":1}}],[\"能够收集和存储时间序列数据\",{\"1\":{\"876\":1}}],[\"能够自行单独启动或销毁\",{\"1\":{\"824\":1}}],[\"能够同时监听的\",{\"1\":{\"664\":1}}],[\"能够很容易控制容量\",{\"1\":{\"641\":1}}],[\"能够保存为浏览器书签\",{\"1\":{\"553\":1}}],[\"能够充分的散列\",{\"1\":{\"168\":1}}],[\"能大幅提升查找的效率\",{\"1\":{\"496\":1}}],[\"能简单说一下\",{\"0\":{\"788\":1}}],[\"能简单说一下索引的分类吗\",{\"0\":{\"495\":1}}],[\"能简单说一下线程池的工作流程吗\",{\"0\":{\"353\":1}}],[\"能帮助定位\",{\"1\":{\"479\":1}}],[\"能力\",{\"1\":{\"476\":1}}],[\"能直达的对象\",{\"1\":{\"403\":1}}],[\"能详细说一下\",{\"0\":{\"403\":1}}],[\"能手写内存溢出的例子吗\",{\"0\":{\"388\":1}}],[\"能立即停止线程池\",{\"1\":{\"358\":1}}],[\"能说下http和rpc的区别吗\",{\"0\":{\"845\":1}}],[\"能说下\",{\"0\":{\"775\":1}}],[\"能说说布隆过滤器吗\",{\"0\":{\"705\":1}}],[\"能说说redis集群的原理吗\",{\"0\":{\"696\":1}}],[\"能说说mybatis的工作原理吗\",{\"0\":{\"448\":1}}],[\"能说说工作中线程池的应用吗\",{\"0\":{\"352\":1}}],[\"能说一下i\",{\"0\":{\"672\":1}}],[\"能说一下类的生命周期吗\",{\"0\":{\"421\":1}}],[\"能说一下对象的内存布局吗\",{\"0\":{\"385\":1}}],[\"能说一下\",{\"0\":{\"379\":1,\"793\":1}}],[\"能说一下线程池有几种状态吗\",{\"0\":{\"367\":1}}],[\"能说一下四种常见线程池的原理吗\",{\"0\":{\"361\":1}}],[\"能说一下seata吗\",{\"0\":{\"208\":1}}],[\"能说一下hashmap的数据结构吗\",{\"0\":{\"161\":1}}],[\"能根据\",{\"1\":{\"258\":1}}],[\"能不能同时满足一致性和可用性\",{\"1\":{\"191\":1}}],[\"能具体说一下concurrenthashmap的实现吗\",{\"0\":{\"179\":1}}],[\"自2020年12月起\",{\"1\":{\"864\":1}}],[\"自我保护机制\",{\"1\":{\"836\":1,\"838\":1}}],[\"自我保护\",{\"1\":{\"836\":1}}],[\"自带负载均衡策略\",{\"1\":{\"831\":1}}],[\"自带的\",{\"1\":{\"418\":1}}],[\"自带的可视化性能监控和故障处理工具\",{\"1\":{\"411\":1}}],[\"自治的服务单元\",{\"1\":{\"828\":1}}],[\"自治且松耦合的服务\",{\"1\":{\"828\":2}}],[\"自身业务代码问题\",{\"1\":{\"703\":1}}],[\"自持久化开始到持久化结束\",{\"1\":{\"680\":1}}],[\"自然又会恢复一致\",{\"1\":{\"708\":1}}],[\"自然是它有和countdownlatch不同的地方\",{\"1\":{\"346\":1}}],[\"自然也就保证了数据的一致性\",{\"1\":{\"519\":1}}],[\"自然也就走不到\",{\"1\":{\"276\":1}}],[\"自然也无法单独删除了\",{\"1\":{\"389\":1}}],[\"自然也不是用链地址法来解决冲突了\",{\"1\":{\"313\":1}}],[\"自旋cas\",{\"1\":{\"337\":1}}],[\"自旋一定次数失败后会将线程阻塞\",{\"1\":{\"331\":1}}],[\"自旋锁\",{\"1\":{\"327\":1}}],[\"自旋超过次数就阻塞获取\",{\"1\":{\"180\":1}}],[\"自动触发一次无关紧要的调用\",{\"1\":{\"848\":1}}],[\"自动触发bgsave\",{\"1\":{\"676\":1}}],[\"自动装配\",{\"1\":{\"821\":1}}],[\"自动装配核心功能的实现实际是通过\",{\"1\":{\"820\":1}}],[\"自动装箱的时候会去缓存池里取\",{\"1\":{\"269\":1}}],[\"自动装箱的机制\",{\"1\":{\"269\":1}}],[\"自动配置原理了解吗\",{\"0\":{\"820\":1}}],[\"自动的\",{\"1\":{\"791\":2}}],[\"自动注入\",{\"1\":{\"784\":1}}],[\"自动扩展空间\",{\"1\":{\"730\":1}}],[\"自动故障转移操作\",{\"1\":{\"687\":1}}],[\"自动故障转移\",{\"1\":{\"687\":1,\"691\":1}}],[\"自动化的故障恢复\",{\"1\":{\"687\":1}}],[\"自动生成的\",{\"1\":{\"282\":1}}],[\"自动类型转换\",{\"0\":{\"239\":1}}],[\"自定义一个注解作为切点\",{\"1\":{\"805\":1}}],[\"自定义注解是比较常用的一种\",{\"1\":{\"805\":1}}],[\"自定义注解\",{\"1\":{\"805\":1}}],[\"自定义destroy方法\",{\"1\":{\"793\":2}}],[\"自定义init方法\",{\"1\":{\"793\":2}}],[\"自定义了一些类加载器\",{\"1\":{\"429\":1}}],[\"自定义了一个相等的标准\",{\"1\":{\"257\":1}}],[\"自定义情况\",{\"1\":{\"257\":1}}],[\"自己来实例化\",{\"1\":{\"788\":1}}],[\"自己背八股背的时候苦哈哈\",{\"1\":{\"621\":1}}],[\"自己重复接受了\",{\"1\":{\"594\":1}}],[\"自己的缓存区还有多少空余空间\",{\"1\":{\"583\":1}}],[\"自己的高半区和低半区做异或\",{\"1\":{\"167\":1}}],[\"自己增加\",{\"1\":{\"245\":2}}],[\"自己去实现分布式事务调度还是比较麻烦的\",{\"1\":{\"208\":1}}],[\"自增主键\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"位操作系统占用\",{\"1\":{\"734\":1}}],[\"位于\",{\"1\":{\"695\":2}}],[\"位图\",{\"1\":{\"668\":1}}],[\"位的窗口大小\",{\"1\":{\"583\":1}}],[\"位紧急指针\",{\"1\":{\"580\":1}}],[\"位校验和\",{\"1\":{\"580\":1}}],[\"位窗口大小\",{\"1\":{\"580\":1}}],[\"位标志位\",{\"1\":{\"580\":1}}],[\"位最大能标识\",{\"1\":{\"580\":1}}],[\"位首部长度\",{\"1\":{\"580\":1}}],[\"位确认号\",{\"1\":{\"580\":1}}],[\"位序号\",{\"1\":{\"580\":1}}],[\"位端口号\",{\"1\":{\"580\":1}}],[\"位小数秒\",{\"1\":{\"463\":1}}],[\"位系统中的\",{\"1\":{\"381\":1}}],[\"位虚拟机\",{\"1\":{\"327\":1}}],[\"位运算\",{\"1\":{\"244\":1}}],[\"位运算比取余\",{\"1\":{\"167\":1}}],[\"位数\",{\"1\":{\"238\":1}}],[\"位\",{\"1\":{\"167\":1,\"603\":6,\"605\":1,\"607\":1}}],[\"那feign和dubbo的区别呢\",{\"0\":{\"846\":1}}],[\"那为啥会出现这种情况\",{\"1\":{\"813\":1}}],[\"那为什么要两阶段提交呢\",{\"0\":{\"482\":1}}],[\"那为什么要用这个呢\",{\"1\":{\"406\":1}}],[\"那为什么key还要设计成弱引用\",{\"1\":{\"311\":1}}],[\"那能介绍一下这四部分吗\",{\"0\":{\"747\":1}}],[\"那同组的其他消费者就不会再收到这条消息\",{\"1\":{\"744\":1}}],[\"那rocketmq的消息模型呢\",{\"0\":{\"744\":1}}],[\"那此段时间就会出现缓存层和存储层数据的不一致\",{\"1\":{\"703\":1}}],[\"那样轮询扫描整个\",{\"1\":{\"664\":1}}],[\"那这个事务就不能正常回滚了\",{\"1\":{\"813\":1}}],[\"那这个开销也很大\",{\"1\":{\"664\":2}}],[\"那这个类加载器默认就是应用程序类加载器\",{\"1\":{\"427\":1}}],[\"那可以选择在内存驻留时间很⻓的⻚⾯进⾏中置换\",{\"1\":{\"658\":1}}],[\"那很可能数据都没有丢失\",{\"1\":{\"591\":1}}],[\"那有什么应对方案呢\",{\"1\":{\"573\":1}}],[\"那有什么办法记录状态呢\",{\"1\":{\"565\":1}}],[\"那必然证书也是被信任的\",{\"1\":{\"564\":1}}],[\"那你觉得分库分表会带来什么问题呢\",{\"0\":{\"534\":1}}],[\"那你们是怎么分表的\",{\"0\":{\"530\":1}}],[\"那读写分离的分配怎么实现呢\",{\"0\":{\"526\":1}}],[\"那每查找一次数据就需要从磁盘中读取一个节点\",{\"1\":{\"503\":1}}],[\"那一棵\",{\"0\":{\"502\":1}}],[\"那它没有必要再回表查询了\",{\"1\":{\"489\":1}}],[\"那它将会被第一次标记\",{\"1\":{\"393\":1}}],[\"那存储引擎应该怎么选择\",{\"0\":{\"476\":1}}],[\"那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址\",{\"1\":{\"253\":1}}],[\"那\",{\"0\":{\"459\":1,\"519\":1,\"800\":1}}],[\"那系统中就会出现多个不同的\",{\"1\":{\"425\":1}}],[\"那说明是因为对象创建速度快导致内存一直占用很高\",{\"1\":{\"415\":1}}],[\"那说说什么是指令重排\",{\"0\":{\"319\":1}}],[\"那在第二次标记时它就\",{\"1\":{\"393\":1}}],[\"那还应该有一块用于记录数组长度的数据\",{\"1\":{\"385\":1}}],[\"那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离\",{\"1\":{\"383\":1}}],[\"那死锁问题怎么排查呢\",{\"0\":{\"343\":1}}],[\"那原理是什么呢\",{\"1\":{\"315\":1}}],[\"那该怎么办\",{\"1\":{\"315\":1,\"466\":1}}],[\"那该怎么办呢\",{\"1\":{\"309\":1,\"427\":1}}],[\"那怎么解决这个问题呢\",{\"1\":{\"848\":1}}],[\"那怎么解决呢\",{\"1\":{\"595\":1,\"605\":1}}],[\"那怎么解决内存泄漏问题呢\",{\"1\":{\"311\":1}}],[\"那怎么不直接调用run\",{\"0\":{\"301\":1}}],[\"那threadlocalmap的节点是什么样的呢\",{\"1\":{\"310\":1}}],[\"那应该怎么办呢\",{\"1\":{\"309\":1}}],[\"那最终返回\",{\"1\":{\"276\":1}}],[\"那允许直接对此\",{\"1\":{\"215\":1}}],[\"那参与者就会提交事务了\",{\"1\":{\"203\":1}}],[\"那我这个锁就无法释放\",{\"1\":{\"198\":1}}],[\"那会造成前一个\",{\"1\":{\"177\":1}}],[\"那扩容机制了解吗\",{\"0\":{\"174\":1}}],[\"那么运维成本将会非常大\",{\"1\":{\"840\":1}}],[\"那么方法就会继续向下执行\",{\"1\":{\"802\":1}}],[\"那么都得在实例化这一步完成注入\",{\"1\":{\"800\":1}}],[\"那么可能就导致取到的\",{\"1\":{\"801\":1}}],[\"那么可能就存在线程安全的问题\",{\"1\":{\"798\":1}}],[\"那么可以\",{\"1\":{\"678\":1}}],[\"那么可以不创建对象\",{\"1\":{\"408\":1}}],[\"那么producer发送的消息就不会丢失\",{\"1\":{\"771\":1}}],[\"那么如何使用redis作为异步队列使用呢\",{\"1\":{\"722\":1}}],[\"那么大概就是redis的ops已经到了极限\",{\"1\":{\"718\":1}}],[\"那么他就⼀直⽆法被删除\",{\"1\":{\"716\":1}}],[\"那么在更新成功之后\",{\"1\":{\"707\":1}}],[\"那么在新的服务器上就没有记录用户状态的\",{\"1\":{\"566\":1}}],[\"那么key不存在\",{\"1\":{\"705\":1}}],[\"那么实时性就不能得到保证\",{\"1\":{\"640\":1}}],[\"那么长作业永远得不到调度\",{\"1\":{\"640\":1}}],[\"那么子进程的进程描述符仍然保存在系统中\",{\"1\":{\"638\":1}}],[\"那么由于加⼊了拥塞窗⼝的概念后\",{\"1\":{\"585\":1}}],[\"那么整个⽹络的效率是很低的\",{\"1\":{\"584\":1}}],[\"那么发送的数据段很可能超过了最大生存时间也没有到达接收方\",{\"1\":{\"581\":1}}],[\"那么发生哈希冲突的概率就增加了\",{\"1\":{\"173\":1}}],[\"那么会每隔\",{\"1\":{\"560\":1}}],[\"那么会生成多个中间对象\",{\"1\":{\"266\":1}}],[\"那么数据在各层之间是怎么传输的呢\",{\"0\":{\"544\":1}}],[\"那么该版本的记录时不能被读取的\",{\"1\":{\"523\":1}}],[\"那么说明数据变动期间\",{\"1\":{\"515\":1}}],[\"那么说明在数据变动期间\",{\"1\":{\"515\":1}}],[\"那么我们就得遍历表中所有数据行来判断有没有行锁\",{\"1\":{\"514\":1}}],[\"那么我们是不是可以直接把\",{\"1\":{\"428\":1}}],[\"那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引\",{\"1\":{\"489\":1}}],[\"那么保留表中未匹配的行作为外部行添加到虚拟表\",{\"1\":{\"470\":1}}],[\"那么内外表都进行全表扫描\",{\"1\":{\"464\":1}}],[\"那么用\",{\"1\":{\"464\":1}}],[\"那么将直接反射调用我们要执行的方法\",{\"1\":{\"453\":1}}],[\"那么将这个任务放入队列\",{\"1\":{\"353\":1}}],[\"那么多对一\",{\"1\":{\"441\":1}}],[\"那么无法加载多个相同的类\",{\"1\":{\"429\":1}}],[\"那么很可能是因为内存泄露导致内存一直无法被回收\",{\"1\":{\"415\":1}}],[\"那么久可以考虑将这个对象在栈上分配\",{\"1\":{\"408\":1}}],[\"那么对象就真的要被回收了\",{\"1\":{\"393\":1}}],[\"那么房子很快就会被堆满了\",{\"1\":{\"388\":1}}],[\"那么随着对象数量的增加\",{\"1\":{\"388\":1}}],[\"那么线程池会根据拒绝策略来对应处理\",{\"1\":{\"353\":1}}],[\"那么线程b中的任意操作\",{\"1\":{\"320\":1}}],[\"那么还是要创建非核心线程立刻运行这个任务\",{\"1\":{\"353\":1}}],[\"那么马上创建线程运行这个任务\",{\"1\":{\"353\":1}}],[\"那么显示牌就又变绿\",{\"1\":{\"348\":1}}],[\"那么显示牌显示的就是绿灯和数字0\",{\"1\":{\"348\":1}}],[\"那么显示牌显示的就是绿灯和剩余的车位\",{\"1\":{\"348\":1}}],[\"那么为什么会产生这种现象呢\",{\"1\":{\"713\":1}}],[\"那么为什么会产生死锁呢\",{\"1\":{\"342\":1}}],[\"那么为什么选择了0\",{\"1\":{\"173\":1}}],[\"那么直接就获取到锁返回了\",{\"1\":{\"333\":1}}],[\"那么当前患者进入候诊室\",{\"1\":{\"325\":1}}],[\"那么a线程的\",{\"1\":{\"320\":1}}],[\"那么a\",{\"1\":{\"320\":1}}],[\"那么这些请求的压力会不断在下游堆积\",{\"1\":{\"853\":1}}],[\"那么这些子进程将成为孤儿进程\",{\"1\":{\"639\":1}}],[\"那么这\",{\"1\":{\"811\":1}}],[\"那么这本册子该如何获取呢\",{\"1\":{\"624\":1}}],[\"那么这种重排序并不非法\",{\"1\":{\"320\":1}}],[\"那么这个单例\",{\"1\":{\"798\":1}}],[\"那么这个厂子的生产管理是怎么做的\",{\"1\":{\"788\":1}}],[\"那么这个就毫无疑问由启动类加载器加载器加载\",{\"1\":{\"427\":1}}],[\"那么这个变量的读写肯定就不会有竞争\",{\"1\":{\"408\":1}}],[\"那么这个外部对象将不能被\",{\"1\":{\"389\":1}}],[\"那么这个线程就被停掉\",{\"1\":{\"353\":1}}],[\"那么这个线程可以无需阻塞直接获取到锁\",{\"1\":{\"332\":1}}],[\"那么这个方法还是会因为超时而返回\",{\"1\":{\"302\":1}}],[\"那么这个成员变量是属于类的\",{\"1\":{\"253\":1}}],[\"那么第一个操作的执行结果将对第二个操作可见\",{\"1\":{\"320\":1}}],[\"那么现在问题就来了\",{\"1\":{\"311\":1}}],[\"那么毫无疑问它是<key\",{\"1\":{\"310\":1}}],[\"那么问题来了\",{\"1\":{\"309\":1,\"373\":1,\"709\":1}}],[\"那么访问这个变量的每个线程都会有这个变量的一个本地拷贝\",{\"1\":{\"308\":1}}],[\"那么守护线程和用户线程有什么区别呢\",{\"1\":{\"305\":1}}],[\"那么run方法还是运行在主线程中\",{\"1\":{\"301\":1}}],[\"那么自动装箱时不会\",{\"1\":{\"269\":1}}],[\"那么拷贝后对象\",{\"1\":{\"260\":1}}],[\"那么存储在栈内存\",{\"1\":{\"253\":1}}],[\"那么后面的990ms的请求只能拒绝\",{\"1\":{\"227\":1}}],[\"那么首先开启一轮大选\",{\"1\":{\"221\":1}}],[\"那么就不再处理这条消息\",{\"1\":{\"757\":1}}],[\"那么就算出现重复消费的情况\",{\"1\":{\"757\":1}}],[\"那么就得排查命令和内存的使用\",{\"1\":{\"718\":1}}],[\"那么就重新发送数据\",{\"1\":{\"591\":1}}],[\"那么就出现了常⻅的两种策略\",{\"1\":{\"584\":1}}],[\"那么就意味着该条记录对该事务完全不可见\",{\"1\":{\"523\":1}}],[\"那么就使用\",{\"1\":{\"468\":1}}],[\"那么就会直接进行\",{\"1\":{\"802\":1}}],[\"那么就会调用真实拦截对象的方法\",{\"1\":{\"453\":2}}],[\"那么就会单独发送事先保存好的查询关联b对象的sql\",{\"1\":{\"442\":1}}],[\"那么就可能导致整个提议的过程进入了死循环\",{\"1\":{\"217\":1}}],[\"那么就获取到锁\",{\"1\":{\"197\":1}}],[\"那么它将成为领导者\",{\"1\":{\"689\":1}}],[\"那么它可以随意选定一个值\",{\"1\":{\"216\":1}}],[\"那么它就会发送一个针对\",{\"1\":{\"216\":1}}],[\"那么它就会将它已经批准过的最大编号的提案作为响应反馈给提议者\",{\"1\":{\"215\":1}}],[\"那么满足分区容错的基础上\",{\"1\":{\"191\":1}}],[\"那么分区容错性\",{\"1\":{\"191\":1}}],[\"那么n\",{\"1\":{\"174\":1}}],[\"那么\",{\"1\":{\"174\":1,\"317\":1,\"406\":1,\"427\":1,\"458\":2,\"482\":1,\"573\":1,\"582\":1,\"589\":1,\"591\":1}}],[\"那就得想办法保证缓存和数据库中数据一致\",{\"1\":{\"708\":1}}],[\"那就顺着版本链找到下一个版本的数据\",{\"1\":{\"523\":1}}],[\"那就需要判断一下\",{\"1\":{\"523\":1}}],[\"那就需要把商品\",{\"1\":{\"460\":1}}],[\"那就是另外的故事了\",{\"1\":{\"435\":1}}],[\"那就是大于16x0\",{\"1\":{\"173\":1}}],[\"那就会触发\",{\"1\":{\"399\":1}}],[\"那就没有办法简单地进行指针碰撞了\",{\"1\":{\"383\":1}}],[\"那就重新匹配\",{\"1\":{\"345\":1}}],[\"那就接着去找空着的坑\",{\"1\":{\"313\":1}}],[\"那就违背了分布式的初衷\",{\"1\":{\"191\":1}}],[\"那就更难搞了\",{\"1\":{\"167\":1}}],[\"那arraylist怎么序列化呢\",{\"1\":{\"156\":1}}],[\"碰撞也会很严重\",{\"1\":{\"167\":1}}],[\"要实现这个时期的织入\",{\"1\":{\"807\":1}}],[\"要经历三步\",{\"1\":{\"800\":1}}],[\"要经过如下过程\",{\"1\":{\"428\":1}}],[\"要保证全局顺序消息\",{\"1\":{\"761\":1}}],[\"要保证一致性就不能返回不一致的数据\",{\"1\":{\"191\":1}}],[\"要做到从同一个message\",{\"1\":{\"760\":1}}],[\"要做三件事情\",{\"1\":{\"422\":1}}],[\"要注意处理响应结果和异常\",{\"1\":{\"754\":1}}],[\"要支持随机的插入和删除\",{\"1\":{\"732\":1}}],[\"要解决这个问题也不是很复杂\",{\"1\":{\"712\":1}}],[\"要存取到哪个节点上的时候\",{\"1\":{\"694\":1}}],[\"要把数据集按照分区规则映射到多个节点\",{\"1\":{\"692\":1}}],[\"要求将自己设置为领导者\",{\"1\":{\"689\":1}}],[\"要求进行部分复制操作\",{\"1\":{\"685\":1}}],[\"要求多个节点的数据副本都是一致的\",{\"1\":{\"193\":1}}],[\"要校验内容\",{\"1\":{\"615\":1}}],[\"要发送的数据大于\",{\"1\":{\"595\":1}}],[\"要发送的数据小于\",{\"1\":{\"595\":1}}],[\"要传给哪个上层协议或应用程序\",{\"1\":{\"580\":1}}],[\"要通过网络光纤和各种中间代理服务器\",{\"1\":{\"569\":1}}],[\"要好一些\",{\"1\":{\"566\":1}}],[\"要花费\",{\"1\":{\"559\":1}}],[\"要建⽴⼀个连接\",{\"1\":{\"559\":1}}],[\"要怎么处理呢\",{\"0\":{\"538\":1}}],[\"要进行锁表就会导致\",{\"1\":{\"528\":1}}],[\"要抓住几个关键点\",{\"1\":{\"523\":1}}],[\"要执行的事务\",{\"1\":{\"514\":1}}],[\"要插入一个数据\",{\"1\":{\"513\":1}}],[\"要查到结果集需要扫描读取的数据行数\",{\"1\":{\"493\":1}}],[\"要避免在列字段上进行算术运算或其他表达式运算\",{\"1\":{\"489\":1}}],[\"要比\",{\"1\":{\"468\":1}}],[\"要快\",{\"1\":{\"464\":1}}],[\"要区分情景\",{\"1\":{\"464\":1}}],[\"要拦截的方法\",{\"1\":{\"453\":1}}],[\"要开启二级缓存\",{\"1\":{\"446\":1}}],[\"要分配内存的线程\",{\"1\":{\"384\":1}}],[\"要想掌握fork\",{\"1\":{\"373\":1}}],[\"要是以前有人这么讲线程池\",{\"1\":{\"370\":1}}],[\"要是只取最后几位的话\",{\"1\":{\"167\":1}}],[\"要闹\",{\"1\":{\"353\":1}}],[\"要读取几万个文件的数据\",{\"1\":{\"348\":1}}],[\"要答出这几个点\",{\"1\":{\"310\":1}}],[\"要说线程\",{\"1\":{\"299\":1}}],[\"要高可用并允许分区\",{\"1\":{\"192\":1}}],[\"要么都执行要么都不执行\",{\"1\":{\"724\":1}}],[\"要么都不执行\",{\"1\":{\"518\":1}}],[\"要么是另一事务修改它之后的状态\",{\"1\":{\"519\":1}}],[\"要么是黑色\",{\"1\":{\"162\":1}}],[\"要么先写入\",{\"1\":{\"482\":1}}],[\"要么就全不执行\",{\"1\":{\"318\":1}}],[\"要么全部执行并且执行的过程不会被任何因素打断\",{\"1\":{\"318\":1}}],[\"要么全部回滚\",{\"1\":{\"200\":1}}],[\"要么一起失败回滚\",{\"1\":{\"208\":1}}],[\"要么一起成功提交\",{\"1\":{\"208\":1}}],[\"要么在原位置再移动2的次幂\",{\"1\":{\"174\":1}}],[\"要么在原位置\",{\"1\":{\"174\":1}}],[\"结合使用\",{\"1\":{\"876\":1}}],[\"结合了\",{\"1\":{\"830\":1}}],[\"结合这个过程\",{\"1\":{\"800\":1}}],[\"结合线程池动态参数配置机制来调整配置\",{\"1\":{\"369\":1}}],[\"结尾的对数据库\",{\"1\":{\"785\":1}}],[\"结点保持长连接\",{\"1\":{\"748\":1}}],[\"结点之间是相互独立\",{\"1\":{\"748\":1}}],[\"结构的数据会用到字典外\",{\"1\":{\"731\":1}}],[\"结果家里有事\",{\"1\":{\"568\":1}}],[\"结果彻底搞懂了\",{\"1\":{\"551\":1}}],[\"结果分散到不同的数据库表中\",{\"1\":{\"531\":1}}],[\"结果处理\",{\"1\":{\"448\":1}}],[\"结果处理器\",{\"1\":{\"448\":1}}],[\"结果映射\",{\"1\":{\"441\":2}}],[\"结果就大量的请求进入到后台\",{\"1\":{\"413\":1}}],[\"结果就是截取了最低的四位值\",{\"1\":{\"167\":1}}],[\"结果在测试的过程中发现导出订单的按钮前端居然没有做点击后按钮置灰交互事件\",{\"1\":{\"413\":1}}],[\"结果正确\",{\"0\":{\"339\":1}}],[\"结果序列化一个对象之后\",{\"1\":{\"282\":1}}],[\"结果\",{\"1\":{\"276\":1,\"592\":1,\"805\":1}}],[\"结果有以下三种情况\",{\"1\":{\"222\":1}}],[\"结束后打个分隔线\",{\"1\":{\"805\":1}}],[\"结束进程信号\",{\"1\":{\"641\":1}}],[\"结束状态\",{\"1\":{\"637\":1}}],[\"结束当前的方法\",{\"1\":{\"243\":1}}],[\"结束当前的循环体\",{\"1\":{\"243\":1}}],[\"结束正在执行的循环\",{\"1\":{\"243\":1}}],[\"结束之后再将原容器的引用指向新容器\",{\"1\":{\"159\":1}}],[\"结束\",{\"0\":{\"43\":1}}],[\"顺势织入横切逻辑\",{\"1\":{\"806\":1}}],[\"顺利从⼀级缓存拿到实例化且初始化完成的\",{\"1\":{\"800\":1}}],[\"顺便说一下\",{\"1\":{\"167\":1}}],[\"顺序读取\",{\"1\":{\"772\":1}}],[\"顺序读写\",{\"1\":{\"772\":1}}],[\"顺序消息分为全局顺序消息和部分顺序消息\",{\"1\":{\"759\":1}}],[\"顺序消息是指消息的消费顺序和产生顺序相同\",{\"1\":{\"759\":1}}],[\"顺序消息如何实现\",{\"0\":{\"759\":1}}],[\"顺序传参法\",{\"1\":{\"436\":1}}],[\"顺序\",{\"0\":{\"29\":1},\"1\":{\"321\":1}}],[\"操作不会阻塞\",{\"1\":{\"645\":1}}],[\"操作是⽤在离开临界区之后\",{\"1\":{\"645\":1}}],[\"操作是⽤在离开共享资源之后\",{\"1\":{\"641\":1}}],[\"操作是⽤在进⼊临界区之前\",{\"1\":{\"645\":1}}],[\"操作是⽤在进⼊共享资源之前\",{\"1\":{\"641\":1}}],[\"操作符\",{\"1\":{\"489\":1}}],[\"操作数据库\",{\"1\":{\"434\":1}}],[\"操作数栈\",{\"1\":{\"379\":1}}],[\"操作无法继续下去的时候\",{\"1\":{\"371\":1}}],[\"操作成功返回\",{\"1\":{\"320\":1}}],[\"操作happens\",{\"1\":{\"320\":1}}],[\"操作系统是扛不住的\",{\"1\":{\"664\":1}}],[\"操作系统是一种运行在内核态的软件\",{\"1\":{\"628\":1}}],[\"操作系统内核与⽤户空间就不需要再进⾏任何的数据拷⻉操作\",{\"1\":{\"662\":1}}],[\"操作系统无法知道各个页面下一次将在什么时候被访问\",{\"1\":{\"658\":1}}],[\"操作系统把物理内存\",{\"1\":{\"657\":1}}],[\"操作系统可能会有非常多进程\",{\"1\":{\"654\":1}}],[\"操作系统接到中断请求后\",{\"1\":{\"641\":1}}],[\"操作系统需要先存储当前进程的状态\",{\"1\":{\"636\":1}}],[\"操作系统结构\",{\"0\":{\"630\":1}}],[\"操作系统最主要的功能\",{\"1\":{\"629\":1}}],[\"操作系统主要有哪些功能\",{\"0\":{\"629\":1}}],[\"操作系统面试题八股文\",{\"1\":{\"623\":1}}],[\"操作系统\",{\"1\":{\"620\":1,\"623\":1,\"624\":1,\"718\":1}}],[\"操作系统工具\",{\"1\":{\"410\":1}}],[\"操作系统在分配资源时是把资源分配给进程的\",{\"1\":{\"299\":1}}],[\"操作系统提供的路径配置\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"操作功能需业务提供\",{\"1\":{\"204\":1}}],[\"操作如下\",{\"1\":{\"167\":1}}],[\"操作的结果就是散列值的高位全部归零\",{\"1\":{\"167\":1}}],[\"操作\",{\"1\":{\"167\":1,\"177\":1,\"196\":1,\"470\":2,\"489\":1,\"645\":2,\"843\":2}}],[\"与dubbo的rpc框架紧密集成|\",{\"1\":{\"857\":1}}],[\"与spring\",{\"1\":{\"846\":1,\"857\":1}}],[\"与阿里巴巴的分布式应用开发框架相关\",{\"1\":{\"831\":1}}],[\"与processqueuetable做一个过滤比对\",{\"1\":{\"777\":1}}],[\"与所有的\",{\"1\":{\"749\":1}}],[\"与生产者和消费者的关系非常松散\",{\"1\":{\"744\":1}}],[\"与发布\",{\"1\":{\"744\":1}}],[\"与哨兵类似\",{\"1\":{\"691\":1}}],[\"与主节点失联超过down\",{\"1\":{\"690\":1}}],[\"与其他通信机制不同的是\",{\"1\":{\"641\":1}}],[\"与真实值的差距\",{\"1\":{\"591\":1}}],[\"与服务器通过三次握手\",{\"1\":{\"546\":1}}],[\"与数据中最新的版本\",{\"1\":{\"515\":1}}],[\"与all\",{\"1\":{\"493\":1}}],[\"与存储引擎进行通信\",{\"1\":{\"472\":1}}],[\"与jdbc批处理相同\",{\"1\":{\"451\":1}}],[\"与虚拟机栈所发挥的作用是非常相似的\",{\"1\":{\"379\":1}}],[\"与按happens\",{\"1\":{\"320\":1}}],[\"与\",{\"0\":{\"258\":1,\"461\":1,\"467\":1,\"468\":1,\"469\":1,\"548\":1,\"561\":1},\"1\":{\"167\":3,\"302\":1,\"542\":1,\"562\":1,\"796\":1}}],[\"源地址是本机的\",{\"1\":{\"609\":1}}],[\"源主机收到这个\",{\"1\":{\"606\":1}}],[\"源端口号\",{\"1\":{\"580\":1}}],[\"源码是java\",{\"1\":{\"742\":1}}],[\"源码中设置为\",{\"1\":{\"502\":1}}],[\"源码中模运算就是把散列值和数组长度\",{\"1\":{\"167\":1}}],[\"源码\",{\"1\":{\"270\":1}}],[\"源码里已经对这个方法进行了说明\",{\"1\":{\"267\":1}}],[\"源码的注释也给出了答案\",{\"1\":{\"172\":1}}],[\"源代码\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"亿长度的数组\",{\"1\":{\"167\":1}}],[\"亿的映射空间\",{\"1\":{\"167\":1}}],[\"只需在配置文件中做相关的事务规则声明或通过\",{\"1\":{\"809\":1}}],[\"只需要通过配置文件的方式完成配置即可\",{\"1\":{\"816\":1}}],[\"只需要在接口上加上自定义注解\",{\"1\":{\"805\":1}}],[\"只需要在生产消息的时候设置消息的延时级别\",{\"1\":{\"763\":1}}],[\"只需要将槽\",{\"1\":{\"695\":1}}],[\"只需要传⼊⼀个待检测的\",{\"1\":{\"664\":1}}],[\"只需要切换线程的私有数据\",{\"1\":{\"643\":1}}],[\"只需要迁移指定的数据\",{\"1\":{\"531\":1}}],[\"只需要增加新的表就可以了\",{\"1\":{\"531\":1}}],[\"只需要对底层数据库访问的\",{\"1\":{\"528\":1}}],[\"只需要按照下边的步骤判断记录的某个版本是否可见\",{\"1\":{\"523\":1}}],[\"只需要遍历叶子节点就可以\",{\"1\":{\"504\":1}}],[\"只需要实现拦截器接口\",{\"1\":{\"453\":1}}],[\"只需要抓住线程池的核心流程\",{\"1\":{\"370\":1}}],[\"只需要使用\",{\"1\":{\"291\":1}}],[\"只需要把\",{\"1\":{\"235\":1}}],[\"只需要看原来的hash值新增的那一位是0还是1就行了\",{\"1\":{\"174\":1}}],[\"只提供统一事务管理接口\",{\"1\":{\"808\":1}}],[\"只支持方法类型的连接点\",{\"1\":{\"804\":1}}],[\"只支持表级锁\",{\"1\":{\"477\":1}}],[\"只包含核心业务代码\",{\"1\":{\"804\":1}}],[\"只包括列名那一列\",{\"1\":{\"469\":1}}],[\"只关注于方法本身\",{\"1\":{\"798\":1}}],[\"只用于基于\",{\"1\":{\"797\":1}}],[\"只放出我们服务能处理的流量\",{\"1\":{\"740\":1}}],[\"只允许被一个客户端占坑\",{\"1\":{\"727\":1}}],[\"只允许合法值\",{\"1\":{\"615\":1}}],[\"只使用\",{\"1\":{\"678\":1}}],[\"只会返回有事件发⽣的⽂件描述符的个数\",{\"1\":{\"664\":1}}],[\"只会阻塞这个流\",{\"1\":{\"559\":1}}],[\"只给接入网络的设备分配\",{\"1\":{\"605\":1}}],[\"只根据网络地址来进行转发\",{\"1\":{\"602\":1}}],[\"只存储指引搜索方向的数据项\",{\"1\":{\"501\":1}}],[\"只记\",{\"1\":{\"480\":1}}],[\"只保留数据记录\",{\"1\":{\"513\":1}}],[\"只保留两张表中完全匹配的结果集\",{\"1\":{\"459\":1}}],[\"只保留低位值\",{\"1\":{\"167\":1}}],[\"只被软引用关联着的对象\",{\"1\":{\"392\":1}}],[\"只和\",{\"1\":{\"377\":1}}],[\"只不过它是针对构造函数注入而言的\",{\"1\":{\"796\":1}}],[\"只不过打不开指向的文件了而已\",{\"1\":{\"660\":1}}],[\"只不过自增步长设置一下\",{\"1\":{\"534\":1}}],[\"只不过实现不同锁语义\",{\"1\":{\"333\":1}}],[\"只不过该方法一直等待\",{\"1\":{\"272\":1}}],[\"只不过是这里的提交和回滚是针对业务上的\",{\"1\":{\"204\":1}}],[\"只不过是先定位到具体的segment\",{\"1\":{\"180\":1}}],[\"只能消除所有的并发处理\",{\"1\":{\"761\":1}}],[\"只能尽可能保存缓存和数据库的最终一致性\",{\"1\":{\"706\":1}}],[\"只能由主节点到从节点\",{\"1\":{\"682\":1}}],[\"只能由业务代码来实现或者用中间件将各表中的数据汇总\",{\"1\":{\"534\":1}}],[\"只能监听\",{\"1\":{\"664\":1}}],[\"只能处理\",{\"1\":{\"582\":1}}],[\"只能保存文本数据\",{\"1\":{\"730\":1}}],[\"只能保存\",{\"1\":{\"566\":1}}],[\"只能保证一个变量的原子操作\",{\"0\":{\"338\":1}}],[\"只能等待锁被释放才可以执行\",{\"1\":{\"515\":1}}],[\"只能被加载一次\",{\"1\":{\"428\":1}}],[\"只能被应用类加载器加载\",{\"1\":{\"427\":1}}],[\"只能放在classpath里\",{\"1\":{\"427\":1}}],[\"只能在有亲缘关系的进程间通信\",{\"1\":{\"641\":1}}],[\"只能在\",{\"1\":{\"427\":1}}],[\"只能在平地上停下来擦擦汗\",{\"1\":{\"402\":1}}],[\"只能从堆内存信息下手\",{\"1\":{\"413\":1}}],[\"只能允许若干车辆停泊\",{\"1\":{\"348\":1}}],[\"只能完成自己的任务\",{\"1\":{\"347\":1}}],[\"只能更新一个变量\",{\"1\":{\"340\":1}}],[\"只能有一个线程可以获取该锁\",{\"1\":{\"332\":1}}],[\"只能有一个线程处于方法或者同步块中\",{\"1\":{\"306\":1}}],[\"只能有一个public\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"只能修饰变量\",{\"1\":{\"282\":1}}],[\"只能是\",{\"1\":{\"242\":1}}],[\"只有单例的\",{\"1\":{\"799\":1}}],[\"只有对社会没有用的人才放假\",{\"1\":{\"793\":2}}],[\"只有对应的私钥才能解密\",{\"1\":{\"616\":1}}],[\"只有等\",{\"1\":{\"765\":1}}],[\"只有订阅的消息有这个属性a\",{\"1\":{\"762\":1}}],[\"只有到达该\",{\"1\":{\"698\":1}}],[\"只有一个紧凑的二进制文件\",{\"1\":{\"677\":1}}],[\"只有一个任务在执行\",{\"1\":{\"635\":1}}],[\"只有一个请求能执行写入\",{\"1\":{\"512\":1}}],[\"只有一个执行\",{\"1\":{\"298\":1}}],[\"只有叶子节点才会存储数据\",{\"1\":{\"501\":1}}],[\"只有符合<having\",{\"1\":{\"470\":1}}],[\"只有符合<where\",{\"1\":{\"470\":1}}],[\"只有那些符合<join\",{\"1\":{\"470\":1}}],[\"只有那些函数式接口\",{\"1\":{\"292\":1}}],[\"只有当节点分配了槽\",{\"1\":{\"697\":1}}],[\"只有当父进程通过\",{\"1\":{\"638\":1}}],[\"只有当父加载器反馈自己无法完成这个加载请求时\",{\"1\":{\"424\":1}}],[\"只有当设备连入网络时\",{\"1\":{\"607\":1}}],[\"只有当索引符合条件时才会将数据检索出来返回给\",{\"1\":{\"510\":1}}],[\"只有当索引的列顺序和\",{\"1\":{\"491\":1}}],[\"只有当内存中地址\",{\"1\":{\"334\":1}}],[\"只有连接被关闭后\",{\"1\":{\"389\":1}}],[\"只有本地缓冲区用完了\",{\"1\":{\"384\":1}}],[\"只有在自己使用完毕后才由自己释放该资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"只有在key在table数组中不存在的时候\",{\"1\":{\"186\":1}}],[\"只有遇到其他线程竞争时才会执行撤销\",{\"1\":{\"328\":1}}],[\"只有⼀份\",{\"1\":{\"324\":1}}],[\"只有某些特定场景才不允许\",{\"1\":{\"225\":1}}],[\"只要这段时间内有新消息到达\",{\"1\":{\"771\":1}}],[\"只要消息被刷盘持久化至磁盘文件commitlog中\",{\"1\":{\"771\":1}}],[\"只要保证同一个订单\",{\"1\":{\"759\":1}}],[\"只要保证原子性\",{\"1\":{\"519\":1}}],[\"只要批量拉取到消息\",{\"1\":{\"751\":1}}],[\"只要监控到了热key\",{\"1\":{\"710\":1}}],[\"只要rdb⽂件存在\",{\"1\":{\"676\":1}}],[\"只要引用数量不为\",{\"1\":{\"660\":1}}],[\"只要⽹络中没有出现拥塞\",{\"1\":{\"585\":1}}],[\"只要没满⾜上⾯条件中的⼀条\",{\"1\":{\"584\":1}}],[\"只要没有触碰到进程可用内存的上限\",{\"1\":{\"381\":1}}],[\"只要重新与引用链上的任何一个对象建立关联即可\",{\"1\":{\"393\":1}}],[\"只要强引用关系还存在\",{\"1\":{\"392\":1}}],[\"只要不断创建不可被回收的对象\",{\"1\":{\"388\":1}}],[\"只要能翻译成符合规范的字节码文件\",{\"1\":{\"377\":1}}],[\"只要垃圾回收机制一运行\",{\"1\":{\"311\":1}}],[\"只要有一个用户线程还没结束\",{\"1\":{\"305\":1}}],[\"只要序列化时候对象的\",{\"1\":{\"282\":1}}],[\"只要该系统可以安装相应的\",{\"1\":{\"234\":1}}],[\"只要该接受者尚未对编号大于mn的准备请求做出响应\",{\"1\":{\"216\":1}}],[\"只要下游服务有写\",{\"1\":{\"224\":1}}],[\"只要哈希函数映射得比较均匀松散\",{\"1\":{\"167\":1}}],[\"只是一个简单的注解\",{\"1\":{\"820\":1}}],[\"只是用于快速\",{\"1\":{\"819\":1}}],[\"只是得知\",{\"1\":{\"816\":1}}],[\"只是唤醒对应的线程\",{\"1\":{\"774\":1}}],[\"只是转发一下消息\",{\"1\":{\"758\":1}}],[\"只是做了两个处理\",{\"1\":{\"413\":1}}],[\"只是从整体的吞吐量来考量\",{\"1\":{\"395\":1}}],[\"只是关闭了提交通道\",{\"1\":{\"358\":1}}],[\"只是在mark\",{\"1\":{\"327\":1}}],[\"只是拥有\",{\"1\":{\"248\":1}}],[\"只是id不一样\",{\"1\":{\"224\":1}}],[\"只是省去\",{\"1\":{\"206\":1}}],[\"只是相比较正常的系统而言\",{\"1\":{\"193\":1}}],[\"加权随机算法在随机算法的基础上引入了权重的概念\",{\"1\":{\"851\":1}}],[\"加权随机算法\",{\"1\":{\"851\":1}}],[\"加权轮询算法在轮询算法的基础上增加了权重的概念\",{\"1\":{\"851\":1}}],[\"加权轮询算法\",{\"1\":{\"851\":1}}],[\"加入了这个注解后\",{\"1\":{\"817\":1}}],[\"加⼊⼆级缓存\",{\"1\":{\"710\":1}}],[\"加⼊了⼀个专⻔存放程序最常访问的⻚表项的\",{\"1\":{\"655\":1}}],[\"加一个布隆过滤器\",{\"1\":{\"703\":1}}],[\"加一个字段就没那么简单\",{\"1\":{\"537\":1}}],[\"加\",{\"1\":{\"645\":1}}],[\"加上页内偏移得到实际物理地址\",{\"1\":{\"653\":1}}],[\"加上一些其他的控制信息\",{\"1\":{\"609\":1}}],[\"加上本层的控制信息\",{\"1\":{\"544\":1}}],[\"加载自动装配类\",{\"1\":{\"820\":1}}],[\"加载资源\",{\"1\":{\"788\":1}}],[\"加载aof\",{\"1\":{\"679\":1}}],[\"加载rdb文件\",{\"1\":{\"679\":1}}],[\"加载映射文件\",{\"1\":{\"448\":1}}],[\"加载不到时再交\",{\"1\":{\"429\":1}}],[\"加载器\",{\"1\":{\"429\":1}}],[\"加载而来\",{\"1\":{\"428\":1}}],[\"加载阶段结束后\",{\"1\":{\"422\":1}}],[\"加载的起点\",{\"1\":{\"422\":1}}],[\"加载是\",{\"1\":{\"422\":1}}],[\"加载\",{\"1\":{\"421\":1,\"429\":1}}],[\"加载tree\",{\"0\":{\"72\":1}}],[\"加密和解密速度较快\",{\"1\":{\"617\":1}}],[\"加密握手\",{\"1\":{\"559\":1}}],[\"加密\",{\"1\":{\"359\":1,\"563\":1}}],[\"加版本号\",{\"1\":{\"336\":1}}],[\"加强代码的重用\",{\"1\":{\"247\":1}}],[\"加乐观锁\",{\"1\":{\"225\":1}}],[\"加悲观锁\",{\"1\":{\"225\":1}}],[\"加唯一索引是个非常简单但很有效的办法\",{\"1\":{\"225\":1}}],[\"加唯一索引\",{\"1\":{\"225\":1}}],[\"加锁更新\",{\"1\":{\"702\":1}}],[\"加锁和解锁锁住的是什么呢\",{\"1\":{\"645\":1}}],[\"加锁情况\",{\"1\":{\"516\":1}}],[\"加锁慢\",{\"1\":{\"512\":1}}],[\"加锁快\",{\"1\":{\"512\":1}}],[\"加锁了之后如果机器宕机\",{\"1\":{\"198\":1}}],[\"加锁的时候\",{\"1\":{\"196\":1}}],[\"加起来大概\",{\"1\":{\"167\":1}}],[\"因⽽\",{\"1\":{\"664\":1}}],[\"因特网报文控制协议\",{\"1\":{\"609\":1}}],[\"因而更加有效地分配\",{\"1\":{\"605\":1}}],[\"因而使处在\",{\"1\":{\"576\":1}}],[\"因而产生错误\",{\"1\":{\"569\":1}}],[\"因争夺资源而造成的互相等待的现象\",{\"1\":{\"342\":1}}],[\"因为只有当事务方法被当前类以外的代码调用时\",{\"1\":{\"813\":1}}],[\"因为无需频繁创建对象\",{\"1\":{\"806\":1}}],[\"因为三级缓存中放的是⽣成具体对象的匿名内部类\",{\"1\":{\"801\":1}}],[\"因为实例化和属性赋值是分开的\",{\"1\":{\"800\":1}}],[\"因为单例\",{\"1\":{\"798\":1}}],[\"因为时间+篇幅的限制\",{\"1\":{\"788\":1}}],[\"因为不用业务处理\",{\"1\":{\"758\":1}}],[\"因为不同的生命周期的解析动作是不同的\",{\"1\":{\"287\":1}}],[\"因为消息队列维护了消费的位置\",{\"1\":{\"756\":1}}],[\"因为有专业的轮子\",{\"1\":{\"727\":1}}],[\"因为有虚拟内存的机制\",{\"1\":{\"651\":1}}],[\"因为redis执行命令是单线程的\",{\"1\":{\"724\":1}}],[\"因为redis命令就是从客户端发出的\",{\"1\":{\"710\":1}}],[\"因为redis是基于内存的操作\",{\"1\":{\"673\":1}}],[\"因为对于应用系统而言\",{\"1\":{\"709\":1}}],[\"因为哈希算法有一定的碰撞的概率\",{\"1\":{\"705\":1}}],[\"因为会丢失大量数据\",{\"1\":{\"680\":1}}],[\"因为会与层叠样式表\",{\"1\":{\"615\":1}}],[\"因为定时生成\",{\"1\":{\"678\":1}}],[\"因为当缺页中断发生时\",{\"1\":{\"658\":1}}],[\"因为很多资源就是只能被一个线程占用\",{\"1\":{\"648\":1}}],[\"因为虚拟内存是共享的\",{\"1\":{\"643\":1}}],[\"因为进程切换都要保存进程的信息并且载入新进程的信息\",{\"1\":{\"640\":1}}],[\"因为短作业必须一直等待前面的长作业执行完毕才能执行\",{\"1\":{\"640\":1}}],[\"因为孤儿进程会被\",{\"1\":{\"639\":1}}],[\"因为切换速度足够快\",{\"1\":{\"635\":1}}],[\"因为切换的时间特别短\",{\"1\":{\"298\":1}}],[\"因为数据同步传送的数据量比一个请求和应答的数据量要多\",{\"1\":{\"600\":1}}],[\"因为用户一般来说可以接受图像稍微模糊一点\",{\"1\":{\"598\":1}}],[\"因为用锁为的就是互斥\",{\"1\":{\"342\":1}}],[\"因为传输中需要对数据确认\",{\"1\":{\"597\":1}}],[\"因为发送端并不清楚这连续的三个\",{\"1\":{\"592\":1}}],[\"因为某些原因没收到\",{\"1\":{\"592\":1}}],[\"因为收到新数据的\",{\"1\":{\"589\":1}}],[\"因为每个\",{\"1\":{\"584\":1}}],[\"因为如果一直有短作业到来\",{\"1\":{\"640\":1}}],[\"因为如果允许携带数据\",{\"1\":{\"572\":1}}],[\"因为如果要牺牲分区容错性\",{\"1\":{\"191\":1}}],[\"因为可能会长时间锁表\",{\"1\":{\"537\":1}}],[\"因为可能会碰撞\",{\"1\":{\"258\":2}}],[\"因为索引文件是单独存在的文件\",{\"1\":{\"536\":1}}],[\"因为即使用户改了自己的自我介绍\",{\"1\":{\"528\":1}}],[\"因为表上有意向排他锁之后事务\",{\"1\":{\"514\":1}}],[\"因为建立搜索树的时候\",{\"1\":{\"509\":1}}],[\"因为叶子节点上有下一个数据区的指针\",{\"1\":{\"504\":1}}],[\"因为多张表的连表查询性能很低\",{\"1\":{\"490\":1}}],[\"因为关联的时候\",{\"1\":{\"490\":1}}],[\"因为子查询是嵌套查询\",{\"1\":{\"490\":1}}],[\"因为早期的\",{\"1\":{\"489\":1}}],[\"因为存储引擎是基于表的\",{\"1\":{\"476\":1}}],[\"因为长度不固定\",{\"1\":{\"461\":1}}],[\"因为长度固定\",{\"1\":{\"461\":1}}],[\"因为sql语句的where条件不一定\",{\"1\":{\"433\":1}}],[\"因为导出订单数据本来就非常慢\",{\"1\":{\"413\":1}}],[\"因为订单信息导出这个方法可能会有几万的数据量\",{\"1\":{\"413\":1}}],[\"因为是偶发性的\",{\"1\":{\"413\":1}}],[\"因为我们系统是业务相对复杂\",{\"1\":{\"406\":1}}],[\"因为新生代的存活对象比较少\",{\"1\":{\"395\":1,\"396\":1}}],[\"因为操作系统给每个进程分配的内存是有限的\",{\"1\":{\"388\":1}}],[\"因为没有核心线程\",{\"1\":{\"364\":1}}],[\"因为线程其实也是一个对象\",{\"1\":{\"351\":1}}],[\"因为线程有几率不阻塞直接获得锁\",{\"1\":{\"332\":1}}],[\"因为都是io密集型任务\",{\"1\":{\"348\":1}}],[\"因为它们在read调⽤时\",{\"1\":{\"663\":1}}],[\"因为它们记录了对于\",{\"1\":{\"479\":1}}],[\"因为它也有\",{\"1\":{\"584\":1}}],[\"因为它无法利用索引\",{\"1\":{\"492\":1}}],[\"因为它不仅满足我们低停顿的要求\",{\"1\":{\"406\":1}}],[\"因为它可以重复利用\",{\"1\":{\"346\":1}}],[\"因为它的吞吐量比较大\",{\"1\":{\"333\":1}}],[\"因为countdownlatch的使用是一次性的\",{\"1\":{\"346\":1}}],[\"因为变量的类型有很多种\",{\"1\":{\"340\":1}}],[\"因为a和b线程在更新变量i的时候拿到的i都是1\",{\"1\":{\"340\":1}}],[\"因为as\",{\"1\":{\"326\":1}}],[\"因为访问静态\",{\"1\":{\"324\":1}}],[\"因为静态成员不属于任何⼀个实例对象\",{\"1\":{\"324\":1}}],[\"因为这种进程每次进行i\",{\"1\":{\"640\":1}}],[\"因为这种重排序会改变执行结果\",{\"1\":{\"321\":1}}],[\"因为这样\",{\"1\":{\"167\":1}}],[\"因为真正要占用cpu运行的是线程\",{\"1\":{\"299\":1}}],[\"因为类的结构变了\",{\"1\":{\"282\":1}}],[\"因为在通常情况下\",{\"1\":{\"678\":1}}],[\"因为在\",{\"1\":{\"276\":1}}],[\"因为根据实践发现大部分的数据操作都集中在值比较小的范围\",{\"1\":{\"269\":1}}],[\"因为循环一次就会创建一个新的\",{\"1\":{\"266\":1}}],[\"因为本质上加号拼接的效果最终经过编译器处理之后和\",{\"1\":{\"266\":1}}],[\"因为前面调用过一次\",{\"1\":{\"256\":1}}],[\"因为第一个条件如果不成立\",{\"1\":{\"241\":1}}],[\"因为加入了超时机制\",{\"1\":{\"203\":1}}],[\"因为除了\",{\"1\":{\"186\":1}}],[\"因为元素个数超出\",{\"1\":{\"177\":1}}],[\"因为n变为2倍\",{\"1\":{\"174\":1}}],[\"因为hashmap的初始容量是2的次幂\",{\"1\":{\"174\":1}}],[\"因为\",{\"1\":{\"167\":1,\"175\":1,\"236\":1,\"239\":1,\"285\":2,\"440\":1,\"465\":1,\"553\":1,\"562\":1,\"580\":1,\"592\":1,\"594\":1,\"730\":2,\"732\":1,\"804\":1}}],[\"因此部署集群时所有主节点最少需要部署在3台物理机上才能避免单点问题\",{\"1\":{\"698\":1}}],[\"因此只能有一个从节点获得n\",{\"1\":{\"698\":1}}],[\"因此会把它们当作psync参数发送给主节点\",{\"1\":{\"685\":1}}],[\"因此主节点会把这期间写命令数据保存在复制客户端缓冲区内\",{\"1\":{\"685\":1}}],[\"因此说主从复制是\",{\"1\":{\"682\":1}}],[\"因此都需要遍历⽂件描述符集合来找到可读或可写的socke\",{\"1\":{\"664\":1}}],[\"因此段对用户是可见的\",{\"1\":{\"656\":1}}],[\"因此⼤多数操作系统\",{\"1\":{\"632\":1}}],[\"因此有人将跨站脚本攻击缩写为\",{\"1\":{\"615\":1}}],[\"因此一些高级用户可以通过网络设置让\",{\"1\":{\"612\":1}}],[\"因此一些资料中它也被称作\",{\"1\":{\"379\":1}}],[\"因此同一个\",{\"1\":{\"605\":1}}],[\"因此为了保证数据的正确性\",{\"1\":{\"600\":1}}],[\"因此服务器端只有采用\",{\"1\":{\"598\":1}}],[\"因此服务端接收到客户端发送来的数据时会发送\",{\"1\":{\"570\":1}}],[\"因此也有可能会因为其他主机之间的通信使得⽹络拥堵\",{\"1\":{\"585\":1}}],[\"因此不能立即关闭连接\",{\"1\":{\"578\":1}}],[\"因此不推荐使用\",{\"1\":{\"256\":1}}],[\"因此开始向服务端发送数据\",{\"1\":{\"570\":1}}],[\"因此绝大部分的\",{\"1\":{\"553\":1}}],[\"因此对大小没有限制\",{\"1\":{\"553\":1}}],[\"因此可以认为\",{\"1\":{\"523\":1}}],[\"因此可以通过增大新生代空间\",{\"1\":{\"416\":1}}],[\"因此系统可以在启动时使用这些日志来重新执行或\",{\"1\":{\"519\":1}}],[\"因此系统崩溃\",{\"1\":{\"482\":1}}],[\"因此读取磁盘的次数就降下来啦\",{\"1\":{\"503\":1}}],[\"因此是不能被共享的\",{\"1\":{\"435\":1}}],[\"因此所有的加载请求最终都应该传送到最顶层的启动类加载器中\",{\"1\":{\"424\":1}}],[\"因此这类开销积少成多也是一项极为可观的执行成本\",{\"1\":{\"386\":1}}],[\"因此这种方式在高并发\",{\"1\":{\"196\":1}}],[\"因此我们需要考虑线程池异常情况\",{\"1\":{\"366\":1}}],[\"因此要等到safepoint时执行\",{\"1\":{\"328\":1}}],[\"因此在最终执行的指令序列中\",{\"1\":{\"321\":1}}],[\"因此性能比\",{\"1\":{\"266\":1}}],[\"因此深拷贝是安全的\",{\"1\":{\"260\":1}}],[\"因此引用类型也是值传递\",{\"1\":{\"259\":1}}],[\"因此需要强制类型转换float\",{\"1\":{\"239\":1}}],[\"因此必须调用操作系统的多线程功能来进行多线程程序设计\",{\"1\":{\"232\":1}}],[\"因此采用\",{\"1\":{\"232\":1}}],[\"因此它是从业务无侵入的两阶段提交\",{\"1\":{\"208\":1}}],[\"因此新的index就会发生这样的变化\",{\"1\":{\"174\":1}}],[\"因此\",{\"1\":{\"157\":1,\"177\":1,\"231\":1,\"233\":1,\"236\":1,\"239\":1,\"258\":1,\"269\":1,\"435\":1,\"467\":1,\"491\":1,\"560\":1,\"577\":1,\"580\":1,\"613\":1,\"632\":1,\"641\":1,\"668\":1,\"766\":1,\"777\":1}}],[\"扰动函数\",{\"1\":{\"167\":1}}],[\"扰动函数能降hash碰撞\",{\"0\":{\"167\":1}}],[\"扰动函数是怎么设计的\",{\"0\":{\"166\":1}}],[\"遍历所有节点的路径\",{\"1\":{\"732\":1}}],[\"遍历完成之后\",{\"1\":{\"314\":1}}],[\"遍历node数组\",{\"1\":{\"181\":1}}],[\"遍历hashentry\",{\"1\":{\"180\":1}}],[\"遍历链表\",{\"1\":{\"175\":1}}],[\"遍历链表查找\",{\"1\":{\"165\":1}}],[\"遍历下一个元素之前\",{\"1\":{\"157\":1}}],[\"先从单例缓存中取\",{\"1\":{\"788\":1}}],[\"先将分配到的消息队列集合\",{\"1\":{\"777\":1}}],[\"先将数据交给本主机的应用层\",{\"1\":{\"544\":1}}],[\"先看图\",{\"1\":{\"746\":1}}],[\"先看流程图\",{\"1\":{\"165\":1}}],[\"先分析一下无底洞问题\",{\"1\":{\"713\":1}}],[\"先删缓存\",{\"1\":{\"707\":1}}],[\"先更数据库还是先删缓存\",{\"1\":{\"707\":1}}],[\"先更数据\",{\"1\":{\"707\":1}}],[\"先把槽和数据迁移到其它节点\",{\"1\":{\"699\":1}}],[\"先检查a\",{\"1\":{\"672\":1}}],[\"先检查该语句是否有权限\",{\"1\":{\"473\":1}}],[\"先来先占\",{\"1\":{\"727\":1}}],[\"先来先服务的原则排成一个队列\",{\"1\":{\"640\":1}}],[\"先来先服务\",{\"1\":{\"640\":1}}],[\"先来看看阻塞i\",{\"1\":{\"663\":1}}],[\"先来看看什么是\",{\"1\":{\"566\":1}}],[\"先来看下什么叫\",{\"1\":{\"591\":1}}],[\"先带大家预览一下这本册子\",{\"1\":{\"624\":1}}],[\"先给大家看看\",{\"1\":{\"620\":1}}],[\"先获取目标机器\",{\"1\":{\"609\":1}}],[\"先送到了\",{\"1\":{\"592\":1}}],[\"先摸清当前的网络拥堵状态后\",{\"1\":{\"581\":1}}],[\"先发出少量数据\",{\"1\":{\"581\":1}}],[\"先回一个\",{\"1\":{\"575\":1}}],[\"先是建⽴三次握⼿\",{\"1\":{\"559\":1}}],[\"先在从库添加\",{\"1\":{\"537\":1}}],[\"先在本地缓冲区中分配\",{\"1\":{\"384\":1}}],[\"先写日志\",{\"1\":{\"519\":1}}],[\"先写入\",{\"1\":{\"482\":2}}],[\"先通过辅助索引找到主键索引的键值\",{\"1\":{\"507\":1}}],[\"先通过\",{\"1\":{\"488\":1}}],[\"先生成了一个statementhandler实例\",{\"1\":{\"448\":1}}],[\"先吹一下\",{\"1\":{\"433\":1}}],[\"先引发\",{\"1\":{\"417\":1}}],[\"先观察垃圾回收的情况\",{\"1\":{\"415\":1}}],[\"先找到了几个正在运行的业务线程\",{\"1\":{\"413\":1}}],[\"先停止接收外部提交的任务\",{\"1\":{\"358\":1}}],[\"先进先出置换\",{\"1\":{\"658\":1}}],[\"先进先出置换算法\",{\"1\":{\"658\":1}}],[\"先进先出的特性\",{\"1\":{\"331\":1}}],[\"先进行插入\",{\"1\":{\"175\":1}}],[\"先读取i的值\",{\"1\":{\"318\":1}}],[\"先对topic下的消息消费队列\",{\"1\":{\"777\":1}}],[\"先对这个\",{\"1\":{\"694\":1}}],[\"先对\",{\"1\":{\"294\":1}}],[\"先赋值\",{\"1\":{\"245\":2}}],[\"先自增\",{\"1\":{\"245\":2}}],[\"先查询一下数据\",{\"1\":{\"225\":1}}],[\"先根据requestid等字段先select一下数据\",{\"1\":{\"225\":1}}],[\"先判断是否需要扩容\",{\"1\":{\"175\":1}}],[\"先上个流程图吧\",{\"1\":{\"164\":1}}],[\"判断该processqueue是否已经过期了\",{\"1\":{\"777\":1}}],[\"判断当前redis并发量是否已经达到极限\",{\"1\":{\"718\":1}}],[\"判断是不是1\",{\"1\":{\"705\":1}}],[\"判断是否有资格替换故障\",{\"1\":{\"698\":1}}],[\"判断是否有空闲线程\",{\"1\":{\"364\":1}}],[\"判断是否为可偏向状态\",{\"1\":{\"328\":1}}],[\"判断是否超过阈值\",{\"1\":{\"164\":1}}],[\"判断用户的身份和状态\",{\"1\":{\"566\":1}}],[\"判断\",{\"1\":{\"497\":1}}],[\"判断索引是否失效的时候常用\",{\"1\":{\"493\":1}}],[\"判断字符长度是否大于0\",{\"1\":{\"270\":1}}],[\"判断两个对象是不是同⼀个对象\",{\"1\":{\"257\":1}}],[\"判断tab\",{\"1\":{\"164\":1}}],[\"判断tab是否位空或者长度为0\",{\"1\":{\"164\":1}}],[\"根本不具有并发能力\",{\"1\":{\"672\":1}}],[\"根本不能进行字符串的\",{\"1\":{\"241\":1}}],[\"根域名服务器返回负责com的顶级域名服务器的\",{\"1\":{\"547\":1}}],[\"根节点和枝节点不保存数据区\",{\"1\":{\"504\":1}}],[\"根节点永远是黑色的\",{\"1\":{\"162\":1}}],[\"根据结果更新全局事务的状态\",{\"1\":{\"872\":1}}],[\"根据定义的规则对请求进行限流控制\",{\"1\":{\"859\":1}}],[\"根据实际的需求来选择对应的技术方案\",{\"1\":{\"829\":1}}],[\"根据业务拆分成一个一个的服务\",{\"1\":{\"824\":1}}],[\"根据类型进行自动匹配\",{\"1\":{\"796\":1}}],[\"根据名称进行自动匹配\",{\"1\":{\"796\":1}}],[\"根据bean定义\",{\"1\":{\"788\":1}}],[\"根据topic和consumergroup为参数调用mqclientfactory\",{\"1\":{\"777\":1}}],[\"根据tag过滤\",{\"1\":{\"762\":1}}],[\"根据负载均衡算法选择一台服务器来发送消息\",{\"1\":{\"769\":1}}],[\"根据事务的状态提交\",{\"1\":{\"765\":1}}],[\"根据预估的数据规模来进行分片\",{\"1\":{\"719\":1}}],[\"根据键值对象的ttl属性\",{\"1\":{\"717\":1}}],[\"根据lru算法删除键\",{\"1\":{\"717\":1}}],[\"根据lru算法删除设置了超时属性\",{\"1\":{\"717\":1}}],[\"根据cap理论\",{\"1\":{\"706\":1,\"770\":1}}],[\"根据拓扑复杂性可以分为以下三种\",{\"1\":{\"683\":1}}],[\"根据锁的实现不同\",{\"1\":{\"645\":1}}],[\"根据目的主机返回的\",{\"1\":{\"609\":1}}],[\"根据最左匹配原则\",{\"1\":{\"509\":1,\"510\":1}}],[\"根据关联\",{\"1\":{\"493\":1}}],[\"根据这个主键值再去过滤并\",{\"1\":{\"488\":1}}],[\"根据dialect方言\",{\"1\":{\"454\":1}}],[\"根据对象映射规则\",{\"1\":{\"448\":1}}],[\"根据条件来组成where子句\",{\"1\":{\"444\":1}}],[\"根据表达式的值动态拼接sql\",{\"1\":{\"444\":1}}],[\"根据指定的执行时间从小到大排序\",{\"1\":{\"356\":1}}],[\"根据上面得到的是否负数\",{\"1\":{\"270\":1}}],[\"根据\",{\"1\":{\"182\":1,\"470\":1,\"531\":1,\"592\":1,\"796\":1}}],[\"根据哈希值计算下标\",{\"1\":{\"164\":1}}],[\"^\",{\"1\":{\"164\":1,\"166\":1}}],[\"染⾊\",{\"1\":{\"163\":1}}],[\"旋转分为两种\",{\"1\":{\"163\":1}}],[\"旋转\",{\"1\":{\"163\":1}}],[\"旋转和染色\",{\"1\":{\"163\":1}}],[\"查\",{\"1\":{\"552\":1}}],[\"查看是否可以获取当前消费处理队列的锁\",{\"1\":{\"777\":1}}],[\"查看是否有线程长时间的\",{\"1\":{\"414\":1}}],[\"查看死锁日志\",{\"1\":{\"516\":1}}],[\"查看一下执行计划\",{\"1\":{\"493\":1}}],[\"查看堆的摘要信息\",{\"1\":{\"418\":1}}],[\"查看堆内存中的存活对象\",{\"1\":{\"417\":1}}],[\"查看堆内存各区域的使用率以及gc情况\",{\"1\":{\"417\":1}}],[\"查看堆内存占用空间最大的前\",{\"1\":{\"415\":1}}],[\"查看进程下的所有线程占\",{\"1\":{\"418\":1}}],[\"查看进程使用\",{\"1\":{\"418\":1}}],[\"查看运行的\",{\"1\":{\"418\":1}}],[\"查看监控\",{\"1\":{\"417\":1}}],[\"查看\",{\"1\":{\"415\":1,\"418\":1,\"538\":1}}],[\"查看到占用内存最大的对象是\",{\"1\":{\"413\":1}}],[\"查找并加载所有可用初始化器\",{\"1\":{\"822\":1}}],[\"查找\",{\"1\":{\"812\":1}}],[\"查找与当前实例化\",{\"1\":{\"812\":1}}],[\"查找对应的\",{\"1\":{\"566\":1}}],[\"查找效率更稳定\",{\"1\":{\"503\":1}}],[\"查找时间成本降低\",{\"1\":{\"173\":1}}],[\"查找的过程只经过了一个层\",{\"1\":{\"732\":1}}],[\"查找的时间成本就增加了\",{\"1\":{\"173\":1}}],[\"查找的最坏时间复杂度都为\",{\"1\":{\"162\":1}}],[\"查找红黑树\",{\"1\":{\"165\":1}}],[\"查询符合条件的所有待处理的任务\",{\"1\":{\"723\":1}}],[\"查询失败\",{\"1\":{\"606\":1}}],[\"查询此目的主机对应的\",{\"1\":{\"606\":1}}],[\"查询走新库\",{\"1\":{\"532\":1}}],[\"查询走老库\",{\"1\":{\"532\":1}}],[\"查询结果就不包含该记录\",{\"1\":{\"523\":1}}],[\"查询一个范围的结果集\",{\"1\":{\"521\":1}}],[\"查询效率就快\",{\"1\":{\"503\":1}}],[\"查询是否够快\",{\"1\":{\"503\":1}}],[\"查询数据最多需要访问\",{\"1\":{\"502\":1}}],[\"查询时的条件列不是联合索引中的第一个列\",{\"1\":{\"498\":1}}],[\"查询时命中主键primary\",{\"1\":{\"493\":1}}],[\"查询条件包含\",{\"1\":{\"498\":1}}],[\"查询条件list集合\",{\"1\":{\"49\":1}}],[\"查询优化器根据统计信息\",{\"1\":{\"493\":1}}],[\"查询使用了两个以上的索引\",{\"1\":{\"493\":1}}],[\"查询的类型\",{\"1\":{\"493\":1}}],[\"查询的时候只有匹配了前一个\",{\"1\":{\"509\":1}}],[\"查询的时候\",{\"1\":{\"487\":1}}],[\"查询中都会失效\",{\"1\":{\"492\":1}}],[\"查询速度就被加快了\",{\"1\":{\"490\":1}}],[\"查询可能会导致索引失效\",{\"1\":{\"489\":1}}],[\"查询语句\",{\"1\":{\"510\":1}}],[\"查询语句在\",{\"0\":{\"473\":1}}],[\"查询语句的执行顺序\",{\"0\":{\"470\":1}}],[\"查询就是一个普通的关联查询\",{\"1\":{\"441\":1}}],[\"查询就是普通的关联查\",{\"1\":{\"441\":1}}],[\"查询\",{\"1\":{\"441\":1,\"489\":2,\"536\":1}}],[\"查询未做分页\",{\"1\":{\"417\":1}}],[\"查询返回list集合\",{\"1\":{\"49\":1}}],[\"从技术角度看就是一种小而独立的处理过程\",{\"1\":{\"824\":1}}],[\"从三级缓存通过对象⼯⼚拿到\",{\"1\":{\"800\":1}}],[\"从三个不同维度对索引分类\",{\"1\":{\"495\":1}}],[\"从缓存中获取bean\",{\"1\":{\"788\":1}}],[\"从缓存层面来看\",{\"1\":{\"712\":1}}],[\"从bean缓存中取\",{\"1\":{\"788\":1}}],[\"从rebalanceimpl实例的本地缓存变量\",{\"1\":{\"777\":1}}],[\"从内核态内存复制到用户态内存\",{\"1\":{\"773\":1}}],[\"从磁盘复制数据到内核态内存\",{\"1\":{\"773\":1}}],[\"从图中我们可以明显看出来文件名的偏移量\",{\"1\":{\"771\":1}}],[\"从consumer角度分析\",{\"1\":{\"756\":1}}],[\"从功能层面来看\",{\"1\":{\"712\":1}}],[\"从从同步\",{\"1\":{\"682\":1}}],[\"从节点优先级\",{\"1\":{\"690\":1}}],[\"从节点升级为新的主节点\",{\"1\":{\"687\":1}}],[\"从节点会再次连上主节点\",{\"1\":{\"685\":1}}],[\"从节点会向\",{\"1\":{\"685\":1}}],[\"从节点成功加载完rdb后\",{\"1\":{\"685\":1}}],[\"从节点清空数据后开始加载rdb文件\",{\"1\":{\"685\":1}}],[\"从节点接收完主节点传送来的全部数据后会清空自身旧数据\",{\"1\":{\"685\":1}}],[\"从节点接收主节点的响应数据保存运行id和偏移量offset\",{\"1\":{\"685\":1}}],[\"从节点把接收的rdb文件保存在本地并直接作为从节点的数据文件\",{\"1\":{\"685\":1}}],[\"从节点没有复制偏移量和主节点的运行id\",{\"1\":{\"685\":1}}],[\"从节点必须正确的密码才能通过验证\",{\"1\":{\"684\":1}}],[\"从节点\",{\"1\":{\"682\":1,\"684\":1,\"688\":2,\"698\":1}}],[\"从⽽整体提⾼redis的性能\",{\"1\":{\"674\":1}}],[\"从中找到指定的物理页号\",{\"1\":{\"653\":1}}],[\"从管道的一端写入数据\",{\"1\":{\"641\":1}}],[\"从用户角度看\",{\"1\":{\"636\":1}}],[\"从其他层面来看\",{\"1\":{\"553\":1}}],[\"从数据库层面来看\",{\"1\":{\"553\":1}}],[\"从浏览器地址栏输入\",{\"0\":{\"546\":1}}],[\"从下层到上层\",{\"1\":{\"544\":1}}],[\"从上面过程可知\",{\"1\":{\"575\":1}}],[\"从上层到下层层层包装\",{\"1\":{\"544\":1}}],[\"从上图可以看出\",{\"1\":{\"481\":1}}],[\"从分表的角度来看\",{\"1\":{\"534\":1}}],[\"从分库的角度来讲\",{\"1\":{\"534\":1}}],[\"从机只负责读操作\",{\"1\":{\"525\":1}}],[\"从这张图可以看出来\",{\"1\":{\"509\":1}}],[\"从效率上说\",{\"1\":{\"468\":1}}],[\"从菜单\",{\"1\":{\"418\":1}}],[\"从代码和业务场景中定位具体问题\",{\"1\":{\"415\":1}}],[\"从代码逻辑中找到问题所在\",{\"1\":{\"414\":1}}],[\"从打印出来的线程信息中找到上一步转换为\",{\"1\":{\"414\":1}}],[\"从回收内存的角度看\",{\"1\":{\"379\":1}}],[\"从队列取任务\",{\"1\":{\"362\":1}}],[\"从jdk6开始\",{\"1\":{\"327\":1}}],[\"从java源代码到最终实际执行的指令序列\",{\"1\":{\"319\":1}}],[\"从前往后依次执行\",{\"1\":{\"318\":1}}],[\"从thread\",{\"1\":{\"302\":1}}],[\"从操作系统的角度来看\",{\"1\":{\"298\":1}}],[\"从变量在内存中的⽣存时间上看\",{\"1\":{\"253\":1}}],[\"从变量在内存中的存储⽅式来看\",{\"1\":{\"253\":1}}],[\"从语法形式上看\",{\"1\":{\"253\":1}}],[\"从设计层⾯来说\",{\"1\":{\"252\":1}}],[\"从\",{\"1\":{\"242\":2,\"280\":1,\"403\":1,\"404\":1,\"553\":1,\"560\":1,\"580\":1,\"820\":1}}],[\"从而极大地提高了文件的读写效率\",{\"1\":{\"772\":1}}],[\"从而保证服务能够正常工作\",{\"1\":{\"834\":1}}],[\"从而保证集群的高可用\",{\"1\":{\"698\":1}}],[\"从而保证了事务的原子性\",{\"1\":{\"519\":1}}],[\"从而无法向前推进\",{\"1\":{\"649\":1}}],[\"从而对抗\",{\"1\":{\"614\":1}}],[\"从而形成拒绝服务攻击\",{\"1\":{\"614\":1}}],[\"从而计算出往返时间\",{\"1\":{\"609\":1}}],[\"从而大大减少了路由器所需要的内存\",{\"1\":{\"607\":1}}],[\"从而大大提高了响应速度\",{\"1\":{\"600\":1}}],[\"从而一定程度上缓解了\",{\"1\":{\"605\":1}}],[\"从而引起不必要的重传\",{\"1\":{\"591\":1}}],[\"从而恶性循环\",{\"1\":{\"591\":1}}],[\"从而达到快速访问节点的目的\",{\"1\":{\"732\":1}}],[\"从而达到恶意攻击用户的特殊目的\",{\"1\":{\"615\":1}}],[\"从而达到流量控制的目的\",{\"1\":{\"583\":1}}],[\"从而达到数据的最终一致性\",{\"1\":{\"193\":1}}],[\"从而比三次握手导致多了一次\",{\"1\":{\"575\":1}}],[\"从而解决并发访问情况下的读一致性问题\",{\"1\":{\"523\":1}}],[\"从而影响了查询的效率\",{\"1\":{\"489\":1}}],[\"从而使用户无法对原域名来进行解析以访问目标地址\",{\"1\":{\"612\":1}}],[\"从而使用户访问到错误的网站\",{\"1\":{\"612\":1}}],[\"从而使用共享变量时需要从主内存中重新读取最新的值\",{\"1\":{\"326\":1}}],[\"从而使得id=2这一行的数据没有被更新\",{\"1\":{\"482\":1}}],[\"从而起到线程隔离的作用\",{\"1\":{\"308\":1}}],[\"从而实现服务的发现\",{\"1\":{\"837\":1}}],[\"从而实现对业务逻辑的隔离\",{\"1\":{\"804\":1}}],[\"从而实现了线程隔离\",{\"1\":{\"310\":1}}],[\"从而实现\",{\"1\":{\"235\":1}}],[\"从而导致元素的丢失\",{\"1\":{\"177\":1}}],[\"从结构上说\",{\"1\":{\"180\":1}}],[\"从冲突的位置x开始\",{\"1\":{\"171\":1}}],[\"从冲突的位置开始\",{\"1\":{\"171\":1}}],[\"从冲突的位置拉一个链表\",{\"1\":{\"161\":1}}],[\"从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点\",{\"1\":{\"162\":1}}],[\"所用时间相对也少很多\",{\"1\":{\"707\":1}}],[\"所收养\",{\"1\":{\"639\":1}}],[\"所独有的\",{\"1\":{\"472\":1}}],[\"所对应的\",{\"1\":{\"265\":1}}],[\"所使⽤的散列算法也许刚好会让多个对象传回相同的散列值\",{\"1\":{\"258\":1}}],[\"所在的下标位置\",{\"1\":{\"258\":1}}],[\"所修饰\",{\"1\":{\"253\":2}}],[\"所谓通知指的就是指拦截到连接点之后要执行的代码\",{\"1\":{\"804\":1}}],[\"所谓渐进式rehash\",{\"1\":{\"731\":1}}],[\"所谓缓存预热\",{\"1\":{\"711\":1}}],[\"所谓本地缓存\",{\"1\":{\"709\":1}}],[\"所谓\",{\"1\":{\"584\":2}}],[\"所谓吞吐量\",{\"1\":{\"401\":1}}],[\"所谓按序申请\",{\"1\":{\"342\":1,\"648\":1}}],[\"所谓函数式接口\",{\"1\":{\"292\":1}}],[\"所谓的ioc\",{\"1\":{\"787\":1}}],[\"所谓的长轮询\",{\"1\":{\"778\":1}}],[\"所谓的\",{\"1\":{\"776\":1}}],[\"所谓的热key\",{\"1\":{\"710\":1}}],[\"所谓的reactor模式\",{\"1\":{\"672\":1}}],[\"所谓的多级页表\",{\"1\":{\"654\":1}}],[\"所谓的管道就是内核中的一串缓存\",{\"1\":{\"641\":1}}],[\"所谓的checkpoint\",{\"1\":{\"483\":1}}],[\"所谓的公平锁就是先等待的线程先获得锁\",{\"1\":{\"330\":1}}],[\"所谓的monitor其实是一种同步工具\",{\"1\":{\"325\":1}}],[\"所谓的泛型擦除\",{\"1\":{\"285\":1}}],[\"所谓的字节码\",{\"1\":{\"235\":1}}],[\"所谓碰撞也就是指的是不同的对象得到相同的\",{\"1\":{\"258\":1}}],[\"所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定\",{\"1\":{\"248\":1}}],[\"所谓跨平台性\",{\"1\":{\"234\":1}}],[\"所谓分区指的是分布式系统可能出现的字区域网络不通\",{\"1\":{\"191\":1}}],[\"所拥有的⼀切\",{\"1\":{\"233\":1}}],[\"所有线程共享\",{\"1\":{\"798\":1}}],[\"所有客户端的请求都是通过代理端完成的\",{\"1\":{\"710\":1}}],[\"所有已启动进程都将收到该进程\",{\"1\":{\"641\":1}}],[\"所有数据都要重分布\",{\"1\":{\"531\":2}}],[\"所有事务中的操作都会被回滚\",{\"1\":{\"519\":1}}],[\"所有可以适当的增加冗余字段\",{\"1\":{\"490\":1}}],[\"所有跨存储引擎的功能都在这一层实现\",{\"1\":{\"472\":1}}],[\"所有被使用过的内存都被放在一边\",{\"1\":{\"383\":1}}],[\"所有被屏障拦截的线程才会继续运行\",{\"1\":{\"346\":1}}],[\"所有玩家已经就位\",{\"1\":{\"345\":1}}],[\"所有待进入的线程都必须先在入口entry\",{\"1\":{\"325\":1}}],[\"所有输出流的基类\",{\"1\":{\"278\":1}}],[\"所有⽅法在接⼝中不能有实现\",{\"1\":{\"252\":1}}],[\"所有的写入命令会追加到aof\",{\"1\":{\"676\":1}}],[\"所有的语句都被保存\",{\"1\":{\"482\":1}}],[\"所有的表都保存在同一个数据文件中\",{\"1\":{\"477\":1}}],[\"所有的实例都是由类加载器\",{\"1\":{\"428\":1}}],[\"所有的对象都分配到堆上也渐渐变得不那么\",{\"1\":{\"408\":1}}],[\"所有的对象实例都在这里分配内存\",{\"1\":{\"379\":1}}],[\"所有的类型信息都会被擦掉\",{\"1\":{\"285\":1}}],[\"所有的输入流的基类\",{\"1\":{\"278\":1}}],[\"所有的子类都重写这个方法\",{\"1\":{\"272\":1}}],[\"所有的数值型变量可以相互转换\",{\"1\":{\"239\":1}}],[\"所有的叶子节点都是是黑色的\",{\"1\":{\"162\":1}}],[\"所有除\",{\"1\":{\"221\":1}}],[\"所有跟随者\",{\"1\":{\"221\":1}}],[\"所有集群中的\",{\"1\":{\"221\":1}}],[\"所属的类实现\",{\"1\":{\"184\":1}}],[\"所得余数为地址\",{\"1\":{\"170\":1}}],[\"所以说它生成的类是没有额外运行时开销的\",{\"1\":{\"807\":1}}],[\"所以说下面的一些同步机制不止针对线程\",{\"1\":{\"645\":1}}],[\"所以对于单例的对象\",{\"1\":{\"806\":1}}],[\"所以对象访问方式也是由虚拟机实现而定的\",{\"1\":{\"386\":1}}],[\"所以自然是无法支持了\",{\"1\":{\"800\":1}}],[\"所以里面有操作的空间\",{\"1\":{\"800\":1}}],[\"所以去实例化\",{\"1\":{\"800\":1}}],[\"所以简单总结\",{\"1\":{\"799\":1}}],[\"所以只要集群部署就可以保证高可用\",{\"1\":{\"767\":1}}],[\"所以消息被哪个\",{\"1\":{\"761\":1}}],[\"所以消费完的消息并不会立即被删除\",{\"1\":{\"744\":1}}],[\"所以要从这三个阶段考虑\",{\"1\":{\"753\":1}}],[\"所以要么\",{\"1\":{\"184\":1}}],[\"所以选择了低延迟\",{\"1\":{\"741\":1}}],[\"所以目标节点在跳跃表中的排位为3\",{\"1\":{\"732\":1}}],[\"所以redis会每次随机取⼀些key去做检查和删除\",{\"1\":{\"716\":1}}],[\"所以得想办法通知集群所有节点\",{\"1\":{\"709\":1}}],[\"所以缓存和数据库的绝对一致是不可能实现的\",{\"1\":{\"706\":1}}],[\"所以发送psync\",{\"1\":{\"685\":1}}],[\"所以发送⽅超时后\",{\"1\":{\"594\":1}}],[\"所以软链接是可以跨⽂件系统的\",{\"1\":{\"660\":1}}],[\"所以访问软链接的时候\",{\"1\":{\"660\":1}}],[\"所以孤儿进程不会对系统造成危害\",{\"1\":{\"639\":1}}],[\"所以宏观上表现为在一段时间内能同时运行多个程序\",{\"1\":{\"635\":1}}],[\"所以作者在写面渣逆袭系列的时候\",{\"1\":{\"621\":1}}],[\"所以网络开销也会相对大\",{\"1\":{\"598\":1}}],[\"所以没有必要像\",{\"1\":{\"589\":1}}],[\"所以就引入了i\",{\"1\":{\"664\":1}}],[\"所以就⽤分段\",{\"1\":{\"652\":1}}],[\"所以就衍⽣出了\",{\"1\":{\"584\":1}}],[\"所以就没用上索引\",{\"1\":{\"509\":1}}],[\"所以⼀来⼀回需要等待\",{\"1\":{\"576\":1}}],[\"所以服务端的\",{\"1\":{\"575\":1}}],[\"所以也是必须掌握知识点\",{\"1\":{\"574\":1}}],[\"所以也说线程是\",{\"1\":{\"299\":1}}],[\"所以字面意思\",{\"1\":{\"565\":1}}],[\"所以由它来给各个公钥签名\",{\"1\":{\"564\":1}}],[\"所以引入了i\",{\"1\":{\"663\":1}}],[\"所以引入了\",{\"1\":{\"562\":1}}],[\"所以当我们对数据的增加\",{\"1\":{\"536\":1}}],[\"所以当前线程会被阻塞\",{\"1\":{\"342\":1,\"647\":1}}],[\"所以该版本不可以被当前事务访问\",{\"1\":{\"523\":1}}],[\"所以该版本可以被当前事务访问\",{\"1\":{\"523\":2}}],[\"所以经常使用多个条件查询时更适合使用组合索引\",{\"1\":{\"497\":1}}],[\"所以创建索引\",{\"1\":{\"497\":1}}],[\"所以通过\",{\"1\":{\"482\":1}}],[\"所以一般采用如下方式\",{\"1\":{\"712\":1}}],[\"所以一般现代操作系统都会想办法把一部分内存块放到磁盘中\",{\"1\":{\"651\":1}}],[\"所以一般建议\",{\"1\":{\"282\":1}}],[\"所以一个节点可以保存更多的关键字\",{\"1\":{\"504\":1}}],[\"所以一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求\",{\"1\":{\"476\":1}}],[\"所以存储不了表情\",{\"1\":{\"466\":1}}],[\"所以存取速度要比\",{\"1\":{\"461\":1}}],[\"所以有的文章也称这种方式为\",{\"1\":{\"526\":1}}],[\"所以有一定的误差\",{\"1\":{\"465\":1}}],[\"所以有可能调用\",{\"1\":{\"256\":1}}],[\"所以无论是memcache还是redis的分布式\",{\"1\":{\"713\":1}}],[\"所以无论那个表大\",{\"1\":{\"464\":1}}],[\"所以无法以技术手段避免\",{\"1\":{\"427\":1}}],[\"所以无法找到存入的对象\",{\"1\":{\"389\":1}}],[\"所以无法响应中断的任务可能永远无法终止\",{\"1\":{\"358\":1}}],[\"所以会占据多余的空间\",{\"1\":{\"461\":1}}],[\"所以这就叫控制反转\",{\"1\":{\"787\":1}}],[\"所以这组命令顺序执行\",{\"1\":{\"724\":1}}],[\"所以这个\",{\"1\":{\"594\":1}}],[\"所以这个时候collection属性值就是传入的list或array对象在自己封装的map里面的key\",{\"1\":{\"445\":1}}],[\"所以这⼀次能够发送\",{\"1\":{\"586\":2}}],[\"所以这里也安排上了\",{\"1\":{\"623\":1}}],[\"所以这里\",{\"1\":{\"440\":1}}],[\"所以spring\",{\"1\":{\"830\":1}}],[\"所以sqlsessionfactory是应用级的生命周期\",{\"1\":{\"435\":1}}],[\"所以synchronized保证的有序是执行结果的有序性\",{\"1\":{\"326\":1}}],[\"所以synchronized保证同一时刻\",{\"1\":{\"326\":1}}],[\"所以分析排查内存泄漏问题首先还得从查看\",{\"1\":{\"418\":1}}],[\"所以先需要找出那个进程占用\",{\"1\":{\"414\":1}}],[\"所以第一次简单的认为就是堆内存不足导致\",{\"1\":{\"413\":1}}],[\"所以采用了\",{\"1\":{\"406\":1}}],[\"所以希望尽可能的利用处理器资源\",{\"1\":{\"406\":1}}],[\"所以静态集合引用的对象不能被释放\",{\"1\":{\"389\":1}}],[\"所以到最后\",{\"1\":{\"388\":1}}],[\"所以方法区的具体实现历经了许多变迁\",{\"1\":{\"379\":1}}],[\"所以需要持久化到磁盘中\",{\"1\":{\"774\":1}}],[\"所以需要一些手段来保证全局主键唯一\",{\"1\":{\"534\":1}}],[\"所以需要确定在read\",{\"1\":{\"523\":1}}],[\"所以需要继承recursivetask\",{\"1\":{\"373\":1}}],[\"所以需要加入过期时间\",{\"1\":{\"198\":1}}],[\"所以任务直接加到synchronousqueue队列\",{\"1\":{\"364\":1}}],[\"所以线程池的所有任务完成后\",{\"1\":{\"353\":1}}],[\"所以大家得一块出生\",{\"1\":{\"345\":1}}],[\"所以最终导致内存溢出\",{\"1\":{\"413\":1}}],[\"所以最终\",{\"1\":{\"321\":1}}],[\"所以最后的结果为\",{\"1\":{\"245\":1}}],[\"所以呢\",{\"1\":{\"311\":1}}],[\"所以基本对于用户是无感知的\",{\"1\":{\"298\":1}}],[\"所以基于tcc实现的分布式事务也可以看做是对业务的一种补偿机制\",{\"1\":{\"204\":1}}],[\"所以我们看一下它主要的工作流程\",{\"1\":{\"769\":1}}],[\"所以我们需要首先\",{\"1\":{\"795\":1}}],[\"所以我们需要一个方案来完成自动故障转移\",{\"1\":{\"687\":1}}],[\"所以我们需要\",{\"1\":{\"569\":1}}],[\"所以我们想要删除百万数据的时候可以先删除索引\",{\"1\":{\"536\":1}}],[\"所以我们线程池的工作流程也比较好理解了\",{\"1\":{\"353\":1}}],[\"所以我们就知道了\",{\"1\":{\"325\":1}}],[\"所以我们可以用此特性实现分布式锁\",{\"1\":{\"197\":1}}],[\"所以我上文写的是解析的时候\",{\"1\":{\"287\":1}}],[\"所以如果你没有定义一个\",{\"1\":{\"282\":1}}],[\"所以反序列化就是把二进制流恢复成对象\",{\"1\":{\"282\":1}}],[\"所以完整的\",{\"1\":{\"280\":1}}],[\"所以即使redis崩溃或者退出\",{\"1\":{\"676\":1}}],[\"所以即使\",{\"1\":{\"276\":1}}],[\"所以是先输出\",{\"1\":{\"276\":1}}],[\"所以超时的时间还需要加上\",{\"1\":{\"272\":1}}],[\"所以不用关心\",{\"1\":{\"817\":1}}],[\"所以不重写\",{\"1\":{\"272\":1}}],[\"所以不会出现热点key过期后产生的问题\",{\"1\":{\"712\":1}}],[\"所以不会再次调用\",{\"1\":{\"256\":1}}],[\"所以不会触发concurrent\",{\"1\":{\"157\":1}}],[\"所以后者可以理解为被前者包含\",{\"1\":{\"265\":1}}],[\"所以传递的时候可以理解为把变量存储的对象地址给传递过去\",{\"1\":{\"259\":1}}],[\"所以传入17\",{\"1\":{\"169\":1}}],[\"所以重写equal时必须重写hashcode方法\",{\"1\":{\"258\":1}}],[\"所以paxos算法的整体详细流程如下\",{\"1\":{\"216\":1}}],[\"所以性能会有损耗\",{\"1\":{\"205\":1}}],[\"所以为了避免这种情况可以记录一下发送次数\",{\"1\":{\"205\":1}}],[\"所以用zk实现分布式锁\",{\"1\":{\"197\":1}}],[\"所以get是不需要加锁的\",{\"1\":{\"180\":1}}],[\"所以\",{\"1\":{\"174\":1,\"191\":1,\"227\":1,\"279\":1,\"282\":1,\"310\":1,\"379\":1,\"429\":1,\"433\":1,\"504\":1,\"536\":1,\"559\":1,\"562\":1,\"564\":1,\"568\":1,\"580\":1,\"582\":1,\"585\":1,\"605\":1,\"643\":1,\"654\":1,\"658\":2,\"722\":1,\"751\":2,\"773\":1,\"791\":1,\"799\":1,\"800\":1,\"811\":1,\"867\":1}}],[\"所以转红黑树\",{\"1\":{\"172\":1}}],[\"所以平衡二叉树插入和删除的效率比红黑树要低\",{\"1\":{\"162\":1}}],[\"所以在拿到锁之后\",{\"1\":{\"727\":1}}],[\"所以在切换时\",{\"1\":{\"643\":1}}],[\"所以在业务上认为\",{\"1\":{\"595\":1}}],[\"所以在整个报⽂中有效数据占有的比例就会⾮常低\",{\"1\":{\"584\":1}}],[\"所以在\",{\"1\":{\"502\":1,\"804\":1}}],[\"所以在atomic包里一共提供了13个类\",{\"1\":{\"340\":1}}],[\"所以在运行的时候可以通过反射得到注解的信息\",{\"1\":{\"287\":1}}],[\"所以在扩容时\",{\"1\":{\"174\":1}}],[\"所以在遍历过程中对原集合所作的修改并不能被迭代器检测到\",{\"1\":{\"157\":1}}],[\"所以在插入时候\",{\"1\":{\"155\":1}}],[\"所以每个节点会占用更多的空间\",{\"1\":{\"154\":1}}],[\"所以每次取该元素的属性前\",{\"1\":{\"88\":1,\"90\":1}}],[\"所以它\",{\"1\":{\"732\":1}}],[\"所以它的读写性能非常出色\",{\"1\":{\"668\":1}}],[\"所以它的最佳的生命周期是一次请求或一个方法\",{\"1\":{\"435\":1}}],[\"所以它是全自动的\",{\"1\":{\"433\":1}}],[\"所以它没法根据序号直接获取元素\",{\"1\":{\"154\":1}}],[\"所以它可以根据下标查找\",{\"1\":{\"154\":1}}],[\"所以你无需担心它的长度\",{\"1\":{\"10\":1}}],[\"为feign提供负载均衡的能力\",{\"1\":{\"850\":1}}],[\"为用户提供最终价值\",{\"1\":{\"824\":1}}],[\"为过滤后的消息队列集合\",{\"1\":{\"777\":1}}],[\"为之后做consumer端的负载均衡提供可以依据的元数据信息\",{\"1\":{\"777\":1}}],[\"为集群添加节点进行扩容也可以下线部分节点进行缩容\",{\"1\":{\"699\":1}}],[\"为主\",{\"1\":{\"598\":1}}],[\"为此\",{\"1\":{\"581\":1}}],[\"为应用层实体提供端到端的通信功能\",{\"1\":{\"542\":1}}],[\"为目标对象生成代理对象\",{\"1\":{\"453\":1,\"806\":2}}],[\"为上层的数据处理层提供最基础的支撑\",{\"1\":{\"449\":1}}],[\"为每个value设置一个逻辑过期时间\",{\"1\":{\"712\":1}}],[\"为每个进程分配一个优先级\",{\"1\":{\"640\":1}}],[\"为每个\",{\"1\":{\"429\":1}}],[\"为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知\",{\"1\":{\"392\":1}}],[\"为null\",{\"1\":{\"329\":1}}],[\"为程序员提供一致的内存可见性保证\",{\"1\":{\"319\":1}}],[\"为他们都添加了\",{\"1\":{\"292\":1}}],[\"为解决两阶段提交协议的单点故障和同步阻塞问题\",{\"1\":{\"203\":1}}],[\"为\",{\"1\":{\"177\":1,\"272\":2,\"311\":1,\"412\":1,\"513\":2,\"523\":1,\"531\":2,\"587\":1,\"639\":1,\"790\":1,\"793\":1,\"817\":1}}],[\"为了更好地解决这些问题和挑战\",{\"1\":{\"832\":1}}],[\"为了后面第\",{\"1\":{\"793\":1}}],[\"为了节约内存\",{\"1\":{\"733\":1}}],[\"为了服务的可⽤性\",{\"1\":{\"729\":1}}],[\"为了主从复制的速度和连接的稳定性\",{\"1\":{\"720\":1}}],[\"为了\",{\"1\":{\"718\":1,\"720\":1}}],[\"为了满足业务要求添加了大量新memcache节点\",{\"1\":{\"713\":1}}],[\"为了满足最左前缀匹配原则\",{\"1\":{\"497\":1}}],[\"为了避免大量的缓存在同一时间过期\",{\"1\":{\"704\":1}}],[\"为了避免错误\",{\"1\":{\"349\":1}}],[\"为了提升i\",{\"1\":{\"662\":1}}],[\"为了提高性能\",{\"1\":{\"319\":1}}],[\"为了完全实现\",{\"1\":{\"658\":1}}],[\"为了防止服务雪崩\",{\"1\":{\"853\":1}}],[\"为了防止服务器端开启一些无用的连接增加服务器开销\",{\"1\":{\"569\":1}}],[\"为了防止整个系统出现雪崩\",{\"1\":{\"704\":1}}],[\"为了防止低优先级的进程永远等不到调度\",{\"1\":{\"640\":1}}],[\"为了防止\",{\"1\":{\"586\":1}}],[\"为了解决应该重传多少个包的问题\",{\"1\":{\"593\":1}}],[\"为了解决不知道该重传哪些\",{\"1\":{\"592\":1}}],[\"为了解决\",{\"1\":{\"584\":1}}],[\"为了解决这个问题\",{\"1\":{\"427\":1,\"583\":1,\"680\":1}}],[\"为了实现一些特殊的功能需求\",{\"1\":{\"429\":1}}],[\"为了实现volatile的内存语义\",{\"1\":{\"322\":1}}],[\"为了向下兼容旧代码\",{\"1\":{\"427\":1}}],[\"为了验证自己的猜想\",{\"1\":{\"413\":1}}],[\"为了能更好地适应不同程序的内存状况\",{\"1\":{\"400\":1}}],[\"为了降低内存的消耗\",{\"1\":{\"395\":1}}],[\"为了减少数据拷贝带来的性能损坏\",{\"1\":{\"664\":1}}],[\"为了减少窃取任务线程和被窃取任务线程之间的竞争\",{\"1\":{\"373\":1}}],[\"为了减少哈希冲突发生的概率\",{\"1\":{\"173\":1}}],[\"为了具体说明\",{\"1\":{\"321\":1}}],[\"为了遵守as\",{\"1\":{\"321\":1}}],[\"为了让对方先过\",{\"1\":{\"649\":1}}],[\"为了让服务端的公钥被⼤家信任\",{\"1\":{\"564\":1}}],[\"为了让用户感觉多个线程是在同时执行的\",{\"1\":{\"304\":1}}],[\"为了让\",{\"1\":{\"285\":1,\"795\":1}}],[\"为了保证整个\",{\"1\":{\"761\":1}}],[\"为了保证高可用\",{\"1\":{\"746\":1}}],[\"为了保证全量复制后aof持久化文件立刻可用\",{\"1\":{\"685\":1}}],[\"为了保证客户端发送的最后一个\",{\"1\":{\"576\":1}}],[\"为了保证持久性\",{\"1\":{\"483\":1}}],[\"为了保证对象引用更新的正确性\",{\"1\":{\"402\":1}}],[\"为了保证幂等性\",{\"1\":{\"225\":1}}],[\"为了保持保持平衡\",{\"1\":{\"162\":1}}],[\"为了保持平衡\",{\"1\":{\"162\":1}}],[\"为了高可用\",{\"1\":{\"192\":1}}],[\"为例\",{\"1\":{\"167\":1,\"531\":2,\"546\":1}}],[\"为什么feign第一次调用耗时很长\",{\"0\":{\"848\":1}}],[\"为什么微服务需要配置中心\",{\"0\":{\"840\":1}}],[\"为什么rocketmq不使用zookeeper作为注册中心呢\",{\"0\":{\"770\":1}}],[\"为什么呢\",{\"1\":{\"651\":1}}],[\"为什么有了\",{\"1\":{\"607\":2}}],[\"为什么既有\",{\"0\":{\"607\":1}}],[\"为什么会产生粘包和拆包呢\",{\"1\":{\"595\":1}}],[\"为什么等待的时间是\",{\"1\":{\"576\":1}}],[\"为什么需要等待\",{\"0\":{\"576\":1},\"1\":{\"576\":1}}],[\"为什么不是四次\",{\"1\":{\"569\":1}}],[\"为什么不能是两次\",{\"0\":{\"569\":1},\"1\":{\"569\":1}}],[\"为什么不从最左开始查\",{\"1\":{\"509\":1}}],[\"为什么不用平衡二叉树呢\",{\"1\":{\"503\":1}}],[\"为什么不用普通二叉树\",{\"1\":{\"503\":1}}],[\"为什么不用二叉树\",{\"0\":{\"162\":1}}],[\"为什么用\",{\"0\":{\"504\":1}}],[\"为什么用transient修饰数组\",{\"0\":{\"156\":1}}],[\"为什么使用跳跃表\",{\"1\":{\"732\":1}}],[\"为什么使用索引会加快查询\",{\"0\":{\"496\":1}}],[\"为什么使用元空间替代永久代作为方法区的实现\",{\"0\":{\"381\":1}}],[\"为什么mapper接口不需要实现类\",{\"0\":{\"450\":1}}],[\"为什么还要传回\",{\"0\":{\"571\":1}}],[\"为什么还要引入\",{\"0\":{\"405\":1}}],[\"为什么还要有字符流\",{\"0\":{\"279\":1}}],[\"为什么我们不能直接调用run\",{\"1\":{\"301\":1}}],[\"为什么调用start\",{\"0\":{\"301\":1}}],[\"为什么通过一个\",{\"1\":{\"289\":1}}],[\"为什么要三级缓存\",{\"0\":{\"801\":1}}],[\"为什么要使用\",{\"1\":{\"787\":1}}],[\"为什么要使用消息队列呢\",{\"0\":{\"740\":1}}],[\"为什么要选择rocketmq\",{\"0\":{\"741\":1}}],[\"为什么要两阶段提交呢\",{\"1\":{\"482\":1}}],[\"为什么要用微服务链路追踪\",{\"0\":{\"867\":1}}],[\"为什么要用\",{\"0\":{\"503\":1,\"562\":1,\"600\":1}}],[\"为什么要用双亲委派机制\",{\"0\":{\"425\":1}}],[\"为什么要用它\",{\"0\":{\"406\":1}}],[\"为什么要类型擦除呢\",{\"1\":{\"285\":1}}],[\"为什么要有\",{\"1\":{\"258\":1}}],[\"为什么两个对象有相同的\",{\"1\":{\"258\":1}}],[\"为什么重写\",{\"1\":{\"258\":2}}],[\"为什么说mybatis是半自动orm映射工具\",{\"1\":{\"433\":1}}],[\"为什么说\",{\"0\":{\"236\":1}}],[\"为什么cap不可兼得呢\",{\"0\":{\"191\":1}}],[\"为什么\",{\"0\":{\"175\":1,\"598\":1},\"1\":{\"266\":1,\"732\":1}}],[\"为什么扩容因子是0\",{\"0\":{\"173\":1}}],[\"为什么是8呢\",{\"1\":{\"172\":1}}],[\"为什么hashmap链表转红黑树的阈值为8呢\",{\"0\":{\"172\":1}}],[\"为什么hashmap的容量是2的倍数呢\",{\"0\":{\"168\":1}}],[\"为什么哈希\",{\"0\":{\"167\":1}}],[\"为什么最arraylist不直接序列化元素数组呢\",{\"1\":{\"156\":1}}],[\"平淡的一生落幕了\",{\"1\":{\"793\":2}}],[\"平时流量很低\",{\"1\":{\"740\":1}}],[\"平时的开发中\",{\"1\":{\"725\":1}}],[\"平时的\",{\"1\":{\"493\":1}}],[\"平均值\",{\"1\":{\"609\":1}}],[\"平方探查法\",{\"1\":{\"171\":1}}],[\"平方取中法\",{\"1\":{\"170\":1}}],[\"平衡树\",{\"1\":{\"732\":1}}],[\"平衡树呢\",{\"0\":{\"162\":1}}],[\"平衡二叉树相比于二叉查找树来说\",{\"1\":{\"503\":1}}],[\"平衡二叉树是比红黑树更严格的平衡树\",{\"1\":{\"162\":1}}],[\"平台无关性的具体表现在于\",{\"1\":{\"232\":1}}],[\"平台无关性\",{\"1\":{\"232\":1}}],[\"平台\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"插入字段为\",{\"1\":{\"813\":4}}],[\"插入操作需要等待\",{\"1\":{\"513\":1}}],[\"插入意向锁\",{\"1\":{\"513\":1}}],[\"插入到虚拟表\",{\"1\":{\"470\":1}}],[\"插入的数据是多长\",{\"1\":{\"461\":1}}],[\"插入一些我我们自己的代码\",{\"1\":{\"453\":1}}],[\"插入完成再判断是否需要扩容\",{\"1\":{\"175\":1}}],[\"插入\",{\"1\":{\"162\":1}}],[\"插入冲突的元素\",{\"1\":{\"161\":1}}],[\"插件扩展等功能\",{\"1\":{\"864\":1}}],[\"插件的intercept方法就会在这里被我们调用\",{\"1\":{\"453\":1}}],[\"插件的原理就是在这四大对象调度的时候\",{\"1\":{\"453\":1}}],[\"插件的运行原理\",{\"1\":{\"453\":1}}],[\"插件\",{\"0\":{\"452\":1},\"1\":{\"36\":1,\"418\":1,\"453\":1}}],[\"插件后\",{\"1\":{\"12\":1,\"13\":1}}],[\"链路追踪黑还可以帮助优化性能\",{\"1\":{\"867\":1}}],[\"链路追踪\",{\"0\":{\"866\":1}}],[\"链路一长\",{\"1\":{\"740\":1}}],[\"链地址法\",{\"1\":{\"171\":1,\"176\":1}}],[\"链表linkedlist\",{\"1\":{\"729\":1}}],[\"链表\",{\"1\":{\"729\":1,\"731\":1}}],[\"链表长度超过8就转换成红黑树\",{\"1\":{\"181\":1}}],[\"链表长度大于等于8\",{\"1\":{\"164\":1}}],[\"链表写入和hashmap的方式一样\",{\"1\":{\"181\":1}}],[\"链表同样操作\",{\"1\":{\"180\":1}}],[\"链表的插入方式从头插法改成了尾插法\",{\"1\":{\"175\":1}}],[\"链表插入方式\",{\"1\":{\"175\":1}}],[\"链表过长转为红黑树\",{\"1\":{\"175\":1}}],[\"链表或红黑树\",{\"1\":{\"175\":1}}],[\"链表改成了数组\",{\"1\":{\"175\":1}}],[\"链表里的节点符合泊松分布\",{\"1\":{\"172\":1}}],[\"链表转为红黑树\",{\"1\":{\"161\":1}}],[\"链表是用来解决冲突\",{\"1\":{\"161\":1}}],[\"链接⽂件还是在的\",{\"1\":{\"660\":1}}],[\"链接\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"桶数组是用来存储数据元素\",{\"1\":{\"161\":1}}],[\"说白了就是一句话\",{\"1\":{\"842\":1}}],[\"说一说什么是\",{\"0\":{\"787\":1}}],[\"说一下fegin\",{\"0\":{\"847\":1}}],[\"说一下rocketmq的整体工作流程\",{\"0\":{\"769\":1}}],[\"说一下你了解的端口及对应的服务\",{\"0\":{\"549\":1}}],[\"说一下你对java内存模型\",{\"0\":{\"317\":1}}],[\"说一下你对注解的理解\",{\"0\":{\"287\":1}}],[\"说一下每一层对应的网络协议有哪些\",{\"0\":{\"543\":1}}],[\"说一下数据库的三大范式\",{\"0\":{\"460\":1}}],[\"说一下新生代的区域划分\",{\"0\":{\"396\":1}}],[\"说一下对象有哪几种引用\",{\"0\":{\"392\":1}}],[\"说一下\",{\"0\":{\"380\":1,\"556\":1},\"1\":{\"551\":1}}],[\"说一下jdk1\",{\"1\":{\"161\":1}}],[\"说下eureka\",{\"0\":{\"836\":1}}],[\"说下微服务有哪些组件\",{\"0\":{\"832\":1}}],[\"说下\",{\"0\":{\"558\":1,\"606\":1,\"609\":1}}],[\"说下计算机网络体系结构\",{\"0\":{\"542\":1}}],[\"说⼀下\",{\"0\":{\"553\":1}}],[\"说句题外话\",{\"1\":{\"389\":1}}],[\"说明之前复制的是当前主节点\",{\"1\":{\"685\":1}}],[\"说明网络也没那么糟糕\",{\"1\":{\"589\":1}}],[\"说明用户没有登录或者登录失效\",{\"1\":{\"566\":1}}],[\"说明创建\",{\"1\":{\"523\":2}}],[\"说明线程在等待这把锁\",{\"1\":{\"414\":1}}],[\"说明垃圾收集的占比越小\",{\"1\":{\"401\":1}}],[\"说明本次\",{\"1\":{\"399\":1}}],[\"说明\",{\"1\":{\"303\":1}}],[\"说明需要扩容\",{\"1\":{\"181\":1}}],[\"说到2pc\",{\"1\":{\"202\":1}}],[\"说说你平时有用到\",{\"0\":{\"805\":1}}],[\"说说你对原子性\",{\"0\":{\"318\":1}}],[\"说说循环依赖\",{\"0\":{\"799\":1}}],[\"说说rocketmq怎么对文件进行读写的\",{\"0\":{\"772\":1}}],[\"说说redis底层数据结构\",{\"0\":{\"729\":1}}],[\"说说raft算法\",{\"0\":{\"218\":1}}],[\"说说集群的伸缩\",{\"0\":{\"699\":1}}],[\"说说主从数据同步的方式\",{\"0\":{\"685\":1}}],[\"说说半连接队列和\",{\"0\":{\"573\":1}}],[\"说说\",{\"0\":{\"472\":1,\"513\":1,\"547\":1,\"548\":1,\"551\":1,\"561\":1,\"566\":1,\"574\":1,\"580\":1,\"582\":1,\"585\":1,\"590\":1,\"595\":1,\"597\":1,\"789\":1,\"806\":1,\"807\":1},\"1\":{\"597\":1}}],[\"说说mybatis的插件运行原理\",{\"0\":{\"453\":1}}],[\"说说mybatis的一级\",{\"0\":{\"446\":1}}],[\"说说synchronized和reentrantlock的区别\",{\"0\":{\"330\":1}}],[\"说说线程有几种创建方式\",{\"0\":{\"300\":1}}],[\"说说有哪些负载均衡算法\",{\"0\":{\"851\":1}}],[\"说说有哪些安全攻击\",{\"0\":{\"611\":1}}],[\"说说有哪些常见集合\",{\"0\":{\"152\":1}}],[\"说说有几种序列化方式\",{\"0\":{\"283\":1}}],[\"说说自增自减运算\",{\"0\":{\"245\":1}}],[\"说说什么是\",{\"0\":{\"804\":1}}],[\"说说什么是零拷贝\",{\"0\":{\"773\":1}}],[\"说说什么是redis\",{\"0\":{\"668\":1}}],[\"说说什么是mybatis\",{\"0\":{\"433\":1}}],[\"说说什么是进程和线程\",{\"0\":{\"299\":1}}],[\"说说什么是跨平台性\",{\"0\":{\"234\":1}}],[\"说说什么是幂等性\",{\"0\":{\"224\":1}}],[\"说说2pc两阶段提交\",{\"0\":{\"202\":1}}],[\"说说cap原则\",{\"0\":{\"190\":1}}],[\"最少连接算法会根据后端服务器当前的连接数来决定请求的分配\",{\"1\":{\"851\":1}}],[\"最少连接算法\",{\"1\":{\"851\":1}}],[\"最初由阿里巴巴\",{\"1\":{\"830\":1}}],[\"最细粒度只能作用到方法级别\",{\"1\":{\"809\":1}}],[\"最常用的是\",{\"1\":{\"790\":1}}],[\"最常见的\",{\"1\":{\"614\":1}}],[\"最主要的是两个字解耦\",{\"1\":{\"787\":1}}],[\"最主要的七大模块\",{\"1\":{\"783\":1}}],[\"最主要的优点在名字上已经体现出来\",{\"1\":{\"405\":1}}],[\"最灵活\",{\"1\":{\"762\":1}}],[\"最好在同一个局域网内\",{\"1\":{\"720\":1}}],[\"最好不要做任何持久化工作\",{\"1\":{\"720\":1}}],[\"最好手工将\",{\"1\":{\"492\":1}}],[\"最关键的是对热点key的监控\",{\"1\":{\"710\":1}}],[\"最高的从节点列表\",{\"1\":{\"690\":1}}],[\"最不常用算法\",{\"1\":{\"658\":1}}],[\"最不常⽤置换算法\",{\"1\":{\"658\":1}}],[\"最近\",{\"1\":{\"710\":1}}],[\"最近最少使⽤的⻚⾯在表尾\",{\"1\":{\"658\":1}}],[\"最近最多使⽤的⻚⾯在表头\",{\"1\":{\"658\":1}}],[\"最近最久未使⽤\",{\"1\":{\"658\":1}}],[\"最近最久未使⽤的置换算法\",{\"1\":{\"658\":1}}],[\"最近你都不理我\",{\"1\":{\"574\":1}}],[\"最佳⻚⾯置换算法是一个理想的算法\",{\"1\":{\"658\":1}}],[\"最佳⻚⾯置换算法\",{\"1\":{\"658\":1}}],[\"最短作业优先的抢占式版本\",{\"1\":{\"640\":1}}],[\"最短剩余时间优先\",{\"1\":{\"640\":1}}],[\"最直接的方法是增加带宽\",{\"1\":{\"614\":1}}],[\"最根本区别\",{\"1\":{\"597\":1}}],[\"最开始\",{\"1\":{\"568\":1}}],[\"最开始也没有认定就是这里的问题\",{\"1\":{\"413\":1}}],[\"最左前缀匹配原则这三个都是一个概念\",{\"1\":{\"509\":1}}],[\"最左前缀原则\",{\"1\":{\"509\":1}}],[\"最左匹配原则\",{\"0\":{\"509\":1},\"1\":{\"509\":2}}],[\"最外面的方块\",{\"1\":{\"501\":1}}],[\"最底层的叶子节点形成了一个双向有序链表\",{\"1\":{\"501\":2}}],[\"最重要的一点是不可靠传输\",{\"1\":{\"598\":1}}],[\"最重要的列之一\",{\"1\":{\"493\":1}}],[\"最重要的就是hashmap\",{\"1\":{\"160\":1}}],[\"最小锁粒度\",{\"1\":{\"477\":1}}],[\"最小值改不了\",{\"1\":{\"269\":1}}],[\"最上层的服务并不是\",{\"1\":{\"472\":1}}],[\"最优置换算法是通过\",{\"1\":{\"658\":1}}],[\"最优\",{\"1\":{\"469\":1}}],[\"最多只能有一个未被确认的小段\",{\"1\":{\"584\":1}}],[\"最多只能同时满足其中的2个\",{\"1\":{\"190\":1}}],[\"最多能存放的字符个数为\",{\"1\":{\"461\":2}}],[\"最大\",{\"1\":{\"609\":1}}],[\"最大报文长度\",{\"1\":{\"595\":1}}],[\"最大消息长度\",{\"1\":{\"581\":2}}],[\"最大堆大小\",{\"1\":{\"412\":1}}],[\"最大线程数为integer\",{\"1\":{\"364\":1,\"365\":1}}],[\"最大线程数也为1\",{\"1\":{\"362\":1}}],[\"最大线程数选择了和核心线程数相同\",{\"1\":{\"352\":1}}],[\"最大长度为integer\",{\"1\":{\"356\":1}}],[\"最大努力通知相比实现会简单一些\",{\"1\":{\"207\":1}}],[\"最大努力通知了解吗\",{\"0\":{\"207\":1}}],[\"最大努力通知\",{\"1\":{\"201\":1}}],[\"最终将渲染结果响应给客户端\",{\"1\":{\"815\":1}}],[\"最终会调用到\",{\"1\":{\"802\":1}}],[\"最终显示结果有这几项\",{\"1\":{\"609\":1}}],[\"最终它还是通过sqlsession的实例去运行对象的sql\",{\"1\":{\"450\":1}}],[\"最终它都会必然执行\",{\"1\":{\"275\":1}}],[\"最终由生成了一个配置类configuration实例\",{\"1\":{\"448\":1}}],[\"最终没有调整任何\",{\"1\":{\"413\":1}}],[\"最终标记\",{\"1\":{\"404\":1}}],[\"最终\",{\"1\":{\"390\":1}}],[\"最终汇总每个小任务结果后得到大任务结果的框架\",{\"1\":{\"373\":1}}],[\"最终导致oom\",{\"1\":{\"365\":1}}],[\"最终返回的还是之前暂存起来的结果\",{\"1\":{\"276\":1}}],[\"最终还是会调用\",{\"1\":{\"270\":1}}],[\"最终一致性\",{\"1\":{\"193\":1}}],[\"最有效的算法之一\",{\"1\":{\"211\":1}}],[\"最⼩的那个2进制数值\",{\"1\":{\"169\":1}}],[\"最后通过一个实例来看一下具体的细节\",{\"1\":{\"793\":1}}],[\"最后把这些保存了\",{\"1\":{\"792\":1}}],[\"最后把结果加1再返回即可\",{\"1\":{\"169\":1}}],[\"最后经过处理\",{\"1\":{\"788\":1}}],[\"最后执行dispatchpullrequest\",{\"1\":{\"777\":1}}],[\"最后遍历整个range而计算出当前consumer端应该分配到的的messagequeue\",{\"1\":{\"777\":1}}],[\"最后是从网络驱动的内核态内存复制到网卡中进行传输\",{\"1\":{\"773\":1}}],[\"最后是实体主体\",{\"1\":{\"556\":1}}],[\"最后造成用户资金损失\",{\"1\":{\"613\":1}}],[\"最后⽐较\",{\"1\":{\"564\":1}}],[\"最后将\",{\"1\":{\"564\":1}}],[\"最后的物理层\",{\"1\":{\"544\":1}}],[\"最后的结果都是正确的\",{\"1\":{\"645\":1}}],[\"最后的结果要通过resultsethandler来进行处理\",{\"1\":{\"448\":1}}],[\"最后的结果是\",{\"1\":{\"186\":1}}],[\"最后\",{\"1\":{\"453\":1,\"555\":1,\"576\":1,\"591\":1,\"592\":1,\"777\":1,\"800\":1}}],[\"最后生成一个配置对象\",{\"1\":{\"448\":1}}],[\"最后一定要记得关闭会话\",{\"1\":{\"435\":1}}],[\"最后引发\",{\"1\":{\"417\":1}}],[\"最后导致\",{\"1\":{\"417\":1}}],[\"最后根据线程的堆栈信息定位到具体业务方法\",{\"1\":{\"414\":1}}],[\"最后当有空闲时\",{\"1\":{\"370\":1}}],[\"最后赋值到i\",{\"1\":{\"318\":1}}],[\"最后又将临时变量赋给了值为\",{\"1\":{\"245\":1}}],[\"最后所有元素处理完成后\",{\"1\":{\"164\":1}}],[\"最后显示\",{\"1\":{\"29\":1}}],[\"详看delaytimelevel\",{\"1\":{\"763\":1}}],[\"详细讲一讲i\",{\"0\":{\"664\":1}}],[\"详细说说\",{\"0\":{\"583\":1}}],[\"详细说一下\",{\"0\":{\"568\":1}}],[\"详细可见\",{\"1\":{\"176\":1}}],[\"详情戳\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"详解53道java基础面试高频题\",{\"1\":{\"229\":1}}],[\"详解\",{\"1\":{\"150\":1,\"188\":1,\"296\":1,\"375\":1,\"431\":1,\"456\":1,\"540\":1,\"626\":1,\"666\":1,\"738\":1,\"780\":1,\"826\":1,\"877\":1}}],[\"终于毕业\",{\"1\":{\"793\":2}}],[\"终于完全废弃了永久代的概念\",{\"1\":{\"381\":1}}],[\"终于来了\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"终止会话\",{\"1\":{\"542\":1}}],[\"终止状态\",{\"1\":{\"303\":1}}],[\"终止遍历\",{\"1\":{\"157\":1}}],[\"终端操作会返回一个结果\",{\"1\":{\"294\":1}}],[\"终端操作\",{\"1\":{\"294\":1}}],[\"进一步提高系统的稳定性\",{\"1\":{\"838\":1}}],[\"进阶\",{\"0\":{\"752\":1}}],[\"进阶之路\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"进⼊快速恢复算法如下\",{\"1\":{\"589\":1}}],[\"进⼊同步代码前要获得当前\",{\"1\":{\"324\":1}}],[\"进入真正的提交阶段\",{\"1\":{\"871\":1}}],[\"进入快速恢复之前\",{\"1\":{\"589\":1}}],[\"进入快速恢复算法\",{\"1\":{\"588\":1}}],[\"进入新的慢启动过程\",{\"1\":{\"588\":1}}],[\"进入了拥塞避免算法\",{\"1\":{\"586\":1}}],[\"进入拥塞避免阶段\",{\"1\":{\"586\":1}}],[\"进入三次握手前\",{\"1\":{\"573\":1}}],[\"进入\",{\"1\":{\"568\":1,\"574\":3}}],[\"进入拦截器方法\",{\"1\":{\"442\":1}}],[\"进入terminated状态\",{\"1\":{\"367\":1}}],[\"进入tidying状态\",{\"1\":{\"367\":2}}],[\"进入停车场就是线程在执行\",{\"1\":{\"348\":1}}],[\"进入等待区\",{\"1\":{\"325\":1}}],[\"进入同步代码前要获得\",{\"1\":{\"324\":1}}],[\"进入该状态表示当前线程需要等待其他线程做出一些特定动作\",{\"1\":{\"303\":1}}],[\"进入下一个循环条件\",{\"1\":{\"243\":1}}],[\"进程的互斥问题\",{\"1\":{\"645\":1}}],[\"进程切换的开销也远大于线程切换的开销\",{\"1\":{\"642\":1}}],[\"进程拥有⼀个完整的资源平台\",{\"1\":{\"642\":1}}],[\"进程是资源\",{\"1\":{\"642\":1}}],[\"进程是代码在数据集合上的一次运行活动\",{\"1\":{\"299\":1}}],[\"进程可正常继续执⾏\",{\"1\":{\"641\":1}}],[\"进程需阻塞等待\",{\"1\":{\"641\":1}}],[\"进程pid发送该信号\",{\"1\":{\"641\":1}}],[\"进程访问非法地址\",{\"1\":{\"641\":1}}],[\"进程之间就可以通过管道\",{\"1\":{\"641\":1}}],[\"进程间通信有哪些方式\",{\"0\":{\"641\":1}}],[\"进程调度就是确定某一个时刻cpu运行哪个进程\",{\"1\":{\"640\":1}}],[\"进程有哪些调度算法\",{\"0\":{\"640\":1}}],[\"进程有哪些状态\",{\"0\":{\"637\":1}}],[\"进程收养\",{\"1\":{\"639\":1}}],[\"进程对它们完成状态收集工作\",{\"1\":{\"639\":1}}],[\"进程正在从系统中消失时的状态\",{\"1\":{\"637\":1}}],[\"进程正在被创建时的状态\",{\"1\":{\"637\":1}}],[\"进程还有另外两个基本状态\",{\"1\":{\"637\":1}}],[\"进程和线程的联系和区别\",{\"0\":{\"642\":1}}],[\"进程和线程\",{\"0\":{\"634\":1}}],[\"进程上\",{\"1\":{\"415\":1}}],[\"进程id\",{\"1\":{\"343\":1}}],[\"进程中的多个线程共享进程的资源\",{\"1\":{\"299\":1}}],[\"进程\",{\"1\":{\"299\":1,\"414\":1,\"418\":1,\"639\":2}}],[\"进程分为三种角色\",{\"1\":{\"221\":1}}],[\"进制值\",{\"1\":{\"418\":1}}],[\"进制的线程\",{\"1\":{\"414\":1}}],[\"进制的字符串\",{\"1\":{\"272\":1}}],[\"进制\",{\"1\":{\"414\":1,\"418\":1}}],[\"进制位乘以数值\",{\"1\":{\"270\":1}}],[\"进制表示是\",{\"1\":{\"167\":1}}],[\"进而用到了\",{\"1\":{\"269\":1}}],[\"进而产生问题\",{\"1\":{\"256\":1}}],[\"进水的速度可能快慢不一\",{\"1\":{\"227\":1}}],[\"进行集成\",{\"1\":{\"868\":1}}],[\"进行分析和监控\",{\"1\":{\"868\":1}}],[\"进行可视化展示和查询\",{\"1\":{\"868\":1}}],[\"进行用户认证和授权操作\",{\"1\":{\"863\":1}}],[\"进行服务发现和负载均衡\",{\"1\":{\"846\":1}}],[\"进行接口定义\",{\"1\":{\"845\":1}}],[\"进行统一调度\",{\"1\":{\"815\":1}}],[\"进行属性填充\",{\"1\":{\"802\":2}}],[\"进行创建\",{\"1\":{\"799\":1}}],[\"进行自动装配\",{\"1\":{\"796\":2}}],[\"进行自动装配的方法\",{\"1\":{\"790\":1}}],[\"进行解析和分析\",{\"1\":{\"792\":1}}],[\"进行发送消息\",{\"1\":{\"776\":1}}],[\"进行横向扩容\",{\"1\":{\"715\":1}}],[\"进行缓存删除操作\",{\"1\":{\"708\":1}}],[\"进行信息窃取\",{\"1\":{\"612\":1}}],[\"进行交互通信的好处在于\",{\"1\":{\"598\":1}}],[\"进行文件传输等活动的时候\",{\"1\":{\"598\":1}}],[\"进行数据传输\",{\"1\":{\"559\":1}}],[\"进行数据库的备份或者恢复时\",{\"1\":{\"482\":1}}],[\"进行标识的\",{\"1\":{\"557\":1}}],[\"进行比特流的传输\",{\"1\":{\"544\":1}}],[\"进行相应的调整\",{\"1\":{\"538\":1}}],[\"进行相应的处理\",{\"1\":{\"280\":1}}],[\"进行查询\",{\"1\":{\"534\":1}}],[\"进行封装即可\",{\"1\":{\"528\":1}}],[\"进行简单封装\",{\"1\":{\"526\":1}}],[\"进行等值查询且精准匹配到一条记录时\",{\"1\":{\"513\":1}}],[\"进行模糊查询的时候\",{\"1\":{\"505\":1}}],[\"进行监控和告警\",{\"1\":{\"485\":1}}],[\"进行提交\",{\"1\":{\"482\":1}}],[\"进行写入\",{\"1\":{\"481\":1}}],[\"进行\",{\"1\":{\"470\":1}}],[\"进行垃圾回收的过程中\",{\"1\":{\"402\":1}}],[\"进行线程上下文切换跟任务调度\",{\"1\":{\"359\":1}}],[\"进行一次抢锁\",{\"1\":{\"333\":1}}],[\"进行加锁操作时\",{\"1\":{\"329\":1}}],[\"进行过滤条件的判断\",{\"1\":{\"510\":1}}],[\"进行过滤\",{\"1\":{\"294\":1}}],[\"进行类加载的时候\",{\"1\":{\"289\":1}}],[\"进行操作支付之后支付平台会去同步通知业务系统支付操作是否成功\",{\"1\":{\"207\":1}}],[\"进行了一系列判断\",{\"1\":{\"186\":1}}],[\"进行图床设置\",{\"1\":{\"113\":1}}],[\"进⾏计算\",{\"1\":{\"169\":1}}],[\"上下文容器\",{\"1\":{\"783\":1}}],[\"上下文切换\",{\"1\":{\"636\":1}}],[\"上的所有\",{\"1\":{\"778\":1}}],[\"上查找此消息以便在开发期间查找问题\",{\"1\":{\"744\":1}}],[\"上线时手动操作\",{\"1\":{\"711\":1}}],[\"上线之后要建立完善的线程池监控机制\",{\"1\":{\"369\":1}}],[\"上线之前也要进行充分的测试\",{\"1\":{\"369\":1}}],[\"上限就为系统定义的进程打开的最⼤⽂件描述符个数\",{\"1\":{\"664\":1}}],[\"上图中processqueuetable的绿色部分\",{\"1\":{\"777\":1}}],[\"上图中processqueuetable标注的红色部分\",{\"1\":{\"777\":1}}],[\"上图中各个状态的意义\",{\"1\":{\"637\":1}}],[\"上图虚线框的格子就是\",{\"1\":{\"583\":1}}],[\"上图虚线框的格子数是\",{\"1\":{\"583\":1}}],[\"上每一种可用的资源\",{\"1\":{\"557\":1}}],[\"上不太安全\",{\"1\":{\"553\":1}}],[\"上千万的时候\",{\"1\":{\"537\":1}}],[\"上海\",{\"1\":{\"489\":1}}],[\"上个卫生间\",{\"1\":{\"345\":1}}],[\"上呢\",{\"1\":{\"258\":1}}],[\"上面这个指令就是\",{\"1\":{\"727\":1}}],[\"上面这段代码在\",{\"1\":{\"285\":1}}],[\"上面是行锁的三种实现算法\",{\"1\":{\"513\":1}}],[\"上面是线程等待的方法\",{\"1\":{\"302\":1}}],[\"上面提到了几个mybatis的组件\",{\"1\":{\"435\":1}}],[\"上面的这个流程几乎就跟\",{\"1\":{\"353\":1}}],[\"上面的例子抽象一下\",{\"1\":{\"346\":1}}],[\"上面3个操作的数据依赖关系\",{\"1\":{\"321\":1}}],[\"上面两种都是没有返回值的\",{\"1\":{\"300\":1}}],[\"上面所写的拼接方式会被优化为基于\",{\"1\":{\"266\":1}}],[\"上面已经讲了\",{\"1\":{\"258\":1}}],[\"上面说了软状态\",{\"1\":{\"193\":1}}],[\"上\",{\"0\":{\"242\":1}}],[\"上报分支事务的状态\",{\"1\":{\"208\":1}}],[\"上标星\",{\"1\":{\"159\":2,\"186\":2,\"193\":2,\"198\":2,\"208\":2,\"222\":2,\"225\":2,\"227\":2,\"236\":2,\"245\":2,\"261\":2,\"267\":2,\"270\":2,\"294\":2,\"306\":2,\"315\":2,\"322\":2,\"343\":2,\"349\":2,\"373\":2,\"408\":2,\"419\":2,\"429\":2,\"446\":2,\"451\":2,\"454\":2,\"473\":2,\"477\":2,\"483\":2,\"493\":2,\"510\":2,\"516\":2,\"523\":2,\"534\":2,\"538\":2,\"544\":2,\"549\":2,\"566\":2,\"595\":2,\"600\":2,\"609\":2,\"617\":2,\"629\":2,\"633\":2,\"649\":2,\"658\":2,\"664\":2,\"674\":2,\"680\":2,\"699\":2,\"713\":2,\"720\":2,\"727\":2,\"734\":2,\"736\":2,\"751\":2,\"767\":2,\"778\":2,\"785\":2,\"802\":2,\"807\":2,\"813\":2,\"817\":2,\"824\":2,\"832\":2,\"838\":2,\"843\":2,\"851\":2,\"861\":2,\"865\":2,\"868\":2,\"874\":2,\"877\":2}}],[\"上使用\",{\"1\":{\"42\":1}}],[\"时被织入\",{\"1\":{\"804\":1}}],[\"时被阻塞\",{\"1\":{\"346\":1}}],[\"时默认会根据自然排序进行创建\",{\"1\":{\"799\":1}}],[\"时再执行相应的方法\",{\"1\":{\"793\":1}}],[\"时redis只响应读操作\",{\"1\":{\"717\":1}}],[\"时钟页面置换算法\",{\"1\":{\"658\":1}}],[\"时会使用\",{\"1\":{\"600\":1}}],[\"时传过去的数据\",{\"1\":{\"569\":1}}],[\"时生成该版本的事务已经被提交\",{\"1\":{\"523\":1}}],[\"时生成该版本的事务还是活跃的\",{\"1\":{\"523\":1}}],[\"时系统中应该分配给下一个事务的\",{\"1\":{\"523\":1}}],[\"时当前系统中活跃的读写事务中最小的\",{\"1\":{\"523\":1}}],[\"时当前系统中活跃的读写事务的事务\",{\"1\":{\"523\":1}}],[\"时一定用引号括起来\",{\"1\":{\"498\":1}}],[\"时区相关\",{\"1\":{\"463\":1}}],[\"时代\",{\"1\":{\"427\":1}}],[\"时间轴\",{\"0\":{\"898\":1}}],[\"时间后才能执行后续流程\",{\"1\":{\"698\":1}}],[\"时间分配给队首的进程\",{\"1\":{\"640\":1}}],[\"时间分配给队首进程\",{\"1\":{\"640\":1}}],[\"时间片轮转算法的效率和时间片的大小有很大关系\",{\"1\":{\"640\":1}}],[\"时间片轮转\",{\"1\":{\"640\":1}}],[\"时间间隔下次就会加倍\",{\"1\":{\"591\":1}}],[\"时间的设置通常是两个小时\",{\"1\":{\"577\":1}}],[\"时间内\",{\"1\":{\"576\":1}}],[\"时间戳等\",{\"1\":{\"531\":1}}],[\"时间\",{\"1\":{\"463\":1,\"472\":1}}],[\"时间等信息\",{\"1\":{\"415\":1}}],[\"时间复杂度为o\",{\"1\":{\"664\":1,\"730\":1}}],[\"时间复杂度\",{\"1\":{\"162\":1}}],[\"时间复杂度都是o\",{\"1\":{\"154\":1}}],[\"时间复杂度是o\",{\"1\":{\"154\":2}}],[\"时只会改变句柄中的实例数据指针\",{\"1\":{\"386\":1}}],[\"时候\",{\"1\":{\"381\":1}}],[\"时彻底干掉了永久代\",{\"1\":{\"380\":1}}],[\"时发生了一些变化\",{\"1\":{\"380\":1}}],[\"时jdk\",{\"1\":{\"266\":1}}],[\"时必须重写\",{\"1\":{\"258\":2}}],[\"时的区别\",{\"0\":{\"250\":1}}],[\"时\",{\"1\":{\"158\":1,\"177\":1,\"245\":2,\"322\":1,\"334\":1,\"353\":1,\"427\":1,\"439\":1,\"469\":1,\"498\":1,\"575\":1,\"584\":1,\"586\":1,\"587\":2,\"588\":1,\"615\":1,\"680\":1,\"685\":1,\"784\":1,\"797\":1}}],[\"包了\",{\"1\":{\"807\":1}}],[\"包重复或伪重传\",{\"1\":{\"594\":1}}],[\"包来响应服务端\",{\"1\":{\"578\":1}}],[\"包时\",{\"1\":{\"578\":1}}],[\"包在传输的时候丢失了\",{\"1\":{\"578\":1}}],[\"包的过程\",{\"1\":{\"575\":1}}],[\"包的序列号\",{\"1\":{\"573\":1}}],[\"包发到服务器\",{\"1\":{\"573\":1}}],[\"包返回后\",{\"1\":{\"573\":1}}],[\"包后\",{\"1\":{\"573\":2}}],[\"包\",{\"1\":{\"283\":1}}],[\"包括提交和回滚\",{\"1\":{\"871\":1}}],[\"包括请求的qps\",{\"1\":{\"859\":1}}],[\"包括错误率\",{\"1\":{\"858\":1}}],[\"包括从服务注册中心获取服务列表\",{\"1\":{\"848\":1}}],[\"包括注册中心\",{\"1\":{\"846\":1}}],[\"包括dubbo3\",{\"1\":{\"845\":1}}],[\"包括eureka\",{\"1\":{\"830\":1}}],[\"包括表单数据的验证\",{\"1\":{\"815\":1}}],[\"包括两部分内容\",{\"1\":{\"815\":1}}],[\"包括开启事务\",{\"1\":{\"812\":1}}],[\"包括访问路径和参数\",{\"1\":{\"784\":1}}],[\"包括多个\",{\"1\":{\"744\":1}}],[\"包括内存快照和\",{\"1\":{\"720\":1}}],[\"包括内存\",{\"1\":{\"642\":1}}],[\"包括内存空间的指针\",{\"1\":{\"636\":1}}],[\"包括posix消息队列和system\",{\"1\":{\"641\":1}}],[\"包括域名拥有者信息\",{\"1\":{\"612\":1}}],[\"包括计算机病毒\",{\"1\":{\"611\":1}}],[\"包括报告错误\",{\"1\":{\"608\":1}}],[\"包括源主机的\",{\"1\":{\"606\":1}}],[\"包括唯一索引和聚簇索引\",{\"1\":{\"513\":1}}],[\"包括查询解析\",{\"1\":{\"472\":1}}],[\"包括了忽略所有列\",{\"1\":{\"469\":1}}],[\"包括了所有的列\",{\"1\":{\"469\":1}}],[\"包括连接管理\",{\"1\":{\"449\":1}}],[\"包括基础配置文件和映射文件\",{\"1\":{\"448\":1}}],[\"包括总内存大小\",{\"1\":{\"417\":1}}],[\"包括自己的代码甚至框架中的代码\",{\"1\":{\"417\":1}}],[\"包括私有属性和私有⽅法\",{\"1\":{\"248\":1}}],[\"包括\",{\"1\":{\"233\":1,\"417\":2,\"479\":1,\"480\":1,\"556\":1,\"622\":1,\"623\":1,\"791\":1}}],[\"包括java基础语法\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"包装\",{\"1\":{\"158\":1}}],[\"包含了\",{\"1\":{\"820\":1}}],[\"包含了很多内置的函数式接口\",{\"1\":{\"292\":1}}],[\"包含两层意思\",{\"1\":{\"712\":1}}],[\"包含在在帖子\",{\"1\":{\"613\":1}}],[\"包含在其中的对数据库的操作要么全部被执行\",{\"1\":{\"518\":1}}],[\"包含三个参数\",{\"1\":{\"560\":1}}],[\"包含指针\",{\"1\":{\"501\":1}}],[\"包含可能会出现异常的代码以及声明异常的方法\",{\"1\":{\"275\":1}}],[\"包含\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"233\":2,\"791\":1,\"879\":1}}],[\"包含jre\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"代理造成的\",{\"1\":{\"813\":1}}],[\"代理时\",{\"1\":{\"813\":1}}],[\"代理的目标对象\",{\"1\":{\"804\":1}}],[\"代理的支持\",{\"1\":{\"784\":1}}],[\"代理\",{\"0\":{\"806\":1},\"1\":{\"804\":1,\"806\":2}}],[\"代理模式\",{\"1\":{\"785\":1}}],[\"代理端\",{\"1\":{\"710\":1}}],[\"代理对象在调用方法的时候\",{\"1\":{\"453\":1}}],[\"代价很高\",{\"1\":{\"492\":1}}],[\"代表有\",{\"1\":{\"502\":1}}],[\"代表代码行\",{\"1\":{\"469\":1}}],[\"代表将被用于存储小数点后的位数\",{\"1\":{\"465\":1}}],[\"代表将被用于存储值的总的小数位数\",{\"1\":{\"465\":1}}],[\"代表非公平锁\",{\"1\":{\"333\":1}}],[\"代表公平锁和非公平锁\",{\"1\":{\"333\":1}}],[\"代表公平锁\",{\"1\":{\"333\":1}}],[\"代表\",{\"1\":{\"285\":1}}],[\"代表对象本身\",{\"1\":{\"251\":1}}],[\"代替了\",{\"1\":{\"734\":1}}],[\"代替\",{\"1\":{\"158\":2}}],[\"代码实现\",{\"1\":{\"807\":1}}],[\"代码也比较完整\",{\"1\":{\"788\":1}}],[\"代码会被执行\",{\"1\":{\"615\":1}}],[\"代码开发量少\",{\"1\":{\"434\":1}}],[\"代码和手动设置参数以及获取结果集\",{\"1\":{\"433\":1}}],[\"代码显式调用\",{\"1\":{\"417\":1}}],[\"代码中显式调用了\",{\"1\":{\"417\":1}}],[\"代码是单线程执行的\",{\"1\":{\"326\":1}}],[\"代码demo\",{\"0\":{\"56\":1,\"904\":1},\"2\":{\"55\":1}}],[\"代码\",{\"0\":{\"36\":1},\"1\":{\"615\":1,\"782\":1}}],[\"代码块会自动高亮\",{\"1\":{\"12\":1}}],[\"并对数据进行处理和转换\",{\"1\":{\"877\":1}}],[\"并对两个excel数据进行校对\",{\"1\":{\"349\":1}}],[\"并通知事务发起方全局事务的最终结果\",{\"1\":{\"872\":1}}],[\"并通过其\",{\"1\":{\"868\":1}}],[\"并通过\",{\"1\":{\"868\":1}}],[\"并通过路由规则将请求正确地路由到相应的api版本上\",{\"1\":{\"863\":1}}],[\"并通过负载均衡算法选择合适的服务实例进行请求转发\",{\"1\":{\"850\":1}}],[\"并通过轻量级通信机制\",{\"1\":{\"828\":1}}],[\"并生成分支事务id\",{\"1\":{\"872\":1}}],[\"并生成版本号\",{\"1\":{\"842\":1}}],[\"并释放本地锁和连接资源\",{\"1\":{\"871\":1}}],[\"并根据事务管理器的指令执行相应的事务操作\",{\"1\":{\"871\":1}}],[\"并根据事务的状态进行协调和处理\",{\"1\":{\"871\":1}}],[\"并保证分布式事务的一致性和隔离性\",{\"1\":{\"871\":1}}],[\"并保持注册信息的一致性\",{\"1\":{\"838\":1}}],[\"并保持长连接\",{\"1\":{\"769\":1}}],[\"并保持着对其关注\",{\"1\":{\"688\":1}}],[\"并保持半连接\",{\"1\":{\"573\":1}}],[\"并指定转发的目标uri\",{\"1\":{\"865\":1}}],[\"并指向mark\",{\"1\":{\"329\":1}}],[\"并分发请求到不同的服务实例上\",{\"1\":{\"847\":1}}],[\"并及时获取最新的配置信息\",{\"1\":{\"843\":1}}],[\"并触发相应的回调方法\",{\"1\":{\"842\":1}}],[\"并从服务列表中移除\",{\"1\":{\"837\":1}}],[\"并提供可扩展的存储和查询功能\",{\"1\":{\"876\":1}}],[\"并提供了路由\",{\"1\":{\"864\":1}}],[\"并提供负载均衡功能\",{\"1\":{\"846\":1}}],[\"并提供restful\",{\"1\":{\"841\":1}}],[\"并提供rest接口供其他服务查询\",{\"1\":{\"837\":1}}],[\"并提供路由\",{\"1\":{\"832\":1}}],[\"并支持多数据中心部署\",{\"1\":{\"835\":1}}],[\"并与\",{\"1\":{\"835\":1}}],[\"并推出了dubbo3\",{\"1\":{\"830\":1}}],[\"并层层返回给\",{\"1\":{\"816\":1}}],[\"并得到\",{\"1\":{\"816\":1}}],[\"并得到其结果\",{\"1\":{\"373\":1}}],[\"并未调用\",{\"1\":{\"816\":1}}],[\"并执行其\",{\"1\":{\"812\":1}}],[\"并淘汰了ejb这个传统的重装骑兵\",{\"1\":{\"782\":1}}],[\"并创建拉取请求对象\",{\"1\":{\"777\":1}}],[\"并求出每一页需要包含的平均size和每个页面记录的范围range\",{\"1\":{\"777\":1}}],[\"并会定时将\",{\"1\":{\"749\":1}}],[\"并定时进行心跳连接\",{\"1\":{\"748\":1}}],[\"并可以将这\",{\"1\":{\"725\":1}}],[\"并可以选择性地做一些特定的动作\",{\"1\":{\"347\":1}}],[\"并写入到缓存\",{\"1\":{\"707\":1}}],[\"并让其他从节点改为复制新的主节点\",{\"1\":{\"687\":1}}],[\"并没有太⼤的本质区别\",{\"1\":{\"664\":1}}],[\"并没有定义这个引用应该通过什么方式去定位\",{\"1\":{\"386\":1}}],[\"并由\",{\"1\":{\"639\":1}}],[\"并利用这些机器对受害者同时实施攻击\",{\"1\":{\"614\":1}}],[\"并利用此信息开始数据的传输\",{\"1\":{\"606\":1}}],[\"并在每个阶段记录相关的操作日志\",{\"1\":{\"870\":1}}],[\"并在每个时间窗口内统计请求的数量\",{\"1\":{\"860\":1}}],[\"并在必要时进行服务降级\",{\"1\":{\"853\":1}}],[\"并在子类中采用方法拦截的技术拦截所有父类方法的调用\",{\"1\":{\"806\":1}}],[\"并在\",{\"1\":{\"744\":1}}],[\"并在服务器端建立一个拦截器来验证这个\",{\"1\":{\"613\":1}}],[\"并在本地进行记录\",{\"1\":{\"207\":1}}],[\"并回复确认修改文件\",{\"1\":{\"612\":1}}],[\"并进行过滤和处理\",{\"1\":{\"877\":1}}],[\"并进行可视化展示和查询\",{\"1\":{\"868\":1}}],[\"并进行处理\",{\"1\":{\"275\":1}}],[\"并进入\",{\"1\":{\"574\":1}}],[\"并记录到\",{\"1\":{\"527\":1}}],[\"并用db\",{\"1\":{\"523\":1}}],[\"并静悄悄地提交\",{\"1\":{\"521\":1}}],[\"并阻止其它锁读取正在写入的数据\",{\"1\":{\"512\":1}}],[\"并把数据从内核缓冲区拷⻉到应⽤程序的缓冲区中\",{\"1\":{\"663\":1}}],[\"并把表针前移⼀个位置\",{\"1\":{\"658\":1}}],[\"并把新的⻚⾯插⼊这个位置\",{\"1\":{\"658\":1}}],[\"并把\",{\"1\":{\"481\":1}}],[\"并要求实现并发控制\",{\"1\":{\"476\":1}}],[\"并预编译\",{\"1\":{\"448\":1}}],[\"并重写\",{\"1\":{\"428\":1}}],[\"并引导用户编写的类加载逻辑时尽可能去重写这个方法\",{\"1\":{\"427\":1}}],[\"并放在程序的\",{\"1\":{\"425\":1}}],[\"并按空间排序\",{\"1\":{\"417\":1}}],[\"并将本地事务的执行结果反馈给事务协调器\",{\"1\":{\"872\":1}}],[\"并将事务的执行结果反馈给事务协调器\",{\"1\":{\"872\":1}}],[\"并将事务的状态变更进行持久化\",{\"1\":{\"871\":1}}],[\"并将变更的数据通过连接返回\",{\"1\":{\"843\":1}}],[\"并将当前的客户端连接加入到等待队列中\",{\"1\":{\"843\":1}}],[\"并将多个\",{\"1\":{\"819\":1}}],[\"并将分析后的信息组为相应的\",{\"1\":{\"792\":1}}],[\"并将命令的执行结果进行缓存\",{\"1\":{\"726\":1}}],[\"并将它送往就绪队列的末尾\",{\"1\":{\"640\":1}}],[\"并将它们直接注入到我们的\",{\"1\":{\"435\":1}}],[\"并将新的域名信息保存在所指定的\",{\"1\":{\"612\":1}}],[\"并将其加入到该集合中\",{\"1\":{\"390\":1}}],[\"并将锁记录里的owner指针指向对象头的markword\",{\"1\":{\"329\":1}}],[\"并更新列表上的记录\",{\"1\":{\"383\":1}}],[\"并处理阻塞队列中的任务\",{\"1\":{\"367\":1}}],[\"并使用交叉规则得出2个交配结果\",{\"1\":{\"349\":1}}],[\"并设置\",{\"1\":{\"332\":1}}],[\"并成功返回\",{\"1\":{\"320\":1}}],[\"并不需要设置是从\",{\"1\":{\"767\":1}}],[\"并不是完全基于\",{\"1\":{\"598\":1}}],[\"并不是固定地处于某个状态\",{\"1\":{\"303\":1}}],[\"并不会立即修改数据文件\",{\"1\":{\"519\":1}}],[\"并不会立即停止\",{\"1\":{\"358\":1}}],[\"并不意味着java平台的具体实现必须要按照\",{\"1\":{\"320\":1}}],[\"并不真实存在于数据表中\",{\"1\":{\"501\":1}}],[\"并不真实存在\",{\"1\":{\"317\":1}}],[\"并立即返回\",{\"1\":{\"302\":1}}],[\"并获取返回结果\",{\"1\":{\"300\":1}}],[\"并行和并发有什么区别\",{\"0\":{\"635\":1}}],[\"并行收集线程数\",{\"1\":{\"412\":2}}],[\"并行收集器设置\",{\"1\":{\"412\":1}}],[\"并行就是在同一时刻\",{\"1\":{\"635\":1}}],[\"并行就是我们在多个窗口排队\",{\"1\":{\"298\":1}}],[\"并行就是同一时刻\",{\"1\":{\"298\":1}}],[\"并行跟并发有什么区别\",{\"0\":{\"298\":1}}],[\"并返回给client\",{\"1\":{\"842\":1}}],[\"并返回给查询用户\",{\"1\":{\"470\":1}}],[\"并返回整体统计信息与每个数据类型中top1的大key\",{\"1\":{\"719\":1}}],[\"并返回\",{\"1\":{\"267\":1}}],[\"并接受达成共识的提案\",{\"1\":{\"213\":1}}],[\"并反映是否可以提交\",{\"1\":{\"202\":1}}],[\"并认为该状态不影响系统的整体可用性\",{\"1\":{\"193\":1}}],[\"并发量等指标\",{\"1\":{\"858\":1}}],[\"并发量非常大\",{\"1\":{\"712\":1}}],[\"并发起了springcloud\",{\"1\":{\"831\":1}}],[\"并发导致写入了脏数据\",{\"1\":{\"708\":1}}],[\"并发度一般\",{\"1\":{\"512\":1}}],[\"并发度高\",{\"1\":{\"512\":1}}],[\"并发度最低\",{\"1\":{\"512\":1}}],[\"并发回收时垃圾收集线程可能会抢占用户线程的资源\",{\"1\":{\"405\":1}}],[\"并发收集\",{\"1\":{\"405\":1}}],[\"并发清除阶段\",{\"1\":{\"405\":1}}],[\"并发清除\",{\"1\":{\"403\":1}}],[\"并发标记\",{\"1\":{\"403\":1,\"404\":1}}],[\"并发容器和框架\",{\"0\":{\"372\":1}}],[\"并发工具类\",{\"0\":{\"344\":1}}],[\"并发环境下\",{\"1\":{\"336\":1}}],[\"并发包中的锁就是基于aqs实现的\",{\"1\":{\"331\":1}}],[\"并发其实是一个cpu来应付多个线程\",{\"1\":{\"304\":1}}],[\"并发就是在一段时间内\",{\"1\":{\"635\":1}}],[\"并发就是我们挤在一个窗口\",{\"1\":{\"298\":1}}],[\"并发就是同一时刻\",{\"1\":{\"298\":1}}],[\"并发的实现依赖于cpu切换线程\",{\"1\":{\"298\":1}}],[\"并发局限于应用中\",{\"1\":{\"280\":1}}],[\"并发送mq消息\",{\"1\":{\"206\":1}}],[\"并发时\",{\"1\":{\"177\":1}}],[\"并发编程篇面试题八股文\",{\"1\":{\"623\":1}}],[\"并发编程篇👍\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"并发编程\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"623\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"并发修改\",{\"1\":{\"157\":1}}],[\"并且需要在应用程序中配置相应的xa数据源\",{\"1\":{\"870\":1}}],[\"并且能够被独立的部署到生产环境中\",{\"1\":{\"824\":1}}],[\"并且只能作用于\",{\"1\":{\"807\":1}}],[\"并且管理\",{\"1\":{\"782\":1}}],[\"并且调用removeunnecessarymessagequeue\",{\"1\":{\"777\":1}}],[\"并且是顺序读取\",{\"1\":{\"772\":1}}],[\"并且还可以为\",{\"1\":{\"744\":1}}],[\"并且每个消费者都要求收到全量的消息\",{\"1\":{\"743\":1}}],[\"并且层的跨度为3\",{\"1\":{\"732\":1}}],[\"并且字符数组最后一个元素总是\",{\"1\":{\"730\":1}}],[\"并且集合中的元素是无序的\",{\"1\":{\"670\":1}}],[\"并且此处完全不可以使用重发机制\",{\"1\":{\"597\":1}}],[\"并且确认服务端的接收和发送能力是正常的\",{\"1\":{\"572\":1}}],[\"并且修改时\",{\"1\":{\"515\":1}}],[\"并且命中了部分record记录\",{\"1\":{\"513\":1}}],[\"并且没有命中任何一个record\",{\"1\":{\"513\":1}}],[\"并且没有时间要求要求\",{\"1\":{\"407\":1}}],[\"并且所有列的排序方向都一样时\",{\"1\":{\"491\":1}}],[\"并且不需要较高的数据安全性\",{\"1\":{\"476\":1}}],[\"并且不能重写\",{\"1\":{\"272\":3}}],[\"并且根据字符集的校对规则对值进行排序和比较\",{\"1\":{\"462\":1}}],[\"并且可自定义存储源\",{\"1\":{\"446\":1}}],[\"并且可以通过future的get\",{\"1\":{\"357\":1}}],[\"并且批量执行所有更新语句\",{\"1\":{\"445\":1}}],[\"并且无法卸载\",{\"1\":{\"428\":1}}],[\"并且替换更新版本的\",{\"1\":{\"428\":1}}],[\"并且这个对象可以被拆散\",{\"1\":{\"408\":1}}],[\"并且进行垃圾收集时\",{\"1\":{\"401\":1}}],[\"并且当断电或者系统崩溃\",{\"1\":{\"371\":1}}],[\"并且当前印戳\",{\"1\":{\"336\":1}}],[\"并且当前线程之前没有获取过该锁\",{\"1\":{\"332\":1}}],[\"并且线程池中执行的任务也为空\",{\"1\":{\"367\":1}}],[\"并且对象markword锁标志设置为\",{\"1\":{\"329\":1}}],[\"并且将锁对象markword复制到该锁记录中\",{\"1\":{\"329\":1}}],[\"并且\",{\"1\":{\"279\":1,\"591\":1,\"678\":1}}],[\"并且附带一个语句块表示这段语句最终一定被执行\",{\"1\":{\"256\":1}}],[\"并且编号mn大于它已经响应的所有准备请求的编号\",{\"1\":{\"215\":1}}],[\"并且位运算比\",{\"1\":{\"168\":1}}],[\"并且在遍历过程中使用一个\",{\"1\":{\"157\":1}}],[\"并且它会自动换行\",{\"1\":{\"10\":1}}],[\"即执行业务逻辑和数据库操作\",{\"1\":{\"872\":1}}],[\"即资源管理器\",{\"1\":{\"872\":1}}],[\"即暂时不返回结果\",{\"1\":{\"843\":1}}],[\"即面向切面编程\",{\"1\":{\"783\":1}}],[\"即每隔1s\",{\"1\":{\"777\":1}}],[\"即broker端中多个messagequeue分配给同一个consumergroup中的哪些consumer消费\",{\"1\":{\"777\":1}}],[\"即为commitlog\",{\"1\":{\"771\":1}}],[\"即为broker单个实例下所有的队列共用一个日志数据文件\",{\"1\":{\"771\":1}}],[\"即死信消息\",{\"1\":{\"766\":1}}],[\"即主从关为\",{\"1\":{\"720\":1}}],[\"即0或者1\",{\"1\":{\"705\":1}}],[\"即写\",{\"1\":{\"682\":1}}],[\"即在⼀段时间内\",{\"1\":{\"655\":1}}],[\"即在同一个\",{\"1\":{\"558\":1}}],[\"即我们同时实现内核态和用户态线程管理\",{\"1\":{\"644\":1}}],[\"即公钥和私钥\",{\"1\":{\"616\":1}}],[\"即时通讯\",{\"1\":{\"597\":1}}],[\"即时编译器编译后的代码缓存等数据\",{\"1\":{\"379\":1}}],[\"即计算平滑的\",{\"1\":{\"591\":1}}],[\"即数据包的一次往返时间\",{\"1\":{\"591\":1}}],[\"即丢失的那几个数据包\",{\"1\":{\"589\":1}}],[\"即当\",{\"1\":{\"586\":1}}],[\"即发送窗口大小是\",{\"1\":{\"583\":1}}],[\"即全连接队列\",{\"1\":{\"573\":1}}],[\"即半连接队列\",{\"1\":{\"573\":1}}],[\"即服务端每产生一块数据\",{\"1\":{\"558\":1}}],[\"即修改前的值\",{\"1\":{\"519\":1}}],[\"即一个事务不影响其它事务运行效果\",{\"1\":{\"518\":1}}],[\"即除了锁住记录本身\",{\"1\":{\"513\":1}}],[\"即要么先写入\",{\"1\":{\"482\":1}}],[\"即该日志是逻辑日志\",{\"1\":{\"480\":1}}],[\"即该资源同时只由一个线程占用\",{\"1\":{\"342\":1,\"647\":1}}],[\"即某个字段值为\",{\"1\":{\"469\":1}}],[\"即本文中的案例\",{\"1\":{\"417\":1}}],[\"即对象代表哪个类\",{\"1\":{\"385\":1}}],[\"即使配置没有变更\",{\"1\":{\"843\":1}}],[\"即使broker宕机\",{\"1\":{\"755\":1}}],[\"即使队列里没有消息\",{\"1\":{\"722\":1}}],[\"即使发生了缓存数据不一致的问题\",{\"1\":{\"708\":1}}],[\"即使中途服务器宕机\",{\"1\":{\"677\":1}}],[\"即使给它cpu控制权\",{\"1\":{\"637\":1}}],[\"即使给地球上每一粒沙子都分配一个\",{\"1\":{\"605\":1}}],[\"即使数据库在事务提交后立即崩溃\",{\"1\":{\"519\":1}}],[\"即使事务失败\",{\"1\":{\"519\":1}}],[\"即使比较的字段上有索引\",{\"1\":{\"489\":1}}],[\"即使在有消息堆积情况下也不会影响性能\",{\"1\":{\"772\":1}}],[\"即使在系统崩溃之后\",{\"1\":{\"519\":1}}],[\"即使在左表中没有匹配的记录\",{\"1\":{\"459\":1}}],[\"即使在右表中没有匹配的记录\",{\"1\":{\"459\":1}}],[\"即使不设置也有默认大小\",{\"1\":{\"381\":1}}],[\"即使这两个对象指向相同的数据\",{\"1\":{\"258\":1}}],[\"即无限大\",{\"1\":{\"364\":1}}],[\"即适用执行长期的任务\",{\"1\":{\"363\":1}}],[\"即keepalivetime为0\",{\"1\":{\"363\":1}}],[\"即线程集合\",{\"1\":{\"342\":1,\"647\":1}}],[\"即线程变量\",{\"1\":{\"306\":1}}],[\"即表示此对象处于轻量级锁状态\",{\"1\":{\"329\":1}}],[\"即返回\",{\"1\":{\"294\":1}}],[\"即客户端有连接请求时服务器端就需要启动一个线程进行处理\",{\"1\":{\"280\":1}}],[\"即默认\",{\"1\":{\"250\":1}}],[\"即⼀个引⽤变量到底会指向哪个类的实例对象\",{\"1\":{\"248\":1}}],[\"即⼦类可以对⽗类进⾏扩展\",{\"1\":{\"248\":1}}],[\"即收到的提案号并不是决策节点收到过的最大的\",{\"1\":{\"215\":1}}],[\"即便是两个进程同时申请新建节点\",{\"1\":{\"197\":1}}],[\"即允许系统在多个不同节点的数据副本存在数据延时\",{\"1\":{\"193\":1}}],[\"即\",{\"1\":{\"157\":1,\"257\":1,\"267\":1,\"280\":1,\"427\":1,\"493\":1,\"558\":1,\"582\":1,\"593\":1,\"595\":1,\"600\":1}}],[\"即可声明式开启事务\",{\"1\":{\"784\":1}}],[\"即可获取该值\",{\"1\":{\"784\":1}}],[\"即可\",{\"1\":{\"443\":1}}],[\"即可免费领取\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"即可以向此元素进行放大\",{\"1\":{\"42\":1}}],[\"即可在幻灯片获得焦点时进入全屏模式\",{\"1\":{\"40\":1}}],[\"即可在幻灯片获得焦点时进入预览模式\",{\"1\":{\"38\":1}}],[\"基金会\",{\"1\":{\"836\":1}}],[\"基金会开源的分布式协调服务\",{\"1\":{\"835\":1}}],[\"基础上\",{\"1\":{\"789\":1}}],[\"基础篇面试题八股文\",{\"1\":{\"623\":1}}],[\"基础掌握不错的小伙伴可以跳过这一部分\",{\"1\":{\"457\":1}}],[\"基础部分不会有人不会吧\",{\"1\":{\"457\":1}}],[\"基础支撑层\",{\"1\":{\"449\":1}}],[\"基础组件升级等情况\",{\"1\":{\"417\":1}}],[\"基础\",{\"0\":{\"297\":1,\"432\":1,\"457\":1,\"541\":1,\"667\":1,\"739\":1,\"781\":1},\"1\":{\"623\":1,\"682\":1}}],[\"基础语法\",{\"0\":{\"237\":1}}],[\"基于rpc的远程调用通常使用框架如dubbo来实现\",{\"1\":{\"845\":1}}],[\"基于http风格的远程调用通常使用框架如feign来实现\",{\"1\":{\"845\":1}}],[\"基于动态代理来实现\",{\"1\":{\"807\":1}}],[\"基于性能的考虑\",{\"1\":{\"770\":1}}],[\"基于可用性的考虑\",{\"1\":{\"770\":1}}],[\"基于以上的一些考虑\",{\"1\":{\"732\":1}}],[\"基于⼏种基础的数据结构\",{\"1\":{\"671\":1}}],[\"基于⾮阻塞的io多路复⽤机制\",{\"1\":{\"671\":1}}],[\"基于⾮阻塞的\",{\"1\":{\"663\":1}}],[\"基于非阻塞的i\",{\"1\":{\"663\":1}}],[\"基于\",{\"1\":{\"446\":1,\"526\":1,\"732\":1,\"819\":1}}],[\"基于事务的\",{\"1\":{\"435\":1}}],[\"基于标记\",{\"1\":{\"401\":2}}],[\"基于这种算法\",{\"1\":{\"396\":1}}],[\"基于cas来操作int类型变量\",{\"1\":{\"341\":1}}],[\"基于jvm实现\",{\"1\":{\"330\":1}}],[\"基于消息传递\",{\"1\":{\"211\":1}}],[\"基于拷贝内容的优点是避免了concurrent\",{\"1\":{\"157\":1}}],[\"基本都支持这些负载均衡算法\",{\"1\":{\"851\":1}}],[\"基本容器\",{\"1\":{\"793\":1}}],[\"基本所有的web应用都会使用redis作为缓存\",{\"1\":{\"669\":1}}],[\"基本思路是\",{\"1\":{\"658\":1}}],[\"基本上做到了图比问题多\",{\"1\":{\"621\":1}}],[\"基本上是被拿来和\",{\"1\":{\"596\":1}}],[\"基本上就可以定位到代码层的逻辑了\",{\"1\":{\"418\":1}}],[\"基本只能使用一个索引\",{\"1\":{\"497\":1}}],[\"基本的索引类型\",{\"1\":{\"495\":1}}],[\"基本就能定位到问题在那了\",{\"1\":{\"418\":1}}],[\"基本就可以看到死锁的信息\",{\"1\":{\"343\":1}}],[\"基本类型\",{\"1\":{\"238\":1}}],[\"基本可用\",{\"1\":{\"193\":1}}],[\"基本数据类型吗\",{\"0\":{\"263\":1},\"1\":{\"263\":1}}],[\"基本数据类型范围和默认值\",{\"1\":{\"238\":1}}],[\"基本数据类型和引用数据类型\",{\"1\":{\"238\":1}}],[\"基本数据类型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":1,\"257\":1,\"879\":1}}],[\"缺点是有大量无用的消息到达了\",{\"1\":{\"762\":1}}],[\"缺点是加重了\",{\"1\":{\"762\":1}}],[\"缺点是对业务代码有一定的侵入性\",{\"1\":{\"708\":1}}],[\"缺点是如何安全将密钥传输给另一方\",{\"1\":{\"616\":1}}],[\"缺点是扩充新的表很麻烦\",{\"1\":{\"531\":1}}],[\"缺点是处于等待队列中的线程可能会饿死\",{\"1\":{\"332\":1}}],[\"缺点是整体吞吐效率相对非公平锁要低\",{\"1\":{\"332\":1}}],[\"缺点\",{\"1\":{\"157\":1,\"202\":1,\"204\":1,\"405\":1,\"677\":2,\"741\":3}}],[\"而只提供最基本的功能\",{\"1\":{\"856\":1}}],[\"而feign也可以集成rpc协议进行远程调用\",{\"1\":{\"846\":1}}],[\"而分布式系统本身具有一些固有的挑战\",{\"1\":{\"829\":1}}],[\"而分库之后单机事务就用不上了\",{\"1\":{\"534\":1}}],[\"而soa是一种设计原则\",{\"1\":{\"828\":1}}],[\"而synchronized不用手动释放锁\",{\"1\":{\"330\":1}}],[\"而synchronized只能是非公平锁\",{\"1\":{\"330\":1}}],[\"而无须通过显式的方式进行依赖配置\",{\"1\":{\"796\":1}}],[\"而rocketmq的设计理念也正是基于此\",{\"1\":{\"770\":1}}],[\"而reentrantlock是基于jdk的api层面实现的\",{\"1\":{\"330\":1}}],[\"而zookeeper的写是不可扩展的\",{\"1\":{\"770\":1}}],[\"而zookeeper满足的是cp\",{\"1\":{\"770\":1}}],[\"而广播消费消息会发给消费者组中的每一个消费者进行消费\",{\"1\":{\"745\":1}}],[\"而使用的一种数据结构\",{\"1\":{\"733\":1}}],[\"而字符串对象则保存这一个sds值\",{\"1\":{\"732\":1}}],[\"而每个哈希表节点就保存了字典里中的一个键值对\",{\"1\":{\"729\":1}}],[\"而每次回收后存活的少量对象\",{\"1\":{\"394\":1}}],[\"而cpu饱和是指redis单核cpu使用率跑到接近100\",{\"1\":{\"718\":1}}],[\"而cyclicbarrier中的各个线程可以等待其他线程\",{\"1\":{\"347\":1}}],[\"而cyclicbarrier则可以多次设置屏障\",{\"1\":{\"347\":1}}],[\"而直接返回一个提前准备好的\",{\"1\":{\"704\":1}}],[\"而集群就是终极方案\",{\"1\":{\"691\":1}}],[\"而配置提供者和通知功能\",{\"1\":{\"687\":1}}],[\"而内核空间的数据是通过操作系统的i\",{\"1\":{\"662\":1}}],[\"而内部的任务该怎么跑还是怎么跑\",{\"1\":{\"358\":1}}],[\"而又等待其它线程释放它或它们现在保持着的资源\",{\"1\":{\"646\":1}}],[\"而用户态线程数量较多\",{\"1\":{\"644\":1}}],[\"而用了\",{\"1\":{\"531\":1}}],[\"而长作业又需要执行很长时间\",{\"1\":{\"640\":1}}],[\"而它的一个或多个子进程还在运行\",{\"1\":{\"639\":1}}],[\"而父进程并没有调用\",{\"1\":{\"638\":1}}],[\"而我们知道\",{\"1\":{\"607\":1}}],[\"而一个\",{\"1\":{\"604\":1}}],[\"而可以继续发送数据的最大值\",{\"1\":{\"583\":1}}],[\"而客户端就能在\",{\"1\":{\"576\":1}}],[\"而客户端由于一段时间内没有收到服务端发来的确认报文\",{\"1\":{\"570\":1}}],[\"而服务端可能还有数据需要处理和发送\",{\"1\":{\"575\":1}}],[\"而服务端此时会阻塞在\",{\"1\":{\"570\":1}}],[\"而传回\",{\"1\":{\"571\":1}}],[\"而传输的媒介为内存\",{\"1\":{\"306\":1}}],[\"而此时客户端认为自己已经建立连接成功\",{\"1\":{\"570\":1}}],[\"而出的协议\",{\"1\":{\"548\":1}}],[\"而跨库了之后就无法使用\",{\"1\":{\"534\":1}}],[\"而另外一个分段实际存储的数据量有\",{\"1\":{\"531\":1}}],[\"而另一个线程感知到了变化\",{\"1\":{\"306\":1}}],[\"而非聚簇索引一个表可以存在多个\",{\"1\":{\"506\":1}}],[\"而非物理分页\",{\"1\":{\"454\":1}}],[\"而all是从硬盘中读取\",{\"1\":{\"493\":1}}],[\"而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间\",{\"1\":{\"490\":1}}],[\"而嵌套查询会新创建一张临时表\",{\"1\":{\"490\":1}}],[\"而两阶段提交就是让这两个状态保持逻辑上的一致\",{\"1\":{\"482\":1}}],[\"而代理的方法被放到了mapperproxy中\",{\"1\":{\"450\":1}}],[\"而batch模式重复使用已经预处理的语句\",{\"1\":{\"445\":1}}],[\"而mybatis在查询关联对象或关联集合对象时\",{\"1\":{\"433\":1}}],[\"而新生代的内存分区同样是从垃圾收集的角度来分配的\",{\"1\":{\"394\":1}}],[\"而新生代又可以分为三个区域\",{\"1\":{\"394\":1}}],[\"而新资源己被其它线程占有\",{\"1\":{\"342\":1,\"647\":1}}],[\"而句柄中包含了对象实例数据与类型数据各自具体的地址信息\",{\"1\":{\"386\":1}}],[\"而到了\",{\"1\":{\"381\":1}}],[\"而到了运行时就不检查了\",{\"1\":{\"285\":1}}],[\"而本地方法栈则是为虚拟机使用到的本地\",{\"1\":{\"379\":1}}],[\"而窃取任务的线程永远从双端队列的尾部拿任务执行\",{\"1\":{\"373\":1}}],[\"而数据库的连接数只有10个\",{\"1\":{\"348\":1}}],[\"而槽位\",{\"1\":{\"313\":1}}],[\"而后两种面向字符\",{\"1\":{\"306\":1}}],[\"而后者实现的是运行时的多态性\",{\"1\":{\"249\":1}}],[\"而不需要通过硬编码的方式\",{\"1\":{\"782\":1}}],[\"而不同的\",{\"1\":{\"744\":1}}],[\"而不支持回滚则可以保持简单\",{\"1\":{\"724\":1}}],[\"而不用普通二叉树\",{\"0\":{\"503\":1}}],[\"而不要包含额外的列\",{\"1\":{\"487\":1}}],[\"而不依赖于其他非主键\",{\"1\":{\"460\":1}}],[\"而不能是依赖于主键的一部分\",{\"1\":{\"460\":1}}],[\"而不管当前是否存在守护线程\",{\"1\":{\"305\":1}}],[\"而不是一个页面\",{\"1\":{\"784\":1}}],[\"而不是一个线程\",{\"1\":{\"272\":1}}],[\"而不是对应单个消费者实例\",{\"1\":{\"766\":1}}],[\"而不是覆盖老版本\",{\"1\":{\"519\":1}}],[\"而不是修改单列索引\",{\"1\":{\"497\":1}}],[\"而不是通过原来的二级索引提取数据行\",{\"1\":{\"488\":1}}],[\"而不是作为二进制浮点数\",{\"1\":{\"465\":1}}],[\"而不是在直接连接在地址后面\",{\"1\":{\"784\":1}}],[\"而不是在\",{\"1\":{\"427\":1}}],[\"而不是防止指令重排的有序性\",{\"1\":{\"326\":1}}],[\"而不是使用当前线程的本地内存中的值\",{\"1\":{\"322\":1}}],[\"而不是返回\",{\"1\":{\"276\":1}}],[\"而不是\",{\"1\":{\"241\":1}}],[\"而不是8\",{\"1\":{\"172\":1}}],[\"而唤醒线程主要是下面两个方法\",{\"1\":{\"302\":1}}],[\"而中间操作会返回一个\",{\"1\":{\"294\":1}}],[\"而如果时间片过长\",{\"1\":{\"640\":1}}],[\"而如果黑客要对其实施\",{\"1\":{\"613\":1}}],[\"而如果想打破双亲委派模型则需要重写\",{\"1\":{\"426\":1}}],[\"而如果\",{\"1\":{\"289\":1}}],[\"而对于commitlog消息存储的日志数据文件来说\",{\"1\":{\"772\":1}}],[\"而对于一个简单的服务发现的场景来说\",{\"1\":{\"770\":1}}],[\"而对于引用类型变量指向的堆中的对象不会拷贝\",{\"1\":{\"260\":1}}],[\"而对它的改变必须同步刷新回共享内存\",{\"1\":{\"306\":1}}],[\"而对象所占的空间是在堆中开辟的\",{\"1\":{\"259\":1}}],[\"而是返回预设的默认值或错误信息\",{\"1\":{\"858\":1}}],[\"而是和\",{\"1\":{\"819\":1}}],[\"而是依然通过\",{\"1\":{\"795\":1}}],[\"而是交给\",{\"1\":{\"788\":1}}],[\"而是容器\",{\"1\":{\"787\":1}}],[\"而是把\",{\"1\":{\"778\":1}}],[\"而是把这个请求委派给父类加载器去完成\",{\"1\":{\"424\":1}}],[\"而是将其发送到该消费者对应的特殊队列中\",{\"1\":{\"766\":1}}],[\"而是应该在执行完所有消费业务逻辑之后\",{\"1\":{\"756\":1}}],[\"而是分多次\",{\"1\":{\"731\":1}}],[\"而是基于这些数据结构创建了一个对象系统\",{\"1\":{\"729\":1}}],[\"而是缓存在\",{\"1\":{\"724\":1}}],[\"而是建议通过scan命令执行增量迭代扫描key\",{\"1\":{\"719\":1}}],[\"而是\",{\"1\":{\"680\":1}}],[\"而是像一个产品一样\",{\"1\":{\"622\":1}}],[\"而是以数据驱动\",{\"1\":{\"592\":1}}],[\"而是先在使用前注册了销毁的相关调用接口\",{\"1\":{\"793\":1}}],[\"而是先探测一下网络的拥塞程度\",{\"1\":{\"586\":1}}],[\"而是先复制原有集合内容\",{\"1\":{\"157\":1}}],[\"而是针对整个\",{\"1\":{\"554\":1}}],[\"而是而是一种数据存储方式\",{\"1\":{\"506\":1}}],[\"而是在内存中设置了一片称之为redo\",{\"1\":{\"483\":1}}],[\"而是采用\",{\"1\":{\"482\":1}}],[\"而是表示\",{\"1\":{\"469\":1}}],[\"而是放置于map<string\",{\"1\":{\"451\":1}}],[\"而是进一步发展为更加复杂的网状结构\",{\"1\":{\"427\":1}}],[\"而是按照若干个\",{\"1\":{\"404\":1}}],[\"而是必须是执行到安全点才能够暂停\",{\"1\":{\"402\":1}}],[\"而是让所有存活的对象都向内存空间一端移动\",{\"1\":{\"395\":1}}],[\"而是等于2\",{\"1\":{\"340\":1}}],[\"而是会把值刷新回主内存\",{\"1\":{\"322\":1}}],[\"而是它的一个弱引用\",{\"1\":{\"310\":1}}],[\"而是随着代码的执行在不同的状态之间进行切换\",{\"1\":{\"303\":1}}],[\"而是被中断的线程根据中断状态自行处理\",{\"1\":{\"302\":1}}],[\"而是继续抛给调用者\",{\"1\":{\"275\":1}}],[\"而是直接引用缓存池中的\",{\"1\":{\"269\":1}}],[\"而是为了描述某个事件在解决整个问题的过程所发生的行为\",{\"1\":{\"247\":1}}],[\"而建立对象的目的也不是为了完成一个个步骤\",{\"1\":{\"247\":1}}],[\"而言\",{\"1\":{\"245\":1,\"636\":1}}],[\"而\",{\"1\":{\"232\":1,\"239\":1,\"272\":1,\"275\":1,\"276\":1,\"299\":1,\"381\":1,\"386\":1,\"413\":1,\"418\":1,\"462\":1,\"464\":2,\"465\":1,\"480\":2,\"548\":1,\"553\":4,\"557\":1,\"566\":1,\"578\":1,\"597\":1,\"600\":1,\"804\":1,\"806\":1,\"813\":2}}],[\"而保证这一点的正是\",{\"1\":{\"232\":1}}],[\"而全局事务的职责是协调它管理的分支事务达成一致性\",{\"1\":{\"208\":1}}],[\"而在push模式只是对pull模式的一种封装\",{\"1\":{\"777\":1}}],[\"而在事务进行的过程中\",{\"1\":{\"480\":1}}],[\"而在直接内存中划出一块区域作为元空间\",{\"1\":{\"380\":1}}],[\"而在分布式环境下\",{\"1\":{\"200\":1}}],[\"而在hashmap的putval方法中\",{\"1\":{\"186\":1}}],[\"而且本身存储的数据应该是高度定制化的\",{\"1\":{\"770\":1}}],[\"而且可以通过增加机器的方式水平扩展\",{\"1\":{\"770\":1}}],[\"而且需要保证和消息确认这一步的原子性\",{\"1\":{\"757\":1}}],[\"而且处在高并发高负荷的情况下\",{\"1\":{\"704\":1}}],[\"而且计数性能非常好\",{\"1\":{\"669\":1}}],[\"而且因为redis会将所有数据都存放在内存中\",{\"1\":{\"668\":1}}],[\"而且手册的内容不是杂乱无章的\",{\"1\":{\"620\":1}}],[\"而且不会被其它线程打断\",{\"1\":{\"724\":1}}],[\"而且不用按照顺序一一对应\",{\"1\":{\"558\":1}}],[\"而且不是空字符串\",{\"1\":{\"241\":1}}],[\"而且从形式上看\",{\"1\":{\"553\":1}}],[\"而且路由表本身如果太大\",{\"1\":{\"531\":1}}],[\"而且应该是单例的\",{\"1\":{\"435\":1}}],[\"而且无法被卸载\",{\"1\":{\"428\":1}}],[\"而且对于同一个全限定名的\",{\"1\":{\"428\":1}}],[\"而且每次回收的内存空间也正常\",{\"1\":{\"415\":1}}],[\"而且方法执行非常慢\",{\"1\":{\"413\":1}}],[\"而且解决了\",{\"1\":{\"406\":1}}],[\"而且这种操作需要\",{\"1\":{\"395\":1}}],[\"而且其中大部分是需要被回收的\",{\"1\":{\"395\":1}}],[\"而且有极少数方法\",{\"1\":{\"381\":1}}],[\"而且会中断正在运行的任务\",{\"1\":{\"367\":1}}],[\"而且正在运行的线程数量大于或等于\",{\"1\":{\"353\":1}}],[\"而且正在运行的线程数量小于\",{\"1\":{\"353\":1}}],[\"而且第一个操作的执行顺序排在第二个操作之前\",{\"1\":{\"320\":1}}],[\"而且entry数据的key和当前不相等\",{\"1\":{\"313\":1}}],[\"而且编号的大小是趋势递增的\",{\"1\":{\"213\":1}}],[\"而且最终一致性的间隔主要有定时任务的间隔时间决定\",{\"1\":{\"205\":1}}],[\"而且支持redlock\",{\"1\":{\"198\":1}}],[\"而且过期时间需要和setnx同一个原子操作\",{\"1\":{\"198\":1}}],[\"而且频繁操作会增大数据库的开销\",{\"1\":{\"196\":1}}],[\"而且混合后的低位掺杂了高位的部分特征\",{\"1\":{\"167\":1}}],[\"而这对于一个注册中心来说肯定是不能接受的\",{\"1\":{\"770\":1}}],[\"而这一过程被称为交换\",{\"1\":{\"657\":1}}],[\"而这个数量级\",{\"1\":{\"605\":1}}],[\"而这个临界值threshold就是由加载因子和当前容器的容量大小来确定的\",{\"1\":{\"173\":1}}],[\"而这里等待了两次\",{\"1\":{\"346\":1}}],[\"而这样会导致全局数据的不一致性\",{\"1\":{\"192\":1}}],[\"而p\",{\"1\":{\"192\":1}}],[\"而导致\",{\"1\":{\"177\":1}}],[\"而扩容中有一个非常重要的点\",{\"1\":{\"174\":1}}],[\"而该数\",{\"1\":{\"168\":1}}],[\"而hashmap是用hash值\",{\"1\":{\"168\":1}}],[\"而item属性可以任意指定\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"安全认证与授权\",{\"1\":{\"863\":1}}],[\"安全认证等功能\",{\"1\":{\"832\":1}}],[\"安全检查\",{\"1\":{\"804\":1}}],[\"安全性相对\",{\"1\":{\"566\":1}}],[\"安全性是指对数据库操作没有改变数据库中的数据\",{\"1\":{\"553\":1}}],[\"安全协议\",{\"1\":{\"561\":1}}],[\"安全\",{\"1\":{\"542\":1}}],[\"安全等等\",{\"1\":{\"472\":1}}],[\"安全失败\",{\"1\":{\"157\":1}}],[\"安其拉\",{\"1\":{\"345\":6}}],[\"安装picgo软件\",{\"0\":{\"108\":1}}],[\"迭代新的功能\",{\"1\":{\"622\":1}}],[\"迭代年龄会在每次\",{\"1\":{\"400\":1}}],[\"迭代器遍历的是开始遍历那一刻拿到的集合拷贝\",{\"1\":{\"157\":1}}],[\"迭代器并不能访问到修改后的内容\",{\"1\":{\"157\":1}}],[\"迭代器在遍历时直接访问集合中的内容\",{\"1\":{\"157\":1}}],[\"迭代过程中被修改\",{\"1\":{\"157\":1}}],[\"每秒请求数\",{\"1\":{\"859\":1}}],[\"每30s发送一次心跳\",{\"1\":{\"769\":1}}],[\"每成功消费一条消息\",{\"1\":{\"744\":1}}],[\"每份订阅中\",{\"1\":{\"743\":1}}],[\"每进行一次命令操作就记录到\",{\"1\":{\"677\":1}}],[\"每⼀⻚的⼤⼩为\",{\"1\":{\"653\":1}}],[\"每台主机都会在自己的\",{\"1\":{\"606\":1}}],[\"每台数据库服务器都存储了所有的业务数据\",{\"1\":{\"525\":1}}],[\"每轮次发送窗口增加一倍\",{\"1\":{\"586\":1}}],[\"每收到一个\",{\"1\":{\"586\":1,\"587\":1}}],[\"每到一层\",{\"1\":{\"544\":1}}],[\"每时每刻都有可能被改动\",{\"1\":{\"515\":1}}],[\"每执行一次update或select\",{\"1\":{\"451\":1}}],[\"每隔20s执行一次\",{\"1\":{\"777\":1}}],[\"每隔2秒\",{\"1\":{\"688\":1}}],[\"每隔1秒\",{\"1\":{\"688\":1}}],[\"每隔10秒\",{\"1\":{\"688\":1}}],[\"每隔一段时间\",{\"1\":{\"582\":1}}],[\"每隔一秒打印一次\",{\"1\":{\"415\":1}}],[\"每隔\",{\"1\":{\"418\":1}}],[\"每一级缓存的失效时间都不同\",{\"1\":{\"704\":1}}],[\"每一块内存被称为页\",{\"1\":{\"657\":1}}],[\"每一部分都是循序渐进\",{\"1\":{\"620\":1}}],[\"每一篇都是数万字\",{\"1\":{\"619\":1}}],[\"每一行记录都有两个隐藏列db\",{\"1\":{\"523\":1}}],[\"每一个微服务提供单个业务功能的服务\",{\"1\":{\"824\":1}}],[\"每一个条目共20个字节\",{\"1\":{\"771\":1}}],[\"每一个程序模块\",{\"1\":{\"427\":1}}],[\"每一个层次的类加载器都是如此\",{\"1\":{\"424\":1}}],[\"每一个\",{\"1\":{\"404\":1,\"429\":1,\"791\":1}}],[\"每一次移区年龄加一\",{\"1\":{\"400\":1}}],[\"每一次\",{\"1\":{\"384\":1,\"797\":1}}],[\"每当⼀个⻚⾯被访问时\",{\"1\":{\"658\":1}}],[\"每当有一个地方引用它时\",{\"1\":{\"390\":1}}],[\"每当迭代器使用hashnext\",{\"1\":{\"157\":1}}],[\"每次从容器重调用\",{\"1\":{\"797\":1}}],[\"每次创建一个新的跳跃表节点的时候\",{\"1\":{\"732\":1}}],[\"每次创建sqlsessionfactory都会使用数据库资源\",{\"1\":{\"435\":1}}],[\"每次都需要遍历一遍整个数组\",{\"1\":{\"730\":1}}],[\"每次写命令引起的复制内存页单位由4k变为2mb\",{\"1\":{\"718\":1}}],[\"每次操作时都传⼊整个\",{\"1\":{\"664\":1}}],[\"每次调用redis命令时\",{\"1\":{\"710\":1}}],[\"每次调用select之前都需要遍历设置监听集合\",{\"1\":{\"664\":1}}],[\"每次调用select都需要在内核遍历传递进来的所有fd\",{\"1\":{\"664\":1}}],[\"每次调用select\",{\"1\":{\"664\":1}}],[\"每次调度时\",{\"1\":{\"640\":1}}],[\"每次接入互联网时\",{\"1\":{\"605\":1}}],[\"每次请求都必须附上所有信息\",{\"1\":{\"558\":1}}],[\"每次请求都需要建立一个\",{\"1\":{\"558\":1}}],[\"每次请求都能获取到非错的响应\",{\"1\":{\"190\":1}}],[\"每次修改时\",{\"1\":{\"523\":1}}],[\"每次修改变量\",{\"1\":{\"336\":1}}],[\"每次读取数据前都生成一个\",{\"1\":{\"522\":1}}],[\"每次更新记录时\",{\"1\":{\"519\":1}}],[\"每次\",{\"1\":{\"464\":1}}],[\"每次迭代到的位置\",{\"1\":{\"445\":1}}],[\"每次分配内存只使用\",{\"1\":{\"396\":1}}],[\"每次复制少量的存活对象效率比较高\",{\"1\":{\"396\":1}}],[\"每次复制的只是少量的存活对象\",{\"1\":{\"395\":1}}],[\"每次只使用其中的一块\",{\"1\":{\"395\":1}}],[\"每次提交一个任务\",{\"1\":{\"364\":1}}],[\"每创建一个threadlocal对象\",{\"1\":{\"312\":1}}],[\"每个参与者在执行本地事务期间生成回滚日志\",{\"1\":{\"874\":1}}],[\"每个过滤器可以在请求前\",{\"1\":{\"865\":1}}],[\"每个后端服务器被赋予一个权重值\",{\"1\":{\"851\":1}}],[\"每个后端服务器有相等的被选中概率\",{\"1\":{\"851\":1}}],[\"每个后端服务器都被赋予一个权重值\",{\"1\":{\"851\":1}}],[\"每个eureka\",{\"1\":{\"838\":1}}],[\"每个entry代表一个完整的对象\",{\"1\":{\"310\":1}}],[\"每个微服务都由专门的团队负责\",{\"1\":{\"829\":1}}],[\"每个微服务都有自己的数据存储\",{\"1\":{\"829\":1}}],[\"每个微服务可以独立开发\",{\"1\":{\"828\":1}}],[\"每个微服务负责执行特定的业务功能\",{\"1\":{\"828\":1}}],[\"每个consumequeue文件大小约5\",{\"1\":{\"771\":1}}],[\"每个文件默认1g\",{\"1\":{\"771\":1}}],[\"每个消费者负责消费组内的一部分消息\",{\"1\":{\"744\":1}}],[\"每个消费组都消费主题中一份完整的消息\",{\"1\":{\"744\":1}}],[\"每个层都有一个指向表尾的前进指针\",{\"1\":{\"732\":1}}],[\"每个元素都包含一个指向其它节点的指针\",{\"1\":{\"732\":1}}],[\"每个跳跃表节点的层⾼都是1\",{\"1\":{\"729\":1}}],[\"每个字典带有两个hash表\",{\"1\":{\"729\":1}}],[\"每个字段\",{\"1\":{\"460\":1}}],[\"每个链表的节点由⼀个listnode结构来表示\",{\"1\":{\"729\":1}}],[\"每个存储位存储都是一个bit\",{\"1\":{\"705\":1}}],[\"每个槽对应一定的数据\",{\"1\":{\"699\":1}}],[\"每个槽包含哈希值在一定范围内的数据\",{\"1\":{\"695\":1}}],[\"每个从节点都要检查最后与主节点断线时间\",{\"1\":{\"698\":1}}],[\"每个实际节点包含一定数量的槽\",{\"1\":{\"695\":1}}],[\"每个主节点都可以对外提供读服务和写服务\",{\"1\":{\"691\":1}}],[\"每个在线的sentinel节点都有资格成为领导者\",{\"1\":{\"689\":1}}],[\"每个sentinel节点会每隔1秒对主节点\",{\"1\":{\"688\":1}}],[\"每个sentinel节点会向主节点\",{\"1\":{\"688\":1}}],[\"每个sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构\",{\"1\":{\"688\":1}}],[\"每个sentinel节点会向redis数据节点的\",{\"1\":{\"688\":1}}],[\"每个statement对象都是addbatch\",{\"1\":{\"451\":1}}],[\"每个分身检查一个学生的答案是否正确\",{\"1\":{\"672\":1}}],[\"每个进程都有自己独立的地址空间\",{\"1\":{\"651\":1}}],[\"每个内核态线程可以服务一个或多个用户态线程\",{\"1\":{\"644\":1}}],[\"每个中间节点\",{\"1\":{\"602\":1}}],[\"每个确认增加\",{\"1\":{\"587\":1}}],[\"每个确认\",{\"1\":{\"586\":1}}],[\"每个服务都可以发布和订阅事件\",{\"1\":{\"870\":1}}],[\"每个服务都有自己的数据库和代码库\",{\"1\":{\"828\":1}}],[\"每个服务都专注于特定的业务功能\",{\"1\":{\"828\":1}}],[\"每个服务都围绕着具体的业务进行构建\",{\"1\":{\"824\":1}}],[\"每个服务运行在其独立的进程中\",{\"1\":{\"824\":1}}],[\"每个服务器都有一个进程\",{\"1\":{\"555\":1}}],[\"每个服务在目录下创建节点\",{\"1\":{\"197\":1}}],[\"每个版本都会有两个额外的属性\",{\"1\":{\"519\":1}}],[\"每个子任务在调用fork方法时\",{\"1\":{\"373\":1}}],[\"每个插入操作必须等到另一个线程调用移除操作\",{\"1\":{\"356\":1}}],[\"每个核都有自己的一级缓存\",{\"1\":{\"317\":1}}],[\"每个核有自己的控制器和运算器\",{\"1\":{\"317\":1}}],[\"每个线程在\",{\"1\":{\"384\":1}}],[\"每个线程在往threadlocal里设置值的时候\",{\"1\":{\"310\":1}}],[\"每个线程都有一个私有的本地内存\",{\"1\":{\"317\":1}}],[\"每个线程都有一个属于自己的threadlocalmap\",{\"1\":{\"310\":1}}],[\"每个\",{\"1\":{\"280\":1,\"477\":1,\"748\":1,\"761\":1}}],[\"每个请求进来请求数就+1\",{\"1\":{\"227\":1}}],[\"每个提案都有唯一编号\",{\"1\":{\"213\":1}}],[\"每个节点可以保存一个字节数组或者一个整数值\",{\"1\":{\"733\":1}}],[\"每个节点可以保存⼀个字节数组或者整数值\",{\"1\":{\"729\":1}}],[\"每个节点都有指向前置节点和后置节点的指针\",{\"1\":{\"729\":1}}],[\"每个节点对应若干个槽\",{\"1\":{\"697\":1,\"699\":1}}],[\"每个节点需要开启配置cluster\",{\"1\":{\"697\":1}}],[\"每个节点存储更多关键字\",{\"1\":{\"504\":1}}],[\"每个节点只能用本地数据提供服务\",{\"1\":{\"192\":1}}],[\"每个节点要么是红色\",{\"1\":{\"162\":1}}],[\"每个红色节点的两个子节点一定都是黑色\",{\"1\":{\"162\":1}}],[\"每个单词的首字母大写\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"则可以进行限制\",{\"1\":{\"859\":1}}],[\"则可以考虑先在从库添加\",{\"1\":{\"537\":1}}],[\"则设置一个定时任务\",{\"1\":{\"843\":1}}],[\"则外部调用方法\",{\"1\":{\"813\":1}}],[\"则抛出异常\",{\"1\":{\"813\":1}}],[\"则把当前事务挂起\",{\"1\":{\"813\":1}}],[\"则以非事务的方式继续运行\",{\"1\":{\"813\":1}}],[\"则以原子方式将引用值和印戳标志的值更新为给定的更新值\",{\"1\":{\"336\":1}}],[\"则加入该事务\",{\"1\":{\"813\":1}}],[\"则使用\",{\"1\":{\"812\":1}}],[\"则使用序列化\",{\"1\":{\"719\":1}}],[\"则采用\",{\"1\":{\"796\":1}}],[\"则从processqueuetable缓存变量中移除对应的entry\",{\"1\":{\"777\":1}}],[\"则延迟一下又继续拉取\",{\"1\":{\"777\":1}}],[\"则要手动停止\",{\"1\":{\"767\":1}}],[\"则按照成员对象的⼤⼩排序\",{\"1\":{\"729\":1}}],[\"则依然会继续执行余下的命令\",{\"1\":{\"724\":1}}],[\"则删除\",{\"1\":{\"716\":1}}],[\"则发送节\",{\"1\":{\"698\":1}}],[\"则对从节点发送+continue响应\",{\"1\":{\"685\":1}}],[\"则对上一个连接生成的结果表\",{\"1\":{\"470\":1}}],[\"则线程可进⼊临界区\",{\"1\":{\"645\":1}}],[\"则切换的过程就跟进程上下⽂切换⼀样\",{\"1\":{\"643\":1}}],[\"则表明消费者在正常情况下无法正确地消费该消息\",{\"1\":{\"766\":1}}],[\"则表明当前没有阻塞中的进程\",{\"1\":{\"641\":1}}],[\"则表明当前有阻塞中的进程\",{\"1\":{\"641\":1}}],[\"则表明还有资源可使⽤\",{\"1\":{\"641\":1}}],[\"则表明资源已被占⽤\",{\"1\":{\"641\":1}}],[\"则表示每次遍历的元素的属性时\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"则子进程退出后将形成僵尸进程\",{\"1\":{\"641\":1}}],[\"则子查询表大的用\",{\"1\":{\"464\":1}}],[\"则挂起当前进程\",{\"1\":{\"640\":1}}],[\"则路由器会根据路由表选择合适的路径\",{\"1\":{\"602\":1}}],[\"则重发时\",{\"1\":{\"593\":1}}],[\"则说明是由服务器⽅主动发起的断开请求\",{\"1\":{\"579\":1}}],[\"则自动将\",{\"1\":{\"566\":1}}],[\"则为可信赖的证书\",{\"1\":{\"564\":1}}],[\"则解决\",{\"1\":{\"561\":1}}],[\"则是通过历史的使⽤情况来推测要淘汰的⻚⾯\",{\"1\":{\"658\":1}}],[\"则是\",{\"1\":{\"554\":1}}],[\"则是应用层通信协议\",{\"1\":{\"548\":1}}],[\"则是一个\",{\"1\":{\"265\":1}}],[\"则又面临一个死循环式的路由算法选择问题\",{\"1\":{\"531\":1}}],[\"则事务被提交\",{\"1\":{\"519\":1}}],[\"则我们直接判断一次就知道表中是否有数据行被锁定了\",{\"1\":{\"514\":1}}],[\"则不会获取\",{\"1\":{\"813\":1}}],[\"则不使用索引\",{\"1\":{\"498\":1}}],[\"则不断重试\",{\"1\":{\"206\":1}}],[\"则用空格填充\",{\"1\":{\"461\":1}}],[\"则在\",{\"1\":{\"427\":1}}],[\"则处于await的线程都会出现问题\",{\"1\":{\"347\":1}}],[\"则必须要指定任务数\",{\"1\":{\"347\":1}}],[\"则必须重写\",{\"1\":{\"252\":1}}],[\"则请求者只能等待\",{\"1\":{\"342\":1,\"647\":1}}],[\"则调用该方法线程会被放入\",{\"1\":{\"332\":1}}],[\"则这次只是简单地把\",{\"1\":{\"332\":1}}],[\"则当前线程会获取到该锁\",{\"1\":{\"332\":1}}],[\"则当前线程持有该对象锁\",{\"1\":{\"329\":1}}],[\"则升级为重量级锁\",{\"1\":{\"329\":1}}],[\"则进程\",{\"1\":{\"645\":1}}],[\"则进行自旋等待\",{\"1\":{\"329\":1}}],[\"则进入步骤\",{\"1\":{\"328\":1}}],[\"则将其覆盖\",{\"1\":{\"606\":1}}],[\"则将t线程的偏向锁升级为轻量级锁\",{\"1\":{\"328\":1}}],[\"则将markword中线程id设置为当前线程id\",{\"1\":{\"328\":1}}],[\"则执行当前子任务并返回结果\",{\"1\":{\"373\":1}}],[\"则执行\",{\"1\":{\"328\":1,\"329\":1}}],[\"则查看线程id是否为当前线程\",{\"1\":{\"328\":1}}],[\"则此时的反序列化会失败\",{\"1\":{\"282\":1}}],[\"则编译器会根据类的相关信息自动生成一个\",{\"1\":{\"282\":1}}],[\"则该\",{\"1\":{\"258\":1}}],[\"则\",{\"1\":{\"258\":2,\"469\":3,\"476\":1,\"570\":1,\"796\":2}}],[\"则通过\",{\"1\":{\"257\":1}}],[\"则会应用所配置的过滤器\",{\"1\":{\"865\":1}}],[\"则会向eureka\",{\"1\":{\"837\":1}}],[\"则会将其标记为不可用\",{\"1\":{\"837\":1}}],[\"则会发生侦测包\",{\"1\":{\"560\":1}}],[\"则会一直等待\",{\"1\":{\"349\":1}}],[\"则会在当前线程栈帧中划出一块空间\",{\"1\":{\"329\":1}}],[\"则会清除中断标志\",{\"1\":{\"302\":1}}],[\"则会⾃动以类型的默认值⽽赋值\",{\"1\":{\"253\":1}}],[\"则会抛出concurrent\",{\"1\":{\"157\":1}}],[\"则视为重载\",{\"1\":{\"249\":1}}],[\"则直接撤销偏向锁\",{\"1\":{\"328\":1}}],[\"则直接返回\",{\"1\":{\"225\":1}}],[\"则直接插入即可否则需要覆盖\",{\"1\":{\"164\":1}}],[\"则认为可能是\",{\"1\":{\"613\":1}}],[\"则认为\",{\"1\":{\"222\":1}}],[\"则返回空值\",{\"1\":{\"215\":1}}],[\"则回滚\",{\"1\":{\"206\":1}}],[\"则中断事务\",{\"1\":{\"203\":1}}],[\"则提交事务\",{\"1\":{\"203\":1}}],[\"则需要进行拆分\",{\"1\":{\"719\":1}}],[\"则需要在与客户端的交互中才能体现\",{\"1\":{\"687\":1}}],[\"则需要把链表转换为红黑树\",{\"1\":{\"164\":1}}],[\"则需放弃一致性\",{\"1\":{\"192\":1}}],[\"则commit\",{\"1\":{\"206\":1}}],[\"则c\",{\"1\":{\"192\":1}}],[\"则首先将当前容器复制一份\",{\"1\":{\"159\":1}}],[\"则异常不会抛出\",{\"1\":{\"157\":1}}],[\"和分支事务\",{\"1\":{\"871\":1}}],[\"和资源管理器\",{\"1\":{\"871\":1}}],[\"和拉\",{\"1\":{\"843\":1}}],[\"和注册中心一样\",{\"1\":{\"841\":1}}],[\"和序列化方式\",{\"1\":{\"830\":1}}],[\"和扩展容器\",{\"1\":{\"793\":1}}],[\"和依赖注入\",{\"1\":{\"783\":1}}],[\"和面向切面\",{\"1\":{\"782\":1}}],[\"和用户应用程序地址空间的缓冲区之间来回进行拷贝的性能开销\",{\"1\":{\"772\":1}}],[\"和用户线程并发执行\",{\"1\":{\"404\":1}}],[\"和用户线程同时运行\",{\"1\":{\"403\":2}}],[\"和indexfile\",{\"1\":{\"771\":1}}],[\"和broker\",{\"1\":{\"748\":1}}],[\"和broadcasting\",{\"1\":{\"745\":1}}],[\"和额处的键值对\",{\"1\":{\"744\":1}}],[\"和普通的双向链表\",{\"1\":{\"734\":1}}],[\"和expire\",{\"1\":{\"727\":1}}],[\"和前⾯的同步操作不⼀样\",{\"1\":{\"663\":1}}],[\"和自己本机的\",{\"1\":{\"609\":1}}],[\"和自减运算符\",{\"1\":{\"245\":1}}],[\"和传输层\",{\"1\":{\"602\":1}}],[\"和发送窗⼝有什么关系呢\",{\"1\":{\"585\":1}}],[\"和全连接队列\",{\"1\":{\"573\":1}}],[\"和内存的消耗\",{\"1\":{\"572\":1}}],[\"和内存资源\",{\"1\":{\"364\":1,\"720\":1}}],[\"和尾部\",{\"1\":{\"544\":1}}],[\"和临键锁\",{\"1\":{\"513\":2}}],[\"和间隙锁\",{\"1\":{\"513\":1}}],[\"和指针\",{\"1\":{\"501\":1}}],[\"和我们通过书的目录\",{\"1\":{\"496\":1}}],[\"和崩溃修复能力\",{\"1\":{\"477\":1}}],[\"和下一个表重复执行步骤\",{\"1\":{\"470\":1}}],[\"和编码无关\",{\"1\":{\"461\":1}}],[\"和订单\",{\"1\":{\"460\":1}}],[\"和$\",{\"0\":{\"439\":1}}],[\"和getresult\",{\"1\":{\"438\":2}}],[\"和映射器\",{\"1\":{\"435\":1}}],[\"和卸载\",{\"1\":{\"421\":1}}],[\"和已用过的那块\",{\"1\":{\"396\":1}}],[\"和其中一块\",{\"1\":{\"396\":1}}],[\"和老年代\",{\"1\":{\"394\":1}}],[\"和虚引用\",{\"1\":{\"392\":1}}],[\"和可达性分析算法\",{\"1\":{\"390\":1}}],[\"和上面的例子原理类似\",{\"1\":{\"389\":1}}],[\"和上面的题目一样的道理\",{\"1\":{\"245\":1}}],[\"和对齐填充\",{\"1\":{\"385\":1}}],[\"和对象输入流objectinputstream\",{\"1\":{\"283\":1}}],[\"和堆类似\",{\"1\":{\"379\":1}}],[\"和语言无关\",{\"1\":{\"377\":1}}],[\"和shutdownnow简单来说区别如下\",{\"1\":{\"358\":1}}],[\"和shutdown\",{\"1\":{\"358\":1}}],[\"和共享变量的新值\",{\"1\":{\"334\":1}}],[\"和公平锁一样都会进入到\",{\"1\":{\"333\":1}}],[\"和notify\",{\"1\":{\"330\":1}}],[\"和unlock\",{\"1\":{\"330\":1}}],[\"和join\",{\"1\":{\"306\":1}}],[\"和反序列化时候对象的\",{\"1\":{\"282\":1}}],[\"和引用数据类型变量的地址值\",{\"1\":{\"260\":1}}],[\"和接收窗⼝\",{\"1\":{\"585\":1}}],[\"和接口\",{\"0\":{\"252\":1}}],[\"和接⼝\",{\"1\":{\"248\":1}}],[\"和重写\",{\"0\":{\"249\":1}}],[\"和短路或运算符\",{\"1\":{\"241\":1}}],[\"和⼯具\",{\"1\":{\"233\":1}}],[\"和a\",{\"1\":{\"192\":1}}],[\"和hashmap基本相同\",{\"1\":{\"181\":1}}],[\"和\",{\"0\":{\"233\":1,\"241\":1,\"264\":1,\"265\":2,\"434\":1,\"462\":1,\"463\":1,\"464\":1,\"477\":1,\"480\":1,\"553\":1,\"557\":1,\"566\":1,\"578\":1,\"597\":1,\"617\":1,\"677\":1,\"730\":1,\"789\":1,\"807\":1},\"1\":{\"177\":3,\"183\":1,\"203\":1,\"204\":1,\"219\":3,\"233\":1,\"252\":1,\"258\":1,\"266\":1,\"269\":2,\"280\":1,\"283\":1,\"285\":1,\"292\":1,\"305\":1,\"381\":1,\"396\":2,\"399\":1,\"401\":1,\"418\":3,\"458\":1,\"463\":2,\"464\":2,\"465\":3,\"477\":1,\"479\":1,\"482\":1,\"489\":1,\"501\":2,\"509\":2,\"518\":1,\"523\":2,\"531\":1,\"551\":1,\"553\":1,\"559\":1,\"561\":1,\"564\":1,\"565\":1,\"566\":3,\"569\":1,\"573\":2,\"575\":1,\"584\":1,\"589\":1,\"592\":1,\"597\":1,\"602\":1,\"607\":1,\"662\":2,\"664\":1,\"682\":1,\"694\":1,\"720\":1,\"726\":1,\"727\":3,\"730\":2,\"731\":1,\"734\":2,\"749\":1,\"778\":1,\"782\":1,\"784\":2,\"787\":1,\"791\":1,\"802\":1,\"815\":1,\"819\":2,\"847\":1,\"868\":3}}],[\"和统计学有关\",{\"1\":{\"172\":1}}],[\"和原来的数做|运算\",{\"1\":{\"169\":1}}],[\"和某个散列值做\",{\"1\":{\"167\":1}}],[\"和安全失败\",{\"0\":{\"157\":1}}],[\"和动画\",{\"1\":{\"21\":1}}],[\"会为该事务创建相应的全局事务记录\",{\"1\":{\"872\":1}}],[\"会为每个\",{\"1\":{\"493\":1}}],[\"会从本地缓存中获取服务的注册信息\",{\"1\":{\"837\":1}}],[\"会从主内存重新获取最新值\",{\"1\":{\"322\":1}}],[\"会自引入其他依赖\",{\"1\":{\"819\":1}}],[\"会自动进行消息重试\",{\"1\":{\"766\":1}}],[\"会自动扩展空间\",{\"1\":{\"730\":1}}],[\"会自动发送\",{\"1\":{\"608\":1}}],[\"会调用\",{\"1\":{\"817\":1}}],[\"会抛出异常\",{\"1\":{\"813\":1}}],[\"会触发一个事件机制\",{\"1\":{\"843\":1}}],[\"会触发对应的\",{\"1\":{\"812\":1}}],[\"会触发新的垃圾回收\",{\"1\":{\"405\":1}}],[\"会遍历容器中的所有\",{\"1\":{\"812\":1}}],[\"会通过\",{\"1\":{\"802\":1}}],[\"会直接抛出异常\",{\"1\":{\"799\":1}}],[\"会直接取出出该值\",{\"1\":{\"477\":1}}],[\"会存在线程安全问题吗\",{\"0\":{\"798\":1}}],[\"会扫描注解\",{\"1\":{\"794\":1}}],[\"会完成负载均衡服务线程\",{\"1\":{\"777\":1}}],[\"会唤醒一个线程去将数据持久化到commitlog日志文件中\",{\"1\":{\"774\":1}}],[\"会唤醒一个在这个共享变量上调用\",{\"1\":{\"302\":1}}],[\"会顺序对其他相邻块的数据文件进行预读取\",{\"1\":{\"772\":1}}],[\"会查询所有的半消息\",{\"1\":{\"765\":1}}],[\"会家具内存的碎片化\",{\"1\":{\"734\":1}}],[\"会一直执命令\",{\"1\":{\"726\":1}}],[\"会一直异步重试\",{\"1\":{\"207\":1}}],[\"会执行失败\",{\"1\":{\"724\":1}}],[\"会执行完\",{\"1\":{\"358\":1}}],[\"会严重占用带宽和cpu\",{\"1\":{\"719\":1}}],[\"会拖慢写操作的执行时间\",{\"1\":{\"718\":1}}],[\"会落入到\",{\"1\":{\"694\":2}}],[\"会向其他sentinel节点发送sentinel\",{\"1\":{\"689\":1}}],[\"会对后面这个节点造成力\",{\"1\":{\"694\":1}}],[\"会对主从节点和网络造成很大的开销\",{\"1\":{\"685\":1}}],[\"会对代码做很多优化\",{\"1\":{\"408\":1}}],[\"会尝试和主节点建立网络连接\",{\"1\":{\"684\":1}}],[\"会进入阻塞状态\",{\"1\":{\"645\":1}}],[\"会不断尝试获取锁\",{\"1\":{\"645\":1}}],[\"会中断当前在执⾏的⽤户程序\",{\"1\":{\"633\":1}}],[\"会产⽣⼀个中断\",{\"1\":{\"633\":1}}],[\"会产生性能问题\",{\"1\":{\"584\":1}}],[\"会产生所谓的理\",{\"1\":{\"405\":1}}],[\"会利用相关的更改功能修改该域名的注册信息\",{\"1\":{\"612\":1}}],[\"会检查数据包中的目的\",{\"1\":{\"606\":1}}],[\"会首先检查自己的\",{\"1\":{\"606\":1}}],[\"会等待一定的超时周期\",{\"1\":{\"591\":1}}],[\"会有两种情况\",{\"1\":{\"588\":1}}],[\"会有一个自旋次数的限制\",{\"1\":{\"337\":1}}],[\"会⾃我牺牲\",{\"1\":{\"585\":1}}],[\"会随着响应数据⼀起⽴刻发送给对⽅\",{\"1\":{\"584\":1}}],[\"会随着线程获取锁后\",{\"1\":{\"326\":1}}],[\"会问一句\",{\"1\":{\"581\":1}}],[\"会重发\",{\"1\":{\"576\":1}}],[\"会重复这个过程\",{\"1\":{\"570\":1}}],[\"会使用\",{\"1\":{\"817\":1}}],[\"会使用单独的线程去构建缓存\",{\"1\":{\"712\":1}}],[\"会使用基于可靠连接的\",{\"1\":{\"600\":1}}],[\"会使用undo\",{\"1\":{\"519\":1}}],[\"会使⽤⾃⼰的私钥将该\",{\"1\":{\"564\":1}}],[\"会验证证书的合法性\",{\"1\":{\"563\":1}}],[\"会降低增\",{\"1\":{\"536\":1}}],[\"会影响整体性能\",{\"1\":{\"531\":1}}],[\"会影响原对象\",{\"1\":{\"260\":1}}],[\"会创建一个\",{\"1\":{\"527\":1}}],[\"会异步将这些更改刷新到数据文件中\",{\"1\":{\"519\":1}}],[\"会加\",{\"1\":{\"515\":1}}],[\"会加载字节码文件\",{\"1\":{\"289\":1}}],[\"会退化成记录锁\",{\"1\":{\"513\":1}}],[\"会锁住\",{\"1\":{\"513\":1}}],[\"会出现死锁\",{\"1\":{\"512\":2}}],[\"会优先比较\",{\"1\":{\"509\":1}}],[\"会造成部分缓存节点的压力较大\",{\"1\":{\"694\":1}}],[\"会造成\",{\"1\":{\"572\":1}}],[\"会造成叶子节点频繁分裂\",{\"1\":{\"497\":1}}],[\"会造成精度损失\",{\"1\":{\"239\":1}}],[\"会占用更多的内存\",{\"1\":{\"490\":1}}],[\"会把持有者的公钥\",{\"1\":{\"564\":1}}],[\"会把\",{\"1\":{\"483\":1}}],[\"会把这些对象列进回收范围之中进行第二次回收\",{\"1\":{\"392\":1}}],[\"会记录所有与数据库有关的日志记录\",{\"1\":{\"480\":1}}],[\"会比\",{\"1\":{\"469\":2}}],[\"会忽略列值为空\",{\"1\":{\"469\":1}}],[\"会真正去执行sql\",{\"1\":{\"450\":1}}],[\"会将它维护在consumermanager的本地缓存变量\",{\"1\":{\"777\":1}}],[\"会将此信息存入\",{\"1\":{\"566\":1}}],[\"会将之前取出的版本\",{\"1\":{\"515\":1}}],[\"会将该数据的版本也取出来\",{\"1\":{\"515\":1}}],[\"会将sql中的\",{\"1\":{\"439\":1}}],[\"会将节点进行自旋获取锁\",{\"1\":{\"331\":1}}],[\"会话层\",{\"1\":{\"542\":3}}],[\"会话运行是mybatis最复杂的部分\",{\"1\":{\"448\":1}}],[\"会话运行\",{\"1\":{\"448\":2}}],[\"会话\",{\"1\":{\"435\":1}}],[\"会涉及对象的移动\",{\"1\":{\"402\":1}}],[\"会涉及到多个数据库\",{\"1\":{\"200\":1}}],[\"会\",{\"1\":{\"384\":1}}],[\"会因永久代的原因而导致不同虚拟机下有不同的表现\",{\"1\":{\"381\":1}}],[\"会同步创建一个栈帧\",{\"1\":{\"379\":1}}],[\"会导致redis\",{\"1\":{\"722\":1}}],[\"会导致数据的重新迁移\",{\"1\":{\"693\":1}}],[\"会导致进程切换得太频繁\",{\"1\":{\"640\":1}}],[\"会导致大量的二次读取操作\",{\"1\":{\"528\":1}}],[\"会导致队列的任务越积越多\",{\"1\":{\"365\":1}}],[\"会导致同步时间无限延长\",{\"1\":{\"192\":1}}],[\"会给临时表加上\",{\"1\":{\"492\":1}}],[\"会给cpu带来非常大的执行开销\",{\"1\":{\"337\":1}}],[\"会给与提议者两个承诺与一个应答\",{\"1\":{\"215\":1}}],[\"会被加入到该列表\",{\"1\":{\"325\":1}}],[\"会被加入到\",{\"1\":{\"325\":1}}],[\"会作⽤于类的所有对象实例\",{\"1\":{\"324\":1}}],[\"会在每个\",{\"1\":{\"770\":1}}],[\"会在表链接后筛选掉重复的记录行\",{\"1\":{\"468\":1}}],[\"会在变量外侧自动加单引号\",{\"1\":{\"440\":1}}],[\"会在\",{\"1\":{\"422\":1}}],[\"会在指令序列中插入内存屏障来禁止特定类型的处理器重排序\",{\"1\":{\"322\":1}}],[\"会在编译期对\",{\"1\":{\"266\":1}}],[\"会分别经历下面3种重排序\",{\"1\":{\"319\":1}}],[\"会继续往下执行\",{\"1\":{\"302\":1}}],[\"会继续进行事务提交\",{\"1\":{\"203\":1}}],[\"会写入\",{\"1\":{\"287\":2}}],[\"会返回新的资源地址\",{\"1\":{\"551\":1}}],[\"会返回右表所有的行\",{\"1\":{\"459\":1}}],[\"会返回左表所有的行\",{\"1\":{\"459\":1}}],[\"会返回之前暂存的结果\",{\"1\":{\"276\":1}}],[\"会返回相同的散列值\",{\"1\":{\"258\":1}}],[\"会先调用\",{\"1\":{\"802\":1}}],[\"会先于\",{\"1\":{\"799\":1}}],[\"会先根据topic找到指定的topicpublishinfo\",{\"1\":{\"776\":1}}],[\"会先发送到主题\",{\"1\":{\"764\":1}}],[\"会先创建一条线程\",{\"1\":{\"301\":1}}],[\"会先将\",{\"1\":{\"276\":1}}],[\"会先检查是否需要扩容\",{\"1\":{\"155\":1}}],[\"会根据不同的策略去访问资源\",{\"1\":{\"785\":1}}],[\"会根据不同的事件\",{\"1\":{\"280\":1}}],[\"会根据\",{\"1\":{\"519\":1}}],[\"会根据表的使用情况自动为表生成哈希索引\",{\"1\":{\"475\":1}}],[\"会根据有误异常情况\",{\"1\":{\"208\":1}}],[\"会根据调用链传播\",{\"1\":{\"208\":1}}],[\"会发生链表和红黑树的不断转换\",{\"1\":{\"172\":1}}],[\"会让文字在不超出幻灯片范围的情况下尽可能大\",{\"1\":{\"16\":1}}],[\"就相当于提前进行了第一次调用\",{\"1\":{\"848\":1}}],[\"就要用到编译后织入\",{\"1\":{\"807\":1}}],[\"就要遍历所有的\",{\"1\":{\"744\":1}}],[\"就完成了\",{\"1\":{\"788\":1,\"821\":1}}],[\"就创建并注册一个\",{\"1\":{\"788\":1}}],[\"就自己创建什么\",{\"1\":{\"787\":1}}],[\"就退避60000l\",{\"1\":{\"776\":1}}],[\"就退避3000lms\",{\"1\":{\"776\":1}}],[\"就得考虑扩容message\",{\"1\":{\"758\":1}}],[\"就得考虑提高消费能力\",{\"1\":{\"758\":1}}],[\"就得把服务和资源放到一个机器\",{\"1\":{\"191\":1}}],[\"就还是之前的一条\",{\"1\":{\"756\":1}}],[\"就能降低响应时间\",{\"1\":{\"740\":1}}],[\"就能理解为什么需要四次了\",{\"1\":{\"575\":1}}],[\"就取代h\",{\"1\":{\"731\":1}}],[\"就只好放弃或者稍后再试\",{\"1\":{\"727\":1}}],[\"就只会产生一次上下文切换\",{\"1\":{\"726\":1}}],[\"就只选择了这个\",{\"1\":{\"593\":1}}],[\"就干等着\",{\"1\":{\"663\":1}}],[\"就⽴即返回\",{\"1\":{\"663\":1}}],[\"就清除访问位\",{\"1\":{\"658\":1}}],[\"就淘汰该⻚⾯\",{\"1\":{\"658\":1}}],[\"就在于槽和节点的对应关系\",{\"1\":{\"699\":1}}],[\"就在\",{\"1\":{\"655\":1}}],[\"就在排队区排队等\",{\"1\":{\"353\":1}}],[\"就绪状态\",{\"1\":{\"637\":1}}],[\"就向本地网段发起一个\",{\"1\":{\"606\":1}}],[\"就代表着\",{\"1\":{\"594\":1}}],[\"就好像缓存不存在一样\",{\"1\":{\"703\":1}}],[\"就好像水管被关小了水龙头一样\",{\"1\":{\"586\":1}}],[\"就好像我们去食堂打饭\",{\"1\":{\"298\":1}}],[\"就减少\",{\"1\":{\"585\":1}}],[\"就有了拥塞控制\",{\"1\":{\"585\":1}}],[\"就去翻动态\",{\"1\":{\"663\":1}}],[\"就去干别的\",{\"1\":{\"663\":1}}],[\"就去喝个茶什么的\",{\"1\":{\"663\":1}}],[\"就去询问接受方\",{\"1\":{\"582\":1}}],[\"就去取出任务执行\",{\"1\":{\"364\":1}}],[\"就发送一块\",{\"1\":{\"558\":1}}],[\"就加一个信封\",{\"1\":{\"544\":1}}],[\"就变成了下一层的数据单元\",{\"1\":{\"544\":1}}],[\"就允许事务对表中的数据进行修改\",{\"1\":{\"515\":1}}],[\"就回表了两次\",{\"1\":{\"510\":1}}],[\"就无法匹配呢\",{\"1\":{\"509\":1}}],[\"就少了上述的更新语句\",{\"1\":{\"482\":1}}],[\"就直接将数据包发送到这个\",{\"1\":{\"606\":1}}],[\"就直接返回给执行器\",{\"1\":{\"481\":1}}],[\"就直接执行sql\",{\"1\":{\"448\":1}}],[\"就够了\",{\"1\":{\"476\":1}}],[\"就按照多长来存储\",{\"1\":{\"461\":1}}],[\"就开始重发了\",{\"1\":{\"591\":1}}],[\"就开始执行rehash\",{\"1\":{\"314\":1}}],[\"就开启一个statement对象\",{\"1\":{\"451\":1}}],[\"就将拥塞窗口\",{\"1\":{\"586\":1}}],[\"就将清空\",{\"1\":{\"446\":1}}],[\"就将还存活着的对象复制到另外一块上面\",{\"1\":{\"395\":1}}],[\"就把\",{\"1\":{\"427\":1}}],[\"就把它赋给当前线程\",{\"1\":{\"315\":1}}],[\"就重新设置保活计时器\",{\"1\":{\"577\":1}}],[\"就重写\",{\"1\":{\"426\":1}}],[\"就重试发送\",{\"1\":{\"205\":1}}],[\"就很大概率存在内存泄漏了\",{\"1\":{\"418\":1}}],[\"就称之为方法逃逸\",{\"1\":{\"408\":1}}],[\"就先执行相应的类加载过程\",{\"1\":{\"382\":1}}],[\"就分裂成两个子任务计算\",{\"1\":{\"373\":1}}],[\"就可得到原问题的解\",{\"1\":{\"373\":1}}],[\"就可以将相应的类导入到\",{\"1\":{\"820\":1}}],[\"就可以被使用了\",{\"1\":{\"793\":1}}],[\"就可以发送一个延时消息\",{\"1\":{\"763\":1}}],[\"就可以对消费者进行扩容\",{\"1\":{\"758\":1}}],[\"就可以⽤它来恢复还原数据库的状态\",{\"1\":{\"676\":1}}],[\"就可以使本连接持续的时间内所产生的所有报文段都从网络中消失\",{\"1\":{\"576\":1}}],[\"就可以使用索引了\",{\"1\":{\"489\":1}}],[\"就可以使用semaphore来做流量控制\",{\"1\":{\"348\":1}}],[\"就可以使用防重表的方式\",{\"1\":{\"225\":1}}],[\"就可以下线老库\",{\"1\":{\"532\":1}}],[\"就可以查询对应的\",{\"1\":{\"531\":1}}],[\"就可以实现读写分离\",{\"1\":{\"526\":1}}],[\"就可以利用\",{\"1\":{\"479\":1}}],[\"就可以生成对象\",{\"1\":{\"428\":1}}],[\"就可以保证事务的acid特性\",{\"1\":{\"200\":1}}],[\"就可以得到和\",{\"1\":{\"168\":1}}],[\"就新建一个线程执行\",{\"1\":{\"364\":1}}],[\"就必须分割成两个子任务\",{\"1\":{\"373\":1}}],[\"就必须要满足\",{\"1\":{\"191\":1}}],[\"就必然会创建一个线程\",{\"1\":{\"364\":1}}],[\"就算队列里面有任务\",{\"1\":{\"353\":1}}],[\"就算散列值分布再松散\",{\"1\":{\"167\":1}}],[\"就让休息的小姐姐赶紧回来上班\",{\"1\":{\"353\":1}}],[\"就停止自旋\",{\"1\":{\"337\":1}}],[\"就使用到了模板模式\",{\"1\":{\"785\":1}}],[\"就使用了自旋加锁的方式\",{\"1\":{\"327\":1}}],[\"就使用synchronized写入数据\",{\"1\":{\"181\":1}}],[\"就释放锁了\",{\"1\":{\"326\":1}}],[\"就诊完线程就自行离开\",{\"1\":{\"325\":1}}],[\"就诊室空闲的时候就从\",{\"1\":{\"325\":1}}],[\"就诊室繁忙时\",{\"1\":{\"325\":1}}],[\"就诊室\",{\"1\":{\"325\":2}}],[\"就诊结束后\",{\"1\":{\"325\":1}}],[\"就对应这里的\",{\"1\":{\"317\":1}}],[\"就判断下一个位置\",{\"1\":{\"313\":1}}],[\"就起不到多线程的效果\",{\"1\":{\"301\":1}}],[\"就类似于使用\",{\"1\":{\"291\":1}}],[\"就像一个人因为饥饿无法成长\",{\"1\":{\"649\":1}}],[\"就像一个民主社会\",{\"1\":{\"221\":1}}],[\"就像是拿\",{\"1\":{\"621\":1}}],[\"就像是一个人的名字\",{\"1\":{\"604\":1}}],[\"就像是一个水管\",{\"1\":{\"585\":1}}],[\"就像是默默无闻的工程师\",{\"1\":{\"448\":1}}],[\"就像探路一样\",{\"1\":{\"581\":1}}],[\"就像老师上课\",{\"1\":{\"581\":1}}],[\"就像为什么我们使用\",{\"1\":{\"289\":1}}],[\"就出了类型擦除这个策略\",{\"1\":{\"285\":1}}],[\"就不会访问存储\",{\"1\":{\"703\":1}}],[\"就不会出问题\",{\"1\":{\"381\":1}}],[\"就不知道下一步应该查哪个\",{\"1\":{\"509\":1}}],[\"就不用多说了\",{\"1\":{\"493\":1,\"522\":1}}],[\"就不得不每扫描一条记录回表查询一次\",{\"1\":{\"491\":1}}],[\"就不得先说分布式事务中的\",{\"1\":{\"202\":1}}],[\"就不能存储用户信息\",{\"1\":{\"460\":1}}],[\"就不再需要它了\",{\"1\":{\"435\":1}}],[\"就不再通知\",{\"1\":{\"207\":1}}],[\"就不需要多一次间接访问的开销\",{\"1\":{\"386\":1}}],[\"就不一致\",{\"1\":{\"282\":1}}],[\"就通过cas+自旋的方式初始化\",{\"1\":{\"181\":1}}],[\"就和hashmap基本上是一样的\",{\"1\":{\"180\":1}}],[\"就是以这种方式织入切面\",{\"1\":{\"804\":1}}],[\"就是把一些业务逻辑中的相同的代码抽取到一个独立的模块中\",{\"1\":{\"804\":1}}],[\"就是把我们原来的单级页表再次分页\",{\"1\":{\"654\":1}}],[\"就是自动档\",{\"1\":{\"791\":1}}],[\"就是手动档\",{\"1\":{\"791\":1}}],[\"就是由容器来负责控制对象的生命周期和对象间的关系\",{\"1\":{\"787\":1}}],[\"就是consumer\",{\"1\":{\"778\":1}}],[\"就是所谓的\",{\"1\":{\"757\":1}}],[\"就是下标\",{\"1\":{\"744\":1}}],[\"就是要传输的信息\",{\"1\":{\"744\":1}}],[\"就是提前把数据库里的数据刷到缓存里\",{\"1\":{\"711\":1}}],[\"就是访问频率比较的key\",{\"1\":{\"710\":1}}],[\"就是对应服务器的内存缓存\",{\"1\":{\"709\":1}}],[\"就是在第一次删除缓存之后\",{\"1\":{\"708\":1}}],[\"就是通过\",{\"1\":{\"812\":1}}],[\"就是通过调用静态工厂的方法来获取自己需要的对象\",{\"1\":{\"795\":1}}],[\"就是通过遍历fd\",{\"1\":{\"664\":1}}],[\"就是通过分别限制这两种类型的重排序\",{\"1\":{\"322\":1}}],[\"就是源文件的\",{\"1\":{\"660\":1}}],[\"就是一个典型的利用延时消息的例子\",{\"1\":{\"763\":1}}],[\"就是一个进程\",{\"1\":{\"664\":1}}],[\"就是一个线程一次请求其所需要的所有资源\",{\"1\":{\"648\":1}}],[\"就是一个人\",{\"1\":{\"257\":1}}],[\"就是拿出⼀块虚拟地址空间来\",{\"1\":{\"641\":1}}],[\"就是缓存在了内核里\",{\"1\":{\"641\":1}}],[\"就是基于\",{\"1\":{\"608\":1}}],[\"就是重传的时候\",{\"1\":{\"592\":1}}],[\"就是重复使用statement对象\",{\"1\":{\"451\":1}}],[\"就是超时时间的问题\",{\"1\":{\"592\":1}}],[\"就是数据完全发送完\",{\"1\":{\"591\":1}}],[\"就是数据应该分到哪一张表\",{\"1\":{\"531\":1}}],[\"就是快速重传\",{\"1\":{\"588\":1}}],[\"就是接收窗口\",{\"1\":{\"583\":1}}],[\"就是接受方每次收到数据包\",{\"1\":{\"583\":1}}],[\"就是三次挥手已经足够创建可靠的连接\",{\"1\":{\"569\":1}}],[\"就是⽹络世界⾥的公安局\",{\"1\":{\"564\":1}}],[\"就是有男朋友的长泽雅美\",{\"1\":{\"551\":1}}],[\"就是有人占着茅坑不拉屎\",{\"1\":{\"387\":1}}],[\"就是嫁人的新垣结衣\",{\"1\":{\"551\":1}}],[\"就是域名和\",{\"1\":{\"547\":1}}],[\"就是事务执行快照读时\",{\"1\":{\"523\":1}}],[\"就是事务之间是进水不犯河水的\",{\"1\":{\"518\":1}}],[\"就是比较靠前的选择了\",{\"1\":{\"476\":1}}],[\"就是普通的执行器\",{\"1\":{\"451\":1}}],[\"就是刀下留人\",{\"1\":{\"393\":1}}],[\"就是可能存在有些数据在硬盘中需要多来一个线程将数据读入内存\",{\"1\":{\"359\":1}}],[\"就是这个坑被人占了\",{\"1\":{\"313\":1}}],[\"就是告知程序任何对该变量的访问均需要从共享内存中获取\",{\"1\":{\"306\":1}}],[\"就是只包含一个抽象方法的声明\",{\"1\":{\"292\":1}}],[\"就是给编译器用的\",{\"1\":{\"287\":1}}],[\"就是注解在编译期的运行\",{\"1\":{\"287\":1}}],[\"就是起验证作用\",{\"1\":{\"282\":1}}],[\"就是传统的\",{\"1\":{\"280\":1}}],[\"就是判断下值是否在缓存范围之内\",{\"1\":{\"269\":1}}],[\"就是错误的了\",{\"1\":{\"266\":1}}],[\"就是\",{\"1\":{\"235\":1,\"280\":1,\"287\":1,\"401\":1,\"483\":1,\"493\":1,\"565\":1,\"591\":1,\"655\":1}}],[\"就是桶底出水的速度恒定\",{\"1\":{\"227\":1}}],[\"就是多次调用如一次\",{\"1\":{\"224\":1}}],[\"就是删除服务创建的节点\",{\"1\":{\"197\":1}}],[\"就是创建一张锁表\",{\"1\":{\"196\":1}}],[\"就是和hashmap一样\",{\"1\":{\"180\":1}}],[\"就是jdk1\",{\"1\":{\"174\":1}}],[\"就是⼀个标准的2的倍数减1了\",{\"1\":{\"169\":1}}],[\"就是初始化时\",{\"1\":{\"169\":1}}],[\"就是为了混合原始哈希码的高位和低位\",{\"1\":{\"167\":1}}],[\"就需要进行链路追踪\",{\"1\":{\"867\":1}}],[\"就需要减少用户态与内核态的上下文切换和内存拷贝的次数\",{\"1\":{\"662\":1}}],[\"就需要从主存里选择一个页面来置换\",{\"1\":{\"658\":1}}],[\"就需要通过系统调⽤\",{\"1\":{\"633\":1}}],[\"就需要把这些日志刷新到磁盘上\",{\"1\":{\"483\":1}}],[\"就需要把插入位置后的元素都向前或者向后移动\",{\"1\":{\"154\":1}}],[\"就需要老年代进行分配担保\",{\"1\":{\"400\":1}}],[\"就需要使用原子更新字段类\",{\"1\":{\"340\":1}}],[\"就需要使用这个原子更新引用类型提供的类\",{\"1\":{\"340\":1}}],[\"就需要扩容来存放更多的数据\",{\"1\":{\"174\":1}}],[\"就需要用之前需要对数组的长度取模运算\",{\"1\":{\"167\":1}}],[\"就会调用到\",{\"1\":{\"802\":1}}],[\"就会自动将其装配给\",{\"1\":{\"796\":2}}],[\"就会自动生成一个\",{\"1\":{\"477\":1}}],[\"就会等待写入完成\",{\"1\":{\"774\":1}}],[\"就会等待一段随机的时间后发起一次leader选举\",{\"1\":{\"222\":1}}],[\"就会发生\",{\"1\":{\"726\":1}}],[\"就会从缓存中获取\",{\"1\":{\"703\":1}}],[\"就会产生一个缺页中断\",{\"1\":{\"658\":1}}],[\"就会产生丢包问题\",{\"1\":{\"581\":1}}],[\"就会忽略此数据包\",{\"1\":{\"606\":1}}],[\"就会使用\",{\"1\":{\"598\":1}}],[\"就会使用拥塞发生算法\",{\"1\":{\"588\":1}}],[\"就会在定时器过期之前\",{\"1\":{\"592\":1}}],[\"就会快速地重传\",{\"1\":{\"588\":1}}],[\"就会增⼤\",{\"1\":{\"585\":1}}],[\"就会重传数据\",{\"1\":{\"585\":1}}],[\"就会重发\",{\"1\":{\"581\":1}}],[\"就会返回连接建立失败\",{\"1\":{\"570\":1}}],[\"就会返回执行计划的信息\",{\"1\":{\"493\":1}}],[\"就会有很多无效的连接端口白白地开着\",{\"1\":{\"569\":1}}],[\"就会生成一个随机的对称密钥\",{\"1\":{\"563\":1}}],[\"就会丢弃该连接\",{\"1\":{\"560\":1}}],[\"就会建立\",{\"1\":{\"555\":1}}],[\"就会将\",{\"1\":{\"513\":1}}],[\"就会将id=6的记录锁定\",{\"1\":{\"513\":1}}],[\"就会遍历整个表\",{\"1\":{\"477\":1}}],[\"就会进入\",{\"1\":{\"578\":1}}],[\"就会进入invoke方法\",{\"1\":{\"453\":1}}],[\"就会进行扩容\",{\"1\":{\"155\":1}}],[\"就会导致主键冲突\",{\"1\":{\"757\":1}}],[\"就会导致\",{\"1\":{\"727\":1}}],[\"就会导致服务端消耗更多的时间和空间去处理这些报文\",{\"1\":{\"572\":1}}],[\"就会导致一个\",{\"1\":{\"528\":1}}],[\"就会导致频繁\",{\"1\":{\"416\":1}}],[\"就会导致threadlocal不能被回收\",{\"1\":{\"311\":1}}],[\"就会把对象内什么偏移量上是什么类型的数据计算出来\",{\"1\":{\"402\":1}}],[\"就会触发超时重发\",{\"1\":{\"576\":1}}],[\"就会触发\",{\"1\":{\"398\":1}}],[\"就会触发扩容操作\",{\"1\":{\"173\":1}}],[\"就会触发扩容\",{\"1\":{\"173\":1}}],[\"就会清空本地内存变量\",{\"1\":{\"322\":1}}],[\"就会出现这种情况\",{\"1\":{\"311\":1}}],[\"就会处于就绪状态并让出\",{\"1\":{\"304\":1}}],[\"就会抛出异常\",{\"1\":{\"225\":1}}],[\"就会创建一个全局事务并返回一个唯一的\",{\"1\":{\"208\":1}}],[\"就会改变modcount的值\",{\"1\":{\"157\":1}}],[\"就会数组溢出\",{\"1\":{\"155\":1}}],[\"再重新处理该\",{\"1\":{\"778\":1}}],[\"再重新构造\",{\"1\":{\"573\":1}}],[\"再过滤掉not\",{\"1\":{\"776\":1}}],[\"再扩容消费者就没什么用\",{\"1\":{\"758\":1}}],[\"再给锁加上一个过期时间\",{\"1\":{\"727\":1}}],[\"再调用本类的方法\",{\"1\":{\"813\":1}}],[\"再调用普通的实例方法\",{\"1\":{\"795\":1}}],[\"再调用\",{\"1\":{\"727\":1}}],[\"再调用引擎接口写入这行新数据\",{\"1\":{\"481\":1}}],[\"再从内核态切换回用户态的过程\",{\"1\":{\"726\":1}}],[\"再所有命令的执行结果一次性返回给客户端\",{\"1\":{\"726\":1}}],[\"再利用\",{\"1\":{\"723\":1}}],[\"再删缓存的方式\",{\"1\":{\"707\":1}}],[\"再更数据库的缓存更新策略下发生的比较多\",{\"1\":{\"708\":1}}],[\"再更数据库\",{\"1\":{\"707\":1}}],[\"再返回给⽤户\",{\"1\":{\"702\":1}}],[\"再把对应的节点下线\",{\"1\":{\"699\":1}}],[\"再把旧表数据复制过去\",{\"1\":{\"537\":1}}],[\"再对其处理\",{\"1\":{\"664\":1}}],[\"再对步骤\",{\"1\":{\"417\":1}}],[\"再读入下一个进程的状态\",{\"1\":{\"636\":1}}],[\"再发送消费确认\",{\"1\":{\"756\":1}}],[\"再发送数据\",{\"1\":{\"584\":1}}],[\"再发一次\",{\"1\":{\"560\":1}}],[\"再决定按照多大的速度传送数据\",{\"1\":{\"581\":1}}],[\"再经过时间\",{\"1\":{\"576\":1}}],[\"再来回顾下四次挥手双方发\",{\"1\":{\"575\":1}}],[\"再来看一下key怎么赋值的\",{\"1\":{\"310\":1}}],[\"再见\",{\"1\":{\"574\":1}}],[\"再根据\",{\"1\":{\"566\":1}}],[\"再交给网络层\",{\"1\":{\"544\":1}}],[\"再做出相应的调整\",{\"1\":{\"538\":1}}],[\"再进行主从切换\",{\"1\":{\"537\":2}}],[\"再开启一个\",{\"1\":{\"527\":1}}],[\"再次删除缓存\",{\"1\":{\"708\":1}}],[\"再次向服务端确认\",{\"1\":{\"568\":1}}],[\"再次查询相同的范围\",{\"1\":{\"521\":1}}],[\"再次点击即可缩小\",{\"1\":{\"42\":1}}],[\"再由操作系统映射到到实际的物理内存\",{\"1\":{\"651\":1}}],[\"再由\",{\"1\":{\"510\":1}}],[\"再由协调者根据所有参与者的反馈情况决定各参与者是否要提交操作还是回滚操作\",{\"1\":{\"202\":1}}],[\"再去队列拉取消息\",{\"1\":{\"756\":1}}],[\"再去连接被驱动表\",{\"1\":{\"490\":1}}],[\"再去阅读\",{\"1\":{\"236\":1}}],[\"再mybatis配置文件里面配置插件\",{\"1\":{\"453\":1}}],[\"再以最常用的preparedstatementhandler看一下它的query方法\",{\"1\":{\"448\":1}}],[\"再拿这个handler去执行query\",{\"1\":{\"448\":1}}],[\"再说一下缺点\",{\"1\":{\"433\":1}}],[\"再将类转化为实例\",{\"1\":{\"428\":1}}],[\"再查对其的引用\",{\"1\":{\"418\":1}}],[\"再找到创建该对象的业务代码位置\",{\"1\":{\"415\":1}}],[\"再打印出对应线程的堆栈信息\",{\"1\":{\"414\":1}}],[\"再清理掉整个旧\",{\"1\":{\"404\":1}}],[\"再继续取\",{\"1\":{\"362\":1}}],[\"再放回池子\",{\"1\":{\"351\":1}}],[\"再申请资源序号大的\",{\"1\":{\"342\":1,\"648\":1}}],[\"再判断版本号就会发现此时的a已经被改过了\",{\"1\":{\"336\":1}}],[\"再+1\",{\"1\":{\"318\":1}}],[\"再着看rehash\",{\"1\":{\"314\":1}}],[\"再获取threadlocalmap\",{\"1\":{\"310\":1}}],[\"再比如\",{\"1\":{\"287\":1}}],[\"再输出\",{\"1\":{\"276\":1}}],[\"再反序列化成拷贝对象\",{\"1\":{\"260\":1}}],[\"再自增\",{\"1\":{\"245\":2}}],[\"再赋值到j\",{\"1\":{\"318\":1}}],[\"再赋值\",{\"1\":{\"245\":2}}],[\"再带着这个token去完成业务操作\",{\"1\":{\"225\":1}}],[\"再遍历链表定位到具体的元素上\",{\"1\":{\"180\":1}}],[\"再建一个数组\",{\"1\":{\"171\":1}}],[\"再哈希法\",{\"1\":{\"171\":1}}],[\"再通过反射机制\",{\"1\":{\"806\":1}}],[\"再通过主键值查出主键索引里面没有符合要求的数据\",{\"1\":{\"507\":1}}],[\"再通过一些工具比如\",{\"1\":{\"485\":1}}],[\"再通过\",{\"1\":{\"168\":1}}],[\"再插入\",{\"1\":{\"155\":1,\"175\":1}}],[\"存\",{\"1\":{\"743\":1,\"746\":1,\"769\":1}}],[\"存放查询的中间结果\",{\"1\":{\"476\":1}}],[\"存放在堆上\",{\"1\":{\"380\":1}}],[\"存在老版本redis无法兼容新版本rdb的问题\",{\"1\":{\"677\":1}}],[\"存在兼容问题\",{\"1\":{\"677\":1}}],[\"存在未确认报⽂时\",{\"1\":{\"584\":1}}],[\"存在安全上的风险\",{\"1\":{\"562\":1}}],[\"存在安全⻛险的问题\",{\"1\":{\"561\":1}}],[\"存在的一些问题\",{\"1\":{\"559\":1}}],[\"存在就使用\",{\"1\":{\"451\":1}}],[\"存在空间的浪费\",{\"1\":{\"395\":1}}],[\"存在于父类和子类\",{\"1\":{\"249\":1}}],[\"存在一定空间浪费\",{\"1\":{\"154\":1}}],[\"存储producer端写入的消息主体内容\",{\"1\":{\"771\":1}}],[\"存储阶段\",{\"1\":{\"753\":1,\"755\":1}}],[\"存储字典的元素\",{\"1\":{\"731\":1}}],[\"存储容量大大增加\",{\"1\":{\"691\":1}}],[\"存储型\",{\"1\":{\"615\":1}}],[\"存储大小不同\",{\"1\":{\"566\":1}}],[\"存储数据的时时候\",{\"1\":{\"705\":1}}],[\"存储数据类型不一样\",{\"1\":{\"566\":1}}],[\"存储数据多少\",{\"1\":{\"503\":1}}],[\"存储位置不一样\",{\"1\":{\"566\":1}}],[\"存储结构\",{\"1\":{\"477\":1}}],[\"存储限制\",{\"1\":{\"475\":1}}],[\"存储引擎使用\",{\"1\":{\"519\":1}}],[\"存储引擎来确保事务原子性的关键机制\",{\"1\":{\"519\":1}}],[\"存储引擎里\",{\"1\":{\"507\":1}}],[\"存储引擎检索数据\",{\"1\":{\"481\":1}}],[\"存储引擎的日志\",{\"1\":{\"480\":1}}],[\"存储引擎的事务日志\",{\"1\":{\"479\":1}}],[\"存储引擎特有的日志文件\",{\"1\":{\"479\":1}}],[\"存储引擎\",{\"0\":{\"474\":1},\"1\":{\"523\":1}}],[\"存储引擎负责\",{\"1\":{\"472\":1}}],[\"存储引擎层\",{\"1\":{\"472\":1}}],[\"存储过程\",{\"1\":{\"472\":1}}],[\"存储在服务端\",{\"1\":{\"566\":1}}],[\"存储在客户端\",{\"1\":{\"566\":1}}],[\"存储在\",{\"1\":{\"465\":1,\"731\":1}}],[\"存储时间与时区有关\",{\"1\":{\"463\":1}}],[\"存储时间与时区无关\",{\"1\":{\"463\":1}}],[\"存储空间\",{\"1\":{\"463\":1}}],[\"存储了商品信息\",{\"1\":{\"460\":1}}],[\"存储了对象实例\",{\"1\":{\"311\":1}}],[\"存储了对象的引用\",{\"1\":{\"311\":1}}],[\"存储\",{\"0\":{\"755\":1},\"1\":{\"446\":1}}],[\"存储entry类型的元素\",{\"1\":{\"312\":1}}],[\"存储消息的唯一id\",{\"1\":{\"225\":1}}],[\"存储的元素不无序\",{\"1\":{\"152\":1}}],[\"存储的元素有序\",{\"1\":{\"152\":1}}],[\"内嵌数据库\",{\"1\":{\"836\":2}}],[\"内嵌了如\",{\"1\":{\"819\":1}}],[\"内有效\",{\"1\":{\"797\":1}}],[\"内\",{\"1\":{\"784\":1}}],[\"内核会将其加⼊到这个就绪事件列表中\",{\"1\":{\"664\":1}}],[\"内核⾥维护了⼀个链表来记录就绪事件\",{\"1\":{\"664\":1}}],[\"内核对被监控的fd\",{\"1\":{\"664\":1}}],[\"内核对线程无感知\",{\"1\":{\"644\":1}}],[\"内核⾃动完成的\",{\"1\":{\"663\":1}}],[\"内核⾃动将数据从内核空间拷⻉到应⽤程序空间\",{\"1\":{\"663\":1}}],[\"内核将数据从内核空间拷⻉到应⽤程序空间\",{\"1\":{\"663\":1}}],[\"内核将数据拷⻉到应⽤程序缓冲区\",{\"1\":{\"663\":1}}],[\"内核版本\",{\"1\":{\"662\":1}}],[\"内核态切换\",{\"1\":{\"773\":1}}],[\"内核态的操作系统负责阻塞线程的切换\",{\"1\":{\"644\":1}}],[\"内核态线程实现\",{\"1\":{\"644\":1}}],[\"内核态拷贝\",{\"1\":{\"641\":1}}],[\"内核处理完后\",{\"1\":{\"633\":1}}],[\"内核程序执⾏在内核态\",{\"1\":{\"633\":1}}],[\"内核空间\",{\"1\":{\"632\":1}}],[\"内核具有很⾼的权限\",{\"1\":{\"632\":1}}],[\"内核是一个计算机程序\",{\"1\":{\"631\":1}}],[\"内容体系全面\",{\"0\":{\"620\":1}}],[\"内容不正确\",{\"1\":{\"613\":1}}],[\"内容\",{\"1\":{\"564\":1}}],[\"内容与\",{\"1\":{\"265\":1}}],[\"内进行\",{\"1\":{\"481\":1}}],[\"内连接\",{\"1\":{\"458\":1,\"459\":1}}],[\"内部维护着一个个\",{\"1\":{\"749\":1}}],[\"内部实现也差不多类似\",{\"1\":{\"731\":1}}],[\"内部会遍历驱动表\",{\"1\":{\"490\":1}}],[\"内部正在跑的任务和队列里等待的任务\",{\"1\":{\"358\":1}}],[\"内部同时还启动了很多守护线程\",{\"1\":{\"305\":1}}],[\"内部是通过红黑树来实现\",{\"1\":{\"184\":1}}],[\"内部除了继承\",{\"1\":{\"183\":1}}],[\"内部节点是有序的吗\",{\"0\":{\"182\":1}}],[\"内部定义了一个对象锁\",{\"1\":{\"178\":1}}],[\"内存映射文件\",{\"1\":{\"774\":1}}],[\"内存映像\",{\"1\":{\"410\":1}}],[\"内存中\",{\"1\":{\"755\":1}}],[\"内存中的数据不会\",{\"1\":{\"668\":1}}],[\"内存的子进程\",{\"1\":{\"718\":1}}],[\"内存的分配和管理\",{\"1\":{\"629\":1}}],[\"内存淘汰策略\",{\"0\":{\"717\":1}}],[\"内存不足有这么几种处理方式\",{\"1\":{\"715\":1}}],[\"内存不够了\",{\"1\":{\"387\":1}}],[\"内存\",{\"1\":{\"632\":1}}],[\"内存大小\",{\"1\":{\"418\":1}}],[\"内存飚高如果是发生在\",{\"1\":{\"415\":1}}],[\"内存飙高问题怎么排查\",{\"0\":{\"415\":1}}],[\"内存碎片问题\",{\"1\":{\"406\":1}}],[\"内存空间的碎片化问题\",{\"1\":{\"395\":1}}],[\"内存空间不连续\",{\"1\":{\"154\":1}}],[\"内存泄漏最可能的罪魁祸首之一\",{\"1\":{\"419\":1}}],[\"内存泄漏和内存溢出二者关系非常密切\",{\"1\":{\"419\":1}}],[\"内存泄漏是内在病源\",{\"1\":{\"418\":1}}],[\"内存泄漏可能的原因有很多种\",{\"1\":{\"389\":1}}],[\"内存泄漏可能由哪些原因导致呢\",{\"0\":{\"389\":1}}],[\"内存泄漏\",{\"1\":{\"387\":1,\"417\":2,\"730\":1}}],[\"内存泄露可能会导致内存溢出\",{\"1\":{\"387\":1}}],[\"内存泄露就是申请的内存空间没有被正确释放\",{\"1\":{\"387\":1}}],[\"内存泄露是怎么回事\",{\"0\":{\"311\":1}}],[\"内存溢出可能会有很多原因导致\",{\"1\":{\"419\":1}}],[\"内存溢出就是排队去蹲坑\",{\"1\":{\"387\":1}}],[\"内存溢出就是申请的内存超过了可用内存\",{\"1\":{\"387\":1}}],[\"内存溢出和内存泄漏是什么意思\",{\"0\":{\"387\":1}}],[\"内存分配有两种方式\",{\"1\":{\"383\":1}}],[\"内存分配完成之后\",{\"1\":{\"382\":1}}],[\"内存分为线程私有区和线程共享区\",{\"1\":{\"379\":1}}],[\"内存区域发生了变化\",{\"1\":{\"380\":1}}],[\"内存区域的变化\",{\"0\":{\"380\":1}}],[\"内存区域最粗略的划分可以分为堆和栈\",{\"1\":{\"379\":1}}],[\"内存管理\",{\"0\":{\"378\":1,\"650\":1},\"1\":{\"629\":1}}],[\"内存系统的重排序\",{\"1\":{\"319\":1}}],[\"内存模型里面的工作内存\",{\"1\":{\"317\":1}}],[\"内存如下\",{\"1\":{\"266\":1}}],[\"内存是放不下的\",{\"1\":{\"167\":1}}],[\"内存占用\",{\"1\":{\"154\":1}}],[\"内涵ai对话\",{\"1\":{\"59\":1}}],[\"它向seata的事务协调器发送全局事务的开始请求\",{\"1\":{\"872\":1}}],[\"它与事务管理器进行通信\",{\"1\":{\"871\":1}}],[\"它与全自动的区别在哪里\",{\"1\":{\"433\":1}}],[\"它协调各个分支事务的提交或回滚\",{\"1\":{\"871\":1}}],[\"它接收事务的开始和结束请求\",{\"1\":{\"871\":1}}],[\"它定义了请求的匹配规则和转发目标\",{\"1\":{\"865\":1}}],[\"它具有强大的路由\",{\"1\":{\"864\":1}}],[\"它具有高可用性\",{\"1\":{\"841\":1}}],[\"它具有高可用\",{\"1\":{\"835\":2}}],[\"它基于非阻塞的webflux框架\",{\"1\":{\"864\":1}}],[\"它基于servlet技术栈\",{\"1\":{\"864\":1}}],[\"它充当了客户端与后端服务之间的入口点\",{\"1\":{\"863\":1}}],[\"它按照顺序将请求依次分配给每个后端服务器\",{\"1\":{\"851\":1}}],[\"它简化了使用基于http的远程服务的开发\",{\"1\":{\"847\":1}}],[\"它使用基于raft算法的一致性机制\",{\"1\":{\"841\":1}}],[\"它使用transient修饰存储元素的elementdata的数组\",{\"1\":{\"156\":1}}],[\"它为构建基于\",{\"1\":{\"831\":1}}],[\"它支持多种插件和扩展\",{\"1\":{\"864\":1}}],[\"它支持多种传输协议\",{\"1\":{\"830\":1}}],[\"它支持用于流行的\",{\"1\":{\"783\":1}}],[\"它并不是用来替代\",{\"1\":{\"819\":1}}],[\"它适合绝大多数情况\",{\"1\":{\"811\":1}}],[\"它针对\",{\"1\":{\"783\":1}}],[\"它要有服务端\",{\"1\":{\"769\":1}}],[\"它要做的事情是\",{\"1\":{\"346\":1}}],[\"它通过监控服务的调用情况\",{\"1\":{\"855\":1}}],[\"它通过在每个节点中维持多个指向其它节点的指针\",{\"1\":{\"732\":1}}],[\"它通过协调各个线程\",{\"1\":{\"348\":1}}],[\"它在判断元素是否在集合中时是有一定错误几率\",{\"1\":{\"705\":1}}],[\"它在短时间内\",{\"1\":{\"573\":1}}],[\"它由两部分组成\",{\"1\":{\"687\":1}}],[\"它给每个元素设置一个权重\",{\"1\":{\"670\":1}}],[\"它常作为一种锁机制\",{\"1\":{\"641\":1}}],[\"它本质上是一个整数计数器\",{\"1\":{\"641\":1}}],[\"它往往与其他通信机制\",{\"1\":{\"641\":1}}],[\"它还有1\",{\"1\":{\"622\":1}}],[\"它还是会响应\",{\"1\":{\"565\":1}}],[\"它指的是恶意攻击者往\",{\"1\":{\"615\":1}}],[\"它指向一个字符串对象\",{\"1\":{\"732\":1}}],[\"它指向未收到但可以接收的第一个字节的序列号\",{\"1\":{\"583\":1}}],[\"它指向未发送但可以发送的第一个字节的序列号\",{\"1\":{\"583\":1}}],[\"它指向的是已发送但未确认的第一个字节的序列号\",{\"1\":{\"583\":1}}],[\"它属于网络层协议\",{\"1\":{\"608\":1}}],[\"它属于类\",{\"1\":{\"254\":1}}],[\"它对于网络安全具有极其重要的意义\",{\"1\":{\"608\":1}}],[\"它对自增运算的处理\",{\"1\":{\"245\":1}}],[\"它标志主机地址表示其属于该网络中的哪一台主机\",{\"1\":{\"603\":1}}],[\"它标志主机所连接的网络地址表示属于互联网的哪一个网络\",{\"1\":{\"603\":1}}],[\"它有这些缺点\",{\"1\":{\"591\":1}}],[\"它表示\",{\"1\":{\"586\":1}}],[\"它被设计成⼀个⽆私的协议\",{\"1\":{\"585\":1}}],[\"它被推入\",{\"1\":{\"573\":1}}],[\"它和\",{\"1\":{\"743\":1}}],[\"它和序号字段的值相加表示最后一个紧急数据的下一字节的序号\",{\"1\":{\"580\":1}}],[\"它和countdownlatch类似\",{\"1\":{\"346\":1}}],[\"它告诉对方本端的\",{\"1\":{\"580\":1,\"583\":1}}],[\"它已经建立连接成功\",{\"1\":{\"572\":1}}],[\"它包含了所请求的对象\",{\"1\":{\"556\":1}}],[\"它不保证订阅者一定能收到消息\",{\"1\":{\"722\":1}}],[\"它不能跨越文件系统\",{\"1\":{\"660\":1}}],[\"它不能⽤于创建新程序\",{\"1\":{\"233\":1}}],[\"它不以时间驱动\",{\"1\":{\"592\":1}}],[\"它不以时间为驱动\",{\"1\":{\"592\":1}}],[\"它不断监听\",{\"1\":{\"555\":1}}],[\"它完成了对\",{\"1\":{\"548\":1}}],[\"它解决的是表锁和行锁共存的问题\",{\"1\":{\"514\":1}}],[\"它比基于主键索引的查询多扫描了一棵索引树\",{\"1\":{\"507\":1}}],[\"它都能解决\",{\"1\":{\"504\":1}}],[\"它采用的是\",{\"1\":{\"501\":1}}],[\"它记录了数据库所有执行的\",{\"1\":{\"479\":1}}],[\"它最主要的方法就是\",{\"1\":{\"790\":1}}],[\"它最多只用\",{\"1\":{\"466\":1}}],[\"它最终会收缩到\",{\"1\":{\"353\":1}}],[\"它存在的意义主要是两个\",{\"1\":{\"578\":1}}],[\"它存取慢\",{\"1\":{\"461\":1}}],[\"它存放在\",{\"1\":{\"425\":1}}],[\"它缓存了多个statement对象\",{\"1\":{\"451\":1}}],[\"它将一段时间划分为多个时间窗口\",{\"1\":{\"860\":1}}],[\"它将根据\",{\"1\":{\"448\":1}}],[\"它将会从父线程中继承一个\",{\"1\":{\"427\":1}}],[\"它将会进入等待\",{\"1\":{\"346\":1}}],[\"它提供\",{\"1\":{\"783\":1}}],[\"它提供了丰富的图表\",{\"1\":{\"877\":1}}],[\"它提供了快速的搜索和聚合功能\",{\"1\":{\"877\":1}}],[\"它提供了多种机制来保护系统\",{\"1\":{\"858\":1}}],[\"它提供了服务注册和发现\",{\"1\":{\"835\":1}}],[\"它提供了服务注册\",{\"1\":{\"835\":1}}],[\"它提供了服务注册与发现\",{\"1\":{\"830\":1}}],[\"它提供了一整套与\",{\"1\":{\"831\":1}}],[\"它提供了一个工具类plugin\",{\"1\":{\"453\":1}}],[\"它提供了与\",{\"1\":{\"783\":1,\"868\":1}}],[\"它提供了相应的查询和更新方法\",{\"1\":{\"448\":1}}],[\"它提供一个同步点\",{\"1\":{\"349\":1}}],[\"它内部封装了\",{\"1\":{\"433\":1}}],[\"它首先不会自己去尝试加载这个类\",{\"1\":{\"424\":1}}],[\"它首先给自己投票并且给集群中的其他服务器发送\",{\"1\":{\"222\":1}}],[\"它根据路由配置和断言条件进行路由匹配\",{\"1\":{\"865\":1}}],[\"它根据\",{\"1\":{\"423\":1}}],[\"它用来划分首部与实体\",{\"1\":{\"556\":1}}],[\"它用来加载\",{\"1\":{\"423\":1}}],[\"它用的是另外一种方式\",{\"1\":{\"313\":1}}],[\"它可用于不同机器间的进程通信\",{\"1\":{\"641\":1}}],[\"它可能会经历下面这几种状态\",{\"1\":{\"637\":1}}],[\"它可能被外部所调用\",{\"1\":{\"408\":1}}],[\"它可以从各种来源\",{\"1\":{\"877\":1}}],[\"它可以通过http协议定期拉取微服务的指标数据\",{\"1\":{\"876\":1}}],[\"它可以与\",{\"1\":{\"868\":1}}],[\"它可以与身份提供者\",{\"1\":{\"863\":1}}],[\"它可以根据业务需求和系统状况来制定策略\",{\"1\":{\"856\":1}}],[\"它可以根据服务名和可用实例进行动态路由\",{\"1\":{\"847\":1}}],[\"它可以⽣成代理对象\",{\"1\":{\"801\":1}}],[\"它可以包含任意多个节点\",{\"1\":{\"729\":1}}],[\"它可以把rdb快照文件生成json文件或者生成报表用来分析redis的使用详情\",{\"1\":{\"719\":1}}],[\"它可以充当栈和队列的角色\",{\"1\":{\"670\":1}}],[\"它可以替代前⾯的\",{\"1\":{\"662\":1}}],[\"它可以设置connection\",{\"1\":{\"558\":1}}],[\"它可以在目标类被引入应用之前增强该目标类的字节码\",{\"1\":{\"804\":1}}],[\"它可以在线修改表结构\",{\"1\":{\"537\":1}}],[\"它可以在sql语句中进行迭代一个集合\",{\"1\":{\"445\":1}}],[\"它可以看作是当前线程所执行的字节码的行号指示器\",{\"1\":{\"379\":1}}],[\"它可以用于做流量控制\",{\"1\":{\"348\":1}}],[\"它可以指定你希望对集合进行的操作\",{\"1\":{\"291\":1}}],[\"它同编译器优化原理的指针分析和外形分析相关联\",{\"1\":{\"408\":1}}],[\"它同样是一个单线程收集器\",{\"1\":{\"401\":1}}],[\"它开创了局部收集的设计思路和基于\",{\"1\":{\"401\":1,\"404\":1}}],[\"它节省了一次指针定位的时间开销\",{\"1\":{\"386\":1}}],[\"它特别在\",{\"1\":{\"379\":1}}],[\"它也不会永远不一致下去\",{\"1\":{\"708\":1}}],[\"它也有后台线程在处理一些较为缓慢的操作\",{\"1\":{\"673\":1}}],[\"它也⽆法运⾏\",{\"1\":{\"637\":1}}],[\"它也会获取一个\",{\"1\":{\"513\":1}}],[\"它也是各个线程共享的内存区域\",{\"1\":{\"379\":1}}],[\"它也实现了randmoaccess\",{\"1\":{\"154\":1}}],[\"它去其它线程的队列里窃取一个任务来执行\",{\"1\":{\"373\":1}}],[\"它帮我们管理线程\",{\"1\":{\"351\":1}}],[\"它没有上下文切换的额外开销成本\",{\"1\":{\"322\":1}}],[\"它没有实现randmoaccess\",{\"1\":{\"154\":1}}],[\"它确保在不同的编译器和不同的处理器平台之上\",{\"1\":{\"319\":1}}],[\"它其实涵盖了缓存\",{\"1\":{\"317\":1}}],[\"它就会从缓存里找\",{\"1\":{\"800\":1}}],[\"它就会通过定时任务不断地向rocketmq集群中的所有broker实例发送心跳包\",{\"1\":{\"777\":1}}],[\"它就会新增0x61c88647\",{\"1\":{\"312\":1}}],[\"它就是我们\",{\"1\":{\"788\":1}}],[\"它就是redis\",{\"1\":{\"687\":1}}],[\"它就是一个管理线程的池子\",{\"1\":{\"351\":1}}],[\"它就能满足千万级的数据存储\",{\"1\":{\"502\":1}}],[\"它就被称之为标量\",{\"1\":{\"408\":1}}],[\"它就可以通过这个提案\",{\"1\":{\"216\":1}}],[\"它这时候如果不被回收\",{\"1\":{\"311\":1}}],[\"它只能为接口创建代理实例\",{\"1\":{\"806\":1}}],[\"它只能在\",{\"1\":{\"256\":1}}],[\"它只是作为一个key来让线程往threadlocalmap里存取值\",{\"1\":{\"310\":1}}],[\"它保证了线程对变量访问的可见性和排他性\",{\"1\":{\"306\":1}}],[\"它能保证所有线程对变量访问的可见性\",{\"1\":{\"306\":1}}],[\"它能够统计\",{\"1\":{\"294\":1}}],[\"它能够创建和编译程序\",{\"1\":{\"233\":1}}],[\"它真正的功能实现就是利用反射\",{\"1\":{\"289\":1}}],[\"它主要用于实现服务发现和服务注册功能\",{\"1\":{\"834\":1}}],[\"它主要用于线程之间的数据传输\",{\"1\":{\"306\":1}}],[\"它主要有两种解决办法\",{\"1\":{\"703\":1}}],[\"它主要有两个子接口\",{\"1\":{\"152\":1}}],[\"它主要的目的是根据调用的请求完成一次数据库操作\",{\"1\":{\"449\":1}}],[\"它主要确保多个线程在同一个时刻\",{\"1\":{\"306\":1}}],[\"它主要提供了以下\",{\"1\":{\"272\":1}}],[\"它们都是高度可扩展的\",{\"1\":{\"830\":1}}],[\"它们对应了\",{\"1\":{\"746\":1}}],[\"它们可以用于设置一个业务\",{\"1\":{\"744\":1}}],[\"它们之间的命令是原子顺序执行的\",{\"1\":{\"724\":1}}],[\"它们是大量实践\",{\"1\":{\"591\":1}}],[\"它们的主要区别在于\",{\"1\":{\"557\":1}}],[\"它们的原理是使用ognl从sql参数对象中计算表达式的值\",{\"1\":{\"444\":1}}],[\"它们的原理是遍历线程池中的工作线程\",{\"1\":{\"358\":1}}],[\"它们会访问同一个队列\",{\"1\":{\"373\":1}}],[\"它们区别用一个表格整理\",{\"1\":{\"347\":1}}],[\"它们不会往下执行\",{\"1\":{\"345\":1}}],[\"它们也不⼀定是相等的\",{\"1\":{\"258\":2}}],[\"它们在空间占用上都有一些额外的消耗\",{\"1\":{\"154\":1}}],[\"它实际调用的是getautoconfigurationentry\",{\"1\":{\"820\":1}}],[\"它实际上是返回⼀个\",{\"1\":{\"258\":1}}],[\"它实现线程安全的关键点在于put流程\",{\"1\":{\"181\":1}}],[\"它随着对象的创建⽽存在\",{\"1\":{\"253\":1}}],[\"它拥有\",{\"1\":{\"233\":1}}],[\"它是构建微服务架构和实现api管理的重要组件之一\",{\"1\":{\"863\":1}}],[\"它是预加载\",{\"1\":{\"791\":1}}],[\"它是框架最基础的部分\",{\"1\":{\"783\":1}}],[\"它是发\",{\"1\":{\"769\":1}}],[\"它是producer发送消息后等数据持久化到磁盘之后再返回响应给producer\",{\"1\":{\"755\":1}}],[\"它是消息的第二级类型\",{\"1\":{\"744\":1}}],[\"它是消息的第一级类型\",{\"1\":{\"744\":1}}],[\"它是非中心化的\",{\"1\":{\"709\":1}}],[\"它是一种中心化的缓存\",{\"1\":{\"709\":1}}],[\"它是一个由ziplist充当节点的双向链表\",{\"1\":{\"734\":1}}],[\"它是一个连续的数据结构\",{\"1\":{\"705\":1}}],[\"它是一个非常重要的协议\",{\"1\":{\"608\":1}}],[\"它是一个单线程工作的收集器\",{\"1\":{\"401\":1}}],[\"它是根据用户的需要划分的\",{\"1\":{\"656\":1}}],[\"它是进程间通信的唯一异步机制\",{\"1\":{\"641\":1}}],[\"它是针对其他进程间通信方式运行效率低而专门设计的\",{\"1\":{\"641\":1}}],[\"它是针对resultset结果集执行的内存分页\",{\"1\":{\"454\":1}}],[\"它是操作系统的核心\",{\"1\":{\"631\":1}}],[\"它是操作系统开辟的一个缓存空间\",{\"1\":{\"583\":1}}],[\"它是应用程序和硬件之间的媒介\",{\"1\":{\"628\":1}}],[\"它是基于icmp协议工作的\",{\"1\":{\"609\":1}}],[\"它是基于接收端的反馈信息来引发重传的\",{\"1\":{\"592\":1}}],[\"它是用于实现\",{\"1\":{\"606\":1}}],[\"它是任何报⽂在⽹络上存在的最⻓时间\",{\"1\":{\"576\":1}}],[\"它是另一种记录客户状态的机制\",{\"1\":{\"566\":1}}],[\"它是可以保持一段时间不关闭的\",{\"1\":{\"560\":1}}],[\"它是可以在指定的时间自行返回的\",{\"1\":{\"303\":1}}],[\"它是伴随\",{\"1\":{\"548\":1}}],[\"它是按照从左到右的顺序来建立搜索树的\",{\"1\":{\"509\":1}}],[\"它是固定大小的\",{\"1\":{\"483\":1}}],[\"它是笛卡尔积在\",{\"1\":{\"458\":1}}],[\"它是通过cachedmappermethod方法对其进行初始化的\",{\"1\":{\"450\":1}}],[\"它是最弱的一种引用关系\",{\"1\":{\"392\":1}}],[\"它是个动态的结构\",{\"1\":{\"385\":1}}],[\"它是\",{\"1\":{\"377\":1,\"504\":1,\"557\":1,\"783\":1}}],[\"它是java并发包的根基\",{\"1\":{\"331\":1}}],[\"它是斐波那契数\",{\"1\":{\"312\":1}}],[\"它是被分配到线程的\",{\"1\":{\"299\":1}}],[\"它是功能⻬全的\",{\"1\":{\"233\":1}}],[\"它是运⾏已编译\",{\"1\":{\"233\":1}}],[\"它会进入自我保护模式\",{\"1\":{\"838\":1}}],[\"它会向eureka\",{\"1\":{\"837\":1}}],[\"它会将失效主节点的其中一个\",{\"1\":{\"687\":1}}],[\"它会立刻做bgrewriteaof操作\",{\"1\":{\"685\":1}}],[\"它会把主节点全部数据一次性发送给从节点\",{\"1\":{\"685\":1}}],[\"它会一直阻塞\",{\"1\":{\"722\":1}}],[\"它会一直占用cpu\",{\"1\":{\"645\":1}}],[\"它会一直等待第二个线程也执行exchange方法\",{\"1\":{\"349\":1}}],[\"它会根据\",{\"1\":{\"595\":1}}],[\"它会根据⽹络的拥塞程度动态变化的\",{\"1\":{\"585\":1}}],[\"它会根据返回值是否为空来判断是否插入元素成功\",{\"1\":{\"186\":1}}],[\"它会看到该事务开始时有效的那个版本\",{\"1\":{\"519\":1}}],[\"它会获取一个\",{\"1\":{\"513\":1}}],[\"它会使用typehandle处理类型\",{\"1\":{\"448\":1}}],[\"它会从队列中取下一个任务来执行\",{\"1\":{\"353\":1}}],[\"它会怎么处理\",{\"0\":{\"169\":1}}],[\"它的一个方法\",{\"1\":{\"813\":1}}],[\"它的不同实现类\",{\"1\":{\"785\":1}}],[\"它的不同之处在于\",{\"1\":{\"302\":1}}],[\"它的实现⽅式是\",{\"1\":{\"658\":1}}],[\"它的效率高\",{\"1\":{\"598\":1}}],[\"它的⽹络效率也是很低的\",{\"1\":{\"584\":1}}],[\"它的原理也是通过中间表\",{\"1\":{\"537\":1}}],[\"它的原理是\",{\"1\":{\"442\":1}}],[\"它的写入方式是从头到尾开始写\",{\"1\":{\"483\":1}}],[\"它的作用也很明确\",{\"1\":{\"547\":1}}],[\"它的作用就是生成动态代理对象\",{\"1\":{\"450\":1}}],[\"它的作⽤也是判断两个对象是否相等\",{\"1\":{\"257\":1}}],[\"它的作⽤是判断两个对象的地址是不是相等\",{\"1\":{\"257\":1}}],[\"它的运行离不开四大组件的配合\",{\"1\":{\"448\":1}}],[\"它的构建过程也会初始化一些环境变量\",{\"1\":{\"448\":1}}],[\"它的生命周期在sqlsession事务方法之内\",{\"1\":{\"435\":1}}],[\"它的生命周期与线程相同\",{\"1\":{\"379\":1}}],[\"它的compareandset方法首先检查当前的对象引用值是否等于预期引用\",{\"1\":{\"336\":1}}],[\"它的返回类型是\",{\"1\":{\"294\":1}}],[\"它的浅拷贝和深拷贝的示意图\",{\"1\":{\"260\":1}}],[\"它的特点是\",{\"1\":{\"258\":1}}],[\"它的数据结构和hashmap是一样的\",{\"1\":{\"181\":1}}],[\"它的名字叫copyonwrite\",{\"1\":{\"159\":1}}],[\"它又在二叉查找树的基础上增加了一些规则\",{\"1\":{\"162\":1}}],[\"二阶段\",{\"1\":{\"871\":1}}],[\"二级就不行了\",{\"1\":{\"801\":1}}],[\"二级缓存与一级缓存其机制相同\",{\"1\":{\"446\":1}}],[\"二级缓存\",{\"0\":{\"446\":1},\"1\":{\"800\":1}}],[\"二来内存紧张的时候还可以被置换到磁盘中\",{\"1\":{\"654\":1}}],[\"二哥非常好的一位朋友\",{\"1\":{\"619\":1}}],[\"二哥的\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"二次读取和业务无绑定\",{\"1\":{\"528\":1}}],[\"二次读取\",{\"1\":{\"528\":1}}],[\"二进制安全\",{\"1\":{\"730\":1}}],[\"二进制协议\",{\"1\":{\"558\":1}}],[\"二进制日志\",{\"1\":{\"479\":1}}],[\"二进制操作\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"二是\",{\"1\":{\"481\":1}}],[\"二是完成jdbctype至javatype的转换\",{\"1\":{\"438\":1}}],[\"二是注解本身有一些信息\",{\"1\":{\"289\":1}}],[\"二\",{\"0\":{\"378\":1},\"1\":{\"747\":1}}],[\"二者的顺序不能交换\",{\"1\":{\"241\":1}}],[\"二者增删的时间复杂度都是o\",{\"1\":{\"154\":1}}],[\"双方约定一个最大的长度\",{\"1\":{\"581\":1}}],[\"双亲委派模型的第三次\",{\"1\":{\"427\":1}}],[\"双亲委派模型的第二次\",{\"1\":{\"427\":1}}],[\"双亲委派模型的第一次\",{\"1\":{\"427\":1}}],[\"双亲委派模型的工作过程\",{\"1\":{\"424\":1}}],[\"双亲委派机制在历史上主要有三次破坏\",{\"1\":{\"427\":1}}],[\"双向链表的插入和删除只需要改变前驱节点\",{\"1\":{\"154\":1}}],[\"双子座\",{\"1\":{\"0\":1}}],[\"但迅速发展\",{\"1\":{\"831\":1}}],[\"但方法\",{\"1\":{\"813\":1}}],[\"但有可能造成消息重复\",{\"1\":{\"757\":1}}],[\"但比\",{\"1\":{\"748\":1}}],[\"但比这两种算法更加完善\",{\"1\":{\"210\":1}}],[\"但考虑到链表的附加空间相对较高\",{\"1\":{\"734\":1}}],[\"但如果我们使用\",{\"1\":{\"726\":1}}],[\"但如果此时锁刚好可用\",{\"1\":{\"332\":1}}],[\"但它对事务acid的支持并不完备\",{\"1\":{\"724\":1}}],[\"但它还是存在问题\",{\"1\":{\"694\":1}}],[\"但它还有另一个名字\",{\"1\":{\"219\":1}}],[\"但事实并非如此\",{\"1\":{\"713\":1}}],[\"但开发和运维人员发现了一个问题\",{\"1\":{\"713\":1}}],[\"但也存在一些问题\",{\"1\":{\"686\":1}}],[\"但因复制连接中断命令无法发送给从节点\",{\"1\":{\"685\":1}}],[\"但因为两者对方法区实现的差异而面临诸多困难\",{\"1\":{\"381\":1}}],[\"但并不等同于soa\",{\"1\":{\"828\":1}}],[\"但并不推荐这种方式\",{\"1\":{\"678\":1}}],[\"但并没有具体规定服务的大小\",{\"1\":{\"828\":1}}],[\"但并发并不是非常高\",{\"1\":{\"406\":1}}],[\"但和列表类型不一\",{\"1\":{\"670\":1}}],[\"但代价很⾼\",{\"1\":{\"658\":1}}],[\"但代码可读性强\",{\"1\":{\"436\":1}}],[\"但两个人总是让到同一边\",{\"1\":{\"649\":1}}],[\"但每个线程各⾃都有⼀套独⽴的寄存器和栈\",{\"1\":{\"642\":1}}],[\"但需要注意不同进程的同步问题\",{\"1\":{\"641\":1}}],[\"但在\",{\"1\":{\"790\":1}}],[\"但在进程表中却仍然存在的进程\",{\"1\":{\"638\":1}}],[\"但在某一时刻\",{\"1\":{\"635\":1}}],[\"但在更高的隔离级别\",{\"1\":{\"519\":1}}],[\"但无法从根本上解决地址耗尽的问题\",{\"1\":{\"605\":1}}],[\"但同时你的绰号也可能和别人重复\",{\"1\":{\"604\":1}}],[\"但同样地\",{\"1\":{\"157\":1}}],[\"但你的身份证号码却是惟一的\",{\"1\":{\"604\":1}}],[\"但这个算法是无法实现的\",{\"1\":{\"658\":1}}],[\"但这种情况\",{\"1\":{\"604\":1}}],[\"但这要求域名解析服务器和域名服务器都必须自己处理超时和重传从而保证可靠性\",{\"1\":{\"600\":1}}],[\"但这也与数据值域分布的特性有关\",{\"1\":{\"258\":1}}],[\"但对准确性要求相对高的场景\",{\"1\":{\"597\":1}}],[\"但对对象引用的改变是不会影响到调用者的\",{\"1\":{\"259\":1}}],[\"但⽹络中出现了拥塞\",{\"1\":{\"585\":1}}],[\"但却都无法往前推进\",{\"1\":{\"649\":1}}],[\"但却没有携带数据报⽂\",{\"1\":{\"584\":1}}],[\"但却是被炸了千百遍的面试老油条\",{\"1\":{\"307\":1}}],[\"但后来客户端的主机突然发生故障\",{\"1\":{\"577\":1}}],[\"但后续步骤不是直接对可回收对象进行清理\",{\"1\":{\"395\":1}}],[\"但已经在\",{\"1\":{\"519\":1}}],[\"但正因如此\",{\"1\":{\"461\":1}}],[\"但正因为其长度固定\",{\"1\":{\"461\":1}}],[\"但batch模式也有自己的问题\",{\"1\":{\"445\":1}}],[\"但sql语句优化容易\",{\"1\":{\"434\":1}}],[\"但sql语句优化困难\",{\"1\":{\"434\":1}}],[\"但会多消耗性能\",{\"1\":{\"434\":1}}],[\"但会处理阻塞队列中的任务\",{\"1\":{\"367\":1}}],[\"但其堆内存的布局与其他收集器有非常明显的差异\",{\"1\":{\"404\":1}}],[\"但其实其它的方式最终都要通过直接编码来实现\",{\"1\":{\"794\":1}}],[\"但其实从实现上看还是从消息服务器中拉取消息\",{\"1\":{\"751\":1}}],[\"但其实整个系统的复杂度是提升的\",{\"1\":{\"708\":1}}],[\"但其实\",{\"1\":{\"276\":1}}],[\"但\",{\"1\":{\"401\":1,\"413\":1}}],[\"但非必须的对象\",{\"1\":{\"392\":1}}],[\"但不是真正意义上的销毁\",{\"1\":{\"793\":1}}],[\"但不利于短作业\",{\"1\":{\"640\":1}}],[\"但不阻塞其他事务读\",{\"1\":{\"522\":1}}],[\"但不够灵活\",{\"1\":{\"434\":1}}],[\"但不太讨喜\",{\"1\":{\"406\":1}}],[\"但不包括对象头\",{\"1\":{\"382\":1}}],[\"但不排除面试官剑走偏锋\",{\"1\":{\"153\":1}}],[\"但线程池中总线程数\",{\"1\":{\"354\":1}}],[\"但阻塞\",{\"1\":{\"342\":1,\"647\":1}}],[\"但又提出了新的资源请求\",{\"1\":{\"342\":1,\"647\":1}}],[\"但a和b之间没有数据依赖关系\",{\"1\":{\"321\":1}}],[\"但还是\",{\"1\":{\"592\":1}}],[\"但还是经常会出的情况\",{\"1\":{\"487\":1}}],[\"但还是能用\",{\"1\":{\"193\":1}}],[\"但还没有调用start\",{\"1\":{\"303\":1}}],[\"但只能继承⼀个抽象类\",{\"1\":{\"252\":1}}],[\"但大杯的水倒进小杯就不行了\",{\"1\":{\"239\":1}}],[\"但实际工作中很常见\",{\"1\":{\"709\":1}}],[\"但实际上两种方案的实现是不一样的\",{\"1\":{\"206\":1}}],[\"但实际只用了50\",{\"1\":{\"156\":1}}],[\"但仍然存在数据不一致性的可能\",{\"1\":{\"202\":1}}],[\"但用于存放key值的桶数组的长度是固定的\",{\"1\":{\"174\":1}}],[\"但hashmap的实际容量是32\",{\"1\":{\"169\":1}}],[\"但是hystrix是非常经典的服务容错开源库\",{\"1\":{\"858\":1}}],[\"但是netflix自2018年停止维护和更新netflix\",{\"1\":{\"830\":1}}],[\"但是对于是否采用微服务架构\",{\"1\":{\"829\":1}}],[\"但是对用户程序而言\",{\"1\":{\"651\":1}}],[\"但是完成了主要的自动装配的能力\",{\"1\":{\"821\":1}}],[\"但是细节上有一些不同\",{\"1\":{\"817\":1}}],[\"但是实际开发中很简单\",{\"1\":{\"816\":1}}],[\"但是还是加上了这一问\",{\"1\":{\"805\":1}}],[\"但是存在\",{\"1\":{\"800\":1}}],[\"但是先曝光出来让大家知道\",{\"1\":{\"800\":1}}],[\"但是没办法\",{\"1\":{\"800\":1}}],[\"但是假如\",{\"1\":{\"799\":1}}],[\"但是假如有多个提议者互不相让\",{\"1\":{\"217\":1}}],[\"但是无法避免机器掉电时数据丢失\",{\"1\":{\"774\":1}}],[\"但是无法被回收\",{\"1\":{\"417\":1}}],[\"但是此消息被标记为\",{\"1\":{\"765\":1}}],[\"但是此时服务端对应的端口并没有关闭\",{\"1\":{\"578\":1}}],[\"但是此时key还强引用指向threadloca\",{\"1\":{\"311\":1}}],[\"但是此时响应的数据和d1不一致\",{\"1\":{\"191\":1}}],[\"但是目前rocketmq支持的延时级别是有限的\",{\"1\":{\"763\":1}}],[\"但是消费既可以从master消费\",{\"1\":{\"755\":1}}],[\"但是消费者之间是竞争关系\",{\"1\":{\"743\":1}}],[\"但是同步刷盘更可靠\",{\"1\":{\"755\":1}}],[\"但是要做秒杀活动\",{\"1\":{\"740\":1}}],[\"但是要注意\",{\"1\":{\"736\":1}}],[\"但是整体所花费的时间会比直接用\",{\"1\":{\"736\":1}}],[\"但是整个活锁组的线程无法推进\",{\"1\":{\"649\":1}}],[\"但是每个节点的成员对象必须是唯⼀的\",{\"1\":{\"729\":1}}],[\"但是每个线程有自己的程序计数器和栈\",{\"1\":{\"299\":1}}],[\"但是以上逻辑还有问题\",{\"1\":{\"727\":1}}],[\"但是序列化和反序列化都会带来更多时间上的消耗\",{\"1\":{\"719\":1}}],[\"但是由于数据量和访问量的持续增长\",{\"1\":{\"713\":1}}],[\"但是由于开销⽐较⼤\",{\"1\":{\"658\":1}}],[\"但是发现性能不但没有好转反而下降了\",{\"1\":{\"713\":1}}],[\"但是有个问题\",{\"1\":{\"727\":1}}],[\"但是有两个问题如果同时出现\",{\"1\":{\"712\":1}}],[\"但是有很多点可以细挖\",{\"1\":{\"546\":1}}],[\"但是增加了系统的复杂度\",{\"1\":{\"709\":1}}],[\"但是本地缓存\",{\"1\":{\"709\":1}}],[\"但是重放\",{\"1\":{\"680\":1}}],[\"但是redis的发布订阅不是可靠的\",{\"1\":{\"709\":1}}],[\"但是redis集群中所有的节点都要承担状态维护的任务\",{\"1\":{\"698\":1}}],[\"但是redis执行命令还是单线程的\",{\"1\":{\"674\":1}}],[\"但是redis2\",{\"1\":{\"198\":1}}],[\"但是值最大不能超过512mb\",{\"1\":{\"670\":1}}],[\"但是值可以被修改\",{\"1\":{\"264\":1}}],[\"但是硬链接有限制\",{\"1\":{\"660\":1}}],[\"但是物理主存空间有限\",{\"1\":{\"651\":1}}],[\"但是这种方式不是可靠的\",{\"1\":{\"722\":1}}],[\"但是这种方法成本非常高\",{\"1\":{\"614\":1}}],[\"但是这样容器就不好管理\",{\"1\":{\"798\":1}}],[\"但是这样又会又消息的延迟问题\",{\"1\":{\"722\":1}}],[\"但是这样\",{\"1\":{\"722\":1}}],[\"但是这个⽂件的内容是另外⼀个⽂件的路径\",{\"1\":{\"660\":1}}],[\"但是这个\",{\"1\":{\"257\":1}}],[\"但是全球的网络设备数量已经远远超过这个数字\",{\"1\":{\"605\":1}}],[\"但是其传输机制为不可靠传送\",{\"1\":{\"598\":1}}],[\"但是出现偶尔断续不是太大问题\",{\"1\":{\"597\":1}}],[\"但是速度可以相对慢\",{\"1\":{\"597\":1}}],[\"但是⼀重传就会导致⽹络的负担更重\",{\"1\":{\"585\":1}}],[\"但是并不知道整个⽹络之中发⽣了什么\",{\"1\":{\"585\":1}}],[\"但是并发时有可能会发生指令重排\",{\"1\":{\"318\":1}}],[\"但是服务端的\",{\"1\":{\"570\":1}}],[\"但是呢\",{\"1\":{\"565\":1}}],[\"但是是默认关闭的\",{\"1\":{\"560\":1}}],[\"但是客户端还应该使用这个地址\",{\"1\":{\"551\":1}}],[\"但是突然之间\",{\"1\":{\"538\":1}}],[\"但是业务时常要求返回对应的\",{\"1\":{\"534\":1}}],[\"但是从服务器的里面读取\",{\"1\":{\"528\":1}}],[\"但是现在在等待\",{\"1\":{\"513\":1}}],[\"但是事务在等待的时候也需要在内存中生成一个\",{\"1\":{\"513\":1}}],[\"但是平衡二叉树可是每个节点只存储一个键值和数据的\",{\"1\":{\"503\":1}}],[\"但是会有一定的重复概率\",{\"1\":{\"736\":1}}],[\"但是会有一个最大通知次数\",{\"1\":{\"207\":1}}],[\"但是会降低更新表的效率\",{\"1\":{\"500\":1}}],[\"但是索引的维护也是需要成本的\",{\"1\":{\"497\":1}}],[\"但是也有一些重要的信息\",{\"1\":{\"493\":1}}],[\"但是也不要滥用\",{\"1\":{\"291\":1}}],[\"但是在加了\",{\"1\":{\"477\":1}}],[\"但是在不同情况下\",{\"1\":{\"445\":1}}],[\"但是三者有一些差别\",{\"1\":{\"467\":1}}],[\"但是需要注意的\",{\"1\":{\"466\":1}}],[\"但是比较灵活\",{\"1\":{\"434\":1}}],[\"但是各个厂商的实现\",{\"1\":{\"427\":1}}],[\"但是类加载器的概念和抽象类\",{\"1\":{\"427\":1}}],[\"但是问题依然没有解决\",{\"1\":{\"413\":1}}],[\"但是我们一般都是用默认\",{\"1\":{\"406\":1}}],[\"但是我们知道\",{\"1\":{\"304\":1}}],[\"但是老王不能在上坡或者下坡休息\",{\"1\":{\"402\":1}}],[\"但是主要存在两个缺点\",{\"1\":{\"395\":1}}],[\"但是风险也比较大\",{\"1\":{\"358\":1}}],[\"但是只允许10个并发执行\",{\"1\":{\"348\":1}}],[\"但是为什么要有cyclicbarrier\",{\"1\":{\"346\":1}}],[\"但是可以设置超时时间\",{\"1\":{\"345\":1}}],[\"但是它和列表使用索引下标作为排序依据不同的是\",{\"1\":{\"670\":1}}],[\"但是它依然⾯临着另外⼀个问题\",{\"1\":{\"592\":1}}],[\"但是它的强度比软引用更弱一些\",{\"1\":{\"392\":1}}],[\"但是它的版本号已经变了\",{\"1\":{\"336\":1}}],[\"但是它们在运行时都在等待countdownlatch的信号\",{\"1\":{\"345\":1}}],[\"但是看到的虽然是a\",{\"1\":{\"336\":1}}],[\"但是公平锁会判断等待队列是否有线程处于等待状态\",{\"1\":{\"333\":1}}],[\"但是jdk6开始\",{\"1\":{\"330\":1}}],[\"但是被检测到不可能存在共享数据竞争的锁进行消除\",{\"1\":{\"327\":1}}],[\"但是经过了编译器的指令重排序\",{\"1\":{\"319\":1}}],[\"但是结构还是和hashmap比较类似的\",{\"1\":{\"312\":1}}],[\"但是threadlocalmap生命周期和thread是一样的\",{\"1\":{\"311\":1}}],[\"但是线程调度器可以无条件忽略这个暗示\",{\"1\":{\"302\":1}}],[\"但是线程a所拥有的监视器资源\",{\"1\":{\"302\":1}}],[\"但是一个时间段内\",{\"1\":{\"298\":1}}],[\"但是你迭代你的版本\",{\"1\":{\"290\":1}}],[\"但是list和cats是同一个链表\",{\"1\":{\"285\":1}}],[\"但是通过反射添加\",{\"1\":{\"285\":1}}],[\"但是如果存在代理\",{\"1\":{\"801\":1}}],[\"但是如果出现其他问题\",{\"1\":{\"724\":1}}],[\"但是如果对一致性要求比较高\",{\"1\":{\"708\":1}}],[\"但是如果查询条件没有\",{\"1\":{\"509\":1}}],[\"但是如果索引不能覆盖查询所需列\",{\"1\":{\"491\":1}}],[\"但是如果索引的叶节点中已经包含要查询的字段\",{\"1\":{\"489\":1}}],[\"但是如果在几秒钟以后再出现之前丢失的画面和声音\",{\"1\":{\"598\":1}}],[\"但是如果在\",{\"1\":{\"482\":1}}],[\"但是如果没有抓住这个机会\",{\"1\":{\"393\":1}}],[\"但是如果读到内存后\",{\"1\":{\"348\":1}}],[\"但是如果我们需要获取线程的执行结果\",{\"1\":{\"300\":1}}],[\"但是如果不实现这个接口\",{\"1\":{\"282\":1}}],[\"但是如果插入中间的位置\",{\"1\":{\"154\":1}}],[\"但是不合理地使用命令\",{\"1\":{\"718\":1}}],[\"但是不连续的主键插入会导致严重的页分裂\",{\"1\":{\"534\":1}}],[\"但是不同版本的类库中某一个类的全路径名可能是一样的\",{\"1\":{\"429\":1}}],[\"但是不同的是\",{\"1\":{\"265\":1}}],[\"但是不保证不会指令重排\",{\"1\":{\"326\":1}}],[\"但是不应该一直都是软状态\",{\"1\":{\"193\":1}}],[\"但是他们不一定时同一个对象\",{\"1\":{\"258\":1}}],[\"但是⽗类中的私有属性和⽅法⼦类是⽆法访问\",{\"1\":{\"248\":1}}],[\"但是长整型\",{\"1\":{\"242\":1}}],[\"但是\",{\"1\":{\"233\":1,\"253\":1,\"289\":1,\"299\":1,\"321\":1,\"327\":1,\"413\":1,\"429\":2,\"482\":1,\"510\":1,\"513\":1,\"554\":1,\"579\":1,\"664\":1,\"806\":1}}],[\"但是桶也是有容量限制的\",{\"1\":{\"227\":1}}],[\"但是当进水量大于出水量的时候\",{\"1\":{\"227\":1}}],[\"但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作\",{\"1\":{\"202\":1}}],[\"但是数组+链表版还是问题不大的\",{\"1\":{\"176\":1}}],[\"但是就需要更多的空间去存储元素\",{\"1\":{\"173\":1}}],[\"但是新的问题来了\",{\"1\":{\"167\":1}}],[\"但问题是一个\",{\"1\":{\"167\":1}}],[\"也被纳入了\",{\"1\":{\"868\":1}}],[\"也被称为自旋锁\",{\"1\":{\"645\":1}}],[\"也被称为\",{\"1\":{\"379\":1}}],[\"也被称为类方法\",{\"1\":{\"254\":1}}],[\"也兼容了grpc\",{\"1\":{\"845\":1}}],[\"也很简单\",{\"1\":{\"788\":1,\"821\":1}}],[\"也很清楚\",{\"1\":{\"301\":1}}],[\"也算是\",{\"1\":{\"784\":1}}],[\"也要是一\",{\"1\":{\"761\":1}}],[\"也要注意\",{\"1\":{\"497\":1}}],[\"也组成了一个\",{\"1\":{\"731\":1}}],[\"也即\",{\"1\":{\"720\":1}}],[\"也即那个\",{\"1\":{\"583\":1}}],[\"也只是表示key可能存在\",{\"1\":{\"705\":1}}],[\"也就减少了\",{\"1\":{\"662\":1}}],[\"也就意味着批量操作会随着节点的增多\",{\"1\":{\"713\":1}}],[\"也就意味着\",{\"1\":{\"622\":1}}],[\"也就是续约\",{\"1\":{\"837\":1}}],[\"也就是在目标方法开始之前启动一个事务\",{\"1\":{\"809\":1}}],[\"也就是已经生成了\",{\"1\":{\"807\":1}}],[\"也就是会对\",{\"1\":{\"798\":1}}],[\"也就是线程中的操作不会对\",{\"1\":{\"798\":1}}],[\"也就是线程本地变量\",{\"1\":{\"308\":1}}],[\"也就是消息队列+分布式系统\",{\"1\":{\"769\":1}}],[\"也就是多次调用和一次调用的效果是一样的\",{\"1\":{\"757\":1}}],[\"也就是开始执⾏内核程序\",{\"1\":{\"633\":1}}],[\"也就是拥塞窗⼝和接收窗⼝中的最⼩值\",{\"1\":{\"585\":1}}],[\"也就是先把一个表的数据查出来\",{\"1\":{\"534\":1}}],[\"也就是主从延迟\",{\"1\":{\"528\":1}}],[\"也就是每个事务只能读取它能看到的版本\",{\"1\":{\"522\":1}}],[\"也就是插入意向锁\",{\"1\":{\"513\":1}}],[\"也就是一个磁盘块\",{\"1\":{\"503\":1}}],[\"也就是一荣俱荣一损俱损~\",{\"1\":{\"208\":1}}],[\"也就是redo\",{\"1\":{\"483\":1}}],[\"也就是只有在第一次\",{\"1\":{\"793\":1}}],[\"也就是只有收到发送方确定才会正常投递的消息\",{\"1\":{\"206\":1}}],[\"也就是只写磁盘一次\",{\"1\":{\"480\":1}}],[\"也就是将\",{\"1\":{\"428\":1}}],[\"也就是我们在程序代码里所定义的各种类型的字段内容\",{\"1\":{\"385\":1}}],[\"也就是本地线程分配缓冲\",{\"1\":{\"384\":1}}],[\"也就是字节码\",{\"1\":{\"379\":1}}],[\"也就是队列里靠前的任务\",{\"1\":{\"355\":1}}],[\"也就是最多共有\",{\"1\":{\"607\":1}}],[\"也就是最大并发数是10\",{\"1\":{\"348\":1}}],[\"也就是最⼤的map集合\",{\"1\":{\"169\":1}}],[\"也就是给当前类加锁\",{\"1\":{\"324\":1}}],[\"也就是size\",{\"1\":{\"314\":1}}],[\"也就是所谓的链地址法\",{\"1\":{\"313\":1}}],[\"也就是运行的时候就没这个信息了\",{\"1\":{\"287\":1}}],[\"也就是内容一样\",{\"1\":{\"267\":1}}],[\"也就是基本数据类型变量的值\",{\"1\":{\"260\":1}}],[\"也就是对象地址\",{\"1\":{\"259\":1}}],[\"也就是拿哈希码和存储元素的数组的长度取余\",{\"1\":{\"258\":1}}],[\"也就是两个对象的值是否相等\",{\"1\":{\"257\":1}}],[\"也就是说可以直接跑起来\",{\"1\":{\"819\":1}}],[\"也就是说zookeeper并不能保证服务的可用性\",{\"1\":{\"770\":1}}],[\"也就是说producer只能向master角色的broker写入消息\",{\"1\":{\"767\":1}}],[\"也就是说每条消息只能被一个消费者消费\",{\"1\":{\"743\":1}}],[\"也就是说每一个对象都有这么个方法\",{\"1\":{\"256\":1}}],[\"也就是说当元素少时使用\",{\"1\":{\"734\":1}}],[\"也就是说当前的可用窗口减少了\",{\"1\":{\"582\":1}}],[\"也就是说这个过程是同步的\",{\"1\":{\"663\":1}}],[\"也就是说一个线程在临界区执行时\",{\"1\":{\"645\":1}}],[\"也就是说一个线程可以根据一个threadlocal对象查询到绑定在这个线程上的一个值\",{\"1\":{\"306\":1}}],[\"也就是说如果版本链中某个版本的修改没有提交\",{\"1\":{\"523\":1}}],[\"也就是说守护线程是否结束并不影响\",{\"1\":{\"305\":1}}],[\"也就是说\",{\"1\":{\"285\":1,\"326\":1,\"371\":1,\"502\":1,\"519\":1,\"658\":1,\"744\":1,\"787\":1}}],[\"也就是说所操作的数据类型被指定为一个参数\",{\"1\":{\"285\":1}}],[\"也就是说所有类都可以调用它的方法\",{\"1\":{\"272\":1}}],[\"也就是说其实上面的代码其实相当于\",{\"1\":{\"266\":1}}],[\"也就是说平衡二叉树保持平衡的效率更低\",{\"1\":{\"162\":1}}],[\"也就是\",{\"1\":{\"245\":1,\"523\":1,\"564\":1,\"712\":1}}],[\"也就是源码\",{\"1\":{\"236\":1}}],[\"也就是支持16个线程的并发写\",{\"1\":{\"180\":1}}],[\"也就是散列函数\",{\"1\":{\"161\":1}}],[\"也面过别人很多次\",{\"1\":{\"621\":1}}],[\"也包括数据部分\",{\"1\":{\"580\":1}}],[\"也进入\",{\"1\":{\"568\":1}}],[\"也应该记住\",{\"1\":{\"551\":1}}],[\"也应该先\",{\"1\":{\"493\":1}}],[\"也写入拆分的新库\",{\"1\":{\"532\":1}}],[\"也不能这么干\",{\"1\":{\"798\":1}}],[\"也不能对目录进行链接\",{\"1\":{\"660\":1}}],[\"也不进行消息的存储\",{\"1\":{\"722\":1}}],[\"也不应该使数据库处于不一致的状态\",{\"1\":{\"519\":1}}],[\"也不会处理阻塞队列中的任务\",{\"1\":{\"367\":1}}],[\"也无法作为覆盖索引\",{\"1\":{\"489\":1}}],[\"也无法通过虚引用来取得一个对象实例\",{\"1\":{\"392\":1}}],[\"也仍是遵循分代收集理论设计的\",{\"1\":{\"404\":1}}],[\"也简称为\",{\"1\":{\"402\":1}}],[\"也能够并行收集\",{\"1\":{\"401\":1}}],[\"也有这样的订单\",{\"1\":{\"788\":1}}],[\"也有可能把多个小的包封装成一个大的数据包发送\",{\"1\":{\"595\":1}}],[\"也有可能是每个\",{\"1\":{\"538\":1}}],[\"也有可能非空的时候\",{\"1\":{\"293\":1}}],[\"也有可能非\",{\"1\":{\"293\":1}}],[\"也有oom的风险\",{\"1\":{\"365\":1}}],[\"也可用作配置中心\",{\"1\":{\"841\":1}}],[\"也可能启动多个线程并行处理\",{\"1\":{\"761\":1}}],[\"也可能在磁盘中\",{\"1\":{\"658\":1}}],[\"也可能是多个文件\",{\"1\":{\"477\":1}}],[\"也可能创建一个新的线程来代替异常的线程\",{\"1\":{\"366\":1}}],[\"也可能有问题\",{\"1\":{\"336\":1}}],[\"也可以作为配置中心使用\",{\"1\":{\"841\":1}}],[\"也可以整合到其它框架中\",{\"1\":{\"807\":1}}],[\"也可以称作增强\",{\"1\":{\"804\":1}}],[\"也可以返回普通对象\",{\"1\":{\"801\":1}}],[\"也可以从slave消费\",{\"1\":{\"755\":1}}],[\"也可以这么说\",{\"1\":{\"744\":1}}],[\"也可以被\",{\"1\":{\"744\":1}}],[\"也可以通过查询日志的api\",{\"1\":{\"754\":1}}],[\"也可以通过命令set\",{\"1\":{\"715\":1}}],[\"也可以通过在特定幻灯片添加\",{\"1\":{\"31\":1}}],[\"也可以不使用任何持久化方式\",{\"1\":{\"678\":1}}],[\"也可以只是一个简单的互斥量\",{\"1\":{\"645\":1}}],[\"也可以在\",{\"1\":{\"560\":1}}],[\"也可以在后\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"也可以减少\",{\"1\":{\"510\":1}}],[\"也可以手动给defaultsqlsessionfactory的创建sqlsession的方法传递executortype类型参数\",{\"1\":{\"451\":1}}],[\"也可以自己去扩展threadpoolexecutor\",{\"1\":{\"368\":1}}],[\"也可以自己开发配置中心\",{\"1\":{\"368\":1}}],[\"也可以叫同步点\",{\"1\":{\"346\":1}}],[\"也可以说是一种同步机制\",{\"1\":{\"325\":1}}],[\"也可以使用分页插件来完成物理分页\",{\"1\":{\"454\":1}}],[\"也可以使用\",{\"1\":{\"291\":1}}],[\"也可以使⽤\",{\"1\":{\"254\":1}}],[\"也可以继承父类的属性和方法\",{\"1\":{\"248\":1}}],[\"也可以放在变量之后\",{\"1\":{\"245\":1}}],[\"也可以是我们最熟悉的注解形式\",{\"1\":{\"788\":1}}],[\"也可以是一段可以传递的代码\",{\"1\":{\"291\":1,\"292\":1}}],[\"也可以是\",{\"1\":{\"242\":1}}],[\"也可以让翻译人员翻译一段\",{\"1\":{\"236\":1}}],[\"也可以用乐观锁\",{\"1\":{\"225\":1}}],[\"也可以根据应用特点采用适当的方式来达到最终一致性\",{\"1\":{\"193\":1}}],[\"也是最常用的模式之一\",{\"1\":{\"870\":1}}],[\"也是最复杂的一种方式\",{\"1\":{\"762\":1}}],[\"也是通过后置处理器来完成的\",{\"1\":{\"802\":1}}],[\"也是redis常见的应用\",{\"1\":{\"669\":1}}],[\"也是从内核中读取这段数据\",{\"1\":{\"641\":1}}],[\"也是往后推移并且循环的\",{\"1\":{\"483\":1}}],[\"也是个图形化工具\",{\"1\":{\"418\":1}}],[\"也是线程私有的\",{\"1\":{\"379\":1}}],[\"也是\",{\"1\":{\"331\":1}}],[\"也是一个字典\",{\"1\":{\"731\":1}}],[\"也是一个跨语言的平台\",{\"1\":{\"377\":1}}],[\"也是一个\",{\"1\":{\"219\":1}}],[\"也叫中央控制器\",{\"1\":{\"816\":1}}],[\"也叫实例工厂\",{\"1\":{\"795\":1}}],[\"也叫写锁\",{\"1\":{\"512\":1}}],[\"也叫读锁\",{\"1\":{\"512\":1}}],[\"也叫\",{\"1\":{\"312\":1,\"591\":1}}],[\"也称主线程\",{\"1\":{\"299\":1}}],[\"也称为散列码\",{\"1\":{\"258\":1}}],[\"也称为类变量\",{\"1\":{\"254\":1}}],[\"也称为窄化\",{\"1\":{\"239\":1}}],[\"也具有解释型语言的特征\",{\"1\":{\"236\":1}}],[\"也会定时从\",{\"1\":{\"748\":1}}],[\"也会再给consumer\",{\"1\":{\"744\":1}}],[\"也会造成死锁\",{\"1\":{\"727\":1}}],[\"也会进行rpop\",{\"1\":{\"722\":1}}],[\"也会自动触发save操作\",{\"1\":{\"676\":1}}],[\"也会有\",{\"1\":{\"584\":1}}],[\"也会停止回收\",{\"1\":{\"412\":1}}],[\"也会在特定的位置生成\",{\"1\":{\"402\":1}}],[\"也会触发\",{\"1\":{\"399\":1}}],[\"也会发生\",{\"1\":{\"388\":1}}],[\"也会根据threadlocal对象的hash值\",{\"1\":{\"313\":1}}],[\"也会产生重复的数据\",{\"1\":{\"224\":1}}],[\"也会按照先后顺序建立两个节点\",{\"1\":{\"197\":1}}],[\"也向\",{\"1\":{\"208\":1}}],[\"也支持cp\",{\"1\":{\"836\":2}}],[\"也支持\",{\"1\":{\"192\":1}}],[\"也没啥好问的\",{\"1\":{\"153\":1}}],[\"是阿里巴巴开源的一个动态服务发现\",{\"1\":{\"835\":1}}],[\"是整个流程控制的核心\",{\"1\":{\"815\":1}}],[\"是通过动态代理来实现的\",{\"1\":{\"806\":1}}],[\"是通过将原域名对应的\",{\"1\":{\"612\":1}}],[\"是有状态的\",{\"1\":{\"798\":1}}],[\"是有序的\",{\"1\":{\"509\":1}}],[\"是线程安全的\",{\"1\":{\"798\":1}}],[\"是线程安全的吗\",{\"0\":{\"177\":1}}],[\"是全局只有一个\",{\"1\":{\"798\":1}}],[\"是类的通用工厂\",{\"1\":{\"790\":1}}],[\"是类成员\",{\"1\":{\"324\":1}}],[\"是完整的\",{\"1\":{\"789\":1}}],[\"是思想\",{\"1\":{\"787\":1}}],[\"是什么\",{\"0\":{\"782\":1}}],[\"是os对文件的缓存\",{\"1\":{\"772\":1}}],[\"是消息回查\",{\"1\":{\"765\":1}}],[\"是消息队列最主要的三大作用\",{\"1\":{\"740\":1}}],[\"是收信者\",{\"1\":{\"747\":1}}],[\"是二进制安全的\",{\"1\":{\"730\":1}}],[\"是二阶段提交\",{\"1\":{\"203\":1}}],[\"是两条指令而不是原子指令\",{\"1\":{\"727\":1}}],[\"是两阶段提交的一个变种\",{\"1\":{\"204\":1}}],[\"是不小的压力\",{\"1\":{\"710\":1}}],[\"是不需要注意实际的物理内存的\",{\"1\":{\"651\":1}}],[\"是集群最核心的功能\",{\"1\":{\"691\":1}}],[\"是持久化之外的一种数据冗余方式\",{\"1\":{\"682\":1}}],[\"是间隔一段时间进行持久化\",{\"1\":{\"677\":1}}],[\"是内核数据准备好和数据从内核态拷⻉到⽤户态这两个过程都不⽤等待\",{\"1\":{\"663\":1}}],[\"是内存块\",{\"1\":{\"280\":1}}],[\"是为了管理主存的方便而划分的\",{\"1\":{\"656\":1}}],[\"是为了告诉客户端\",{\"1\":{\"571\":1}}],[\"是为了告诉客户端传来的数据已经接收无误\",{\"1\":{\"571\":1}}],[\"是工作在\",{\"1\":{\"609\":1}}],[\"是写在网卡上的物理地址\",{\"1\":{\"607\":1}}],[\"是支持网间互联的数据包协议\",{\"1\":{\"602\":1}}],[\"是大喇叭\",{\"1\":{\"597\":1}}],[\"是打电话\",{\"1\":{\"597\":1}}],[\"是面向对象的编程语言\",{\"1\":{\"787\":1}}],[\"是面向连接\",{\"1\":{\"597\":1}}],[\"是面向流\",{\"1\":{\"595\":1}}],[\"是接收⽅的\",{\"1\":{\"594\":1}}],[\"是谁传回来的\",{\"1\":{\"592\":1}}],[\"是重传\",{\"1\":{\"592\":1}}],[\"是重传之前的⼀个\",{\"1\":{\"592\":1}}],[\"是约等于的关系\",{\"1\":{\"585\":1}}],[\"是如何攻击的呢\",{\"1\":{\"613\":1,\"615\":1}}],[\"是如何保证可靠性的\",{\"0\":{\"581\":1}}],[\"是如何定位的\",{\"0\":{\"418\":1}}],[\"是老张\",{\"1\":{\"568\":1}}],[\"是老王的声音\",{\"1\":{\"568\":1}}],[\"是属于哪个域名\",{\"1\":{\"566\":1}}],[\"是保存在客户端的一小块文本串的数据\",{\"1\":{\"566\":1}}],[\"是客户端的状态\",{\"1\":{\"565\":1}}],[\"是明⽂传输\",{\"1\":{\"562\":1}}],[\"是超⽂本传输协议\",{\"1\":{\"561\":1}}],[\"是实际上的网络通信模型\",{\"1\":{\"542\":1}}],[\"是比较有名的\",{\"1\":{\"526\":1}}],[\"是每次读取数据前都生成一个\",{\"1\":{\"523\":1}}],[\"是第一个比较因子\",{\"1\":{\"509\":1}}],[\"是无法提供事务功能的\",{\"1\":{\"808\":1}}],[\"是无连接\",{\"1\":{\"597\":1}}],[\"是无序的\",{\"1\":{\"509\":1}}],[\"是无效的\",{\"1\":{\"358\":1}}],[\"是从磁盘读到内存\",{\"1\":{\"503\":1}}],[\"是优化慢\",{\"1\":{\"489\":1}}],[\"是主键\",{\"1\":{\"481\":1}}],[\"是主流的\",{\"1\":{\"429\":1}}],[\"是追加写入\",{\"1\":{\"480\":1}}],[\"是循环写入和擦除\",{\"1\":{\"480\":1}}],[\"是阉割版的\",{\"1\":{\"466\":1}}],[\"是以二进制存储的\",{\"1\":{\"465\":1}}],[\"是时间换空间的做法\",{\"1\":{\"461\":1}}],[\"是空间换时间的做法\",{\"1\":{\"461\":1}}],[\"是对空间的节省\",{\"1\":{\"460\":1}}],[\"是数学中的一个概念\",{\"1\":{\"458\":1}}],[\"是没有办法获取到自增的id\",{\"1\":{\"445\":1}}],[\"是没办法放在核心包里的\",{\"1\":{\"427\":1}}],[\"是null值\",{\"1\":{\"442\":1}}],[\"是拼接符\",{\"1\":{\"439\":1}}],[\"是占位符\",{\"1\":{\"439\":1}}],[\"是半orm框架\",{\"1\":{\"434\":1}}],[\"是标准的orm框架\",{\"1\":{\"434\":1}}],[\"是我们这些crud选手最趁手的工具\",{\"1\":{\"431\":1}}],[\"是由一系列特殊编码的连续内存快组成的顺序型数据结构\",{\"1\":{\"733\":1}}],[\"是由于用户对程序动态性的追求而导致的\",{\"1\":{\"427\":1}}],[\"是由这个模型自身的缺陷导致的\",{\"1\":{\"427\":1}}],[\"是怎么设计来保证线程安全的\",{\"0\":{\"384\":1}}],[\"是虚拟机所管理的内存中最大的一块\",{\"1\":{\"379\":1}}],[\"是具有优先级的无界阻塞队列\",{\"1\":{\"356\":1}}],[\"是基于动态代理来实现的\",{\"1\":{\"807\":1}}],[\"是基于链表结构的阻塞队列\",{\"1\":{\"356\":1}}],[\"是基于cap理论逐步演化而来的\",{\"1\":{\"193\":1}}],[\"是可重入的独占锁\",{\"1\":{\"332\":1}}],[\"是可重入的\",{\"1\":{\"326\":1}}],[\"是可重入锁\",{\"1\":{\"326\":1}}],[\"是可以回收的\",{\"1\":{\"390\":1}}],[\"是可以的\",{\"1\":{\"285\":1}}],[\"是可以保证的\",{\"1\":{\"192\":1}}],[\"是因为在\",{\"1\":{\"813\":1}}],[\"是因为\",{\"1\":{\"326\":1}}],[\"是因为jvm帮我们把这个事情做了\",{\"1\":{\"325\":1}}],[\"是因为如果这个阈值也设置成8\",{\"1\":{\"172\":1}}],[\"是允许的\",{\"1\":{\"324\":1}}],[\"是原子性操作\",{\"1\":{\"318\":1}}],[\"是系统进行资源分配和调度的基本单位\",{\"1\":{\"299\":1}}],[\"是系统内部错误\",{\"1\":{\"274\":1}}],[\"是异步不阻塞的\",{\"1\":{\"280\":1}}],[\"是同步非阻塞的\",{\"1\":{\"280\":1}}],[\"是程序问题导致的异常\",{\"1\":{\"274\":1}}],[\"是程序无法处理的\",{\"1\":{\"274\":1}}],[\"是等待时间\",{\"1\":{\"272\":1}}],[\"是所有的指令在\",{\"1\":{\"724\":1}}],[\"是所有类的父类\",{\"1\":{\"272\":1}}],[\"是所谓的不可变类\",{\"1\":{\"263\":1}}],[\"是用\",{\"1\":{\"813\":1}}],[\"是用户应用程序和网络之间的接口\",{\"1\":{\"542\":1}}],[\"是用来创建sqlsession的\",{\"1\":{\"435\":1}}],[\"是用来控制同时访问特定资源的线程数量\",{\"1\":{\"348\":1}}],[\"是用负的值累减\",{\"1\":{\"270\":1}}],[\"是用到了\",{\"1\":{\"269\":1}}],[\"是用hash值\",{\"1\":{\"168\":1}}],[\"是值传递\",{\"0\":{\"259\":1}}],[\"是在缓存不存在的时候\",{\"1\":{\"708\":1}}],[\"是在第一次读取数据时生成一个\",{\"1\":{\"523\":1}}],[\"是在\",{\"1\":{\"256\":1,\"594\":1}}],[\"是被\",{\"1\":{\"254\":1}}],[\"是⼀种⾏为的规范\",{\"1\":{\"252\":1}}],[\"是⼀种模板设计\",{\"1\":{\"252\":1}}],[\"是自身的一个对象\",{\"1\":{\"251\":1}}],[\"是会先定义一个临时变量来接收\",{\"1\":{\"245\":1}}],[\"是双精度数\",{\"1\":{\"239\":1}}],[\"是指对之前失败的\",{\"1\":{\"776\":1}}],[\"是指暂时还不能被\",{\"1\":{\"765\":1}}],[\"是指将一台\",{\"1\":{\"682\":1}}],[\"是指处于不同位置的多个攻击者同时向一个或几个目标发动攻击\",{\"1\":{\"614\":1}}],[\"是指攻击者从网络上窃听他人的通信内容\",{\"1\":{\"611\":1}}],[\"是指一个数据块发送出去后\",{\"1\":{\"584\":1}}],[\"是指在程序代码之中普遍存在的引用赋值\",{\"1\":{\"392\":1}}],[\"是指资源是有线性顺序的\",{\"1\":{\"342\":1,\"648\":1}}],[\"是指\",{\"1\":{\"234\":1,\"280\":1}}],[\"是业务层面的分布式事务\",{\"1\":{\"204\":1}}],[\"是当前应用最广泛的分布式锁实现方式\",{\"1\":{\"198\":1}}],[\"是\",{\"0\":{\"263\":1},\"1\":{\"186\":1,\"232\":1,\"239\":1,\"263\":1,\"285\":1,\"327\":1,\"401\":2,\"429\":1,\"493\":1,\"510\":1,\"519\":1,\"521\":6,\"576\":1,\"580\":1,\"587\":1,\"591\":1,\"787\":1,\"788\":2,\"789\":2,\"797\":1,\"807\":1,\"824\":1,\"830\":1,\"831\":1,\"835\":3,\"868\":3}}],[\"是按照表的顺序遍历的\",{\"1\":{\"496\":1}}],[\"是按照\",{\"1\":{\"184\":1}}],[\"是使用\",{\"1\":{\"178\":1}}],[\"是直接在操作方法上加\",{\"1\":{\"178\":1}}],[\"是1的化变成原索引+oldcap\",{\"1\":{\"174\":1}}],[\"是0的话索引没变\",{\"1\":{\"174\":1}}],[\"是根据初始化传的参数来计算的\",{\"1\":{\"169\":1}}],[\"是一款开源的应用性能监控与分析系统\",{\"1\":{\"868\":1}}],[\"是一回事\",{\"1\":{\"787\":1}}],[\"是一套标准\",{\"1\":{\"548\":1}}],[\"是一对多的关系\",{\"1\":{\"441\":1,\"604\":1}}],[\"是一块较小的内存空间\",{\"1\":{\"379\":1}}],[\"是一块连续的内存空间\",{\"1\":{\"154\":1}}],[\"是一种中间层服务器\",{\"1\":{\"863\":1}}],[\"是一种用于实现分布式系统中不同节点之间通信的协议\",{\"1\":{\"845\":1}}],[\"是一种用于传输超文本的协议\",{\"1\":{\"845\":1}}],[\"是一种用于分布式系统之间通信的协议\",{\"1\":{\"845\":1}}],[\"是一种应用层协议\",{\"1\":{\"845\":1}}],[\"是一种分布式服务发现和配置管理系统\",{\"1\":{\"835\":1}}],[\"是一种特定规模下的服务拆分和部署方式\",{\"1\":{\"828\":1}}],[\"是一种软件架构设计原则\",{\"1\":{\"828\":1}}],[\"是一种软件架构风格\",{\"1\":{\"828\":1}}],[\"是一种传统的软件架构方式\",{\"1\":{\"828\":1}}],[\"是一种有序数据结构\",{\"1\":{\"732\":1}}],[\"是一种将\",{\"1\":{\"636\":1}}],[\"是一种挟持用户在当前已登录的\",{\"1\":{\"613\":1}}],[\"是一种因特网包探索器\",{\"1\":{\"609\":1}}],[\"是一种逻辑地址\",{\"1\":{\"607\":1}}],[\"是一种典型的\",{\"1\":{\"573\":1}}],[\"是一种物理日志\",{\"1\":{\"519\":1}}],[\"是一种为了解决关系型数据库数据与简单java对象\",{\"1\":{\"433\":1}}],[\"是一种抽象的模型\",{\"1\":{\"317\":1}}],[\"是一种轻便高效的结构化数据存储格式\",{\"1\":{\"283\":1}}],[\"是一致的\",{\"1\":{\"266\":1}}],[\"是一个开源的可视化仪表板工具\",{\"1\":{\"876\":1}}],[\"是一个开源的监控系统\",{\"1\":{\"876\":1}}],[\"是一个开源的分布式实时追踪系统\",{\"1\":{\"868\":1}}],[\"是一个高性能\",{\"1\":{\"830\":1}}],[\"是一个易用的功能强大的\",{\"1\":{\"807\":1}}],[\"是一个接口\",{\"1\":{\"806\":1,\"815\":1}}],[\"是一个无状态的\",{\"1\":{\"798\":1}}],[\"是一个无状态的服务器\",{\"1\":{\"748\":1}}],[\"是一个轻量级\",{\"1\":{\"782\":1}}],[\"是一个长度无限的数组\",{\"1\":{\"744\":1}}],[\"是一个指针\",{\"1\":{\"732\":1}}],[\"是一个double类型的浮点数\",{\"1\":{\"732\":1}}],[\"是一个全双工协议\",{\"1\":{\"598\":1}}],[\"是一个全表映射的框架\",{\"1\":{\"434\":1}}],[\"是一个持久化的协议\",{\"1\":{\"548\":1}}],[\"是一个理论上的网络通信模型\",{\"1\":{\"542\":1}}],[\"是一个左开右开空间\",{\"1\":{\"513\":1}}],[\"是一个半自动映射的框架\",{\"1\":{\"434\":1}}],[\"是一个半\",{\"1\":{\"433\":1}}],[\"是一个把大任务分割成若干个小任务\",{\"1\":{\"373\":1}}],[\"是一个不存储元素的阻塞队列\",{\"1\":{\"356\":1}}],[\"是一个任务定时周期的延迟执行的队列\",{\"1\":{\"356\":1}}],[\"是一个用数组实现的有界阻塞队列\",{\"1\":{\"356\":1}}],[\"是一个用于线程间协作的工具类\",{\"1\":{\"349\":1}}],[\"是一个native方法\",{\"1\":{\"341\":1}}],[\"是一个虚拟节点\",{\"1\":{\"331\":1}}],[\"是一个以threadlocal对象为键\",{\"1\":{\"306\":1}}],[\"是一个终端操作\",{\"1\":{\"294\":1}}],[\"是一个静态内部类\",{\"1\":{\"269\":1}}],[\"是一个比较特殊的引用数据类型\",{\"1\":{\"263\":1}}],[\"是一个本地⽅法\",{\"1\":{\"258\":1}}],[\"是一个32位的int类型的数值\",{\"1\":{\"166\":1}}],[\"是一门面向对象的编程语言\",{\"1\":{\"231\":1}}],[\"是则向树中插入节点\",{\"1\":{\"164\":1}}],[\"是的话就返回遍历\",{\"1\":{\"157\":1}}],[\"是否将原来的单体服务进行拆分\",{\"1\":{\"829\":1}}],[\"是否和自己的\",{\"1\":{\"606\":1}}],[\"是否存在该\",{\"1\":{\"606\":1}}],[\"是否发生了包失序\",{\"1\":{\"594\":1}}],[\"是否为daemon线程等等\",{\"1\":{\"354\":1}}],[\"是否为树节点\",{\"1\":{\"164\":1}}],[\"是否偏向锁是否为\",{\"1\":{\"328\":1}}],[\"是否都不是以\",{\"1\":{\"294\":1}}],[\"是否都是以\",{\"1\":{\"294\":1}}],[\"是否有以\",{\"1\":{\"294\":1}}],[\"是否一致\",{\"1\":{\"282\":1}}],[\"是否是负数\",{\"1\":{\"270\":1}}],[\"是否能作用在\",{\"0\":{\"242\":1}}],[\"是否支持随机访问\",{\"1\":{\"154\":1}}],[\"是否必填\",{\"1\":{\"72\":1}}],[\"是键值对映射结构的集合\",{\"1\":{\"152\":1}}],[\"集成\",{\"1\":{\"863\":1,\"868\":1}}],[\"集成负载均衡\",{\"1\":{\"847\":1}}],[\"集成良好\",{\"1\":{\"835\":1}}],[\"集中式的服务管理机制\",{\"1\":{\"824\":1}}],[\"集中式地完成的\",{\"1\":{\"731\":1}}],[\"集群消费\",{\"1\":{\"745\":1}}],[\"集群模式\",{\"1\":{\"715\":1,\"777\":1}}],[\"集群部署\",{\"1\":{\"704\":1}}],[\"集群扩容和缩容的关键点\",{\"1\":{\"699\":1}}],[\"集群内节点不断收集到故障节点的下线报告\",{\"1\":{\"698\":1}}],[\"集群中每个节点都会定期向其他节点发送ping消息\",{\"1\":{\"698\":1}}],[\"集群中数据如何分区\",{\"0\":{\"692\":1}}],[\"集群创建\",{\"0\":{\"697\":1}}],[\"集群使用的便是该方案\",{\"1\":{\"695\":1}}],[\"集群仍然可以对外提供服务\",{\"1\":{\"691\":1}}],[\"集群支持主从复制和主节点的\",{\"1\":{\"691\":1}}],[\"集群将数据分散到多个节点\",{\"1\":{\"691\":1}}],[\"集群了解吗\",{\"0\":{\"691\":1}}],[\"集群\",{\"1\":{\"681\":1}}],[\"集群数据库\",{\"1\":{\"192\":1}}],[\"集进行收集\",{\"1\":{\"404\":1}}],[\"集\",{\"1\":{\"152\":1}}],[\"集合主要有如下使用场景\",{\"1\":{\"670\":1}}],[\"集合中不允许有重复元素\",{\"1\":{\"670\":1}}],[\"集合\",{\"1\":{\"458\":1,\"664\":2,\"668\":1,\"670\":1}}],[\"集合工具的内部类\",{\"1\":{\"178\":1}}],[\"集合框架篇面试题八股文\",{\"1\":{\"623\":1}}],[\"集合框架篇👍\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"集合框架\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"623\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"集合框架面试高频题\",{\"1\":{\"150\":1}}],[\"集合在被遍历期间如果内容发生变化\",{\"1\":{\"157\":1}}],[\"集合相关类和接口都在java\",{\"1\":{\"152\":1}}],[\"映射文件\",{\"1\":{\"448\":1}}],[\"映射文件即\",{\"1\":{\"448\":1}}],[\"映射文件的sql标签parametertype属性可省略\",{\"1\":{\"86\":1,\"87\":1,\"88\":1}}],[\"映射方式为自定义一个typehandler\",{\"1\":{\"438\":1}}],[\"映射器\",{\"1\":{\"448\":1}}],[\"映射器接口的实例是从\",{\"1\":{\"435\":1}}],[\"映射器是一些绑定映射语句的接口\",{\"1\":{\"435\":1}}],[\"映射关系\",{\"1\":{\"434\":1}}],[\"映射成数据库中的记录\",{\"1\":{\"433\":1}}],[\"映射表\",{\"1\":{\"402\":1}}],[\"映射到bit列表上的k个点\",{\"1\":{\"705\":1}}],[\"映射到相同的物理内存中\",{\"1\":{\"641\":1}}],[\"映射到对应的\",{\"1\":{\"258\":1}}],[\"映射到桶数组对应索引的位置\",{\"1\":{\"161\":1}}],[\"映射\",{\"1\":{\"152\":1,\"435\":1,\"662\":1}}],[\"引介是一种特殊的增强\",{\"1\":{\"804\":1}}],[\"引介\",{\"1\":{\"804\":1}}],[\"引论\",{\"0\":{\"627\":1}}],[\"引起全表扫描\",{\"1\":{\"489\":1}}],[\"引擎层查找到name\",{\"1\":{\"510\":1}}],[\"引擎把刚刚写入的\",{\"1\":{\"481\":1}}],[\"引擎将这行新数据更新到内存中\",{\"1\":{\"481\":1}}],[\"引擎不仅会记录\",{\"1\":{\"479\":1}}],[\"引擎提供的日志\",{\"1\":{\"479\":1}}],[\"引擎提供较高的处理效率\",{\"1\":{\"476\":1}}],[\"引擎中\",{\"1\":{\"476\":1}}],[\"引入自定义\",{\"1\":{\"821\":1}}],[\"引入\",{\"1\":{\"805\":1,\"821\":1}}],[\"引入依赖\",{\"1\":{\"805\":1}}],[\"引入的目的主要是提高消息消费的性能\",{\"1\":{\"771\":1}}],[\"引入消息队列\",{\"1\":{\"740\":1}}],[\"引入消息队列之后\",{\"1\":{\"740\":1}}],[\"引入消息队列之前\",{\"1\":{\"740\":1}}],[\"引入专业的消息队列\",{\"1\":{\"709\":1}}],[\"引入慢启动机制\",{\"1\":{\"581\":1}}],[\"引入一种针对性的算法\",{\"1\":{\"395\":1}}],[\"引入了多级页表的解决方案\",{\"1\":{\"654\":1}}],[\"引入了多线程来提升数据推送的效率\",{\"1\":{\"352\":1}}],[\"引入了窗口\",{\"1\":{\"583\":1}}],[\"引入了头信息压缩机制\",{\"1\":{\"558\":1}}],[\"引入了持久连接\",{\"1\":{\"558\":1}}],[\"引入了一个不太优雅的设计\",{\"1\":{\"427\":1}}],[\"引入了新的日期时间\",{\"1\":{\"291\":1}}],[\"引入了\",{\"1\":{\"280\":1,\"695\":1}}],[\"引⽤数据类型\",{\"1\":{\"257\":1}}],[\"引用了它\",{\"1\":{\"807\":1}}],[\"引用知乎上一个高赞的回答来解释什么是i\",{\"1\":{\"672\":1}}],[\"引用的对象\",{\"1\":{\"391\":1}}],[\"引用计数器的算法是这样的\",{\"1\":{\"390\":1}}],[\"引用计数算法\",{\"1\":{\"390\":2}}],[\"引用类型变量单独克隆\",{\"1\":{\"260\":1}}],[\"引用类型变量修改\",{\"1\":{\"260\":1}}],[\"引用本类的构造函数\",{\"1\":{\"251\":1}}],[\"引用数据类型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":1,\"879\":1}}],[\"引言\",{\"0\":{\"151\":1,\"376\":1}}],[\"戳原文链接\",{\"1\":{\"150\":1,\"186\":1,\"188\":1,\"227\":1,\"229\":1,\"294\":1,\"296\":1,\"373\":1,\"375\":1,\"429\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"戳转载链接\",{\"1\":{\"150\":1,\"186\":1,\"188\":1,\"227\":1,\"229\":1,\"294\":1,\"296\":1,\"373\":1,\"375\":1,\"429\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"沉默王二\",{\"1\":{\"150\":1,\"159\":1,\"186\":2,\"188\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":2,\"229\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":2,\"296\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":2,\"375\":1,\"408\":1,\"419\":1,\"429\":2,\"431\":1,\"446\":1,\"451\":1,\"454\":2,\"456\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":2,\"540\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":2,\"624\":1,\"626\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":2,\"666\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":2,\"738\":1,\"751\":1,\"767\":1,\"778\":2,\"780\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":2,\"826\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":2}}],[\"道微服务\",{\"1\":{\"826\":1,\"877\":1}}],[\"道spring面试高频题\",{\"1\":{\"824\":1}}],[\"道redis面试高频题\",{\"1\":{\"736\":1}}],[\"道操作系统面试高频题\",{\"1\":{\"626\":1}}],[\"道计算机网络面试高频题\",{\"1\":{\"540\":1}}],[\"道mybatis面试高频题\",{\"1\":{\"454\":1}}],[\"道java虚拟机高频面试题\",{\"1\":{\"429\":1}}],[\"道java并发面试高频题\",{\"1\":{\"373\":1}}],[\"道java基础面试高频题\",{\"1\":{\"294\":1}}],[\"道java集合框架面试高频题\",{\"1\":{\"186\":1}}],[\"道分布式面试高频题\",{\"1\":{\"188\":1,\"227\":1}}],[\"道\",{\"1\":{\"150\":1,\"296\":1,\"375\":1,\"431\":1,\"456\":1,\"538\":1,\"666\":1,\"738\":1,\"780\":1}}],[\"索引文件\",{\"1\":{\"771\":2}}],[\"索引是否缺失\",{\"1\":{\"538\":1}}],[\"索引是不是建的越多越好呢\",{\"0\":{\"500\":1}}],[\"索引条件下推优化可以减少存储引擎查询基础表的次数\",{\"1\":{\"510\":1}}],[\"索引条件下推优化\",{\"1\":{\"510\":1}}],[\"索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同\",{\"1\":{\"506\":1}}],[\"索引中键值的逻辑顺序决定了表中相应行的物理顺序\",{\"1\":{\"506\":1}}],[\"索引的数据结构是树\",{\"1\":{\"506\":1}}],[\"索引的个数应该适量\",{\"1\":{\"497\":1}}],[\"索引根本无法进行模糊查询\",{\"1\":{\"505\":1}}],[\"索引在等值查询上比\",{\"1\":{\"505\":1}}],[\"索引不支持\",{\"1\":{\"505\":2}}],[\"索引不能\",{\"1\":{\"505\":1}}],[\"索引不适合哪些场景呢\",{\"0\":{\"499\":1}}],[\"索引和\",{\"0\":{\"505\":1}}],[\"索引用的什么数据结构了解吗\",{\"0\":{\"501\":1}}],[\"索引虽然会提高查询效率\",{\"1\":{\"500\":1}}],[\"索引虽然是\",{\"1\":{\"497\":1}}],[\"索引会占据磁盘空间\",{\"1\":{\"500\":1}}],[\"索引字段上使用\",{\"1\":{\"498\":2}}],[\"索引失效\",{\"1\":{\"498\":4}}],[\"索引哪些情况下会失效呢\",{\"0\":{\"498\":1}}],[\"索引需要占用空间\",{\"1\":{\"497\":1}}],[\"索引应该建在查询应用频繁的字段\",{\"1\":{\"497\":1}}],[\"索引可以说是\",{\"1\":{\"494\":1}}],[\"索引优化\",{\"0\":{\"489\":1}}],[\"索引类型\",{\"1\":{\"477\":1}}],[\"索引\",{\"0\":{\"494\":1,\"932\":1},\"1\":{\"506\":1},\"2\":{\"139\":1,\"142\":1,\"149\":1,\"881\":1}}],[\"主观下线\",{\"1\":{\"688\":1,\"690\":1}}],[\"主观下线就是哨兵节点认为某个节点有问题\",{\"1\":{\"688\":1}}],[\"主观下线和客观下线\",{\"1\":{\"688\":1}}],[\"主观上当\",{\"1\":{\"381\":1}}],[\"主节点和从节点都是数据节点\",{\"1\":{\"687\":1}}],[\"主节点的存储能力受到单机的限制\",{\"1\":{\"686\":1}}],[\"主节点的写能力受到单机的限制\",{\"1\":{\"686\":1}}],[\"主节点根据偏移量把复制积压缓冲区里的数据发送给从节点\",{\"1\":{\"685\":1}}],[\"主节点根据psync\",{\"1\":{\"685\":1}}],[\"主节点接到psync命令后首先核对参数runid是否与自身一致\",{\"1\":{\"685\":1}}],[\"主节点会认为从节点故障并中断复制连接\",{\"1\":{\"685\":1}}],[\"主节点会把持有的数据全部发送给从节点\",{\"1\":{\"684\":1}}],[\"主节点要求补发丢失的命令数据\",{\"1\":{\"685\":1}}],[\"主节点再把缓冲区内的数据发送给从节点\",{\"1\":{\"685\":1}}],[\"主节点仍然响应读写命令\",{\"1\":{\"685\":1}}],[\"主节点发送rdb文件给从节点\",{\"1\":{\"685\":1}}],[\"主节点执行bgsave保存rdb文件到本地\",{\"1\":{\"685\":1}}],[\"主节点当前是否可接受处理命令\",{\"1\":{\"684\":1}}],[\"主节点\",{\"1\":{\"682\":1,\"687\":1}}],[\"主节点自动执行bgsave生成rdb文件并发送给从节点\",{\"1\":{\"676\":1}}],[\"主动从消息服务器拉取信息\",{\"1\":{\"751\":1}}],[\"主动删除\",{\"1\":{\"719\":1}}],[\"主动触发中断\",{\"1\":{\"633\":1}}],[\"主动攻击\",{\"1\":{\"611\":1}}],[\"主动向客户端发送资源\",{\"1\":{\"558\":1}}],[\"主域名服务器向辅助域名服务器传送变化的那部分数据\",{\"1\":{\"600\":1}}],[\"主机号占后面\",{\"1\":{\"603\":3}}],[\"主机号\",{\"1\":{\"603\":1}}],[\"主机该报文段是来自哪里\",{\"1\":{\"580\":1}}],[\"主机可能顶不住读操作的压力从而崩溃\",{\"1\":{\"528\":1}}],[\"主表和扩展表\",{\"1\":{\"530\":1}}],[\"主服务器的\",{\"1\":{\"528\":1}}],[\"主从连接中断期间主节点依然响应命令\",{\"1\":{\"685\":1}}],[\"主从建立连接\",{\"1\":{\"684\":1}}],[\"主从同步\",{\"1\":{\"682\":1}}],[\"主从同步延迟的解决办法\",{\"1\":{\"528\":1}}],[\"主从同步延迟的原因\",{\"1\":{\"528\":1}}],[\"主从同步延迟怎么处理\",{\"0\":{\"528\":1}}],[\"主从复制不要用图状结构\",{\"1\":{\"720\":1}}],[\"主从复制存在一个问题\",{\"1\":{\"687\":1}}],[\"主从复制存在哪些问题呢\",{\"0\":{\"686\":1}}],[\"主从复制虽好\",{\"1\":{\"686\":1}}],[\"主从复制连接正常通信后\",{\"1\":{\"684\":1}}],[\"主从复制还是哨兵和集群能够实施的\",{\"1\":{\"682\":1}}],[\"主从复制实现了数据的热备份\",{\"1\":{\"682\":1}}],[\"主从复制主要的作用\",{\"1\":{\"682\":1}}],[\"主从复制支持\",{\"1\":{\"682\":1}}],[\"主从复制\",{\"1\":{\"682\":1}}],[\"主从复制了解吗\",{\"0\":{\"682\":1}}],[\"主从复制原理了解吗\",{\"0\":{\"527\":1}}],[\"主从\",{\"1\":{\"681\":1}}],[\"主键值分别是\",{\"1\":{\"513\":1}}],[\"主键是默认的索引\",{\"1\":{\"495\":1}}],[\"主键索引\",{\"1\":{\"495\":1}}],[\"主键或者\",{\"1\":{\"493\":1}}],[\"主键必需\",{\"1\":{\"477\":1}}],[\"主键\",{\"1\":{\"469\":1}}],[\"主流的访问方式主要有使用句柄和直接指针两种\",{\"1\":{\"386\":1}}],[\"主线程通过countdownlatch\",{\"1\":{\"345\":1}}],[\"主线程必须在他们都完成确认后\",{\"1\":{\"345\":1}}],[\"主线程\",{\"1\":{\"315\":1}}],[\"主要原因是由于ribbon的懒加载机制\",{\"1\":{\"848\":1}}],[\"主要原因就是由于os使用pagecache机制对读写访问操作进行了性能优化\",{\"1\":{\"772\":1}}],[\"主要强调的是网络通信\",{\"1\":{\"845\":1}}],[\"主要通过这三个方面来实现\",{\"1\":{\"838\":1}}],[\"主要通过请求确认机制\",{\"1\":{\"754\":1}}],[\"主要流程可以分为这么几步\",{\"1\":{\"820\":1}}],[\"主要的过程\",{\"1\":{\"817\":1}}],[\"主要的方式有两种\",{\"1\":{\"757\":1}}],[\"主要具有如下特点\",{\"1\":{\"807\":1}}],[\"主要应用于处理一些具有横切性质的系统级服务\",{\"1\":{\"804\":1}}],[\"主要支持五种作用域\",{\"1\":{\"797\":1}}],[\"主要可以分为producer端发送消息时候的负载均衡和consumer端订阅消息的负载均衡\",{\"1\":{\"775\":1}}],[\"主要作为进程间以及同一进程内不同线程之间的同步手段\",{\"1\":{\"641\":1}}],[\"主要作用是提供资源的路径\",{\"1\":{\"557\":1}}],[\"主要作用包括\",{\"1\":{\"448\":1}}],[\"主要利用了虚拟内存的方式\",{\"1\":{\"629\":1}}],[\"主要指的是进程管理\",{\"1\":{\"629\":1}}],[\"主要形式有流量攻击和资源耗尽攻击\",{\"1\":{\"614\":1}}],[\"主要用于在主机与路由器之间传递控制信息\",{\"1\":{\"608\":1}}],[\"主要用来告诉发送方\",{\"1\":{\"594\":1}}],[\"主要目的就是为了提高网络的可扩展性\",{\"1\":{\"602\":1}}],[\"主要提供了检验和\",{\"1\":{\"581\":1}}],[\"主要工作流程\",{\"1\":{\"563\":1}}],[\"主要解决主机到主机的通信问题\",{\"1\":{\"542\":1}}],[\"主要解决了内存碎片过多的问题\",{\"1\":{\"405\":1}}],[\"主要从两个方面考虑\",{\"1\":{\"486\":1}}],[\"主要存储引擎以及功能如下\",{\"1\":{\"475\":1}}],[\"主要关注的是垃圾收集的吞吐量\",{\"1\":{\"401\":1}}],[\"主要关注的是两个要素\",{\"1\":{\"312\":1}}],[\"主要垃圾收集器如下\",{\"1\":{\"401\":1}}],[\"主要体现在方法区的实现\",{\"1\":{\"380\":1}}],[\"主要有业务端自己保证\",{\"1\":{\"757\":1}}],[\"主要有三种线程的实现⽅式\",{\"1\":{\"644\":1}}],[\"主要有\",{\"1\":{\"573\":1}}],[\"主要有这些特点\",{\"1\":{\"559\":1}}],[\"主要有两个办法\",{\"1\":{\"565\":1}}],[\"主要有两个方法\",{\"1\":{\"270\":1}}],[\"主要有两大变化\",{\"1\":{\"559\":1}}],[\"主要有什么区别\",{\"0\":{\"477\":1}}],[\"主要有以下3种情况\",{\"1\":{\"445\":1}}],[\"主要有以下操作步骤\",{\"1\":{\"418\":1}}],[\"主要有四种类加载器\",{\"1\":{\"423\":1}}],[\"主要有四种\",{\"1\":{\"360\":1}}],[\"主要代码如下\",{\"1\":{\"352\":1}}],[\"主要使用在哈希表中\",{\"1\":{\"272\":1}}],[\"主要是为了⽣成代理对象\",{\"1\":{\"801\":1}}],[\"主要是为了向下兼容\",{\"1\":{\"285\":1}}],[\"主要是检测主从之间网络套接字是否可用\",{\"1\":{\"684\":1}}],[\"主要是向特定的目的主机发送\",{\"1\":{\"609\":1}}],[\"主要是类型信息\",{\"1\":{\"381\":1}}],[\"主要是通过处理器的指令来保证操作的原⼦性的\",{\"1\":{\"334\":1}}],[\"主要是在哈希表这种结构中用的到\",{\"1\":{\"258\":1}}],[\"主要是偏理论的一些问题\",{\"1\":{\"227\":1}}],[\"主要分为3种\",{\"1\":{\"152\":1}}],[\"主题可以看做是你的信件要邮寄的地址\",{\"1\":{\"744\":1}}],[\"主题\",{\"0\":{\"930\":1},\"1\":{\"744\":1},\"2\":{\"139\":1,\"142\":1,\"149\":1,\"881\":1}}],[\"主方法所在类\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"主方法\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"变成了线性增⻓\",{\"1\":{\"587\":1}}],[\"变成无锁状态\",{\"1\":{\"328\":1}}],[\"变化的规则\",{\"1\":{\"585\":1}}],[\"变为\",{\"1\":{\"573\":1,\"582\":1}}],[\"变体等待队列拥有以下特性\",{\"1\":{\"331\":1}}],[\"变体的虚拟双向队列\",{\"1\":{\"331\":1}}],[\"变量不合理的作用域\",{\"1\":{\"389\":1}}],[\"变量\",{\"1\":{\"157\":1,\"250\":3,\"252\":1,\"322\":1,\"645\":1}}],[\"变量名称\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"变红\",{\"1\":{\"27\":1}}],[\"整形\",{\"1\":{\"531\":1}}],[\"整体系统的复杂性增加\",{\"1\":{\"829\":1}}],[\"整体对比如下\",{\"1\":{\"807\":1}}],[\"整体上总结一下会话运行\",{\"1\":{\"448\":1}}],[\"整体的流程上和使用\",{\"1\":{\"817\":1}}],[\"整体的吞吐效率高\",{\"1\":{\"332\":1}}],[\"整体的设计\",{\"1\":{\"176\":1}}],[\"整堆收集\",{\"1\":{\"397\":1}}],[\"整个选举的时间太长\",{\"1\":{\"770\":1}}],[\"整个\",{\"1\":{\"731\":1}}],[\"整个进程或者线程就被充分利用起来\",{\"1\":{\"672\":1}}],[\"整个过程都需要人工干预\",{\"1\":{\"686\":1}}],[\"整个过程只在进行select\",{\"1\":{\"672\":1}}],[\"整个过程如下\",{\"1\":{\"523\":1}}],[\"整个程序的执⾏仅限于程序中的某⼀部分\",{\"1\":{\"655\":1}}],[\"整个生命周期需要经过七个阶段\",{\"1\":{\"421\":1}}],[\"整个表达式的值才是\",{\"1\":{\"241\":1}}],[\"整个流程和hashmap非常类似\",{\"1\":{\"180\":1}}],[\"整数集合intset\",{\"1\":{\"729\":1}}],[\"整数集合\",{\"1\":{\"729\":1}}],[\"整数\",{\"1\":{\"258\":1,\"670\":1}}],[\"整数类型\",{\"1\":{\"238\":1}}],[\"整数int\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"整理算法实现\",{\"1\":{\"401\":1}}],[\"整理算法更加合适\",{\"1\":{\"395\":1}}],[\"整理算法主要用于老年代\",{\"1\":{\"395\":1}}],[\"整理算法\",{\"1\":{\"395\":1,\"401\":1}}],[\"整理\",{\"1\":{\"150\":1,\"186\":1,\"188\":1,\"227\":1,\"229\":1,\"294\":1,\"296\":1,\"373\":1,\"375\":1,\"395\":1,\"429\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"整型数据类型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"整型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"参考模型的的物理层\",{\"1\":{\"542\":1}}],[\"参考模型的的数据链路层\",{\"1\":{\"542\":1}}],[\"参考模型的的网络层\",{\"1\":{\"542\":1}}],[\"参考模型的的传输层\",{\"1\":{\"542\":1}}],[\"参考模型的数据链路层\",{\"1\":{\"542\":1}}],[\"参考模型的网络层\",{\"1\":{\"542\":1}}],[\"参考模型的\",{\"1\":{\"542\":2}}],[\"参考\",{\"1\":{\"345\":1,\"370\":1}}],[\"参考乐观锁的版本号\",{\"1\":{\"336\":1}}],[\"参考原则\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"参选者\",{\"1\":{\"219\":1}}],[\"参与者根据回滚日志中的信息执行撤销操作\",{\"1\":{\"874\":1}}],[\"参与者执行回滚操作\",{\"1\":{\"872\":1}}],[\"参与者执行最终的提交操作\",{\"1\":{\"872\":1}}],[\"参与者执行完操作之后返回ack响应\",{\"1\":{\"203\":1}}],[\"参与者接收到预提交请求后\",{\"1\":{\"872\":1}}],[\"参与者将分支事务id注册到本地事务管理器\",{\"1\":{\"872\":1}}],[\"参与者将操作成败通知协调者\",{\"1\":{\"202\":1}}],[\"参与者\",{\"1\":{\"221\":1}}],[\"参与者直接回到准备阶段之前\",{\"1\":{\"203\":1}}],[\"参与者如果可以提交就返回yes响应\",{\"1\":{\"203\":1}}],[\"参数来避免因为宕机丢消息\",{\"1\":{\"755\":1}}],[\"参数处理\",{\"1\":{\"448\":1}}],[\"参数处理器\",{\"1\":{\"448\":1}}],[\"参数设置\",{\"1\":{\"417\":1}}],[\"参数设置是否合理\",{\"1\":{\"417\":1}}],[\"参数设置问题\",{\"1\":{\"417\":1}}],[\"参数的值就是对该对象的引用\",{\"1\":{\"259\":1}}],[\"参数列表中参数的顺序\",{\"1\":{\"249\":1}}],[\"参数个数不同或者二者都不同\",{\"1\":{\"249\":1}}],[\"参数类型不同\",{\"1\":{\"249\":1}}],[\"参数\",{\"1\":{\"72\":1,\"272\":1,\"413\":2,\"715\":1}}],[\"布隆过滤器也有一些缺点\",{\"1\":{\"705\":1}}],[\"布隆过滤器里会保存数据是否存在\",{\"1\":{\"703\":1}}],[\"布隆过滤器\",{\"1\":{\"703\":1,\"705\":1}}],[\"布尔型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":1,\"879\":1}}],[\"布局\",{\"0\":{\"15\":1,\"16\":1,\"17\":1,\"18\":1}}],[\"数量越多的时候\",{\"1\":{\"664\":1}}],[\"数学和加密函数\",{\"1\":{\"472\":1}}],[\"数\",{\"1\":{\"412\":2}}],[\"数据转换与协议转换\",{\"1\":{\"863\":1}}],[\"数据格式|基于文本\",{\"1\":{\"845\":1}}],[\"数据存储\",{\"1\":{\"836\":1}}],[\"数据一致性和跨服务的事务管理变得更加复杂\",{\"1\":{\"829\":1}}],[\"数据一致性和事务管理\",{\"1\":{\"829\":1}}],[\"数据就行了\",{\"1\":{\"816\":1}}],[\"数据和视图\",{\"1\":{\"816\":1}}],[\"数据类型的转换\",{\"1\":{\"815\":1}}],[\"数据访问层\",{\"1\":{\"784\":1}}],[\"数据需要经历几次拷贝\",{\"1\":{\"773\":1}}],[\"数据\",{\"1\":{\"771\":1,\"784\":1}}],[\"数据尽可能一致\",{\"1\":{\"712\":1}}],[\"数据在其他节点的分布仍然较为均衡\",{\"1\":{\"695\":1}}],[\"数据分区是在集群创建的时候完成的\",{\"1\":{\"697\":1}}],[\"数据分区\",{\"1\":{\"691\":2}}],[\"数据分段\",{\"1\":{\"652\":1}}],[\"数据节点映射关\",{\"1\":{\"693\":1}}],[\"数据节点\",{\"1\":{\"687\":1}}],[\"数据时应用连接从节点\",{\"1\":{\"682\":1}}],[\"数据时应用连接主节点\",{\"1\":{\"682\":1}}],[\"数据冗余\",{\"1\":{\"682\":1}}],[\"数据安全性它会阻塞直到后台线程执行fsync操作完成\",{\"1\":{\"718\":1}}],[\"数据安全性\",{\"1\":{\"678\":1}}],[\"数据集大\",{\"1\":{\"677\":1}}],[\"数据会丢失\",{\"1\":{\"677\":1}}],[\"数据会恢复成事务开始之前的状态\",{\"1\":{\"482\":1}}],[\"数据读取和写入是用户空间到内核空间来回赋值\",{\"1\":{\"662\":1}}],[\"数据段\",{\"1\":{\"642\":1}}],[\"数据包\",{\"1\":{\"609\":1}}],[\"数据无法访问目标\",{\"1\":{\"608\":1}}],[\"数据报\",{\"1\":{\"602\":1}}],[\"数据报可以独立地在网络中进行转发\",{\"1\":{\"602\":1}}],[\"数据报分配一个标识符以及分段与组装的相关信息\",{\"1\":{\"602\":1}}],[\"数据报进行转发\",{\"1\":{\"602\":1}}],[\"数据报在传输过程中可能会经过不同的网络\",{\"1\":{\"602\":1}}],[\"数据报在传输过程中\",{\"1\":{\"602\":1}}],[\"数据报中携带源\",{\"1\":{\"602\":1}}],[\"数据没有丢\",{\"1\":{\"594\":1}}],[\"数据流\",{\"1\":{\"585\":1}}],[\"数据⻓度达到\",{\"1\":{\"584\":1}}],[\"数据体可以是文本或者二进制\",{\"1\":{\"558\":1}}],[\"数据链路层构建一个数据帧\",{\"1\":{\"609\":1}}],[\"数据链路层\",{\"1\":{\"542\":2}}],[\"数据的表示\",{\"1\":{\"542\":1}}],[\"数据的迁移\",{\"1\":{\"534\":1}}],[\"数据迁移\",{\"1\":{\"532\":1,\"534\":1}}],[\"数据写入久库的同时\",{\"1\":{\"532\":1}}],[\"数据写入\",{\"1\":{\"527\":1}}],[\"数据所处的状态要么是另一事务修改它之前的状态\",{\"1\":{\"519\":1}}],[\"数据不会被破坏\",{\"1\":{\"518\":1}}],[\"数据不一致\",{\"1\":{\"202\":1}}],[\"数据被其他事务改动了\",{\"1\":{\"515\":1}}],[\"数据形成了链表\",{\"1\":{\"504\":1}}],[\"数据列不允许重复\",{\"1\":{\"495\":2}}],[\"数据量是否太大\",{\"1\":{\"538\":1}}],[\"数据量比较少的表不适合加索引\",{\"1\":{\"499\":1}}],[\"数据量很少\",{\"1\":{\"493\":1}}],[\"数据量不大\",{\"1\":{\"476\":1,\"711\":1}}],[\"数据此时具有crash\",{\"1\":{\"482\":1}}],[\"数据除了要写入表中\",{\"1\":{\"481\":1}}],[\"数据是主索引的一部分\",{\"1\":{\"477\":1}}],[\"数据表中的每一列\",{\"1\":{\"460\":1}}],[\"数据处理层\",{\"1\":{\"449\":1}}],[\"数据连接创建\",{\"1\":{\"433\":1}}],[\"数据连接\",{\"1\":{\"389\":1}}],[\"数据来操作堆上的具体对象\",{\"1\":{\"386\":1}}],[\"数据统计啊\",{\"1\":{\"352\":1}}],[\"数据即使成功修改\",{\"1\":{\"336\":1}}],[\"数据库事务的提交和回滚是通过数据库自己的事务机制实现\",{\"1\":{\"808\":1}}],[\"数据库的所有\",{\"1\":{\"731\":1}}],[\"数据库发生更新\",{\"1\":{\"709\":1}}],[\"数据库订阅+消息队列保证key被删除\",{\"1\":{\"708\":1}}],[\"数据库又没有完成更新的时候\",{\"1\":{\"707\":1}}],[\"数据库表被切分后\",{\"1\":{\"534\":1}}],[\"数据库主机通过复制将数据同步到从机\",{\"1\":{\"525\":1}}],[\"数据库主机负责读写操作\",{\"1\":{\"525\":1}}],[\"数据库服务器搭建主从集群\",{\"1\":{\"525\":1}}],[\"数据库读写分离了解吗\",{\"0\":{\"525\":1}}],[\"数据库处于一个一致的状态\",{\"1\":{\"519\":1}}],[\"数据库中的行锁\",{\"1\":{\"515\":1}}],[\"数据库请求的信息\",{\"1\":{\"479\":1}}],[\"数据库架构\",{\"0\":{\"471\":1}}],[\"数据库会自动先给事务\",{\"1\":{\"514\":1}}],[\"数据库会话器\",{\"1\":{\"448\":2}}],[\"数据库会保证只有一个请求能够得到锁\",{\"1\":{\"196\":1}}],[\"数据库无关性支持好\",{\"1\":{\"434\":1}}],[\"数据库链接\",{\"1\":{\"359\":1}}],[\"数据库连接池的连接交给threadloca进行管理\",{\"1\":{\"309\":1}}],[\"数据库\",{\"0\":{\"538\":1},\"1\":{\"202\":1,\"620\":1}}],[\"数据库对字段作唯一性约束\",{\"1\":{\"196\":1}}],[\"数据复制方案设计等等因素\",{\"1\":{\"193\":1}}],[\"数据元素通过映射关系\",{\"1\":{\"161\":1}}],[\"数据结构中\",{\"1\":{\"731\":1}}],[\"数据结构与算法\",{\"1\":{\"622\":1}}],[\"数据结构是\",{\"1\":{\"477\":2}}],[\"数据结构\",{\"1\":{\"175\":1,\"307\":1}}],[\"数据结构示意图如下\",{\"1\":{\"161\":1}}],[\"数据结构不同\",{\"1\":{\"154\":1}}],[\"数据溢出等\",{\"1\":{\"641\":1}}],[\"数据溢出\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"数据传输结束之后\",{\"1\":{\"574\":1}}],[\"数据传输\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"数组或者将\",{\"1\":{\"283\":1}}],[\"数组下标越界等等\",{\"1\":{\"274\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"181\":1}}],[\"数组中key和hash一样就直接替换\",{\"1\":{\"180\":1}}],[\"数组大小\",{\"1\":{\"168\":1}}],[\"数组大小定位位置\",{\"1\":{\"168\":1}}],[\"数组大小>=64\",{\"1\":{\"161\":1}}],[\"数组长度\",{\"1\":{\"167\":1}}],[\"数组的初始大小才\",{\"1\":{\"167\":1}}],[\"数组的容量是在定义的时候确定的\",{\"1\":{\"155\":1}}],[\"数组可能长度100\",{\"1\":{\"156\":1}}],[\"数组\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"159\":1,\"175\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"238\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"385\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"731\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1,\"879\":1}}],[\"数值型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":1,\"879\":1}}],[\"数字越小\",{\"1\":{\"804\":1}}],[\"数字证书\",{\"1\":{\"563\":1}}],[\"数字的二进制位左移三位相当于乘以\",{\"1\":{\"244\":1}}],[\"数字分析法\",{\"1\":{\"170\":1}}],[\"数字\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"670\":1,\"879\":1}}],[\"分支事务注册\",{\"1\":{\"872\":1}}],[\"分组内其它消费者会接替挂掉的消费者继续消费\",{\"1\":{\"745\":1}}],[\"分值和成员\",{\"1\":{\"732\":1}}],[\"分值为3\",{\"1\":{\"732\":1}}],[\"分担服务器负载\",{\"1\":{\"682\":1}}],[\"分成一块一块的小内存\",{\"1\":{\"657\":1}}],[\"分⻚是把整个虚拟和物理内存空间切成⼀段段固定尺⼨的⼤⼩\",{\"1\":{\"653\":1}}],[\"分段机制下的虚拟地址由两部分组成\",{\"1\":{\"652\":1}}],[\"分段和重组\",{\"1\":{\"602\":1}}],[\"分段太大可能会导致单表依然存在性能问题\",{\"1\":{\"531\":1}}],[\"分段太小会导致切分后子表数量过多\",{\"1\":{\"531\":1}}],[\"分手就分手\",{\"1\":{\"574\":1}}],[\"分为动态代理和静态代理\",{\"1\":{\"785\":1}}],[\"分为长连接和短连接\",{\"1\":{\"560\":1}}],[\"分为强引用\",{\"1\":{\"392\":1}}],[\"分块传输编码\",{\"1\":{\"558\":1}}],[\"分页和分段有什么区别\",{\"0\":{\"656\":1}}],[\"分页然后返回\",{\"1\":{\"534\":1}}],[\"分页比较深的情况下\",{\"1\":{\"488\":1}}],[\"分页优化\",{\"0\":{\"488\":1}}],[\"分页插件的基本原理是使用mybatis提供的插件接口\",{\"1\":{\"454\":1}}],[\"分页插件的原理是什么\",{\"0\":{\"454\":1},\"1\":{\"454\":1}}],[\"分代年龄\",{\"1\":{\"385\":1}}],[\"分代年龄等信息\",{\"1\":{\"382\":1}}],[\"分配槽\",{\"1\":{\"697\":1}}],[\"分配给\",{\"1\":{\"695\":3}}],[\"分配的单位\",{\"1\":{\"642\":1}}],[\"分配新的缓存区时才需要同步锁定\",{\"1\":{\"384\":1}}],[\"分配重试的方式来保证更新操作的原子性\",{\"1\":{\"384\":1}}],[\"分配内存空间\",{\"1\":{\"319\":1}}],[\"分而治之\",{\"1\":{\"373\":1}}],[\"分而治之和工作窃取算法\",{\"1\":{\"373\":1}}],[\"分析死锁结果\",{\"1\":{\"516\":1}}],[\"分析死锁日志\",{\"1\":{\"516\":1}}],[\"分析器进行语法分析\",{\"1\":{\"473\":1}}],[\"分析会占比较大的内存\",{\"1\":{\"418\":1}}],[\"分析\",{\"1\":{\"415\":1,\"472\":1,\"516\":1}}],[\"分析线程池的问题\",{\"1\":{\"369\":1}}],[\"分析下面几行代码的原子性\",{\"1\":{\"318\":1}}],[\"分钟的时间介绍一下这份pdf手册\",{\"1\":{\"619\":1}}],[\"分钟\",{\"1\":{\"354\":1}}],[\"分别加到本层数据单元的首部\",{\"1\":{\"544\":1}}],[\"分别介绍下作用\",{\"0\":{\"479\":1}}],[\"分别为8字节的commitlog物理偏移量\",{\"1\":{\"771\":1}}],[\"分别为\",{\"1\":{\"305\":1}}],[\"分别为继承thread类\",{\"1\":{\"300\":1}}],[\"分别是原子更新基本类型\",{\"1\":{\"340\":1}}],[\"分别是\",{\"1\":{\"287\":1,\"584\":1,\"645\":1}}],[\"分别代表设置sql问号占位符参数和获取列查询结果\",{\"1\":{\"438\":1}}],[\"分别代表\",{\"1\":{\"285\":1}}],[\"分区\",{\"1\":{\"192\":1}}],[\"分区容错的前提下\",{\"1\":{\"191\":1}}],[\"分区容错性\",{\"1\":{\"190\":2,\"192\":1}}],[\"分区是必然存在的\",{\"1\":{\"191\":1}}],[\"分布式协调\",{\"1\":{\"836\":1}}],[\"分布式复制等特性\",{\"1\":{\"835\":1}}],[\"分布式追踪和监控\",{\"1\":{\"831\":1,\"832\":1}}],[\"分布式调用等功能\",{\"1\":{\"830\":1}}],[\"分布式系统的复杂性\",{\"1\":{\"829\":1}}],[\"分布式系统在遇到任何网络分区故障的时候\",{\"1\":{\"190\":1}}],[\"分布式架构\",{\"1\":{\"742\":1}}],[\"分布式批量操作会涉及多次网络时间\",{\"1\":{\"713\":1}}],[\"分布式集群的所有节点订阅删除本地缓存频道\",{\"1\":{\"709\":1}}],[\"分布式缓存基本就是采用redis\",{\"1\":{\"709\":1}}],[\"分布式的存储中\",{\"1\":{\"692\":1}}],[\"分布式面试题八股文\",{\"1\":{\"623\":1}}],[\"分布式等等\",{\"1\":{\"623\":1}}],[\"分布式环境下登录\",{\"1\":{\"669\":1}}],[\"分布式环境下\",{\"1\":{\"566\":2,\"669\":1}}],[\"分布式环境下就要用到分布式锁了\",{\"1\":{\"194\":1}}],[\"分布式\",{\"1\":{\"534\":1,\"620\":1,\"622\":1,\"624\":1}}],[\"分布式治理\",{\"1\":{\"227\":1}}],[\"分布式其实是个很大的类型\",{\"1\":{\"227\":1}}],[\"分布式限流\",{\"0\":{\"226\":1}}],[\"分布式设计\",{\"0\":{\"223\":1}}],[\"分布式一致性和容错性\",{\"1\":{\"829\":1}}],[\"分布式一致性问题\",{\"1\":{\"211\":1}}],[\"分布式一致性算法\",{\"0\":{\"209\":1}}],[\"分布式算法paxos了解么\",{\"0\":{\"210\":1}}],[\"分布式常见的实现方案有\",{\"1\":{\"201\":1}}],[\"分布式事务可以查看前面的分布式基础篇\",{\"1\":{\"869\":1}}],[\"分布式事务的处理\",{\"1\":{\"832\":1}}],[\"分布式事务有哪些常见的实现方案\",{\"0\":{\"201\":1}}],[\"分布式事务处理的关键是\",{\"1\":{\"200\":1}}],[\"分布式事务其实就是将对同一库事务的概念扩大到了对多个库的事务\",{\"1\":{\"200\":1}}],[\"分布式事务是相对本地事务而言的\",{\"1\":{\"200\":1}}],[\"分布式事务\",{\"0\":{\"199\":1,\"869\":1},\"1\":{\"831\":1,\"832\":1}}],[\"分布式锁\",{\"0\":{\"194\":1},\"1\":{\"192\":1,\"225\":1,\"669\":2,\"836\":1}}],[\"分布式数据库\",{\"1\":{\"192\":1,\"210\":1}}],[\"分布式理论\",{\"0\":{\"189\":1}}],[\"分布上成等差数列的漏洞\",{\"1\":{\"167\":1}}],[\"分类\",{\"0\":{\"890\":1},\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"分割垂直幻灯片\",{\"1\":{\"7\":1}}],[\"用不着再做部署工作了\",{\"1\":{\"819\":1}}],[\"用到此注解\",{\"1\":{\"784\":1}}],[\"用到的时候再装入主存\",{\"1\":{\"651\":1}}],[\"用新的配置文件启动\",{\"1\":{\"767\":1}}],[\"用起来高效简单\",{\"1\":{\"762\":1}}],[\"用设置好的时间戳作为score进行排序\",{\"1\":{\"723\":1}}],[\"用单向链表结构更稳定\",{\"1\":{\"720\":1}}],[\"用途\",{\"1\":{\"657\":1}}],[\"用作对另一方发送的\",{\"1\":{\"580\":1}}],[\"用自己的密钥对其进行对称解密\",{\"1\":{\"563\":1}}],[\"用自己之前保留的私钥对其进行非对称解密\",{\"1\":{\"563\":1}}],[\"用证书的公钥加密\",{\"1\":{\"563\":1}}],[\"用完了\",{\"1\":{\"727\":1}}],[\"用完后\",{\"1\":{\"451\":1}}],[\"用完立刻关闭statement对象\",{\"1\":{\"451\":1}}],[\"用result属性来映射非主键字段\",{\"1\":{\"437\":1}}],[\"用id属性来映射主键字段\",{\"1\":{\"437\":1}}],[\"用通俗的比喻\",{\"1\":{\"402\":1}}],[\"用submit\",{\"1\":{\"358\":1}}],[\"用调用者所在的线程来执行任务\",{\"1\":{\"355\":1}}],[\"用函数式编程方式在集合类上进行复杂操作的工具\",{\"1\":{\"291\":1}}],[\"用的时候再拆包组装\",{\"1\":{\"282\":1}}],[\"用的就是哈希取余法\",{\"1\":{\"258\":1}}],[\"用在方法内\",{\"1\":{\"275\":1}}],[\"用在方法上\",{\"1\":{\"275\":1}}],[\"用在接口上就可以理解为\",{\"1\":{\"224\":1}}],[\"用在接口上\",{\"1\":{\"224\":1}}],[\"用\",{\"1\":{\"251\":1,\"413\":1,\"464\":1,\"467\":2,\"469\":1,\"537\":1,\"558\":1,\"600\":1,\"806\":1,\"807\":1}}],[\"用一张独立的表来记录路由信息\",{\"1\":{\"531\":1}}],[\"用一个不太贴切的比喻\",{\"1\":{\"393\":1}}],[\"用一个有味道的比喻\",{\"1\":{\"387\":1}}],[\"用一个通俗的比喻\",{\"1\":{\"353\":1}}],[\"用一个比喻\",{\"1\":{\"247\":1,\"551\":1,\"583\":1}}],[\"用一句口诀就是\",{\"1\":{\"245\":1}}],[\"用最有效率的方法计算\",{\"0\":{\"244\":1}}],[\"用术语\",{\"1\":{\"221\":1}}],[\"用数据库实现分布式锁比较简单\",{\"1\":{\"196\":1}}],[\"用户提交了一个订单\",{\"1\":{\"763\":1}}],[\"用户应用就会启动消费过程\",{\"1\":{\"751\":1}}],[\"用户排序\",{\"1\":{\"670\":1}}],[\"用户点赞统计\",{\"1\":{\"670\":1}}],[\"用户登录成功之后\",{\"1\":{\"669\":1}}],[\"用户登陆银行\",{\"1\":{\"613\":1}}],[\"用户态的执行系统负责进程内部线程在非阻塞时的切换\",{\"1\":{\"644\":1}}],[\"用户态和内核态是如何切换的\",{\"0\":{\"633\":1}}],[\"用户终止进程执行信号\",{\"1\":{\"641\":1}}],[\"用户从终端注销\",{\"1\":{\"641\":1}}],[\"用户浏览器接收到响应后解析执行\",{\"1\":{\"615\":1}}],[\"用户打开带有恶意代码的\",{\"1\":{\"615\":1}}],[\"用户的浏览器去执行一些这个网页中原本不存在的前端代码\",{\"1\":{\"615\":1}}],[\"用户的合法操作\",{\"1\":{\"613\":1}}],[\"用户的介绍\",{\"1\":{\"528\":1}}],[\"用户在银行网站保持登陆的情况下\",{\"1\":{\"613\":1}}],[\"用户在填写某些form表单时\",{\"1\":{\"224\":1}}],[\"用户\",{\"1\":{\"613\":1}}],[\"用户第一次请求服务器时\",{\"1\":{\"566\":1}}],[\"用户金钱损失\",{\"1\":{\"562\":1}}],[\"用户账号被盗\",{\"1\":{\"562\":1}}],[\"用户不可见\",{\"1\":{\"477\":1}}],[\"用户地址还可以拆分成国家\",{\"1\":{\"460\":1}}],[\"用户通过继承\",{\"1\":{\"423\":1}}],[\"用户自定义类加载器\",{\"1\":{\"423\":1}}],[\"用户程序执行时并非在代码指令流的任意位置都能够在停顿下来开始垃圾收集\",{\"1\":{\"402\":1}}],[\"用户创建初始的latch数量\",{\"1\":{\"345\":1}}],[\"用户名\",{\"1\":{\"309\":1}}],[\"用户线程依然在运行\",{\"1\":{\"405\":1}}],[\"用户线程\",{\"1\":{\"305\":1}}],[\"用户访问的时候当桶中有令牌时就可以访问\",{\"1\":{\"227\":1}}],[\"用户访问了n1\",{\"1\":{\"191\":1}}],[\"用户再次访问\",{\"1\":{\"191\":1}}],[\"用来完成配置文件中配置的加载\",{\"1\":{\"788\":1}}],[\"用来库存产品\",{\"1\":{\"788\":1}}],[\"用来提升i\",{\"1\":{\"773\":1}}],[\"用来存储消息的索引\",{\"1\":{\"749\":1}}],[\"用来存储局部变量表\",{\"1\":{\"379\":1}}],[\"用来定义网络设备的位置\",{\"1\":{\"607\":1}}],[\"用来解决\",{\"1\":{\"548\":1}}],[\"用来解决空指针异常的问题\",{\"1\":{\"291\":1}}],[\"用来加载\",{\"1\":{\"423\":1}}],[\"用来创建线程对象\",{\"1\":{\"353\":1}}],[\"用来标识每一个网络上的设备\",{\"1\":{\"604\":1}}],[\"用来标识每次遍历的元素对象名称\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"用来标记线程是\",{\"1\":{\"331\":1}}],[\"用来标记该线程是获取共享资源时被阻挂起后放入aqs\",{\"1\":{\"331\":1}}],[\"用来保存objectwaiter\",{\"1\":{\"325\":1}}],[\"用来保证代码的原子性\",{\"1\":{\"324\":1}}],[\"用来做用户信息上下文的存储\",{\"1\":{\"309\":1}}],[\"用来做数组下标访问\",{\"1\":{\"167\":1}}],[\"用于管理和协调分布式事务的各个阶段\",{\"1\":{\"870\":1}}],[\"用于集中管理\",{\"1\":{\"863\":1}}],[\"用于集中管理微服务的配置信息\",{\"1\":{\"832\":1}}],[\"用于在系统资源紧张或服务故障时保证核心功能的可用性\",{\"1\":{\"856\":1}}],[\"用于在不同的微服务之间进行通信和协作\",{\"1\":{\"832\":1}}],[\"用于保护系统免受服务故障或异常的影响\",{\"1\":{\"855\":1}}],[\"用于保存\",{\"1\":{\"800\":1}}],[\"用于保存实例化完成的\",{\"1\":{\"800\":1}}],[\"用于保存实例化\",{\"1\":{\"800\":1}}],[\"用于构建面向服务的微服务架构\",{\"1\":{\"846\":1}}],[\"用于简化http\",{\"1\":{\"846\":1}}],[\"用于跟踪和监控微服务的请求流程和性能指标\",{\"1\":{\"832\":1}}],[\"用于防止微服务过载\",{\"1\":{\"832\":1}}],[\"用于防止微服务之间的故障扩散\",{\"1\":{\"832\":1}}],[\"用于服务的注册与发现\",{\"1\":{\"832\":1}}],[\"用于后面的排除\",{\"1\":{\"820\":1}}],[\"用于接收路径参数\",{\"1\":{\"784\":1}}],[\"用于映射\",{\"1\":{\"784\":1}}],[\"用于加速对文件的读写\",{\"1\":{\"772\":1}}],[\"用于为用户提供额外的灵活性\",{\"1\":{\"744\":1}}],[\"用于标识需要进行限流的请求\",{\"1\":{\"859\":1}}],[\"用于标识前置节点和后置节点\",{\"1\":{\"183\":1}}],[\"用于标记压缩列表的末端\",{\"1\":{\"733\":1}}],[\"用于从表头向表尾方向访问节点\",{\"1\":{\"732\":1}}],[\"用于主节点出现宕机时从节点提供故障转移支持\",{\"1\":{\"683\":1}}],[\"用于容灾恢复\",{\"1\":{\"677\":1}}],[\"用于不同主机进程间的通信\",{\"1\":{\"641\":1}}],[\"用于测试网络连接量的程序\",{\"1\":{\"609\":1}}],[\"用于传输出错报告控制信息\",{\"1\":{\"608\":1}}],[\"用于优化数据查询\",{\"1\":{\"510\":1}}],[\"用于组合搜索\",{\"1\":{\"495\":1}}],[\"用于非唯一索引\",{\"1\":{\"493\":1}}],[\"用于存储和索引大量的日志数据\",{\"1\":{\"877\":1}}],[\"用于存储大字符串\",{\"1\":{\"462\":1}}],[\"用于存储二进制数据\",{\"1\":{\"462\":1}}],[\"用于存储已被虚拟机加载的类型信息\",{\"1\":{\"379\":1}}],[\"用于表示在迭代过程中\",{\"1\":{\"445\":1}}],[\"用于运行用户代码的时间和总消耗时间的比值\",{\"1\":{\"401\":1}}],[\"用于并发执行大量短期的小任务\",{\"1\":{\"364\":1}}],[\"用于提交不需要返回值的任务\",{\"1\":{\"357\":1}}],[\"用于返回当前运行时对象的\",{\"1\":{\"272\":1}}],[\"用于返回对象的哈希码\",{\"1\":{\"272\":1}}],[\"用于创建并返回当前对象的一份拷贝\",{\"1\":{\"272\":1}}],[\"用于比较\",{\"1\":{\"272\":1}}],[\"用于修饰变量\",{\"1\":{\"256\":1}}],[\"用于这种表达式\",{\"1\":{\"245\":1}}],[\"用于投票表决\",{\"1\":{\"213\":1}}],[\"用于分支事务上的资源管理\",{\"1\":{\"208\":1}}],[\"用于开启\",{\"1\":{\"208\":1}}],[\"用于全局性事务的提交和回滚\",{\"1\":{\"208\":1}}],[\"用于\",{\"1\":{\"184\":1}}],[\"用于枚举定义\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"用于异常处理\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"字典结构内部包含\",{\"1\":{\"731\":1}}],[\"字典结构是什么样的呢\",{\"1\":{\"731\":1}}],[\"字典是怎么扩容的\",{\"1\":{\"731\":1}}],[\"字典是\",{\"1\":{\"731\":1}}],[\"字典是如何实现的\",{\"0\":{\"731\":1}}],[\"字典dict\",{\"1\":{\"729\":1}}],[\"字典\",{\"1\":{\"729\":1}}],[\"字段记录了该\",{\"1\":{\"613\":1}}],[\"字段指定为keep\",{\"1\":{\"560\":1}}],[\"字段上创建索引\",{\"1\":{\"497\":1}}],[\"字段名\",{\"1\":{\"493\":1}}],[\"字段\",{\"1\":{\"340\":1,\"556\":1,\"613\":1}}],[\"字节继续放到缓冲队列\",{\"1\":{\"582\":1}}],[\"字节到达\",{\"1\":{\"582\":1}}],[\"字节过来\",{\"1\":{\"582\":2}}],[\"字节返回给发送方\",{\"1\":{\"582\":1}}],[\"字节的主键\",{\"1\":{\"477\":1}}],[\"字节单位\",{\"1\":{\"418\":1}}],[\"字节\",{\"1\":{\"238\":1,\"463\":2,\"483\":1,\"502\":3,\"580\":2,\"582\":4,\"587\":1,\"600\":1}}],[\"字节码转换到类的实例\",{\"1\":{\"428\":1}}],[\"字节码文件\",{\"1\":{\"377\":1}}],[\"字节码能够被虚拟机识别\",{\"1\":{\"235\":1}}],[\"字节码\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"235\":2,\"428\":2,\"879\":1}}],[\"字符数更多\",{\"1\":{\"554\":1}}],[\"字符串在涉及增加或者清除操作时会改变底层数组的大小造成重新分配\",{\"1\":{\"730\":1}}],[\"字符串操作中的溢出情况\",{\"1\":{\"730\":1}}],[\"字符串主要有以下几个典型使用场景\",{\"1\":{\"670\":1}}],[\"字符串类型的值实际可以是字符串\",{\"1\":{\"670\":1}}],[\"字符串最基础的数据结构\",{\"1\":{\"670\":1}}],[\"字符串替换\",{\"1\":{\"439\":1}}],[\"字符串拼接是如何实现的\",{\"0\":{\"266\":1}}],[\"字符串常量池中的实例\",{\"1\":{\"265\":1}}],[\"字符串对象实例\",{\"1\":{\"265\":1}}],[\"字符串\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"668\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"729\":1,\"730\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"字符型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":1,\"879\":1}}],[\"字\",{\"1\":{\"150\":1,\"188\":1,\"431\":1,\"580\":1}}],[\"字母开头\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"字母\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"文章\",{\"0\":{\"894\":1}}],[\"文章列表\",{\"1\":{\"670\":1}}],[\"文档\",{\"1\":{\"557\":1}}],[\"文档注释\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"文析结果中查找存在大量的对象\",{\"1\":{\"418\":1}}],[\"文件配置\",{\"1\":{\"819\":1}}],[\"文件名filename是以创建时的时间戳命名的\",{\"1\":{\"771\":1}}],[\"文件名长度为20位\",{\"1\":{\"771\":1}}],[\"文件刷盘的方式一般采用每秒一次\",{\"1\":{\"718\":1}}],[\"文件的内容和增量的\",{\"1\":{\"680\":1}}],[\"文件保存的数据集要完整\",{\"1\":{\"678\":1}}],[\"文件保存的数据集要比\",{\"1\":{\"678\":1}}],[\"文件来恢复原始的数据\",{\"1\":{\"678\":1}}],[\"文件大小为1g=1073741824\",{\"1\":{\"771\":1}}],[\"文件大\",{\"1\":{\"677\":1}}],[\"文件比\",{\"1\":{\"677\":1}}],[\"文件中一次\",{\"1\":{\"677\":1}}],[\"文件中配置了操作数据库的\",{\"1\":{\"448\":1}}],[\"文件重写\",{\"1\":{\"676\":1}}],[\"文件同步\",{\"1\":{\"676\":1}}],[\"文件还是存在\",{\"1\":{\"660\":1}}],[\"文件传输\",{\"1\":{\"597\":1}}],[\"文件编译成\",{\"1\":{\"428\":1}}],[\"文件编译成平台无关的\",{\"1\":{\"377\":1}}],[\"文件较大的话\",{\"1\":{\"418\":1}}],[\"文件分析\",{\"1\":{\"418\":1}}],[\"文件进行离线分析\",{\"1\":{\"415\":1}}],[\"文件进行分析\",{\"1\":{\"413\":1}}],[\"文件太大\",{\"1\":{\"413\":1}}],[\"文件里面不会有\",{\"1\":{\"287\":1}}],[\"文件\",{\"0\":{\"659\":1},\"1\":{\"235\":1,\"236\":1,\"287\":3,\"289\":1,\"413\":1,\"418\":4,\"429\":1,\"720\":1,\"784\":1,\"807\":1}}],[\"文字编码转换\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"文字并包含\",{\"1\":{\"10\":1}}],[\"多实例部署\",{\"1\":{\"838\":1}}],[\"多得多\",{\"1\":{\"806\":1}}],[\"多增加\",{\"1\":{\"730\":1}}],[\"多级缓存\",{\"1\":{\"704\":1}}],[\"多级页表知道吗\",{\"0\":{\"654\":1}}],[\"多路复⽤好⽐\",{\"1\":{\"663\":1}}],[\"多路复用器轮询到连接有\",{\"1\":{\"280\":1}}],[\"多页\",{\"1\":{\"620\":1}}],[\"多播\",{\"1\":{\"597\":1}}],[\"多版本并发控制\",{\"1\":{\"519\":1}}],[\"多列值组成一个索引\",{\"1\":{\"495\":1}}],[\"多张表\",{\"1\":{\"490\":1}}],[\"多对多怎么实现呢\",{\"1\":{\"441\":1}}],[\"多对一的关联查询\",{\"1\":{\"441\":1}}],[\"多次io\",{\"1\":{\"712\":1}}],[\"多次创建和销毁是对资源的浪费\",{\"1\":{\"435\":1}}],[\"多次发出同一个请求\",{\"1\":{\"224\":1}}],[\"多表关联关系配置复杂\",{\"1\":{\"434\":1}}],[\"多表关联关系配置简单\",{\"1\":{\"434\":1}}],[\"多少有点瓜皮\",{\"1\":{\"309\":1}}],[\"多了\",{\"1\":{\"272\":1}}],[\"多个实例形成集群\",{\"1\":{\"836\":1}}],[\"多个切面的情况下\",{\"1\":{\"804\":1}}],[\"多个模块\",{\"1\":{\"783\":1}}],[\"多个topic的消息实体内容都存储于一个commitlog中\",{\"1\":{\"771\":1}}],[\"多个消费者订阅\",{\"1\":{\"744\":1}}],[\"多个生产者向其发送消息\",{\"1\":{\"744\":1}}],[\"多个节点可以包含相同的分值\",{\"1\":{\"729\":1}}],[\"多个依赖等\",{\"1\":{\"712\":1}}],[\"多个任务都会被处理\",{\"1\":{\"635\":1}}],[\"多个字符\",{\"1\":{\"554\":1}}],[\"多个事务并发访问时\",{\"1\":{\"518\":1}}],[\"多个线程操作这个变量的时候\",{\"1\":{\"308\":1}}],[\"多个线程共用进程的堆和方法区资源\",{\"1\":{\"299\":1}}],[\"多个类都是从如下\",{\"1\":{\"278\":1}}],[\"多个类\",{\"1\":{\"278\":1}}],[\"多个⼦类对同⼀⽅法的重写\",{\"1\":{\"248\":1}}],[\"多个动画片段\",{\"0\":{\"27\":1}}],[\"多态\",{\"1\":{\"232\":1,\"248\":1}}],[\"多线程\",{\"1\":{\"623\":1}}],[\"多线程运行\",{\"1\":{\"403\":1}}],[\"多线程面试高频题\",{\"1\":{\"296\":1}}],[\"多线程调度\",{\"1\":{\"272\":1}}],[\"多线程同时执行\",{\"1\":{\"177\":1}}],[\"多线程的\",{\"1\":{\"177\":1}}],[\"多线程下扩容死循环\",{\"1\":{\"177\":1}}],[\"多线程下会有什么问题\",{\"0\":{\"177\":1}}],[\"多线程环境下会产生环\",{\"1\":{\"175\":1}}],[\"多数情况下\",{\"1\":{\"154\":1}}],[\"多行注释\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"注⼊属性时发现依赖\",{\"1\":{\"800\":1}}],[\"注⼊属性时\",{\"1\":{\"800\":1}}],[\"注册配置信息\",{\"1\":{\"842\":1}}],[\"注册到相应的\",{\"1\":{\"792\":1}}],[\"注册器\",{\"1\":{\"788\":1}}],[\"注册单例bean\",{\"1\":{\"788\":1}}],[\"注册中心能够监测和检测服务的状态\",{\"1\":{\"834\":1}}],[\"注册中心可以对同一服务的多个实例进行负载均衡\",{\"1\":{\"834\":1}}],[\"注册中心是用来管理和维护分布式系统中各个服务的地址和元数据的组件\",{\"1\":{\"834\":1}}],[\"注册中心是用来干什么的\",{\"0\":{\"834\":1}}],[\"注册中心\",{\"0\":{\"833\":1},\"1\":{\"769\":1,\"832\":1}}],[\"注册等操作加分布式锁\",{\"1\":{\"669\":1}}],[\"注册\",{\"1\":{\"528\":1,\"748\":1,\"791\":2}}],[\"注册账号完成后\",{\"1\":{\"528\":1}}],[\"注册分支事务\",{\"1\":{\"208\":3}}],[\"注入改为使用注解注入的方式\",{\"1\":{\"819\":1}}],[\"注入的循环依赖了\",{\"1\":{\"800\":1}}],[\"注入的形式获取\",{\"1\":{\"795\":1}}],[\"注入就发生在第二步\",{\"1\":{\"800\":1}}],[\"注入同时存在的时候\",{\"1\":{\"799\":1}}],[\"注入呢\",{\"1\":{\"799\":1}}],[\"注入对象的\",{\"1\":{\"795\":1}}],[\"注入对象\",{\"1\":{\"795\":2}}],[\"注入\",{\"1\":{\"439\":1,\"800\":1}}],[\"注解失效场景\",{\"1\":{\"813\":1}}],[\"注解属性\",{\"1\":{\"813\":2}}],[\"注解应用在非\",{\"1\":{\"813\":1}}],[\"注解及其属性值\",{\"1\":{\"812\":1}}],[\"注解为切点\",{\"1\":{\"805\":1}}],[\"注解的事务配置信息\",{\"1\":{\"813\":1}}],[\"注解的方式\",{\"1\":{\"809\":1}}],[\"注解的属性和方法\",{\"1\":{\"802\":1}}],[\"注解的解析\",{\"1\":{\"802\":1}}],[\"注解方式应该是我们用的最多的一种方式了\",{\"1\":{\"794\":1}}],[\"注解方式\",{\"1\":{\"794\":2}}],[\"注解开启\",{\"1\":{\"784\":1}}],[\"注解在方法上\",{\"1\":{\"784\":1}}],[\"注解在类上\",{\"1\":{\"784\":2}}],[\"注解这里就有两个作用\",{\"1\":{\"289\":1}}],[\"注解生命周期有三大类\",{\"1\":{\"287\":1}}],[\"注解可以标记在类上\",{\"1\":{\"287\":1}}],[\"注解本质上是一个标记\",{\"1\":{\"287\":1}}],[\"注解\",{\"0\":{\"286\":1},\"1\":{\"289\":1,\"292\":1,\"784\":4,\"802\":1}}],[\"注解手动指定一个标识\",{\"1\":{\"86\":1}}],[\"注意最左匹配原则\",{\"1\":{\"489\":1}}],[\"注意我在这里把范型去掉了\",{\"1\":{\"285\":1}}],[\"注意vn的值就是收到的响应中编号最大的提案的值\",{\"1\":{\"216\":1}}],[\"注意这里说叶子节点其实是图中的\",{\"1\":{\"162\":1}}],[\"注意\",{\"1\":{\"154\":1,\"157\":1,\"241\":1,\"250\":2,\"272\":1,\"285\":1,\"412\":1,\"418\":1,\"440\":1,\"483\":1,\"509\":1,\"513\":1,\"580\":1,\"663\":2}}],[\"注释\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"输出操作的完成\",{\"1\":{\"637\":1}}],[\"输出设备的统一管理\",{\"1\":{\"629\":1}}],[\"输出每个类的对象数量\",{\"1\":{\"418\":1}}],[\"输出\",{\"1\":{\"418\":1}}],[\"输出流中\",{\"1\":{\"817\":1}}],[\"输出流主要包括了如下4种具体实现\",{\"1\":{\"306\":1}}],[\"输出流不同之处在于\",{\"1\":{\"306\":1}}],[\"输出流或者网络输入\",{\"1\":{\"306\":1}}],[\"输出流和普通的文件输入\",{\"1\":{\"306\":1}}],[\"输出流\",{\"1\":{\"306\":1}}],[\"输出的值就是线程栈信息中的\",{\"1\":{\"418\":1}}],[\"输出的新特性\",{\"1\":{\"280\":1}}],[\"输出的是\",{\"1\":{\"245\":1}}],[\"输出不换行\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"输出换行\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"一阶段\",{\"1\":{\"871\":1}}],[\"一些云厂商也提供了付费方案\",{\"1\":{\"877\":1}}],[\"一些rpc框架比如grpc\",{\"1\":{\"845\":1}}],[\"一些服务治理功能依赖于第三方组件实现\",{\"1\":{\"830\":1}}],[\"一些常见的参数配置\",{\"1\":{\"412\":1}}],[\"一起使用\",{\"1\":{\"784\":1}}],[\"一起转交给\",{\"1\":{\"609\":1}}],[\"一共有四个部分组成\",{\"1\":{\"746\":1}}],[\"一份消息数据是否可以被多次消费\",{\"1\":{\"743\":1}}],[\"一种是在\",{\"1\":{\"762\":1}}],[\"一种方式是在数据库不命中之后\",{\"1\":{\"703\":1}}],[\"一种办法是显式定义用户相关的参数\",{\"1\":{\"309\":1}}],[\"一举解决高可用和分布式问题\",{\"1\":{\"691\":1}}],[\"一方面\",{\"1\":{\"691\":1}}],[\"一方接收\",{\"1\":{\"641\":1}}],[\"一方发声\",{\"1\":{\"641\":1}}],[\"一切能引起拒绝\",{\"1\":{\"614\":1}}],[\"一台服务器要同时容纳十几万的并发连接\",{\"1\":{\"598\":1}}],[\"一部分是内容体\",{\"1\":{\"595\":1}}],[\"一部分是头部\",{\"1\":{\"595\":1}}],[\"一部分空间没有使用\",{\"1\":{\"395\":1}}],[\"一开始不要发送大量的数据\",{\"1\":{\"586\":1}}],[\"一主多从结构\",{\"1\":{\"683\":2}}],[\"一主多从\",{\"1\":{\"683\":1}}],[\"一主多从都可以\",{\"1\":{\"525\":1}}],[\"一主一从结构是最简单的复制拓扑结构\",{\"1\":{\"683\":1}}],[\"一主一从结构\",{\"1\":{\"683\":1}}],[\"一主一从\",{\"1\":{\"525\":1,\"683\":1}}],[\"一张表格总结常见网络协议\",{\"1\":{\"543\":1}}],[\"一张\",{\"1\":{\"502\":1}}],[\"一张图说明\",{\"1\":{\"255\":1}}],[\"一页\",{\"1\":{\"502\":1}}],[\"一边写一边后移\",{\"1\":{\"483\":1}}],[\"一条消息被consumer\",{\"1\":{\"744\":1}}],[\"一条消息可以没有\",{\"1\":{\"744\":1}}],[\"一条消息必须有一个\",{\"1\":{\"744\":1}}],[\"一条消息必须有一个主题\",{\"1\":{\"744\":1}}],[\"一条消息也可以拥有一个可选的标签\",{\"1\":{\"744\":1}}],[\"一条更新语句怎么执行的了解吗\",{\"0\":{\"481\":1}}],[\"一条\",{\"0\":{\"470\":1,\"473\":1}}],[\"一级缓存\",{\"1\":{\"446\":1,\"800\":1}}],[\"一对多的关系\",{\"1\":{\"441\":1}}],[\"一对多的关联查询\",{\"1\":{\"441\":1}}],[\"一对多的关联查询吗\",{\"0\":{\"441\":1}}],[\"一对多<collection>\",{\"1\":{\"441\":1}}],[\"一对一结果映射\",{\"1\":{\"441\":1}}],[\"一对一<association>\",{\"1\":{\"441\":1}}],[\"一\",{\"0\":{\"376\":1},\"1\":{\"761\":1}}],[\"一句话概括\",{\"1\":{\"341\":1,\"782\":1}}],[\"一直等到up更新\",{\"1\":{\"663\":1}}],[\"一直不成功\",{\"1\":{\"337\":1}}],[\"一直找到\",{\"1\":{\"313\":1}}],[\"一次是从内存中访问页表\",{\"1\":{\"653\":1}}],[\"一次\",{\"1\":{\"580\":1}}],[\"一次磁盘加载的关键字更多\",{\"1\":{\"504\":1}}],[\"一次只能被一个线程拥有\",{\"1\":{\"326\":1}}],[\"一次编译后\",{\"1\":{\"234\":1}}],[\"一次编写\",{\"1\":{\"232\":1}}],[\"一是发信者\",{\"1\":{\"747\":1}}],[\"一是完成从javatype至jdbctype的转换\",{\"1\":{\"438\":1}}],[\"一是标记\",{\"1\":{\"289\":1}}],[\"一是\",{\"1\":{\"275\":1,\"481\":1}}],[\"一样使用一堆繁琐的\",{\"1\":{\"819\":1}}],[\"一样的道理\",{\"1\":{\"496\":1}}],[\"一样的效果\",{\"1\":{\"168\":1}}],[\"一样在本地内存中实现的元空间\",{\"1\":{\"381\":1}}],[\"一样\",{\"1\":{\"272\":1,\"358\":1}}],[\"一定吊打面试官\",{\"1\":{\"227\":1,\"373\":1,\"429\":1}}],[\"一定要理解清楚\",{\"1\":{\"701\":1}}],[\"一定要熟悉到问到即送分\",{\"1\":{\"568\":1}}],[\"一定要彻底拿下\",{\"1\":{\"494\":1}}],[\"一定要使用\",{\"1\":{\"492\":1}}],[\"一定要记得使用\",{\"1\":{\"389\":1}}],[\"一定要拿下\",{\"1\":{\"307\":1}}],[\"一定要好好准备\",{\"1\":{\"160\":1}}],[\"一定要定义在类中\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"一段时间未收到\",{\"1\":{\"222\":1}}],[\"一旦主节点出现故障\",{\"1\":{\"686\":1}}],[\"一旦创建了\",{\"1\":{\"435\":1}}],[\"一旦类加载动作完成的时候\",{\"1\":{\"402\":1}}],[\"一旦选定后就跟随其操作\",{\"1\":{\"219\":1}}],[\"一旦分区发生\",{\"1\":{\"192\":1}}],[\"一致的话就行\",{\"1\":{\"282\":1}}],[\"一致\",{\"1\":{\"203\":1,\"389\":1}}],[\"一致性和通知机制等特性\",{\"1\":{\"841\":1}}],[\"一致性和分区容忍性\",{\"1\":{\"836\":1}}],[\"一致性和可用性是矛盾的\",{\"1\":{\"191\":1}}],[\"一致性哈希分区的基础上\",{\"1\":{\"695\":1}}],[\"一致性哈希分区\",{\"0\":{\"694\":1}}],[\"一致性是\",{\"1\":{\"519\":1}}],[\"一致性算法\",{\"1\":{\"219\":1}}],[\"一致性无法保证\",{\"1\":{\"191\":1}}],[\"一致性\",{\"1\":{\"190\":2,\"219\":1,\"518\":1,\"519\":2,\"835\":1}}],[\"一般可能会存在这样的演进方向\",{\"1\":{\"828\":1}}],[\"一般可以这么认为\",{\"1\":{\"603\":1}}],[\"一般指的是多个事务方法相互调用时\",{\"1\":{\"811\":1}}],[\"一般将\",{\"1\":{\"784\":1}}],[\"一般采用cosumer端过滤\",{\"1\":{\"762\":1}}],[\"一般每一部分都是集群部署的\",{\"1\":{\"746\":1}}],[\"一般用于可能链路耗时较长而对响应时间敏感的业务场景\",{\"1\":{\"750\":1}}],[\"一般用于重要通知消息\",{\"1\":{\"750\":1}}],[\"一般用于初次复制场景\",{\"1\":{\"685\":1}}],[\"一般用来实现进程间的同步\",{\"1\":{\"641\":1}}],[\"一般时间很短\",{\"1\":{\"676\":1}}],[\"一般返回的内容不会超过\",{\"1\":{\"600\":1}}],[\"一般都会分开发送\",{\"1\":{\"575\":1}}],[\"一般有如下几个织入的时机\",{\"1\":{\"807\":1}}],[\"一般有\",{\"1\":{\"804\":1}}],[\"一般有两种办法\",{\"1\":{\"758\":1}}],[\"一般有两种方式\",{\"1\":{\"526\":1}}],[\"一般有以下几种方式\",{\"1\":{\"722\":1}}],[\"一般有效时间较短\",{\"1\":{\"566\":1}}],[\"一般有三种\",{\"1\":{\"542\":1}}],[\"一般建议分段大小在\",{\"1\":{\"531\":1}}],[\"一般的异步队列的实现还是交给专业的消息队列\",{\"1\":{\"722\":1}}],[\"一般的处理办法是通知用户让其重新操作\",{\"1\":{\"515\":1}}],[\"一般的经验\",{\"1\":{\"359\":1}}],[\"一般通过\",{\"1\":{\"496\":1}}],[\"一般查询日志记录了所有对\",{\"1\":{\"479\":1}}],[\"一般查询日志\",{\"1\":{\"479\":1}}],[\"一般为1024\",{\"1\":{\"664\":1}}],[\"一般为\",{\"1\":{\"477\":1}}],[\"一般互联网公司的设计都是反范式的\",{\"1\":{\"460\":1}}],[\"一般说的mybatis生命周期就是这些组件的生命周期\",{\"1\":{\"435\":1}}],[\"一般在系统中\",{\"1\":{\"428\":1}}],[\"一般来说客户端和服务端的交互分为两种\",{\"1\":{\"843\":1}}],[\"一般来说\",{\"1\":{\"423\":1,\"587\":1,\"591\":1,\"609\":1,\"678\":1,\"732\":1,\"772\":1}}],[\"一般会有\",{\"1\":{\"560\":1}}],[\"一般会控制在方法级\",{\"1\":{\"435\":1}}],[\"一般会立即停止\",{\"1\":{\"358\":1}}],[\"一般会使用\",{\"1\":{\"283\":1}}],[\"一般不会动\",{\"1\":{\"353\":1}}],[\"一般我们用的都是它的实现类defaultsqlsessionfactory\",{\"1\":{\"448\":1}}],[\"一般我们会使用synchronized来解决这个问题\",{\"1\":{\"340\":1}}],[\"一般我们平时都是在在写业务代码\",{\"1\":{\"289\":1}}],[\"一般跟finally配合释放锁\",{\"1\":{\"330\":1}}],[\"一般是后台系统负责异步消费\",{\"1\":{\"751\":1}}],[\"一般是因为创建了大量对象所导致\",{\"1\":{\"415\":1}}],[\"一般是cpu数\",{\"1\":{\"359\":1}}],[\"一般是lock\",{\"1\":{\"330\":1}}],[\"一般是对象输出流\",{\"1\":{\"283\":1}}],[\"一般适用于连接数较多且连接时间较长的应用\",{\"1\":{\"280\":1}}],[\"一般情况下我们可以在\",{\"1\":{\"566\":1}}],[\"一般情况下\",{\"1\":{\"272\":1,\"584\":1,\"804\":1}}],[\"一般也分两种情况\",{\"1\":{\"257\":1}}],[\"一般需要捕获这个异常\",{\"1\":{\"225\":1}}],[\"一般生产中都是使用redission客户端\",{\"1\":{\"198\":1}}],[\"一般应用是很难出现碰撞的\",{\"1\":{\"167\":1}}],[\"一般\",{\"1\":{\"158\":1,\"853\":1}}],[\"一个分布式键值存储系统\",{\"1\":{\"841\":1}}],[\"一个开源的分布式协调服务\",{\"1\":{\"841\":1}}],[\"一个支持cp\",{\"1\":{\"836\":1}}],[\"一个服务拆成了多个服务\",{\"1\":{\"829\":1}}],[\"一个服务做一件事情\",{\"1\":{\"824\":1}}],[\"一个服务器开放ｎ个链接给客户端来连接的\",{\"1\":{\"528\":1}}],[\"一个工厂实例\",{\"1\":{\"795\":1}}],[\"一个工厂最核心的功能就是生产产品\",{\"1\":{\"788\":1}}],[\"一个个实例对象相互合作组成了业务逻辑\",{\"1\":{\"787\":1}}],[\"一个个的redis节点就组成了一个多节点的集群\",{\"1\":{\"697\":1}}],[\"一个音乐家\",{\"1\":{\"782\":1}}],[\"一个消息消费者能同时消费多个消息队列\",{\"1\":{\"777\":1}}],[\"一个indexfile可以保存\",{\"1\":{\"771\":1}}],[\"一个死信队列包含了对应\",{\"1\":{\"766\":1}}],[\"一个死信队列对应一个\",{\"1\":{\"766\":1}}],[\"一个生产者也可以同时向不同的\",{\"1\":{\"744\":1}}],[\"一个队列只会被一个消费者消费\",{\"1\":{\"745\":1}}],[\"一个队列也可以有多个消费者\",{\"1\":{\"743\":1}}],[\"一个队列可以存储多个生产者的消息\",{\"1\":{\"743\":1}}],[\"一个压缩列表可以包含任意多个节点\",{\"1\":{\"733\":1}}],[\"一个哈希表里可以有多个哈希表节点\",{\"1\":{\"729\":1}}],[\"一个大key分为不同的部分\",{\"1\":{\"719\":1}}],[\"一个并发访问量比较大的key在某个时间过期\",{\"1\":{\"702\":1}}],[\"一个虚拟的页面可能在主存里\",{\"1\":{\"658\":1}}],[\"一个父进程退出\",{\"1\":{\"639\":1}}],[\"一个子进程的进程描述符在子进程退出时不会释放\",{\"1\":{\"638\":1}}],[\"一个域名只能对应一个\",{\"1\":{\"604\":1}}],[\"一个域名可以对应多个\",{\"1\":{\"604\":1}}],[\"一个完整的包可能会被\",{\"1\":{\"595\":1}}],[\"一个绝对指针\",{\"1\":{\"583\":1}}],[\"一个正的偏移量\",{\"1\":{\"580\":1}}],[\"一个事务拿到悲观锁后\",{\"1\":{\"515\":1}}],[\"一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了意向锁\",{\"1\":{\"513\":1}}],[\"一个表示版本的创建时间\",{\"1\":{\"519\":1}}],[\"一个表中只能拥有一个聚簇索引\",{\"1\":{\"506\":1}}],[\"一个表允许多个列创建唯一索引\",{\"1\":{\"495\":1}}],[\"一个表只能有一个主键\",{\"1\":{\"495\":1}}],[\"一个是\",{\"1\":{\"799\":1}}],[\"一个是网编编程的标准接口\",{\"1\":{\"548\":1}}],[\"一个是大表\",{\"1\":{\"464\":1}}],[\"一个是字符串字面量\",{\"1\":{\"265\":1}}],[\"一个热部署的功能就这样实现了\",{\"1\":{\"428\":1}}],[\"一个类从被加载到虚拟机内存中开始\",{\"1\":{\"421\":1}}],[\"一个类不管创建多少个对象\",{\"1\":{\"254\":1}}],[\"一个对象是否有虚引用的存在\",{\"1\":{\"392\":1}}],[\"一个对象的\",{\"1\":{\"256\":1}}],[\"一个变量的定义作用域大于其使用范围\",{\"1\":{\"389\":1}}],[\"一个变量被声明为volatile\",{\"1\":{\"322\":1}}],[\"一个实现了线程池主要流程的类就完成了\",{\"1\":{\"370\":1}}],[\"一个任务一个任务地执行\",{\"1\":{\"362\":1}}],[\"一个抽象概念\",{\"1\":{\"317\":1}}],[\"一个table数组\",{\"1\":{\"312\":1}}],[\"一个共享变量上可能会有多个线程在等待\",{\"1\":{\"302\":1}}],[\"一个线程正在给\",{\"1\":{\"384\":1}}],[\"一个线程执行任务\",{\"1\":{\"362\":1}}],[\"一个线程使用共享方式获取了资源\",{\"1\":{\"331\":1}}],[\"一个线程使用独占方式获取了资源\",{\"1\":{\"331\":1}}],[\"一个线程中的每个操作\",{\"1\":{\"320\":1}}],[\"一个线程a调用共享对象的\",{\"1\":{\"302\":1}}],[\"一个线程对应多个\",{\"1\":{\"280\":1}}],[\"一个进程中有多个线程\",{\"1\":{\"299\":1}}],[\"一个进程中至少有一个线程\",{\"1\":{\"299\":1}}],[\"一个方法\",{\"1\":{\"293\":1}}],[\"一个\",{\"0\":{\"604\":1},\"1\":{\"275\":1,\"289\":1,\"412\":1,\"428\":1,\"603\":1,\"744\":3}}],[\"一个或两个\",{\"1\":{\"265\":1}}],[\"一个应答\",{\"1\":{\"215\":1}}],[\"一个节点可以同时充当不同角色\",{\"1\":{\"213\":1}}],[\"一个java文件中\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"一个链接\",{\"1\":{\"10\":1}}],[\"一个简单的幻灯片演示与各种小贴士\",{\"1\":{\"5\":1}}],[\"类图如下\",{\"1\":{\"812\":1}}],[\"类是对物体特征的抽象\",{\"1\":{\"804\":1}}],[\"类是一个特殊的类\",{\"1\":{\"272\":1}}],[\"类上\",{\"1\":{\"784\":2}}],[\"类地址以及划分子网的概念\",{\"1\":{\"605\":1}}],[\"类地址\",{\"1\":{\"603\":5}}],[\"类文件\",{\"1\":{\"428\":2}}],[\"类文件到虚拟机里的对象\",{\"1\":{\"428\":1}}],[\"类只能被加载一次\",{\"1\":{\"428\":1}}],[\"类卸载\",{\"1\":{\"428\":1}}],[\"类的加载都是由系统自带的类加载器完成\",{\"1\":{\"428\":1}}],[\"类的加载过程\",{\"1\":{\"428\":1}}],[\"类的\",{\"1\":{\"427\":1,\"812\":1}}],[\"类的方式自行实现的类加载器\",{\"1\":{\"423\":1}}],[\"类的对象\",{\"1\":{\"422\":1}}],[\"类的常见方法\",{\"0\":{\"272\":1}}],[\"类来控制\",{\"1\":{\"760\":1}}],[\"类来实现虚引用\",{\"1\":{\"392\":1}}],[\"类来实现弱引用\",{\"1\":{\"392\":1}}],[\"类来实现软引用\",{\"1\":{\"392\":1}}],[\"类来进行一些操作\",{\"1\":{\"283\":1}}],[\"类加载后织入\",{\"1\":{\"807\":1}}],[\"类加载期织入\",{\"1\":{\"804\":1}}],[\"类加载器如下\",{\"1\":{\"429\":1}}],[\"类加载器干掉呢\",{\"1\":{\"428\":1}}],[\"类加载器\",{\"1\":{\"428\":1}}],[\"类加载器读取\",{\"1\":{\"428\":1}}],[\"类加载器不再双亲委派模型推荐的树状结构\",{\"1\":{\"427\":1}}],[\"类加载器有哪些\",{\"0\":{\"423\":1}}],[\"类加载的过程知道吗\",{\"0\":{\"422\":1}}],[\"类加载检查通过后\",{\"1\":{\"382\":1}}],[\"类加锁\",{\"1\":{\"324\":1}}],[\"类常量池都移动到元空间\",{\"1\":{\"380\":1}}],[\"类比一下我们生活的邮政系统\",{\"1\":{\"747\":1}}],[\"类比前面的例子\",{\"1\":{\"355\":1}}],[\"类比我们生活中一些大件物品的运输\",{\"1\":{\"282\":1}}],[\"类都实现\",{\"1\":{\"282\":1}}],[\"类对该方法进行了重写用户比较字符串的值是否相等\",{\"1\":{\"272\":1}}],[\"类内中的parseint\",{\"1\":{\"270\":1}}],[\"类使用\",{\"1\":{\"263\":1}}],[\"类可以继承吗\",{\"1\":{\"263\":1}}],[\"类提供的\",{\"1\":{\"260\":1}}],[\"类中的\",{\"1\":{\"426\":1}}],[\"类中\",{\"1\":{\"258\":1}}],[\"类覆盖了\",{\"1\":{\"257\":1}}],[\"类没有覆盖\",{\"1\":{\"257\":1}}],[\"类似进程的概念\",{\"1\":{\"824\":1}}],[\"类似于分页的算法\",{\"1\":{\"777\":1}}],[\"类似于二阶段提交\",{\"1\":{\"204\":1}}],[\"类似\",{\"1\":{\"264\":1,\"796\":1}}],[\"类似地\",{\"1\":{\"254\":1}}],[\"类库\",{\"1\":{\"233\":1}}],[\"类\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"157\":1,\"238\":1,\"291\":1,\"324\":1,\"423\":2,\"425\":1,\"428\":2,\"605\":2,\"788\":1,\"807\":1,\"879\":1}}],[\"类名可以与文件名不一致\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"类名必须与文件名一致\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"类名\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"254\":1,\"879\":2}}],[\"类型的入参\",{\"1\":{\"796\":1}}],[\"类型的\",{\"1\":{\"796\":2}}],[\"类型的属性\",{\"1\":{\"796\":1}}],[\"类型的配置文件\",{\"1\":{\"794\":1}}],[\"类型的成员变量\",{\"1\":{\"331\":1}}],[\"类型也是用来保存多个的字符串元素\",{\"1\":{\"670\":1}}],[\"类型是用来存储多个有序的字符串\",{\"1\":{\"670\":1}}],[\"类型表示\",{\"1\":{\"465\":1}}],[\"类型数据妥善安置在方法区之后\",{\"1\":{\"422\":1}}],[\"类型被设置成了不可变类型\",{\"1\":{\"389\":1}}],[\"类型在\",{\"1\":{\"386\":1}}],[\"类型擦除\",{\"1\":{\"285\":1}}],[\"类型\",{\"0\":{\"97\":1},\"1\":{\"239\":1,\"242\":1,\"249\":1,\"285\":2,\"294\":2,\"467\":1,\"502\":1}}],[\"语音和\",{\"1\":{\"598\":1}}],[\"语句分配一个唯一的\",{\"1\":{\"493\":1}}],[\"语句之前增加explain\",{\"1\":{\"493\":1}}],[\"语句来替代子查询\",{\"1\":{\"490\":1}}],[\"语句的效率要高\",{\"1\":{\"464\":1}}],[\"语句的所有方法\",{\"1\":{\"448\":1}}],[\"语句是否有语法错误\",{\"1\":{\"473\":1}}],[\"语句是对外表作\",{\"1\":{\"464\":1}}],[\"语句是把外表和内表作\",{\"1\":{\"464\":1}}],[\"语句可以通过牛客\",{\"1\":{\"457\":1}}],[\"语句有点像\",{\"1\":{\"444\":1}}],[\"语句本身的优化\",{\"1\":{\"486\":1}}],[\"语句本身\",{\"1\":{\"433\":1}}],[\"语句\",{\"1\":{\"302\":1,\"306\":1,\"435\":1,\"448\":2,\"457\":1,\"479\":1}}],[\"语句块来完成\",{\"1\":{\"330\":1}}],[\"语句块不管程序是否正常执行\",{\"1\":{\"275\":1}}],[\"语句块\",{\"1\":{\"275\":1,\"276\":1}}],[\"语句块中补货发生的异常\",{\"1\":{\"275\":1}}],[\"语句中\",{\"1\":{\"256\":1,\"473\":1}}],[\"语言字符串只能保存\",{\"1\":{\"730\":1}}],[\"语言中的字符串必须符合某种编码\",{\"1\":{\"730\":1}}],[\"语言中所有错误或异常的基类\",{\"1\":{\"274\":1}}],[\"语言使用了一个长度为\",{\"1\":{\"730\":1}}],[\"语言的方法调用只支持参数的值传递\",{\"1\":{\"259\":1}}],[\"语言的平台无关性\",{\"1\":{\"235\":1}}],[\"语言是值传递\",{\"1\":{\"259\":1}}],[\"语言是强类型语言\",{\"1\":{\"238\":1}}],[\"语言数据类型分为两种\",{\"1\":{\"238\":1}}],[\"语言编译与解释并存\",{\"1\":{\"236\":1}}],[\"语言编写的程序\",{\"1\":{\"234\":1}}],[\"语言编写的程序具有很好的可移植性\",{\"1\":{\"232\":1}}],[\"语言既具有编译型语言的特征\",{\"1\":{\"236\":1}}],[\"语言\",{\"0\":{\"236\":1}}],[\"语言可以实现跨平台\",{\"1\":{\"233\":1}}],[\"语言却提供了多线程支持\",{\"1\":{\"232\":1}}],[\"语言没有内置的多线程机制\",{\"1\":{\"232\":1}}],[\"语言在不同的平台上运行不需要重新编译\",{\"1\":{\"232\":1}}],[\"语言有很多优秀\",{\"1\":{\"232\":1}}],[\"语言有哪些特点\",{\"0\":{\"232\":1}}],[\"语言作为静态面向对象编程语言的优秀代表\",{\"1\":{\"231\":1}}],[\"语言具有功能强大和简单易用两个特征\",{\"1\":{\"231\":1}}],[\"语言足够简单\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"语法解析之后\",{\"1\":{\"473\":1}}],[\"语法\",{\"1\":{\"445\":1}}],[\"语法来分布高亮特定行\",{\"1\":{\"36\":1}}],[\"语法的各种标记\",{\"1\":{\"8\":1,\"9\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1}}],[\"良好的可移植性\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"72m\",{\"1\":{\"771\":1}}],[\"7200\",{\"1\":{\"150\":1}}],[\"7m\",{\"1\":{\"763\":1}}],[\"731f\",{\"1\":{\"418\":2}}],[\"7版本的concurrenthashmap采用分段锁机制\",{\"1\":{\"180\":1}}],[\"7版本是基于分段锁实现\",{\"1\":{\"179\":1}}],[\"7分段锁\",{\"0\":{\"180\":1}}],[\"7中使用分段锁\",{\"1\":{\"178\":1}}],[\"75作为hashmap的默认加载因子呢\",{\"1\":{\"173\":1}}],[\"75=12时\",{\"1\":{\"173\":1}}],[\"75\",{\"0\":{\"173\":1},\"1\":{\"577\":1}}],[\"7还有人在用\",{\"1\":{\"161\":1}}],[\"7的数据结构是数组+链表\",{\"1\":{\"161\":1}}],[\"7\",{\"0\":{\"159\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"238\":1,\"304\":1,\"380\":1,\"384\":1,\"439\":1,\"464\":1,\"549\":1,\"674\":1,\"746\":1,\"789\":1,\"836\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"175\":5,\"177\":3,\"242\":1,\"252\":1,\"266\":1,\"280\":1,\"369\":1,\"379\":1,\"380\":2,\"381\":2,\"413\":1,\"418\":2,\"477\":1,\"489\":1,\"513\":3,\"534\":1,\"641\":1,\"695\":3,\"765\":2,\"793\":3,\"879\":2}}],[\"7️⃣\",{\"1\":{\"64\":1}}],[\"面世以前的\",{\"1\":{\"427\":1}}],[\"面向服务的架构\",{\"1\":{\"828\":1}}],[\"面向切面编程\",{\"1\":{\"804\":1}}],[\"面向使用\",{\"1\":{\"789\":1}}],[\"面向\",{\"1\":{\"789\":1}}],[\"面向过程是编年体\",{\"1\":{\"247\":1}}],[\"面向过程就是分析出解决问题所需要的步骤\",{\"1\":{\"247\":1}}],[\"面向对象有哪些特性\",{\"0\":{\"248\":1}}],[\"面向对象是纪传体\",{\"1\":{\"247\":1}}],[\"面向对象\",{\"0\":{\"246\":1},\"1\":{\"232\":1,\"247\":1}}],[\"面向对象编程语言\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"面渣逆袭系列继续\",{\"1\":{\"431\":1}}],[\"面渣逆袭微服务篇👍\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"面渣逆袭分布式篇👍\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"面渣逆袭rocketmq篇👍\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"面渣逆袭计算机网络篇👍\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"面渣逆袭操作系统篇👍\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"面渣逆袭\",{\"1\":{\"186\":8,\"227\":8,\"294\":8,\"372\":1,\"373\":8,\"429\":8,\"454\":8,\"538\":8,\"617\":8,\"623\":13,\"664\":8,\"736\":8,\"778\":8,\"824\":8,\"877\":8}}],[\"面渣背会这些计算机网络八股文\",{\"1\":{\"540\":1}}],[\"面渣背会这些并发编程八股文\",{\"1\":{\"296\":1}}],[\"面渣背会这些八股文\",{\"1\":{\"188\":1,\"229\":1,\"826\":1,\"877\":1}}],[\"面渣背会这些\",{\"1\":{\"150\":1,\"375\":1,\"431\":1,\"456\":1,\"626\":1,\"666\":1,\"738\":1,\"780\":1}}],[\"面试官不想听这个\",{\"1\":{\"800\":1}}],[\"面试官非要问怎么办\",{\"1\":{\"413\":1}}],[\"面试前必读系列\",{\"1\":{\"623\":1}}],[\"面试之外\",{\"1\":{\"551\":1}}],[\"面试回答起来就简单很多\",{\"1\":{\"532\":1}}],[\"面试中的重中之重\",{\"1\":{\"494\":1}}],[\"面试也不怎么问\",{\"1\":{\"457\":1}}],[\"面试高频题\",{\"1\":{\"431\":1,\"456\":1,\"538\":1,\"666\":1,\"738\":1,\"778\":1,\"780\":1,\"826\":1,\"877\":1}}],[\"面试的重点是两个\",{\"1\":{\"401\":1}}],[\"面试常问\",{\"1\":{\"360\":1}}],[\"面试啊\",{\"1\":{\"231\":1}}],[\"面试基本被盘出包浆了\",{\"1\":{\"160\":1}}],[\"面试\",{\"0\":{\"67\":1}}],[\"面试等\",{\"1\":{\"59\":1}}],[\"橡树\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"编号\",{\"1\":{\"660\":1}}],[\"编码更具有健壮性\",{\"1\":{\"783\":1}}],[\"编码\",{\"1\":{\"466\":1,\"558\":1,\"783\":1}}],[\"编码是不行的\",{\"1\":{\"466\":1}}],[\"编写配置文件\",{\"1\":{\"821\":1}}],[\"编写\",{\"1\":{\"493\":1}}],[\"编写的程序需要先经过编译步骤\",{\"1\":{\"236\":1}}],[\"编写md文件时\",{\"1\":{\"116\":1}}],[\"编程式事务管理使用\",{\"1\":{\"809\":1}}],[\"编程式事务\",{\"1\":{\"809\":1}}],[\"编程的完全解决方案\",{\"1\":{\"807\":1}}],[\"编程的支持\",{\"1\":{\"782\":1}}],[\"编程中\",{\"1\":{\"280\":1}}],[\"编程起步\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"编程基础自测考试\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"编译后织入\",{\"1\":{\"807\":1}}],[\"编译期织入\",{\"1\":{\"804\":1,\"807\":1}}],[\"编译期的发展与逃逸分析技术逐渐成熟\",{\"1\":{\"408\":1}}],[\"编译之后会生成字节码\",{\"1\":{\"289\":1}}],[\"编译器将\",{\"1\":{\"377\":1}}],[\"编译器在生成字节码时\",{\"1\":{\"322\":1}}],[\"编译器在不改变单线程程序语义的前提下\",{\"1\":{\"319\":1}}],[\"编译器\",{\"1\":{\"321\":1,\"428\":1}}],[\"编译器和处理器可以重排序a和b之间的执行顺序\",{\"1\":{\"321\":1}}],[\"编译器和处理器不会对存在数据依赖关系的操作做重排序\",{\"1\":{\"321\":1}}],[\"编译器和处理器为了提高并行度\",{\"1\":{\"321\":1}}],[\"编译器和处理器常常会对指令做重排序\",{\"1\":{\"319\":1}}],[\"编译器优化的重排序\",{\"1\":{\"319\":1}}],[\"编译器编译的时候检查没问题就\",{\"1\":{\"287\":1}}],[\"编译器会强制检查并要求处理的异常\",{\"1\":{\"274\":1}}],[\"编译的时候给你静态地检查一下范型类型是否正确\",{\"1\":{\"285\":1}}],[\"编译出错\",{\"1\":{\"239\":1}}],[\"编译成虚拟机可以识别理解的字节码\",{\"1\":{\"235\":1}}],[\"编译\",{\"1\":{\"235\":1}}],[\"编译与解释并存\",{\"0\":{\"236\":1},\"1\":{\"232\":1}}],[\"编译时不处理注释\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"编译文件为字节码文件\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"编译执行\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"编译命令\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码\",{\"1\":{\"236\":1}}],[\"编译型\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"选好学校了\",{\"1\":{\"793\":2}}],[\"选取某个列\",{\"1\":{\"531\":1}}],[\"选取有序的数据列\",{\"1\":{\"531\":1}}],[\"选择使用哪种远程调用方式取决于具体的业务需求和技术栈的选择\",{\"1\":{\"846\":1}}],[\"选择合适的路由进行请求转发\",{\"1\":{\"865\":1}}],[\"选择合适的语言\",{\"1\":{\"824\":1}}],[\"选择合适的缓存更新策略\",{\"0\":{\"707\":1}}],[\"选择中间件的可以从这些维度来考虑\",{\"1\":{\"741\":1}}],[\"选择runid最小的从节点\",{\"1\":{\"690\":1}}],[\"选择复制偏移量最大的从节点\",{\"1\":{\"690\":1}}],[\"选择slave\",{\"1\":{\"690\":1}}],[\"选择访问次数最少的那个⻚⾯\",{\"1\":{\"658\":1}}],[\"选择最⻓时间没有被访问的⻚⾯进⾏置换\",{\"1\":{\"658\":1}}],[\"选择未来最⻓时间不访问的⻚⾯\",{\"1\":{\"658\":1}}],[\"选择指定的列\",{\"1\":{\"470\":1}}],[\"选择多个\",{\"1\":{\"404\":1}}],[\"选举投票\",{\"1\":{\"698\":1}}],[\"选举\",{\"1\":{\"222\":1}}],[\"选出新的主节点\",{\"1\":{\"690\":1}}],[\"选出一个sentinel节点作为领导者进行故障转移的工作\",{\"1\":{\"688\":1}}],[\"选出一个leader\",{\"1\":{\"217\":1}}],[\"选出\",{\"1\":{\"222\":1}}],[\"选项\",{\"1\":{\"190\":1,\"492\":1}}],[\"选项全局设置\",{\"1\":{\"31\":1}}],[\"选中自己想要安装的目录后一直点击下一步就好了\",{\"1\":{\"108\":1}}],[\"提倡将单一应用程序划分成一组小的服务\",{\"1\":{\"824\":1}}],[\"提出的一种新的架构形式\",{\"1\":{\"824\":1}}],[\"提出了\",{\"1\":{\"217\":1}}],[\"提前加载热key数据到内存中\",{\"1\":{\"710\":1}}],[\"提取数据行\",{\"1\":{\"488\":1}}],[\"提取\",{\"1\":{\"473\":1}}],[\"提取码\",{\"1\":{\"107\":1,\"115\":1}}],[\"提升了synchronized的性能\",{\"1\":{\"327\":1}}],[\"提升效率\",{\"1\":{\"175\":1}}],[\"提高整体的系统性能和可用性\",{\"1\":{\"834\":1}}],[\"提高代码的模块化能力\",{\"1\":{\"804\":1}}],[\"提高缓存可用性\",{\"1\":{\"704\":1}}],[\"提高索引的查询效率\",{\"1\":{\"489\":1}}],[\"提高性能\",{\"1\":{\"460\":1}}],[\"提高系统的吞吐量和可扩展性\",{\"1\":{\"863\":1}}],[\"提高系统的性能\",{\"1\":{\"858\":1}}],[\"提高系统的性能和响应速度\",{\"1\":{\"858\":1}}],[\"提高系统的稳定性和可用性\",{\"1\":{\"858\":1}}],[\"提高系统的可用性和可伸缩性\",{\"1\":{\"847\":1}}],[\"提高系统的容错能力\",{\"1\":{\"832\":1}}],[\"提高系统安全性\",{\"1\":{\"439\":1}}],[\"提高系统性能和响应速度\",{\"1\":{\"863\":1}}],[\"提高系统性能\",{\"1\":{\"283\":1}}],[\"提高响应速度\",{\"1\":{\"351\":1,\"669\":1}}],[\"提高扩容的效率\",{\"1\":{\"175\":1}}],[\"提供统一的接口和安全性保障\",{\"1\":{\"863\":1}}],[\"提供实时监控和分析\",{\"1\":{\"863\":1}}],[\"提供实时监控\",{\"1\":{\"857\":1}}],[\"提供实时的消息订阅机制\",{\"1\":{\"751\":1}}],[\"提供类似于hystrix的功能\",{\"1\":{\"857\":1}}],[\"提供线程隔离\",{\"1\":{\"857\":1}}],[\"提供更全面的服务治理和容错机制\",{\"1\":{\"846\":1}}],[\"提供细粒度的配置权限管理\",{\"1\":{\"841\":1}}],[\"提供分布式数据一致性保证\",{\"1\":{\"841\":1}}],[\"提供健康检查\",{\"1\":{\"841\":1}}],[\"提供部分服务治理功能\",{\"1\":{\"831\":1}}],[\"提供完整的服务治理功能\",{\"1\":{\"831\":2}}],[\"提供对\",{\"1\":{\"783\":1}}],[\"提供\",{\"1\":{\"783\":1}}],[\"提供支持\",{\"1\":{\"782\":1}}],[\"提供的\",{\"1\":{\"819\":1}}],[\"提供的动态代理实现\",{\"1\":{\"807\":1}}],[\"提供的这种方式\",{\"1\":{\"796\":1}}],[\"提供的工具\",{\"1\":{\"784\":1}}],[\"提供的查询系统提供帮助\",{\"1\":{\"744\":1}}],[\"提供的新\",{\"1\":{\"280\":1}}],[\"提供三种将客户端多条命令打包发送给服务端执行的方式\",{\"1\":{\"726\":1}}],[\"提供不可靠交付\",{\"1\":{\"599\":1}}],[\"提供面向连接的服务\",{\"1\":{\"568\":1}}],[\"提供源端与目的端之间提供可靠的透明数据传输\",{\"1\":{\"542\":1}}],[\"提供事务支持事务\",{\"1\":{\"477\":1}}],[\"提供给外部使用的接口api\",{\"1\":{\"449\":1}}],[\"提供一个单例\",{\"1\":{\"448\":1}}],[\"提供隔离的机制\",{\"1\":{\"429\":1}}],[\"提供了丰富的图表和可视化选项\",{\"1\":{\"876\":1}}],[\"提供了在微服务调用时生成追踪信息的能力\",{\"1\":{\"868\":1}}],[\"提供了对\",{\"1\":{\"868\":1}}],[\"提供了与\",{\"1\":{\"868\":1}}],[\"提供了强大的路由\",{\"1\":{\"864\":1}}],[\"提供了默认的构造函数\",{\"1\":{\"796\":1}}],[\"提供了\",{\"1\":{\"796\":1}}],[\"提供了哪几种自动装配类型\",{\"1\":{\"796\":1}}],[\"提供了更多面向实际应用的功能\",{\"1\":{\"791\":1}}],[\"提供了很多种实现\",{\"1\":{\"790\":1}}],[\"提供了面向切面编程\",{\"1\":{\"782\":1}}],[\"提供了三种方式发送消息\",{\"1\":{\"750\":1}}],[\"提供了⼀个专⻔发送⽂件的系统调⽤函数\",{\"1\":{\"662\":1}}],[\"提供了操作系统最核心的能力\",{\"1\":{\"631\":1}}],[\"提供了带选择确认的重传\",{\"1\":{\"593\":1}}],[\"提供了日志\",{\"1\":{\"434\":1}}],[\"提供了一组统一的接口来管理和控制api的访问\",{\"1\":{\"863\":1}}],[\"提供了一些现有的功能\",{\"1\":{\"819\":1}}],[\"提供了一种可以通过key或时间区间来查询消息的方法\",{\"1\":{\"771\":1}}],[\"提供了一种机制\",{\"1\":{\"582\":1}}],[\"提供了一种在事务失败或被中断时恢复数据的手段\",{\"1\":{\"519\":1}}],[\"提供了一种高效且易于使用的处理数据的方式\",{\"1\":{\"291\":1}}],[\"提供了一种特殊的运算符\",{\"1\":{\"245\":1}}],[\"提供了一系列改进的输入\",{\"1\":{\"280\":1}}],[\"提供了内存回收处理机制\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"提案的接受请求\",{\"1\":{\"216\":1}}],[\"提案=编号+value\",{\"1\":{\"213\":1}}],[\"提议者提议一个新的提案\",{\"1\":{\"215\":1}}],[\"提议者提出提案\",{\"1\":{\"213\":2}}],[\"提议者\",{\"1\":{\"213\":1}}],[\"提交异步化\",{\"1\":{\"871\":1}}],[\"提交事务\",{\"1\":{\"435\":1}}],[\"提交任务\",{\"1\":{\"362\":1,\"363\":1,\"364\":1}}],[\"提交或回滚事务\",{\"1\":{\"208\":1}}],[\"提交阶段\",{\"1\":{\"202\":1,\"203\":2}}],[\"提示\",{\"1\":{\"70\":1,\"76\":1}}],[\"以满足后端服务的需求\",{\"1\":{\"863\":1}}],[\"以提供有限但可用的功能\",{\"1\":{\"858\":1}}],[\"以防止过多的请求涌入导致后端服务不可用\",{\"1\":{\"853\":1}}],[\"以保证系统继续正常运行\",{\"1\":{\"858\":1}}],[\"以保证后端服务器的负载均衡\",{\"1\":{\"851\":1}}],[\"以保证合理的使用公共资源\",{\"1\":{\"348\":1}}],[\"以保护现有的注册信息\",{\"1\":{\"838\":1}}],[\"以保持数据的一致性\",{\"1\":{\"838\":1}}],[\"以确保事务的提交效率\",{\"1\":{\"871\":1}}],[\"以确保系统的稳定运行\",{\"1\":{\"856\":1}}],[\"以确保整个系统的可靠性和稳定性\",{\"1\":{\"829\":1}}],[\"以确定是否能加成功\",{\"1\":{\"514\":1}}],[\"以简化部署和运维过程\",{\"1\":{\"829\":1}}],[\"以约定大于配置核心思想开展工作\",{\"1\":{\"819\":1}}],[\"以非事务方式运行\",{\"1\":{\"813\":2}}],[\"以自定义\",{\"1\":{\"805\":1}}],[\"以单实例的方式存在\",{\"1\":{\"797\":1}}],[\"以万为单位\",{\"1\":{\"719\":1}}],[\"以减轻主节点的同步负担\",{\"1\":{\"682\":1}}],[\"以减少多张表的关联查询\",{\"1\":{\"490\":1}}],[\"以独立日志的方式记录每次写命令\",{\"1\":{\"676\":1}}],[\"以一个电商项目的用户服务为例\",{\"1\":{\"669\":1}}],[\"以链表形式来组织\",{\"1\":{\"664\":1}}],[\"以事件通知应⽤程序进⾏操作\",{\"1\":{\"663\":1}}],[\"以事件形式记录并保存在二进制文件中\",{\"1\":{\"479\":1}}],[\"以释放内存空间\",{\"1\":{\"657\":1}}],[\"以释放该临界资源\",{\"1\":{\"645\":1}}],[\"以此类推\",{\"1\":{\"695\":1,\"771\":1}}],[\"以此冒充用户的行为\",{\"1\":{\"615\":1}}],[\"以此来表明数据已被变动\",{\"1\":{\"515\":1}}],[\"以此来完成动态sql的功能\",{\"1\":{\"444\":1}}],[\"以此来加大低位的随机性\",{\"1\":{\"167\":1}}],[\"以在\",{\"1\":{\"613\":1}}],[\"以为就是\",{\"1\":{\"613\":1}}],[\"以表明自己的存活状态\",{\"1\":{\"837\":1}}],[\"以表示\",{\"1\":{\"606\":1}}],[\"以表为依据\",{\"1\":{\"529\":1}}],[\"以\",{\"1\":{\"603\":5}}],[\"以等待是否有响应数据可以⼀起发送\",{\"1\":{\"584\":1}}],[\"以数据包的源地址\",{\"1\":{\"573\":1}}],[\"以后则每隔\",{\"1\":{\"577\":1}}],[\"以后\",{\"1\":{\"560\":1}}],[\"以方便开发者更好地进行网络编程\",{\"1\":{\"548\":1}}],[\"以字段为依据\",{\"1\":{\"529\":1,\"530\":2}}],[\"以避免回表\",{\"1\":{\"493\":1}}],[\"以便于后面扩展有机会创建代理对象\",{\"1\":{\"800\":1}}],[\"以便发现是否有浏览器向它发出连接建立请求\",{\"1\":{\"555\":1}}],[\"以便优化器可以充分利用这些条件进行优化\",{\"1\":{\"492\":1}}],[\"以便进行优化\",{\"1\":{\"479\":1}}],[\"以便保存那些值的小数精度\",{\"1\":{\"465\":1}}],[\"以sql作为key查找statement对象\",{\"1\":{\"451\":1}}],[\"以了解出现问题的时间点以及当前\",{\"1\":{\"417\":1}}],[\"以下三个作用域于只在\",{\"1\":{\"797\":1}}],[\"以下场景会自动触发rdb持久化\",{\"1\":{\"676\":1}}],[\"以下是一些常用的方案\",{\"1\":{\"868\":1}}],[\"以下是一些\",{\"1\":{\"411\":1}}],[\"以下几个是比较突出的\",{\"1\":{\"232\":1}}],[\"以atomicinteger的添加方法为例\",{\"1\":{\"341\":1}}],[\"以用来支持\",{\"1\":{\"292\":1}}],[\"以毫微秒为单位\",{\"1\":{\"272\":1}}],[\"以前是它控制其它对象\",{\"1\":{\"787\":1}}],[\"以前是我们想要什么\",{\"1\":{\"787\":1}}],[\"以前重复的一些事务提交\",{\"1\":{\"782\":1}}],[\"以前的收集器分代是划分新生代\",{\"1\":{\"404\":1}}],[\"以前的唯一选择\",{\"1\":{\"280\":1}}],[\"以前\",{\"1\":{\"242\":1}}],[\"以支付通知为例\",{\"1\":{\"207\":1}}],[\"以某个资源为目录\",{\"1\":{\"197\":1}}],[\"以及与\",{\"1\":{\"831\":1}}],[\"以及执行时间\",{\"1\":{\"805\":1}}],[\"以及业务削峰\",{\"1\":{\"742\":1}}],[\"以及多次数据拷贝\",{\"1\":{\"662\":1}}],[\"以及管理硬件资源\",{\"1\":{\"628\":1}}],[\"以及目的主机的\",{\"1\":{\"606\":1}}],[\"以及这个连接的序号是不是有效的\",{\"1\":{\"569\":1}}],[\"以及服务器怎么把文档传给浏览器\",{\"1\":{\"555\":1}}],[\"以及聚合函数问题\",{\"1\":{\"534\":1}}],[\"以及查找磁盘次数\",{\"1\":{\"503\":1}}],[\"以及数据库设计的优化\",{\"1\":{\"486\":1}}],[\"以及事务方法\",{\"1\":{\"448\":1}}],[\"以及配合关系\",{\"1\":{\"401\":1}}],[\"以及不写\",{\"0\":{\"250\":1}}],[\"以及不同的服务s1和s2\",{\"1\":{\"191\":1}}],[\"以及\",{\"1\":{\"178\":1}}],[\"以及所有不在\",{\"1\":{\"14\":1}}],[\"以17为例\",{\"1\":{\"169\":1}}],[\"以初始长度\",{\"1\":{\"167\":1}}],[\"以上两种情况都是有可能的\",{\"1\":{\"592\":1}}],[\"以上是常见的几种流式操作\",{\"1\":{\"294\":1}}],[\"以上配置完成\",{\"1\":{\"113\":1}}],[\"以上有配置说明\",{\"1\":{\"107\":1}}],[\"有几种常见的方法\",{\"1\":{\"807\":1}}],[\"有三个关键组件\",{\"1\":{\"865\":1}}],[\"有三个角色\",{\"1\":{\"202\":1}}],[\"有三种方式\",{\"1\":{\"794\":1}}],[\"有条件的可以跑一下\",{\"1\":{\"788\":1}}],[\"有到工厂签的\",{\"1\":{\"788\":1}}],[\"有线上签签的\",{\"1\":{\"788\":1}}],[\"有必要在consumer端来做负载均衡\",{\"1\":{\"777\":1}}],[\"有且仅有一次\",{\"1\":{\"757\":1}}],[\"有活跃的中文社区\",{\"1\":{\"741\":1}}],[\"有值\",{\"1\":{\"731\":1}}],[\"有下面两个优势\",{\"1\":{\"726\":1}}],[\"有大量线程来重建缓存\",{\"1\":{\"712\":1}}],[\"有大量的\",{\"1\":{\"538\":1}}],[\"有更大的概率会产生脏数据\",{\"1\":{\"707\":1}}],[\"有序集合主要应用场景\",{\"1\":{\"670\":1}}],[\"有序集合中的元素可以排序\",{\"1\":{\"670\":1}}],[\"有序集合\",{\"1\":{\"668\":1}}],[\"有序性都应该怎么保证呢\",{\"1\":{\"318\":1}}],[\"有序性指的是对于一个线程的执行代码\",{\"1\":{\"318\":1}}],[\"有序性\",{\"0\":{\"326\":1},\"1\":{\"318\":3}}],[\"有序性的理解\",{\"0\":{\"318\":1}}],[\"有事件发⽣时\",{\"1\":{\"664\":1}}],[\"有它所完成的功能决定\",{\"1\":{\"656\":1}}],[\"有足够权限的进程可以向队列中添加消息\",{\"1\":{\"641\":1}}],[\"有利于长作业\",{\"1\":{\"640\":1}}],[\"有多个任务在执行\",{\"1\":{\"635\":1}}],[\"有人说\",{\"1\":{\"621\":1}}],[\"有人叫你的绰号\",{\"1\":{\"604\":1}}],[\"有效期与正常消息相同\",{\"1\":{\"766\":1}}],[\"有效期不同\",{\"1\":{\"566\":1}}],[\"有效降低内存分配次数\",{\"1\":{\"730\":1}}],[\"有效地减少网络开销\",{\"1\":{\"725\":1}}],[\"有效时间等信息打成⼀个包\",{\"1\":{\"564\":1}}],[\"有⾃⼰的⼀套机制可以保证传输的可靠性的\",{\"1\":{\"559\":1}}],[\"有很多模块\",{\"1\":{\"784\":1}}],[\"有很多优点\",{\"1\":{\"782\":1}}],[\"有很多用户都只使用\",{\"1\":{\"678\":1}}],[\"有很多条\",{\"1\":{\"663\":1}}],[\"有很多种划分方式\",{\"1\":{\"278\":1}}],[\"有很大一点在于它保证事务完整性\",{\"1\":{\"534\":1}}],[\"有以下\",{\"1\":{\"512\":1}}],[\"有这些优势\",{\"1\":{\"504\":1}}],[\"有这样⼀段⽅法\",{\"1\":{\"169\":1}}],[\"有没有处理过内存溢出问题\",{\"0\":{\"419\":1}}],[\"有没有处理过内存泄漏问题\",{\"0\":{\"418\":1}}],[\"有没有了解逃逸分析技术\",{\"0\":{\"408\":1}}],[\"有个标准方法的计算公式\",{\"1\":{\"591\":1}}],[\"有个方法引起了我的注意\",{\"1\":{\"413\":1}}],[\"有个数据结构\",{\"1\":{\"402\":1}}],[\"有那功夫\",{\"1\":{\"413\":1}}],[\"有做过\",{\"0\":{\"413\":1}}],[\"有了消息后\",{\"1\":{\"778\":1}}],[\"有了自动切换\",{\"1\":{\"767\":1}}],[\"有了这个\",{\"1\":{\"523\":1}}],[\"有了意向锁之后\",{\"1\":{\"514\":1}}],[\"有了意向锁这个表级锁之后\",{\"1\":{\"514\":1}}],[\"有了\",{\"0\":{\"405\":1}}],[\"有了标记之后\",{\"1\":{\"287\":1}}],[\"有些系统要迁移需要修改大量代码\",{\"1\":{\"742\":1}}],[\"有些up主是老鸽子\",{\"1\":{\"663\":1}}],[\"有些朋友喜欢打印或者阅读\",{\"1\":{\"624\":1}}],[\"有些朋友喜欢在线版阅读\",{\"1\":{\"623\":1}}],[\"有些类似\",{\"1\":{\"401\":1}}],[\"有些业务表是有状态的\",{\"1\":{\"225\":1}}],[\"有客观和主观两个原因\",{\"1\":{\"381\":1}}],[\"有的山下游可能有十几个服务\",{\"1\":{\"867\":1}}],[\"有的说法是\",{\"1\":{\"787\":1}}],[\"有的说法\",{\"1\":{\"787\":1}}],[\"有的线程干活慢\",{\"1\":{\"373\":1}}],[\"有的线程干活块\",{\"1\":{\"373\":1}}],[\"有的才降生\",{\"1\":{\"345\":1}}],[\"有界队列\",{\"1\":{\"356\":1}}],[\"有一个构造函数\",{\"1\":{\"796\":1}}],[\"有一个\",{\"1\":{\"796\":1}}],[\"有一个服务线程会不停地检查\",{\"1\":{\"778\":1}}],[\"有一个后台线程\",{\"1\":{\"483\":1}}],[\"有一个字符集\",{\"1\":{\"462\":1}}],[\"有一个营业厅\",{\"1\":{\"353\":1}}],[\"有一些占用大量连续内存空间的对象在被加载就会直接进入老年代\",{\"1\":{\"400\":1}}],[\"有一块结构\",{\"1\":{\"327\":1}}],[\"有\",{\"1\":{\"328\":1,\"502\":1,\"677\":1}}],[\"有两种方案\",{\"1\":{\"762\":1}}],[\"有两种方式生成有序结果\",{\"1\":{\"491\":1}}],[\"有两种方式\",{\"1\":{\"390\":1}}],[\"有两种\",{\"1\":{\"512\":1}}],[\"有两种可选方案来解决这个问题\",{\"1\":{\"384\":1}}],[\"有两种选择方式\",{\"1\":{\"236\":1}}],[\"有两个重点\",{\"1\":{\"501\":1}}],[\"有两个常见的应用场景\",{\"1\":{\"345\":1}}],[\"有两个规则happens\",{\"1\":{\"320\":1}}],[\"有用到过的\",{\"1\":{\"309\":1}}],[\"有用到再填充这个文档\",{\"1\":{\"76\":1}}],[\"有不少新特性\",{\"1\":{\"291\":1}}],[\"有点离谱对不对\",{\"1\":{\"245\":1}}],[\"有点类似前面说的\",{\"1\":{\"210\":1}}],[\"有什么意义\",{\"1\":{\"578\":1}}],[\"有什么关联呢\",{\"1\":{\"566\":1}}],[\"有什么联系和区别\",{\"0\":{\"566\":1}}],[\"有什么作用\",{\"0\":{\"393\":1}}],[\"有什么问题\",{\"0\":{\"335\":1}}],[\"有什么区别\",{\"0\":{\"233\":1,\"241\":1,\"252\":1,\"434\":1,\"462\":1,\"480\":1,\"557\":1,\"676\":1}}],[\"有什么办法能解决hashmap线程不安全的问题呢\",{\"0\":{\"178\":1}}],[\"有啥好介绍的\",{\"1\":{\"231\":1}}],[\"有时候会出现大key的情况\",{\"1\":{\"719\":1}}],[\"有时候会读取到重复消息\",{\"1\":{\"224\":1}}],[\"有时候表中并非所有的场景都不允许产生重复的数据\",{\"1\":{\"225\":1}}],[\"有哪几种常见的线程池\",{\"0\":{\"360\":1}}],[\"有哪几种实现arraylist线程安全的方法\",{\"0\":{\"158\":1}}],[\"有哪些熔断降级方案实现\",{\"0\":{\"857\":1}}],[\"有哪些核心组件\",{\"1\":{\"824\":1}}],[\"有哪些核心概念\",{\"1\":{\"804\":1}}],[\"有哪些主流微服务框架\",{\"1\":{\"824\":1}}],[\"有哪些优点\",{\"0\":{\"819\":1}}],[\"有哪些环绕方式\",{\"1\":{\"804\":1}}],[\"有哪些自动装配的方式\",{\"0\":{\"796\":1}}],[\"有哪些依赖注入的方法\",{\"0\":{\"795\":1}}],[\"有哪些特性呢\",{\"1\":{\"782\":1}}],[\"有哪些模块呢\",{\"0\":{\"783\":1}}],[\"有哪些模块\",{\"0\":{\"782\":1}}],[\"有哪些数据结构\",{\"0\":{\"670\":1}}],[\"有哪些数据包\",{\"1\":{\"594\":1}}],[\"有哪些数据类型\",{\"0\":{\"238\":1}}],[\"有哪些区别\",{\"0\":{\"561\":1}}],[\"有哪些请求方式\",{\"0\":{\"552\":1}}],[\"有哪些方式优化慢\",{\"0\":{\"486\":1}}],[\"有哪些常用注解呢\",{\"0\":{\"784\":1}}],[\"有哪些常用的命令行性能监控和故障处理工具\",{\"0\":{\"410\":1}}],[\"有哪些常见存储引擎\",{\"0\":{\"475\":1}}],[\"有哪些原因导致\",{\"1\":{\"417\":1}}],[\"有哪些内置函数式接口\",{\"1\":{\"292\":1}}],[\"有哪些分布式锁的实现方案呢\",{\"0\":{\"195\":1}}],[\"有宁静的港湾\",{\"1\":{\"186\":1,\"227\":1,\"294\":2,\"373\":2,\"429\":2,\"454\":2,\"538\":2,\"617\":2,\"664\":1,\"736\":2,\"778\":2,\"824\":2,\"877\":1}}],[\"有绿荫\",{\"1\":{\"186\":1,\"227\":1,\"294\":2,\"373\":2,\"429\":2,\"454\":2,\"538\":2,\"617\":2,\"664\":1,\"736\":2,\"778\":2,\"824\":2,\"877\":1}}],[\"有头尾节点\",{\"1\":{\"183\":1}}],[\"有可能客户端无法使用\",{\"1\":{\"566\":1}}],[\"有可能某个分段实际存储的数据量只有\",{\"1\":{\"531\":1}}],[\"有可能导致这个问题\",{\"1\":{\"177\":1}}],[\"有可能图片显示不成功\",{\"1\":{\"106\":1}}],[\"我要上学了\",{\"1\":{\"793\":2}}],[\"我要和你分手\",{\"1\":{\"574\":1}}],[\"我的名字叫张铁钢\",{\"1\":{\"793\":1}}],[\"我的名字叫\",{\"1\":{\"793\":1}}],[\"我出生了\",{\"1\":{\"793\":2}}],[\"我回复一句之后\",{\"1\":{\"583\":1}}],[\"我一辈子都不想再见到你\",{\"1\":{\"574\":1}}],[\"我先滚为敬\",{\"1\":{\"574\":1}}],[\"我已经收拾完了\",{\"1\":{\"574\":1}}],[\"我有事要跟你说\",{\"1\":{\"568\":1}}],[\"我听到了\",{\"1\":{\"568\":1}}],[\"我能听到\",{\"1\":{\"568\":1}}],[\"我是老张\",{\"1\":{\"568\":1}}],[\"我是老王\",{\"1\":{\"568\":1}}],[\"我是二哥呀\",{\"1\":{\"431\":1,\"540\":1,\"619\":1}}],[\"我是不系之舟\",{\"1\":{\"186\":1,\"227\":1,\"294\":2,\"373\":2,\"429\":2,\"454\":2,\"538\":2,\"617\":2,\"664\":1,\"736\":2,\"778\":2,\"824\":2,\"877\":1}}],[\"我用\",{\"1\":{\"406\":1}}],[\"我用我的\",{\"1\":{\"290\":1}}],[\"我早就该明白了\",{\"1\":{\"370\":1}}],[\"我应该找到的是32\",{\"1\":{\"169\":1}}],[\"我们使用prometheus和grafana来实现整个微服务集群的监控和告警\",{\"1\":{\"876\":1}}],[\"我们使用synchronized的时候\",{\"1\":{\"325\":1}}],[\"我们再来看下spring\",{\"1\":{\"865\":1}}],[\"我们再来看一个稍微详细一些的过程\",{\"1\":{\"793\":1}}],[\"我们再来看一个semaphore的用途\",{\"1\":{\"348\":1}}],[\"我们不能直接通过\",{\"1\":{\"795\":1}}],[\"我们不需要关心它们的创建过程和生命周期\",{\"1\":{\"435\":1}}],[\"我们不需要担心重排序的问题\",{\"1\":{\"321\":1}}],[\"我们一般接触不到直接编码的方式\",{\"1\":{\"794\":1}}],[\"我们一般把mybatis的功能架构分为三层\",{\"1\":{\"449\":1}}],[\"我们一个乞丐+破船版的\",{\"1\":{\"788\":1}}],[\"我们最核心的一个类\",{\"1\":{\"788\":1}}],[\"我们最后把整个的工作流程串联起来\",{\"1\":{\"448\":1}}],[\"我们大幅简化\",{\"1\":{\"788\":1}}],[\"我们简单地实现一个\",{\"1\":{\"788\":1}}],[\"我们想想一个工厂是怎么运行的呢\",{\"1\":{\"788\":1}}],[\"我们想在时候动态地获取类信息\",{\"1\":{\"289\":1}}],[\"我们都是在代码里创建对象和对象的依赖\",{\"1\":{\"787\":1}}],[\"我们都知道是一个容器\",{\"1\":{\"788\":1}}],[\"我们都知道定义的mapper接口是没有实现类的\",{\"1\":{\"450\":1}}],[\"我们都知道map的本质是一个个<key\",{\"1\":{\"310\":1}}],[\"我们都知道\",{\"1\":{\"173\":1,\"289\":1,\"311\":1,\"800\":1,\"817\":1}}],[\"我们要扣减库存\",{\"1\":{\"740\":1}}],[\"我们也很容易就想到\",{\"1\":{\"732\":1}}],[\"我们也可以安装专业的抗\",{\"1\":{\"614\":1}}],[\"我们判断缓存key是否存在\",{\"1\":{\"705\":1}}],[\"我们还可以在存储和缓存之前\",{\"1\":{\"703\":1}}],[\"我们还需要提交一下事务\",{\"1\":{\"435\":1}}],[\"我们通常使用\",{\"1\":{\"680\":1}}],[\"我们通常都是利用new方式来创建对象实例\",{\"1\":{\"289\":1}}],[\"我们很少使用\",{\"1\":{\"680\":1}}],[\"我们很多人喜欢玩的王者荣耀\",{\"1\":{\"345\":1}}],[\"我们在传统的i\",{\"1\":{\"664\":1}}],[\"我们在微信上聊天\",{\"1\":{\"583\":1}}],[\"我们先了解什么是i\",{\"1\":{\"664\":1}}],[\"我们先来分析一下使用threadlocal时的内存\",{\"1\":{\"311\":1}}],[\"我们上面的非阻塞i\",{\"1\":{\"663\":1}}],[\"我们叫⻚\",{\"1\":{\"653\":1}}],[\"我们实际的物理内存主要是主存\",{\"1\":{\"651\":1}}],[\"我们希望这段代码是互斥的\",{\"1\":{\"645\":1}}],[\"我们把对共享资源访问的程序片段称为临界区\",{\"1\":{\"645\":1}}],[\"我们把这个例子类比一下\",{\"1\":{\"348\":1}}],[\"我们前面知道线程和进程的关系\",{\"1\":{\"645\":1}}],[\"我们前面也看到了\",{\"1\":{\"448\":1}}],[\"我们常用的数据类型和编码对应的映射关系\",{\"1\":{\"729\":1}}],[\"我们常用的数据库连接池也用到了threadlocal\",{\"1\":{\"309\":1}}],[\"我们常常采用两级缓存\",{\"1\":{\"709\":1}}],[\"我们常说该程序在⽤户态执⾏\",{\"1\":{\"632\":1}}],[\"我们应该尽量提升路由器\",{\"1\":{\"614\":1}}],[\"我们需要\",{\"1\":{\"607\":1}}],[\"我们需要路由器记住每个\",{\"1\":{\"607\":1}}],[\"我们需要根据去判断表中有没有数据行被锁定\",{\"1\":{\"514\":1}}],[\"我们知道redis支持很多种结构的数据\",{\"1\":{\"722\":1}}],[\"我们知道属于不同局域网的主机可以使用相同的\",{\"1\":{\"605\":1}}],[\"我们知道\",{\"1\":{\"605\":1,\"798\":1}}],[\"我们看下简要流程\",{\"1\":{\"582\":1}}],[\"我们看一下跳跃表从表头到表尾\",{\"1\":{\"732\":1}}],[\"我们看一下升级的过程\",{\"1\":{\"327\":1}}],[\"我们看一下threadlocal的set\",{\"1\":{\"310\":1}}],[\"我们以输入\",{\"1\":{\"546\":1}}],[\"我们以simpleexecutor为例\",{\"1\":{\"448\":1}}],[\"我们新增一张\",{\"1\":{\"531\":1}}],[\"我们拿一个电商系统的下单举例\",{\"1\":{\"740\":1}}],[\"我们拿一张图看一下\",{\"1\":{\"559\":1}}],[\"我们拿这么一个用户表来表示行级锁\",{\"1\":{\"513\":1}}],[\"我们拿代码模拟这一场景\",{\"1\":{\"346\":1}}],[\"我们给其分配的\",{\"1\":{\"607\":1}}],[\"我们给\",{\"1\":{\"509\":1}}],[\"我们创建了一个组合索引\",{\"1\":{\"509\":1}}],[\"我们熟悉的两种存储引擎\",{\"1\":{\"506\":1}}],[\"我们将被查询的字段建立到联合索引中\",{\"1\":{\"489\":1}}],[\"我们的系统是面向用户的c端系统\",{\"1\":{\"741\":1}}],[\"我们的系统应用是一个典型的mvc架构\",{\"1\":{\"309\":1}}],[\"我们的服务器\",{\"1\":{\"740\":1}}],[\"我们的\",{\"1\":{\"483\":1,\"788\":1}}],[\"我们已经大概知道了mybatis的工作流程\",{\"1\":{\"448\":1}}],[\"我们已经知道了\",{\"1\":{\"428\":1}}],[\"我们就知道为什么\",{\"1\":{\"800\":1}}],[\"我们就称之为接受窗口大小\",{\"1\":{\"583\":1}}],[\"我们就需要把它们封装成一个map了\",{\"1\":{\"445\":1}}],[\"我们就可以考虑用\",{\"1\":{\"293\":1}}],[\"我们就可以在编译或者运行阶段去识别这些标记\",{\"1\":{\"287\":1}}],[\"我们线上采用了设计比较优秀的\",{\"1\":{\"406\":1}}],[\"我们比较关注服务的响应速度\",{\"1\":{\"406\":1}}],[\"我们比较熟悉的双重校验单例模式就是一个经典的指令重排的例子\",{\"1\":{\"319\":1}}],[\"我们从一个\",{\"1\":{\"382\":1}}],[\"我们自己编写mybatis\",{\"1\":{\"453\":1}}],[\"我们自己的实现就是完成这个核心流程\",{\"1\":{\"370\":1}}],[\"我们自己实现\",{\"1\":{\"370\":1}}],[\"我们银行系统已经瘫痪\",{\"1\":{\"353\":1}}],[\"我们用的是elk\",{\"1\":{\"877\":1}}],[\"我们用cyclicbarrier就可以实现\",{\"1\":{\"346\":1}}],[\"我们用比较常用的是seata\",{\"1\":{\"208\":1}}],[\"我们来分模块\",{\"1\":{\"784\":1}}],[\"我们来看一个常见的小场景\",{\"1\":{\"806\":1}}],[\"我们来看一个映射\",{\"1\":{\"652\":1}}],[\"我们来看一下三级缓存解决循环依赖的过程\",{\"1\":{\"800\":1}}],[\"我们来看一下获取mapper的过程\",{\"1\":{\"450\":1}}],[\"我们来看看怎么预防和处理\",{\"1\":{\"704\":1}}],[\"我们来看看i\",{\"1\":{\"664\":1}}],[\"我们来看看它的状态变化\",{\"1\":{\"327\":1}}],[\"我们来看看详情\",{\"1\":{\"169\":1}}],[\"我们来还原一下事情的经过\",{\"1\":{\"346\":1}}],[\"我们声明一个\",{\"1\":{\"322\":1}}],[\"我们可能要为每个客户端分配一个进程\",{\"1\":{\"664\":1}}],[\"我们可能认为\",{\"1\":{\"464\":1}}],[\"我们可能无法感知任务出现了异常\",{\"1\":{\"366\":1}}],[\"我们可能都知道hashmap使用了链表来解决冲突\",{\"1\":{\"313\":1}}],[\"我们可能需要大面积地修改代码\",{\"1\":{\"309\":1}}],[\"我们可以不用关心对象间的依赖\",{\"1\":{\"787\":1}}],[\"我们可以把日志记录和数据校验可重用的功能模块分离出来\",{\"1\":{\"804\":1}}],[\"我们可以把请求扔到队列里面\",{\"1\":{\"740\":1}}],[\"我们可以把栈的内存设大一点\",{\"1\":{\"388\":1}}],[\"我们可以升级主机服务器硬件\",{\"1\":{\"614\":1}}],[\"我们可以观察一些支付系统\",{\"1\":{\"531\":1}}],[\"我们可以获取\",{\"1\":{\"523\":1}}],[\"我们可以通过截取字段的前面一部分内容建立索引\",{\"1\":{\"497\":1}}],[\"我们可以假设不采用两阶段提交的方式\",{\"1\":{\"482\":1}}],[\"我们可以自定义类加载器\",{\"1\":{\"428\":1}}],[\"我们可以回答\",{\"1\":{\"406\":1}}],[\"我们可以对正在处理和阻塞队列的任务做事务管理或者对阻塞队列中的任务持久化处理\",{\"1\":{\"371\":1}}],[\"我们可以启动几十个线程并发地读取\",{\"1\":{\"348\":1}}],[\"我们可以认为\",{\"1\":{\"236\":1}}],[\"我们可以简单看看hashmap的扩容机制\",{\"1\":{\"168\":1}}],[\"我们能够将\",{\"1\":{\"294\":1}}],[\"我们对一个集合做几个常见操作\",{\"1\":{\"294\":1}}],[\"我们对注解标记的类\",{\"1\":{\"289\":1}}],[\"我们经常接触到的新特性如下\",{\"1\":{\"291\":1}}],[\"我们经常会看到这样的代码\",{\"1\":{\"282\":1}}],[\"我们认为两个人的编号和姓名相同\",{\"1\":{\"257\":1}}],[\"我们平时覆盖的\",{\"1\":{\"257\":1}}],[\"我们设的比较小的话\",{\"1\":{\"173\":1}}],[\"我们到现在已经知道\",{\"1\":{\"171\":1}}],[\"我觉得稳了\",{\"1\":{\"150\":1,\"186\":1,\"188\":1,\"229\":1,\"294\":1,\"296\":1,\"375\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"我下载的是这个\",{\"1\":{\"113\":1}}],[\"我使用的是gitee进行部署\",{\"1\":{\"106\":1}}],[\"我决定试一试\",{\"1\":{\"106\":1}}],[\"我想把前面的图标去除或更改图标\",{\"1\":{\"70\":1}}],[\"返回静态错误页面等\",{\"1\":{\"856\":1}}],[\"返回默认响应\",{\"1\":{\"856\":1}}],[\"返回认证信息的字符串形式\",{\"1\":{\"849\":1}}],[\"返回通知\",{\"1\":{\"804\":1}}],[\"返回的\",{\"1\":{\"784\":1,\"817\":1}}],[\"返回发送方\",{\"1\":{\"582\":1}}],[\"返回给\",{\"1\":{\"815\":1}}],[\"返回给浏览器\",{\"1\":{\"566\":1}}],[\"返回给调用者\",{\"1\":{\"448\":1}}],[\"返回www\",{\"1\":{\"547\":1}}],[\"返回负责baidu\",{\"1\":{\"547\":1}}],[\"返回数据量少\",{\"1\":{\"493\":1}}],[\"返回执行结果\",{\"1\":{\"473\":1}}],[\"返回相应的对象\",{\"1\":{\"448\":1}}],[\"返回相应的值\",{\"1\":{\"270\":1}}],[\"返回未执行的任务列表\",{\"1\":{\"358\":1}}],[\"返回值是\",{\"1\":{\"294\":1}}],[\"返回前先执行\",{\"1\":{\"276\":1}}],[\"返回类的名字\",{\"1\":{\"272\":1}}],[\"返回指定基数中字符表示的数值\",{\"1\":{\"270\":1}}],[\"返回\",{\"1\":{\"167\":1,\"302\":1,\"306\":1,\"546\":1}}],[\"返回list<map<string\",{\"1\":{\"97\":1}}],[\"返回list\",{\"0\":{\"97\":1}}],[\"返回list类型\",{\"0\":{\"96\":1}}],[\"返回map类型\",{\"0\":{\"95\":1}}],[\"9m\",{\"1\":{\"763\":1}}],[\"97\",{\"1\":{\"666\":1}}],[\"9发送该信号\",{\"1\":{\"641\":1}}],[\"900\",{\"1\":{\"531\":1}}],[\"99\",{\"1\":{\"465\":2}}],[\"9999\",{\"1\":{\"463\":1}}],[\"9999999\",{\"1\":{\"465\":2}}],[\"999999\",{\"1\":{\"272\":1,\"463\":2}}],[\"92\",{\"1\":{\"296\":1}}],[\"9300+\",{\"1\":{\"159\":2,\"186\":2,\"193\":2,\"198\":2,\"208\":2,\"222\":2,\"225\":2,\"227\":2,\"236\":2,\"245\":2,\"261\":2,\"267\":2,\"270\":2,\"294\":2,\"306\":2,\"315\":2,\"322\":2,\"343\":2,\"349\":2,\"373\":2,\"408\":2,\"419\":2,\"429\":2,\"446\":2,\"451\":2,\"454\":2,\"473\":2,\"477\":2,\"483\":2,\"493\":2,\"510\":2,\"516\":2,\"523\":2,\"534\":2,\"538\":2,\"544\":2,\"549\":2,\"566\":2,\"595\":2,\"600\":2,\"609\":2,\"617\":2,\"629\":2,\"633\":2,\"649\":2,\"658\":2,\"664\":2,\"674\":2,\"680\":2,\"699\":2,\"713\":2,\"720\":2,\"727\":2,\"734\":2,\"736\":2,\"751\":2,\"767\":2,\"778\":2,\"785\":2,\"802\":2,\"807\":2,\"813\":2,\"817\":2,\"824\":2,\"832\":2,\"838\":2,\"843\":2,\"851\":2,\"861\":2,\"865\":2,\"868\":2,\"874\":2,\"877\":2}}],[\"9\",{\"0\":{\"162\":1,\"210\":1,\"240\":1,\"306\":1,\"386\":1,\"441\":1,\"466\":1,\"552\":1,\"677\":1,\"753\":1,\"793\":1,\"838\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"252\":1,\"266\":1,\"418\":1,\"465\":2,\"488\":3,\"534\":1,\"583\":1,\"587\":1,\"641\":2,\"666\":1,\"725\":1,\"793\":3,\"879\":2}}],[\"987\",{\"1\":{\"91\":1}}],[\"9️⃣\",{\"1\":{\"64\":1}}],[\"该项目包括\",{\"1\":{\"831\":1}}],[\"该项目包含了许多流行的\",{\"1\":{\"830\":1}}],[\"该请求该由哪个\",{\"1\":{\"816\":1,\"817\":1}}],[\"该注解通常跟\",{\"1\":{\"784\":1}}],[\"该注解为一个组合注解\",{\"1\":{\"784\":2}}],[\"该特殊队列称为死信队列\",{\"1\":{\"766\":1}}],[\"该命令能够以非阻塞的方式\",{\"1\":{\"719\":1}}],[\"该sentinel节点会通过sentinel\",{\"1\":{\"688\":1}}],[\"该系统调⽤\",{\"1\":{\"662\":1}}],[\"该系统就可以运行\",{\"1\":{\"234\":1}}],[\"该⻚⾯的访问计数器就累加\",{\"1\":{\"658\":1}}],[\"该算法假设已经很久没有使⽤的⻚⾯很有可能在未来较⻓的⼀段时间内仍然不会被使⽤\",{\"1\":{\"658\":1}}],[\"该算法实现需要计算内存中每个逻辑⻚⾯的下⼀次访问时间\",{\"1\":{\"658\":1}}],[\"该进程可以执行一个时间片\",{\"1\":{\"640\":1}}],[\"该进程正在等待某⼀事件发⽣\",{\"1\":{\"637\":1}}],[\"该时刻进程占⽤\",{\"1\":{\"637\":1}}],[\"该方式靠的是发送大量带有被害者\",{\"1\":{\"614\":1}}],[\"该方法如果发现当前线程被中断\",{\"1\":{\"302\":1}}],[\"该主机首先将发送端的\",{\"1\":{\"606\":1}}],[\"该协议能够从根本上解决\",{\"1\":{\"605\":1}}],[\"该协议能够有效解决\",{\"1\":{\"605\":1}}],[\"该协议使得空闲的\",{\"1\":{\"605\":1}}],[\"该版本可以被访问\",{\"1\":{\"523\":1}}],[\"该版本不可以被访问\",{\"1\":{\"523\":1}}],[\"该条记录的示例图如下\",{\"1\":{\"523\":1}}],[\"该事务对数据库所作的操作更改\",{\"1\":{\"518\":1}}],[\"该\",{\"1\":{\"446\":1,\"784\":2,\"797\":1}}],[\"该模式下它为每个语句的执行创建一个新的预处理语句\",{\"1\":{\"445\":1}}],[\"该属性的值是不一样的\",{\"1\":{\"445\":1}}],[\"该属性是必须指定的\",{\"1\":{\"445\":1}}],[\"该怎么做呢\",{\"1\":{\"428\":1}}],[\"该怎么办呢\",{\"1\":{\"300\":1}}],[\"该类加载器在此目录里面查找并加载\",{\"1\":{\"423\":1}}],[\"该类将整数值与引用关联起来\",{\"1\":{\"340\":1}}],[\"该参数在\",{\"1\":{\"353\":1}}],[\"该如何避免死锁呢\",{\"1\":{\"342\":1}}],[\"该如何避免\",{\"0\":{\"342\":1}}],[\"该状态表示线程池彻底终止\",{\"1\":{\"367\":1}}],[\"该状态表明所有的任务已经运行终止\",{\"1\":{\"367\":1}}],[\"该状态的线程不会接收新任务\",{\"1\":{\"367\":1}}],[\"该状态的线程池不会接收新任务\",{\"1\":{\"367\":1}}],[\"该状态的线程池会接收新任务\",{\"1\":{\"367\":1}}],[\"该状态达到阈值40则执行批量撤销\",{\"1\":{\"328\":1}}],[\"该状态达到阈值20则执行批量重偏向\",{\"1\":{\"328\":1}}],[\"该状态不同于\",{\"1\":{\"303\":1}}],[\"该机制允许程序员在编译时检测到非法的类型\",{\"1\":{\"285\":1}}],[\"该对象中包含了执行\",{\"1\":{\"448\":1}}],[\"该对象又不需要被回收了\",{\"1\":{\"256\":1}}],[\"该对象被回收的时候被调用\",{\"1\":{\"256\":1}}],[\"该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法\",{\"1\":{\"248\":1}}],[\"该pojo的stumap属性为map类型\",{\"1\":{\"91\":1}}],[\"该pojo的stuarray属性为array类型\",{\"1\":{\"90\":1}}],[\"该pojo的stulist属性为list集合类型\",{\"1\":{\"89\":1}}],[\"该标识任意指定即可\",{\"1\":{\"86\":1}}],[\"其本质是通过\",{\"1\":{\"809\":1}}],[\"其本质实现为消息拉取线程在从服务器拉取到一批消息后\",{\"1\":{\"777\":1}}],[\"其原理是通过字节码技术为一个类创建子类\",{\"1\":{\"806\":1}}],[\"其原理是在发送某一个数据以后就开启一个计时器\",{\"1\":{\"591\":1}}],[\"其设置类型包括\",{\"1\":{\"784\":1}}],[\"其核心设计理念是在一个消息消费队列在同一时间只允许被同一消费组内的一个消费者消费\",{\"1\":{\"777\":1}}],[\"其作用是为了降低\",{\"1\":{\"726\":1}}],[\"其余sentinel节点发送一条ping命令做一次心跳检测\",{\"1\":{\"688\":1}}],[\"其余的参与者则因为没有收到通知一直处于阻塞状态\",{\"1\":{\"202\":1}}],[\"其整个运行时间与当前进程的剩余时间作比较\",{\"1\":{\"640\":1}}],[\"其秘钥长度最长只有\",{\"1\":{\"617\":1}}],[\"其运算速度较慢\",{\"1\":{\"617\":1}}],[\"其私钥长度一般较长\",{\"1\":{\"617\":1}}],[\"其可以实现\",{\"1\":{\"605\":1}}],[\"其相当于一个人的身份证号\",{\"1\":{\"604\":1}}],[\"其后的报文段已经被接收端接收但却迟迟得不到确认\",{\"1\":{\"591\":1}}],[\"其次是spring\",{\"1\":{\"831\":1}}],[\"其次这样还是又违反了cap中的a的设计\",{\"1\":{\"770\":1}}],[\"其次\",{\"1\":{\"591\":1,\"662\":1}}],[\"其值是收到的\",{\"1\":{\"580\":1}}],[\"其基本架构是\",{\"1\":{\"526\":1}}],[\"其基于令牌桶算法\",{\"1\":{\"227\":1}}],[\"其二是按照索引顺序扫描得出的结果自然是有序的\",{\"1\":{\"491\":1}}],[\"其一是对结果集进行排序的操作\",{\"1\":{\"491\":1}}],[\"其对查询性能的影响更大\",{\"1\":{\"490\":1}}],[\"其存储作用域为sqlsession\",{\"1\":{\"446\":1}}],[\"其指针有可能被返回或者被全局引用\",{\"1\":{\"408\":1}}],[\"其结构如图所示\",{\"1\":{\"386\":1}}],[\"其区别只是虚拟机栈为虚拟机执行\",{\"1\":{\"379\":1}}],[\"其它几种\",{\"1\":{\"741\":1}}],[\"其它的注册中心\",{\"1\":{\"837\":1}}],[\"其它的都可以异步去做\",{\"1\":{\"740\":1}}],[\"其它的原子操作类基本都是大同小异\",{\"1\":{\"341\":1}}],[\"其它级别的页表一来可以在需要的时候才被创建\",{\"1\":{\"654\":1}}],[\"其它人可能就答应了\",{\"1\":{\"604\":1}}],[\"其它获取该锁的线程会被阻塞而被放入该锁的阻塞队列里面\",{\"1\":{\"332\":1}}],[\"其它线程应该被阻止进入临界区\",{\"1\":{\"645\":1}}],[\"其它线程就会在获取失败后被阻塞\",{\"1\":{\"331\":1}}],[\"其它线程无法获取主内存中的共享变量\",{\"1\":{\"326\":1}}],[\"其它线程能够立即知道这个修改\",{\"1\":{\"318\":1}}],[\"其内部提供了对各种优秀框架\",{\"1\":{\"782\":1}}],[\"其内部定义了一个节点类node\",{\"1\":{\"331\":1}}],[\"其内部调用的是\",{\"1\":{\"302\":1}}],[\"其含义是\",{\"1\":{\"302\":1,\"306\":1}}],[\"其实面试一般都是结合项目去问\",{\"1\":{\"824\":1}}],[\"其实这还是由于使用\",{\"1\":{\"813\":1}}],[\"其实正确答案是开发人员做好设计\",{\"1\":{\"800\":1}}],[\"其实可以划分为两个阶段\",{\"1\":{\"792\":1}}],[\"其实可以不用怎么了解\",{\"1\":{\"477\":1}}],[\"其实一定程序的不一致是可以接受的\",{\"1\":{\"708\":1}}],[\"其实是利用时间片的轮转\",{\"1\":{\"635\":1}}],[\"其实是会生成新的对象\",{\"1\":{\"266\":1}}],[\"其实还有更好的处理方式\",{\"1\":{\"588\":1}}],[\"其实都是读全表\",{\"1\":{\"493\":1}}],[\"其实都存在一定的关联\",{\"1\":{\"278\":1}}],[\"其实绕一圈\",{\"1\":{\"450\":1}}],[\"其实发生在双亲委派模型出现之前\",{\"1\":{\"427\":1}}],[\"其实就是历史原因\",{\"1\":{\"673\":1}}],[\"其实就是等于\",{\"1\":{\"548\":1}}],[\"其实就是用来验证序列化的对象和反序列化对应的对象\",{\"1\":{\"282\":1}}],[\"其实就体现了分治思想\",{\"1\":{\"373\":1}}],[\"其实除此之外\",{\"1\":{\"340\":1}}],[\"其实它是没有实现map接口的\",{\"1\":{\"312\":1}}],[\"其实很大概率还会出一些笔试题\",{\"1\":{\"306\":1}}],[\"其实在上面的preparestatement已经对参数进行了预编译处理\",{\"1\":{\"448\":1}}],[\"其实在\",{\"1\":{\"305\":1}}],[\"其实在工作中已经很常用了\",{\"1\":{\"290\":1}}],[\"其实字符流是由\",{\"1\":{\"279\":1}}],[\"其实\",{\"1\":{\"278\":1,\"408\":1,\"591\":1,\"699\":1}}],[\"其实剩下的就是一个简单的字符串遍历计算\",{\"1\":{\"270\":1}}],[\"其实相对也比较少\",{\"1\":{\"197\":1}}],[\"其中工厂方法注入\",{\"1\":{\"795\":1}}],[\"其中容器启动阶段主要做的工作是加载和解析配置文件\",{\"1\":{\"792\":1}}],[\"其中调用rebalanceimpl实例的computepullfromwhere\",{\"1\":{\"777\":1}}],[\"其中包含了\",{\"1\":{\"777\":1}}],[\"其中包含恶意代码\",{\"1\":{\"615\":1}}],[\"其中c++不成熟\",{\"1\":{\"742\":1}}],[\"其中collection是集合list\",{\"1\":{\"152\":1}}],[\"其中设计到程序由用户态切换到内核态\",{\"1\":{\"726\":1}}],[\"其中内核态线程数量较少\",{\"1\":{\"644\":1}}],[\"其中头部结构大小固定\",{\"1\":{\"595\":1}}],[\"其中插入了\",{\"1\":{\"513\":1}}],[\"其中验证\",{\"1\":{\"421\":1}}],[\"其中元空间被打满\",{\"1\":{\"417\":1}}],[\"其中一种重要的技术叫做逃逸分析\",{\"1\":{\"408\":1}}],[\"其中有10w个key是以某个固定的已知的前缀开头的\",{\"0\":{\"736\":1}}],[\"其中有2\",{\"1\":{\"698\":1}}],[\"其中有两个标记位置\",{\"1\":{\"483\":1}}],[\"其中有一部分优化的目的就是减少内存堆分配压力\",{\"1\":{\"408\":1}}],[\"其中有隐含的强制类型转换\",{\"1\":{\"239\":1}}],[\"其中又分为\",{\"1\":{\"397\":1}}],[\"其中的关键在于二次确认以及消息回查\",{\"1\":{\"765\":1}}],[\"其中的虚拟节点称为\",{\"1\":{\"695\":1}}],[\"其中的标记过程仍然与\",{\"1\":{\"395\":1}}],[\"其中的线程会等待所有的线程完成任务\",{\"1\":{\"347\":1}}],[\"其中方法区和堆是线程共享区\",{\"1\":{\"379\":1}}],[\"其中用到了线程池来管理线程\",{\"1\":{\"352\":1}}],[\"其中控制器包含一组寄存器和操作控制器\",{\"1\":{\"317\":1}}],[\"其中就包括我们在老版本中经常见到的\",{\"1\":{\"292\":1}}],[\"其中栈中存储了基本数据类型和引用数据类型实例的地址\",{\"1\":{\"259\":1}}],[\"其中\",{\"1\":{\"161\":1,\"274\":1,\"342\":1,\"515\":1,\"552\":1,\"554\":1,\"687\":1,\"771\":1,\"772\":1,\"777\":1,\"788\":1}}],[\"其中token别忘记复制保存一下\",{\"1\":{\"111\":1}}],[\"其属性中有集合类型时\",{\"1\":{\"89\":1}}],[\"其他实例可以接管其工作\",{\"1\":{\"838\":1}}],[\"其他实例仍然可以提供服务\",{\"1\":{\"838\":1}}],[\"其他服务就可以通过注册中心获取到当前可用的服务列表\",{\"1\":{\"834\":1}}],[\"其他异常不会触发回滚事务\",{\"1\":{\"813\":1}}],[\"其他模块都是可选\",{\"1\":{\"783\":1}}],[\"其他组master\",{\"1\":{\"767\":1}}],[\"其他问题\",{\"0\":{\"735\":1}}],[\"其他不变\",{\"1\":{\"720\":1}}],[\"其他sentinel节点发送ping命令做心跳检测\",{\"1\":{\"688\":1}}],[\"其他进程也访问该资源\",{\"1\":{\"641\":1}}],[\"其他流不会受到影响\",{\"1\":{\"559\":1}}],[\"其他情况\",{\"1\":{\"538\":1}}],[\"其他任何事务都不能对该数据进行修改\",{\"1\":{\"515\":1}}],[\"其他代码\",{\"1\":{\"389\":1}}],[\"其他几个运行时区域都有发生内存溢出\",{\"1\":{\"388\":1}}],[\"其他线程等待重建缓存的线程执行完\",{\"1\":{\"712\":1}}],[\"其他线程不受影响\",{\"1\":{\"347\":1}}],[\"其他线程调用了线程a的\",{\"1\":{\"302\":1}}],[\"其他请求则等待\",{\"1\":{\"225\":1}}],[\"其他⽅法都是直接调⽤\",{\"1\":{\"186\":1}}],[\"其他\",{\"0\":{\"53\":1,\"64\":1,\"906\":1},\"2\":{\"58\":1,\"66\":1}}],[\"如文件输入\",{\"1\":{\"877\":1}}],[\"如文件\",{\"1\":{\"877\":1}}],[\"如请求转发\",{\"1\":{\"865\":1}}],[\"如path\",{\"1\":{\"865\":1}}],[\"如protocol\",{\"1\":{\"845\":1}}],[\"如服务发现\",{\"1\":{\"864\":1}}],[\"如服务调用的复杂性\",{\"1\":{\"832\":1}}],[\"如将请求从http转换为websocket\",{\"1\":{\"863\":1}}],[\"如oauth\",{\"1\":{\"863\":1}}],[\"如客户端ip地址\",{\"1\":{\"851\":1}}],[\"如web开发\",{\"1\":{\"845\":1}}],[\"如二进制\",{\"1\":{\"845\":1}}],[\"如nacos\",{\"1\":{\"837\":1}}],[\"如node\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"如dubbo\",{\"1\":{\"832\":1}}],[\"如resttemplate\",{\"1\":{\"832\":1}}],[\"如reentrantlock\",{\"1\":{\"339\":1}}],[\"如eureka\",{\"1\":{\"830\":1,\"846\":1}}],[\"如json\",{\"1\":{\"830\":1}}],[\"如jdbc\",{\"1\":{\"445\":1}}],[\"如tcp\",{\"1\":{\"830\":1,\"845\":1}}],[\"如网络延迟\",{\"1\":{\"829\":1}}],[\"如http\",{\"1\":{\"828\":1}}],[\"如hgetall改为hmget等\",{\"1\":{\"718\":1}}],[\"如量度工具\",{\"1\":{\"819\":1}}],[\"如类\",{\"1\":{\"807\":1}}],[\"如日志收集\",{\"1\":{\"804\":1}}],[\"如构造方法的结构\",{\"1\":{\"796\":1}}],[\"如集群内有n个持有槽的主节\",{\"1\":{\"698\":1}}],[\"如扩容或收缩节点\",{\"1\":{\"693\":1}}],[\"如可由代码分段\",{\"1\":{\"652\":1}}],[\"如内存空间\",{\"1\":{\"642\":1}}],[\"如寄存器和栈\",{\"1\":{\"642\":1}}],[\"如信号量\",{\"1\":{\"641\":1}}],[\"如除零操作\",{\"1\":{\"641\":1}}],[\"如等待输⼊\",{\"1\":{\"637\":1}}],[\"如等待可中断\",{\"1\":{\"330\":1}}],[\"如<a\",{\"1\":{\"615\":1}}],[\"如上图中\",{\"1\":{\"593\":1}}],[\"如上图右边部分\",{\"1\":{\"564\":1}}],[\"如上图左边部分\",{\"1\":{\"564\":1}}],[\"如上图所示\",{\"1\":{\"313\":1}}],[\"如innodb\",{\"1\":{\"519\":1}}],[\"如根节点磁盘包含数据项\",{\"1\":{\"501\":1}}],[\"如性别\",{\"1\":{\"499\":1}}],[\"如sqlsession\",{\"1\":{\"451\":1}}],[\"如多个应用都要依赖\",{\"1\":{\"429\":1}}],[\"如同它的名字\",{\"1\":{\"401\":1}}],[\"如下是\",{\"1\":{\"418\":1}}],[\"如下\",{\"1\":{\"348\":1,\"523\":1,\"583\":2,\"845\":1}}],[\"如下所示\",{\"1\":{\"88\":1,\"90\":1}}],[\"如何治理\",{\"1\":{\"824\":1}}],[\"如何提供对外网关\",{\"1\":{\"824\":1}}],[\"如何自定义一个\",{\"0\":{\"821\":1}}],[\"如何达到发送端写的高可用性呢\",{\"1\":{\"767\":1}}],[\"如何处理这些事务的行为\",{\"1\":{\"811\":1}}],[\"如何处理消息重复的问题呢\",{\"0\":{\"757\":1}}],[\"如何处理大key\",{\"1\":{\"719\":1}}],[\"如何将它们全部找出来\",{\"0\":{\"736\":1}}],[\"如何找到大key\",{\"1\":{\"719\":1}}],[\"如何保证rocketmq的高可用\",{\"0\":{\"767\":1}}],[\"如何保证消息被成功消费\",{\"1\":{\"756\":1}}],[\"如何保证消息的可用性\",{\"0\":{\"753\":1}}],[\"如何保证本地缓存和分布式缓存的一致\",{\"0\":{\"709\":1}}],[\"如何保证缓存和数据库数据的⼀致性\",{\"0\":{\"706\":1}}],[\"如何保证多线程下i++\",{\"0\":{\"339\":1}}],[\"如何应对\",{\"1\":{\"615\":1}}],[\"如何防范\",{\"1\":{\"614\":1}}],[\"如何避免死锁呢\",{\"0\":{\"648\":1}}],[\"如何避免\",{\"0\":{\"613\":1,\"615\":1}}],[\"如何理解\",{\"0\":{\"565\":1}}],[\"如何理解其中各个字段的含义\",{\"0\":{\"493\":1}}],[\"如何设置长连接\",{\"1\":{\"560\":1}}],[\"如何实现消息过滤\",{\"0\":{\"762\":1}}],[\"如何实现延时队列\",{\"0\":{\"723\":1}}],[\"如何实现异步队列\",{\"0\":{\"722\":1}}],[\"如何实现长连接\",{\"0\":{\"560\":1}}],[\"如何实例化泛型类\",{\"1\":{\"285\":1}}],[\"如何定位呢\",{\"0\":{\"485\":1}}],[\"如何编写一个插件\",{\"0\":{\"453\":1},\"1\":{\"453\":1}}],[\"如何获取生成的主键\",{\"0\":{\"443\":1}}],[\"如何破坏双亲委派机制\",{\"0\":{\"426\":1}}],[\"如何判断对象仍然存活\",{\"0\":{\"390\":1}}],[\"如何才能找到类的元数据信息\",{\"1\":{\"382\":1}}],[\"如何解决的\",{\"1\":{\"730\":1}}],[\"如何解决\",{\"0\":{\"335\":1,\"713\":1}}],[\"如增加了适应性自旋\",{\"1\":{\"327\":1}}],[\"如哈希码\",{\"1\":{\"327\":1}}],[\"如图所示\",{\"1\":{\"386\":1}}],[\"如图\",{\"1\":{\"319\":1}}],[\"如\",{\"1\":{\"233\":1,\"412\":2,\"418\":2,\"428\":1,\"446\":1,\"470\":1,\"498\":1,\"501\":1,\"509\":1,\"519\":1,\"557\":1,\"676\":1,\"782\":1,\"824\":2}}],[\"如此cp也是可以保证的\",{\"1\":{\"192\":1}}],[\"如果所有参与者的本地事务都执行成功\",{\"1\":{\"872\":1}}],[\"如果所有参与者都返回正确的ack响应\",{\"1\":{\"203\":1}}],[\"如果某一环出了问题\",{\"1\":{\"867\":1}}],[\"如果某个消费者挂掉\",{\"1\":{\"745\":1}}],[\"如果某个版本的数据对当前事务不可见的话\",{\"1\":{\"523\":1}}],[\"如果某个线程出现问题\",{\"1\":{\"347\":1}}],[\"如果某个线程遇到了中断\",{\"1\":{\"347\":1}}],[\"如果请求满足断言的条件\",{\"1\":{\"865\":1}}],[\"如果请求超过了限流阈值\",{\"1\":{\"859\":1}}],[\"如果请求中没有\",{\"1\":{\"613\":1}}],[\"如果硬要说区别的话\",{\"1\":{\"845\":1}}],[\"如果配置发生变更\",{\"1\":{\"843\":1}}],[\"如果缓存中没有对应的信息\",{\"1\":{\"837\":1}}],[\"如果eureka\",{\"1\":{\"837\":1}}],[\"如果目标类是接口\",{\"1\":{\"812\":1}}],[\"如果多个\",{\"1\":{\"811\":1}}],[\"如果多线程同时更新这个变量\",{\"1\":{\"340\":1}}],[\"如果调用的方法是在新线程调用的\",{\"1\":{\"811\":1}}],[\"如果说单例\",{\"1\":{\"798\":1}}],[\"如果容器中没有找到和构造函数入参匹配类型的\",{\"1\":{\"796\":1}}],[\"如果容器中有一个\",{\"1\":{\"796\":1}}],[\"如果容器中刚好有一个\",{\"1\":{\"796\":1}}],[\"如果容器中刚好有一个名为\",{\"1\":{\"796\":1}}],[\"如果返回true\",{\"1\":{\"777\":1}}],[\"如果返回响应ok\",{\"1\":{\"754\":1}}],[\"如果未拉取到消息\",{\"1\":{\"777\":1}}],[\"如果关闭\",{\"1\":{\"776\":1}}],[\"如果上次请求的latency超过550lms\",{\"1\":{\"776\":1}}],[\"如果开启\",{\"1\":{\"776\":1}}],[\"如果选择合适的系统io调度算法\",{\"1\":{\"772\":1}}],[\"如果nameserver整个集群不可用\",{\"1\":{\"770\":1}}],[\"如果node是空的话\",{\"1\":{\"181\":1}}],[\"如果机器资源不足\",{\"1\":{\"767\":1}}],[\"如果还是未付款就取消订单释放库存\",{\"1\":{\"763\":1}}],[\"如果希望提高吞吐量\",{\"1\":{\"762\":1}}],[\"如果希望加入1个节点希望实现集群扩容时\",{\"1\":{\"699\":1}}],[\"如果你的业务有上述并发场景\",{\"1\":{\"742\":1}}],[\"如果你创建了一个threadlocal变量\",{\"1\":{\"308\":1}}],[\"如果空间不够的话\",{\"1\":{\"730\":1}}],[\"如果分值相同\",{\"1\":{\"729\":1}}],[\"如果逻辑执行到中间出现异常了\",{\"1\":{\"727\":1}}],[\"如果主线程发现距离上一次的fsync成功超过2秒\",{\"1\":{\"718\":1}}],[\"如果主节点的复制积压缓冲区内存在这部分数据则直接发送给从节点\",{\"1\":{\"685\":1}}],[\"如果主节点要求密码验证\",{\"1\":{\"684\":1}}],[\"如果redis的请求几万+\",{\"1\":{\"718\":1}}],[\"如果redis宕机\",{\"1\":{\"710\":1}}],[\"如果已经达到过期时间\",{\"1\":{\"716\":1}}],[\"如果都是构造器注入的化\",{\"1\":{\"800\":1}}],[\"如果都是1\",{\"1\":{\"705\":1}}],[\"如果都不满足\",{\"1\":{\"181\":1}}],[\"如果全不是1\",{\"1\":{\"705\":1}}],[\"如果全部相等\",{\"1\":{\"336\":1}}],[\"如果判断数据不不能再\",{\"1\":{\"703\":1}}],[\"如果下线节点是持有槽的主节点则需要在它\",{\"1\":{\"698\":1}}],[\"如果此过程没有选举出领导者\",{\"1\":{\"689\":1}}],[\"如果此时存储层添加了这个数据\",{\"1\":{\"703\":1}}],[\"如果此时删除\",{\"1\":{\"695\":1}}],[\"如果此时还有其它线程请求获取获取该资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"如果此时诊室内有其它患者就诊\",{\"1\":{\"325\":1}}],[\"如果此时诊室空闲\",{\"1\":{\"325\":1}}],[\"如果偏移量之后的数据存在缓冲区中\",{\"1\":{\"685\":1}}],[\"如果出现网络闪断或者命令丢失等异常情况时\",{\"1\":{\"685\":1}}],[\"如果出现丢包\",{\"1\":{\"586\":1}}],[\"如果只有几百几千\",{\"1\":{\"718\":1}}],[\"如果只需要数据在服务器运行的时候存在\",{\"1\":{\"678\":1}}],[\"如果只是使用简单分页\",{\"1\":{\"654\":1}}],[\"如果只是临时存放数据\",{\"1\":{\"476\":1}}],[\"如果只是访问对象本身的话\",{\"1\":{\"386\":1}}],[\"如果从节点执行全量复制操作\",{\"1\":{\"676\":1}}],[\"如果想达到足以媲美数据库的\",{\"1\":{\"678\":1}}],[\"如果想要最大程度利用cpu\",{\"1\":{\"673\":1}}],[\"如果想要修改会比较麻烦\",{\"1\":{\"664\":1}}],[\"如果想使用有序的map\",{\"1\":{\"182\":1}}],[\"如果fork操作本身耗时过长\",{\"1\":{\"718\":1}}],[\"如果follower在选举超时时间内没有收到leader的heartbeat\",{\"1\":{\"222\":1}}],[\"如果fd\",{\"1\":{\"664\":2}}],[\"如果服务端需要支持多个客户端\",{\"1\":{\"664\":1}}],[\"如果服务器有处于\",{\"1\":{\"579\":1}}],[\"如果服务器端就直接创建了这个连接并返回包含\",{\"1\":{\"569\":1}}],[\"如果内核实现的拷⻉效率不⾼\",{\"1\":{\"663\":1}}],[\"如果内存里没有空间\",{\"1\":{\"658\":1}}],[\"如果访问位是\",{\"1\":{\"658\":1}}],[\"如果cpu发现虚拟地址对应的物理页不在主存里\",{\"1\":{\"658\":1}}],[\"如果每个实例都需要一个个地去做这些配置\",{\"1\":{\"840\":1}}],[\"如果每个线程持有某种资源\",{\"1\":{\"646\":1}}],[\"如果每次回收的内存非常少\",{\"1\":{\"415\":1}}],[\"如果每次\",{\"1\":{\"415\":1}}],[\"如果其它线程进来读数据库的时候\",{\"1\":{\"707\":1}}],[\"如果其父进程没有忽略该信号也没有处理该信号\",{\"1\":{\"641\":1}}],[\"如果其宕机\",{\"1\":{\"202\":1}}],[\"如果新的进程需要的时间更少\",{\"1\":{\"640\":1}}],[\"如果时间片太小\",{\"1\":{\"640\":1}}],[\"如果子进程退出\",{\"1\":{\"638\":1}}],[\"如果用公钥对数据进行加密\",{\"1\":{\"616\":1}}],[\"如果用户自己也编写了一个名为\",{\"1\":{\"425\":1}}],[\"如果源主机一直没有收到\",{\"1\":{\"606\":1}}],[\"如果相同\",{\"1\":{\"606\":1}}],[\"如果中间节点是路由器\",{\"1\":{\"602\":1}}],[\"如果收到新数据的\",{\"1\":{\"589\":1}}],[\"如果再收到重复的\",{\"1\":{\"589\":1}}],[\"如果再笼统的回答\",{\"1\":{\"266\":1}}],[\"如果继续发送⼤量数据包\",{\"1\":{\"585\":1}}],[\"如果需要额外设置拦截\",{\"1\":{\"815\":1}}],[\"如果需要完成一些拦截处理\",{\"1\":{\"815\":1}}],[\"如果需要进行属性填充\",{\"1\":{\"802\":1}}],[\"如果需要将一份消息数据分发给多个消费者\",{\"1\":{\"743\":1}}],[\"如果需要收到确认应答\",{\"1\":{\"583\":1}}],[\"如果需原子地更新某个类里的某个字段时\",{\"1\":{\"340\":1}}],[\"如果网络非常拥堵\",{\"1\":{\"581\":1}}],[\"如果超过repl\",{\"1\":{\"685\":1}}],[\"如果超过水管的承受能力\",{\"1\":{\"585\":1}}],[\"如果超过了这个时间会被认为是丢包了\",{\"1\":{\"581\":1}}],[\"如果超过这个次数后还是通知失败\",{\"1\":{\"207\":1}}],[\"如果接收端的检验和有差错\",{\"1\":{\"581\":1}}],[\"如果接受者收到这个针对\",{\"1\":{\"216\":1}}],[\"如果端口被占用\",{\"1\":{\"579\":1}}],[\"如果客户端没有维持\",{\"1\":{\"578\":1}}],[\"如果客户端在相同端口建立新的连接\",{\"1\":{\"578\":1}}],[\"如果客户端收到服务端的\",{\"1\":{\"578\":1}}],[\"如果仍然没有回应\",{\"1\":{\"570\":1}}],[\"如果找到\",{\"1\":{\"566\":1}}],[\"如果同个浏览器发起第二次请求给服务器时\",{\"1\":{\"565\":1}}],[\"如果同时实现两个接⼝\",{\"1\":{\"252\":1}}],[\"如果值相同\",{\"1\":{\"564\":1}}],[\"如果证书验证通过\",{\"1\":{\"563\":1}}],[\"如果查找到也直接返回\",{\"1\":{\"547\":1}}],[\"如果查询语句使用了\",{\"1\":{\"464\":1}}],[\"如果查询的两个表大小相当\",{\"1\":{\"464\":1}}],[\"如果增加到\",{\"1\":{\"531\":1}}],[\"如果哪个新来的程序员不知道这样写代码\",{\"1\":{\"528\":1}}],[\"如果最后一个版本也不可见的话\",{\"1\":{\"523\":1}}],[\"如果被访问版本的\",{\"1\":{\"523\":4}}],[\"如果事务中的某个操作失败或者事务被明确地回滚\",{\"1\":{\"519\":1}}],[\"如果事务中的任何操作失败\",{\"1\":{\"519\":1}}],[\"如果事务顺利进行并最终提交\",{\"1\":{\"519\":1}}],[\"如果事务失败\",{\"1\":{\"519\":1}}],[\"如果事务的所有操作都成功执行\",{\"1\":{\"519\":1}}],[\"如果事务执行失败或调用了\",{\"1\":{\"479\":1}}],[\"如果事务执行失败\",{\"1\":{\"206\":1}}],[\"如果事务执行成功\",{\"1\":{\"206\":1}}],[\"如果按照兼容性\",{\"1\":{\"512\":1}}],[\"如果按锁粒度划分\",{\"1\":{\"512\":1}}],[\"如果树这种数据结构作为索引\",{\"1\":{\"503\":1}}],[\"如果它的访问位位是\",{\"1\":{\"658\":1}}],[\"如果它的节点\",{\"1\":{\"197\":1}}],[\"如果它退化成链表\",{\"1\":{\"503\":1}}],[\"如果字段类型是字符串\",{\"1\":{\"498\":1}}],[\"如果字符串常量池已经有\",{\"1\":{\"265\":1}}],[\"如果数据比较关键\",{\"1\":{\"720\":1}}],[\"如果数据表主要用来插入和查询记录\",{\"1\":{\"476\":1}}],[\"如果数组位置上已经有元素\",{\"1\":{\"175\":1}}],[\"如果数组满了\",{\"1\":{\"155\":1}}],[\"如果指定了\",{\"1\":{\"470\":1}}],[\"如果表只有一个字段\",{\"1\":{\"469\":1}}],[\"如果表多个列并且没有主键\",{\"1\":{\"469\":1}}],[\"如果合并没有刻意要删除重复行\",{\"1\":{\"468\":1}}],[\"如果两个表中一个较小\",{\"1\":{\"464\":1}}],[\"如果两个对象相等\",{\"1\":{\"258\":1}}],[\"如果插入数据的长度小于\",{\"1\":{\"461\":1}}],[\"如果存在则返\",{\"1\":{\"690\":1}}],[\"如果存在则返回\",{\"1\":{\"690\":1}}],[\"如果存在\",{\"1\":{\"566\":1}}],[\"如果存在某些被索引的列的判断条件时\",{\"1\":{\"510\":1}}],[\"如果存在签名的拦截方法\",{\"1\":{\"453\":1}}],[\"如果存在锁竞争\",{\"1\":{\"327\":1}}],[\"如果传入的参数是多个的时候\",{\"1\":{\"445\":1}}],[\"如果传入的是单参数且参数类型是一个array数组的时候\",{\"1\":{\"445\":1}}],[\"如果传入的是单参数且参数类型是一个list的时候\",{\"1\":{\"445\":1}}],[\"如果项目需要支持多种数据库\",{\"1\":{\"434\":1}}],[\"如果能将数据库记录封装成pojo对象解析比较方便\",{\"1\":{\"433\":1}}],[\"如果采用默认的双亲委派类加载机制\",{\"1\":{\"429\":1}}],[\"如果创建线程时还未设置\",{\"1\":{\"427\":1}}],[\"如果到这个时间了\",{\"1\":{\"412\":1}}],[\"如果逃逸分析能够确定一个变量不会逃逸出线程\",{\"1\":{\"408\":1}}],[\"如果确定一个对象不会逃逸到线程之外\",{\"1\":{\"408\":1}}],[\"如果响应失败\",{\"1\":{\"754\":1}}],[\"如果响应时间是高优先级的\",{\"1\":{\"407\":1}}],[\"如果响应时间比吞吐量优先级高\",{\"1\":{\"407\":1}}],[\"如果响应中不包含任何提案\",{\"1\":{\"216\":1}}],[\"如果优先考虑应用程序的峰值性能\",{\"1\":{\"407\":1}}],[\"如果应用程序有一个很小的内存空间\",{\"1\":{\"407\":1}}],[\"如果浮动垃圾太多\",{\"1\":{\"405\":1}}],[\"如果在预提交阶段中有任何一个资源管理器返回失败结果\",{\"1\":{\"871\":1}}],[\"如果在等待期间\",{\"1\":{\"843\":1}}],[\"如果在等待期间没有配置变更\",{\"1\":{\"843\":1}}],[\"如果在cluster\",{\"1\":{\"698\":1}}],[\"如果在这一间隔事件发生故障\",{\"1\":{\"677\":1}}],[\"如果在这期间\",{\"1\":{\"364\":1}}],[\"如果在延迟等待发送\",{\"1\":{\"584\":1}}],[\"如果在应用程序的全局范围内都没有设置过的话\",{\"1\":{\"427\":1}}],[\"如果在\",{\"1\":{\"400\":1,\"523\":1,\"727\":1}}],[\"如果方法区由永久代实现\",{\"1\":{\"399\":1}}],[\"如果单例对象持有外部的引用\",{\"1\":{\"389\":1}}],[\"如果使用aof恢复\",{\"1\":{\"679\":1}}],[\"如果使用\",{\"1\":{\"468\":2,\"477\":1,\"598\":1}}],[\"如果使用直接指针访问的话\",{\"1\":{\"386\":1}}],[\"如果使用句柄访问的话\",{\"1\":{\"386\":1}}],[\"如果使用了spring框架还需要捕获\",{\"1\":{\"225\":1}}],[\"如果比较大\",{\"1\":{\"373\":1}}],[\"如果足够小就直接执行任务\",{\"1\":{\"373\":1}}],[\"如果任务大于阈值\",{\"1\":{\"373\":1}}],[\"如果任务足够小就计算任务\",{\"1\":{\"373\":1}}],[\"如果任务到达了\",{\"1\":{\"351\":1}}],[\"如果限制了配置中心的使用\",{\"1\":{\"368\":1}}],[\"如果执行的命令有语法错误\",{\"1\":{\"724\":1}}],[\"如果执行时间相差不大\",{\"1\":{\"359\":1}}],[\"如果执行完启发式清理工作后\",{\"1\":{\"314\":1}}],[\"如果workqueue也满了则尝试用非核心线程执行任务\",{\"1\":{\"354\":1}}],[\"如果队列满了\",{\"1\":{\"353\":1}}],[\"如果这时候\",{\"1\":{\"853\":1}}],[\"如果这时候队列满了\",{\"1\":{\"353\":1}}],[\"如果这两条指令可以一起执行就不会出现问题\",{\"1\":{\"727\":1}}],[\"如果这次回收还没有足够的内存\",{\"1\":{\"392\":1}}],[\"如果这个时候恰巧锁没有被占用\",{\"1\":{\"333\":1}}],[\"如果这个连接不做任何事情会造成不必要的线程开销\",{\"1\":{\"280\":1}}],[\"如果这个值从来没有被任何提案设定过\",{\"1\":{\"215\":1}}],[\"如果担心有特殊情况发生\",{\"1\":{\"349\":1}}],[\"如果第一个线程先执行exchange\",{\"1\":{\"349\":1}}],[\"如果满了的停车场有车离开\",{\"1\":{\"348\":1}}],[\"如果停车场没位了\",{\"1\":{\"348\":1}}],[\"如果停车场还有空位\",{\"1\":{\"348\":1}}],[\"如果申请不到\",{\"1\":{\"342\":1,\"648\":1}}],[\"如果要遍历commitlog文件中根据topic检索消息是非常低效的\",{\"1\":{\"771\":1}}],[\"如果要提供提交\",{\"1\":{\"476\":1}}],[\"如果要原子更新多个变量\",{\"1\":{\"340\":1}}],[\"如果要保证一个代码块的原子性\",{\"1\":{\"318\":1}}],[\"如果对应的\",{\"1\":{\"778\":1}}],[\"如果对应小标正好没有存放数据\",{\"1\":{\"164\":1}}],[\"如果对数据结构掌握不错的话\",{\"1\":{\"729\":1}}],[\"如果对象还有可能被外部线程访问到\",{\"1\":{\"408\":1}}],[\"如果对象在在\",{\"1\":{\"393\":1}}],[\"如果对象在进行可达性分析后发现没有与\",{\"1\":{\"393\":1}}],[\"如果对象是一个\",{\"1\":{\"385\":1}}],[\"如果对多个变量操作时\",{\"1\":{\"338\":1}}],[\"如果一次读取文件时出现未命中pagecache的情况\",{\"1\":{\"772\":1}}],[\"如果一条消息被消费者consumer1消费了\",{\"1\":{\"744\":1}}],[\"如果一\",{\"1\":{\"685\":1}}],[\"如果一张表数据量大且是热表\",{\"1\":{\"537\":1}}],[\"如果一直循环执行\",{\"1\":{\"337\":1}}],[\"如果一个是构造器注入\",{\"1\":{\"799\":1}}],[\"如果一个消息拉取请求未拉取到消息\",{\"1\":{\"771\":1}}],[\"如果一个\",{\"1\":{\"744\":1,\"766\":1}}],[\"如果一个类加载器收到了类加载的请求\",{\"1\":{\"424\":1}}],[\"如果一个数据是基本数据类型\",{\"1\":{\"408\":1}}],[\"如果一个操作happens\",{\"1\":{\"320\":1}}],[\"如果一个线程a执行了thread\",{\"1\":{\"302\":1,\"306\":1}}],[\"如果一个接受者收到一个编号为mn的准备请求\",{\"1\":{\"215\":1}}],[\"如果该sentinel节点发现自己的票数已经大于等于max\",{\"1\":{\"689\":1}}],[\"如果该锁己经被其他线程持有\",{\"1\":{\"332\":1}}],[\"如果该数据已存在\",{\"1\":{\"225\":1}}],[\"如果锁当前没有被其它线程占用\",{\"1\":{\"332\":1}}],[\"如果共享资源被占用\",{\"1\":{\"331\":1}}],[\"如果成功\",{\"1\":{\"329\":1}}],[\"如果成员变量是使⽤\",{\"1\":{\"253\":1}}],[\"如果竞争成功\",{\"1\":{\"328\":1}}],[\"如果线程长期处于\",{\"1\":{\"414\":1}}],[\"如果线程池已满\",{\"1\":{\"370\":1}}],[\"如果线程池数太大\",{\"1\":{\"359\":1}}],[\"如果线程获取一个任务后\",{\"1\":{\"365\":1}}],[\"如果线程执行完任务\",{\"1\":{\"363\":1}}],[\"如果线程数等于核心线程\",{\"1\":{\"363\":1}}],[\"如果线程数少于核心线程\",{\"1\":{\"363\":1}}],[\"如果线程调用了\",{\"1\":{\"325\":1}}],[\"如果线程a执行操作threadb\",{\"1\":{\"320\":2}}],[\"如果线程a调用共享对象的wait\",{\"1\":{\"302\":1}}],[\"如果线程a遍历过程中\",{\"1\":{\"157\":1}}],[\"如果⼀个线程\",{\"1\":{\"324\":1}}],[\"如果操作之间不存在数据依赖关系\",{\"1\":{\"321\":1}}],[\"如果a\",{\"1\":{\"320\":1}}],[\"如果重试次数超过限制\",{\"1\":{\"570\":1}}],[\"如果重排序之后的执行结果\",{\"1\":{\"320\":1}}],[\"如果重复插入数据的话\",{\"1\":{\"225\":1}}],[\"如果父线程的inheritablethreadlocals不为空\",{\"1\":{\"315\":1}}],[\"如果我们只使用\",{\"1\":{\"607\":1}}],[\"如果我们再次将路由表分库分表\",{\"1\":{\"531\":1}}],[\"如果我们要对表进行全表扫描\",{\"1\":{\"504\":1}}],[\"如果我们希望将\",{\"1\":{\"428\":1}}],[\"如果我们插入一个value=27的数据\",{\"1\":{\"313\":1}}],[\"如果我们不知道编码类型就很容易出现乱码问题\",{\"1\":{\"279\":1}}],[\"如果threadlocal\",{\"1\":{\"311\":2}}],[\"如果try阶段执行失败\",{\"1\":{\"204\":1}}],[\"如果try阶段执行成功\",{\"1\":{\"204\":1}}],[\"如果直接调用thread的run\",{\"1\":{\"301\":1}}],[\"如果涉及到字符的话使用字符流比较好\",{\"1\":{\"279\":1}}],[\"如果音频文件\",{\"1\":{\"279\":1}}],[\"如果整型字面量的值在\",{\"1\":{\"269\":1}}],[\"如果拼接多次\",{\"1\":{\"266\":1}}],[\"如果有任何一个参与者的本地事务执行失败\",{\"1\":{\"872\":1}}],[\"如果有线程进来读取数据\",{\"1\":{\"707\":1}}],[\"如果有的话\",{\"1\":{\"513\":1}}],[\"如果有权限会先查询缓存\",{\"1\":{\"473\":1}}],[\"如果有主键\",{\"1\":{\"469\":1}}],[\"如果有基础类型又要调用回用户的代码\",{\"1\":{\"427\":1}}],[\"如果有\",{\"1\":{\"362\":1,\"364\":1,\"606\":1}}],[\"如果有则不去抢锁\",{\"1\":{\"333\":1}}],[\"如果有则直接使用\",{\"1\":{\"265\":1}}],[\"如果有些变量不想序列化\",{\"1\":{\"282\":1}}],[\"如果有多个线程在等待只会任意唤醒一个\",{\"1\":{\"272\":1}}],[\"如果有并发请求同时提交到数据库\",{\"1\":{\"196\":1}}],[\"如果没有变更\",{\"1\":{\"843\":2}}],[\"如果没有取到\",{\"1\":{\"788\":1}}],[\"如果没有拉到数据\",{\"1\":{\"778\":1}}],[\"如果没有数据\",{\"1\":{\"778\":1}}],[\"如果没有可删除的键对象\",{\"1\":{\"717\":1}}],[\"如果没有同意过其他sentinel节点的sentinel\",{\"1\":{\"689\":1}}],[\"如果没有开启aof持久化功能则自动执行bgsave\",{\"1\":{\"676\":1}}],[\"如果没有出现丢包\",{\"1\":{\"586\":1}}],[\"如果没有第三次握手告诉服务器端客户端收的到服务器端传输的数据的话\",{\"1\":{\"569\":1}}],[\"如果没有找到\",{\"1\":{\"566\":1}}],[\"如果没有收到对方的\",{\"1\":{\"560\":1}}],[\"如果没有设定主键或者非空唯一索引\",{\"1\":{\"477\":1}}],[\"如果没有缓存\",{\"1\":{\"473\":1}}],[\"如果没有权限\",{\"1\":{\"473\":1}}],[\"如果没有空闲线程\",{\"1\":{\"364\":1}}],[\"如果没有\",{\"1\":{\"362\":1,\"382\":1,\"606\":1}}],[\"如果没有显示指定\",{\"1\":{\"282\":1}}],[\"如果没有则会在常量池中创建\",{\"1\":{\"265\":1}}],[\"如果没有重写\",{\"1\":{\"258\":1}}],[\"如果没有使⽤\",{\"1\":{\"253\":1}}],[\"如果为引⽤数据类型\",{\"1\":{\"253\":1}}],[\"如果局部变量类型为基本数据类型\",{\"1\":{\"253\":1}}],[\"如果\",{\"1\":{\"241\":1,\"383\":1,\"395\":1,\"398\":1,\"418\":1,\"458\":1,\"470\":1,\"477\":1,\"481\":1,\"508\":1,\"509\":1,\"515\":2,\"591\":2,\"606\":1,\"645\":2,\"678\":1,\"717\":1,\"720\":1,\"796\":2,\"813\":2}}],[\"如果提议者收到来自半数以上的接受者对于它发出的编号为mn的准备请求的响应\",{\"1\":{\"216\":1}}],[\"如果通知一直失败则根据重试规则异步进行重试\",{\"1\":{\"207\":1}}],[\"如果不需要进行属性填充\",{\"1\":{\"802\":1}}],[\"如果不需要继续分割\",{\"1\":{\"373\":1}}],[\"如果不相同\",{\"1\":{\"606\":1}}],[\"如果不在\",{\"1\":{\"523\":1}}],[\"如果不加\",{\"1\":{\"492\":1}}],[\"如果不可避免要\",{\"1\":{\"490\":1}}],[\"如果不停的往这个有限大小的\",{\"1\":{\"483\":1}}],[\"如果不想打破双亲委派模型\",{\"1\":{\"426\":1}}],[\"如果不是简历上写了精通redis\",{\"1\":{\"728\":1}}],[\"如果不是并发特别高\",{\"1\":{\"708\":1}}],[\"如果不是面试\",{\"1\":{\"477\":1}}],[\"如果不是它就会调用下个插件代理对象的invoke方法\",{\"1\":{\"453\":2}}],[\"如果不是\",{\"1\":{\"329\":1}}],[\"如果不一致\",{\"1\":{\"313\":1}}],[\"如果不存在签名方法\",{\"1\":{\"453\":1}}],[\"如果不存在数据依赖性\",{\"1\":{\"319\":1}}],[\"如果不存在\",{\"1\":{\"225\":1}}],[\"如果不存在则更新\",{\"1\":{\"198\":1}}],[\"如果不满足已经做出的承诺\",{\"1\":{\"215\":1}}],[\"如果不成功\",{\"1\":{\"207\":1}}],[\"如果消费失败\",{\"1\":{\"206\":1}}],[\"如果业务操作成功\",{\"1\":{\"206\":1}}],[\"如果修改失败\",{\"1\":{\"205\":1}}],[\"如果修改成功\",{\"1\":{\"205\":1}}],[\"如果发生超时的情况\",{\"1\":{\"754\":1}}],[\"如果发生一次超时重传\",{\"1\":{\"591\":1}}],[\"如果发生冲突\",{\"1\":{\"161\":1}}],[\"如果发现大量存储层空命中\",{\"1\":{\"703\":1}}],[\"如果发现没有收到\",{\"1\":{\"581\":1}}],[\"如果发现\",{\"1\":{\"418\":1}}],[\"如果发现锁这个时候被释放了\",{\"1\":{\"333\":1}}],[\"如果发送失败或者异常\",{\"1\":{\"754\":1}}],[\"如果发送失败\",{\"1\":{\"205\":1}}],[\"如果等到提交请求超时\",{\"1\":{\"203\":1}}],[\"如果等待1s后\",{\"1\":{\"777\":1}}],[\"如果等待\",{\"1\":{\"203\":1}}],[\"如果参与者无法及时接收到来自协调者的提交或者中断事务请求时\",{\"1\":{\"203\":1}}],[\"如果参与者有一个或多个参与者收到错误的ack响应或者超时\",{\"1\":{\"203\":1}}],[\"如果hash==moved\",{\"1\":{\"181\":1}}],[\"如果当前没有事务\",{\"1\":{\"813\":1}}],[\"如果当前存在事务\",{\"1\":{\"813\":3}}],[\"如果当前topic的message\",{\"1\":{\"758\":2}}],[\"如果当前节点开启了aof持久化功能\",{\"1\":{\"685\":1}}],[\"如果当前写入\",{\"1\":{\"483\":1}}],[\"如果当前代理的是一个非代理对象\",{\"1\":{\"453\":2}}],[\"如果当前运行的线程数大于\",{\"1\":{\"353\":1}}],[\"如果当前线程不是第一个到达屏障的话\",{\"1\":{\"346\":1}}],[\"如果当前线程之前己经获取过该锁\",{\"1\":{\"332\":1}}],[\"如果当前字符串内容存在于字符串常量池\",{\"1\":{\"267\":1}}],[\"如果当前数组位置是空则直接通过cas自旋写入数据\",{\"1\":{\"181\":1}}],[\"如果当前容量+1超过数组长度\",{\"1\":{\"155\":1}}],[\"如果正确则建立连接\",{\"1\":{\"573\":1}}],[\"如果正在运行的线程数量大于或等于\",{\"1\":{\"353\":1}}],[\"如果正在运行的线程数量小于\",{\"1\":{\"353\":1}}],[\"如果正在初始化或者扩容\",{\"1\":{\"181\":1}}],[\"如果正好让最后几个低位呈现规律性重复\",{\"1\":{\"167\":1}}],[\"如果获取锁失败则尝试自旋\",{\"1\":{\"180\":1}}],[\"如果计算出来的索引位置是相同的\",{\"1\":{\"177\":1}}],[\"如果初始化hashmap\",{\"0\":{\"169\":1}}],[\"如果散列本身做得不好\",{\"1\":{\"167\":1}}],[\"如果链表中插入节点的时候\",{\"1\":{\"164\":1}}],[\"如果链表长度>8\",{\"1\":{\"161\":1}}],[\"如果是方法则使用\",{\"1\":{\"807\":1}}],[\"如果是实现了接口的话就会使用\",{\"1\":{\"804\":1}}],[\"如果是没有代理的情况下\",{\"1\":{\"801\":1}}],[\"如果是push模式的\",{\"1\":{\"777\":1}}],[\"如果是同步刷盘的话\",{\"1\":{\"774\":1}}],[\"如果是攻击\",{\"1\":{\"703\":1}}],[\"如果是发生了\",{\"1\":{\"588\":1}}],[\"如果是短连接的话\",{\"1\":{\"560\":1}}],[\"如果是更新\",{\"1\":{\"435\":1}}],[\"如果是作为参数传递到外部了\",{\"1\":{\"408\":1}}],[\"如果是则执行\",{\"1\":{\"329\":1}}],[\"如果是则进行扩容操作\",{\"1\":{\"164\":1}}],[\"如果是\",{\"1\":{\"328\":1,\"503\":1,\"538\":1,\"765\":2,\"784\":1}}],[\"如果是可偏向状态\",{\"1\":{\"328\":1}}],[\"如果是的话去\",{\"1\":{\"269\":1}}],[\"如果是java程序需要捕获\",{\"1\":{\"225\":1}}],[\"如果是红黑树按照红黑树获取\",{\"1\":{\"181\":1}}],[\"如果是个人博客需要考虑设备外链\",{\"1\":{\"106\":1}}],[\"如果红黑树节点个数<6\",{\"1\":{\"161\":1}}],[\"如果集合发生变化时修改modcount值刚好又设置为了expectedmodcount值\",{\"1\":{\"157\":1}}],[\"如class\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"故rocketmq的文件存储都使用定长结构来存储\",{\"1\":{\"772\":1}}],[\"故rocketmq的索引文件其底层实现为hash索引\",{\"1\":{\"771\":1}}],[\"故consumequeue文件夹的组织方式如下\",{\"1\":{\"771\":1}}],[\"故collection使用默认键array\",{\"1\":{\"88\":1}}],[\"故collection使用默认键list\",{\"1\":{\"87\":1}}],[\"故障主节点也算在投票数内\",{\"1\":{\"698\":1}}],[\"故障节点变为客观下线后\",{\"1\":{\"698\":1}}],[\"故障发现\",{\"1\":{\"698\":1}}],[\"故障转移等方式来减少单点故障的影响\",{\"1\":{\"853\":1}}],[\"故障转移和动态变更等功能\",{\"1\":{\"841\":1}}],[\"故障转移\",{\"0\":{\"698\":1},\"1\":{\"688\":2}}],[\"故障恢复\",{\"1\":{\"682\":1,\"698\":1,\"834\":1}}],[\"故不允许子类重写\",{\"1\":{\"272\":1}}],[\"故映射文件的sql标签parametertype属性配置为uservo\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"故可以分别用$\",{\"1\":{\"86\":1,\"91\":1}}],[\"故配置其为对应的接口方法中的形参前的\",{\"1\":{\"86\":1}}],[\"故需要使用\",{\"1\":{\"86\":1}}],[\"这三者里elasticsearch提供数据存储和检索能力\",{\"1\":{\"877\":1}}],[\"这三种方案有什么区别吗\",{\"0\":{\"831\":1}}],[\"这对于一些高并发的场景可以有效地减少请求次数\",{\"1\":{\"858\":1}}],[\"这可以提供系统的吞吐量\",{\"1\":{\"774\":1}}],[\"这可以说就是一种\",{\"1\":{\"289\":1}}],[\"这其实没有太大的必要\",{\"1\":{\"770\":1}}],[\"这其中就利⽤到了哈希码\",{\"1\":{\"258\":1}}],[\"这四个角色就是\",{\"1\":{\"747\":1}}],[\"这类key通常有大流量的访问\",{\"1\":{\"710\":1}}],[\"这类扫描效率极高\",{\"1\":{\"493\":1}}],[\"这张图里面\",{\"1\":{\"694\":1}}],[\"这中间如果有一个学生卡住\",{\"1\":{\"672\":1}}],[\"这期间发生了多次用户态和内核态的上下文切换\",{\"1\":{\"662\":1}}],[\"这⾥就引出了两种地址的概念\",{\"1\":{\"651\":1}}],[\"这还得看线程是不是属于同⼀个进程\",{\"1\":{\"643\":1}}],[\"这恰恰是操作系统通过快速上下文切换造成的结果\",{\"1\":{\"636\":1}}],[\"这本册子不是一揽子买卖\",{\"1\":{\"622\":1}}],[\"这本册子目前的版本是1\",{\"1\":{\"622\":1}}],[\"这本手册你不仅可以把它当做一本面试题解\",{\"1\":{\"620\":1}}],[\"这恐怕是很难接受的\",{\"1\":{\"598\":1}}],[\"这意味着如果数据丢失的话\",{\"1\":{\"598\":1}}],[\"这段数据丢失\",{\"1\":{\"593\":1}}],[\"这段代码会输出什么\",{\"1\":{\"245\":1}}],[\"这会导致网络阻塞\",{\"1\":{\"591\":1}}],[\"这会导致对整个临时表做唯一性检查\",{\"1\":{\"492\":1}}],[\"这天老张下地了\",{\"1\":{\"568\":1}}],[\"这么多服务\",{\"1\":{\"824\":2}}],[\"这么比喻\",{\"1\":{\"557\":1}}],[\"这么设计是为了降低哈希碰撞的概率\",{\"1\":{\"166\":1}}],[\"这取决于事务的开始时间和它的隔离级别\",{\"1\":{\"519\":1}}],[\"这只是一个简单的流程说明\",{\"1\":{\"516\":1}}],[\"这一部分就比较深了\",{\"1\":{\"728\":1}}],[\"这一步是最关键的\",{\"1\":{\"820\":1}}],[\"这一步是相对复杂一些的一步\",{\"1\":{\"688\":1}}],[\"这一步只是保存主节点信息\",{\"1\":{\"684\":1}}],[\"这一章听懂了吗\",{\"1\":{\"581\":1}}],[\"这一点使得\",{\"1\":{\"553\":1}}],[\"这一列显示\",{\"1\":{\"493\":1}}],[\"这一行的数据会被更新为\",{\"1\":{\"482\":1}}],[\"这一行所在的数据页本来就在内存中\",{\"1\":{\"481\":1}}],[\"这一行\",{\"1\":{\"481\":1}}],[\"这一期的分布式面试题就整理到这里了\",{\"1\":{\"227\":1}}],[\"这节我们的主角是mybatis\",{\"1\":{\"431\":1}}],[\"这和双亲委派刚好相反\",{\"1\":{\"429\":1}}],[\"这\",{\"1\":{\"392\":1,\"588\":1}}],[\"这两种动态代理的使用和原理有些不同\",{\"1\":{\"806\":1}}],[\"这两种方式的提交都会导致原先数据库的状态和被恢复后的数据库的状态不一致\",{\"1\":{\"482\":1}}],[\"这两种类型被\",{\"1\":{\"465\":1}}],[\"这两种对象访问方式各有优势\",{\"1\":{\"386\":1}}],[\"这两个才是适合拿来比较的东西\",{\"1\":{\"846\":1}}],[\"这两个系统调⽤\",{\"1\":{\"662\":1}}],[\"这两个操作是必须成对出现的\",{\"1\":{\"641\":1,\"645\":1}}],[\"这两个插入意向锁锁不会互斥\",{\"1\":{\"513\":1}}],[\"这两个版本中都有一个类是\",{\"1\":{\"429\":1}}],[\"这两个线程就可以交换数据\",{\"1\":{\"349\":1}}],[\"这两个线程通过\",{\"1\":{\"349\":1}}],[\"这块结构会随着锁的状态变化而变化\",{\"1\":{\"327\":1}}],[\"这使得加载和存储操作看上去可能是在乱序执行\",{\"1\":{\"319\":1}}],[\"这才起到多线程的效果\",{\"1\":{\"301\":1}}],[\"这也是经常犯错误的一个地方\",{\"1\":{\"813\":1}}],[\"这也是\",{\"1\":{\"580\":1}}],[\"这也是一个重要的字段\",{\"1\":{\"493\":1}}],[\"这也是为什么\",{\"1\":{\"389\":1}}],[\"这也是在\",{\"1\":{\"293\":1}}],[\"这也会造成内存泄漏\",{\"1\":{\"389\":1}}],[\"这也正好解释了为什么\",{\"1\":{\"167\":1}}],[\"这并不代表反射没有用\",{\"1\":{\"289\":1}}],[\"这道题老三的同事面试候选人的时候问到了\",{\"1\":{\"805\":1}}],[\"这道题老三面试被问到过\",{\"1\":{\"792\":1}}],[\"这道题老三在面试中被问到过\",{\"1\":{\"788\":1}}],[\"这道题面试很少问\",{\"1\":{\"709\":1}}],[\"这道题有几个要点\",{\"1\":{\"563\":1}}],[\"这道题和上面浏览器输入网址发生了什么那道题大差不差\",{\"1\":{\"555\":1}}],[\"这道题\",{\"1\":{\"546\":1}}],[\"这道题印象中在一些面经中出场过几次\",{\"1\":{\"270\":1}}],[\"这道题快手常考\",{\"1\":{\"176\":1}}],[\"这些方案都可以与\",{\"1\":{\"868\":1}}],[\"这些配置可能因为不同环境\",{\"1\":{\"840\":1}}],[\"这些模块共享同一个数据库和代码库\",{\"1\":{\"828\":1}}],[\"这些\",{\"1\":{\"798\":1}}],[\"这些订单可能五花八门\",{\"1\":{\"788\":1}}],[\"这些类被视为自动检测的候选对象\",{\"1\":{\"784\":1}}],[\"这些封装\",{\"1\":{\"782\":1}}],[\"这些就是比较关键的概念了\",{\"1\":{\"744\":1}}],[\"这些业务场景在阿里双11已经经历了多次考验\",{\"1\":{\"742\":1}}],[\"这些问题可以从程序层面捕获并解决\",{\"1\":{\"724\":1}}],[\"这些格式和规则就是超文本传输协议\",{\"1\":{\"555\":1}}],[\"这些更改在数据库恢复时仍然是安全的\",{\"1\":{\"519\":1}}],[\"这些更改\",{\"1\":{\"519\":1}}],[\"这些接口屏蔽了不同存储引擎之间的差异\",{\"1\":{\"472\":1}}],[\"这些接⼝⽅法必须由选择实现接⼝的类实现\",{\"1\":{\"252\":1}}],[\"这些位置就叫作安全点\",{\"1\":{\"402\":1}}],[\"这些特定的位置主要在\",{\"1\":{\"402\":1}}],[\"这些收集器里\",{\"1\":{\"401\":1}}],[\"这些子问题相互独立且与原问题性质相同\",{\"1\":{\"373\":1}}],[\"这些线程必须调用await\",{\"1\":{\"347\":1}}],[\"这些线程会一直相互等待而无法继续运行下去\",{\"1\":{\"342\":1}}],[\"这些操作都是由\",{\"1\":{\"815\":1}}],[\"这些操作需要消耗额外的\",{\"1\":{\"536\":1}}],[\"这些操作就可能被编译器和处理器重排序\",{\"1\":{\"321\":1}}],[\"这些操作可能是\",{\"1\":{\"294\":1}}],[\"这些都是\",{\"1\":{\"553\":1}}],[\"这些都是共用的东西\",{\"1\":{\"449\":1}}],[\"这些都是因为我们可以基于反射操作类\",{\"1\":{\"289\":1}}],[\"这些都是常见的幂等性问题\",{\"1\":{\"224\":1}}],[\"这些修饰符\",{\"1\":{\"252\":1}}],[\"这就叫服务雪崩\",{\"1\":{\"853\":1}}],[\"这就叫覆盖索引\",{\"1\":{\"489\":1}}],[\"这就用到了一个常用注解\",{\"1\":{\"817\":1}}],[\"这就用到了我们零拷贝的技术\",{\"1\":{\"662\":1}}],[\"这就实现了读的高可用\",{\"1\":{\"767\":1}}],[\"这就需要rocketmq为每个消费组在每个队列上维护一个消费位置\",{\"1\":{\"744\":1}}],[\"这就需要使用保活计时器了\",{\"1\":{\"577\":1}}],[\"这就意味着每个路由器需要\",{\"1\":{\"607\":1}}],[\"这就导致了主从不一致\",{\"1\":{\"528\":1}}],[\"这就相当于一个房子里\",{\"1\":{\"388\":1}}],[\"这就发生了抢占\",{\"1\":{\"384\":1}}],[\"这就会造成了内存泄漏问题\",{\"1\":{\"311\":1}}],[\"这就是事件驱动\",{\"1\":{\"672\":1}}],[\"这就是流量控制\",{\"1\":{\"582\":1}}],[\"这就是\",{\"1\":{\"566\":1,\"568\":1,\"583\":1}}],[\"这就是通常所说的\",{\"1\":{\"528\":1}}],[\"这就是幻读\",{\"1\":{\"521\":1}}],[\"这就是不可重复读\",{\"1\":{\"521\":1}}],[\"这就是脏读\",{\"1\":{\"521\":1}}],[\"这就是延迟加载的基本原理\",{\"1\":{\"442\":1}}],[\"这就是所谓的\",{\"1\":{\"401\":1,\"595\":1}}],[\"这就是所谓的工作窃取\",{\"1\":{\"373\":1}}],[\"这就是线程不安全的更新操作\",{\"1\":{\"340\":1}}],[\"这就是上下文切换\",{\"1\":{\"304\":1}}],[\"这就是注解的用处\",{\"1\":{\"287\":1}}],[\"这就要求有两个cpu去分别执行两个线程\",{\"1\":{\"298\":1}}],[\"这就好像快递员开着⼤货⻋送⼀个⼩包裹⼀样浪费\",{\"1\":{\"584\":1}}],[\"这就好像\",{\"1\":{\"239\":1}}],[\"这就得益于hashmap的大小是2的倍数\",{\"1\":{\"168\":1}}],[\"这次带来的是计算机网络六十二问\",{\"1\":{\"540\":1}}],[\"这次面试\",{\"1\":{\"227\":1,\"373\":1,\"429\":1}}],[\"这次吊打面试官\",{\"1\":{\"150\":1,\"186\":1,\"188\":1,\"229\":1,\"294\":1,\"296\":1,\"375\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"这篇文章只是个开始\",{\"1\":{\"227\":1}}],[\"这时该sentinel节点会做出客观下线的决定\",{\"1\":{\"688\":1}}],[\"这时c\",{\"1\":{\"672\":1}}],[\"这时\",{\"1\":{\"585\":1,\"637\":1}}],[\"这时就会⽴刻发送\",{\"1\":{\"584\":1}}],[\"这时连接会等待被具体的应用取走\",{\"1\":{\"573\":1}}],[\"这时必须进行大量标记和清除的动作\",{\"1\":{\"395\":1}}],[\"这时我们必须控制只有10个线程同时获取数据库连接保存数据\",{\"1\":{\"348\":1}}],[\"这时所有跟随者的角色就变成了\",{\"1\":{\"221\":1}}],[\"这时候一条消息可能被写入任意一个队列里\",{\"1\":{\"761\":1}}],[\"这时候可以利用消息队列或者其它异步方式清理缓存中的空对象\",{\"1\":{\"703\":1}}],[\"这时候可以用到另外一个类\",{\"1\":{\"315\":1}}],[\"这时候怎么办\",{\"1\":{\"566\":1}}],[\"这时候怎么办呢\",{\"1\":{\"566\":1}}],[\"这时候使用的索引就叫做覆盖索引\",{\"1\":{\"508\":1}}],[\"这时候要结合\",{\"1\":{\"417\":1}}],[\"这时候会交换两人的数据\",{\"1\":{\"349\":1}}],[\"这时候就需要一个集中化的配置中心\",{\"1\":{\"840\":1}}],[\"这时候就完全牺牲rocketmq的高并发\",{\"1\":{\"761\":1}}],[\"这时候就得想办法赶紧把积压的消息消费完\",{\"1\":{\"758\":1}}],[\"这时候就可以把这些字段冗余到当前表中\",{\"1\":{\"534\":1}}],[\"这时候就可以完成回填主键\",{\"1\":{\"443\":1}}],[\"这时候就不能接着往里写数据了\",{\"1\":{\"483\":1}}],[\"这时候就发生了内存泄漏的问题\",{\"1\":{\"311\":1}}],[\"这时候就产生了数据的不一致性\",{\"1\":{\"202\":1}}],[\"这时候我们就可以用到threadlocal\",{\"1\":{\"309\":1}}],[\"这时候\",{\"1\":{\"167\":1,\"225\":1,\"483\":1,\"582\":2}}],[\"这条消息也一定投递成功\",{\"1\":{\"206\":1}}],[\"这3个基本需求\",{\"1\":{\"190\":1}}],[\"这是推荐的一种方式\",{\"1\":{\"798\":1}}],[\"这是\",{\"1\":{\"791\":1}}],[\"这是最常见的一种\",{\"1\":{\"762\":1}}],[\"这是最初的一种消息队列模型\",{\"1\":{\"743\":1}}],[\"这是多年黄历的老八股了\",{\"1\":{\"701\":1}}],[\"这是多年前的老题了\",{\"1\":{\"598\":1}}],[\"这是redis应用最广泛地方\",{\"1\":{\"669\":1}}],[\"这是⼀把双刃剑\",{\"1\":{\"592\":1}}],[\"这是以空间换时间的优化策略\",{\"1\":{\"490\":1}}],[\"这是通过内部类的方式来重写\",{\"1\":{\"292\":1}}],[\"这是因为\",{\"1\":{\"285\":1}}],[\"这是一道全新的八股\",{\"1\":{\"817\":1}}],[\"这是一种父类加载器去请求子类加载器完成类加载的行为\",{\"1\":{\"427\":1}}],[\"这是一种\",{\"1\":{\"193\":1}}],[\"这是一个欢迎接口\",{\"1\":{\"805\":1}}],[\"这是一个朴素但是有用的办法\",{\"1\":{\"708\":1}}],[\"这是一个问题\",{\"1\":{\"707\":1}}],[\"这是一个端到端的检验和\",{\"1\":{\"581\":1}}],[\"这是一个中规中矩的案例\",{\"1\":{\"413\":1}}],[\"这是一个相当耗时的操作\",{\"1\":{\"173\":1}}],[\"这是一个有着\",{\"1\":{\"10\":1}}],[\"这是一个\",{\"0\":{\"10\":1}}],[\"这是对空间成本和时间成本平衡的考虑\",{\"1\":{\"173\":1}}],[\"这种架构使得应用程序更加灵活\",{\"1\":{\"828\":1}}],[\"这种mmap的方式减少了传统io\",{\"1\":{\"772\":1}}],[\"这种机制在java中是通过mappedbytebuffer实现的\",{\"1\":{\"773\":1}}],[\"这种机制\",{\"1\":{\"767\":1}}],[\"这种简单的字符串表示方式\",{\"1\":{\"730\":1}}],[\"这种问题的根源就在于\",{\"1\":{\"727\":1}}],[\"这种模式下一个消费者组共同消费一个主题的多个队列\",{\"1\":{\"745\":1}}],[\"这种模式基本能够满足绝大部分需求\",{\"1\":{\"712\":1}}],[\"这种模式就好比\",{\"1\":{\"672\":1}}],[\"这种类似于为每一个用户创建一个进程或者\",{\"1\":{\"672\":1}}],[\"这种类型的锁命名为\",{\"1\":{\"513\":1}}],[\"这种⽅式随着并发数上来\",{\"1\":{\"664\":1}}],[\"这种算法适用于后端服务器的处理能力不同或者请求的处理时间不同的场景\",{\"1\":{\"851\":1}}],[\"这种算法简单快速\",{\"1\":{\"851\":1}}],[\"这种算法近似最优置换算法\",{\"1\":{\"658\":1}}],[\"这种算法存在一个明显的缺点\",{\"1\":{\"395\":1}}],[\"这种情况是最常见的一种\",{\"1\":{\"813\":1}}],[\"这种情况我们需要增强处理的话\",{\"1\":{\"807\":1}}],[\"这种情况\",{\"1\":{\"758\":1}}],[\"这种情况在先删缓存\",{\"1\":{\"708\":1}}],[\"这种情况就需要跟应用一起来分析为何连接数会激增\",{\"1\":{\"538\":1}}],[\"这种情况称为可重入锁\",{\"1\":{\"326\":1}}],[\"这种最简单\",{\"1\":{\"534\":1}}],[\"这种写入方式被称为\",{\"1\":{\"519\":1}}],[\"这种写法应该尽量避免\",{\"1\":{\"487\":1}}],[\"这种连接类型类似于\",{\"1\":{\"493\":1}}],[\"这种说法其实是不准确的\",{\"1\":{\"464\":1}}],[\"这种关联的实现\",{\"1\":{\"441\":1}}],[\"这种就被称为线程逃逸\",{\"1\":{\"408\":1}}],[\"这种现象称作指针\",{\"1\":{\"408\":1}}],[\"这种现象叫做\",{\"1\":{\"227\":1}}],[\"这种分配方式称为\",{\"1\":{\"383\":2}}],[\"这种做法可以给数据带上了一种实效性的检验\",{\"1\":{\"336\":1}}],[\"这种锁被称之为重量级锁\",{\"1\":{\"327\":1}}],[\"这种赋值\",{\"1\":{\"269\":1}}],[\"这种字节码必须再经过\",{\"1\":{\"236\":1}}],[\"这种方案看起来不错\",{\"1\":{\"708\":1}}],[\"这种方案也是实现了最终一致性\",{\"1\":{\"206\":1}}],[\"这种方法\",{\"1\":{\"757\":1}}],[\"这种方法只允许一个线程重建缓存\",{\"1\":{\"712\":1}}],[\"这种方法直观\",{\"1\":{\"436\":1}}],[\"这种方法适合传递多个参数\",{\"1\":{\"436\":1}}],[\"这种方法在参数不多的情况还是比较直观的\",{\"1\":{\"436\":1}}],[\"这种方法不建议使用\",{\"1\":{\"436\":1}}],[\"这种方法就是所谓的\",{\"1\":{\"171\":1}}],[\"这种方式也降低了服务端的压力\",{\"1\":{\"843\":1}}],[\"这种方式应该没人用了吧\",{\"1\":{\"817\":1}}],[\"这种方式只能实现一对一的消息队列\",{\"1\":{\"722\":1}}],[\"这种方式\",{\"1\":{\"722\":1}}],[\"这种方式的延时时间设置需要仔细考量和测试\",{\"1\":{\"708\":1}}],[\"这种方式降低了对业务的侵入\",{\"1\":{\"708\":1}}],[\"这种方式相比节点取余最大的好处在于加入和删除节点只影响哈希环中\",{\"1\":{\"694\":1}}],[\"这种方式就像是飙车的时候急刹车\",{\"1\":{\"588\":1}}],[\"这种方式可能回丢掉一些数据\",{\"1\":{\"537\":1}}],[\"这种方式可以通过futuretask获取任务执行的返回值\",{\"1\":{\"300\":1}}],[\"这种方式实现起来稍微比较复杂\",{\"1\":{\"534\":1}}],[\"这种方式和业务强绑定\",{\"1\":{\"528\":1}}],[\"这种方式需要数据库连接属性allowmutiqueries=true的支持\",{\"1\":{\"445\":1}}],[\"这种方式在编译时候就确定了类型信息\",{\"1\":{\"289\":1}}],[\"这种方式对服务器资源要求比较高\",{\"1\":{\"280\":1}}],[\"这种方式有个很大的弊端\",{\"1\":{\"227\":1}}],[\"这种方式有一个缺点\",{\"1\":{\"225\":1}}],[\"这种属于数据库\",{\"1\":{\"196\":1}}],[\"这种查找\",{\"1\":{\"154\":1}}],[\"这主要是为了把⼆进制的各个位置都填上1\",{\"1\":{\"169\":1}}],[\"这样客户端就可以根据需要选择合适的服务进行调用\",{\"1\":{\"834\":1}}],[\"这样每一个线程请求过来都会创建一个新的\",{\"1\":{\"798\":1}}],[\"这样每次请求直接打到数据库\",{\"1\":{\"703\":1}}],[\"这样容器启动就完成了\",{\"1\":{\"792\":1}}],[\"这样有利于容器对\",{\"1\":{\"785\":1}}],[\"这样有会有大并发的更新操作\",{\"1\":{\"528\":1}}],[\"这样当\",{\"1\":{\"767\":1}}],[\"这样才能达到部分有序\",{\"1\":{\"760\":1}}],[\"这样才是符合第一范式的\",{\"1\":{\"460\":1}}],[\"这样简单的数据结构可能会造成以下一些问题\",{\"1\":{\"730\":1}}],[\"这样将获取字符串⻓度的时间由o\",{\"1\":{\"729\":1}}],[\"这样即使中间出现异常也可以保证\",{\"1\":{\"727\":1}}],[\"这样后⾯的请求就可以从缓存中拿到数据了\",{\"1\":{\"702\":1}}],[\"这样做的好处是避免了无用的消息传输到\",{\"1\":{\"762\":1}}],[\"这样做的原因是因为回滚需要增加很多工作\",{\"1\":{\"724\":1}}],[\"这样做的⽬的是因为redis的性能瓶颈在于⽹络io⽽⾮cpu\",{\"1\":{\"674\":1}}],[\"这样做立即生效\",{\"1\":{\"358\":1}}],[\"这样在\",{\"1\":{\"680\":1}}],[\"这样在发生类似断电或者机器故障的时候\",{\"1\":{\"668\":1}}],[\"这样在访问某条记录时\",{\"1\":{\"523\":1}}],[\"这样⼀个连续并且尺⼨固定的内存空间\",{\"1\":{\"653\":1}}],[\"这样不可剥夺这个条件就破坏掉了\",{\"1\":{\"648\":1}}],[\"这样不可抢占这个条件就破坏掉了\",{\"1\":{\"342\":1}}],[\"这样可以快速隔离故障服务\",{\"1\":{\"858\":1}}],[\"这样可以根据服务器的处理能力和性能调整请求的分配比例\",{\"1\":{\"851\":2}}],[\"这样可以防止由于网络抖动或其他原因导致的误剔除\",{\"1\":{\"838\":1}}],[\"这样可以确保线程的控制流是相对独⽴的\",{\"1\":{\"642\":1}}],[\"这样可以提高序列化和反序列化的效率\",{\"1\":{\"156\":1}}],[\"这样这个进程写⼊的东西\",{\"1\":{\"641\":1}}],[\"这样路由器就能根据\",{\"1\":{\"607\":1}}],[\"这样发送⽅就知道了\",{\"1\":{\"594\":1}}],[\"这样发送方就知道接收方哪些数据包是没收到的\",{\"1\":{\"593\":1}}],[\"这样肯定就不行\",{\"1\":{\"591\":1}}],[\"这样对方就可以控制发送数据的速度\",{\"1\":{\"580\":1,\"583\":1}}],[\"这样第一张表的\",{\"1\":{\"534\":1}}],[\"这样的容器\",{\"1\":{\"819\":1}}],[\"这样的好处是实现起来简单\",{\"1\":{\"762\":1}}],[\"这样的结构\",{\"1\":{\"732\":1}}],[\"这样的结构也方便解决单点故障问题\",{\"1\":{\"720\":1}}],[\"这样的可能涉及整棵树的操作\",{\"1\":{\"732\":1}}],[\"这样的树形结构\",{\"1\":{\"732\":1}}],[\"这样的后果就是⼤量的请求进来直接打到db上\",{\"1\":{\"704\":1}}],[\"这样的例子还有很多\",{\"1\":{\"621\":1}}],[\"这样的话就会有个缺点\",{\"1\":{\"583\":1}}],[\"这样的较低隔离级别\",{\"1\":{\"519\":1}}],[\"这样的大对象一般是一些数组\",{\"1\":{\"400\":1}}],[\"这样一共\",{\"1\":{\"502\":1}}],[\"这样一来就来\",{\"1\":{\"740\":1}}],[\"这样一来这个链路就长了\",{\"1\":{\"740\":1}}],[\"这样一来\",{\"1\":{\"309\":1,\"408\":1,\"510\":1,\"569\":1,\"757\":1}}],[\"这样查询结果就可以直接从索引中获取\",{\"1\":{\"489\":1}}],[\"这样双管齐下\",{\"1\":{\"413\":1}}],[\"这样就简化了代码的书写\",{\"1\":{\"804\":1}}],[\"这样就能抗住短时间的大流量了\",{\"1\":{\"740\":1}}],[\"这样就能保证数据的完整性\",{\"1\":{\"581\":1}}],[\"这样就能保证后续读取的结果完全一致\",{\"1\":{\"523\":1}}],[\"这样就能保证自己每次都能读到其它事务提交的数据\",{\"1\":{\"523\":1}}],[\"这样就完成了订单服务和其它服务的解耦合\",{\"1\":{\"740\":1}}],[\"这样就会陷入死锁\",{\"1\":{\"727\":1}}],[\"这样就会被其他方法或者线程所引用\",{\"1\":{\"408\":1}}],[\"这样就保护了数据库\",{\"1\":{\"703\":1}}],[\"这样就避免了大量的无用操作\",{\"1\":{\"672\":1}}],[\"这样就避免了收集整个堆\",{\"1\":{\"404\":1}}],[\"这样就不需要像\",{\"1\":{\"664\":1}}],[\"这样就不会重复了\",{\"1\":{\"534\":1}}],[\"这样就只有\",{\"1\":{\"662\":1}}],[\"这样就很清楚应该重传哪些数据包\",{\"1\":{\"593\":1}}],[\"这样就可以直接获取长度了\",{\"1\":{\"730\":1}}],[\"这样就可以保持主从节点复制的一致性\",{\"1\":{\"685\":1}}],[\"这样就可以减少⼀次系统调⽤\",{\"1\":{\"662\":1}}],[\"这样就可以减少资源消耗\",{\"1\":{\"560\":1}}],[\"这样就可以使下一个连接中不会出现这种旧的连接请求报文段\",{\"1\":{\"576\":1}}],[\"这样就可以可以实现\",{\"1\":{\"235\":1}}],[\"这样就可以解决提议者冲突的问题\",{\"1\":{\"217\":1}}],[\"这样线性化后就不存在环路了\",{\"1\":{\"342\":1,\"648\":1}}],[\"这样\",{\"1\":{\"336\":1,\"370\":1,\"649\":1,\"662\":1,\"672\":1,\"834\":1,\"848\":1}}],[\"这样我们在任何一个地方\",{\"1\":{\"309\":1}}],[\"这样也会产生重复的数据\",{\"1\":{\"224\":1}}],[\"这样与添加元素的hash值进行位运算时\",{\"1\":{\"168\":1}}],[\"这样高位的信息也被变相保留下来\",{\"1\":{\"167\":1}}],[\"这样是要快捷一些\",{\"1\":{\"167\":1}}],[\"这个阶段的操作是非常快速的\",{\"1\":{\"871\":1}}],[\"这个加载过程会增加首次调用的耗时\",{\"1\":{\"848\":1}}],[\"这个注册过程就是把配置信息写入存储\",{\"1\":{\"842\":1}}],[\"这个类主要做了以下四件事情\",{\"1\":{\"822\":1}}],[\"这个类加载器可以通过\",{\"1\":{\"427\":1}}],[\"这个接口的作用就是收集需要导入的配置类\",{\"1\":{\"820\":1}}],[\"这个接口只是一个标记\",{\"1\":{\"282\":1}}],[\"这个接口只是用来标识是否支持随机访问\",{\"1\":{\"154\":1}}],[\"这个请求会先到前端控制器\",{\"1\":{\"816\":1,\"817\":1}}],[\"这个场景就需要编译期的时候就进行织入\",{\"1\":{\"807\":1}}],[\"这个后置处理器就是\",{\"1\":{\"802\":1}}],[\"这个属性\",{\"1\":{\"796\":1}}],[\"这个容器里存的就是对象\",{\"1\":{\"788\":1}}],[\"这个实现方案太重了\",{\"1\":{\"770\":1}}],[\"这个消息将在10s之后发送\",{\"1\":{\"763\":1}}],[\"这个消息必须按顺序处理才行\",{\"1\":{\"759\":1}}],[\"这个位置之前的消息都被消费过\",{\"1\":{\"744\":1}}],[\"这个大小就是层的\",{\"1\":{\"732\":1}}],[\"这个版本加入了\",{\"1\":{\"727\":1}}],[\"这个key就是一个脏数据\",{\"1\":{\"707\":1}}],[\"这个问题也适用于故障发现环节\",{\"1\":{\"698\":1}}],[\"这个问题在redis\",{\"1\":{\"727\":1}}],[\"这个问题在\",{\"1\":{\"177\":1}}],[\"这个节点所要承担的所有访问都会被顺移到另一个节点上\",{\"1\":{\"694\":1}}],[\"这个行为叫做主观下线\",{\"1\":{\"688\":1}}],[\"这个多路复用就是多个连接复用一个进程\",{\"1\":{\"664\":1}}],[\"这个拷⻉过程同样是异步的\",{\"1\":{\"663\":1}}],[\"这个⽂件有独⽴的inode\",{\"1\":{\"660\":1}}],[\"这个算法的思路是\",{\"1\":{\"658\":1}}],[\"这个算法的实质在于将一系列\",{\"1\":{\"390\":1}}],[\"这个就算是比较完善的分布式锁了\",{\"1\":{\"727\":1}}],[\"这个就是\",{\"1\":{\"658\":1}}],[\"这个就叫前缀索引\",{\"1\":{\"497\":1}}],[\"这个饥饿指的是资源饥饿\",{\"1\":{\"649\":1}}],[\"这个操作会把信号量加上\",{\"1\":{\"641\":1}}],[\"这个操作会把信号量减去\",{\"1\":{\"641\":1}}],[\"这个需要多核处理器才能完成\",{\"1\":{\"635\":1}}],[\"这个内存空间专⻔给应⽤程序使⽤\",{\"1\":{\"632\":1}}],[\"这个内存空间只有内核程序可以访问\",{\"1\":{\"632\":1}}],[\"这个情况就会进⼊恶性循环被不断地放⼤\",{\"1\":{\"585\":1}}],[\"这个校验不仅包括\",{\"1\":{\"580\":1}}],[\"这个数据包因为网络传输的原因丢失了\",{\"1\":{\"569\":1}}],[\"这个数字\",{\"1\":{\"312\":1}}],[\"这个无状态的的状态值的是什么\",{\"1\":{\"565\":1}}],[\"这个字段是紧急指针相对当前序号的偏移\",{\"1\":{\"580\":1}}],[\"这个字段\",{\"1\":{\"558\":1}}],[\"这个空行不能省略\",{\"1\":{\"556\":1}}],[\"这个长度限制也不是针对数据部分\",{\"1\":{\"554\":1}}],[\"这个其实和\",{\"1\":{\"553\":1}}],[\"这个表包含\",{\"1\":{\"531\":1}}],[\"这个可能就是支付公司按照时间进行了分表\",{\"1\":{\"531\":1}}],[\"这个可能是我们最常用的序列化方式\",{\"1\":{\"283\":1}}],[\"这个值非常直观显示\",{\"1\":{\"493\":1}}],[\"这个值很特殊\",{\"1\":{\"312\":1}}],[\"这个读操作是随机\",{\"1\":{\"491\":1}}],[\"这个变量定义的时长的查询语句\",{\"1\":{\"479\":1}}],[\"这个配置类实例非常重要\",{\"1\":{\"448\":1}}],[\"这个是没法实现\",{\"1\":{\"648\":1}}],[\"这个是物理上的多个进程同时进行\",{\"1\":{\"635\":1}}],[\"这个是老生常谈\",{\"1\":{\"487\":1}}],[\"这个是用来循环的\",{\"1\":{\"444\":1}}],[\"这个是临界范围\",{\"1\":{\"169\":1}}],[\"这个和java\",{\"1\":{\"444\":1}}],[\"这个对象将作为程序访问方法区中的类型数据的外部接口\",{\"1\":{\"422\":1}}],[\"这个对象将会被移入老年代\",{\"1\":{\"400\":1}}],[\"这个默认虽然也有说法\",{\"1\":{\"406\":1}}],[\"这个触发条件稍微有点多\",{\"1\":{\"399\":1}}],[\"这个例子只是简单地进行了数据推送\",{\"1\":{\"352\":1}}],[\"这个时候可以使用\",{\"1\":{\"736\":1}}],[\"这个时候我们使用\",{\"1\":{\"509\":1}}],[\"这个时候问题就来了\",{\"1\":{\"428\":1}}],[\"这个时候\",{\"1\":{\"348\":1,\"802\":1}}],[\"这个时间取决于网络延时\",{\"1\":{\"193\":1}}],[\"这个包中的原子操作类提供了一种用法简单\",{\"1\":{\"340\":1}}],[\"这个方案\",{\"1\":{\"695\":1}}],[\"这个方向基本上是不可逆的\",{\"1\":{\"327\":1}}],[\"这个方法是获取自动装配类的关键\",{\"1\":{\"820\":1}}],[\"这个方法是实现consumer端负载均衡的核心\",{\"1\":{\"777\":1}}],[\"这个方法从容器中返回特定名称的\",{\"1\":{\"790\":1}}],[\"这个方法相比\",{\"1\":{\"302\":1}}],[\"这个方法返回的对象可能是空\",{\"1\":{\"293\":1}}],[\"这个方法在\",{\"1\":{\"256\":1}}],[\"这个状态指的是什么呢\",{\"1\":{\"327\":1}}],[\"这个过程不用等待\",{\"1\":{\"663\":1}}],[\"这个过程没法干其它事情\",{\"1\":{\"663\":1}}],[\"这个过程类似写信\",{\"1\":{\"544\":1}}],[\"这个过程会产生大量的\",{\"1\":{\"413\":1}}],[\"这个过程就叫回表\",{\"1\":{\"507\":1}}],[\"这个过程就称为标量替换\",{\"1\":{\"408\":1}}],[\"这个过程就和monitor机制比较相似\",{\"1\":{\"325\":1}}],[\"这个过程我们也称之为标记\",{\"1\":{\"390\":1}}],[\"这个过程大概图示如下\",{\"1\":{\"382\":1}}],[\"这个过程如同选举一样\",{\"1\":{\"219\":1}}],[\"这个标识指明了该方法是一个同步方法\",{\"1\":{\"325\":1}}],[\"这个标记\",{\"1\":{\"287\":1}}],[\"这个结构被附带在线程上\",{\"1\":{\"306\":1}}],[\"这个\",{\"1\":{\"282\":2,\"576\":1,\"655\":1,\"660\":1,\"788\":1}}],[\"这个参数表示额外时间\",{\"1\":{\"272\":1}}],[\"这个⽅法通常⽤来将对象的内存地址转换为整数之后返回\",{\"1\":{\"258\":1}}],[\"这个⽅法也要要寻找⽐初始值⼤的\",{\"1\":{\"169\":1}}],[\"这个也是面试常问\",{\"1\":{\"258\":1}}],[\"这个成员变量是属于实例的\",{\"1\":{\"253\":1}}],[\"这个异常只建议用于检测并发修改的bug\",{\"1\":{\"157\":1}}],[\"这个条件\",{\"1\":{\"157\":1,\"342\":3}}],[\"这个地方可能会出陷阱\",{\"1\":{\"154\":1}}],[\"这里定义了属性配置的前缀\",{\"1\":{\"821\":1}}],[\"这里会获取事务属性切面\",{\"1\":{\"812\":1}}],[\"这里会先去清理过期的entry\",{\"1\":{\"314\":1}}],[\"这里目标类不用再实现接口\",{\"1\":{\"806\":1}}],[\"这里以自定义注解为切点\",{\"1\":{\"805\":1}}],[\"这里给出一个小例子\",{\"1\":{\"805\":1}}],[\"这里看一个\",{\"1\":{\"790\":1}}],[\"这里直接用一个<key\",{\"1\":{\"788\":1}}],[\"这里直接用了最方便解析的\",{\"1\":{\"788\":1}}],[\"这里直接添加会报错\",{\"1\":{\"285\":1}}],[\"这里具体执行removeunnecessarymessagequeue\",{\"1\":{\"777\":1}}],[\"这里主要来看下集群模式下的主要处理流程\",{\"1\":{\"777\":1}}],[\"这里主要有两个思路\",{\"1\":{\"368\":1}}],[\"这里\",{\"1\":{\"771\":1}}],[\"这里利用了局部性原理\",{\"1\":{\"654\":1}}],[\"这里也安排上了\",{\"1\":{\"624\":1}}],[\"这里说的窗口\",{\"1\":{\"580\":1}}],[\"这里假定客户端发起\",{\"1\":{\"574\":1}}],[\"这里还画了一张更详尽的图\",{\"1\":{\"563\":1}}],[\"这里我们只是在目标对象执行目标方法的前后进行了打印\",{\"1\":{\"453\":1}}],[\"这里用了一个匿名内部类方式重写\",{\"1\":{\"806\":1}}],[\"这里用于单例\",{\"1\":{\"788\":1}}],[\"这里用到了命令模式\",{\"1\":{\"450\":1}}],[\"这里用的就是parameterhandler\",{\"1\":{\"448\":1}}],[\"这里可以看到动态代理对接口的绑定\",{\"1\":{\"450\":1}}],[\"这里可能会涉及多层递归\",{\"1\":{\"260\":1}}],[\"这里抓大放小\",{\"1\":{\"448\":1}}],[\"这里就不用多说了\",{\"1\":{\"581\":1}}],[\"这里就不展开了\",{\"1\":{\"441\":1}}],[\"这里就不截图片了\",{\"1\":{\"110\":1}}],[\"这里简单地列一下上面提到的一些收集器的适用场景\",{\"1\":{\"407\":1}}],[\"这里的平均分配算法\",{\"1\":{\"777\":1}}],[\"这里的\",{\"1\":{\"680\":1}}],[\"这里的空不是只空字符串或者\",{\"1\":{\"469\":1}}],[\"这里的threadlocalhashcode计算有点东西\",{\"1\":{\"312\":1}}],[\"这里的节点\",{\"1\":{\"310\":1}}],[\"这里的不可变指的是变量的引用不可变\",{\"1\":{\"255\":1}}],[\"这里的超时的机制作用于\",{\"1\":{\"203\":1}}],[\"这里提到一个概念\",{\"1\":{\"221\":1}}],[\"这里异常的抛出条件是检测到\",{\"1\":{\"157\":1}}],[\"这里由于是array\",{\"1\":{\"88\":1}}],[\"这里由于是list集合\",{\"1\":{\"87\":1}}],[\"这里记为node\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"这里使用\",{\"1\":{\"86\":1}}],[\"后置通知\",{\"1\":{\"804\":1}}],[\"后置处理器来进行一些前置和后置的处理\",{\"1\":{\"802\":1}}],[\"后置的处理\",{\"1\":{\"793\":1}}],[\"后来一度停止维护\",{\"1\":{\"830\":1}}],[\"后来\",{\"1\":{\"734\":1,\"828\":1}}],[\"后来这个cpu的利用问题就被抛给了使用者\",{\"1\":{\"673\":1}}],[\"后台线程每秒对aof文件做fsync操作\",{\"1\":{\"718\":1}}],[\"后台线程输入\",{\"1\":{\"483\":1}}],[\"后删缓存\",{\"1\":{\"707\":1}}],[\"后续的请求将不再发送到实际的服务提供方\",{\"1\":{\"858\":1}}],[\"后续请求将返回默认值或错误信息\",{\"1\":{\"855\":1}}],[\"后续版本新增的功能\",{\"1\":{\"682\":1}}],[\"后续还会推出在线版\",{\"1\":{\"622\":1}}],[\"后者是\",{\"1\":{\"682\":1}}],[\"后者是字符输出流\",{\"1\":{\"278\":1}}],[\"后者是字符输入流\",{\"1\":{\"278\":1}}],[\"后者称为\",{\"1\":{\"682\":1}}],[\"后门入侵\",{\"1\":{\"611\":1}}],[\"后⾯的\",{\"1\":{\"592\":1}}],[\"后才开启\",{\"1\":{\"523\":1}}],[\"后访问的事务必须等前一个事务执行完成\",{\"1\":{\"522\":1}}],[\"后写入\",{\"1\":{\"482\":4}}],[\"后可能升入老年代的对象大小\",{\"1\":{\"399\":1}}],[\"后被其他进入的线程获得\",{\"1\":{\"325\":1}}],[\"后缀\",{\"1\":{\"245\":1}}],[\"后解释两个步骤\",{\"1\":{\"236\":1}}],[\"后\",{\"1\":{\"222\":1,\"256\":1,\"333\":1,\"414\":1,\"573\":1,\"576\":1,\"589\":1,\"612\":1}}],[\"后发起下一次选举\",{\"1\":{\"222\":1}}],[\"后面会单独出一期\",{\"1\":{\"851\":1}}],[\"后面会进行第二次后置处理器的调用\",{\"1\":{\"802\":1}}],[\"后面\",{\"1\":{\"505\":1}}],[\"后面老三会单独出一期来盘点一下常见的多线程笔试题\",{\"1\":{\"306\":1}}],[\"后面跟的是异常对象\",{\"1\":{\"275\":1}}],[\"后面跟的是异常类\",{\"1\":{\"275\":1}}],[\"后面还会有分布式调用\",{\"1\":{\"227\":1}}],[\"后面的行是首部行\",{\"1\":{\"556\":1}}],[\"后面的行叫做首部行\",{\"1\":{\"556\":1}}],[\"后面的流程\",{\"1\":{\"180\":1}}],[\"后面的0变成1\",{\"1\":{\"168\":1}}],[\"后面将在foreach中将其作为键使用\",{\"1\":{\"86\":1}}],[\"后继节点和插入节点的指向就行了\",{\"1\":{\"154\":1}}],[\"后端只需要返回\",{\"1\":{\"816\":1}}],[\"后端可能无法及时处理的情况\",{\"1\":{\"742\":1}}],[\"后端代码加分布式锁\",{\"1\":{\"413\":1}}],[\"后端也没有做防止重复提交\",{\"1\":{\"413\":1}}],[\"后端开发\",{\"0\":{\"922\":1},\"2\":{\"133\":1}}],[\"后端demo\",{\"0\":{\"125\":1}}],[\"后端\",{\"0\":{\"131\":1,\"918\":1},\"1\":{\"67\":1},\"2\":{\"93\":1,\"99\":1}}],[\"后端学习笔记\",{\"1\":{\"59\":1}}],[\"当需要回滚事务时\",{\"1\":{\"874\":1}}],[\"当需要更换一个\",{\"1\":{\"427\":1}}],[\"当下次请求相同的数据时\",{\"1\":{\"858\":1}}],[\"当错误率或响应时间超过预设的阈值时\",{\"1\":{\"858\":1}}],[\"当错误率或响应时间超过阈值时\",{\"1\":{\"855\":1}}],[\"当系统出现异常情况时\",{\"1\":{\"856\":1}}],[\"当请求到达时\",{\"1\":{\"851\":1,\"859\":1}}],[\"当第一次调用发生时\",{\"1\":{\"848\":1}}],[\"当第一个文件写满了\",{\"1\":{\"771\":1}}],[\"当远程服务不可用或响应时间过长时\",{\"1\":{\"847\":1}}],[\"当配置信息发生变化时\",{\"1\":{\"842\":1}}],[\"当eureka\",{\"1\":{\"838\":1}}],[\"当服务调用失败时会执行此方法\",{\"1\":{\"858\":1}}],[\"当服务熔断打开时\",{\"1\":{\"858\":1}}],[\"当服务实例发生故障或下线时\",{\"1\":{\"834\":1}}],[\"当服务器回复\",{\"1\":{\"573\":1}}],[\"当服务器端接收到这个包时\",{\"1\":{\"568\":1}}],[\"当通过代理对象调用\",{\"1\":{\"812\":1}}],[\"当多个事务同时存在的时候\",{\"1\":{\"811\":1}}],[\"当循环依赖的实例都采用\",{\"1\":{\"799\":1}}],[\"当想对注入的过程做更多的控制\",{\"1\":{\"784\":1}}],[\"当无法拉取到消息后\",{\"1\":{\"771\":1}}],[\"当文件满了\",{\"1\":{\"771\":1}}],[\"当一条消息初次消费失败\",{\"1\":{\"766\":1}}],[\"当一个服务实例向eureka\",{\"1\":{\"838\":1}}],[\"当一个服务实例启动时\",{\"1\":{\"837\":1}}],[\"当一个\",{\"1\":{\"767\":1}}],[\"当一个新的作业到达时\",{\"1\":{\"640\":1}}],[\"当一个进程开始运行时\",{\"1\":{\"637\":1}}],[\"当一个报文丢失时\",{\"1\":{\"591\":2}}],[\"当一个对象被\",{\"1\":{\"408\":1}}],[\"当一个对象实例作为一个参数被传递到方法中时\",{\"1\":{\"259\":1}}],[\"当一个线程对缓存的key进行写操作的时候\",{\"1\":{\"707\":1}}],[\"当一个线程无事可做\",{\"1\":{\"353\":1}}],[\"当一个线程完成任务时\",{\"1\":{\"353\":1}}],[\"当一个线程调用\",{\"1\":{\"302\":1}}],[\"当一个线程a调用一个共享变量的\",{\"1\":{\"302\":1}}],[\"当一个执行中的线程a调用了thread\",{\"1\":{\"302\":1}}],[\"当监听器处触发后才开始消费消息\",{\"1\":{\"751\":1}}],[\"当元素多时用\",{\"1\":{\"734\":1}}],[\"当别的进程也要来占时\",{\"1\":{\"727\":1}}],[\"当value是list\",{\"1\":{\"719\":1}}],[\"当value是string\",{\"1\":{\"719\":1}}],[\"当vaule是string时\",{\"1\":{\"719\":1}}],[\"当硬盘压力过大时\",{\"1\":{\"718\":1}}],[\"当发现超过逻辑过期时间后\",{\"1\":{\"712\":1}}],[\"当发⽣缺⻚中断时\",{\"1\":{\"658\":2}}],[\"当出现大量缓存失效\",{\"1\":{\"704\":1}}],[\"当出现读写锁冲突的时候\",{\"1\":{\"522\":1}}],[\"当缓存服务器宕机或超时响应时\",{\"1\":{\"704\":1}}],[\"当节点数量变化时\",{\"1\":{\"693\":1}}],[\"当任一节点发生故障时\",{\"1\":{\"691\":1}}],[\"当它确认主节点主观\",{\"1\":{\"689\":1}}],[\"当其中一个实例发生故障时\",{\"1\":{\"838\":1}}],[\"当其恢复后命令它去复制新的主节点\",{\"1\":{\"688\":1}}],[\"当其它线程读取该共享变量\",{\"1\":{\"322\":1}}],[\"当超过\",{\"1\":{\"688\":1}}],[\"当sentinel主观下线的节点是主节点时\",{\"1\":{\"688\":1}}],[\"当server启动时\",{\"1\":{\"222\":1}}],[\"当从节点收集到足够的选票之后\",{\"1\":{\"698\":1}}],[\"当从节点定时任务检测到达故障选举时间\",{\"1\":{\"698\":1}}],[\"当从节点符合故障转移资格后\",{\"1\":{\"698\":1}}],[\"当从节点\",{\"1\":{\"685\":1}}],[\"当从节点加载完rdb文件后\",{\"1\":{\"685\":1}}],[\"当数据量较大时\",{\"1\":{\"685\":1}}],[\"当主从连接恢复后\",{\"1\":{\"685\":1}}],[\"当主从节点网络恢复后\",{\"1\":{\"685\":1}}],[\"当主从节点之间网络出现中断时\",{\"1\":{\"685\":1}}],[\"当主节点出现问题时\",{\"1\":{\"682\":1}}],[\"当主键具有不确定性\",{\"1\":{\"497\":1}}],[\"当redis版本小于4\",{\"1\":{\"719\":1}}],[\"当redis版本大于4\",{\"1\":{\"719\":1}}],[\"当redis发生了故障\",{\"1\":{\"679\":1}}],[\"当redis服务器重启时\",{\"1\":{\"676\":1}}],[\"当⽤户调⽤\",{\"1\":{\"664\":1}}],[\"当⽤户程序执⾏\",{\"1\":{\"663\":1}}],[\"当检查到有事件产⽣后\",{\"1\":{\"664\":1}}],[\"当内核数据准备好时\",{\"1\":{\"663\":1}}],[\"当内存资源不足时\",{\"1\":{\"657\":1}}],[\"当拷⻉过程完成\",{\"1\":{\"663\":1}}],[\"当两个线程是属于同⼀个进程\",{\"1\":{\"643\":1}}],[\"当两个线程不是属于同⼀个进程\",{\"1\":{\"643\":1}}],[\"当两个线程都到达同步点时\",{\"1\":{\"349\":1}}],[\"当时将这\",{\"1\":{\"713\":1}}],[\"当时间片用完时\",{\"1\":{\"640\":1}}],[\"当时插入的事务\",{\"1\":{\"523\":1}}],[\"当应⽤程序使⽤系统调⽤时\",{\"1\":{\"633\":1}}],[\"当程序使⽤⽤户空间时\",{\"1\":{\"632\":1}}],[\"当程序更新一个变量时\",{\"1\":{\"340\":1}}],[\"当用户浏览网页的时候\",{\"1\":{\"615\":1}}],[\"当用户第二次访问服务器时\",{\"1\":{\"566\":1}}],[\"当攻击者破解了\",{\"1\":{\"612\":1}}],[\"当遇到\",{\"1\":{\"608\":1}}],[\"当源主机需要将一个数据包要发送到目的主机时\",{\"1\":{\"606\":1}}],[\"当局域网主机想要与公网主机进行通信时\",{\"1\":{\"605\":1}}],[\"当进行区域传送\",{\"1\":{\"600\":1}}],[\"当网络拥塞发生丢包时\",{\"1\":{\"588\":1}}],[\"当每过一个\",{\"1\":{\"587\":1}}],[\"当cwnd到达该阀值后\",{\"1\":{\"586\":1}}],[\"当收到\",{\"1\":{\"586\":1}}],[\"当收到⼀个\",{\"1\":{\"586\":1}}],[\"当收到服务端重新发送的\",{\"1\":{\"578\":1}}],[\"当⽹络发送拥塞时\",{\"1\":{\"585\":1}}],[\"当没有响应数据要发送时\",{\"1\":{\"584\":1}}],[\"当有响应数据要发送时\",{\"1\":{\"584\":1}}],[\"当有事件触发时\",{\"1\":{\"280\":1}}],[\"当接收方来不及处理发送方的数据\",{\"1\":{\"581\":1}}],[\"当客户端\",{\"1\":{\"726\":1}}],[\"当客户端需要执行多条\",{\"1\":{\"726\":1}}],[\"当客户端想\",{\"1\":{\"600\":1}}],[\"当客户端向服务端发送\",{\"1\":{\"578\":1}}],[\"当客户端回复\",{\"1\":{\"573\":1}}],[\"当线上的数据库数据量到达几百万\",{\"1\":{\"537\":1}}],[\"当线程数\",{\"1\":{\"354\":1}}],[\"当线程池中线程池数<\",{\"1\":{\"354\":1}}],[\"当线程执行完毕后\",{\"1\":{\"326\":1}}],[\"当线程使用完时间片后\",{\"1\":{\"304\":1}}],[\"当线程a运行时\",{\"1\":{\"302\":1}}],[\"当某个服务出现故障或异常时\",{\"1\":{\"855\":1}}],[\"当某个eureka\",{\"1\":{\"838\":1}}],[\"当某个节点判断另一个节点主观下线后\",{\"1\":{\"698\":1}}],[\"当某个节点故障时\",{\"1\":{\"694\":1}}],[\"当某个流发⽣丢包时\",{\"1\":{\"559\":1}}],[\"当某个\",{\"1\":{\"528\":1,\"664\":1}}],[\"当事务进行写操作时\",{\"1\":{\"519\":1}}],[\"当事务尝试读取记录时\",{\"1\":{\"519\":1}}],[\"当事务开始修改数据时\",{\"1\":{\"519\":1}}],[\"当事务对数据变动完毕想要将其更新到表中时\",{\"1\":{\"515\":1}}],[\"当事务对数据库进行修改\",{\"1\":{\"479\":1}}],[\"当事务\",{\"1\":{\"514\":1}}],[\"当使用基于注解的配置和类路径扫描时\",{\"1\":{\"784\":1}}],[\"当使用唯一性索引\",{\"1\":{\"513\":1}}],[\"当使用索引条件下推优化时\",{\"1\":{\"510\":1}}],[\"当字段值比较长的时候\",{\"1\":{\"497\":1}}],[\"当字符创常量池没有\",{\"1\":{\"265\":1}}],[\"当表仅有一行记录时\",{\"1\":{\"493\":1}}],[\"当write\",{\"1\":{\"483\":1}}],[\"当变量\",{\"1\":{\"408\":1}}],[\"当这台机器宕机时\",{\"1\":{\"698\":1}}],[\"当这\",{\"1\":{\"586\":1}}],[\"当这些节点超过\",{\"1\":{\"688\":1}}],[\"当这些发送⽅的数据包被接收⽅处理后⼜会向对⽅发送响应\",{\"1\":{\"576\":1}}],[\"当这些对象的存活年龄超过分代年龄时便会进入老年代\",{\"1\":{\"417\":1}}],[\"当这个年龄达到\",{\"1\":{\"400\":1}}],[\"当这一块的内存用完了\",{\"1\":{\"395\":1}}],[\"当垃圾收集器开始工作\",{\"1\":{\"392\":1}}],[\"当引用失效时\",{\"1\":{\"390\":1}}],[\"当提交任务的速度大于处理任务的速度时\",{\"1\":{\"364\":1}}],[\"当提议者收到了多数接受者的接受应答后\",{\"1\":{\"216\":1}}],[\"当运行当线程数=\",{\"1\":{\"354\":1}}],[\"当运算符放在变量之后时\",{\"1\":{\"245\":1}}],[\"当运算符放在变量之前时\",{\"1\":{\"245\":1}}],[\"当blockingqueue也满了\",{\"1\":{\"354\":1}}],[\"当调用目标方法时\",{\"1\":{\"442\":1}}],[\"当调用\",{\"1\":{\"353\":1}}],[\"当达到safepoint时获得偏向锁的线程被挂起\",{\"1\":{\"328\":1}}],[\"当达到次数限制之后报警\",{\"1\":{\"205\":1}}],[\"当执行完退出后\",{\"1\":{\"325\":1}}],[\"当前key是一个热点key\",{\"1\":{\"712\":1}}],[\"当前执行完的指令等等\",{\"1\":{\"636\":1}}],[\"当前读\",{\"1\":{\"523\":1}}],[\"当前的唯一线程\",{\"1\":{\"362\":1}}],[\"当前任务直接丢弃\",{\"1\":{\"355\":1}}],[\"当前线程执行轻量级锁状态下的锁获取步骤\",{\"1\":{\"328\":1}}],[\"当前线程a等待thread线程终止之后才从thread\",{\"1\":{\"306\":1}}],[\"当前线程a等待thread线程终止之后才\",{\"1\":{\"302\":1}}],[\"当前\",{\"1\":{\"324\":1}}],[\"当前对象实例的锁\",{\"1\":{\"324\":1}}],[\"当前节点是否为树节点\",{\"1\":{\"165\":1}}],[\"当前节点和key匹配\",{\"1\":{\"165\":1}}],[\"当对象被反序列化时\",{\"1\":{\"282\":1}}],[\"当\",{\"1\":{\"245\":2,\"446\":1,\"509\":1,\"519\":1,\"560\":2,\"587\":1,\"678\":1,\"687\":1,\"698\":1,\"730\":1,\"767\":1,\"800\":1}}],[\"当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时\",{\"1\":{\"239\":1}}],[\"当桶装满水后溢出的部分还是会被丢弃的\",{\"1\":{\"227\":1}}],[\"当操作失败时调用取消操作\",{\"1\":{\"204\":1}}],[\"当操作成功时调用确认操作\",{\"1\":{\"204\":1}}],[\"当当前hashmap的元素个数达到一个临界值的时候\",{\"1\":{\"173\":1}}],[\"当⼆进制的各个位置都是1以后\",{\"1\":{\"169\":1}}],[\"当然我们现在大部分的开发都是前后端分离\",{\"1\":{\"816\":1}}],[\"当然其实主要还是对应数据库的事务隔离级别\",{\"1\":{\"810\":1}}],[\"当然也开始逐渐去zookeeper\",{\"1\":{\"770\":1}}],[\"当然实际的开发\",{\"1\":{\"727\":1}}],[\"当然实际上key并不是threadlocal本身\",{\"1\":{\"310\":1}}],[\"当然还会受到系统⽂件描述符限制\",{\"1\":{\"664\":1}}],[\"当然还有很多种方法\",{\"1\":{\"76\":1}}],[\"当然不是\",{\"1\":{\"500\":1}}],[\"当然不是每个接口都可以缩写成\",{\"1\":{\"292\":1}}],[\"当然现在一般的云厂商都提供了可视化的平台\",{\"1\":{\"485\":1}}],[\"当然现在也不新了\",{\"1\":{\"290\":1}}],[\"当然单参数也可以封装成map\",{\"1\":{\"445\":1}}],[\"当然了\",{\"1\":{\"442\":1}}],[\"当然可以\",{\"1\":{\"441\":1}}],[\"当然面试肯定不能这么答\",{\"1\":{\"406\":1}}],[\"当然这些枝枝蔓蔓可以去看看\",{\"1\":{\"270\":1}}],[\"当然hashmap里进行了优化改造\",{\"1\":{\"170\":1}}],[\"当然\",{\"1\":{\"154\":2,\"198\":1,\"266\":1,\"333\":1,\"359\":1,\"370\":1,\"379\":1,\"395\":1,\"406\":1,\"435\":1,\"457\":1,\"516\":1,\"532\":1,\"637\":1}}],[\"当我们引入核心依赖时\",{\"1\":{\"819\":1}}],[\"当我们执行\",{\"1\":{\"726\":1}}],[\"当我们开启aof持久化功能时\",{\"1\":{\"718\":1}}],[\"当我们需要确定某一个\",{\"1\":{\"694\":1}}],[\"当我们需要给一个表加表锁的时候\",{\"1\":{\"514\":1}}],[\"当我们\",{\"1\":{\"584\":1}}],[\"当我们使用范围查询\",{\"1\":{\"513\":1}}],[\"当我们使用用等值查询或者范围查询\",{\"1\":{\"513\":1}}],[\"当我们使用唯一性的索引\",{\"1\":{\"513\":1}}],[\"当我们启动\",{\"1\":{\"299\":1}}],[\"当我们定义了\",{\"1\":{\"293\":1}}],[\"当我了解picgo+gitee可以设置图床的时候\",{\"1\":{\"106\":1}}],[\"当我使用easyui插件编写项目的时候\",{\"1\":{\"70\":1}}],[\"展开时图片\",{\"1\":{\"76\":1}}],[\"默认抛出了未检查\",{\"1\":{\"813\":1}}],[\"默认是使用\",{\"1\":{\"812\":1}}],[\"默认是短连接\",{\"1\":{\"558\":1}}],[\"默认读已提交\",{\"1\":{\"810\":1}}],[\"默认可重复读\",{\"1\":{\"810\":1}}],[\"默认如果使用接口的\",{\"1\":{\"807\":1}}],[\"默认所有\",{\"1\":{\"788\":1}}],[\"默认都是单例的\",{\"1\":{\"785\":1}}],[\"默认开启\",{\"1\":{\"778\":1}}],[\"默认八个写队列\",{\"1\":{\"761\":1}}],[\"默认策略\",{\"1\":{\"717\":1}}],[\"默认最大缓存1mb\",{\"1\":{\"685\":1}}],[\"默认最⼤值为\",{\"1\":{\"664\":1}}],[\"默认使用\",{\"1\":{\"817\":1}}],[\"默认使用短连接\",{\"1\":{\"558\":1}}],[\"默认使用此策略\",{\"1\":{\"355\":1}}],[\"默认长连接\",{\"1\":{\"558\":1}}],[\"默认行锁类型就是临键锁\",{\"1\":{\"513\":1}}],[\"默认存储引擎是\",{\"1\":{\"475\":1}}],[\"默认不打开二级缓存\",{\"1\":{\"446\":1}}],[\"默认也是采用\",{\"1\":{\"446\":1}}],[\"默认为\",{\"1\":{\"777\":1}}],[\"默认为simple\",{\"1\":{\"445\":1}}],[\"默认为当前所在目录\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"默认的事务传播行为是\",{\"1\":{\"811\":1}}],[\"默认的事务隔离级别是可重复读\",{\"1\":{\"520\":1}}],[\"默认的作用域\",{\"1\":{\"797\":1}}],[\"默认的呗\",{\"1\":{\"406\":1}}],[\"默认的segment长度是16\",{\"1\":{\"180\":1}}],[\"默认用的是什么呢\",{\"1\":{\"406\":1}}],[\"默认创建的对象lock\",{\"1\":{\"332\":1}}],[\"默认10次\",{\"1\":{\"329\":1}}],[\"默认范围是\",{\"1\":{\"269\":1}}],[\"默认情况下不保证顺序\",{\"1\":{\"761\":1}}],[\"默认情况下就是集群消费\",{\"1\":{\"745\":1}}],[\"默认情况下执行shutdown命令时\",{\"1\":{\"676\":1}}],[\"默认情况\",{\"1\":{\"257\":1,\"744\":1}}],[\"默认扩容因子\",{\"1\":{\"173\":1}}],[\"默认容量\",{\"1\":{\"173\":1}}],[\"默认值为当前时间\",{\"1\":{\"463\":1}}],[\"默认值null\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"默认值\",{\"1\":{\"137\":4,\"140\":4,\"147\":4,\"238\":1,\"463\":1,\"703\":1,\"879\":4}}],[\"默认\",{\"0\":{\"250\":1},\"1\":{\"76\":1,\"396\":1,\"400\":1}}],[\"全局顺序消息\",{\"0\":{\"761\":1}}],[\"全局顺序消息指某个\",{\"1\":{\"759\":1}}],[\"全局字典\",{\"1\":{\"731\":1}}],[\"全局事务id和分支事务id在分布式事务中通过上下文传递的方式进行传递\",{\"1\":{\"873\":1}}],[\"全局事务id和分支事务id是怎么传递的\",{\"0\":{\"873\":1}}],[\"全局事务提交或回滚\",{\"1\":{\"872\":1}}],[\"全局事务调用处理结束后\",{\"1\":{\"208\":1}}],[\"全局事务\",{\"1\":{\"208\":1}}],[\"全局事务管理\",{\"1\":{\"202\":1}}],[\"全量复制的完整运行流程如下\",{\"1\":{\"685\":1}}],[\"全量复制的场景\",{\"1\":{\"677\":1}}],[\"全量复制\",{\"1\":{\"685\":1}}],[\"全量复制和部分复制\",{\"1\":{\"685\":1}}],[\"全量文件重放\",{\"1\":{\"680\":1}}],[\"全班都会被耽误\",{\"1\":{\"672\":1}}],[\"全连接队列存放的是完成三次握手的连接\",{\"1\":{\"573\":1}}],[\"全表扫描\",{\"1\":{\"493\":1}}],[\"全部移到元空间中\",{\"1\":{\"381\":1}}],[\"全部关闭\",{\"1\":{\"73\":1}}],[\"全军出击\",{\"1\":{\"345\":1}}],[\"全称\",{\"1\":{\"280\":1}}],[\"全选就好了\",{\"1\":{\"111\":1}}],[\"全屏模式\",{\"0\":{\"40\":1}}],[\"不用\",{\"1\":{\"788\":1}}],[\"不用去查主键索引\",{\"1\":{\"508\":1}}],[\"不排斥各种优秀的开源框架\",{\"1\":{\"782\":1}}],[\"不影响\",{\"1\":{\"767\":1}}],[\"不论方法\",{\"1\":{\"813\":1}}],[\"不论该消息属于哪个\",{\"1\":{\"766\":1}}],[\"不论查询几条数据\",{\"1\":{\"496\":1}}],[\"不丢失呢\",{\"0\":{\"753\":1}}],[\"不等接收方发回响应\",{\"1\":{\"750\":1}}],[\"不等于\",{\"1\":{\"515\":1}}],[\"不等于操作符会导致查询引擎放弃查询索引\",{\"1\":{\"489\":1}}],[\"不易进行二次开发\",{\"1\":{\"741\":1}}],[\"不宜使用数组来实现\",{\"1\":{\"732\":1}}],[\"不做任何过滤和限制\",{\"1\":{\"730\":1}}],[\"不保存数组的长度\",{\"1\":{\"730\":1}}],[\"不保证执行的时机\",{\"1\":{\"774\":1}}],[\"不保证交付顺序\",{\"1\":{\"599\":1}}],[\"不保证消息交付\",{\"1\":{\"599\":1}}],[\"不保证获取的数据为最新数据\",{\"1\":{\"190\":1}}],[\"不符合\",{\"1\":{\"730\":1}}],[\"不符合就丢弃\",{\"1\":{\"609\":1}}],[\"不像\",{\"1\":{\"724\":1}}],[\"不健康\",{\"1\":{\"690\":1}}],[\"不存在则继续\",{\"1\":{\"690\":2}}],[\"不存在就创建\",{\"1\":{\"451\":1}}],[\"不存在就再插入链表\",{\"1\":{\"180\":1}}],[\"不存储数据\",{\"1\":{\"687\":1}}],[\"不及时\",{\"1\":{\"641\":1}}],[\"不断累计之下\",{\"1\":{\"853\":1}}],[\"不断打磨内容\",{\"1\":{\"622\":1}}],[\"不断完善\",{\"0\":{\"622\":1}}],[\"不断堆积不能被收走的杂物\",{\"1\":{\"388\":1}}],[\"不合适大量数据文件加密\",{\"1\":{\"617\":1}}],[\"不然一次路由器收到数据包都要满世界寻找目的\",{\"1\":{\"607\":1}}],[\"不然会查不到任何结果\",{\"1\":{\"440\":1}}],[\"不然会报错\",{\"1\":{\"252\":1}}],[\"不内置客户端或网络反馈机制\",{\"1\":{\"599\":1}}],[\"不进行拥塞控制\",{\"1\":{\"599\":1}}],[\"不跟踪连接状态\",{\"1\":{\"599\":1}}],[\"不重排\",{\"1\":{\"599\":1}}],[\"不重传\",{\"1\":{\"599\":1}}],[\"不设置包序号\",{\"1\":{\"599\":1}}],[\"不设置的话\",{\"1\":{\"356\":1}}],[\"不确认\",{\"1\":{\"599\":1}}],[\"不必建立连接或重启状态机\",{\"1\":{\"599\":1}}],[\"不必等待\",{\"1\":{\"588\":1}}],[\"不必唤醒所有线程\",{\"1\":{\"332\":1}}],[\"不妨称之为紧急偏移\",{\"1\":{\"580\":1}}],[\"不陪你闹了\",{\"1\":{\"574\":1}}],[\"不安全的缺陷\",{\"1\":{\"561\":1}}],[\"不改变信息\",{\"1\":{\"553\":1}}],[\"不停机扩容\",{\"1\":{\"532\":1}}],[\"不停机扩容怎么实现\",{\"0\":{\"532\":1}}],[\"不足之处在于如果有很多二次读取\",{\"1\":{\"528\":1}}],[\"不阻塞其他事务的读和写\",{\"1\":{\"522\":1}}],[\"不使用这样一些结构呢\",{\"1\":{\"732\":1}}],[\"不使用\",{\"1\":{\"510\":1}}],[\"不使用索引条件下推优化时存储引擎通过索引检索到数据\",{\"1\":{\"510\":1}}],[\"不使用任何修饰符\",{\"1\":{\"250\":1}}],[\"不建议用无序的值\",{\"1\":{\"497\":1}}],[\"不要在收到消息后就立即发送消费确认\",{\"1\":{\"756\":1}}],[\"不要和插入意向锁搞混\",{\"1\":{\"514\":1}}],[\"不要作为主键或者索引\",{\"1\":{\"497\":1}}],[\"不要建索引\",{\"1\":{\"497\":1}}],[\"不要慌\",{\"1\":{\"176\":1}}],[\"不允许为\",{\"1\":{\"495\":1}}],[\"不支持微服务网格\",{\"1\":{\"831\":1}}],[\"不支持分布式事务\",{\"1\":{\"831\":1}}],[\"不支持\",{\"1\":{\"799\":1}}],[\"不支持基于构造器注入的循环依赖\",{\"1\":{\"799\":1}}],[\"不支持删除元素\",{\"1\":{\"705\":1}}],[\"不支持持久化连接的问题\",{\"1\":{\"548\":1}}],[\"不支持外键\",{\"1\":{\"477\":1}}],[\"不支持数据库无关性\",{\"1\":{\"434\":1}}],[\"不提供事务支持\",{\"1\":{\"477\":1}}],[\"不统计\",{\"1\":{\"469\":1}}],[\"不占据多余的空间\",{\"1\":{\"461\":1}}],[\"不只取得两张表中满足存在连接匹配关系的记录\",{\"1\":{\"458\":1}}],[\"不关闭statement对象\",{\"1\":{\"451\":1}}],[\"不关闭连接\",{\"1\":{\"389\":1}}],[\"不常用\",{\"1\":{\"445\":1}}],[\"不光是mybatis\",{\"1\":{\"442\":1}}],[\"不止支持一对一\",{\"1\":{\"441\":1}}],[\"不单可以映射枚举类\",{\"1\":{\"438\":1}}],[\"不增加或增加缓慢\",{\"1\":{\"418\":1}}],[\"不一定的\",{\"1\":{\"408\":1}}],[\"不知道你听没听过一个新人up主小约翰可汗\",{\"1\":{\"346\":1}}],[\"不过是往\",{\"1\":{\"788\":1}}],[\"不过期\",{\"1\":{\"712\":1}}],[\"不过该方案最大的问题是\",{\"1\":{\"693\":1}}],[\"不过主节点内部存在的复制积压缓冲区\",{\"1\":{\"685\":1}}],[\"不过这时候\",{\"1\":{\"582\":1}}],[\"不过也是可以接受的\",{\"1\":{\"534\":1}}],[\"不过\",{\"1\":{\"353\":1}}],[\"不过其他三个条件都是有办法破坏掉的\",{\"1\":{\"342\":1}}],[\"不过计算方式有点反常规\",{\"1\":{\"270\":1}}],[\"不可用后\",{\"1\":{\"767\":1}}],[\"不可用或者繁忙的时候\",{\"1\":{\"767\":1}}],[\"不可投递\",{\"1\":{\"765\":1}}],[\"不可变更\",{\"1\":{\"607\":1}}],[\"不可靠\",{\"1\":{\"602\":1}}],[\"不可回滚\",{\"1\":{\"467\":1}}],[\"不可拆分\",{\"1\":{\"408\":1}}],[\"不可剥夺\",{\"1\":{\"342\":1}}],[\"不可剥夺条件\",{\"1\":{\"342\":1,\"647\":1,\"648\":1}}],[\"不可中断的\",{\"1\":{\"318\":1}}],[\"不可重复读\",{\"1\":{\"521\":1}}],[\"不可重复读呢\",{\"0\":{\"521\":1}}],[\"不可重复\",{\"1\":{\"152\":1}}],[\"不擅技术\",{\"1\":{\"315\":1}}],[\"不管消息消费多少次\",{\"1\":{\"757\":1}}],[\"不管哪种刷盘都可以保证消息一定存储在pagecache中\",{\"1\":{\"755\":1}}],[\"不管哪一种\",{\"1\":{\"270\":1}}],[\"不管数据有没有设置超时属性\",{\"1\":{\"717\":1}}],[\"不管是基于重一点的进程模型\",{\"1\":{\"664\":1}}],[\"不管是单列索引还是联合索引\",{\"1\":{\"508\":1}}],[\"不管成功与否\",{\"1\":{\"518\":1}}],[\"不管\",{\"1\":{\"324\":1}}],[\"不管怎么重排序\",{\"1\":{\"321\":1}}],[\"不管jvm的内存空间是否充足\",{\"1\":{\"311\":1}}],[\"不赞成代码被\",{\"1\":{\"291\":1}}],[\"不相等\",{\"1\":{\"269\":1}}],[\"不行你看改一天\",{\"1\":{\"353\":1}}],[\"不行\",{\"1\":{\"263\":1,\"801\":1}}],[\"不是有了流量控制吗\",{\"1\":{\"585\":1}}],[\"不是拍脑门就开始调优的\",{\"1\":{\"413\":1}}],[\"不是应该为\",{\"1\":{\"276\":1}}],[\"不是的话就创建一个新的\",{\"1\":{\"269\":1}}],[\"不是不可变类吗\",{\"0\":{\"266\":1}}],[\"不是\",{\"1\":{\"263\":1,\"379\":1,\"813\":1}}],[\"不是引用指向的内容的不可变\",{\"1\":{\"255\":1}}],[\"不是体现在时间复杂度上\",{\"1\":{\"154\":1}}],[\"不属于类的任何一个对象\",{\"1\":{\"254\":1}}],[\"不再⽤\",{\"1\":{\"664\":1}}],[\"不再拷⻉到⽤户态\",{\"1\":{\"662\":1}}],[\"不再执行下面的代码\",{\"1\":{\"243\":1}}],[\"不再执行循环\",{\"1\":{\"243\":1}}],[\"不再通知\",{\"1\":{\"207\":1}}],[\"不正确\",{\"1\":{\"239\":1}}],[\"不仅要保存数据\",{\"1\":{\"500\":1}}],[\"不仅如此\",{\"1\":{\"481\":1,\"668\":1}}],[\"不仅吸收了\",{\"1\":{\"231\":1}}],[\"不仅支持\",{\"1\":{\"192\":1}}],[\"不同部署实例或者动态运行时需要进行调整和管理\",{\"1\":{\"840\":1}}],[\"不同消费组之间消费进度彼此不受影响\",{\"1\":{\"744\":1}}],[\"不同分段分散到不同的数据库表中\",{\"1\":{\"531\":1}}],[\"不同于\",{\"1\":{\"751\":1}}],[\"不同于悲观锁\",{\"1\":{\"515\":1}}],[\"不同于在共享变量上调用\",{\"1\":{\"302\":1}}],[\"不同之处在于其存储作用域为\",{\"1\":{\"446\":1}}],[\"不同点\",{\"1\":{\"434\":1}}],[\"不同类型线程池的参数配置\",{\"1\":{\"359\":1}}],[\"不同锁的状态是什么样的\",{\"1\":{\"327\":1}}],[\"不同的元素计算后分到不同的片\",{\"1\":{\"719\":1}}],[\"不同的段是有不同的属性的\",{\"1\":{\"652\":1}}],[\"不同的程序被放到不同的处理器上运行\",{\"1\":{\"635\":1}}],[\"不同的实现\",{\"1\":{\"592\":1}}],[\"不同的隔离级别\",{\"1\":{\"521\":1}}],[\"不同的事务会看到不同版本的数据行\",{\"1\":{\"519\":1}}],[\"不同的应用程序可能会依赖同一个第三方类库的不同版本\",{\"1\":{\"429\":1}}],[\"不同的线程在同一个计数器上工作\",{\"1\":{\"347\":1}}],[\"不同的是\",{\"1\":{\"302\":1,\"566\":1}}],[\"不同的平台安装对应的\",{\"1\":{\"235\":1}}],[\"不同的\",{\"1\":{\"233\":1,\"797\":1}}],[\"不同\",{\"1\":{\"219\":1,\"767\":1}}],[\"不同元素可以有相同的动画顺序\",{\"1\":{\"29\":1}}],[\"不违背以前作出的承诺的前提下\",{\"1\":{\"215\":1}}],[\"不会立即返回\",{\"1\":{\"778\":1}}],[\"不会立刻将消息丢弃\",{\"1\":{\"766\":1}}],[\"不会为其创建相应的死信队列\",{\"1\":{\"766\":1}}],[\"不会再被消费者正常消费\",{\"1\":{\"766\":1}}],[\"不会因为堆积导致性能下降\",{\"1\":{\"742\":1}}],[\"不会被其他客户端发送来的命令请求打断\",{\"1\":{\"724\":1}}],[\"不会删除任何数据\",{\"1\":{\"717\":1}}],[\"不会发生队首阻塞\",{\"1\":{\"599\":1}}],[\"不会发⽣互斥现象\",{\"1\":{\"324\":1}}],[\"不会有重传\",{\"1\":{\"598\":1}}],[\"不会收到\",{\"1\":{\"573\":1}}],[\"不会改变服务器上的信息\",{\"1\":{\"553\":1}}],[\"不会出现重复元素\",{\"1\":{\"729\":1}}],[\"不会出现死锁\",{\"1\":{\"512\":1}}],[\"不会出现环形链表的问题\",{\"1\":{\"177\":1}}],[\"不会覆盖已经写的文件\",{\"1\":{\"480\":1}}],[\"不会忽略列值为\",{\"1\":{\"469\":2}}],[\"不会合并重复的记录行\",{\"1\":{\"468\":1}}],[\"不会占用任何资源\",{\"1\":{\"364\":1}}],[\"不会写入\",{\"1\":{\"287\":1}}],[\"不会进行运算\",{\"1\":{\"241\":1}}],[\"不会直接被丢弃\",{\"1\":{\"227\":1}}],[\"不会一直持有资源的锁\",{\"1\":{\"204\":1}}],[\"不会吧\",{\"1\":{\"161\":1}}],[\"不推荐\",{\"1\":{\"158\":1,\"440\":2}}],[\"不能为了微服务而微服务\",{\"1\":{\"829\":1}}],[\"不能这么办\",{\"1\":{\"798\":1}}],[\"不能每次来取对象\",{\"1\":{\"788\":1}}],[\"不能杜绝\",{\"1\":{\"730\":1}}],[\"不能保证一定删除成功\",{\"1\":{\"709\":1}}],[\"不能保证原子性\",{\"1\":{\"318\":2}}],[\"不能正常工作时\",{\"1\":{\"687\":1}}],[\"不能传递复杂消息\",{\"1\":{\"641\":1}}],[\"不能让太多的水\",{\"1\":{\"585\":1}}],[\"不能忽略整个网络中发⽣的事\",{\"1\":{\"585\":1}}],[\"不能是四次\",{\"0\":{\"569\":1}}],[\"不能再依赖数据库自身的主键生成机制\",{\"1\":{\"534\":1}}],[\"不能人为干预是否在一张表中生成哈希索引\",{\"1\":{\"475\":1}}],[\"不能使用单引号\",{\"1\":{\"440\":1}}],[\"不能防止sql\",{\"1\":{\"439\":1}}],[\"不能随意更换数据库\",{\"1\":{\"433\":1}}],[\"不能执行\",{\"1\":{\"348\":1}}],[\"不能有的玩家都出完装了\",{\"1\":{\"345\":1}}],[\"不能有其他变量\",{\"1\":{\"252\":1}}],[\"不能\",{\"1\":{\"315\":1}}],[\"不能修饰类和方法\",{\"1\":{\"282\":1}}],[\"不能修饰类\",{\"1\":{\"250\":2}}],[\"不能比父类被重写方法声明更多的异常\",{\"1\":{\"249\":1}}],[\"不能在多线程下发生并发修改\",{\"1\":{\"157\":1}}],[\"不能依赖于这个异常是否抛出而进行并发操作的编程\",{\"1\":{\"157\":1}}],[\"不能直接输入到列表框\",{\"1\":{\"72\":1}}],[\"不需要像\",{\"1\":{\"664\":1}}],[\"不需要内核的参与\",{\"1\":{\"644\":1}}],[\"不需要创建连接\",{\"1\":{\"600\":1}}],[\"不需要确认\",{\"1\":{\"599\":1}}],[\"不需要遍历整棵\",{\"1\":{\"504\":1}}],[\"不需要花费精力去处理加载驱动\",{\"1\":{\"433\":1}}],[\"不需要再建消息表\",{\"1\":{\"206\":1}}],[\"不需要再考虑路径的问题啦\",{\"1\":{\"116\":1}}],[\"不需要重新通过哈希函数计算位置\",{\"1\":{\"175\":1}}],[\"不需要移动元素\",{\"1\":{\"154\":1}}],[\"6m\",{\"1\":{\"763\":1}}],[\"6379>\",{\"1\":{\"724\":5}}],[\"63\",{\"0\":{\"534\":1},\"1\":{\"780\":1}}],[\"62\",{\"0\":{\"533\":1,\"617\":1},\"1\":{\"540\":1}}],[\"61\",{\"0\":{\"532\":1,\"616\":1},\"1\":{\"531\":1}}],[\"65535\",{\"1\":{\"587\":1}}],[\"65536\",{\"1\":{\"554\":1}}],[\"65532\",{\"1\":{\"461\":1}}],[\"65\",{\"0\":{\"537\":1},\"1\":{\"501\":1}}],[\"66\",{\"0\":{\"538\":1},\"1\":{\"456\":1,\"538\":1}}],[\"69\",{\"1\":{\"456\":1}}],[\"677\",{\"1\":{\"445\":1}}],[\"6锁优化以前\",{\"1\":{\"330\":1}}],[\"6之前\",{\"1\":{\"327\":1}}],[\"60l\",{\"1\":{\"364\":1}}],[\"60\",{\"0\":{\"373\":1,\"531\":1,\"615\":1},\"1\":{\"296\":1,\"364\":1,\"373\":1,\"580\":1}}],[\"64tb\",{\"1\":{\"475\":1}}],[\"6400\",{\"1\":{\"431\":1}}],[\"64bit\",{\"1\":{\"327\":1}}],[\"64\",{\"0\":{\"536\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"238\":2,\"327\":1,\"734\":1,\"879\":2}}],[\"6\",{\"0\":{\"158\":1,\"200\":1,\"207\":1,\"236\":1,\"303\":1,\"380\":1,\"383\":1,\"438\":1,\"463\":1,\"548\":1,\"673\":1,\"745\":1,\"788\":1,\"835\":1},\"1\":{\"72\":1,\"137\":2,\"140\":2,\"147\":2,\"266\":3,\"370\":2,\"380\":2,\"381\":1,\"413\":1,\"418\":1,\"463\":1,\"475\":1,\"477\":2,\"489\":1,\"502\":1,\"510\":1,\"513\":8,\"516\":1,\"534\":1,\"559\":2,\"580\":1,\"592\":1,\"641\":1,\"694\":1,\"695\":1,\"765\":2,\"793\":3,\"879\":2}}],[\"6️⃣\",{\"1\":{\"64\":1}}],[\"5m\",{\"1\":{\"763\":1}}],[\"5s\",{\"1\":{\"727\":1,\"763\":1}}],[\"5秒内没有回复过sentinel节\",{\"1\":{\"690\":1}}],[\"5xx\",{\"1\":{\"551\":1}}],[\"59\",{\"0\":{\"371\":1,\"530\":1,\"614\":1},\"1\":{\"463\":2}}],[\"58\",{\"0\":{\"370\":1,\"529\":1,\"613\":1}}],[\"57\",{\"0\":{\"368\":1,\"528\":1,\"612\":1}}],[\"56\",{\"0\":{\"367\":1,\"527\":1,\"611\":1}}],[\"55\",{\"0\":{\"366\":1,\"526\":1,\"609\":1},\"1\":{\"556\":1}}],[\"54\",{\"0\":{\"361\":1,\"525\":1,\"608\":1}}],[\"5开始提供了java\",{\"1\":{\"340\":1}}],[\"5开始支持\",{\"1\":{\"202\":1}}],[\"53\",{\"0\":{\"294\":1,\"360\":1,\"523\":1,\"607\":1},\"1\":{\"294\":1,\"666\":1,\"736\":1}}],[\"525\",{\"1\":{\"557\":1}}],[\"52\",{\"0\":{\"293\":1,\"359\":1,\"522\":1,\"606\":1,\"736\":1}}],[\"512\",{\"1\":{\"483\":1,\"600\":1}}],[\"51\",{\"0\":{\"292\":1,\"358\":1,\"521\":1,\"605\":1,\"734\":1},\"1\":{\"375\":1,\"626\":1}}],[\"5000\",{\"1\":{\"418\":2}}],[\"500+张手绘图\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"50\",{\"0\":{\"291\":1,\"357\":1,\"429\":1,\"520\":1,\"604\":1,\"733\":1},\"1\":{\"375\":1,\"429\":1,\"461\":1,\"489\":1,\"531\":1}}],[\"5倍的新数组\",{\"1\":{\"155\":1}}],[\"5\",{\"0\":{\"157\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"206\":1,\"235\":1,\"302\":1,\"382\":1,\"437\":1,\"462\":1,\"547\":1,\"672\":1,\"744\":1,\"787\":1,\"834\":1},\"1\":{\"72\":1,\"137\":2,\"140\":2,\"147\":2,\"198\":1,\"242\":1,\"266\":2,\"285\":1,\"328\":2,\"329\":1,\"345\":2,\"375\":1,\"379\":1,\"412\":1,\"413\":1,\"418\":2,\"435\":1,\"445\":1,\"475\":4,\"477\":1,\"489\":1,\"501\":1,\"513\":1,\"516\":1,\"534\":1,\"556\":3,\"560\":1,\"592\":1,\"641\":1,\"683\":1,\"694\":1,\"695\":1,\"727\":3,\"765\":2,\"778\":2,\"793\":3,\"804\":1,\"817\":3,\"879\":2}}],[\"5️⃣\",{\"1\":{\"64\":1}}],[\"4字节的消息长度\",{\"1\":{\"771\":1}}],[\"4m\",{\"1\":{\"763\":1}}],[\"4kb\",{\"1\":{\"653\":1}}],[\"4k\",{\"1\":{\"566\":1}}],[\"4xx\",{\"1\":{\"551\":1}}],[\"4g\",{\"1\":{\"413\":1}}],[\"4gb\",{\"1\":{\"381\":1}}],[\"4来决定是否需要扩容\",{\"1\":{\"314\":1}}],[\"49\",{\"0\":{\"289\":1,\"356\":1,\"428\":1,\"519\":1,\"603\":1,\"732\":1}}],[\"48\",{\"0\":{\"287\":1,\"355\":1,\"427\":1,\"518\":1,\"602\":1,\"731\":1},\"1\":{\"607\":2}}],[\"47\",{\"0\":{\"285\":1,\"354\":1,\"426\":1,\"516\":1,\"600\":1,\"730\":1}}],[\"46\",{\"0\":{\"283\":1,\"353\":1,\"425\":1,\"515\":1,\"599\":1,\"729\":1}}],[\"45\",{\"0\":{\"282\":1,\"352\":1,\"424\":1,\"514\":1,\"598\":1,\"727\":1},\"1\":{\"738\":1}}],[\"456\",{\"1\":{\"90\":1}}],[\"43\",{\"0\":{\"279\":1,\"349\":1,\"422\":1,\"512\":1,\"595\":1,\"725\":1}}],[\"42\",{\"0\":{\"278\":1,\"348\":1,\"421\":1,\"510\":1,\"590\":1,\"724\":1}}],[\"41\",{\"0\":{\"276\":1,\"347\":1,\"419\":1,\"509\":1,\"585\":1,\"723\":1}}],[\"4f\",{\"1\":{\"239\":1}}],[\"443\",{\"1\":{\"561\":1,\"563\":1}}],[\"44\",{\"0\":{\"280\":1,\"351\":1,\"423\":1,\"513\":1,\"597\":1,\"726\":1},\"1\":{\"229\":1}}],[\"4000\",{\"1\":{\"594\":2}}],[\"400\",{\"1\":{\"582\":2}}],[\"40\",{\"0\":{\"275\":1,\"346\":1,\"418\":1,\"508\":1,\"584\":1,\"722\":1},\"1\":{\"167\":2,\"278\":2,\"584\":1}}],[\"4\",{\"0\":{\"156\":1,\"193\":1,\"205\":1,\"234\":1,\"301\":1,\"381\":1,\"436\":1,\"461\":1,\"546\":1,\"671\":1,\"680\":1,\"743\":1,\"785\":1,\"832\":1},\"1\":{\"72\":1,\"90\":1,\"137\":3,\"140\":3,\"147\":3,\"154\":1,\"169\":2,\"175\":1,\"225\":1,\"238\":2,\"239\":3,\"250\":1,\"266\":1,\"278\":1,\"280\":2,\"313\":2,\"314\":2,\"328\":1,\"329\":2,\"379\":1,\"392\":2,\"412\":1,\"413\":1,\"414\":1,\"418\":1,\"433\":1,\"435\":1,\"440\":1,\"463\":1,\"477\":1,\"501\":1,\"513\":3,\"516\":1,\"531\":2,\"534\":1,\"580\":3,\"586\":5,\"591\":2,\"592\":1,\"641\":1,\"664\":1,\"673\":1,\"676\":1,\"680\":1,\"694\":2,\"695\":4,\"762\":1,\"765\":1,\"777\":1,\"793\":4,\"796\":1,\"813\":1,\"826\":1,\"879\":3}}],[\"4️⃣\",{\"1\":{\"64\":1}}],[\"请问有什么可以帮到您\",{\"1\":{\"806\":2}}],[\"请容许我花\",{\"1\":{\"619\":1}}],[\"请看下面计算圆面积的代码示例\",{\"1\":{\"321\":1}}],[\"请求限流等\",{\"1\":{\"865\":1}}],[\"请求重试\",{\"1\":{\"865\":1}}],[\"请求合并\",{\"1\":{\"858\":1}}],[\"请求合并等功能\",{\"1\":{\"857\":1}}],[\"请求缓存\",{\"1\":{\"857\":1,\"858\":1}}],[\"请求url等\",{\"1\":{\"851\":1}}],[\"请求头匹配\",{\"1\":{\"865\":1}}],[\"请求头等条件进行匹配\",{\"1\":{\"865\":1}}],[\"请求头等信息\",{\"1\":{\"847\":1}}],[\"请求头里包含了对象是哪个类的实例\",{\"1\":{\"382\":1}}],[\"请求参数\",{\"1\":{\"847\":1}}],[\"请求都会产生一个新的\",{\"1\":{\"797\":1}}],[\"请求都被\",{\"1\":{\"553\":1}}],[\"请求在数据未准备好的情况下⽴即返回\",{\"1\":{\"663\":1}}],[\"请求恶意服务器\",{\"1\":{\"615\":1}}],[\"请求中以参数的形式加入一个随机产生的\",{\"1\":{\"613\":1}}],[\"请求数据包\",{\"1\":{\"609\":1}}],[\"请求后或请求发生错误时进行处理\",{\"1\":{\"865\":1}}],[\"请求后\",{\"1\":{\"606\":1}}],[\"请求会自动判断此域名下是否存在\",{\"1\":{\"566\":1}}],[\"请求返回时将此\",{\"1\":{\"566\":1}}],[\"请求和响应头\",{\"1\":{\"560\":1}}],[\"请求首部\",{\"1\":{\"556\":1}}],[\"请求首部之后有一个空行\",{\"1\":{\"556\":1}}],[\"请求行包含三个字段\",{\"1\":{\"556\":1}}],[\"请求报文的第一行叫做请求行\",{\"1\":{\"556\":1}}],[\"请求报文的格式如下\",{\"1\":{\"556\":1}}],[\"请求报文\",{\"1\":{\"556\":1,\"609\":1}}],[\"请求报文和\",{\"1\":{\"556\":1}}],[\"请求被广泛应用的根本\",{\"1\":{\"553\":1}}],[\"请求所不具备的\",{\"1\":{\"553\":1}}],[\"请求能够保存在浏览器的浏览记录里\",{\"1\":{\"553\":1}}],[\"请求能够被缓存\",{\"1\":{\"553\":1}}],[\"请求只查看信息\",{\"1\":{\"553\":1}}],[\"请求用来改变服务器上的信息\",{\"1\":{\"553\":1}}],[\"请求用于查看信息\",{\"1\":{\"553\":1}}],[\"请求不符合\",{\"1\":{\"553\":1}}],[\"请求不予理会\",{\"1\":{\"215\":1}}],[\"请求把数据放在请求体里想比较而言安全一些\",{\"1\":{\"553\":1}}],[\"请求把数据放\",{\"1\":{\"553\":1}}],[\"请求携带的数据量有限\",{\"1\":{\"553\":1}}],[\"请求将信息放在\",{\"1\":{\"553\":1}}],[\"请求的来源地址\",{\"1\":{\"613\":1}}],[\"请求的数据包里\",{\"1\":{\"606\":1}}],[\"请求的数据存放在报文体中\",{\"1\":{\"553\":1}}],[\"请求的广播包\",{\"1\":{\"606\":1}}],[\"请求的主机名\",{\"1\":{\"556\":1}}],[\"请求的过程与原理\",{\"0\":{\"555\":1}}],[\"请求的\",{\"1\":{\"553\":1}}],[\"请求的作用有关\",{\"1\":{\"553\":1}}],[\"请求的资源已被永久移动到新位置\",{\"1\":{\"551\":1}}],[\"请求的结果是一致的\",{\"1\":{\"224\":1}}],[\"请求并持有\",{\"1\":{\"342\":1}}],[\"请求并持有条件\",{\"1\":{\"342\":1,\"647\":1}}],[\"请求就进行处理\",{\"1\":{\"280\":1}}],[\"请求接口之前\",{\"1\":{\"225\":1}}],[\"请求方法匹配\",{\"1\":{\"865\":1}}],[\"请求方没能及时获取返回结果\",{\"1\":{\"224\":1}}],[\"请求方式\",{\"1\":{\"72\":1}}],[\"请求\",{\"1\":{\"215\":2,\"546\":1,\"560\":1,\"563\":1,\"784\":1}}],[\"请求落在了n2\",{\"1\":{\"191\":1}}],[\"请求地址\",{\"1\":{\"72\":1}}],[\"请滚动鼠标滚轮进入下一页\",{\"1\":{\"5\":1}}],[\"qps\",{\"1\":{\"859\":2}}],[\"qq\",{\"0\":{\"598\":1},\"1\":{\"597\":1,\"598\":6}}],[\"qatar\",{\"1\":{\"64\":1}}],[\"quorum\",{\"1\":{\"689\":1}}],[\"quicklist由list和ziplist结合而成\",{\"1\":{\"734\":1}}],[\"quicklist是综合考虑了时间效率与空间效率引入的新型数据结构\",{\"1\":{\"734\":1}}],[\"quicklist\",{\"0\":{\"734\":1},\"1\":{\"734\":1}}],[\"quick\",{\"1\":{\"559\":1}}],[\"quic\",{\"1\":{\"559\":5}}],[\"qualifier\",{\"1\":{\"784\":2}}],[\"quals\",{\"1\":{\"258\":1}}],[\"quartz\",{\"1\":{\"782\":1}}],[\"quarter\",{\"1\":{\"64\":4}}],[\"queryuserinfo\",{\"1\":{\"788\":3}}],[\"query\",{\"1\":{\"434\":1,\"448\":2,\"479\":2}}],[\"queryparams\",{\"1\":{\"72\":1}}],[\"queue文件的读性能几乎接近读内存\",{\"1\":{\"772\":1}}],[\"queueid\",{\"1\":{\"771\":1,\"778\":2}}],[\"queue中\",{\"1\":{\"764\":1}}],[\"queue读取的消息顺序处理\",{\"1\":{\"760\":1}}],[\"queue的数量小于或者等于消费者数量\",{\"1\":{\"758\":1}}],[\"queue的数量大于消费者数量\",{\"1\":{\"758\":1}}],[\"queued\",{\"1\":{\"724\":2}}],[\"queue\",{\"1\":{\"392\":6,\"744\":5,\"749\":1,\"758\":2,\"760\":3,\"767\":1,\"771\":1,\"778\":3}}],[\"question\",{\"1\":{\"64\":2,\"440\":3}}],[\"▫️\",{\"1\":{\"64\":1}}],[\"▪️\",{\"1\":{\"64\":1}}],[\"◽\",{\"1\":{\"64\":1}}],[\"◾\",{\"1\":{\"64\":1}}],[\"◻️\",{\"1\":{\"64\":1}}],[\"◼️\",{\"1\":{\"64\":1}}],[\"⬜\",{\"1\":{\"64\":1}}],[\"⬛\",{\"1\":{\"64\":1}}],[\"⚪\",{\"1\":{\"64\":1}}],[\"⚫\",{\"1\":{\"64\":1}}],[\"㊙️\",{\"1\":{\"64\":1}}],[\"㊗️\",{\"1\":{\"64\":1}}],[\"ⓜ️\",{\"1\":{\"64\":1}}],[\"ℹ️\",{\"1\":{\"64\":1}}],[\"8~10\",{\"1\":{\"793\":1}}],[\"8字节tag\",{\"1\":{\"771\":1}}],[\"8m\",{\"1\":{\"763\":1}}],[\"8及以上版本使用psync命令完成主从数据同步\",{\"1\":{\"685\":1}}],[\"8700+\",{\"1\":{\"652\":1}}],[\"84\",{\"1\":{\"556\":1}}],[\"8182\",{\"1\":{\"554\":1}}],[\"80669865\",{\"1\":{\"793\":1}}],[\"80\",{\"1\":{\"523\":1,\"540\":1,\"555\":1,\"561\":1}}],[\"8000\",{\"1\":{\"418\":2}}],[\"8g\",{\"1\":{\"413\":1}}],[\"8∶1\",{\"1\":{\"396\":1}}],[\"8之后redis支持nx和ex操作是同一原子操作\",{\"1\":{\"198\":1}}],[\"8之前需要用lua脚本\",{\"1\":{\"198\":1}}],[\"8800\",{\"1\":{\"188\":1}}],[\"8888\",{\"1\":{\"107\":1,\"115\":1}}],[\"8实现线程安全不是在数据结构上下功夫\",{\"1\":{\"181\":1}}],[\"8是基于cas+synchronized实现\",{\"1\":{\"179\":1}}],[\"8中使用cas+synchronized\",{\"1\":{\"178\":1}}],[\"8中的优化操作\",{\"1\":{\"174\":1}}],[\"8只做一次\",{\"1\":{\"175\":1}}],[\"8对hashmap主要做了哪些优化呢\",{\"0\":{\"175\":1}}],[\"8的数据结构是数组+链表+红黑树\",{\"1\":{\"161\":1}}],[\"8的数据结构吧\",{\"1\":{\"161\":1}}],[\"8\",{\"0\":{\"161\":1,\"181\":1,\"208\":1,\"239\":1,\"244\":1,\"290\":1,\"291\":1,\"305\":1,\"380\":1,\"385\":1,\"440\":1,\"465\":1,\"551\":1,\"676\":1,\"747\":1,\"792\":1,\"837\":1},\"1\":{\"137\":4,\"140\":4,\"147\":4,\"169\":2,\"175\":4,\"177\":3,\"238\":3,\"252\":2,\"263\":1,\"266\":1,\"290\":2,\"291\":4,\"292\":2,\"293\":1,\"380\":2,\"381\":1,\"394\":1,\"406\":2,\"418\":1,\"456\":1,\"463\":1,\"502\":1,\"513\":2,\"534\":1,\"586\":1,\"587\":4,\"603\":2,\"612\":4,\"641\":1,\"727\":1,\"734\":1,\"765\":1,\"782\":1,\"793\":4,\"879\":4}}],[\"8️⃣\",{\"1\":{\"64\":1}}],[\"8ball\",{\"1\":{\"64\":1}}],[\"™️\",{\"1\":{\"64\":1}}],[\"®️\",{\"1\":{\"64\":1}}],[\"©️\",{\"1\":{\"64\":1}}],[\"❇️\",{\"1\":{\"64\":1}}],[\"✴️\",{\"1\":{\"64\":1}}],[\"✳️\",{\"1\":{\"64\":1}}],[\"➿\",{\"1\":{\"64\":1}}],[\"➰\",{\"1\":{\"64\":1}}],[\"❎\",{\"1\":{\"64\":1}}],[\"❌\",{\"1\":{\"64\":1}}],[\"✔️\",{\"1\":{\"64\":1}}],[\"☑️\",{\"1\":{\"64\":1}}],[\"✅\",{\"1\":{\"64\":1}}],[\"⭕\",{\"1\":{\"64\":1}}],[\"⚜️\",{\"1\":{\"64\":1}}],[\"♻️\",{\"1\":{\"64\":1}}],[\"⚕️\",{\"1\":{\"64\":1}}],[\"❗\",{\"1\":{\"64\":2}}],[\"❕\",{\"1\":{\"64\":1}}],[\"❔\",{\"1\":{\"64\":1}}],[\"❓\",{\"1\":{\"64\":1}}],[\"️⃣\",{\"1\":{\"64\":2}}],[\"️\",{\"1\":{\"64\":4}}],[\"♾️\",{\"1\":{\"64\":1}}],[\"➗\",{\"1\":{\"64\":1}}],[\"➖\",{\"1\":{\"64\":1}}],[\"➕\",{\"1\":{\"64\":1}}],[\"✖️\",{\"1\":{\"64\":1}}],[\"⚧️\",{\"1\":{\"64\":1}}],[\"♂️\",{\"1\":{\"64\":1}}],[\"♀️\",{\"1\":{\"64\":1}}],[\"⏏️\",{\"1\":{\"64\":1}}],[\"⏺️\",{\"1\":{\"64\":1}}],[\"⏹️\",{\"1\":{\"64\":1}}],[\"⏸️\",{\"1\":{\"64\":1}}],[\"⏬\",{\"1\":{\"64\":1}}],[\"⏫\",{\"1\":{\"64\":1}}],[\"⏮️\",{\"1\":{\"64\":1}}],[\"⏪\",{\"1\":{\"64\":1}}],[\"◀️\",{\"1\":{\"64\":1}}],[\"⏯️\",{\"1\":{\"64\":1}}],[\"⏭️\",{\"1\":{\"64\":1}}],[\"⏩\",{\"1\":{\"64\":1}}],[\"▶️\",{\"1\":{\"64\":1}}],[\"⛎\",{\"1\":{\"64\":1}}],[\"♓\",{\"1\":{\"64\":1}}],[\"♒\",{\"1\":{\"64\":1}}],[\"♑\",{\"1\":{\"64\":1}}],[\"♐\",{\"1\":{\"64\":1}}],[\"♏\",{\"1\":{\"64\":1}}],[\"♎\",{\"1\":{\"64\":1}}],[\"♍\",{\"1\":{\"64\":1}}],[\"♌\",{\"1\":{\"64\":1}}],[\"♋\",{\"1\":{\"64\":1}}],[\"♊\",{\"1\":{\"64\":1}}],[\"♉\",{\"1\":{\"64\":1}}],[\"♈\",{\"1\":{\"64\":1}}],[\"☮️\",{\"1\":{\"64\":1}}],[\"☪️\",{\"1\":{\"64\":1}}],[\"☦️\",{\"1\":{\"64\":1}}],[\"✝️\",{\"1\":{\"64\":1}}],[\"☯️\",{\"1\":{\"64\":1}}],[\"☸️\",{\"1\":{\"64\":1}}],[\"✡️\",{\"1\":{\"64\":1}}],[\"⚛️\",{\"1\":{\"64\":1}}],[\"⤵️\",{\"1\":{\"64\":1}}],[\"⤴️\",{\"1\":{\"64\":1}}],[\"↪️\",{\"1\":{\"64\":1}}],[\"↩️\",{\"1\":{\"64\":1}}],[\"↔️\",{\"1\":{\"64\":1}}],[\"↕️\",{\"1\":{\"64\":1}}],[\"↖️\",{\"1\":{\"64\":1}}],[\"⬅️\",{\"1\":{\"64\":1}}],[\"↙️\",{\"1\":{\"64\":1}}],[\"⬇️\",{\"1\":{\"64\":1}}],[\"↘️\",{\"1\":{\"64\":1}}],[\"➡️\",{\"1\":{\"64\":1}}],[\"↗️\",{\"1\":{\"64\":1}}],[\"⬆️\",{\"1\":{\"64\":1}}],[\"☣️\",{\"1\":{\"64\":1}}],[\"☢️\",{\"1\":{\"64\":1}}],[\"⛔\",{\"1\":{\"64\":1}}],[\"⚠️\",{\"1\":{\"64\":1}}],[\"⚠请注意\",{\"1\":{\"14\":1}}],[\"♿\",{\"1\":{\"64\":1}}],[\"⚱️\",{\"1\":{\"64\":1}}],[\"⚰️\",{\"1\":{\"64\":1}}],[\"⚗️\",{\"1\":{\"64\":1}}],[\"⛓️\",{\"1\":{\"64\":1}}],[\"⚖️\",{\"1\":{\"64\":1}}],[\"⚙️\",{\"1\":{\"64\":1}}],[\"⚔️\",{\"1\":{\"64\":1}}],[\"⚒️\",{\"1\":{\"64\":1}}],[\"⛏️\",{\"1\":{\"64\":1}}],[\"✂️\",{\"1\":{\"64\":1}}],[\"✒️\",{\"1\":{\"64\":1}}],[\"✏️\",{\"1\":{\"64\":1}}],[\"✉️\",{\"1\":{\"64\":1}}],[\"⌨️\",{\"1\":{\"64\":1}}],[\"☎️\",{\"1\":{\"64\":2}}],[\"⛑️\",{\"1\":{\"64\":1}}],[\"♟️\",{\"1\":{\"64\":1}}],[\"♣️\",{\"1\":{\"64\":1}}],[\"♦️\",{\"1\":{\"64\":1}}],[\"♥️\",{\"1\":{\"64\":1}}],[\"♠️\",{\"1\":{\"64\":1}}],[\"⛸️\",{\"1\":{\"64\":1}}],[\"⛳\",{\"1\":{\"64\":1}}],[\"⚾\",{\"1\":{\"64\":1}}],[\"⚽\",{\"1\":{\"64\":1}}],[\"✨\",{\"1\":{\"64\":1}}],[\"☄️\",{\"1\":{\"64\":1}}],[\"⛄\",{\"1\":{\"64\":1}}],[\"☃️\",{\"1\":{\"64\":1}}],[\"❄️\",{\"1\":{\"64\":1}}],[\"⚡\",{\"1\":{\"64\":1}}],[\"⛱️\",{\"1\":{\"64\":1}}],[\"☔\",{\"1\":{\"64\":1}}],[\"☂️\",{\"1\":{\"64\":1}}],[\"⛈️\",{\"1\":{\"64\":1}}],[\"⛅\",{\"1\":{\"64\":1}}],[\"☁️\",{\"1\":{\"64\":1}}],[\"⭐这道题在阿里的面试中出现频率比较高\",{\"1\":{\"370\":1}}],[\"⭐\",{\"1\":{\"64\":1,\"798\":1}}],[\"☀️\",{\"1\":{\"64\":1}}],[\"⏲️\",{\"1\":{\"64\":1}}],[\"⏱️\",{\"1\":{\"64\":1}}],[\"⏰\",{\"1\":{\"64\":1}}],[\"⌚\",{\"1\":{\"64\":1}}],[\"⏳\",{\"1\":{\"64\":1}}],[\"⌛\",{\"1\":{\"64\":1}}],[\"✈️\",{\"1\":{\"64\":1}}],[\"⛴️\",{\"1\":{\"64\":1}}],[\"⛵\",{\"1\":{\"64\":2}}],[\"⚓\",{\"1\":{\"64\":1}}],[\"⛽\",{\"1\":{\"64\":1}}],[\"♨️\",{\"1\":{\"64\":1}}],[\"⛺\",{\"1\":{\"64\":1}}],[\"⛲\",{\"1\":{\"64\":1}}],[\"⛩️\",{\"1\":{\"64\":1}}],[\"⛪\",{\"1\":{\"64\":1}}],[\"⛰️\",{\"1\":{\"64\":1}}],[\"☕\",{\"1\":{\"64\":1}}],[\"☘️\",{\"1\":{\"64\":1}}],[\"⛹️‍♀️\",{\"1\":{\"64\":2}}],[\"⛹️‍♂️\",{\"1\":{\"64\":2}}],[\"⛹️\",{\"1\":{\"64\":1}}],[\"⛷️\",{\"1\":{\"64\":1}}],[\"🇿🇼\",{\"1\":{\"64\":1}}],[\"🇿🇲\",{\"1\":{\"64\":1}}],[\"🇿🇦\",{\"1\":{\"64\":1}}],[\"🇾🇹\",{\"1\":{\"64\":1}}],[\"🇾🇪\",{\"1\":{\"64\":1}}],[\"🇽🇰\",{\"1\":{\"64\":1}}],[\"🇼🇸\",{\"1\":{\"64\":1}}],[\"🇼🇫\",{\"1\":{\"64\":1}}],[\"🇻🇺\",{\"1\":{\"64\":1}}],[\"🇻🇳\",{\"1\":{\"64\":1}}],[\"🇻🇮\",{\"1\":{\"64\":1}}],[\"🇻🇬\",{\"1\":{\"64\":1}}],[\"🇻🇪\",{\"1\":{\"64\":1}}],[\"🇻🇨\",{\"1\":{\"64\":1}}],[\"🇻🇦\",{\"1\":{\"64\":1}}],[\"🇺🇿\",{\"1\":{\"64\":1}}],[\"🇺🇾\",{\"1\":{\"64\":1}}],[\"🇺🇸\",{\"1\":{\"64\":1}}],[\"🇺🇳\",{\"1\":{\"64\":1}}],[\"🇺🇲\",{\"1\":{\"64\":1}}],[\"🇺🇬\",{\"1\":{\"64\":1}}],[\"🇺🇦\",{\"1\":{\"64\":1}}],[\"🇹🇿\",{\"1\":{\"64\":1}}],[\"🇹🇼\",{\"1\":{\"64\":1}}],[\"🇹🇻\",{\"1\":{\"64\":1}}],[\"🇹🇹\",{\"1\":{\"64\":1}}],[\"🇹🇷\",{\"1\":{\"64\":1}}],[\"🇹🇴\",{\"1\":{\"64\":1}}],[\"🇹🇳\",{\"1\":{\"64\":1}}],[\"🇹🇲\",{\"1\":{\"64\":1}}],[\"🇹🇱\",{\"1\":{\"64\":1}}],[\"🇹🇰\",{\"1\":{\"64\":1}}],[\"🇹🇯\",{\"1\":{\"64\":1}}],[\"🇹🇭\",{\"1\":{\"64\":1}}],[\"🇹🇬\",{\"1\":{\"64\":1}}],[\"🇹🇫\",{\"1\":{\"64\":1}}],[\"🇹🇩\",{\"1\":{\"64\":1}}],[\"🇹🇨\",{\"1\":{\"64\":1}}],[\"🇹🇦\",{\"1\":{\"64\":1}}],[\"🇸🇿\",{\"1\":{\"64\":1}}],[\"🇸🇾\",{\"1\":{\"64\":1}}],[\"🇸🇽\",{\"1\":{\"64\":1}}],[\"🇸🇻\",{\"1\":{\"64\":1}}],[\"🇸🇹\",{\"1\":{\"64\":1}}],[\"🇸🇸\",{\"1\":{\"64\":1}}],[\"🇸🇷\",{\"1\":{\"64\":1}}],[\"🇸🇴\",{\"1\":{\"64\":1}}],[\"🇸🇳\",{\"1\":{\"64\":1}}],[\"🇸🇲\",{\"1\":{\"64\":1}}],[\"🇸🇱\",{\"1\":{\"64\":1}}],[\"🇸🇰\",{\"1\":{\"64\":1}}],[\"🇸🇯\",{\"1\":{\"64\":1}}],[\"🇸🇮\",{\"1\":{\"64\":1}}],[\"🇸🇭\",{\"1\":{\"64\":1}}],[\"🇸🇬\",{\"1\":{\"64\":1}}],[\"🇸🇪\",{\"1\":{\"64\":1}}],[\"🇸🇩\",{\"1\":{\"64\":1}}],[\"🇸🇨\",{\"1\":{\"64\":1}}],[\"🇸🇧\",{\"1\":{\"64\":1}}],[\"🇸🇦\",{\"1\":{\"64\":1}}],[\"🇷🇼\",{\"1\":{\"64\":1}}],[\"🇷🇺\",{\"1\":{\"64\":1}}],[\"🇷🇸\",{\"1\":{\"64\":1}}],[\"🇷🇴\",{\"1\":{\"64\":1}}],[\"🇷🇪\",{\"1\":{\"64\":1}}],[\"🇶🇦\",{\"1\":{\"64\":1}}],[\"🇵🇾\",{\"1\":{\"64\":1}}],[\"🇵🇼\",{\"1\":{\"64\":1}}],[\"🇵🇹\",{\"1\":{\"64\":1}}],[\"🇵🇸\",{\"1\":{\"64\":1}}],[\"🇵🇷\",{\"1\":{\"64\":1}}],[\"🇵🇳\",{\"1\":{\"64\":1}}],[\"🇵🇲\",{\"1\":{\"64\":1}}],[\"🇵🇱\",{\"1\":{\"64\":1}}],[\"🇵🇰\",{\"1\":{\"64\":1}}],[\"🇵🇭\",{\"1\":{\"64\":1}}],[\"🇵🇬\",{\"1\":{\"64\":1}}],[\"🇵🇫\",{\"1\":{\"64\":1}}],[\"🇵🇪\",{\"1\":{\"64\":1}}],[\"🇵🇦\",{\"1\":{\"64\":1}}],[\"🇴🇲\",{\"1\":{\"64\":1}}],[\"🇳🇿\",{\"1\":{\"64\":1}}],[\"🇳🇺\",{\"1\":{\"64\":1}}],[\"🇳🇷\",{\"1\":{\"64\":1}}],[\"🇳🇵\",{\"1\":{\"64\":1}}],[\"🇳🇴\",{\"1\":{\"64\":1}}],[\"🇳🇱\",{\"1\":{\"64\":1}}],[\"🇳🇮\",{\"1\":{\"64\":1}}],[\"🇳🇬\",{\"1\":{\"64\":1}}],[\"🇳🇫\",{\"1\":{\"64\":1}}],[\"🇳🇪\",{\"1\":{\"64\":1}}],[\"🇳🇨\",{\"1\":{\"64\":1}}],[\"🇳🇦\",{\"1\":{\"64\":1}}],[\"🇲🇿\",{\"1\":{\"64\":1}}],[\"🇲🇾\",{\"1\":{\"64\":1}}],[\"🇲🇽\",{\"1\":{\"64\":1}}],[\"🇲🇼\",{\"1\":{\"64\":1}}],[\"🇲🇻\",{\"1\":{\"64\":1}}],[\"🇲🇺\",{\"1\":{\"64\":1}}],[\"🇲🇹\",{\"1\":{\"64\":1}}],[\"🇲🇸\",{\"1\":{\"64\":1}}],[\"🇲🇷\",{\"1\":{\"64\":1}}],[\"🇲🇶\",{\"1\":{\"64\":1}}],[\"🇲🇵\",{\"1\":{\"64\":1}}],[\"🇲🇴\",{\"1\":{\"64\":1}}],[\"🇲🇳\",{\"1\":{\"64\":1}}],[\"🇲🇲\",{\"1\":{\"64\":1}}],[\"🇲🇱\",{\"1\":{\"64\":1}}],[\"🇲🇰\",{\"1\":{\"64\":1}}],[\"🇲🇭\",{\"1\":{\"64\":1}}],[\"🇲🇬\",{\"1\":{\"64\":1}}],[\"🇲🇫\",{\"1\":{\"64\":1}}],[\"🇲🇪\",{\"1\":{\"64\":1}}],[\"🇲🇩\",{\"1\":{\"64\":1}}],[\"🇲🇨\",{\"1\":{\"64\":1}}],[\"🇲🇦\",{\"1\":{\"64\":1}}],[\"🇱🇾\",{\"1\":{\"64\":1}}],[\"🇱🇻\",{\"1\":{\"64\":1}}],[\"🇱🇺\",{\"1\":{\"64\":1}}],[\"🇱🇹\",{\"1\":{\"64\":1}}],[\"🇱🇸\",{\"1\":{\"64\":1}}],[\"🇱🇷\",{\"1\":{\"64\":1}}],[\"🇱🇰\",{\"1\":{\"64\":1}}],[\"🇱🇮\",{\"1\":{\"64\":1}}],[\"🇱🇨\",{\"1\":{\"64\":1}}],[\"🇱🇧\",{\"1\":{\"64\":1}}],[\"🇱🇦\",{\"1\":{\"64\":1}}],[\"🇰🇿\",{\"1\":{\"64\":1}}],[\"🇰🇾\",{\"1\":{\"64\":1}}],[\"🇰🇼\",{\"1\":{\"64\":1}}],[\"🇰🇷\",{\"1\":{\"64\":1}}],[\"🇰🇵\",{\"1\":{\"64\":1}}],[\"🇰🇳\",{\"1\":{\"64\":1}}],[\"🇰🇲\",{\"1\":{\"64\":1}}],[\"🇰🇮\",{\"1\":{\"64\":1}}],[\"🇰🇭\",{\"1\":{\"64\":1}}],[\"🇰🇬\",{\"1\":{\"64\":1}}],[\"🇰🇪\",{\"1\":{\"64\":1}}],[\"🇯🇵\",{\"1\":{\"64\":1}}],[\"🇯🇴\",{\"1\":{\"64\":1}}],[\"🇯🇲\",{\"1\":{\"64\":1}}],[\"🇯🇪\",{\"1\":{\"64\":1}}],[\"🇮🇹\",{\"1\":{\"64\":1}}],[\"🇮🇸\",{\"1\":{\"64\":1}}],[\"🇮🇷\",{\"1\":{\"64\":1}}],[\"🇮🇶\",{\"1\":{\"64\":1}}],[\"🇮🇴\",{\"1\":{\"64\":1}}],[\"🇮🇳\",{\"1\":{\"64\":1}}],[\"🇮🇲\",{\"1\":{\"64\":1}}],[\"🇮🇱\",{\"1\":{\"64\":1}}],[\"🇮🇪\",{\"1\":{\"64\":1}}],[\"🇮🇩\",{\"1\":{\"64\":1}}],[\"🇮🇨\",{\"1\":{\"64\":1}}],[\"🇭🇺\",{\"1\":{\"64\":1}}],[\"🇭🇹\",{\"1\":{\"64\":1}}],[\"🇭🇷\",{\"1\":{\"64\":1}}],[\"🇭🇳\",{\"1\":{\"64\":1}}],[\"🇭🇲\",{\"1\":{\"64\":1}}],[\"🇭🇰\",{\"1\":{\"64\":1}}],[\"🇬🇾\",{\"1\":{\"64\":1}}],[\"🇬🇼\",{\"1\":{\"64\":1}}],[\"🇬🇺\",{\"1\":{\"64\":1}}],[\"🇬🇹\",{\"1\":{\"64\":1}}],[\"🇬🇸\",{\"1\":{\"64\":1}}],[\"🇬🇷\",{\"1\":{\"64\":1}}],[\"🇬🇶\",{\"1\":{\"64\":1}}],[\"🇬🇵\",{\"1\":{\"64\":1}}],[\"🇬🇳\",{\"1\":{\"64\":1}}],[\"🇬🇲\",{\"1\":{\"64\":1}}],[\"🇬🇱\",{\"1\":{\"64\":1}}],[\"🇬🇮\",{\"1\":{\"64\":1}}],[\"🇬🇭\",{\"1\":{\"64\":1}}],[\"🇬🇬\",{\"1\":{\"64\":1}}],[\"🇬🇫\",{\"1\":{\"64\":1}}],[\"🇬🇪\",{\"1\":{\"64\":1}}],[\"🇬🇩\",{\"1\":{\"64\":1}}],[\"🇬🇧\",{\"1\":{\"64\":2}}],[\"🇬🇦\",{\"1\":{\"64\":1}}],[\"🇫🇷\",{\"1\":{\"64\":1}}],[\"🇫🇴\",{\"1\":{\"64\":1}}],[\"🇫🇲\",{\"1\":{\"64\":1}}],[\"🇫🇰\",{\"1\":{\"64\":1}}],[\"🇫🇯\",{\"1\":{\"64\":1}}],[\"🇫🇮\",{\"1\":{\"64\":1}}],[\"🇪🇺\",{\"1\":{\"64\":2}}],[\"🇪🇹\",{\"1\":{\"64\":1}}],[\"🇪🇸\",{\"1\":{\"64\":1}}],[\"🇪🇷\",{\"1\":{\"64\":1}}],[\"🇪🇭\",{\"1\":{\"64\":1}}],[\"🇪🇬\",{\"1\":{\"64\":1}}],[\"🇪🇪\",{\"1\":{\"64\":1}}],[\"🇪🇨\",{\"1\":{\"64\":1}}],[\"🇪🇦\",{\"1\":{\"64\":1}}],[\"🇩🇿\",{\"1\":{\"64\":1}}],[\"🇩🇴\",{\"1\":{\"64\":1}}],[\"🇩🇲\",{\"1\":{\"64\":1}}],[\"🇩🇰\",{\"1\":{\"64\":1}}],[\"🇩🇯\",{\"1\":{\"64\":1}}],[\"🇩🇬\",{\"1\":{\"64\":1}}],[\"🇩🇪\",{\"1\":{\"64\":1}}],[\"🇨🇿\",{\"1\":{\"64\":1}}],[\"🇨🇾\",{\"1\":{\"64\":1}}],[\"🇨🇽\",{\"1\":{\"64\":1}}],[\"🇨🇼\",{\"1\":{\"64\":1}}],[\"🇨🇻\",{\"1\":{\"64\":1}}],[\"🇨🇺\",{\"1\":{\"64\":1}}],[\"🇨🇷\",{\"1\":{\"64\":1}}],[\"🇨🇵\",{\"1\":{\"64\":1}}],[\"🇨🇴\",{\"1\":{\"64\":1}}],[\"🇨🇳\",{\"1\":{\"64\":1}}],[\"🇨🇲\",{\"1\":{\"64\":1}}],[\"🇨🇱\",{\"1\":{\"64\":1}}],[\"🇨🇰\",{\"1\":{\"64\":1}}],[\"🇨🇮\",{\"1\":{\"64\":1}}],[\"🇨🇭\",{\"1\":{\"64\":1}}],[\"🇨🇬\",{\"1\":{\"64\":1}}],[\"🇨🇫\",{\"1\":{\"64\":1}}],[\"🇨🇩\",{\"1\":{\"64\":1}}],[\"🇨🇨\",{\"1\":{\"64\":1}}],[\"🇨🇦\",{\"1\":{\"64\":1}}],[\"🇧🇿\",{\"1\":{\"64\":1}}],[\"🇧🇾\",{\"1\":{\"64\":1}}],[\"🇧🇼\",{\"1\":{\"64\":1}}],[\"🇧🇻\",{\"1\":{\"64\":1}}],[\"🇧🇹\",{\"1\":{\"64\":1}}],[\"🇧🇸\",{\"1\":{\"64\":1}}],[\"🇧🇷\",{\"1\":{\"64\":1}}],[\"🇧🇶\",{\"1\":{\"64\":1}}],[\"🇧🇴\",{\"1\":{\"64\":1}}],[\"🇧🇳\",{\"1\":{\"64\":1}}],[\"🇧🇲\",{\"1\":{\"64\":1}}],[\"🇧🇱\",{\"1\":{\"64\":1}}],[\"🇧🇯\",{\"1\":{\"64\":1}}],[\"🇧🇮\",{\"1\":{\"64\":1}}],[\"🇧🇭\",{\"1\":{\"64\":1}}],[\"🇧🇬\",{\"1\":{\"64\":1}}],[\"🇧🇫\",{\"1\":{\"64\":1}}],[\"🇧🇪\",{\"1\":{\"64\":1}}],[\"🇧🇩\",{\"1\":{\"64\":1}}],[\"🇧🇧\",{\"1\":{\"64\":1}}],[\"🇧🇦\",{\"1\":{\"64\":1}}],[\"🇦🇿\",{\"1\":{\"64\":1}}],[\"🇦🇽\",{\"1\":{\"64\":1}}],[\"🇦🇼\",{\"1\":{\"64\":1}}],[\"🇦🇺\",{\"1\":{\"64\":1}}],[\"🇦🇹\",{\"1\":{\"64\":1}}],[\"🇦🇸\",{\"1\":{\"64\":1}}],[\"🇦🇷\",{\"1\":{\"64\":1}}],[\"🇦🇶\",{\"1\":{\"64\":1}}],[\"🇦🇴\",{\"1\":{\"64\":1}}],[\"🇦🇲\",{\"1\":{\"64\":1}}],[\"🇦🇱\",{\"1\":{\"64\":1}}],[\"🇦🇮\",{\"1\":{\"64\":1}}],[\"🇦🇬\",{\"1\":{\"64\":1}}],[\"🇦🇫\",{\"1\":{\"64\":1}}],[\"🇦🇪\",{\"1\":{\"64\":1}}],[\"🇦🇩\",{\"1\":{\"64\":1}}],[\"🇦🇨\",{\"1\":{\"64\":1}}],[\"🏳️‍⚧️\",{\"1\":{\"64\":1}}],[\"🏳️‍🌈\",{\"1\":{\"64\":1}}],[\"🏳️\",{\"1\":{\"64\":1}}],[\"🏴󠁧󠁢󠁷󠁬󠁳󠁿\",{\"1\":{\"64\":1}}],[\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\",{\"1\":{\"64\":1}}],[\"🏴󠁧󠁢󠁥󠁮󠁧󠁿\",{\"1\":{\"64\":1}}],[\"🏴‍☠️\",{\"1\":{\"64\":1}}],[\"🏴\",{\"1\":{\"64\":1}}],[\"🎌\",{\"1\":{\"64\":1}}],[\"🏁\",{\"1\":{\"64\":1}}],[\"🈵\",{\"1\":{\"64\":1}}],[\"🉑\",{\"1\":{\"64\":1}}],[\"🉐\",{\"1\":{\"64\":1}}],[\"🈂️\",{\"1\":{\"64\":1}}],[\"🈁\",{\"1\":{\"64\":1}}],[\"🆚\",{\"1\":{\"64\":1}}],[\"🆙\",{\"1\":{\"64\":1}}],[\"🆘\",{\"1\":{\"64\":1}}],[\"🅿️\",{\"1\":{\"64\":1}}],[\"🆗\",{\"1\":{\"64\":1}}],[\"🅾️\",{\"1\":{\"64\":1}}],[\"🆖\",{\"1\":{\"64\":1}}],[\"🆕\",{\"1\":{\"64\":1}}],[\"🆔\",{\"1\":{\"64\":1}}],[\"🆓\",{\"1\":{\"64\":1}}],[\"🆒\",{\"1\":{\"64\":1}}],[\"🆑\",{\"1\":{\"64\":1}}],[\"🅱️\",{\"1\":{\"64\":1}}],[\"🆎\",{\"1\":{\"64\":1}}],[\"🅰️\",{\"1\":{\"64\":1}}],[\"🎦\",{\"1\":{\"64\":1}}],[\"🏧\",{\"1\":{\"64\":1}}],[\"🏹\",{\"1\":{\"64\":1}}],[\"🏷️\",{\"1\":{\"64\":1}}],[\"🏮\",{\"1\":{\"64\":2}}],[\"🎬\",{\"1\":{\"64\":1}}],[\"🎞️\",{\"1\":{\"64\":1}}],[\"🎥\",{\"1\":{\"64\":1}}],[\"🎻\",{\"1\":{\"64\":1}}],[\"🎺\",{\"1\":{\"64\":1}}],[\"🎹\",{\"1\":{\"64\":1}}],[\"🎸\",{\"1\":{\"64\":1}}],[\"🎷\",{\"1\":{\"64\":1}}],[\"🎧\",{\"1\":{\"64\":1}}],[\"🎤\",{\"1\":{\"64\":1}}],[\"🎛️\",{\"1\":{\"64\":1}}],[\"🎚️\",{\"1\":{\"64\":1}}],[\"🎙️\",{\"1\":{\"64\":1}}],[\"🎶\",{\"1\":{\"64\":1}}],[\"🎵\",{\"1\":{\"64\":1}}],[\"🎼\",{\"1\":{\"64\":1}}],[\"🎓\",{\"1\":{\"64\":1}}],[\"🎩\",{\"1\":{\"64\":1}}],[\"🎒\",{\"1\":{\"64\":1}}],[\"🎨\",{\"1\":{\"64\":1}}],[\"🎭\",{\"1\":{\"64\":1}}],[\"🎴\",{\"1\":{\"64\":1}}],[\"🀄\",{\"1\":{\"64\":1}}],[\"🃏\",{\"1\":{\"64\":1}}],[\"🎲\",{\"1\":{\"64\":1}}],[\"🎰\",{\"1\":{\"64\":1}}],[\"🎮\",{\"1\":{\"64\":1}}],[\"🎱\",{\"1\":{\"64\":1}}],[\"🎯\",{\"1\":{\"64\":1}}],[\"🎿\",{\"1\":{\"64\":1}}],[\"🎽\",{\"1\":{\"64\":1}}],[\"🎣\",{\"1\":{\"64\":1}}],[\"🏸\",{\"1\":{\"64\":1}}],[\"🏓\",{\"1\":{\"64\":1}}],[\"🏒\",{\"1\":{\"64\":1}}],[\"🏑\",{\"1\":{\"64\":1}}],[\"🏏\",{\"1\":{\"64\":1}}],[\"🎳\",{\"1\":{\"64\":1}}],[\"🎾\",{\"1\":{\"64\":1}}],[\"🏉\",{\"1\":{\"64\":1}}],[\"🏈\",{\"1\":{\"64\":1}}],[\"🏐\",{\"1\":{\"64\":1}}],[\"🏀\",{\"1\":{\"64\":1}}],[\"🏅\",{\"1\":{\"64\":1}}],[\"🏆\",{\"1\":{\"64\":1}}],[\"🎖️\",{\"1\":{\"64\":1}}],[\"🎫\",{\"1\":{\"64\":1}}],[\"🎟️\",{\"1\":{\"64\":1}}],[\"🎗️\",{\"1\":{\"64\":1}}],[\"🎁\",{\"1\":{\"64\":1}}],[\"🎀\",{\"1\":{\"64\":1}}],[\"🎑\",{\"1\":{\"64\":1}}],[\"🎐\",{\"1\":{\"64\":1}}],[\"🎏\",{\"1\":{\"64\":1}}],[\"🎎\",{\"1\":{\"64\":1}}],[\"🎍\",{\"1\":{\"64\":1}}],[\"🎋\",{\"1\":{\"64\":1}}],[\"🎊\",{\"1\":{\"64\":1}}],[\"🎉\",{\"1\":{\"64\":1}}],[\"🎈\",{\"1\":{\"64\":1}}],[\"🎇\",{\"1\":{\"64\":1}}],[\"🎆\",{\"1\":{\"64\":1}}],[\"🎄\",{\"1\":{\"64\":1}}],[\"🎃\",{\"1\":{\"64\":1}}],[\"🌊\",{\"1\":{\"64\":1}}],[\"🌂\",{\"1\":{\"64\":1}}],[\"🌈\",{\"1\":{\"64\":1}}],[\"🌀\",{\"1\":{\"64\":1}}],[\"🌬️\",{\"1\":{\"64\":1}}],[\"🌫️\",{\"1\":{\"64\":1}}],[\"🌪️\",{\"1\":{\"64\":1}}],[\"🌩️\",{\"1\":{\"64\":1}}],[\"🌨️\",{\"1\":{\"64\":1}}],[\"🌧️\",{\"1\":{\"64\":1}}],[\"🌦️\",{\"1\":{\"64\":1}}],[\"🌥️\",{\"1\":{\"64\":1}}],[\"🌤️\",{\"1\":{\"64\":1}}],[\"🌌\",{\"1\":{\"64\":1}}],[\"🌠\",{\"1\":{\"64\":1}}],[\"🌟\",{\"1\":{\"64\":1}}],[\"🌞\",{\"1\":{\"64\":1}}],[\"🌝\",{\"1\":{\"64\":1}}],[\"🌡️\",{\"1\":{\"64\":1}}],[\"🌜\",{\"1\":{\"64\":1}}],[\"🌛\",{\"1\":{\"64\":1}}],[\"🌚\",{\"1\":{\"64\":1}}],[\"🌙\",{\"1\":{\"64\":1}}],[\"🌘\",{\"1\":{\"64\":1}}],[\"🌗\",{\"1\":{\"64\":1}}],[\"🌖\",{\"1\":{\"64\":1}}],[\"🌕\",{\"1\":{\"64\":1}}],[\"🌔\",{\"1\":{\"64\":2}}],[\"🌓\",{\"1\":{\"64\":1}}],[\"🌒\",{\"1\":{\"64\":1}}],[\"🌑\",{\"1\":{\"64\":1}}],[\"🏍️\",{\"1\":{\"64\":1}}],[\"🏎️\",{\"1\":{\"64\":1}}],[\"🎪\",{\"1\":{\"64\":1}}],[\"🎢\",{\"1\":{\"64\":1}}],[\"🎡\",{\"1\":{\"64\":1}}],[\"🎠\",{\"1\":{\"64\":1}}],[\"🌉\",{\"1\":{\"64\":1}}],[\"🌇\",{\"1\":{\"64\":1}}],[\"🌆\",{\"1\":{\"64\":1}}],[\"🌅\",{\"1\":{\"64\":1}}],[\"🌄\",{\"1\":{\"64\":1}}],[\"🏙️\",{\"1\":{\"64\":1}}],[\"🌃\",{\"1\":{\"64\":1}}],[\"🌁\",{\"1\":{\"64\":1}}],[\"🏰\",{\"1\":{\"64\":1}}],[\"🏯\",{\"1\":{\"64\":1}}],[\"🏭\",{\"1\":{\"64\":1}}],[\"🏬\",{\"1\":{\"64\":1}}],[\"🏫\",{\"1\":{\"64\":1}}],[\"🏪\",{\"1\":{\"64\":1}}],[\"🏩\",{\"1\":{\"64\":1}}],[\"🏨\",{\"1\":{\"64\":1}}],[\"🏦\",{\"1\":{\"64\":1}}],[\"🏥\",{\"1\":{\"64\":1}}],[\"🏤\",{\"1\":{\"64\":1}}],[\"🏣\",{\"1\":{\"64\":1}}],[\"🏢\",{\"1\":{\"64\":1}}],[\"🏡\",{\"1\":{\"64\":1}}],[\"🏠\",{\"1\":{\"64\":1}}],[\"🏚️\",{\"1\":{\"64\":1}}],[\"🏘️\",{\"1\":{\"64\":1}}],[\"🏗️\",{\"1\":{\"64\":1}}],[\"🏛️\",{\"1\":{\"64\":1}}],[\"🏟️\",{\"1\":{\"64\":1}}],[\"🏞️\",{\"1\":{\"64\":1}}],[\"🏝️\",{\"1\":{\"64\":1}}],[\"🏜️\",{\"1\":{\"64\":1}}],[\"🏖️\",{\"1\":{\"64\":1}}],[\"🏕️\",{\"1\":{\"64\":1}}],[\"🌋\",{\"1\":{\"64\":1}}],[\"🏔️\",{\"1\":{\"64\":1}}],[\"🌐\",{\"1\":{\"64\":1}}],[\"🌏\",{\"1\":{\"64\":1}}],[\"🌎\",{\"1\":{\"64\":1}}],[\"🌍\",{\"1\":{\"64\":1}}],[\"🏺\",{\"1\":{\"64\":1}}],[\"🍴\",{\"1\":{\"64\":1}}],[\"🍽️\",{\"1\":{\"64\":1}}],[\"🍻\",{\"1\":{\"64\":1}}],[\"🍺\",{\"1\":{\"64\":1}}],[\"🍹\",{\"1\":{\"64\":1}}],[\"🍸\",{\"1\":{\"64\":1}}],[\"🍷\",{\"1\":{\"64\":1}}],[\"🍾\",{\"1\":{\"64\":1}}],[\"🍶\",{\"1\":{\"64\":1}}],[\"🍵\",{\"1\":{\"64\":1}}],[\"🍼\",{\"1\":{\"64\":1}}],[\"🍯\",{\"1\":{\"64\":1}}],[\"🍮\",{\"1\":{\"64\":1}}],[\"🍭\",{\"1\":{\"64\":1}}],[\"🍬\",{\"1\":{\"64\":1}}],[\"🍫\",{\"1\":{\"64\":1}}],[\"🍰\",{\"1\":{\"64\":1}}],[\"🎂\",{\"1\":{\"64\":1}}],[\"🍪\",{\"1\":{\"64\":1}}],[\"🍩\",{\"1\":{\"64\":1}}],[\"🍨\",{\"1\":{\"64\":1}}],[\"🍧\",{\"1\":{\"64\":1}}],[\"🍦\",{\"1\":{\"64\":1}}],[\"🍡\",{\"1\":{\"64\":1}}],[\"🍥\",{\"1\":{\"64\":1}}],[\"🍤\",{\"1\":{\"64\":1}}],[\"🍣\",{\"1\":{\"64\":1}}],[\"🍢\",{\"1\":{\"64\":1}}],[\"🍠\",{\"1\":{\"64\":1}}],[\"🍝\",{\"1\":{\"64\":1}}],[\"🍜\",{\"1\":{\"64\":1}}],[\"🍛\",{\"1\":{\"64\":1}}],[\"🍚\",{\"1\":{\"64\":1}}],[\"🍙\",{\"1\":{\"64\":1}}],[\"🍘\",{\"1\":{\"64\":1}}],[\"🍱\",{\"1\":{\"64\":1}}],[\"🍿\",{\"1\":{\"64\":1}}],[\"🍲\",{\"1\":{\"64\":1}}],[\"🍳\",{\"1\":{\"64\":1}}],[\"🌯\",{\"1\":{\"64\":1}}],[\"🌮\",{\"1\":{\"64\":1}}],[\"🌭\",{\"1\":{\"64\":1}}],[\"🍕\",{\"1\":{\"64\":1}}],[\"🍟\",{\"1\":{\"64\":1}}],[\"🍔\",{\"1\":{\"64\":1}}],[\"🍗\",{\"1\":{\"64\":1}}],[\"🍖\",{\"1\":{\"64\":1}}],[\"🍞\",{\"1\":{\"64\":1}}],[\"🌰\",{\"1\":{\"64\":1}}],[\"🌶️\",{\"1\":{\"64\":1}}],[\"🌽\",{\"1\":{\"64\":1}}],[\"🍆\",{\"1\":{\"64\":1}}],[\"🍅\",{\"1\":{\"64\":1}}],[\"🍓\",{\"1\":{\"64\":1}}],[\"🍒\",{\"1\":{\"64\":1}}],[\"🍑\",{\"1\":{\"64\":1}}],[\"🍐\",{\"1\":{\"64\":1}}],[\"🍏\",{\"1\":{\"64\":1}}],[\"🍎\",{\"1\":{\"64\":1}}],[\"🍍\",{\"1\":{\"64\":1}}],[\"🍌\",{\"1\":{\"64\":1}}],[\"🍋\",{\"1\":{\"64\":1}}],[\"🍊\",{\"1\":{\"64\":3}}],[\"🍉\",{\"1\":{\"64\":1}}],[\"🍈\",{\"1\":{\"64\":1}}],[\"🍇\",{\"1\":{\"64\":1}}],[\"🍄\",{\"1\":{\"64\":1}}],[\"🍃\",{\"1\":{\"64\":1}}],[\"🍂\",{\"1\":{\"64\":1}}],[\"🍁\",{\"1\":{\"64\":1}}],[\"🍀\",{\"1\":{\"64\":1}}],[\"🌿\",{\"1\":{\"64\":1}}],[\"🌾\",{\"1\":{\"64\":1}}],[\"🌵\",{\"1\":{\"64\":1}}],[\"🌴\",{\"1\":{\"64\":1}}],[\"🌳\",{\"1\":{\"64\":1}}],[\"🌲\",{\"1\":{\"64\":1}}],[\"🌱\",{\"1\":{\"64\":1}}],[\"🌷\",{\"1\":{\"64\":1}}],[\"🌼\",{\"1\":{\"64\":1}}],[\"🌻\",{\"1\":{\"64\":1}}],[\"🌺\",{\"1\":{\"64\":1}}],[\"🌹\",{\"1\":{\"64\":1}}],[\"🏵️\",{\"1\":{\"64\":1}}],[\"🌸\",{\"1\":{\"64\":1}}],[\"🏋️‍♀️\",{\"1\":{\"64\":1}}],[\"🏋️‍♂️\",{\"1\":{\"64\":1}}],[\"🏋️\",{\"1\":{\"64\":1}}],[\"🏊‍♀️\",{\"1\":{\"64\":1}}],[\"🏊‍♂️\",{\"1\":{\"64\":1}}],[\"🏊\",{\"1\":{\"64\":1}}],[\"🏄‍♀️\",{\"1\":{\"64\":1}}],[\"🏄‍♂️\",{\"1\":{\"64\":1}}],[\"🏄\",{\"1\":{\"64\":1}}],[\"🏌️‍♀️\",{\"1\":{\"64\":1}}],[\"🏌️‍♂️\",{\"1\":{\"64\":1}}],[\"🏌️\",{\"1\":{\"64\":1}}],[\"🏂\",{\"1\":{\"64\":1}}],[\"🏇\",{\"1\":{\"64\":1}}],[\"🏃‍♀️\",{\"1\":{\"64\":1}}],[\"🏃‍♂️\",{\"1\":{\"64\":1}}],[\"🏃\",{\"1\":{\"64\":2}}],[\"🎅\",{\"1\":{\"64\":1}}],[\"k个哈希函数\",{\"1\":{\"705\":1}}],[\"kl\",{\"1\":{\"285\":1}}],[\"k++\",{\"1\":{\"269\":1}}],[\"k\",{\"1\":{\"86\":3,\"91\":2,\"269\":3,\"285\":3,\"310\":2}}],[\"kuwait\",{\"1\":{\"64\":1}}],[\"kr\",{\"1\":{\"64\":1}}],[\"kyrgyzstan\",{\"1\":{\"64\":1}}],[\"keepalive\",{\"1\":{\"560\":6,\"577\":1}}],[\"keepalivetime为0\",{\"1\":{\"362\":1,\"365\":1}}],[\"keepalivetime\",{\"1\":{\"352\":1,\"353\":1,\"354\":1}}],[\"keep\",{\"1\":{\"558\":1,\"560\":2,\"836\":1}}],[\"kenya\",{\"1\":{\"64\":1}}],[\"key映射到各个节点上\",{\"1\":{\"713\":1}}],[\"key和调用次数\",{\"1\":{\"710\":1}}],[\"keys\",{\"1\":{\"493\":1,\"725\":4,\"736\":3}}],[\"key索引\",{\"1\":{\"493\":1}}],[\"keyproperty=\",{\"1\":{\"443\":2}}],[\"key设计成弱引用同样是为了防止内存泄漏\",{\"1\":{\"311\":1}}],[\"key是threadlocal的弱引用\",{\"1\":{\"310\":1}}],[\"key的赋值\",{\"1\":{\"310\":1}}],[\"key的hashcode和key的hashcode右移16位做异或运算\",{\"1\":{\"166\":1}}],[\"key可以简单低视作threadlocal\",{\"1\":{\"310\":1}}],[\"key赋值\",{\"1\":{\"310\":1}}],[\"key通过hash定位到segment\",{\"1\":{\"180\":1}}],[\"keycap\",{\"1\":{\"64\":1}}],[\"key\",{\"1\":{\"64\":3,\"91\":1,\"164\":2,\"166\":4,\"167\":2,\"170\":1,\"177\":2,\"181\":1,\"184\":3,\"186\":1,\"258\":3,\"285\":7,\"311\":1,\"312\":1,\"493\":4,\"513\":5,\"668\":1,\"673\":1,\"693\":1,\"694\":8,\"704\":1,\"712\":1,\"731\":2,\"736\":2,\"744\":1,\"757\":1,\"788\":5}}],[\"keyboard\",{\"1\":{\"64\":2}}],[\"kosovo\",{\"1\":{\"64\":1}}],[\"korea\",{\"1\":{\"64\":1}}],[\"kong基于nginx\",{\"1\":{\"864\":1}}],[\"kong是一个独立的\",{\"1\":{\"864\":1}}],[\"kong\",{\"1\":{\"64\":1,\"864\":1}}],[\"koko\",{\"1\":{\"64\":1}}],[\"koala\",{\"1\":{\"64\":1}}],[\"khanda\",{\"1\":{\"64\":1}}],[\"kafka我们都知道采用zookeeper作为注册中心\",{\"1\":{\"770\":1}}],[\"kafka使用的\",{\"1\":{\"748\":1}}],[\"kafka\",{\"1\":{\"741\":1}}],[\"karels\",{\"1\":{\"591\":1}}],[\"kazakhstan\",{\"1\":{\"64\":1}}],[\"kaaba\",{\"1\":{\"64\":1}}],[\"kangaroo\",{\"1\":{\"64\":1}}],[\"known\",{\"1\":{\"450\":1}}],[\"knownmappers\",{\"1\":{\"450\":1}}],[\"knobs\",{\"1\":{\"64\":1}}],[\"knot\",{\"1\":{\"64\":1}}],[\"knife\",{\"1\":{\"64\":2}}],[\"kneeling\",{\"1\":{\"64\":3}}],[\"kibana负责日志数据的可视化分析\",{\"1\":{\"877\":1}}],[\"kibana是一个用于日志数据可视化和分析的工具\",{\"1\":{\"877\":1}}],[\"kibana\",{\"1\":{\"877\":1}}],[\"kill\",{\"1\":{\"538\":1}}],[\"kit\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"233\":1,\"879\":1}}],[\"kitts\",{\"1\":{\"64\":1}}],[\"kite\",{\"1\":{\"64\":1}}],[\"kiribati\",{\"1\":{\"64\":1}}],[\"kinshasa\",{\"1\":{\"64\":1}}],[\"kimono\",{\"1\":{\"64\":1}}],[\"kick\",{\"1\":{\"64\":1}}],[\"kiwi\",{\"1\":{\"64\":1}}],[\"kiss\",{\"1\":{\"64\":1}}],[\"kissing\",{\"1\":{\"64\":5}}],[\"✍️\",{\"1\":{\"64\":1}}],[\"✊\",{\"1\":{\"64\":2}}],[\"☝️\",{\"1\":{\"64\":1}}],[\"✌️\",{\"1\":{\"64\":1}}],[\"v3\",{\"1\":{\"727\":1}}],[\"v操作\",{\"1\":{\"641\":1}}],[\"v消息队列\",{\"1\":{\"641\":1}}],[\"v2\",{\"1\":{\"515\":2,\"727\":1}}],[\"v1=v2\",{\"1\":{\"515\":1}}],[\"v1\",{\"1\":{\"515\":3,\"727\":1}}],[\"vt9\",{\"1\":{\"470\":2}}],[\"vt8\",{\"1\":{\"470\":1}}],[\"vt7\",{\"1\":{\"470\":1}}],[\"vt6\",{\"1\":{\"470\":2}}],[\"vt5\",{\"1\":{\"470\":2}}],[\"vt4\",{\"1\":{\"470\":2}}],[\"vt3\",{\"1\":{\"470\":3}}],[\"vt2\",{\"1\":{\"470\":2}}],[\"vt11\",{\"1\":{\"470\":1}}],[\"vt10\",{\"1\":{\"470\":1}}],[\"vt1\",{\"1\":{\"470\":2}}],[\"vmstat\",{\"1\":{\"410\":1}}],[\"vm参数\",{\"1\":{\"388\":2}}],[\"v等形式的参数常用于表示泛型\",{\"1\":{\"285\":1}}],[\"vn\",{\"1\":{\"216\":2}}],[\"v>\",{\"1\":{\"181\":13}}],[\"var7\",{\"1\":{\"802\":2}}],[\"var6\",{\"1\":{\"802\":2}}],[\"variation\",{\"1\":{\"591\":1}}],[\"varchar\",{\"0\":{\"461\":1},\"1\":{\"461\":6}}],[\"var9\",{\"1\":{\"448\":3,\"802\":3}}],[\"var8\",{\"1\":{\"448\":1}}],[\"var5\",{\"1\":{\"341\":5,\"448\":2,\"450\":5}}],[\"var4\",{\"1\":{\"341\":2}}],[\"var2\",{\"1\":{\"341\":3}}],[\"var1\",{\"1\":{\"341\":3,\"448\":4,\"790\":1}}],[\"validation\",{\"1\":{\"819\":1}}],[\"valatile保证有序性\",{\"1\":{\"322\":1}}],[\"value注解的属性和方法\",{\"1\":{\"802\":1}}],[\"value注解就读取到配置文件中的值呢\",{\"1\":{\"289\":1}}],[\"value1\",{\"1\":{\"723\":1}}],[\"values\",{\"1\":{\"443\":1,\"445\":3}}],[\"value=\",{\"1\":{\"440\":1,\"453\":1,\"793\":2,\"795\":2}}],[\"value还在\",{\"1\":{\"311\":1}}],[\"value是threadlocal的泛型值\",{\"1\":{\"310\":1}}],[\"value为代码中放入的值\",{\"1\":{\"310\":1}}],[\"value赋值\",{\"1\":{\"310\":1}}],[\"value>类型的配置来代表\",{\"1\":{\"788\":1}}],[\"value>形式的节点组成的数组\",{\"1\":{\"310\":1}}],[\"value>型的数据结构\",{\"1\":{\"310\":1}}],[\"valueoffset\",{\"1\":{\"341\":1}}],[\"valueof\",{\"1\":{\"269\":1,\"270\":1}}],[\"value的能力能指向下一个节点的指针\",{\"1\":{\"180\":1}}],[\"value\",{\"1\":{\"86\":2,\"91\":3,\"137\":4,\"140\":4,\"147\":4,\"186\":3,\"198\":2,\"258\":3,\"270\":1,\"285\":2,\"310\":6,\"356\":1,\"364\":2,\"365\":2,\"668\":1,\"729\":1,\"731\":1,\"784\":1,\"788\":1,\"802\":1,\"879\":4}}],[\"valuefield\",{\"1\":{\"72\":1}}],[\"vanuatu\",{\"1\":{\"64\":1}}],[\"vatican\",{\"1\":{\"64\":1}}],[\"vampire\",{\"1\":{\"64\":3}}],[\"vs\",{\"1\":{\"64\":1}}],[\"vhs\",{\"1\":{\"64\":1}}],[\"visualvm\",{\"1\":{\"411\":1,\"415\":1,\"418\":1}}],[\"virtual\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"233\":1,\"379\":1,\"651\":1,\"879\":1}}],[\"virgin\",{\"1\":{\"64\":2}}],[\"virgo\",{\"1\":{\"64\":1}}],[\"viewreslover\",{\"1\":{\"816\":1}}],[\"viewresolver\",{\"1\":{\"815\":1}}],[\"view\",{\"1\":{\"523\":2,\"816\":1,\"817\":1}}],[\"viewer\",{\"1\":{\"64\":1}}],[\"vietnam\",{\"1\":{\"64\":1}}],[\"vincent\",{\"1\":{\"64\":1}}],[\"vibration\",{\"1\":{\"64\":1}}],[\"violin\",{\"1\":{\"64\":1}}],[\"video\",{\"1\":{\"64\":2}}],[\"vector是一个历史遗留类\",{\"1\":{\"158\":1}}],[\"vector\",{\"1\":{\"158\":1}}],[\"venezuela\",{\"1\":{\"64\":1}}],[\"verification\",{\"1\":{\"421\":1}}],[\"verbose\",{\"1\":{\"266\":1}}],[\"version>\",{\"1\":{\"821\":1}}],[\"version\",{\"1\":{\"406\":1,\"515\":2,\"523\":1}}],[\"version增加\",{\"1\":{\"225\":1}}],[\"version=\",{\"1\":{\"793\":1}}],[\"version=1\",{\"1\":{\"225\":1}}],[\"version=version+1\",{\"1\":{\"225\":1}}],[\"verde\",{\"1\":{\"64\":1}}],[\"vertical\",{\"1\":{\"64\":1}}],[\"vest\",{\"1\":{\"64\":1}}],[\"veil\",{\"1\":{\"64\":4}}],[\"void\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"269\":1,\"272\":6,\"276\":3,\"285\":1,\"292\":1,\"300\":5,\"302\":1,\"310\":1,\"314\":2,\"315\":2,\"324\":2,\"345\":3,\"348\":2,\"349\":3,\"357\":1,\"373\":1,\"388\":5,\"389\":2,\"445\":1,\"448\":3,\"778\":1,\"788\":3,\"790\":1,\"791\":1,\"793\":10,\"795\":3,\"802\":1,\"805\":3,\"806\":5,\"821\":1,\"849\":1,\"859\":1,\"879\":1}}],[\"volatile怎么保证有序性的呢\",{\"1\":{\"322\":1}}],[\"volatile怎么保证可见性的呢\",{\"1\":{\"322\":1}}],[\"volatile\",{\"1\":{\"322\":2,\"331\":3,\"717\":3}}],[\"volatile可以确保对某个变量的更新对其他线程马上可见\",{\"1\":{\"322\":1}}],[\"volatile就是更轻量的选择\",{\"1\":{\"322\":1}}],[\"volatile有两个作用\",{\"1\":{\"322\":1}}],[\"volatile实现原理了解吗\",{\"0\":{\"322\":1}}],[\"volatile变量规则\",{\"1\":{\"320\":1}}],[\"volatile和synchronized关键字\",{\"1\":{\"306\":1}}],[\"volleyball\",{\"1\":{\"64\":1}}],[\"volcano\",{\"1\":{\"64\":1}}],[\"vomiting\",{\"1\":{\"64\":1}}],[\"v\",{\"1\":{\"64\":1,\"86\":3,\"91\":2,\"181\":2,\"186\":1,\"213\":1,\"266\":1,\"285\":2,\"310\":2,\"325\":1,\"340\":1,\"349\":1,\"641\":1,\"645\":3}}],[\"vulcan\",{\"1\":{\"64\":1}}],[\"✋\",{\"1\":{\"64\":2}}],[\"❤️\",{\"1\":{\"64\":1}}],[\"❤️‍🩹\",{\"1\":{\"64\":1}}],[\"❤️‍🔥\",{\"1\":{\"64\":1}}],[\"❣️\",{\"1\":{\"64\":1}}],[\"☠️\",{\"1\":{\"64\":1}}],[\"☹️\",{\"1\":{\"64\":1}}],[\"w3\",{\"1\":{\"793\":1}}],[\"wnd\",{\"1\":{\"582\":2,\"583\":2}}],[\"www\",{\"1\":{\"546\":1,\"547\":1,\"793\":4}}],[\"wc\",{\"1\":{\"64\":1}}],[\"wrapper\",{\"1\":{\"448\":1}}],[\"writevalueasstring\",{\"1\":{\"805\":2}}],[\"writer\",{\"1\":{\"278\":1}}],[\"write\",{\"1\":{\"232\":1,\"483\":1,\"512\":1,\"519\":1,\"662\":2,\"817\":1}}],[\"writeobject\",{\"1\":{\"186\":1}}],[\"writeobject自定义序列化和反序列化策略\",{\"1\":{\"156\":1}}],[\"writing\",{\"1\":{\"64\":1}}],[\"wrench\",{\"1\":{\"64\":2}}],[\"wrestling\",{\"1\":{\"64\":3}}],[\"wed\",{\"1\":{\"556\":1}}],[\"wedding\",{\"1\":{\"64\":1}}],[\"wehre\",{\"1\":{\"477\":1}}],[\"weaving\",{\"1\":{\"807\":3}}],[\"weabing\",{\"1\":{\"804\":1}}],[\"weak\",{\"1\":{\"392\":1}}],[\"weakreference\",{\"1\":{\"310\":2,\"392\":3}}],[\"weakreference<threadlocal<\",{\"1\":{\"310\":1}}],[\"weary\",{\"1\":{\"64\":1}}],[\"western\",{\"1\":{\"64\":1}}],[\"webmvc\",{\"1\":{\"819\":1}}],[\"weblogaspect\",{\"1\":{\"805\":2}}],[\"weblog\",{\"1\":{\"805\":8}}],[\"websocket\",{\"0\":{\"548\":1},\"1\":{\"548\":2}}],[\"webappclassloader\",{\"1\":{\"429\":2}}],[\"web缓存\",{\"1\":{\"192\":1}}],[\"web\",{\"1\":{\"64\":1,\"429\":3,\"553\":1,\"557\":1,\"613\":1,\"615\":2,\"783\":3,\"784\":2,\"797\":2,\"822\":1}}],[\"weighted\",{\"1\":{\"851\":2}}],[\"weight\",{\"1\":{\"64\":3}}],[\"while\",{\"1\":{\"181\":2,\"270\":1,\"341\":1,\"388\":3,\"778\":1,\"788\":1}}],[\"white\",{\"1\":{\"64\":13}}],[\"when>\",{\"1\":{\"444\":2}}],[\"when\",{\"1\":{\"267\":1,\"444\":1}}],[\"where\",{\"1\":{\"225\":1,\"232\":1,\"436\":4,\"437\":2,\"440\":1,\"441\":1,\"444\":4,\"470\":2,\"488\":6,\"489\":3,\"491\":1,\"492\":1,\"493\":1,\"497\":1,\"498\":1,\"507\":1,\"508\":1,\"509\":1,\"510\":2,\"513\":4}}],[\"where>\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"444\":2}}],[\"wheel\",{\"1\":{\"64\":3}}],[\"wheelchair\",{\"1\":{\"64\":9}}],[\"whale2\",{\"1\":{\"64\":1}}],[\"whale\",{\"1\":{\"64\":1}}],[\"warn\",{\"1\":{\"778\":1}}],[\"warning\",{\"1\":{\"64\":1}}],[\"waitforrunning\",{\"1\":{\"778\":2}}],[\"waitpid\",{\"1\":{\"638\":2}}],[\"waittofight\",{\"1\":{\"345\":6}}],[\"waiters\",{\"1\":{\"325\":1}}],[\"waitsetlock\",{\"1\":{\"325\":1}}],[\"waitset\",{\"1\":{\"325\":4}}],[\"waitind\",{\"1\":{\"303\":1}}],[\"waiting\",{\"1\":{\"303\":2}}],[\"wait\",{\"0\":{\"578\":2,\"579\":1},\"1\":{\"272\":5,\"302\":8,\"306\":1,\"325\":3,\"574\":4,\"576\":1,\"578\":7,\"579\":6,\"638\":2,\"664\":1}}],[\"wales\",{\"1\":{\"64\":1}}],[\"wallis\",{\"1\":{\"64\":1}}],[\"walking\",{\"1\":{\"64\":3}}],[\"wavy\",{\"1\":{\"64\":1}}],[\"wave\",{\"1\":{\"64\":1}}],[\"wastebasket\",{\"1\":{\"64\":1}}],[\"wand\",{\"1\":{\"64\":1}}],[\"waning\",{\"1\":{\"64\":2}}],[\"way\",{\"1\":{\"64\":1}}],[\"waxing\",{\"1\":{\"64\":2}}],[\"watting\",{\"1\":{\"414\":3}}],[\"watch\",{\"1\":{\"64\":1}}],[\"watermelon\",{\"1\":{\"64\":1}}],[\"water\",{\"1\":{\"64\":6}}],[\"waffle\",{\"1\":{\"64\":1}}],[\"wood\",{\"1\":{\"64\":1}}],[\"woozy\",{\"1\":{\"64\":1}}],[\"wolf\",{\"1\":{\"64\":1}}],[\"womens\",{\"1\":{\"64\":1}}],[\"women\",{\"1\":{\"64\":3}}],[\"womans\",{\"1\":{\"64\":2}}],[\"woman\",{\"1\":{\"64\":104}}],[\"work\",{\"1\":{\"793\":2}}],[\"workqueue\",{\"1\":{\"352\":1,\"353\":1,\"354\":3}}],[\"worker\",{\"1\":{\"64\":13}}],[\"word的锁对象\",{\"1\":{\"329\":1}}],[\"word里存储当前线程指针\",{\"1\":{\"327\":1}}],[\"word存储对象自身的运行数据\",{\"1\":{\"327\":1}}],[\"word标记字段\",{\"1\":{\"327\":1}}],[\"word指针指向了monitor\",{\"1\":{\"325\":1}}],[\"word\",{\"1\":{\"325\":1,\"327\":1,\"329\":1,\"385\":1}}],[\"worship\",{\"1\":{\"64\":1}}],[\"world<\",{\"1\":{\"556\":1}}],[\"world\",{\"0\":{\"402\":1},\"1\":{\"64\":1,\"137\":2,\"140\":2,\"147\":2,\"266\":3,\"285\":1,\"395\":1,\"401\":1,\"402\":1,\"403\":2,\"404\":1,\"879\":2}}],[\"worm\",{\"1\":{\"64\":1}}],[\"worried\",{\"1\":{\"64\":1}}],[\"wiring\",{\"1\":{\"791\":1}}],[\"wireless\",{\"1\":{\"64\":1}}],[\"william\",{\"1\":{\"732\":1}}],[\"wilted\",{\"1\":{\"64\":1}}],[\"wihtout\",{\"1\":{\"192\":1}}],[\"win\",{\"1\":{\"582\":2,\"583\":2}}],[\"win=100\",{\"1\":{\"582\":1}}],[\"win=200\",{\"1\":{\"582\":1}}],[\"windows\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"233\":1,\"879\":2}}],[\"window\",{\"1\":{\"64\":1,\"585\":1}}],[\"wind\",{\"1\":{\"64\":2}}],[\"wine\",{\"1\":{\"64\":1}}],[\"wings\",{\"1\":{\"64\":1}}],[\"wing\",{\"1\":{\"64\":1}}],[\"winking\",{\"1\":{\"64\":1}}],[\"wink\",{\"1\":{\"64\":1}}],[\"without\",{\"1\":{\"192\":2}}],[\"with\",{\"1\":{\"64\":59,\"310\":1}}],[\"uber\",{\"1\":{\"868\":1}}],[\"ui\",{\"1\":{\"868\":2}}],[\"udp等\",{\"1\":{\"845\":1}}],[\"udp\",{\"0\":{\"596\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":1},\"1\":{\"559\":7,\"596\":1,\"597\":5,\"598\":6,\"599\":2,\"600\":3,\"614\":1}}],[\"utf\",{\"1\":{\"793\":1}}],[\"utf8mb4\",{\"1\":{\"466\":3}}],[\"utf8\",{\"1\":{\"466\":3}}],[\"utc\",{\"1\":{\"463\":2}}],[\"util包下的集合类都是快速失败的\",{\"1\":{\"157\":1}}],[\"util中\",{\"1\":{\"152\":1}}],[\"util\",{\"1\":{\"95\":1,\"97\":1,\"157\":1,\"294\":1,\"340\":1,\"436\":1}}],[\"uuid\",{\"1\":{\"445\":1,\"497\":1,\"534\":1}}],[\"u\",{\"1\":{\"181\":3}}],[\"u0000\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":1,\"879\":1}}],[\"uzbekistan\",{\"1\":{\"64\":1}}],[\"urg\",{\"1\":{\"580\":1}}],[\"uri\",{\"0\":{\"557\":1},\"1\":{\"556\":1,\"557\":5}}],[\"url=jdbc\",{\"1\":{\"445\":1}}],[\"url\",{\"0\":{\"546\":1,\"557\":1},\"1\":{\"72\":1,\"76\":3,\"389\":1,\"553\":4,\"554\":6,\"556\":1,\"557\":4,\"566\":2,\"615\":3,\"805\":2,\"847\":1}}],[\"uruguay\",{\"1\":{\"64\":1}}],[\"urn\",{\"1\":{\"64\":1}}],[\"using\",{\"1\":{\"421\":1,\"493\":3}}],[\"usegeneratedkeys=\",{\"1\":{\"443\":1}}],[\"useparallelgc\",{\"1\":{\"406\":1}}],[\"userdao2\",{\"1\":{\"788\":2}}],[\"userdao1\",{\"1\":{\"788\":2}}],[\"userdao\",{\"1\":{\"788\":10}}],[\"userpassword\",{\"1\":{\"443\":1}}],[\"userid\",{\"1\":{\"443\":1,\"566\":1}}],[\"userresultmap\",{\"1\":{\"436\":4}}],[\"uservo\",{\"1\":{\"89\":9,\"90\":9,\"91\":9}}],[\"username\",{\"1\":{\"87\":3,\"88\":3,\"89\":3,\"90\":3,\"91\":1,\"241\":1,\"436\":4,\"440\":3,\"443\":1,\"444\":2}}],[\"user\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"225\":2,\"305\":1,\"423\":1,\"436\":15,\"440\":1,\"443\":5,\"507\":1,\"508\":1,\"509\":2,\"510\":1,\"556\":1,\"724\":6,\"817\":4,\"859\":3}}],[\"us\",{\"1\":{\"64\":3}}],[\"uganda\",{\"1\":{\"64\":1}}],[\"ukraine\",{\"1\":{\"64\":1}}],[\"uk\",{\"1\":{\"64\":1}}],[\"u6e80\",{\"1\":{\"64\":1}}],[\"umbrella\",{\"1\":{\"64\":4}}],[\"unexpectedrollbackexception\",{\"1\":{\"813\":1}}],[\"una\",{\"1\":{\"583\":1}}],[\"unamused\",{\"1\":{\"64\":1}}],[\"uncommited\",{\"1\":{\"521\":1}}],[\"uncommitted\",{\"1\":{\"519\":1,\"520\":1,\"810\":1}}],[\"unchecked\",{\"1\":{\"181\":1,\"813\":1}}],[\"undertow\",{\"1\":{\"819\":1}}],[\"underage\",{\"1\":{\"64\":1}}],[\"undo\",{\"1\":{\"479\":3,\"519\":5,\"523\":2}}],[\"unwrapthrowable\",{\"1\":{\"450\":1}}],[\"unloading\",{\"1\":{\"421\":1}}],[\"unlock\",{\"1\":{\"64\":1,\"332\":1}}],[\"unsafe\",{\"1\":{\"341\":1}}],[\"unique\",{\"1\":{\"493\":5,\"762\":1}}],[\"unicode\",{\"1\":{\"466\":1}}],[\"unicorn\",{\"1\":{\"64\":1}}],[\"university\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"unit\",{\"1\":{\"345\":1,\"349\":1,\"352\":1,\"353\":1,\"354\":1}}],[\"unittype\",{\"1\":{\"72\":1}}],[\"united\",{\"1\":{\"64\":2}}],[\"union\",{\"0\":{\"468\":2,\"492\":1},\"1\":{\"64\":1,\"468\":5,\"489\":1,\"492\":4,\"493\":1}}],[\"uniform\",{\"1\":{\"64\":1,\"557\":2}}],[\"up赶紧爆肝把视频做出来\",{\"1\":{\"663\":1}}],[\"updatetime\",{\"1\":{\"489\":1}}],[\"update>\",{\"1\":{\"444\":1}}],[\"updateauthorifnecessary\",{\"1\":{\"444\":1}}],[\"update\",{\"1\":{\"225\":2,\"444\":1,\"453\":1,\"513\":4}}],[\"upper\",{\"1\":{\"64\":2}}],[\"upwards\",{\"1\":{\"64\":1}}],[\"upside\",{\"1\":{\"64\":1}}],[\"up\",{\"1\":{\"23\":1,\"64\":11}}],[\"pvstouse\",{\"1\":{\"802\":6}}],[\"pvs\",{\"1\":{\"802\":9}}],[\"pfail\",{\"1\":{\"698\":1}}],[\"p操作可能会阻塞\",{\"1\":{\"645\":1}}],[\"p操作\",{\"1\":{\"641\":1}}],[\"pt\",{\"1\":{\"537\":2}}],[\"ptr指向undo日志地址\",{\"1\":{\"523\":1}}],[\"ptr\",{\"1\":{\"523\":2}}],[\"p3\",{\"1\":{\"501\":2}}],[\"p2\",{\"1\":{\"501\":2}}],[\"p1\",{\"1\":{\"501\":2}}],[\"pc\",{\"1\":{\"379\":1}}],[\"pst\",{\"1\":{\"580\":1}}],[\"ps\",{\"1\":{\"224\":1,\"231\":1,\"245\":1,\"270\":1,\"331\":1,\"352\":1,\"448\":3,\"477\":1,\"489\":1,\"555\":1,\"568\":1,\"574\":1,\"598\":1,\"673\":1,\"701\":1,\"709\":1,\"732\":1,\"788\":2,\"792\":1,\"800\":1,\"805\":1,\"817\":1,\"824\":1}}],[\"p<=n\",{\"1\":{\"170\":1}}],[\"p\",{\"1\":{\"170\":1,\"191\":1,\"192\":1,\"215\":1,\"418\":1,\"441\":4,\"444\":1,\"641\":1,\"645\":2,\"718\":1}}],[\"pdf版阅读\",{\"0\":{\"624\":1}}],[\"pdf\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"624\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"python\",{\"0\":{\"926\":1},\"2\":{\"133\":1}}],[\"pwd=8888\",{\"1\":{\"107\":1,\"115\":1}}],[\"phase\",{\"1\":{\"870\":1,\"871\":1}}],[\"phantomreference\",{\"1\":{\"392\":3}}],[\"phantom\",{\"1\":{\"392\":1}}],[\"physical\",{\"1\":{\"651\":1,\"657\":1}}],[\"philippines\",{\"1\":{\"64\":1}}],[\"phones\",{\"1\":{\"64\":1}}],[\"phone\",{\"1\":{\"64\":2,\"509\":1}}],[\"please\",{\"1\":{\"762\":1}}],[\"pleading\",{\"1\":{\"64\":1}}],[\"plus\",{\"1\":{\"64\":1}}],[\"plunger\",{\"1\":{\"64\":1}}],[\"plugins>\",{\"1\":{\"453\":1}}],[\"plugin>\",{\"1\":{\"453\":1}}],[\"plugin\",{\"1\":{\"453\":1}}],[\"plug\",{\"1\":{\"64\":1}}],[\"plain\",{\"1\":{\"556\":1}}],[\"placard\",{\"1\":{\"64\":1}}],[\"place\",{\"1\":{\"64\":5}}],[\"planet\",{\"1\":{\"64\":1}}],[\"plant\",{\"1\":{\"64\":1}}],[\"play\",{\"1\":{\"64\":1}}],[\"playground\",{\"1\":{\"64\":1}}],[\"playing\",{\"1\":{\"64\":5}}],[\"plate\",{\"1\":{\"64\":1}}],[\"primary\",{\"1\":{\"493\":2,\"757\":1}}],[\"primitive\",{\"1\":{\"263\":1}}],[\"price\",{\"1\":{\"437\":4,\"441\":2}}],[\"priority\",{\"1\":{\"690\":1}}],[\"priorityblockingqueue\",{\"1\":{\"356\":2}}],[\"prio=0\",{\"1\":{\"418\":1}}],[\"prio=9\",{\"1\":{\"418\":1}}],[\"private\",{\"0\":{\"250\":1},\"1\":{\"181\":1,\"250\":1,\"252\":1,\"253\":1,\"257\":2,\"269\":1,\"282\":1,\"285\":1,\"312\":3,\"314\":2,\"345\":1,\"348\":3,\"349\":2,\"367\":5,\"373\":3,\"388\":1,\"441\":5,\"450\":1,\"763\":1,\"788\":6,\"793\":2,\"795\":3,\"805\":1,\"806\":2,\"813\":3,\"821\":1,\"849\":1,\"859\":1}}],[\"principe\",{\"1\":{\"64\":1}}],[\"princess\",{\"1\":{\"64\":1}}],[\"prince\",{\"1\":{\"64\":1}}],[\"printf\",{\"1\":{\"285\":1,\"414\":1,\"418\":2}}],[\"printarray\",{\"1\":{\"285\":3}}],[\"print\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"276\":1,\"879\":1}}],[\"println\",{\"1\":{\"137\":9,\"140\":9,\"147\":9,\"245\":3,\"255\":1,\"269\":3,\"276\":3,\"285\":2,\"292\":2,\"293\":1,\"294\":8,\"300\":3,\"315\":1,\"345\":3,\"348\":1,\"349\":1,\"373\":1,\"445\":1,\"453\":4,\"788\":1,\"793\":11,\"806\":6,\"821\":1,\"879\":9}}],[\"printer\",{\"1\":{\"64\":1}}],[\"printstacktrace\",{\"1\":{\"300\":2,\"345\":1,\"788\":2,\"813\":1}}],[\"prints\",{\"1\":{\"64\":1}}],[\"prometheus\",{\"1\":{\"876\":3}}],[\"promotion\",{\"1\":{\"399\":1}}],[\"producer端在发送消息的时候\",{\"1\":{\"776\":1}}],[\"producer的负载均衡\",{\"0\":{\"776\":1}}],[\"producer发送消息至broker端\",{\"1\":{\"771\":1}}],[\"producer在发送消息的时候从nameserver获取broker服务器地址\",{\"1\":{\"769\":1}}],[\"producer生产者集群\",{\"1\":{\"769\":1}}],[\"producer由用户进行分布式部署\",{\"1\":{\"750\":1}}],[\"producer\",{\"0\":{\"750\":1},\"1\":{\"746\":1,\"747\":1,\"748\":1,\"763\":3,\"765\":8,\"767\":1,\"769\":1}}],[\"productname\",{\"1\":{\"441\":2}}],[\"productid\",{\"1\":{\"441\":1}}],[\"product\",{\"1\":{\"441\":3}}],[\"products\",{\"1\":{\"260\":1,\"441\":2}}],[\"provider\",{\"1\":{\"687\":1}}],[\"probes\",{\"1\":{\"560\":2}}],[\"probing\",{\"1\":{\"64\":4}}],[\"procedure\",{\"1\":{\"830\":1,\"845\":1}}],[\"processor<\",{\"1\":{\"821\":1}}],[\"processrequest\",{\"1\":{\"778\":1}}],[\"processlist\",{\"1\":{\"538\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"805\":3}}],[\"proceed\",{\"1\":{\"453\":2,\"805\":1}}],[\"proxyfactory\",{\"1\":{\"806\":7}}],[\"proxy\",{\"1\":{\"450\":3,\"573\":2,\"806\":5}}],[\"propagation=\",{\"1\":{\"813\":1}}],[\"propagation\",{\"1\":{\"813\":5}}],[\"propafation\",{\"1\":{\"811\":1}}],[\"propreties\",{\"1\":{\"794\":1}}],[\"props=null\",{\"1\":{\"453\":2}}],[\"properties\",{\"1\":{\"448\":3,\"453\":2,\"784\":1,\"788\":9,\"819\":1}}],[\"propertyvalues\",{\"1\":{\"802\":5}}],[\"property>\",{\"1\":{\"795\":3}}],[\"property\",{\"1\":{\"437\":1,\"441\":1,\"820\":1}}],[\"property为实体类属性名\",{\"1\":{\"437\":1}}],[\"property=\",{\"1\":{\"437\":2,\"441\":11}}],[\"proposer\",{\"1\":{\"213\":1}}],[\"profiler\",{\"1\":{\"411\":1}}],[\"program\",{\"1\":{\"379\":1}}],[\"protlet\",{\"1\":{\"797\":1}}],[\"protobuf\",{\"1\":{\"830\":1}}],[\"protobuff\",{\"1\":{\"283\":2}}],[\"prototype\",{\"1\":{\"784\":1,\"797\":1,\"799\":1}}],[\"protocol\",{\"1\":{\"602\":1,\"606\":1,\"608\":1,\"609\":1,\"845\":2}}],[\"protocolbuffer\",{\"1\":{\"283\":1}}],[\"protected\",{\"0\":{\"250\":1},\"1\":{\"250\":1,\"252\":1,\"272\":2,\"373\":1,\"427\":1,\"450\":1,\"802\":1,\"813\":1,\"820\":1}}],[\"proactor\",{\"1\":{\"280\":1}}],[\"projector\",{\"1\":{\"64\":1}}],[\"prefix\",{\"1\":{\"821\":1}}],[\"precision\",{\"1\":{\"465\":1}}],[\"precommit\",{\"1\":{\"202\":1,\"203\":2}}],[\"preparation\",{\"1\":{\"421\":1}}],[\"prepared\",{\"1\":{\"451\":1}}],[\"preparedstatementhandler里对sql进行了预编译处理\",{\"1\":{\"448\":1}}],[\"preparedstatement\",{\"1\":{\"448\":4}}],[\"preparestatement\",{\"1\":{\"448\":1}}],[\"prepare\",{\"0\":{\"215\":1},\"1\":{\"214\":1,\"215\":2,\"481\":1}}],[\"pretenuresizethreshold\",{\"1\":{\"400\":1}}],[\"pretzel\",{\"1\":{\"64\":1}}],[\"predicate\",{\"1\":{\"292\":1,\"865\":1}}],[\"present\",{\"1\":{\"186\":1}}],[\"prev\",{\"1\":{\"74\":2,\"734\":1}}],[\"previous\",{\"1\":{\"64\":1}}],[\"pregnant\",{\"1\":{\"64\":3}}],[\"prayer\",{\"1\":{\"64\":1}}],[\"pray\",{\"1\":{\"64\":1}}],[\"pullmessageprocessor\",{\"1\":{\"778\":1}}],[\"pullreuqest\",{\"1\":{\"778\":1}}],[\"pullrequestholdservice\",{\"1\":{\"778\":1}}],[\"pullrequest\",{\"1\":{\"778\":5}}],[\"pullrequestlist中\",{\"1\":{\"777\":1}}],[\"pullrequest添加到拉取列表\",{\"1\":{\"777\":1}}],[\"pull\",{\"1\":{\"751\":4,\"777\":2,\"778\":1,\"843\":1}}],[\"publisher\",{\"1\":{\"743\":1}}],[\"public\",{\"0\":{\"250\":1},\"1\":{\"86\":1,\"87\":2,\"88\":2,\"89\":2,\"90\":2,\"91\":2,\"137\":3,\"140\":3,\"147\":3,\"169\":1,\"186\":1,\"250\":1,\"251\":1,\"252\":3,\"253\":1,\"257\":3,\"258\":1,\"269\":1,\"270\":1,\"272\":9,\"276\":9,\"285\":7,\"292\":1,\"300\":10,\"308\":1,\"310\":3,\"315\":3,\"333\":2,\"341\":2,\"345\":2,\"348\":3,\"349\":4,\"357\":1,\"362\":1,\"363\":1,\"364\":1,\"365\":1,\"373\":3,\"388\":6,\"389\":4,\"436\":4,\"441\":2,\"445\":2,\"448\":7,\"450\":5,\"453\":4,\"762\":1,\"778\":1,\"788\":13,\"790\":2,\"791\":2,\"793\":18,\"795\":12,\"802\":1,\"805\":7,\"806\":17,\"813\":7,\"817\":1,\"820\":1,\"821\":4,\"847\":1,\"849\":3,\"858\":3,\"859\":2,\"879\":3}}],[\"pugh\",{\"1\":{\"732\":1}}],[\"puerto\",{\"1\":{\"64\":1}}],[\"putmapping\",{\"1\":{\"784\":1}}],[\"put流程\",{\"1\":{\"180\":1,\"181\":1}}],[\"put\",{\"1\":{\"64\":1,\"91\":3,\"177\":4,\"186\":1,\"552\":1,\"788\":2,\"845\":1}}],[\"push\",{\"1\":{\"751\":4,\"777\":2,\"843\":1}}],[\"pushdown\",{\"1\":{\"510\":1}}],[\"pushprocessserviceimpl\",{\"1\":{\"352\":1}}],[\"pushpin\",{\"1\":{\"64\":2}}],[\"pushing\",{\"1\":{\"64\":2}}],[\"purse\",{\"1\":{\"64\":1}}],[\"purple\",{\"1\":{\"64\":3}}],[\"punch\",{\"1\":{\"64\":1}}],[\"packet\",{\"1\":{\"609\":1}}],[\"package\",{\"1\":{\"64\":1}}],[\"payid\",{\"1\":{\"441\":1}}],[\"pay\",{\"1\":{\"441\":6}}],[\"pattern就是采用先更数据库\",{\"1\":{\"707\":1}}],[\"pattern\",{\"1\":{\"440\":2}}],[\"pathvariable\",{\"1\":{\"784\":1}}],[\"path\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"padding\",{\"1\":{\"385\":1}}],[\"paxos算法思想\",{\"1\":{\"217\":1}}],[\"paxos算法有什么缺点吗\",{\"0\":{\"217\":1}}],[\"paxos算法包含两个阶段\",{\"1\":{\"214\":1}}],[\"paxos算法的工作流程\",{\"0\":{\"212\":1}}],[\"paxos算法是什么\",{\"0\":{\"211\":1}}],[\"paxos\",{\"1\":{\"210\":1,\"211\":1,\"217\":2,\"219\":3}}],[\"palau\",{\"1\":{\"64\":1}}],[\"palestinian\",{\"1\":{\"64\":1}}],[\"palms\",{\"1\":{\"64\":1}}],[\"palm\",{\"1\":{\"64\":3}}],[\"pakistan\",{\"1\":{\"64\":1}}],[\"papua\",{\"1\":{\"64\":1}}],[\"paper\",{\"1\":{\"64\":1}}],[\"paperclips\",{\"1\":{\"64\":1}}],[\"paperclip\",{\"1\":{\"64\":1}}],[\"pause\",{\"1\":{\"64\":2}}],[\"password\",{\"1\":{\"440\":1,\"443\":1,\"444\":2}}],[\"passport\",{\"1\":{\"64\":1}}],[\"passenger\",{\"1\":{\"64\":1}}],[\"paintbrush\",{\"1\":{\"64\":1}}],[\"pagecache\",{\"1\":{\"772\":3}}],[\"page\",{\"1\":{\"64\":2,\"480\":1,\"653\":1,\"657\":1}}],[\"pager\",{\"1\":{\"64\":1}}],[\"panama\",{\"1\":{\"64\":1}}],[\"pan\",{\"1\":{\"64\":1,\"107\":1,\"115\":1}}],[\"pancakes\",{\"1\":{\"64\":1}}],[\"panda\",{\"1\":{\"64\":1}}],[\"parse\",{\"1\":{\"448\":1}}],[\"parser\",{\"1\":{\"448\":2}}],[\"parseint\",{\"1\":{\"270\":2}}],[\"parnew\",{\"1\":{\"401\":4}}],[\"parent\",{\"1\":{\"315\":2}}],[\"parallelgcthreads=n\",{\"1\":{\"412\":2}}],[\"parallel\",{\"1\":{\"401\":6,\"406\":4,\"407\":1}}],[\"parallelism\",{\"1\":{\"319\":1}}],[\"parameterize\",{\"1\":{\"448\":1}}],[\"parameterhandler\",{\"1\":{\"448\":3}}],[\"parameter\",{\"1\":{\"448\":2}}],[\"parametertype=\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"436\":2,\"437\":2,\"441\":1}}],[\"params\",{\"1\":{\"436\":1}}],[\"param括号里面修饰的名称\",{\"1\":{\"436\":1}}],[\"param注解传参法\",{\"1\":{\"436\":1}}],[\"param注解中的标识\",{\"1\":{\"86\":1}}],[\"param\",{\"1\":{\"86\":2,\"436\":2,\"450\":3,\"788\":5}}],[\"paraguay\",{\"1\":{\"64\":1}}],[\"parasol\",{\"1\":{\"64\":1}}],[\"parachute\",{\"1\":{\"64\":1}}],[\"participant\",{\"1\":{\"871\":1,\"872\":1}}],[\"partial\",{\"1\":{\"397\":1}}],[\"partition\",{\"1\":{\"190\":2}}],[\"part\",{\"1\":{\"64\":1}}],[\"partly\",{\"1\":{\"64\":1}}],[\"partying\",{\"1\":{\"64\":1}}],[\"parking\",{\"1\":{\"64\":1}}],[\"park\",{\"1\":{\"64\":1}}],[\"parrot\",{\"1\":{\"64\":1}}],[\"pawn\",{\"1\":{\"64\":1}}],[\"paw\",{\"1\":{\"64\":1}}],[\"pipeining\",{\"1\":{\"726\":1}}],[\"pipelining的优势\",{\"1\":{\"726\":1}}],[\"pipelining\",{\"1\":{\"726\":3}}],[\"pipedreader和pipedwriter\",{\"1\":{\"306\":1}}],[\"pipedinputstream\",{\"1\":{\"306\":1}}],[\"pipedoutputstream\",{\"1\":{\"306\":1}}],[\"pid\",{\"1\":{\"414\":2,\"415\":3,\"417\":3,\"418\":7}}],[\"pitcairn\",{\"1\":{\"64\":1}}],[\"pirate\",{\"1\":{\"64\":1}}],[\"pisces\",{\"1\":{\"64\":1}}],[\"pillars\",{\"1\":{\"72\":1}}],[\"pill\",{\"1\":{\"64\":1}}],[\"pilot\",{\"1\":{\"64\":3}}],[\"picgo上传区进行上传图片\",{\"1\":{\"113\":1}}],[\"picgo设置\",{\"1\":{\"113\":1}}],[\"picgo官方网址\",{\"1\":{\"107\":1}}],[\"picgo+gitee设置图床\",{\"0\":{\"106\":1},\"1\":{\"48\":1}}],[\"pick\",{\"1\":{\"64\":3}}],[\"pickup\",{\"1\":{\"64\":1}}],[\"picture\",{\"1\":{\"64\":1}}],[\"pierre\",{\"1\":{\"64\":1}}],[\"piece\",{\"1\":{\"64\":1}}],[\"pie\",{\"1\":{\"64\":1}}],[\"pizza\",{\"1\":{\"64\":1}}],[\"pig2\",{\"1\":{\"64\":1}}],[\"pig\",{\"1\":{\"64\":2}}],[\"pi\",{\"1\":{\"64\":1,\"321\":2}}],[\"pinpoint\",{\"1\":{\"868\":3}}],[\"pin\",{\"1\":{\"64\":1}}],[\"pinata\",{\"1\":{\"64\":1}}],[\"ping\",{\"0\":{\"609\":1},\"1\":{\"64\":1,\"608\":1,\"609\":5,\"614\":1}}],[\"pineapple\",{\"1\":{\"64\":1}}],[\"pinching\",{\"1\":{\"64\":1}}],[\"pinched\",{\"1\":{\"64\":1}}],[\"pink\",{\"1\":{\"64\":1}}],[\"pom\",{\"1\":{\"819\":1}}],[\"populatebean\",{\"1\":{\"802\":3}}],[\"populate\",{\"1\":{\"793\":1}}],[\"popcorn\",{\"1\":{\"64\":1}}],[\"port\",{\"1\":{\"418\":1,\"697\":1,\"718\":1}}],[\"portugal\",{\"1\":{\"64\":1}}],[\"pojo\",{\"0\":{\"90\":1,\"91\":1},\"1\":{\"89\":1,\"90\":1,\"91\":1,\"433\":2,\"436\":1,\"437\":2,\"440\":1}}],[\"pong消息实现节点通信\",{\"1\":{\"698\":1}}],[\"pong\",{\"1\":{\"64\":1}}],[\"possible\",{\"1\":{\"493\":1}}],[\"pos追上checkpoint时\",{\"1\":{\"483\":1}}],[\"pos是当前记录的位置\",{\"1\":{\"483\":1}}],[\"postprocessorpropertyvalues\",{\"1\":{\"802\":1}}],[\"postprocessproperties\",{\"1\":{\"802\":2}}],[\"postprocesspropertyvalues\",{\"1\":{\"802\":2}}],[\"postprocessafterinitialization方法\",{\"1\":{\"793\":2}}],[\"postprocessafterinitialization\",{\"1\":{\"793\":1,\"812\":2}}],[\"postprocessbeforeinitialization方法\",{\"1\":{\"793\":2}}],[\"postprocessbeforeinitialization\",{\"1\":{\"793\":1}}],[\"postmapping\",{\"1\":{\"784\":1}}],[\"postbox\",{\"1\":{\"64\":1}}],[\"postal\",{\"1\":{\"64\":1}}],[\"post\",{\"0\":{\"553\":1},\"1\":{\"64\":3,\"72\":1,\"444\":2,\"552\":1,\"553\":8,\"556\":1,\"807\":1,\"845\":1}}],[\"position\",{\"1\":{\"64\":3}}],[\"pound\",{\"1\":{\"64\":1}}],[\"pouch\",{\"1\":{\"64\":1}}],[\"pouring\",{\"1\":{\"64\":1}}],[\"poultry\",{\"1\":{\"64\":1}}],[\"pouting\",{\"1\":{\"64\":4}}],[\"pout\",{\"1\":{\"64\":1}}],[\"pod\",{\"1\":{\"64\":1}}],[\"potable\",{\"1\":{\"64\":2}}],[\"potato\",{\"1\":{\"64\":2}}],[\"pot\",{\"1\":{\"64\":1}}],[\"potted\",{\"1\":{\"64\":1}}],[\"pool\",{\"1\":{\"267\":3,\"858\":1}}],[\"poodle\",{\"1\":{\"64\":1}}],[\"poop\",{\"1\":{\"64\":1}}],[\"pollingtimemills\",{\"1\":{\"778\":3}}],[\"poll和epoll\",{\"1\":{\"672\":1}}],[\"poll\",{\"1\":{\"664\":6,\"672\":1}}],[\"poland\",{\"1\":{\"64\":1}}],[\"polar\",{\"1\":{\"64\":1}}],[\"polynesia\",{\"1\":{\"64\":1}}],[\"pole\",{\"1\":{\"64\":1}}],[\"polo\",{\"1\":{\"64\":3}}],[\"policewoman\",{\"1\":{\"64\":1}}],[\"policeman\",{\"1\":{\"64\":1}}],[\"police\",{\"1\":{\"64\":3}}],[\"pointcut\",{\"1\":{\"784\":1,\"804\":1,\"805\":2}}],[\"pointer\",{\"1\":{\"383\":1}}],[\"pointed\",{\"1\":{\"64\":2}}],[\"pointing\",{\"1\":{\"64\":1}}],[\"point\",{\"1\":{\"64\":5}}],[\"pessimistic\",{\"1\":{\"515\":1}}],[\"pedestrians\",{\"1\":{\"64\":1}}],[\"petri\",{\"1\":{\"64\":1}}],[\"percona\",{\"1\":{\"537\":1}}],[\"perpetualcache\",{\"1\":{\"446\":2}}],[\"permits\",{\"1\":{\"348\":1}}],[\"peru\",{\"1\":{\"64\":1}}],[\"performing\",{\"1\":{\"64\":1}}],[\"personbean\",{\"1\":{\"793\":9}}],[\"person\",{\"1\":{\"64\":27,\"251\":1,\"257\":8,\"440\":1}}],[\"persevere\",{\"1\":{\"64\":1}}],[\"pepper\",{\"1\":{\"64\":2}}],[\"pea\",{\"1\":{\"64\":1}}],[\"peanuts\",{\"1\":{\"64\":1}}],[\"peace\",{\"1\":{\"64\":1}}],[\"peach\",{\"1\":{\"64\":1}}],[\"peacock\",{\"1\":{\"64\":1}}],[\"pear\",{\"1\":{\"64\":1}}],[\"pencil\",{\"1\":{\"64\":1}}],[\"pencil2\",{\"1\":{\"64\":1}}],[\"pen\",{\"1\":{\"64\":3}}],[\"penguin\",{\"1\":{\"64\":1}}],[\"pensive\",{\"1\":{\"64\":1}}],[\"peopleresultmap\",{\"1\":{\"441\":1}}],[\"people\",{\"1\":{\"64\":2}}],[\"peeking\",{\"1\":{\"64\":1}}],[\"zuul是spring\",{\"1\":{\"864\":1}}],[\"zuul\",{\"1\":{\"830\":1,\"831\":1,\"832\":1,\"864\":2}}],[\"zlend\",{\"1\":{\"733\":1}}],[\"zllen\",{\"1\":{\"733\":1}}],[\"zltail\",{\"1\":{\"733\":1}}],[\"zlbyttes\",{\"1\":{\"733\":1}}],[\"zskiplistnode⽤于表示表跳跃节点\",{\"1\":{\"729\":1}}],[\"zskiplist⽤于保存跳跃表信息\",{\"1\":{\"729\":1}}],[\"zset这个结构\",{\"1\":{\"723\":1}}],[\"zset\",{\"1\":{\"668\":1,\"719\":1,\"732\":1}}],[\"zrangebysocre\",{\"1\":{\"723\":1}}],[\"zgc\",{\"1\":{\"407\":1}}],[\"z\",{\"1\":{\"294\":2}}],[\"zk实际上是一个比较重的分布式组件\",{\"1\":{\"197\":1}}],[\"zipkin\",{\"1\":{\"831\":1,\"832\":1,\"868\":5}}],[\"ziplist\",{\"1\":{\"729\":1,\"734\":3}}],[\"zipper\",{\"1\":{\"64\":1}}],[\"zimbabwe\",{\"1\":{\"64\":1}}],[\"zealand\",{\"1\":{\"64\":1}}],[\"zero\",{\"1\":{\"64\":1}}],[\"zebra\",{\"1\":{\"64\":1}}],[\"zab\",{\"1\":{\"770\":1,\"836\":1}}],[\"zadd\",{\"1\":{\"723\":1}}],[\"zambia\",{\"1\":{\"64\":1}}],[\"zap\",{\"1\":{\"64\":1}}],[\"zany\",{\"1\":{\"64\":1}}],[\"zookepper分布式锁\",{\"1\":{\"195\":1}}],[\"zookeeper要解决这个问题只能通过划分领域\",{\"1\":{\"770\":1}}],[\"zookeeper在进行选举的时候\",{\"1\":{\"770\":1}}],[\"zookeeper的数据节点和文件目录类似\",{\"1\":{\"197\":1}}],[\"zookeeper也是常见分布式锁实现方法\",{\"1\":{\"197\":1}}],[\"zookeeper如何实现分布式锁\",{\"0\":{\"197\":1}}],[\"zookeeper\",{\"0\":{\"836\":1},\"1\":{\"192\":1,\"748\":2,\"770\":2,\"824\":1,\"831\":1,\"835\":2,\"836\":1,\"841\":1}}],[\"zoom\",{\"1\":{\"31\":1}}],[\"zombie\",{\"1\":{\"64\":3}}],[\"zzz\",{\"1\":{\"64\":1}}],[\"yml\",{\"1\":{\"819\":1}}],[\"yyyy\",{\"1\":{\"463\":1}}],[\"yyshino优秀的前端笔记\",{\"1\":{\"59\":1}}],[\"ygc\",{\"1\":{\"418\":2}}],[\"yield\",{\"1\":{\"181\":1,\"302\":2}}],[\"yin\",{\"1\":{\"64\":1}}],[\"yes\",{\"1\":{\"475\":10,\"697\":1}}],[\"yemen\",{\"1\":{\"64\":1}}],[\"yen\",{\"1\":{\"64\":1}}],[\"yellow\",{\"1\":{\"64\":3}}],[\"yang\",{\"1\":{\"64\":1}}],[\"yarn\",{\"1\":{\"64\":1}}],[\"yawning\",{\"1\":{\"64\":1}}],[\"yo\",{\"1\":{\"64\":2}}],[\"your\",{\"1\":{\"849\":1}}],[\"younggc\",{\"1\":{\"400\":1}}],[\"young\",{\"0\":{\"397\":1,\"398\":1},\"1\":{\"394\":1,\"397\":1,\"398\":1,\"399\":5,\"400\":1}}],[\"you\",{\"1\":{\"64\":1}}],[\"yum\",{\"1\":{\"64\":1}}],[\"☺️\",{\"1\":{\"64\":1}}],[\"🪯\",{\"1\":{\"64\":1}}],[\"🪪\",{\"1\":{\"64\":1}}],[\"🪧\",{\"1\":{\"64\":1}}],[\"🪬\",{\"1\":{\"64\":1}}],[\"🧿\",{\"1\":{\"64\":1}}],[\"🪦\",{\"1\":{\"64\":1}}],[\"🧯\",{\"1\":{\"64\":1}}],[\"🧽\",{\"1\":{\"64\":1}}],[\"🪥\",{\"1\":{\"64\":1}}],[\"🫧\",{\"1\":{\"64\":1}}],[\"🧼\",{\"1\":{\"64\":1}}],[\"🪣\",{\"1\":{\"64\":1}}],[\"🧻\",{\"1\":{\"64\":1}}],[\"🧺\",{\"1\":{\"64\":1}}],[\"🧹\",{\"1\":{\"64\":1}}],[\"🧷\",{\"1\":{\"64\":1}}],[\"🧴\",{\"1\":{\"64\":1}}],[\"🪒\",{\"1\":{\"64\":1}}],[\"🪤\",{\"1\":{\"64\":1}}],[\"🪠\",{\"1\":{\"64\":1}}],[\"🪑\",{\"1\":{\"64\":1}}],[\"🪟\",{\"1\":{\"64\":1}}],[\"🪞\",{\"1\":{\"64\":1}}],[\"🩻\",{\"1\":{\"64\":1}}],[\"🩺\",{\"1\":{\"64\":1}}],[\"🩼\",{\"1\":{\"64\":1}}],[\"🩹\",{\"1\":{\"64\":1}}],[\"🩸\",{\"1\":{\"64\":1}}],[\"🧬\",{\"1\":{\"64\":1}}],[\"🧫\",{\"1\":{\"64\":1}}],[\"🧪\",{\"1\":{\"64\":1}}],[\"🪜\",{\"1\":{\"64\":1}}],[\"🧲\",{\"1\":{\"64\":1}}],[\"🧰\",{\"1\":{\"64\":1}}],[\"🪝\",{\"1\":{\"64\":1}}],[\"🦯\",{\"1\":{\"64\":1}}],[\"🪛\",{\"1\":{\"64\":1}}],[\"🪚\",{\"1\":{\"64\":1}}],[\"🪃\",{\"1\":{\"64\":1}}],[\"🪓\",{\"1\":{\"64\":1}}],[\"🧾\",{\"1\":{\"64\":1}}],[\"🪙\",{\"1\":{\"64\":1}}],[\"🪔\",{\"1\":{\"64\":1}}],[\"🧮\",{\"1\":{\"64\":1}}],[\"🪫\",{\"1\":{\"64\":1}}],[\"🪈\",{\"1\":{\"64\":1}}],[\"🪇\",{\"1\":{\"64\":1}}],[\"🪘\",{\"1\":{\"64\":1}}],[\"🥁\",{\"1\":{\"64\":1}}],[\"🪕\",{\"1\":{\"64\":1}}],[\"🪗\",{\"1\":{\"64\":1}}],[\"🪖\",{\"1\":{\"64\":1}}],[\"🧢\",{\"1\":{\"64\":1}}],[\"🪮\",{\"1\":{\"64\":1}}],[\"🩰\",{\"1\":{\"64\":1}}],[\"🥿\",{\"1\":{\"64\":1}}],[\"🥾\",{\"1\":{\"64\":1}}],[\"🩴\",{\"1\":{\"64\":1}}],[\"🪭\",{\"1\":{\"64\":1}}],[\"🩳\",{\"1\":{\"64\":1}}],[\"🩲\",{\"1\":{\"64\":1}}],[\"🩱\",{\"1\":{\"64\":1}}],[\"🥻\",{\"1\":{\"64\":1}}],[\"🧦\",{\"1\":{\"64\":1}}],[\"🧥\",{\"1\":{\"64\":1}}],[\"🧤\",{\"1\":{\"64\":1}}],[\"🧣\",{\"1\":{\"64\":1}}],[\"🦺\",{\"1\":{\"64\":1}}],[\"🥼\",{\"1\":{\"64\":1}}],[\"🥽\",{\"1\":{\"64\":1}}],[\"🪢\",{\"1\":{\"64\":1}}],[\"🧶\",{\"1\":{\"64\":1}}],[\"🪡\",{\"1\":{\"64\":1}}],[\"🧵\",{\"1\":{\"64\":1}}],[\"🪆\",{\"1\":{\"64\":1}}],[\"🪩\",{\"1\":{\"64\":1}}],[\"🪅\",{\"1\":{\"64\":1}}],[\"🧸\",{\"1\":{\"64\":1}}],[\"🧩\",{\"1\":{\"64\":1}}],[\"🪄\",{\"1\":{\"64\":1}}],[\"🪁\",{\"1\":{\"64\":1}}],[\"🪀\",{\"1\":{\"64\":1}}],[\"🥌\",{\"1\":{\"64\":1}}],[\"🤿\",{\"1\":{\"64\":1}}],[\"🥅\",{\"1\":{\"64\":1}}],[\"🥋\",{\"1\":{\"64\":1}}],[\"🥊\",{\"1\":{\"64\":1}}],[\"🥍\",{\"1\":{\"64\":1}}],[\"🥏\",{\"1\":{\"64\":1}}],[\"🥎\",{\"1\":{\"64\":1}}],[\"🥉\",{\"1\":{\"64\":1}}],[\"🥈\",{\"1\":{\"64\":1}}],[\"🥇\",{\"1\":{\"64\":1}}],[\"🧧\",{\"1\":{\"64\":1}}],[\"🧨\",{\"1\":{\"64\":1}}],[\"🪐\",{\"1\":{\"64\":1}}],[\"🧳\",{\"1\":{\"64\":1}}],[\"🪂\",{\"1\":{\"64\":1}}],[\"🦼\",{\"1\":{\"64\":1}}],[\"🦽\",{\"1\":{\"64\":1}}],[\"🪵\",{\"1\":{\"64\":1}}],[\"🪨\",{\"1\":{\"64\":1}}],[\"🧱\",{\"1\":{\"64\":1}}],[\"🧭\",{\"1\":{\"64\":1}}],[\"🫙\",{\"1\":{\"64\":1}}],[\"🥄\",{\"1\":{\"64\":1}}],[\"🥢\",{\"1\":{\"64\":1}}],[\"🧊\",{\"1\":{\"64\":1}}],[\"🧉\",{\"1\":{\"64\":1}}],[\"🧃\",{\"1\":{\"64\":1}}],[\"🧋\",{\"1\":{\"64\":1}}],[\"🥤\",{\"1\":{\"64\":1}}],[\"🫗\",{\"1\":{\"64\":1}}],[\"🥃\",{\"1\":{\"64\":1}}],[\"🥂\",{\"1\":{\"64\":1}}],[\"🫖\",{\"1\":{\"64\":1}}],[\"🥛\",{\"1\":{\"64\":1}}],[\"🥧\",{\"1\":{\"64\":1}}],[\"🧁\",{\"1\":{\"64\":1}}],[\"🦪\",{\"1\":{\"64\":1}}],[\"🦑\",{\"1\":{\"64\":1}}],[\"🦐\",{\"1\":{\"64\":1}}],[\"🦞\",{\"1\":{\"64\":1}}],[\"🦀\",{\"1\":{\"64\":1}}],[\"🥡\",{\"1\":{\"64\":1}}],[\"🥠\",{\"1\":{\"64\":1}}],[\"🥟\",{\"1\":{\"64\":1}}],[\"🥮\",{\"1\":{\"64\":1}}],[\"🥫\",{\"1\":{\"64\":1}}],[\"🧂\",{\"1\":{\"64\":1}}],[\"🧈\",{\"1\":{\"64\":1}}],[\"🥗\",{\"1\":{\"64\":1}}],[\"🥣\",{\"1\":{\"64\":1}}],[\"🫕\",{\"1\":{\"64\":1}}],[\"🥘\",{\"1\":{\"64\":1}}],[\"🥚\",{\"1\":{\"64\":1}}],[\"🧆\",{\"1\":{\"64\":1}}],[\"🥙\",{\"1\":{\"64\":1}}],[\"🫔\",{\"1\":{\"64\":1}}],[\"🥪\",{\"1\":{\"64\":1}}],[\"🥓\",{\"1\":{\"64\":1}}],[\"🥩\",{\"1\":{\"64\":1}}],[\"🧀\",{\"1\":{\"64\":1}}],[\"🧇\",{\"1\":{\"64\":1}}],[\"🥞\",{\"1\":{\"64\":1}}],[\"🥯\",{\"1\":{\"64\":1}}],[\"🥨\",{\"1\":{\"64\":1}}],[\"🫓\",{\"1\":{\"64\":1}}],[\"🥖\",{\"1\":{\"64\":1}}],[\"🥐\",{\"1\":{\"64\":1}}],[\"🫛\",{\"1\":{\"64\":1}}],[\"🫚\",{\"1\":{\"64\":1}}],[\"🫘\",{\"1\":{\"64\":1}}],[\"🥜\",{\"1\":{\"64\":1}}],[\"🧅\",{\"1\":{\"64\":1}}],[\"🧄\",{\"1\":{\"64\":1}}],[\"🥦\",{\"1\":{\"64\":1}}],[\"🥬\",{\"1\":{\"64\":1}}],[\"🥒\",{\"1\":{\"64\":1}}],[\"🫑\",{\"1\":{\"64\":1}}],[\"🥕\",{\"1\":{\"64\":1}}],[\"🥔\",{\"1\":{\"64\":1}}],[\"🥑\",{\"1\":{\"64\":1}}],[\"🥥\",{\"1\":{\"64\":1}}],[\"🫒\",{\"1\":{\"64\":1}}],[\"🥝\",{\"1\":{\"64\":1}}],[\"🫐\",{\"1\":{\"64\":1}}],[\"🥭\",{\"1\":{\"64\":1}}],[\"🪺\",{\"1\":{\"64\":1}}],[\"🪹\",{\"1\":{\"64\":1}}],[\"🪴\",{\"1\":{\"64\":1}}],[\"🪻\",{\"1\":{\"64\":1}}],[\"🥀\",{\"1\":{\"64\":1}}],[\"🪷\",{\"1\":{\"64\":1}}],[\"🦠\",{\"1\":{\"64\":1}}],[\"🪱\",{\"1\":{\"64\":1}}],[\"🪰\",{\"1\":{\"64\":1}}],[\"🦟\",{\"1\":{\"64\":1}}],[\"🦂\",{\"1\":{\"64\":1}}],[\"🪳\",{\"1\":{\"64\":1}}],[\"🦗\",{\"1\":{\"64\":1}}],[\"🪲\",{\"1\":{\"64\":1}}],[\"🦋\",{\"1\":{\"64\":1}}],[\"🪼\",{\"1\":{\"64\":1}}],[\"🪸\",{\"1\":{\"64\":1}}],[\"🦈\",{\"1\":{\"64\":1}}],[\"🦭\",{\"1\":{\"64\":1}}],[\"🦖\",{\"1\":{\"64\":1}}],[\"🦕\",{\"1\":{\"64\":1}}],[\"🦎\",{\"1\":{\"64\":1}}],[\"🪿\",{\"1\":{\"64\":1}}],[\"🪽\",{\"1\":{\"64\":1}}],[\"🦜\",{\"1\":{\"64\":1}}],[\"🦚\",{\"1\":{\"64\":1}}],[\"🦩\",{\"1\":{\"64\":1}}],[\"🪶\",{\"1\":{\"64\":1}}],[\"🦤\",{\"1\":{\"64\":1}}],[\"🦉\",{\"1\":{\"64\":1}}],[\"🦢\",{\"1\":{\"64\":1}}],[\"🦆\",{\"1\":{\"64\":1}}],[\"🦅\",{\"1\":{\"64\":1}}],[\"🦃\",{\"1\":{\"64\":1}}],[\"🦡\",{\"1\":{\"64\":1}}],[\"🦘\",{\"1\":{\"64\":1}}],[\"🦨\",{\"1\":{\"64\":1}}],[\"🦦\",{\"1\":{\"64\":1}}],[\"🦥\",{\"1\":{\"64\":1}}],[\"🦇\",{\"1\":{\"64\":1}}],[\"🦔\",{\"1\":{\"64\":1}}],[\"🦫\",{\"1\":{\"64\":1}}],[\"🦛\",{\"1\":{\"64\":1}}],[\"🦏\",{\"1\":{\"64\":1}}],[\"🦣\",{\"1\":{\"64\":1}}],[\"🦒\",{\"1\":{\"64\":1}}],[\"🦙\",{\"1\":{\"64\":1}}],[\"🦬\",{\"1\":{\"64\":1}}],[\"🦌\",{\"1\":{\"64\":1}}],[\"🦓\",{\"1\":{\"64\":1}}],[\"🦄\",{\"1\":{\"64\":1}}],[\"🫏\",{\"1\":{\"64\":1}}],[\"🫎\",{\"1\":{\"64\":1}}],[\"🦁\",{\"1\":{\"64\":1}}],[\"🦝\",{\"1\":{\"64\":1}}],[\"🦊\",{\"1\":{\"64\":1}}],[\"🦮\",{\"1\":{\"64\":1}}],[\"🦧\",{\"1\":{\"64\":1}}],[\"🦍\",{\"1\":{\"64\":1}}],[\"🫂\",{\"1\":{\"64\":1}}],[\"🧘‍♀️\",{\"1\":{\"64\":1}}],[\"🧘‍♂️\",{\"1\":{\"64\":1}}],[\"🧘\",{\"1\":{\"64\":1}}],[\"🤹‍♀️\",{\"1\":{\"64\":1}}],[\"🤹‍♂️\",{\"1\":{\"64\":1}}],[\"🤹\",{\"1\":{\"64\":1}}],[\"🤾‍♀️\",{\"1\":{\"64\":1}}],[\"🤾‍♂️\",{\"1\":{\"64\":1}}],[\"🤾\",{\"1\":{\"64\":1}}],[\"🤽‍♀️\",{\"1\":{\"64\":1}}],[\"🤽‍♂️\",{\"1\":{\"64\":1}}],[\"🤽\",{\"1\":{\"64\":1}}],[\"🤼‍♀️\",{\"1\":{\"64\":1}}],[\"🤼‍♂️\",{\"1\":{\"64\":1}}],[\"🤼\",{\"1\":{\"64\":1}}],[\"🤸‍♀️\",{\"1\":{\"64\":1}}],[\"🤸‍♂️\",{\"1\":{\"64\":1}}],[\"🤸\",{\"1\":{\"64\":1}}],[\"🤺\",{\"1\":{\"64\":1}}],[\"🧗‍♀️\",{\"1\":{\"64\":1}}],[\"🧗‍♂️\",{\"1\":{\"64\":1}}],[\"🧗\",{\"1\":{\"64\":1}}],[\"🧖‍♀️\",{\"1\":{\"64\":1}}],[\"🧖‍♂️\",{\"1\":{\"64\":1}}],[\"🧖\",{\"1\":{\"64\":1}}],[\"🧎‍♀️\",{\"1\":{\"64\":1}}],[\"🧎‍♂️\",{\"1\":{\"64\":1}}],[\"🧎\",{\"1\":{\"64\":1}}],[\"🧍‍♀️\",{\"1\":{\"64\":1}}],[\"🧍‍♂️\",{\"1\":{\"64\":1}}],[\"🧍\",{\"1\":{\"64\":1}}],[\"🧌\",{\"1\":{\"64\":1}}],[\"🧟‍♀️\",{\"1\":{\"64\":1}}],[\"🧟‍♂️\",{\"1\":{\"64\":1}}],[\"🧟\",{\"1\":{\"64\":1}}],[\"🧞‍♀️\",{\"1\":{\"64\":1}}],[\"🧞‍♂️\",{\"1\":{\"64\":1}}],[\"🧞\",{\"1\":{\"64\":1}}],[\"🧝‍♀️\",{\"1\":{\"64\":1}}],[\"🧝‍♂️\",{\"1\":{\"64\":1}}],[\"🧝\",{\"1\":{\"64\":1}}],[\"🧜‍♀️\",{\"1\":{\"64\":1}}],[\"🧜‍♂️\",{\"1\":{\"64\":1}}],[\"🧜\",{\"1\":{\"64\":1}}],[\"🧛‍♀️\",{\"1\":{\"64\":1}}],[\"🧛‍♂️\",{\"1\":{\"64\":1}}],[\"🧛\",{\"1\":{\"64\":1}}],[\"🧚‍♀️\",{\"1\":{\"64\":1}}],[\"🧚‍♂️\",{\"1\":{\"64\":1}}],[\"🧚\",{\"1\":{\"64\":1}}],[\"🧙‍♀️\",{\"1\":{\"64\":1}}],[\"🧙‍♂️\",{\"1\":{\"64\":1}}],[\"🧙\",{\"1\":{\"64\":1}}],[\"🦹‍♀️\",{\"1\":{\"64\":1}}],[\"🦹‍♂️\",{\"1\":{\"64\":1}}],[\"🦹\",{\"1\":{\"64\":1}}],[\"🦸‍♀️\",{\"1\":{\"64\":1}}],[\"🦸‍♂️\",{\"1\":{\"64\":1}}],[\"🦸\",{\"1\":{\"64\":1}}],[\"🤶\",{\"1\":{\"64\":1}}],[\"🤱\",{\"1\":{\"64\":1}}],[\"🫄\",{\"1\":{\"64\":1}}],[\"🫃\",{\"1\":{\"64\":1}}],[\"🤰\",{\"1\":{\"64\":1}}],[\"🤵‍♀️\",{\"1\":{\"64\":1}}],[\"🤵‍♂️\",{\"1\":{\"64\":1}}],[\"🤵\",{\"1\":{\"64\":1}}],[\"🧕\",{\"1\":{\"64\":1}}],[\"🤴\",{\"1\":{\"64\":1}}],[\"🫅\",{\"1\":{\"64\":1}}],[\"🥷\",{\"1\":{\"64\":1}}],[\"🤷‍♀️\",{\"1\":{\"64\":1}}],[\"🤷‍♂️\",{\"1\":{\"64\":1}}],[\"🤷\",{\"1\":{\"64\":1}}],[\"🤦‍♀️\",{\"1\":{\"64\":1}}],[\"🤦‍♂️\",{\"1\":{\"64\":1}}],[\"🤦\",{\"1\":{\"64\":1}}],[\"🧏‍♀️\",{\"1\":{\"64\":1}}],[\"🧏‍♂️\",{\"1\":{\"64\":1}}],[\"🧏\",{\"1\":{\"64\":1}}],[\"🧓\",{\"1\":{\"64\":1}}],[\"🧔‍♀️\",{\"1\":{\"64\":1}}],[\"🧔‍♂️\",{\"1\":{\"64\":1}}],[\"🧔\",{\"1\":{\"64\":1}}],[\"🧑‍✈️\",{\"1\":{\"64\":1}}],[\"🧑‍🚒\",{\"1\":{\"64\":1}}],[\"🧑‍🚀\",{\"1\":{\"64\":1}}],[\"🧑‍💻\",{\"1\":{\"64\":1}}],[\"🧑‍🔬\",{\"1\":{\"64\":1}}],[\"🧑‍💼\",{\"1\":{\"64\":1}}],[\"🧑‍🔧\",{\"1\":{\"64\":1}}],[\"🧑‍⚖️\",{\"1\":{\"64\":1}}],[\"🧑‍🎄\",{\"1\":{\"64\":1}}],[\"🧑‍🍼\",{\"1\":{\"64\":1}}],[\"🧑‍🎨\",{\"1\":{\"64\":1}}],[\"🧑‍🎤\",{\"1\":{\"64\":1}}],[\"🧑‍🏭\",{\"1\":{\"64\":1}}],[\"🧑‍🍳\",{\"1\":{\"64\":1}}],[\"🧑‍🌾\",{\"1\":{\"64\":1}}],[\"🧑‍🏫\",{\"1\":{\"64\":1}}],[\"🧑‍🎓\",{\"1\":{\"64\":1}}],[\"🧑‍⚕️\",{\"1\":{\"64\":1}}],[\"🧑‍🤝‍🧑\",{\"1\":{\"64\":1}}],[\"🧑‍🦽\",{\"1\":{\"64\":1}}],[\"🧑‍🦼\",{\"1\":{\"64\":1}}],[\"🧑‍🦯\",{\"1\":{\"64\":1}}],[\"🧑‍🦲\",{\"1\":{\"64\":1}}],[\"🧑‍🦳\",{\"1\":{\"64\":1}}],[\"🧑‍🦱\",{\"1\":{\"64\":1}}],[\"🧑‍🦰\",{\"1\":{\"64\":1}}],[\"🧑\",{\"1\":{\"64\":1}}],[\"🧒\",{\"1\":{\"64\":1}}],[\"🫦\",{\"1\":{\"64\":1}}],[\"🦴\",{\"1\":{\"64\":1}}],[\"🦷\",{\"1\":{\"64\":1}}],[\"🫁\",{\"1\":{\"64\":1}}],[\"🫀\",{\"1\":{\"64\":1}}],[\"🧠\",{\"1\":{\"64\":1}}],[\"🦻\",{\"1\":{\"64\":1}}],[\"🦶\",{\"1\":{\"64\":1}}],[\"🦵\",{\"1\":{\"64\":1}}],[\"🦿\",{\"1\":{\"64\":1}}],[\"🦾\",{\"1\":{\"64\":1}}],[\"🤳\",{\"1\":{\"64\":1}}],[\"🤝\",{\"1\":{\"64\":1}}],[\"🤲\",{\"1\":{\"64\":1}}],[\"🫶\",{\"1\":{\"64\":1}}],[\"🤜\",{\"1\":{\"64\":1}}],[\"🤛\",{\"1\":{\"64\":1}}],[\"🫵\",{\"1\":{\"64\":1}}],[\"🤙\",{\"1\":{\"64\":1}}],[\"🤘\",{\"1\":{\"64\":1}}],[\"🤟\",{\"1\":{\"64\":1}}],[\"🫰\",{\"1\":{\"64\":1}}],[\"🤞\",{\"1\":{\"64\":1}}],[\"🤏\",{\"1\":{\"64\":1}}],[\"🤌\",{\"1\":{\"64\":1}}],[\"🫸\",{\"1\":{\"64\":1}}],[\"🫷\",{\"1\":{\"64\":1}}],[\"🫴\",{\"1\":{\"64\":1}}],[\"🫳\",{\"1\":{\"64\":1}}],[\"🫲\",{\"1\":{\"64\":1}}],[\"🫱\",{\"1\":{\"64\":1}}],[\"🤚\",{\"1\":{\"64\":1}}],[\"🤍\",{\"1\":{\"64\":1}}],[\"🩶\",{\"1\":{\"64\":1}}],[\"🤎\",{\"1\":{\"64\":1}}],[\"🩵\",{\"1\":{\"64\":1}}],[\"🧡\",{\"1\":{\"64\":1}}],[\"🩷\",{\"1\":{\"64\":1}}],[\"🤖\",{\"1\":{\"64\":1}}],[\"🤡\",{\"1\":{\"64\":1}}],[\"🤬\",{\"1\":{\"64\":1}}],[\"🥱\",{\"1\":{\"64\":1}}],[\"🥹\",{\"1\":{\"64\":1}}],[\"🥺\",{\"1\":{\"64\":1}}],[\"🫤\",{\"1\":{\"64\":1}}],[\"🧐\",{\"1\":{\"64\":1}}],[\"🤓\",{\"1\":{\"64\":1}}],[\"🥸\",{\"1\":{\"64\":1}}],[\"🥳\",{\"1\":{\"64\":1}}],[\"🤠\",{\"1\":{\"64\":1}}],[\"🤯\",{\"1\":{\"64\":1}}],[\"🥴\",{\"1\":{\"64\":1}}],[\"🥶\",{\"1\":{\"64\":1}}],[\"🥵\",{\"1\":{\"64\":1}}],[\"🤧\",{\"1\":{\"64\":1}}],[\"🤮\",{\"1\":{\"64\":1}}],[\"🤢\",{\"1\":{\"64\":1}}],[\"🤕\",{\"1\":{\"64\":1}}],[\"🤒\",{\"1\":{\"64\":1}}],[\"🤤\",{\"1\":{\"64\":1}}],[\"🫨\",{\"1\":{\"64\":1}}],[\"🤥\",{\"1\":{\"64\":1}}],[\"🫥\",{\"1\":{\"64\":1}}],[\"🤨\",{\"1\":{\"64\":1}}],[\"🤐\",{\"1\":{\"64\":1}}],[\"🫡\",{\"1\":{\"64\":1}}],[\"🤔\",{\"1\":{\"64\":1}}],[\"🤫\",{\"1\":{\"64\":1}}],[\"🫣\",{\"1\":{\"64\":1}}],[\"🫢\",{\"1\":{\"64\":1}}],[\"🤭\",{\"1\":{\"64\":1}}],[\"🤗\",{\"1\":{\"64\":1}}],[\"🤑\",{\"1\":{\"64\":1}}],[\"🤪\",{\"1\":{\"64\":1}}],[\"🥲\",{\"1\":{\"64\":1}}],[\"🤩\",{\"1\":{\"64\":1}}],[\"🥰\",{\"1\":{\"64\":1}}],[\"🫠\",{\"1\":{\"64\":1}}],[\"🤣\",{\"1\":{\"64\":1}}],[\"gzip\",{\"1\":{\"558\":1}}],[\"gmt\",{\"1\":{\"556\":2}}],[\"g1\",{\"0\":{\"404\":1,\"405\":1},\"1\":{\"397\":1,\"401\":1,\"404\":4,\"405\":1,\"406\":1,\"407\":1}}],[\"gceasy\",{\"1\":{\"418\":1}}],[\"gccause\",{\"1\":{\"418\":1}}],[\"gcutil\",{\"1\":{\"417\":1,\"418\":1}}],[\"gc方法\",{\"1\":{\"417\":1}}],[\"gctimeratio=n\",{\"1\":{\"412\":1}}],[\"gcviewer\",{\"1\":{\"411\":1,\"418\":1}}],[\"gchisto\",{\"1\":{\"411\":1}}],[\"gc后升入老年代的对象总和的平均大小\",{\"1\":{\"399\":1}}],[\"gc分代年龄\",{\"1\":{\"327\":1}}],[\"gc\",{\"0\":{\"391\":1,\"397\":6,\"398\":2,\"399\":1,\"416\":1,\"417\":1},\"1\":{\"256\":1,\"379\":1,\"382\":1,\"385\":1,\"389\":3,\"390\":2,\"391\":1,\"393\":1,\"397\":7,\"398\":1,\"399\":14,\"400\":1,\"403\":2,\"404\":2,\"411\":2,\"412\":1,\"415\":3,\"416\":3,\"417\":3,\"418\":9}}],[\"ghana\",{\"1\":{\"64\":1}}],[\"ghost\",{\"1\":{\"64\":1}}],[\"gb\",{\"1\":{\"64\":1}}],[\"gateway的核心组件\",{\"1\":{\"865\":1}}],[\"gateway的具体工作流程\",{\"1\":{\"865\":1}}],[\"gateway的基本构建块\",{\"1\":{\"865\":1}}],[\"gateway提供了多个内置的过滤器\",{\"1\":{\"865\":1}}],[\"gateway提供了多种内置的断言\",{\"1\":{\"865\":1}}],[\"gateway里\",{\"1\":{\"865\":1}}],[\"gateway核心概念\",{\"0\":{\"865\":1}}],[\"gateway还支持与spring\",{\"1\":{\"864\":1}}],[\"gateway是spring\",{\"1\":{\"864\":1}}],[\"gateway等等\",{\"1\":{\"851\":1}}],[\"gateway\",{\"1\":{\"831\":2,\"832\":2,\"863\":1,\"864\":1,\"865\":2}}],[\"gap\",{\"1\":{\"513\":6}}],[\"gambia\",{\"1\":{\"64\":1}}],[\"game\",{\"1\":{\"64\":3}}],[\"gabon\",{\"1\":{\"64\":1}}],[\"garbage\",{\"1\":{\"379\":1,\"401\":2,\"404\":1,\"405\":1}}],[\"garcia\",{\"1\":{\"64\":1}}],[\"garden\",{\"1\":{\"64\":1}}],[\"garlic\",{\"1\":{\"64\":1}}],[\"global\",{\"1\":{\"871\":1,\"872\":1}}],[\"globalsession\",{\"1\":{\"784\":1,\"797\":1}}],[\"globe\",{\"1\":{\"64\":1}}],[\"gloves\",{\"1\":{\"64\":1}}],[\"glove\",{\"1\":{\"64\":1}}],[\"glasses\",{\"1\":{\"64\":1}}],[\"glass\",{\"1\":{\"64\":3}}],[\"guyana\",{\"1\":{\"64\":1}}],[\"guernsey\",{\"1\":{\"64\":1}}],[\"guinea\",{\"1\":{\"64\":4}}],[\"guiana\",{\"1\":{\"64\":1}}],[\"guitar\",{\"1\":{\"64\":1}}],[\"guide\",{\"1\":{\"64\":1}}],[\"gun\",{\"1\":{\"64\":1}}],[\"guava\",{\"1\":{\"227\":2,\"291\":2}}],[\"guam\",{\"1\":{\"64\":1}}],[\"guatemala\",{\"1\":{\"64\":1}}],[\"guadeloupe\",{\"1\":{\"64\":1}}],[\"gua\",{\"1\":{\"64\":1}}],[\"guardswoman\",{\"1\":{\"64\":1}}],[\"guardsman\",{\"1\":{\"64\":1}}],[\"guard\",{\"1\":{\"64\":1}}],[\"goto\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"goggles\",{\"1\":{\"64\":1}}],[\"golf\",{\"1\":{\"64\":1}}],[\"golfing\",{\"1\":{\"64\":3}}],[\"goal\",{\"1\":{\"64\":1}}],[\"goat\",{\"1\":{\"64\":1}}],[\"google\",{\"1\":{\"210\":1,\"291\":2}}],[\"goose\",{\"1\":{\"64\":1}}],[\"good\",{\"1\":{\"64\":3,\"788\":3}}],[\"gorilla\",{\"1\":{\"64\":1}}],[\"goblin\",{\"1\":{\"64\":1}}],[\"git\",{\"1\":{\"352\":1}}],[\"gitee\",{\"1\":{\"352\":1}}],[\"gitee操作\",{\"0\":{\"109\":1}}],[\"github\",{\"1\":{\"159\":2,\"186\":2,\"193\":2,\"198\":2,\"208\":2,\"222\":2,\"225\":2,\"227\":2,\"236\":2,\"245\":2,\"261\":2,\"267\":2,\"270\":2,\"294\":2,\"306\":2,\"315\":2,\"322\":2,\"343\":2,\"349\":2,\"373\":2,\"408\":2,\"419\":2,\"429\":2,\"446\":2,\"451\":2,\"454\":2,\"473\":2,\"477\":2,\"483\":2,\"493\":2,\"510\":2,\"516\":2,\"523\":2,\"534\":2,\"538\":2,\"544\":2,\"549\":2,\"566\":2,\"595\":2,\"600\":2,\"609\":2,\"617\":2,\"629\":2,\"633\":2,\"649\":2,\"658\":2,\"664\":2,\"674\":2,\"680\":2,\"699\":2,\"713\":2,\"720\":2,\"727\":2,\"734\":2,\"736\":2,\"751\":2,\"767\":2,\"778\":2,\"785\":2,\"802\":2,\"807\":2,\"813\":2,\"817\":2,\"824\":2,\"832\":2,\"838\":2,\"843\":2,\"851\":2,\"861\":2,\"865\":2,\"868\":2,\"874\":2,\"877\":2}}],[\"gibraltar\",{\"1\":{\"64\":1}}],[\"gibbous\",{\"1\":{\"64\":2}}],[\"ginger\",{\"1\":{\"64\":1}}],[\"giraffe\",{\"1\":{\"64\":1}}],[\"girl\",{\"1\":{\"64\":21}}],[\"gift\",{\"1\":{\"64\":2}}],[\"geo\",{\"1\":{\"668\":1}}],[\"georgia\",{\"1\":{\"64\":2}}],[\"getuserbyid\",{\"1\":{\"859\":2}}],[\"getendpointdata\",{\"1\":{\"847\":1}}],[\"getenvironment\",{\"1\":{\"448\":1}}],[\"getexclusions\",{\"1\":{\"820\":1}}],[\"getattributes\",{\"1\":{\"820\":1}}],[\"getautoconfigurationentry\",{\"1\":{\"820\":1}}],[\"getargs\",{\"1\":{\"805\":1}}],[\"getandincrement\",{\"1\":{\"341\":1}}],[\"getandaddint\",{\"1\":{\"341\":2}}],[\"getandadd\",{\"1\":{\"312\":1}}],[\"getlogger\",{\"1\":{\"805\":1}}],[\"getwrappedinstance\",{\"1\":{\"802\":2}}],[\"getfactorydaoimpl\",{\"1\":{\"795\":2}}],[\"getno\",{\"1\":{\"793\":1}}],[\"getname\",{\"1\":{\"442\":2,\"450\":1,\"793\":1,\"805\":1,\"821\":1}}],[\"getproxyinstance\",{\"1\":{\"806\":4}}],[\"getpropertyvalues\",{\"1\":{\"802\":1}}],[\"getproperty\",{\"1\":{\"788\":1}}],[\"getpullrequestholdservice\",{\"1\":{\"778\":1}}],[\"getparameterobject\",{\"1\":{\"448\":1}}],[\"getmodifiers\",{\"1\":{\"813\":1}}],[\"getmethod\",{\"1\":{\"805\":1}}],[\"getmessage\",{\"1\":{\"790\":1,\"791\":1}}],[\"getmessagestore\",{\"1\":{\"778\":1}}],[\"getmapping\",{\"1\":{\"784\":1,\"805\":1,\"813\":1,\"817\":1,\"847\":1}}],[\"getmapper\",{\"1\":{\"435\":1,\"445\":1,\"450\":2}}],[\"getmap\",{\"1\":{\"310\":1}}],[\"getqueueid\",{\"1\":{\"778\":1}}],[\"getqueueoffset\",{\"1\":{\"778\":1}}],[\"getdeclaringtypename\",{\"1\":{\"805\":1}}],[\"getdeclaringclass\",{\"1\":{\"450\":1}}],[\"getdeclaredmethod\",{\"1\":{\"285\":1}}],[\"getdatasource\",{\"1\":{\"448\":1}}],[\"gettoken\",{\"1\":{\"849\":2}}],[\"gettopic\",{\"1\":{\"778\":1}}],[\"getting\",{\"1\":{\"450\":1}}],[\"gettransactionfactoryfromenvironment\",{\"1\":{\"448\":1}}],[\"getteachermap\",{\"1\":{\"441\":1}}],[\"getteacher\",{\"1\":{\"441\":1}}],[\"getsignature\",{\"1\":{\"805\":2}}],[\"getsingletonbean\",{\"1\":{\"788\":2}}],[\"getstaticfactorydaoimpl\",{\"1\":{\"795\":3}}],[\"getstatementlog\",{\"1\":{\"448\":1}}],[\"getservicename\",{\"1\":{\"778\":3}}],[\"getshortpollingtimemills\",{\"1\":{\"778\":2}}],[\"getsqlsessionfactory\",{\"1\":{\"445\":1}}],[\"getsystemclassloader\",{\"1\":{\"423\":1}}],[\"getinterfaces\",{\"1\":{\"806\":1}}],[\"getintvolatile\",{\"1\":{\"341\":1}}],[\"getid\",{\"1\":{\"443\":1,\"795\":1}}],[\"getbeanpostprocessorcache\",{\"1\":{\"802\":1}}],[\"getbeanname\",{\"1\":{\"788\":1}}],[\"getbeanclass\",{\"1\":{\"788\":1}}],[\"getbean\",{\"1\":{\"788\":3,\"790\":2,\"791\":1,\"793\":2}}],[\"getbrokerconfig\",{\"1\":{\"778\":4}}],[\"getbytes\",{\"1\":{\"763\":1}}],[\"getb\",{\"1\":{\"442\":3}}],[\"getorder\",{\"1\":{\"437\":2}}],[\"getremoteaddr\",{\"1\":{\"805\":1}}],[\"getrequesturl\",{\"1\":{\"805\":1}}],[\"getrequest\",{\"1\":{\"805\":1}}],[\"getrequestattributes\",{\"1\":{\"805\":1}}],[\"getresource\",{\"1\":{\"788\":2}}],[\"getresourceasstream\",{\"1\":{\"435\":1,\"788\":1}}],[\"getreturntype\",{\"1\":{\"450\":1}}],[\"getruntime\",{\"1\":{\"359\":1}}],[\"getkey\",{\"1\":{\"285\":1}}],[\"getcandidateconfigurations\",{\"1\":{\"820\":1}}],[\"getconfigurationclassfilter\",{\"1\":{\"820\":1}}],[\"getconfiguration\",{\"1\":{\"448\":1}}],[\"getconnection\",{\"1\":{\"389\":1}}],[\"getcount\",{\"1\":{\"345\":1}}],[\"getclassloader\",{\"1\":{\"450\":1,\"806\":1}}],[\"getclass\",{\"1\":{\"272\":3,\"285\":1,\"450\":1,\"802\":1,\"806\":3}}],[\"getchildall\",{\"1\":{\"72\":1}}],[\"get很简单\",{\"1\":{\"181\":1}}],[\"get查询\",{\"1\":{\"181\":1}}],[\"get也很简单\",{\"1\":{\"180\":1}}],[\"get流程\",{\"1\":{\"180\":1}}],[\"get\",{\"0\":{\"553\":1,\"554\":1},\"1\":{\"154\":3,\"177\":3,\"293\":1,\"300\":1,\"308\":1,\"314\":1,\"315\":1,\"357\":1,\"373\":1,\"450\":1,\"552\":1,\"553\":13,\"554\":2,\"556\":2,\"718\":1,\"725\":1,\"788\":2}}],[\"gear\",{\"1\":{\"64\":1}}],[\"gemini\",{\"1\":{\"64\":1}}],[\"gem\",{\"1\":{\"64\":1}}],[\"gender\",{\"1\":{\"445\":6}}],[\"general\",{\"1\":{\"479\":1}}],[\"generation\",{\"1\":{\"394\":2}}],[\"generator<string>\",{\"1\":{\"285\":1}}],[\"generator<t>\",{\"1\":{\"285\":1}}],[\"generatorimpl<t>\",{\"1\":{\"285\":1}}],[\"generated\",{\"1\":{\"64\":1,\"357\":1}}],[\"genericinteger=new\",{\"1\":{\"285\":1}}],[\"generic<integer>\",{\"1\":{\"285\":2}}],[\"generic<t>\",{\"1\":{\"285\":1}}],[\"generic\",{\"1\":{\"285\":1}}],[\"generics\",{\"1\":{\"285\":1}}],[\"genie\",{\"1\":{\"64\":3}}],[\"gesture\",{\"1\":{\"64\":1}}],[\"graylog\",{\"1\":{\"877\":1}}],[\"grafana\",{\"1\":{\"876\":3}}],[\"grade\",{\"1\":{\"859\":1}}],[\"grapes\",{\"1\":{\"64\":1}}],[\"grpc\",{\"1\":{\"832\":1}}],[\"groper\",{\"1\":{\"609\":1}}],[\"groupid>\",{\"1\":{\"805\":1,\"821\":3}}],[\"group2消费\",{\"1\":{\"744\":1}}],[\"group1消费过\",{\"1\":{\"744\":1}}],[\"group\",{\"1\":{\"470\":2,\"483\":1,\"489\":1,\"534\":1,\"744\":2,\"762\":1,\"766\":3}}],[\"ground\",{\"1\":{\"64\":1}}],[\"grow\",{\"1\":{\"25\":1}}],[\"grenadines\",{\"1\":{\"64\":1}}],[\"grenada\",{\"1\":{\"64\":1}}],[\"greece\",{\"1\":{\"64\":1}}],[\"greenland\",{\"1\":{\"64\":1}}],[\"green\",{\"1\":{\"25\":2,\"64\":7}}],[\"grey\",{\"1\":{\"64\":3}}],[\"grimacing\",{\"1\":{\"64\":1}}],[\"grin\",{\"1\":{\"64\":1}}],[\"grinning\",{\"1\":{\"64\":1}}],[\"彭世瑜的博客\",{\"1\":{\"59\":1}}],[\"友链\",{\"0\":{\"59\":1,\"908\":1},\"2\":{\"61\":1}}],[\"nc\",{\"1\":{\"726\":1}}],[\"n的消息发布\",{\"1\":{\"722\":1}}],[\"n+1\",{\"1\":{\"481\":1,\"730\":1}}],[\"n20\",{\"1\":{\"417\":1}}],[\"n=i\",{\"1\":{\"240\":1}}],[\"nxt\",{\"1\":{\"583\":2}}],[\"nxt会右移\",{\"1\":{\"582\":1}}],[\"nx\",{\"1\":{\"198\":1,\"727\":1}}],[\"n1和n2的数据要求值一样的\",{\"1\":{\"191\":1}}],[\"n1和n2分别有不同的分区存储d1和d2\",{\"1\":{\"191\":1}}],[\"nthreads\",{\"1\":{\"363\":3}}],[\"nt\",{\"1\":{\"181\":2}}],[\"n为table的长度\",{\"1\":{\"174\":1}}],[\"n\",{\"1\":{\"154\":3,\"162\":1,\"164\":3,\"168\":1,\"169\":14,\"175\":1,\"181\":4,\"414\":1,\"418\":2,\"458\":2,\"475\":1,\"481\":1,\"664\":1,\"676\":1,\"693\":1,\"718\":2,\"729\":1,\"730\":2}}],[\"num\",{\"1\":{\"689\":1,\"725\":4}}],[\"numeric\",{\"1\":{\"465\":1}}],[\"numric\",{\"1\":{\"465\":1}}],[\"numberformatexception\",{\"1\":{\"270\":1}}],[\"nullable\",{\"1\":{\"802\":1}}],[\"nullable=\",{\"1\":{\"444\":1}}],[\"null的槽位才会停止查找\",{\"1\":{\"313\":1}}],[\"nullpointerexception\",{\"1\":{\"241\":1}}],[\"null\",{\"1\":{\"87\":3,\"88\":4,\"89\":4,\"90\":5,\"91\":1,\"137\":1,\"140\":1,\"147\":1,\"162\":1,\"164\":2,\"166\":1,\"177\":1,\"181\":4,\"186\":2,\"241\":2,\"291\":1,\"293\":2,\"310\":2,\"314\":2,\"315\":2,\"325\":9,\"389\":3,\"392\":3,\"444\":12,\"448\":1,\"450\":3,\"463\":2,\"466\":1,\"469\":4,\"493\":4,\"495\":3,\"498\":2,\"778\":1,\"788\":2,\"802\":4,\"806\":2,\"813\":1,\"817\":1,\"879\":1}}],[\"nut\",{\"1\":{\"64\":1}}],[\"nid=0x731f\",{\"1\":{\"418\":1}}],[\"nid\",{\"1\":{\"418\":1}}],[\"nio等\",{\"1\":{\"713\":1}}],[\"nio\",{\"0\":{\"280\":1},\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"280\":7,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"niue\",{\"1\":{\"64\":1}}],[\"nicaragua\",{\"1\":{\"64\":1}}],[\"nigeria\",{\"1\":{\"64\":1}}],[\"niger\",{\"1\":{\"64\":1}}],[\"night\",{\"1\":{\"64\":2}}],[\"nine\",{\"1\":{\"64\":1}}],[\"ninja\",{\"1\":{\"64\":1}}],[\"nib\",{\"1\":{\"64\":1}}],[\"ng\",{\"1\":{\"64\":3}}],[\"naver\",{\"1\":{\"868\":1}}],[\"nat\",{\"1\":{\"605\":2}}],[\"native\",{\"1\":{\"258\":1,\"272\":11,\"379\":2,\"381\":1}}],[\"nations\",{\"1\":{\"64\":1}}],[\"national\",{\"1\":{\"64\":1}}],[\"nagle\",{\"0\":{\"584\":1},\"1\":{\"584\":7}}],[\"nanoseconds\",{\"1\":{\"354\":1,\"365\":1}}],[\"nanos\",{\"1\":{\"272\":3,\"302\":1,\"306\":1}}],[\"nanjing\",{\"1\":{\"89\":1}}],[\"naitive\",{\"1\":{\"272\":1}}],[\"nail\",{\"1\":{\"64\":1}}],[\"nacos等进行服务注册和发现\",{\"1\":{\"846\":1}}],[\"nacos客户端能够实时感知配置的变化\",{\"1\":{\"843\":1}}],[\"nacos在pull的基础上\",{\"1\":{\"843\":1}}],[\"nacos配置中心长轮询机制\",{\"0\":{\"843\":1}}],[\"nacos配置中心的原理了解吗\",{\"0\":{\"842\":1}}],[\"nacos默认使用内嵌数据库derby来存储配置信息\",{\"1\":{\"842\":1}}],[\"nacos既支持既支持ap\",{\"1\":{\"836\":1}}],[\"nacos的区别\",{\"0\":{\"836\":1}}],[\"nacos+dubbo\",{\"1\":{\"831\":1}}],[\"nacos\",{\"1\":{\"192\":1,\"831\":4,\"832\":2,\"835\":2,\"836\":1,\"841\":1,\"842\":4}}],[\"nacos中\",{\"1\":{\"192\":1}}],[\"nauru\",{\"1\":{\"64\":1}}],[\"nauseated\",{\"1\":{\"64\":1}}],[\"namibia\",{\"1\":{\"64\":1}}],[\"nameserver本身的实现非常轻量\",{\"1\":{\"770\":1}}],[\"nameserver因为是无状态\",{\"1\":{\"767\":1}}],[\"nameserver\",{\"0\":{\"748\":1},\"1\":{\"746\":1,\"747\":1,\"748\":7,\"749\":3,\"769\":1}}],[\"namespace\",{\"1\":{\"446\":1}}],[\"namespace=\",{\"1\":{\"445\":1}}],[\"name=张三\",{\"1\":{\"821\":1}}],[\"name=\",{\"1\":{\"440\":1,\"453\":1,\"509\":1,\"793\":4,\"795\":8}}],[\"name=name\",{\"1\":{\"251\":1}}],[\"name\",{\"1\":{\"64\":1,\"251\":1,\"257\":4,\"436\":6,\"441\":1,\"443\":1,\"444\":6,\"489\":3,\"490\":1,\"507\":1,\"508\":2,\"509\":10,\"510\":2,\"534\":1,\"547\":1,\"762\":1,\"784\":1,\"793\":6,\"805\":1,\"821\":1,\"847\":1}}],[\"nazar\",{\"1\":{\"64\":1}}],[\"now\",{\"1\":{\"778\":3}}],[\"noeviction\",{\"1\":{\"717\":1}}],[\"node4\",{\"1\":{\"695\":1}}],[\"node3\",{\"1\":{\"695\":1}}],[\"node2\",{\"1\":{\"695\":2}}],[\"node1\",{\"1\":{\"695\":2}}],[\"node<\",{\"1\":{\"181\":1}}],[\"node<k\",{\"1\":{\"181\":11}}],[\"node数组初始化\",{\"1\":{\"181\":1}}],[\"node\",{\"1\":{\"74\":1,\"87\":8,\"88\":9,\"89\":8,\"90\":9,\"183\":1,\"331\":1,\"694\":4,\"698\":1,\"868\":1}}],[\"node展开后运行\",{\"0\":{\"74\":1}}],[\"norway\",{\"1\":{\"64\":1}}],[\"norfolk\",{\"1\":{\"64\":1}}],[\"northern\",{\"1\":{\"64\":1}}],[\"north\",{\"1\":{\"64\":1}}],[\"nonfairsync\",{\"1\":{\"332\":2,\"333\":4}}],[\"non\",{\"1\":{\"64\":1,\"280\":1}}],[\"nonestartswithz\",{\"1\":{\"294\":1}}],[\"nonestartswithz=\",{\"1\":{\"294\":1}}],[\"nonematch\",{\"1\":{\"294\":1}}],[\"none\",{\"1\":{\"31\":1}}],[\"notification\",{\"1\":{\"687\":1}}],[\"notifyme\",{\"1\":{\"778\":1}}],[\"notifyall\",{\"1\":{\"272\":1,\"302\":3,\"330\":1}}],[\"notify\",{\"1\":{\"272\":2,\"302\":4,\"306\":1}}],[\"not\",{\"1\":{\"64\":1,\"198\":1,\"450\":1,\"463\":1,\"464\":6,\"466\":1,\"498\":2,\"727\":1,\"778\":1,\"813\":1}}],[\"notepad\",{\"1\":{\"64\":1}}],[\"notebook\",{\"1\":{\"64\":2}}],[\"notes\",{\"1\":{\"64\":1}}],[\"note\",{\"1\":{\"64\":1}}],[\"nose\",{\"1\":{\"64\":2}}],[\"no\",{\"1\":{\"64\":15,\"76\":3,\"257\":4,\"437\":2,\"475\":7,\"688\":1,\"793\":5,\"813\":1}}],[\"never\",{\"1\":{\"813\":1}}],[\"nevis\",{\"1\":{\"64\":1}}],[\"near\",{\"1\":{\"270\":1}}],[\"neat\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"nepal\",{\"1\":{\"64\":1}}],[\"negatively\",{\"1\":{\"270\":1}}],[\"negative=false\",{\"1\":{\"270\":1}}],[\"negative\",{\"1\":{\"64\":1,\"270\":1}}],[\"nexthashcode\",{\"1\":{\"312\":2}}],[\"nexttable\",{\"1\":{\"181\":2}}],[\"nexttab\",{\"1\":{\"181\":5}}],[\"next\",{\"1\":{\"64\":1,\"157\":1,\"513\":5,\"734\":1,\"788\":1,\"802\":1}}],[\"necktie\",{\"1\":{\"64\":1}}],[\"needle\",{\"1\":{\"64\":1}}],[\"netflix宣布停止对zuul\",{\"1\":{\"864\":1}}],[\"netflix也逐渐进入了维护模式\",{\"1\":{\"830\":1}}],[\"netflix\",{\"1\":{\"824\":1,\"830\":4,\"831\":2,\"832\":6,\"835\":1,\"836\":1,\"857\":1,\"858\":1,\"864\":2}}],[\"netty\",{\"1\":{\"749\":1}}],[\"netstat\",{\"1\":{\"410\":1}}],[\"network\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"netherlands\",{\"1\":{\"64\":2}}],[\"net\",{\"1\":{\"64\":1,\"560\":1,\"868\":2}}],[\"newproxyinstance\",{\"1\":{\"450\":1,\"806\":1}}],[\"newexecutor\",{\"1\":{\"448\":1}}],[\"newtransaction\",{\"1\":{\"448\":1}}],[\"newinstance\",{\"1\":{\"428\":1,\"450\":4,\"788\":1}}],[\"newratio=n\",{\"1\":{\"412\":1}}],[\"new+cms的组合\",{\"1\":{\"406\":1}}],[\"newcachedthreadpool\",{\"0\":{\"364\":1},\"1\":{\"360\":1,\"364\":1}}],[\"newcachedthreadpool线程池使用了这个队列\",{\"1\":{\"356\":1}}],[\"newstatementhandler\",{\"1\":{\"448\":1}}],[\"newsize=n\",{\"1\":{\"412\":1}}],[\"newsinglethreadexecutor\",{\"0\":{\"362\":1},\"1\":{\"360\":1,\"362\":1}}],[\"newscheduledthreadpool\",{\"0\":{\"365\":1},\"1\":{\"360\":1}}],[\"newscheduledthreadpool线程池使用了这个队列\",{\"1\":{\"356\":1}}],[\"newspaper\",{\"1\":{\"64\":2}}],[\"newfixedthreadpool线程池使用了这个队列\",{\"1\":{\"356\":1}}],[\"newfixedthreadpool\",{\"0\":{\"363\":1},\"1\":{\"348\":1,\"349\":1,\"360\":1,\"363\":1}}],[\"new一个object作为value\",{\"1\":{\"186\":1}}],[\"new\",{\"0\":{\"169\":1,\"265\":1,\"384\":1},\"1\":{\"64\":6,\"89\":4,\"90\":4,\"91\":2,\"181\":1,\"261\":1,\"265\":4,\"266\":1,\"269\":2,\"280\":1,\"285\":2,\"292\":3,\"300\":5,\"303\":1,\"308\":1,\"311\":1,\"315\":2,\"324\":1,\"332\":2,\"333\":5,\"345\":13,\"348\":2,\"349\":3,\"357\":1,\"362\":3,\"363\":2,\"364\":2,\"365\":1,\"373\":4,\"382\":1,\"384\":1,\"388\":5,\"389\":3,\"392\":9,\"408\":1,\"435\":1,\"445\":1,\"448\":3,\"450\":4,\"637\":1,\"762\":3,\"763\":2,\"778\":1,\"788\":8,\"790\":2,\"793\":1,\"795\":3,\"802\":1,\"805\":2,\"806\":6,\"813\":3,\"817\":1,\"820\":1,\"849\":1,\"859\":4}}],[\"nesting\",{\"1\":{\"64\":1}}],[\"nest\",{\"1\":{\"64\":2}}],[\"nerd\",{\"1\":{\"64\":1}}],[\"neutral\",{\"1\":{\"64\":1}}],[\"$home\",{\"1\":{\"771\":1}}],[\"$jshell\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"$\",{\"1\":{\"72\":1,\"73\":3,\"74\":2,\"86\":1,\"91\":1,\"137\":4,\"140\":4,\"147\":4,\"439\":3,\"440\":1,\"784\":1,\"879\":4}}],[\"$1\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"$12\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"$1600\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"$$\",{\"1\":{\"13\":2}}],[\"描述内存或文件大小\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"描述数字\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"描述\",{\"1\":{\"53\":1,\"125\":1,\"128\":1,\"190\":1}}],[\"博文\",{\"0\":{\"47\":1,\"79\":1,\"82\":1,\"100\":1,\"103\":1,\"119\":1,\"122\":1,\"900\":1},\"2\":{\"52\":1,\"84\":1,\"102\":1,\"105\":1,\"121\":1,\"124\":1}}],[\"博客主页\",{\"0\":{\"2\":1},\"1\":{\"2\":1}}],[\"的维护\",{\"1\":{\"868\":1}}],[\"的微服务架构\",{\"1\":{\"836\":1}}],[\"的微服务架构提供了丰富的选项\",{\"1\":{\"831\":1}}],[\"的集成\",{\"1\":{\"831\":1,\"868\":2}}],[\"的集群\",{\"1\":{\"191\":1}}],[\"的另一个子项目\",{\"1\":{\"831\":1}}],[\"的解决方案\",{\"1\":{\"819\":1}}],[\"的解析过程如下图\",{\"1\":{\"547\":1}}],[\"的解析过程\",{\"0\":{\"547\":1}}],[\"的处理\",{\"1\":{\"817\":1}}],[\"的处理结果\",{\"1\":{\"815\":1}}],[\"的封装\",{\"1\":{\"817\":1}}],[\"的请求\",{\"1\":{\"817\":1}}],[\"的请求处理\",{\"1\":{\"817\":1}}],[\"的请求参数\",{\"1\":{\"566\":1}}],[\"的工作流程\",{\"0\":{\"816\":1}}],[\"的那么好\",{\"1\":{\"807\":1}}],[\"的那个事务提交\",{\"1\":{\"513\":1}}],[\"的性能不如\",{\"1\":{\"807\":1}}],[\"的全路径以及执行方法\",{\"1\":{\"805\":1}}],[\"的全部空间\",{\"1\":{\"404\":1}}],[\"的应用吗\",{\"1\":{\"805\":1}}],[\"的应用场景\",{\"1\":{\"597\":1}}],[\"的初始化阶段\",{\"1\":{\"802\":1}}],[\"的关键是\",{\"1\":{\"802\":1}}],[\"的关系\",{\"0\":{\"604\":1}}],[\"的作用域有哪些\",{\"0\":{\"797\":1}}],[\"的作⽤是获取哈希码\",{\"1\":{\"258\":1}}],[\"的属性配置信息\",{\"1\":{\"813\":1}}],[\"的属性\",{\"1\":{\"796\":1}}],[\"的这些信息后\",{\"1\":{\"796\":1}}],[\"的这段时间发生的增量\",{\"1\":{\"680\":1}}],[\"的配置\",{\"1\":{\"819\":1}}],[\"的配置信息\",{\"1\":{\"796\":1}}],[\"的配置文件中\",{\"1\":{\"767\":1}}],[\"的使用例子\",{\"1\":{\"791\":1}}],[\"的使⽤情况来推测要淘汰的⻚⾯\",{\"1\":{\"658\":1}}],[\"的发布与\",{\"1\":{\"791\":1}}],[\"的发行商是什么\",{\"1\":{\"407\":1}}],[\"的功能\",{\"1\":{\"791\":1,\"802\":1}}],[\"的功能通过其它的接口得到了不断的扩展\",{\"1\":{\"790\":1}}],[\"的例子\",{\"1\":{\"790\":1}}],[\"的缓存\",{\"1\":{\"788\":1}}],[\"的定义\",{\"1\":{\"788\":1}}],[\"的定义和依赖关系\",{\"1\":{\"788\":1}}],[\"的增强或通知\",{\"1\":{\"785\":1}}],[\"的管理\",{\"1\":{\"785\":1}}],[\"的依赖注入工具\",{\"1\":{\"784\":1}}],[\"的参数在\",{\"1\":{\"784\":1}}],[\"的参数设置\",{\"1\":{\"417\":1}}],[\"的所有特性\",{\"1\":{\"791\":1}}],[\"的所有方法都默认加上了\",{\"1\":{\"784\":2}}],[\"的所有权后\",{\"1\":{\"381\":1}}],[\"的组合\",{\"1\":{\"784\":2}}],[\"的提供使得应用难度大大降低\",{\"1\":{\"782\":1}}],[\"的直接支持\",{\"1\":{\"782\":1}}],[\"的生命周期大致分为四个阶段\",{\"1\":{\"793\":1}}],[\"的生命周期\",{\"1\":{\"782\":1}}],[\"的核心组件\",{\"0\":{\"815\":1}}],[\"的核心其实就是动态代理\",{\"1\":{\"804\":1}}],[\"的核心就是一个大的工厂容器\",{\"1\":{\"782\":1}}],[\"的核心服务功能都在这一层\",{\"1\":{\"472\":1}}],[\"的支持\",{\"1\":{\"782\":1}}],[\"的框架\",{\"1\":{\"782\":1}}],[\"的继续向服务器再次尝试拉取消息\",{\"1\":{\"777\":1}}],[\"的负载均衡是如何实现的\",{\"0\":{\"775\":1}}],[\"的负担\",{\"1\":{\"762\":1}}],[\"的多个message\",{\"1\":{\"767\":1}}],[\"的多粒度锁\",{\"1\":{\"514\":1}}],[\"的读请求会被自动切换到从\",{\"1\":{\"767\":1}}],[\"的读写队列数设置为\",{\"1\":{\"761\":1}}],[\"的读写\",{\"1\":{\"158\":1}}],[\"的相应时间段的message\",{\"1\":{\"764\":1}}],[\"的去重逻辑进行过滤\",{\"1\":{\"762\":1}}],[\"的并发设置\",{\"1\":{\"761\":1}}],[\"的并发能力比较依赖于\",{\"1\":{\"405\":1}}],[\"的消息被并发处理的问题\",{\"1\":{\"760\":1}}],[\"的消息发送到同一个\",{\"1\":{\"760\":1}}],[\"的是\",{\"1\":{\"751\":1}}],[\"的通信模型\",{\"1\":{\"830\":1}}],[\"的通信底层是通过\",{\"1\":{\"749\":1}}],[\"的通信过程中\",{\"1\":{\"564\":1}}],[\"的路由信息\",{\"1\":{\"748\":2}}],[\"的路由信息也就是发往哪个\",{\"1\":{\"748\":1}}],[\"的模型\",{\"1\":{\"743\":1}}],[\"的论文做出一些改进后采用了\",{\"1\":{\"732\":1}}],[\"的链地址法\",{\"1\":{\"731\":1}}],[\"的秒杀系统利用lua扣减redis库存的脚本\",{\"1\":{\"725\":1}}],[\"的替换\",{\"1\":{\"720\":1}}],[\"的稳定性\",{\"1\":{\"720\":1}}],[\"的n条慢查询命令\",{\"1\":{\"718\":1}}],[\"的nosql数据库\",{\"1\":{\"668\":1}}],[\"的命令\",{\"1\":{\"718\":1}}],[\"的命令来提交或者回滚分支事务\",{\"1\":{\"208\":1}}],[\"的键\",{\"1\":{\"717\":1}}],[\"的策略\",{\"1\":{\"712\":1}}],[\"的策略是先创建临时表\",{\"1\":{\"492\":1}}],[\"的地方\",{\"1\":{\"710\":1}}],[\"的地址空间\",{\"1\":{\"605\":1}}],[\"的主节点\",{\"1\":{\"698\":1}}],[\"的主要有四种对象\",{\"1\":{\"391\":1}}],[\"的从节点中选出一个替换它\",{\"1\":{\"698\":1}}],[\"的概念\",{\"1\":{\"695\":1}}],[\"的混合持久化了解吗\",{\"0\":{\"680\":1}}],[\"的删除等等\",{\"1\":{\"673\":1}}],[\"的问题\",{\"1\":{\"664\":1,\"730\":1}}],[\"的⽂件描述符个数限制\",{\"1\":{\"664\":1}}],[\"的⽂件描述符\",{\"1\":{\"664\":1}}],[\"的⻚⾯为⽌\",{\"1\":{\"658\":1}}],[\"的置换算法的基本思路是\",{\"1\":{\"658\":1}}],[\"的形式把这些段分离出来\",{\"1\":{\"652\":1}}],[\"的进程\",{\"1\":{\"639\":1}}],[\"的分配和管理\",{\"1\":{\"629\":1}}],[\"的面渣逆袭手册\",{\"1\":{\"619\":1}}],[\"的攻击方式就是想办法\",{\"1\":{\"615\":1}}],[\"的缩写混淆\",{\"1\":{\"615\":1}}],[\"的过程中\",{\"1\":{\"607\":1,\"802\":1}}],[\"的下一代互联网协议\",{\"1\":{\"605\":1}}],[\"的服务器设计容量是海量级的应用\",{\"1\":{\"598\":1}}],[\"的服务器会对查询的语句进行优化\",{\"1\":{\"473\":1}}],[\"的优势就更为突出了\",{\"1\":{\"598\":1}}],[\"的优化\",{\"1\":{\"486\":1}}],[\"的粘包和拆包更多的是业务上的概念\",{\"1\":{\"595\":1}}],[\"的粘包和拆包\",{\"0\":{\"595\":1}}],[\"的确认\",{\"1\":{\"592\":1}}],[\"的确是不可变的\",{\"1\":{\"266\":1}}],[\"的加权平均\",{\"1\":{\"591\":1}}],[\"的重传机制\",{\"0\":{\"590\":1}}],[\"的拥塞控制\",{\"0\":{\"585\":1}}],[\"的滑动窗口\",{\"0\":{\"583\":1}}],[\"的流量控制\",{\"0\":{\"582\":1}}],[\"的紧急指针是发送端向接收端发送紧急数据的方法\",{\"1\":{\"580\":1}}],[\"的连接和断开\",{\"1\":{\"579\":1}}],[\"的连接主要分为内连接和外连接\",{\"1\":{\"459\":1}}],[\"的状态和意义\",{\"0\":{\"578\":1}}],[\"的状态值加1后返回\",{\"1\":{\"332\":1}}],[\"的状态值为1\",{\"1\":{\"332\":1}}],[\"的信息\",{\"1\":{\"569\":1,\"606\":1}}],[\"的第一次握手\",{\"1\":{\"569\":1}}],[\"的第一个版本中就已经存在\",{\"1\":{\"427\":1}}],[\"的唯一标识信息\",{\"1\":{\"566\":1}}],[\"的标识\",{\"1\":{\"566\":1}}],[\"的公钥解密\",{\"1\":{\"564\":1}}],[\"的公钥信息\",{\"1\":{\"564\":1}}],[\"的端⼝号是\",{\"1\":{\"561\":2}}],[\"的端口\",{\"1\":{\"555\":1}}],[\"的握⼿过程\",{\"1\":{\"561\":1}}],[\"的报文首部带上缩小后的滑动窗口\",{\"1\":{\"582\":1}}],[\"的报文结构\",{\"0\":{\"556\":1}}],[\"的报⽂传输\",{\"1\":{\"561\":1}}],[\"的长短连接\",{\"1\":{\"560\":1}}],[\"的长连接\",{\"1\":{\"560\":1}}],[\"的长度限制是多少\",{\"0\":{\"554\":1}}],[\"的三次握手机制\",{\"0\":{\"568\":1}}],[\"的三次握⼿\",{\"1\":{\"559\":1}}],[\"的三次方\",{\"1\":{\"244\":1}}],[\"的安全性\",{\"1\":{\"559\":1}}],[\"的最大长度限制是\",{\"1\":{\"554\":1}}],[\"的最大限制是\",{\"1\":{\"554\":1}}],[\"的约定\",{\"1\":{\"553\":1}}],[\"的含义分别对应我们最熟悉的增\",{\"1\":{\"552\":1}}],[\"的高度封装\",{\"1\":{\"548\":1}}],[\"的传输层\",{\"1\":{\"542\":1}}],[\"的字符串\",{\"1\":{\"730\":1}}],[\"的字符数组来表示长度为\",{\"1\":{\"730\":1}}],[\"的字表中\",{\"1\":{\"531\":1}}],[\"的字段默认不为空\",{\"1\":{\"463\":1}}],[\"的子表中\",{\"1\":{\"531\":1}}],[\"的子查询依然能用到表上的索引\",{\"1\":{\"464\":1}}],[\"的订单放到编号为\",{\"1\":{\"531\":2}}],[\"的线程仅有一个\",{\"1\":{\"528\":1}}],[\"的事务操作\",{\"1\":{\"871\":1}}],[\"的事务是不会起作用的\",{\"1\":{\"813\":1}}],[\"的事务传播机制都工作在同一个事务中\",{\"1\":{\"811\":1}}],[\"的事务传播机制\",{\"0\":{\"811\":1}}],[\"的事务隔离级别\",{\"0\":{\"810\":1}}],[\"的事务不支持回滚\",{\"1\":{\"724\":1}}],[\"的事务一样\",{\"1\":{\"724\":1}}],[\"的事务的\",{\"1\":{\"523\":1}}],[\"的事务安全特性\",{\"1\":{\"477\":1}}],[\"的目的是帮助发送方判断\",{\"1\":{\"594\":1}}],[\"的目的\",{\"1\":{\"519\":1,\"676\":1}}],[\"的总金额是不变的\",{\"1\":{\"518\":1}}],[\"的乐观锁和悲观锁了解吗\",{\"0\":{\"515\":1}}],[\"的右边的临键区间\",{\"1\":{\"513\":1}}],[\"的结合\",{\"1\":{\"513\":1}}],[\"的结果暂存起来\",{\"1\":{\"276\":1}}],[\"的结果是\",{\"1\":{\"269\":1}}],[\"的间隙指的是两个记录之间逻辑上尚未填入数据的部分\",{\"1\":{\"513\":1}}],[\"的行锁的主要实现如下\",{\"1\":{\"513\":1}}],[\"的条件放到了引擎层执行\",{\"1\":{\"510\":1}}],[\"的联合索引中\",{\"1\":{\"509\":1}}],[\"的话可以起到优化的作用\",{\"1\":{\"505\":1}}],[\"的磁盘读写能力相对于\",{\"1\":{\"504\":1}}],[\"的磁盘块\",{\"1\":{\"501\":2}}],[\"的变量\",{\"1\":{\"585\":1}}],[\"的变量替换是在\",{\"1\":{\"439\":1}}],[\"的变量替换是在dbms\",{\"1\":{\"439\":1}}],[\"的变种\",{\"1\":{\"504\":1}}],[\"的块我们称之为一个磁盘块\",{\"1\":{\"501\":1}}],[\"的各个子查询中\",{\"1\":{\"492\":1}}],[\"的各项指标\",{\"1\":{\"417\":1}}],[\"的利器\",{\"1\":{\"489\":1}}],[\"的监控\",{\"1\":{\"485\":1}}],[\"的监控主要通过两个途径\",{\"1\":{\"485\":1}}],[\"的慢查询日志\",{\"1\":{\"485\":1}}],[\"的方式进行保存的\",{\"1\":{\"483\":1}}],[\"的方式进行转化\",{\"1\":{\"283\":1}}],[\"的写入不是直接落到磁盘\",{\"1\":{\"483\":1}}],[\"的写入\",{\"1\":{\"481\":1}}],[\"的更改的物理情况\",{\"1\":{\"480\":1}}],[\"的启动\",{\"1\":{\"479\":1}}],[\"的索引是聚簇索引\",{\"1\":{\"477\":1}}],[\"的索引为非聚簇索引\",{\"1\":{\"477\":1}}],[\"的基础上做了一些扩展\",{\"1\":{\"594\":1}}],[\"的基础上\",{\"1\":{\"559\":1}}],[\"的基础上进行发展而来\",{\"1\":{\"559\":1}}],[\"的基础架构\",{\"0\":{\"472\":1}}],[\"的基础用法\",{\"1\":{\"276\":1}}],[\"的执行效率是最优的\",{\"1\":{\"469\":1}}],[\"的执行效率优于\",{\"1\":{\"469\":1}}],[\"的计数\",{\"1\":{\"469\":1}}],[\"的原因\",{\"1\":{\"465\":1}}],[\"的原理\",{\"0\":{\"341\":1,\"609\":1}}],[\"的默认隔离级别是什么\",{\"0\":{\"520\":1}}],[\"的默认存储引擎是\",{\"1\":{\"501\":1}}],[\"的默认值为\",{\"1\":{\"463\":1}}],[\"的默认⾏为是对堆上的对象产⽣独特值\",{\"1\":{\"258\":1}}],[\"的存储\",{\"1\":{\"566\":1}}],[\"的存储引擎\",{\"1\":{\"519\":1}}],[\"的存储空间为\",{\"1\":{\"463\":2}}],[\"的存活对象复制到空的\",{\"1\":{\"404\":1}}],[\"的时机不同\",{\"1\":{\"523\":1}}],[\"的时间范围是1970\",{\"1\":{\"463\":1}}],[\"的时候发现需要\",{\"1\":{\"799\":1}}],[\"的时候比较重要\",{\"1\":{\"493\":1}}],[\"的时候接⼝可以有默认⽅法和静态⽅法功能\",{\"1\":{\"252\":1}}],[\"的时候\",{\"1\":{\"191\":1,\"289\":1,\"332\":1,\"399\":1,\"502\":1,\"527\":1,\"600\":1,\"677\":1,\"767\":1,\"788\":1,\"793\":1,\"801\":1,\"812\":1}}],[\"的日期范围是\",{\"1\":{\"463\":1}}],[\"的异常\",{\"1\":{\"813\":1}}],[\"的异常体系是分为多层的\",{\"1\":{\"274\":1}}],[\"的异同\",{\"0\":{\"463\":1},\"1\":{\"743\":1}}],[\"的固定长度时\",{\"1\":{\"461\":1}}],[\"的内部类\",{\"1\":{\"813\":1}}],[\"的内容\",{\"1\":{\"680\":1}}],[\"的内置函数\",{\"1\":{\"498\":1}}],[\"的内连接\",{\"0\":{\"459\":1}}],[\"的内存\",{\"1\":{\"607\":1}}],[\"的内存布局形式\",{\"1\":{\"401\":1,\"404\":1}}],[\"的内存区域吗\",{\"0\":{\"379\":1}}],[\"的内存分为堆和栈\",{\"1\":{\"259\":1}}],[\"的环境等配置信息构建会话工厂\",{\"1\":{\"448\":1}}],[\"的实例化时机不太一样\",{\"1\":{\"793\":1}}],[\"的实例化\",{\"1\":{\"791\":1,\"793\":1}}],[\"的实例不是线程安全的\",{\"1\":{\"435\":1}}],[\"的实现原理\",{\"0\":{\"802\":1}}],[\"的实现机制吗\",{\"0\":{\"788\":1}}],[\"的实现\",{\"1\":{\"427\":1,\"787\":1}}],[\"的映射关系的技术\",{\"1\":{\"433\":1}}],[\"的类加载机制了解吗\",{\"0\":{\"429\":1}}],[\"的类\",{\"1\":{\"425\":1}}],[\"的扩展库\",{\"1\":{\"423\":1}}],[\"的情况\",{\"1\":{\"418\":2}}],[\"的自省机制决定采用\",{\"1\":{\"796\":1}}],[\"的自动装配\",{\"1\":{\"796\":1}}],[\"的自带工具\",{\"1\":{\"417\":1}}],[\"的自然顺序或者\",{\"1\":{\"184\":1}}],[\"的排查思路大概如下\",{\"1\":{\"417\":1}}],[\"的频率\",{\"1\":{\"416\":1,\"417\":1}}],[\"的常见参数配置知道哪些\",{\"0\":{\"412\":1}}],[\"的逃逸\",{\"1\":{\"408\":1}}],[\"的浮动垃圾问题\",{\"1\":{\"406\":1}}],[\"的对象有哪几种\",{\"0\":{\"391\":1}}],[\"的整合等\",{\"1\":{\"783\":1}}],[\"的整个生命周期中存在\",{\"1\":{\"389\":1}}],[\"的整数幂\",{\"1\":{\"167\":1}}],[\"的几个内存区域中\",{\"1\":{\"388\":1}}],[\"的距离\",{\"1\":{\"384\":1}}],[\"的上限\",{\"1\":{\"381\":1}}],[\"的文件格式关联\",{\"1\":{\"377\":1}}],[\"的大小是有限的\",{\"1\":{\"483\":1}}],[\"的大小比例是\",{\"1\":{\"396\":1}}],[\"的大小\",{\"1\":{\"353\":1}}],[\"的屏障\",{\"1\":{\"346\":1}}],[\"的同时并不释放自己已经获取的资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"的同时点击幻灯片的任何元素\",{\"1\":{\"42\":1}}],[\"的锁\",{\"1\":{\"324\":2}}],[\"的理解\",{\"0\":{\"317\":1}}],[\"的inheritablethreadlocals\",{\"1\":{\"315\":1}}],[\"的弱引用导致内存泄漏也是个老生常谈的话题了\",{\"1\":{\"389\":1}}],[\"的弱引用\",{\"1\":{\"311\":1}}],[\"的调度\",{\"1\":{\"302\":1}}],[\"的sleep方法后\",{\"1\":{\"302\":1}}],[\"的容器\",{\"1\":{\"293\":1}}],[\"的鼓励\",{\"1\":{\"291\":1}}],[\"的范型只存在于源码里\",{\"1\":{\"285\":1}}],[\"的泛型是伪泛型\",{\"1\":{\"285\":1}}],[\"的运行机制\",{\"1\":{\"280\":1}}],[\"的数⽬也⾮常的多了\",{\"1\":{\"664\":1}}],[\"的数据早已被接收了\",{\"1\":{\"594\":1}}],[\"的数据异构到\",{\"1\":{\"534\":1}}],[\"的数据\",{\"1\":{\"510\":1}}],[\"的数据列只用辅助索引中就能够取得\",{\"1\":{\"508\":1}}],[\"的数据会刷入磁盘\",{\"1\":{\"483\":1}}],[\"的数据是面向缓冲区\",{\"1\":{\"280\":1}}],[\"的数字其实不重要\",{\"1\":{\"282\":1}}],[\"的数组长度要取\",{\"1\":{\"167\":1}}],[\"的创建和\",{\"1\":{\"266\":1}}],[\"的拼接操作\",{\"1\":{\"266\":1}}],[\"的非线程安全版本\",{\"1\":{\"264\":1}}],[\"的修改都会引发新的\",{\"1\":{\"264\":1}}],[\"的两个对象⽆论如何都不会相等\",{\"1\":{\"258\":1}}],[\"的⽅式即使监听的\",{\"1\":{\"664\":1}}],[\"的⽅式调用\",{\"1\":{\"254\":1}}],[\"的⽅式\",{\"1\":{\"254\":2}}],[\"的接口\",{\"1\":{\"810\":1}}],[\"的接口实现方法\",{\"1\":{\"784\":1}}],[\"的接收端只允许发送端发送接收端缓冲区能接纳的数据\",{\"1\":{\"581\":1}}],[\"的接⼝被允许定义私有⽅法\",{\"1\":{\"252\":1}}],[\"的接受请求给接受者\",{\"1\":{\"216\":1}}],[\"的用法在\",{\"1\":{\"251\":1}}],[\"的值来表示数据所属的数据库表编号\",{\"1\":{\"531\":1}}],[\"的值进行\",{\"1\":{\"531\":1}}],[\"的值放在前面\",{\"1\":{\"497\":1}}],[\"的值被创建后不能修改\",{\"1\":{\"264\":1}}],[\"的值\",{\"1\":{\"245\":2}}],[\"的区别\",{\"0\":{\"249\":1,\"256\":1,\"257\":1,\"264\":1,\"439\":1,\"461\":1,\"464\":1,\"467\":1,\"468\":1,\"469\":1,\"548\":1,\"553\":1,\"558\":1,\"597\":1},\"1\":{\"463\":1,\"551\":1,\"553\":1}}],[\"的区别及作用\",{\"0\":{\"243\":1}}],[\"的区别在于选举的\",{\"1\":{\"219\":1}}],[\"的差别也是如此\",{\"1\":{\"241\":1}}],[\"的虚拟机机制\",{\"1\":{\"232\":1}}],[\"的语言\",{\"1\":{\"232\":1}}],[\"的特点是什么\",{\"1\":{\"406\":1}}],[\"的特点\",{\"1\":{\"232\":1}}],[\"的操作\",{\"1\":{\"224\":1}}],[\"的选票\",{\"1\":{\"222\":1}}],[\"的算法思想\",{\"1\":{\"217\":1}}],[\"的设计目标是对业务无侵入\",{\"1\":{\"208\":1}}],[\"的一个子项目\",{\"1\":{\"830\":1}}],[\"的一部分\",{\"1\":{\"784\":1}}],[\"的一种子集\",{\"1\":{\"557\":1}}],[\"的一种改进版本\",{\"1\":{\"203\":1}}],[\"的一行正在访问哪个表\",{\"1\":{\"493\":1}}],[\"的一致\",{\"1\":{\"425\":1}}],[\"的一致性算法\",{\"1\":{\"211\":1}}],[\"的一些新特性\",{\"1\":{\"290\":1}}],[\"的一半\",{\"1\":{\"167\":1}}],[\"的效率好坏\",{\"1\":{\"493\":1}}],[\"的效率高得多\",{\"1\":{\"168\":1}}],[\"的效果\",{\"1\":{\"193\":1}}],[\"的源码⾮常⾮常少\",{\"1\":{\"186\":1}}],[\"的比较\",{\"1\":{\"184\":1}}],[\"的顺序进行排序\",{\"1\":{\"184\":1}}],[\"的hashmap主要有五点优化\",{\"1\":{\"175\":1}}],[\"的hashcode\",{\"1\":{\"166\":1}}],[\"的2进制也就是1111111\",{\"1\":{\"168\":1}}],[\"的价值就体现出来了\",{\"1\":{\"167\":1}}],[\"的\",{\"0\":{\"270\":1,\"730\":1},\"1\":{\"159\":1,\"183\":1,\"186\":1,\"193\":1,\"198\":1,\"204\":1,\"208\":1,\"210\":2,\"215\":2,\"221\":1,\"222\":2,\"225\":1,\"227\":1,\"236\":1,\"245\":2,\"261\":1,\"266\":1,\"267\":1,\"270\":1,\"276\":1,\"278\":1,\"280\":1,\"287\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"325\":1,\"343\":1,\"349\":1,\"373\":1,\"381\":2,\"408\":1,\"419\":1,\"428\":1,\"429\":1,\"446\":2,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":2,\"490\":1,\"493\":1,\"497\":1,\"510\":1,\"516\":1,\"523\":2,\"534\":1,\"538\":1,\"544\":1,\"547\":1,\"549\":1,\"559\":1,\"560\":2,\"566\":1,\"595\":1,\"600\":1,\"605\":2,\"607\":1,\"608\":1,\"609\":4,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"682\":1,\"699\":1,\"713\":1,\"715\":1,\"720\":1,\"727\":1,\"732\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"770\":1,\"778\":1,\"785\":1,\"788\":1,\"789\":1,\"792\":1,\"796\":2,\"797\":2,\"798\":1,\"801\":1,\"802\":2,\"806\":1,\"807\":1,\"813\":4,\"817\":3,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"的开源知识库\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"的段落\",{\"1\":{\"10\":1}}],[\"lpush生产消息\",{\"1\":{\"722\":2}}],[\"lfu\",{\"1\":{\"658\":1}}],[\"lru\",{\"1\":{\"658\":6,\"717\":2}}],[\"l\",{\"1\":{\"325\":1,\"343\":2}}],[\"l2\",{\"1\":{\"317\":1}}],[\"ll\",{\"1\":{\"317\":1}}],[\"llama\",{\"1\":{\"64\":1}}],[\"ljava\",{\"1\":{\"266\":5}}],[\"ldc\",{\"1\":{\"266\":2}}],[\"ls\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"lua\",{\"1\":{\"726\":2}}],[\"lua脚本可以将多条命令一次性打包\",{\"1\":{\"725\":1}}],[\"lua脚本可以帮助开发和运维人员创造出自己定制的命令\",{\"1\":{\"725\":1}}],[\"lua脚本在redis中是原子执行的\",{\"1\":{\"725\":1}}],[\"lua脚本能给开发人员带来这些好处\",{\"1\":{\"725\":1}}],[\"lua脚本等附加功能\",{\"1\":{\"668\":1}}],[\"luxembourg\",{\"1\":{\"64\":1}}],[\"lucia\",{\"1\":{\"64\":1}}],[\"luggage\",{\"1\":{\"64\":2}}],[\"lungs\",{\"1\":{\"64\":1}}],[\"layer\",{\"1\":{\"526\":1}}],[\"lambda\",{\"0\":{\"292\":1},\"1\":{\"291\":6,\"292\":6}}],[\"lamport\",{\"1\":{\"217\":1}}],[\"lamp\",{\"1\":{\"64\":2}}],[\"latencyfaulttolerance机制是实现消息发送高可用的核心关键所在\",{\"1\":{\"776\":1}}],[\"latencyfaulttolerance\",{\"1\":{\"776\":1}}],[\"latch数量减1\",{\"1\":{\"345\":1}}],[\"latvia\",{\"1\":{\"64\":1}}],[\"latin\",{\"1\":{\"64\":1}}],[\"language\",{\"1\":{\"434\":1}}],[\"lang\",{\"1\":{\"96\":1,\"256\":1,\"266\":10,\"418\":1,\"422\":2,\"423\":1,\"425\":2,\"427\":3}}],[\"lanka\",{\"1\":{\"64\":1}}],[\"lantern\",{\"1\":{\"64\":3}}],[\"laos\",{\"1\":{\"64\":1}}],[\"ladder\",{\"1\":{\"64\":1}}],[\"lady\",{\"1\":{\"64\":1}}],[\"label\",{\"1\":{\"64\":1}}],[\"lab\",{\"1\":{\"64\":1}}],[\"lacrosse\",{\"1\":{\"64\":1}}],[\"large\",{\"1\":{\"64\":6}}],[\"lastname\",{\"1\":{\"445\":2}}],[\"last\",{\"1\":{\"64\":2,\"556\":2,\"574\":1,\"576\":1}}],[\"laughing\",{\"1\":{\"64\":1}}],[\"lautrans优秀的博客\",{\"1\":{\"59\":1}}],[\"loki\",{\"1\":{\"877\":1}}],[\"lookaside\",{\"1\":{\"655\":1}}],[\"loop\",{\"1\":{\"64\":2,\"464\":2}}],[\"logstash负责将日志收集到es\",{\"1\":{\"877\":1}}],[\"logstash是一个用于收集\",{\"1\":{\"877\":1}}],[\"logstash\",{\"1\":{\"877\":1}}],[\"loggerfactory\",{\"1\":{\"805\":1}}],[\"logger\",{\"1\":{\"805\":11}}],[\"logging\",{\"1\":{\"519\":1}}],[\"log机制为\",{\"1\":{\"519\":1}}],[\"log中的信息来撤销所有更改\",{\"1\":{\"519\":1}}],[\"log中记录旧值\",{\"1\":{\"519\":1}}],[\"log会在某个时间点被清除\",{\"1\":{\"519\":1}}],[\"log到磁盘\",{\"1\":{\"483\":1}}],[\"log\",{\"0\":{\"480\":1,\"483\":1},\"1\":{\"479\":9,\"480\":8,\"481\":5,\"482\":9,\"483\":13,\"519\":10,\"527\":2,\"778\":4}}],[\"logn\",{\"1\":{\"162\":1,\"175\":1,\"664\":1}}],[\"lombok\",{\"1\":{\"287\":1}}],[\"lost\",{\"1\":{\"181\":1}}],[\"loadrules\",{\"1\":{\"859\":1}}],[\"loadclass\",{\"1\":{\"426\":1,\"427\":2}}],[\"loader\",{\"1\":{\"423\":3}}],[\"loading\",{\"1\":{\"421\":1}}],[\"load\",{\"1\":{\"173\":1,\"676\":1,\"720\":1,\"788\":1,\"807\":1,\"848\":1}}],[\"loadfactor\",{\"1\":{\"169\":3}}],[\"lotion\",{\"1\":{\"64\":1}}],[\"lotus\",{\"1\":{\"64\":4}}],[\"location\",{\"1\":{\"556\":1,\"557\":1}}],[\"localhost\",{\"1\":{\"445\":1}}],[\"local\",{\"1\":{\"317\":1,\"384\":1,\"725\":2}}],[\"localvariable\",{\"1\":{\"308\":3,\"311\":3}}],[\"locals=4\",{\"1\":{\"266\":1}}],[\"locks\",{\"1\":{\"513\":10}}],[\"lockinterruptibly\",{\"1\":{\"330\":1}}],[\"lock\",{\"1\":{\"64\":3,\"332\":4,\"333\":2,\"339\":1,\"512\":4,\"513\":4,\"727\":7}}],[\"locomotive\",{\"1\":{\"64\":1}}],[\"lower\",{\"1\":{\"64\":2}}],[\"low\",{\"1\":{\"64\":2}}],[\"long结果\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"long变量\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"long\",{\"0\":{\"242\":1},\"1\":{\"64\":1,\"137\":15,\"140\":15,\"147\":15,\"181\":1,\"238\":2,\"242\":1,\"263\":1,\"272\":2,\"282\":1,\"294\":2,\"302\":5,\"306\":2,\"341\":1,\"345\":1,\"349\":1,\"445\":3,\"479\":1,\"778\":4,\"805\":1,\"879\":15}}],[\"loudspeaker\",{\"1\":{\"64\":1}}],[\"loud\",{\"1\":{\"64\":1}}],[\"lorry\",{\"1\":{\"64\":1}}],[\"lollipop\",{\"1\":{\"64\":1}}],[\"lobster\",{\"1\":{\"64\":1}}],[\"love\",{\"1\":{\"64\":3}}],[\"lying\",{\"1\":{\"64\":1}}],[\"life\",{\"1\":{\"793\":2}}],[\"lifetime\",{\"1\":{\"574\":1,\"576\":1}}],[\"lifting\",{\"1\":{\"64\":3}}],[\"limit\",{\"1\":{\"454\":1,\"470\":1,\"488\":5,\"492\":1}}],[\"like\",{\"1\":{\"440\":1,\"444\":5,\"498\":1,\"505\":2,\"510\":3}}],[\"live\",{\"1\":{\"404\":1,\"415\":1,\"418\":2}}],[\"lithuania\",{\"1\":{\"64\":1}}],[\"litter\",{\"1\":{\"64\":2}}],[\"liechtenstein\",{\"1\":{\"64\":1}}],[\"listablebeanfactory\",{\"1\":{\"791\":1}}],[\"list为空的时候\",{\"1\":{\"722\":1}}],[\"listeners\",{\"1\":{\"822\":1}}],[\"listen\",{\"1\":{\"568\":1,\"573\":2}}],[\"listcategory\",{\"1\":{\"441\":1}}],[\"listuserlikeusername\",{\"1\":{\"440\":1}}],[\"list=cats\",{\"1\":{\"285\":2}}],[\"list=new\",{\"1\":{\"285\":1}}],[\"list>进行排序操作\",{\"1\":{\"470\":1}}],[\"list>\",{\"1\":{\"285\":1}}],[\"list<flowrule>\",{\"1\":{\"859\":1}}],[\"list<messageext>\",{\"1\":{\"762\":1}}],[\"list<map<string\",{\"1\":{\"97\":1}}],[\"list<e>\",{\"1\":{\"448\":3}}],[\"list<product>\",{\"1\":{\"441\":1}}],[\"list<oomobject>\",{\"1\":{\"388\":1}}],[\"list<integer>\",{\"1\":{\"285\":1}}],[\"list<string>\",{\"1\":{\"96\":1,\"294\":1,\"820\":1}}],[\"list<student>\",{\"1\":{\"86\":1,\"87\":2,\"88\":1,\"89\":2,\"90\":1,\"91\":1}}],[\"list\",{\"0\":{\"153\":1},\"1\":{\"87\":1,\"89\":4,\"152\":2,\"153\":1,\"158\":1,\"285\":6,\"294\":5,\"383\":1,\"388\":2,\"389\":3,\"444\":1,\"448\":1,\"668\":1,\"670\":2,\"719\":1,\"729\":1,\"734\":1}}],[\"list＜map＞集合\",{\"0\":{\"94\":1},\"1\":{\"49\":1}}],[\"lis\",{\"1\":{\"64\":1}}],[\"lib里定义了对应的\",{\"1\":{\"427\":1}}],[\"libya\",{\"1\":{\"64\":1}}],[\"liberia\",{\"1\":{\"64\":1}}],[\"liberty\",{\"1\":{\"64\":1}}],[\"libra\",{\"1\":{\"64\":1}}],[\"liquid\",{\"1\":{\"64\":1}}],[\"lizard\",{\"1\":{\"64\":1}}],[\"lion\",{\"1\":{\"64\":1}}],[\"lip\",{\"1\":{\"64\":1}}],[\"lipstick\",{\"1\":{\"64\":1}}],[\"lips\",{\"1\":{\"64\":1}}],[\"lightning\",{\"1\":{\"64\":2}}],[\"light\",{\"1\":{\"64\":5}}],[\"lintcode\",{\"1\":{\"457\":1}}],[\"linking\",{\"1\":{\"421\":1}}],[\"linkedblockingqueue<runnable>\",{\"1\":{\"362\":1,\"363\":1}}],[\"linkedblockingqueue\",{\"1\":{\"356\":2}}],[\"linkedblockingqueue阻塞队列\",{\"1\":{\"352\":1}}],[\"linkedhashmap维护了一个双向链表\",{\"1\":{\"183\":1}}],[\"linkedhashmap\",{\"0\":{\"183\":1},\"1\":{\"183\":1}}],[\"linkedlist\",{\"1\":{\"285\":4,\"734\":3}}],[\"linkedlist<cat>\",{\"1\":{\"285\":2}}],[\"linkedlist<>\",{\"1\":{\"89\":1}}],[\"linkedlist每个节点\",{\"1\":{\"154\":1}}],[\"linkedlist基于链表\",{\"1\":{\"154\":2}}],[\"linkedlist基于链表实现\",{\"1\":{\"154\":1}}],[\"linkedlist基于双向链表实现\",{\"1\":{\"154\":1}}],[\"linkedlist更利于增删更多是体现在平均步长上\",{\"1\":{\"154\":1}}],[\"linkedlist更利于增删\",{\"1\":{\"154\":1}}],[\"link\",{\"1\":{\"64\":1,\"267\":1}}],[\"line\",{\"1\":{\"64\":1,\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"linux系统有三种方式实现io多路复用\",{\"1\":{\"672\":1}}],[\"linux系统中常用信号\",{\"1\":{\"641\":1}}],[\"linux把某些页的内容转移至磁盘上的一块空间上\",{\"1\":{\"657\":1}}],[\"linux\",{\"1\":{\"42\":1,\"137\":1,\"140\":1,\"147\":1,\"233\":1,\"591\":1,\"653\":1,\"662\":1,\"879\":1}}],[\"leetcode\",{\"1\":{\"457\":1}}],[\"len\",{\"1\":{\"314\":3,\"493\":1,\"730\":2}}],[\"len>0\",{\"1\":{\"270\":1}}],[\"len=s\",{\"1\":{\"270\":1}}],[\"length\",{\"1\":{\"164\":2,\"167\":3,\"181\":3,\"269\":1,\"270\":1,\"312\":1,\"314\":1,\"556\":2}}],[\"leste\",{\"1\":{\"64\":1}}],[\"lesotho\",{\"1\":{\"64\":1}}],[\"lebanon\",{\"1\":{\"64\":1}}],[\"leone\",{\"1\":{\"64\":1}}],[\"leo\",{\"1\":{\"64\":1}}],[\"leopard\",{\"1\":{\"64\":1}}],[\"ledger\",{\"1\":{\"64\":1}}],[\"level\",{\"1\":{\"64\":1,\"319\":1,\"448\":1,\"488\":3,\"732\":1}}],[\"levitating\",{\"1\":{\"64\":1}}],[\"lemon\",{\"1\":{\"64\":1}}],[\"least\",{\"1\":{\"851\":1}}],[\"leader选举失败\",{\"1\":{\"222\":1}}],[\"leader选举过程\",{\"0\":{\"222\":1}}],[\"leader向所有followers周期性发送heartbeat\",{\"1\":{\"222\":1}}],[\"leader\",{\"1\":{\"221\":1,\"222\":4}}],[\"learner\",{\"1\":{\"213\":1}}],[\"leaves\",{\"1\":{\"64\":1}}],[\"leafy\",{\"1\":{\"64\":1}}],[\"leaf\",{\"1\":{\"64\":3}}],[\"leg\",{\"1\":{\"64\":3}}],[\"letter\",{\"1\":{\"64\":1}}],[\"let\",{\"1\":{\"36\":3}}],[\"leftresult\",{\"1\":{\"373\":2}}],[\"lefttask\",{\"1\":{\"373\":3}}],[\"leftwards\",{\"1\":{\"64\":3}}],[\"left\",{\"1\":{\"23\":1,\"64\":8,\"441\":2,\"459\":1,\"470\":1,\"490\":2}}],[\"或日志文件\",{\"1\":{\"877\":1}}],[\"或将请求的参数进行格式转换\",{\"1\":{\"863\":1}}],[\"或已经打成\",{\"1\":{\"807\":1}}],[\"或称数据分片\",{\"1\":{\"691\":1}}],[\"或下一个版本的事务id\",{\"1\":{\"519\":1}}],[\"或事务id\",{\"1\":{\"519\":1}}],[\"或时间戳\",{\"1\":{\"515\":1}}],[\"或两张表\",{\"1\":{\"458\":1}}],[\"或注解来配置和映射原生信息\",{\"1\":{\"433\":1}}],[\"或以使用\",{\"1\":{\"418\":1}}],[\"或使用在线分析平台\",{\"1\":{\"418\":1}}],[\"或使用第三方式具分析的\",{\"1\":{\"418\":1}}],[\"或使用\",{\"1\":{\"418\":2}}],[\"或不再使用对象没有及时将对象设置为\",{\"1\":{\"389\":1}}],[\"或更早版本中\",{\"1\":{\"252\":1}}],[\"或减少\",{\"1\":{\"245\":1}}],[\"或者重试\",{\"1\":{\"853\":1}}],[\"或者和别的\",{\"1\":{\"799\":1}}],[\"或者超时\",{\"1\":{\"778\":1}}],[\"或者长轮询阻塞时间到了\",{\"1\":{\"778\":1}}],[\"或者唯一约束\",{\"1\":{\"757\":1}}],[\"或者发生其它异常\",{\"1\":{\"754\":1}}],[\"或者用户id之类\",{\"1\":{\"693\":1}}],[\"或者将域名转让给其它主持\",{\"1\":{\"612\":1}}],[\"或者使用户无法正常访问网站的一种攻击方式\",{\"1\":{\"612\":1}}],[\"或者在分配\",{\"1\":{\"607\":1}}],[\"或者客户端是安卓\",{\"1\":{\"566\":1}}],[\"或者其他字段\",{\"1\":{\"534\":1}}],[\"或者某几个列组合也可以\",{\"1\":{\"531\":1}}],[\"或者由于某个\",{\"1\":{\"528\":1}}],[\"或者select\",{\"1\":{\"513\":1}}],[\"或者被连接的部分是一个常量\",{\"1\":{\"493\":1}}],[\"或者子查询来替代\",{\"1\":{\"489\":1}}],[\"或者是独立的表空间文件\",{\"1\":{\"477\":1}}],[\"或者内存泄露导致对象无法回收\",{\"1\":{\"415\":1}}],[\"或者引用\",{\"1\":{\"408\":1}}],[\"或者对象\",{\"1\":{\"408\":1}}],[\"或者堆空间比较大\",{\"1\":{\"407\":1}}],[\"或者垃圾收集暂停必须保持在大约\",{\"1\":{\"407\":1}}],[\"或者可以接受\",{\"1\":{\"407\":1}}],[\"或者可优化点\",{\"1\":{\"369\":1}}],[\"或者一步到位\",{\"1\":{\"406\":1}}],[\"或者一个攻击者控制了位于不同位置的多台机器\",{\"1\":{\"614\":1}}],[\"或者一个\",{\"1\":{\"191\":1}}],[\"或者老年代空间\",{\"1\":{\"404\":1}}],[\"或者新生代对象\",{\"1\":{\"399\":1}}],[\"或者等很久才会获得锁\",{\"1\":{\"332\":1}}],[\"或者已经不再存活\",{\"1\":{\"328\":1}}],[\"或者monitor锁\",{\"1\":{\"325\":1}}],[\"或者写成float\",{\"1\":{\"239\":1}}],[\"或者回滚数据\",{\"1\":{\"202\":1}}],[\"或者功能上的降级\",{\"1\":{\"193\":1}}],[\"或者自定义一个实现了\",{\"1\":{\"184\":1}}],[\"或者\",{\"1\":{\"182\":1,\"261\":1,\"302\":1,\"392\":1,\"465\":1,\"489\":1,\"493\":1,\"498\":1,\"613\":1,\"813\":1}}],[\"或扫描下方二维码关注二哥的原创公众号沉默王二\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"或\",{\"1\":{\"38\":1,\"40\":1,\"414\":1,\"446\":1,\"470\":1,\"519\":1,\"558\":1,\"584\":1,\"638\":2,\"813\":1,\"815\":1,\"824\":1}}],[\"epoll这些调用的时候才会阻塞\",{\"1\":{\"672\":1}}],[\"epoll被称为解决c10k问题的利器\",{\"1\":{\"664\":1}}],[\"epoll\",{\"1\":{\"664\":6}}],[\"epoch\",{\"1\":{\"327\":1}}],[\"etcd\",{\"1\":{\"835\":2,\"841\":1}}],[\"etag\",{\"1\":{\"556\":1}}],[\"ethiopia\",{\"1\":{\"64\":1}}],[\"eq\",{\"1\":{\"493\":4}}],[\"equal\",{\"1\":{\"267\":1}}],[\"equals\",{\"0\":{\"257\":1,\"258\":1},\"1\":{\"64\":1,\"241\":2,\"257\":8,\"258\":4,\"267\":2,\"272\":1,\"349\":1,\"450\":2}}],[\"equatorial\",{\"1\":{\"64\":1}}],[\"ehcache\",{\"1\":{\"446\":1}}],[\"eclipse\",{\"1\":{\"418\":1}}],[\"ecuador\",{\"1\":{\"64\":1}}],[\"eden\",{\"1\":{\"394\":1,\"396\":5,\"398\":2,\"399\":1,\"404\":1,\"412\":2,\"416\":1,\"417\":1}}],[\"eden空间\",{\"1\":{\"379\":1}}],[\"editable\",{\"1\":{\"72\":1}}],[\"edit\",{\"1\":{\"64\":1}}],[\"effective\",{\"1\":{\"291\":1}}],[\"ertry\",{\"1\":{\"480\":1}}],[\"error\",{\"1\":{\"274\":1,\"450\":1,\"479\":1,\"813\":1}}],[\"eritrea\",{\"1\":{\"64\":1}}],[\"ee\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"eureka还具有自我保护机制\",{\"1\":{\"838\":1}}],[\"eureka客户端在调用其他服务时\",{\"1\":{\"837\":1}}],[\"eureka通过心跳机制来检测服务实例的健康状态\",{\"1\":{\"837\":1}}],[\"eureka的实现原理\",{\"1\":{\"837\":1}}],[\"eureka实现原理了解吗\",{\"0\":{\"837\":1}}],[\"eureka\",{\"0\":{\"838\":1},\"1\":{\"192\":2,\"831\":1,\"832\":1,\"835\":2,\"836\":1,\"837\":2,\"838\":2}}],[\"euro\",{\"1\":{\"64\":1}}],[\"european\",{\"1\":{\"64\":3}}],[\"eu\",{\"1\":{\"64\":1}}],[\"egypt\",{\"1\":{\"64\":1}}],[\"egg\",{\"1\":{\"64\":2}}],[\"eggplant\",{\"1\":{\"64\":1}}],[\"eggs\",{\"1\":{\"64\":1}}],[\"established\",{\"1\":{\"568\":2,\"572\":1}}],[\"estonia\",{\"1\":{\"64\":1}}],[\"es\",{\"1\":{\"64\":1,\"490\":1,\"534\":2}}],[\"escape\",{\"1\":{\"408\":1}}],[\"esc\",{\"1\":{\"38\":1}}],[\"eight\",{\"1\":{\"64\":3}}],[\"eject\",{\"1\":{\"64\":1}}],[\"e\",{\"1\":{\"64\":1,\"154\":1,\"186\":7,\"275\":1,\"276\":1,\"285\":5,\"300\":4,\"314\":3,\"345\":2,\"348\":1,\"349\":2,\"357\":2,\"373\":2,\"389\":1,\"603\":2,\"612\":6,\"778\":2,\"788\":4,\"813\":2}}],[\"emoji\",{\"1\":{\"466\":1}}],[\"emoji😊\",{\"0\":{\"466\":1}}],[\"employee\",{\"1\":{\"445\":4}}],[\"employeemapper\",{\"1\":{\"445\":4}}],[\"emps\",{\"1\":{\"445\":2}}],[\"emp\",{\"1\":{\"445\":12}}],[\"empty\",{\"1\":{\"64\":1,\"820\":1}}],[\"emsp\",{\"1\":{\"440\":4}}],[\"emirates\",{\"1\":{\"64\":1}}],[\"email\",{\"1\":{\"64\":1,\"444\":2,\"445\":6,\"489\":1}}],[\"en\",{\"1\":{\"806\":4}}],[\"enhancer\",{\"1\":{\"806\":2}}],[\"encoding=\",{\"1\":{\"793\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"821\":1}}],[\"enableautoconfiguration=\",{\"1\":{\"821\":1}}],[\"enableautoconfiguration\",{\"1\":{\"820\":5}}],[\"enableaspectjautoproxy\",{\"1\":{\"784\":1}}],[\"enabled\",{\"1\":{\"697\":1,\"820\":1,\"848\":1}}],[\"ename\",{\"1\":{\"445\":4}}],[\"entity\",{\"1\":{\"441\":2}}],[\"entryx\",{\"1\":{\"733\":1}}],[\"entrylist\",{\"1\":{\"325\":2}}],[\"entry为\",{\"1\":{\"313\":1}}],[\"entry数据\",{\"1\":{\"313\":1}}],[\"entry是threalocal弱引用作为key\",{\"1\":{\"312\":1}}],[\"entry\",{\"1\":{\"64\":2,\"183\":1,\"310\":2,\"312\":1,\"314\":2,\"733\":1,\"820\":1}}],[\"enum\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"242\":1,\"879\":1}}],[\"environment\",{\"1\":{\"448\":6}}],[\"envrinment\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"envelope\",{\"1\":{\"64\":4}}],[\"england\",{\"1\":{\"64\":1}}],[\"engine\",{\"1\":{\"64\":1,\"516\":1}}],[\"endpoint\",{\"1\":{\"847\":1}}],[\"end\",{\"1\":{\"64\":1,\"373\":8,\"445\":2,\"725\":4,\"778\":1,\"805\":1}}],[\"evacuation\",{\"1\":{\"404\":1}}],[\"eventually\",{\"1\":{\"193\":1}}],[\"eventual\",{\"1\":{\"193\":2}}],[\"evergreen\",{\"1\":{\"64\":1}}],[\"evil\",{\"1\":{\"64\":3}}],[\"elasticsearch是一个分布式搜索和分析引擎\",{\"1\":{\"877\":1}}],[\"elasticsearch\",{\"1\":{\"622\":1,\"877\":1}}],[\"else\",{\"1\":{\"181\":2,\"310\":1,\"373\":1,\"450\":5,\"778\":1,\"820\":1}}],[\"el\",{\"1\":{\"64\":1}}],[\"election\",{\"1\":{\"222\":1}}],[\"electric\",{\"1\":{\"64\":1}}],[\"elevator\",{\"1\":{\"64\":1}}],[\"elephant\",{\"1\":{\"64\":1}}],[\"elementtype\",{\"1\":{\"805\":1}}],[\"element\",{\"1\":{\"7\":1,\"154\":1,\"285\":4}}],[\"elf\",{\"1\":{\"64\":3}}],[\"eager\",{\"1\":{\"848\":1}}],[\"eagle\",{\"1\":{\"64\":1}}],[\"eata整体执行流程\",{\"1\":{\"208\":1}}],[\"earth\",{\"1\":{\"64\":3}}],[\"ear\",{\"1\":{\"64\":3}}],[\"easyui\",{\"0\":{\"70\":1},\"1\":{\"50\":1}}],[\"exampleservice\",{\"1\":{\"847\":1}}],[\"exampleproducergroup\",{\"1\":{\"763\":1}}],[\"example\",{\"1\":{\"435\":2,\"762\":1,\"847\":2}}],[\"exgr\",{\"1\":{\"349\":3}}],[\"exit\",{\"1\":{\"256\":1,\"637\":1}}],[\"exists\",{\"0\":{\"464\":1},\"1\":{\"464\":6,\"725\":2,\"727\":1}}],[\"exist\",{\"1\":{\"198\":1}}],[\"existing\",{\"1\":{\"186\":1}}],[\"extra\",{\"1\":{\"493\":1}}],[\"extsts\",{\"1\":{\"464\":1}}],[\"extensions\",{\"1\":{\"423\":1}}],[\"extends\",{\"1\":{\"252\":1,\"285\":1,\"300\":1,\"310\":1,\"373\":1}}],[\"externalizable\",{\"1\":{\"261\":1}}],[\"extinguisher\",{\"1\":{\"64\":1}}],[\"ex\",{\"1\":{\"198\":1,\"332\":1,\"727\":1,\"859\":1}}],[\"exec\",{\"1\":{\"724\":3}}],[\"exec命令代表事务结束\",{\"1\":{\"724\":1}}],[\"exectype\",{\"1\":{\"448\":1,\"451\":1}}],[\"executor这四大对象的配合\",{\"1\":{\"453\":1}}],[\"executor的这些特点\",{\"1\":{\"451\":1}}],[\"executor起到了至关重要的作用\",{\"1\":{\"448\":1}}],[\"executortype\",{\"1\":{\"445\":1,\"451\":1}}],[\"executor\",{\"1\":{\"357\":2,\"448\":6,\"453\":1}}],[\"executors\",{\"1\":{\"348\":1,\"349\":1}}],[\"executorservice\",{\"1\":{\"348\":1,\"349\":1,\"362\":1,\"363\":1,\"364\":1}}],[\"executebatch\",{\"1\":{\"451\":1}}],[\"executeforcursor\",{\"1\":{\"450\":1}}],[\"executeformap\",{\"1\":{\"450\":1}}],[\"executeformany\",{\"1\":{\"450\":1}}],[\"executewithresulthandler\",{\"1\":{\"450\":1}}],[\"executequery\",{\"1\":{\"389\":1}}],[\"execute\",{\"1\":{\"348\":1,\"349\":2,\"353\":1,\"357\":2,\"448\":1,\"450\":1}}],[\"executionexception\",{\"1\":{\"300\":1,\"357\":1,\"373\":1}}],[\"exe\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"excel\",{\"1\":{\"413\":2}}],[\"exceptionutil\",{\"1\":{\"450\":1}}],[\"exception\",{\"1\":{\"157\":3,\"274\":1,\"275\":1,\"276\":1,\"300\":1,\"332\":1,\"389\":1,\"450\":1,\"778\":1,\"793\":2,\"813\":4}}],[\"exclusions\",{\"1\":{\"820\":5}}],[\"exclusive\",{\"1\":{\"331\":1}}],[\"excludename\",{\"1\":{\"820\":1}}],[\"exclude\",{\"1\":{\"820\":1}}],[\"exclamation\",{\"1\":{\"64\":4}}],[\"exchange方法交换数据\",{\"1\":{\"349\":1}}],[\"exchanger<string>\",{\"1\":{\"349\":2}}],[\"exchangertest\",{\"1\":{\"349\":1}}],[\"exchanger也可以用于校对工作\",{\"1\":{\"349\":1}}],[\"exchanger可以用于遗传算法\",{\"1\":{\"349\":1}}],[\"exchanger用于进行线程间的数据交换\",{\"1\":{\"349\":1}}],[\"exchanger\",{\"0\":{\"349\":1},\"1\":{\"349\":1}}],[\"exchange\",{\"1\":{\"64\":1,\"349\":2}}],[\"expire\",{\"1\":{\"717\":1,\"727\":5}}],[\"expires\",{\"1\":{\"556\":2}}],[\"explain\",{\"0\":{\"493\":1},\"1\":{\"493\":3}}],[\"exploding\",{\"1\":{\"64\":1}}],[\"expungestaleentry\",{\"1\":{\"314\":1}}],[\"expungestaleentries\",{\"1\":{\"314\":2}}],[\"expr\",{\"1\":{\"242\":4}}],[\"expressionless\",{\"1\":{\"64\":1}}],[\"export\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"exhaling\",{\"1\":{\"64\":1}}],[\"eyeglasses\",{\"1\":{\"64\":1}}],[\"eyebrow\",{\"1\":{\"64\":1}}],[\"eye\",{\"1\":{\"64\":4}}],[\"eyes\",{\"1\":{\"64\":9}}],[\"+helloproperties\",{\"1\":{\"821\":1}}],[\"+heapdumponoutofmemoryerror\",{\"1\":{\"388\":1,\"413\":1}}],[\"+∞\",{\"1\":{\"513\":1}}],[\"+printgctimestamps\",{\"1\":{\"412\":1}}],[\"+printgcdetails\",{\"1\":{\"412\":1}}],[\"+printgc\",{\"1\":{\"412\":1}}],[\"+printcommandlineflags\",{\"1\":{\"406\":1}}],[\"+cmsincrementalmode\",{\"1\":{\"412\":1}}],[\"+count\",{\"1\":{\"245\":1}}],[\"+useconcmarksweepgc\",{\"1\":{\"412\":1}}],[\"+useparalledloldgc\",{\"1\":{\"412\":1}}],[\"+useparallelgc\",{\"1\":{\"406\":1,\"412\":1}}],[\"+useserialgc\",{\"1\":{\"412\":1}}],[\"+name\",{\"1\":{\"793\":1,\"805\":1}}],[\"+n\",{\"1\":{\"373\":1}}],[\"+s2\",{\"1\":{\"294\":1}}],[\"++a\",{\"1\":{\"245\":2}}],[\"++和\",{\"1\":{\"245\":1}}],[\"++\",{\"1\":{\"245\":1}}],[\"+=\",{\"1\":{\"239\":2,\"373\":1}}],[\"+除留余数法\",{\"1\":{\"176\":1}}],[\"+1是因为可能存在页缺失\",{\"1\":{\"359\":1}}],[\"+1\",{\"1\":{\"64\":1,\"325\":1,\"326\":1,\"589\":1}}],[\"+\",{\"1\":{\"36\":2,\"137\":14,\"140\":14,\"147\":14,\"169\":1,\"175\":3,\"181\":4,\"239\":3,\"266\":3,\"315\":1,\"318\":1,\"325\":1,\"341\":1,\"349\":5,\"359\":1,\"373\":3,\"406\":2,\"440\":2,\"445\":1,\"450\":3,\"489\":1,\"498\":1,\"528\":1,\"548\":2,\"576\":2,\"587\":2,\"589\":1,\"591\":4,\"662\":1,\"731\":1,\"763\":1,\"778\":1,\"782\":2,\"783\":3,\"824\":2,\"831\":1,\"832\":1,\"849\":1,\"879\":14}}],[\"xsd\",{\"1\":{\"793\":1}}],[\"xsi\",{\"1\":{\"793\":1}}],[\"xsi=\",{\"1\":{\"793\":1}}],[\"xss\",{\"0\":{\"615\":1},\"1\":{\"615\":8}}],[\"xss2m\",{\"1\":{\"388\":1}}],[\"xloggc\",{\"1\":{\"412\":1}}],[\"xml等\",{\"1\":{\"845\":1}}],[\"xmlschema\",{\"1\":{\"793\":1}}],[\"xmlns\",{\"1\":{\"793\":1}}],[\"xmlns=\",{\"1\":{\"793\":1}}],[\"xmlbeandefinitionreader\",{\"1\":{\"790\":1}}],[\"xmlbeanfactory\",{\"1\":{\"790\":3}}],[\"xmlconfigbuilder\",{\"1\":{\"448\":2}}],[\"xml配置构建器\",{\"1\":{\"448\":1}}],[\"xml如下\",{\"1\":{\"445\":1}}],[\"xml文件中与java代码分离\",{\"1\":{\"433\":1}}],[\"xml\",{\"1\":{\"433\":1,\"435\":1,\"448\":1,\"670\":1,\"784\":1,\"788\":1,\"790\":1,\"791\":1,\"793\":2,\"794\":1,\"819\":3}}],[\"xml中配置数据链接池\",{\"1\":{\"433\":1}}],[\"xml中\",{\"1\":{\"95\":1,\"96\":1,\"97\":1}}],[\"xmn来降低\",{\"1\":{\"416\":1}}],[\"xms8g\",{\"1\":{\"413\":1}}],[\"xms\",{\"1\":{\"412\":2}}],[\"xms20m\",{\"1\":{\"388\":1}}],[\"xmx20m\",{\"1\":{\"388\":1}}],[\"xxxautoconfiguration\",{\"1\":{\"820\":1}}],[\"xxxx\",{\"1\":{\"764\":1}}],[\"xxxxxx\",{\"1\":{\"414\":1}}],[\"xxx\",{\"1\":{\"453\":1,\"489\":1,\"615\":1}}],[\"xx\",{\"1\":{\"269\":1,\"381\":1,\"388\":1,\"400\":3,\"406\":2,\"412\":16,\"413\":1,\"557\":1}}],[\"xid\",{\"1\":{\"208\":4}}],[\"xa模式需要数据库本身支持xa事务\",{\"1\":{\"870\":1}}],[\"xa模式是一种基于两阶段提交\",{\"1\":{\"870\":1}}],[\"xa模式\",{\"1\":{\"870\":1}}],[\"xa接口提供资源管理器与事务管理器之间进行通信的标准接口\",{\"1\":{\"202\":1}}],[\"xa协议采用两阶段提交方式来管理分布式事务\",{\"1\":{\"202\":1}}],[\"xa\",{\"1\":{\"202\":1}}],[\"xfs文件系统\",{\"1\":{\"192\":1}}],[\"x\",{\"1\":{\"36\":2,\"64\":3,\"137\":1,\"140\":1,\"147\":1,\"272\":5,\"322\":1,\"349\":1,\"414\":1,\"418\":2,\"512\":1,\"556\":1,\"879\":1}}],[\"功能功能就是通过代理模式来实现的\",{\"1\":{\"785\":1}}],[\"功能加强的一个子接口\",{\"1\":{\"783\":1}}],[\"功能主要有两个\",{\"1\":{\"748\":1}}],[\"功能支持\",{\"1\":{\"742\":1}}],[\"功能特点\",{\"1\":{\"330\":2}}],[\"功能\",{\"0\":{\"34\":1,\"35\":1,\"37\":1,\"39\":1,\"41\":1},\"1\":{\"428\":1,\"475\":1,\"687\":1,\"741\":1,\"809\":1,\"836\":1}}],[\"可视化依赖关系\",{\"1\":{\"867\":1}}],[\"可视化的堆内存分析工具\",{\"1\":{\"417\":1}}],[\"可满足不同的api管理需求\",{\"1\":{\"864\":1}}],[\"可与spring\",{\"1\":{\"857\":2}}],[\"可使用其他传输层协议如tls\",{\"1\":{\"845\":1}}],[\"可使用unlink命令安全地删除大key\",{\"1\":{\"719\":1}}],[\"可扩展等特点\",{\"1\":{\"835\":1}}],[\"可扩展性和容错性\",{\"1\":{\"828\":1}}],[\"可根据需求进行配置\",{\"1\":{\"830\":1}}],[\"可维护性\",{\"1\":{\"828\":1}}],[\"可伸缩和可维护\",{\"1\":{\"828\":2}}],[\"可是如何业务代码前后前后进行打印日志和参数的校验呢\",{\"1\":{\"804\":1}}],[\"可直接将拦截规则\",{\"1\":{\"784\":1}}],[\"可帮助配置\",{\"1\":{\"784\":1}}],[\"可拓展性\",{\"1\":{\"741\":1}}],[\"可运维行\",{\"1\":{\"741\":1}}],[\"可运⾏\",{\"1\":{\"637\":1}}],[\"可⻅\",{\"1\":{\"592\":1}}],[\"可靠传输的一个重要保障\",{\"1\":{\"580\":1}}],[\"可靠性等特点\",{\"1\":{\"835\":1}}],[\"可靠性\",{\"0\":{\"753\":1},\"1\":{\"559\":1,\"741\":1}}],[\"可存储数据远高于\",{\"1\":{\"566\":1}}],[\"可设置为长时间保持\",{\"1\":{\"566\":1}}],[\"可设置容量队列\",{\"1\":{\"356\":1}}],[\"可接收的字符集\",{\"1\":{\"556\":1}}],[\"可接收媒体资源的类型\",{\"1\":{\"556\":1}}],[\"可串行化\",{\"1\":{\"521\":1}}],[\"可回滚\",{\"1\":{\"467\":1}}],[\"可在它的映射文件中配置\",{\"1\":{\"446\":1}}],[\"可在变量名前\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"可通过配置实现服务熔断和降级\",{\"1\":{\"857\":1}}],[\"可通过\",{\"1\":{\"417\":1}}],[\"可对比正常情况看频率是否正常\",{\"1\":{\"417\":1}}],[\"可全方位监控\",{\"1\":{\"417\":1}}],[\"可初步查看是哪个对象占用了内存\",{\"1\":{\"415\":1}}],[\"可达性分析算法\",{\"1\":{\"390\":1}}],[\"可缓存线程的线程池\",{\"1\":{\"360\":1}}],[\"可实现选择性通知\",{\"1\":{\"330\":1}}],[\"可实现公平锁\",{\"1\":{\"330\":1}}],[\"可重入性怎么实现\",{\"0\":{\"326\":1}}],[\"可重复读\",{\"1\":{\"519\":1,\"520\":1,\"521\":1,\"522\":1,\"810\":1}}],[\"可重复\",{\"1\":{\"152\":1}}],[\"可见性的问题\",{\"1\":{\"321\":1}}],[\"可见性指的是一个线程修改了某一个共享变量的值时\",{\"1\":{\"318\":1}}],[\"可见性是并发编程中非常重要的基础概念\",{\"1\":{\"318\":1}}],[\"可见性\",{\"0\":{\"318\":1},\"1\":{\"318\":3}}],[\"可问的点比较多\",{\"1\":{\"307\":1}}],[\"可选\",{\"1\":{\"275\":1}}],[\"可吹\",{\"1\":{\"232\":1}}],[\"可用作配置中心\",{\"1\":{\"841\":1}}],[\"可用在字段\",{\"1\":{\"784\":1}}],[\"可用内存\",{\"1\":{\"715\":1}}],[\"可用来保存对象的状态\",{\"1\":{\"446\":1}}],[\"可用于恢复数据\",{\"1\":{\"519\":1}}],[\"可用于原子的更新数据和数据的版本号\",{\"1\":{\"340\":1}}],[\"可用于修饰类\",{\"1\":{\"255\":1}}],[\"可用库存数量修改为库存剩余数量\",{\"1\":{\"204\":1}}],[\"可用\",{\"1\":{\"192\":1}}],[\"可用性和分区容忍性\",{\"1\":{\"836\":1}}],[\"可用性比较好的rocketmq\",{\"1\":{\"741\":1}}],[\"可用性得到了保证\",{\"1\":{\"191\":1}}],[\"可用性无法保证\",{\"1\":{\"191\":1}}],[\"可用性\",{\"1\":{\"190\":2,\"192\":1,\"742\":1}}],[\"可能增加团队之间的沟通和协作成本\",{\"1\":{\"829\":1}}],[\"可能包装逻辑\",{\"1\":{\"806\":1}}],[\"可能有多个\",{\"1\":{\"761\":1}}],[\"可能就会出现比较大的问题\",{\"1\":{\"712\":1}}],[\"可能就是出现了缓存穿透问题\",{\"1\":{\"703\":1}}],[\"可能还需要编译内核\",{\"1\":{\"664\":1}}],[\"可能还需要请求后续的\",{\"1\":{\"560\":1}}],[\"可能还会刷入其它事务的日志\",{\"1\":{\"483\":1}}],[\"可能引起sql注入\",{\"1\":{\"440\":1}}],[\"可能多也可能少\",{\"1\":{\"433\":1}}],[\"可能需要部署多个应用程序\",{\"1\":{\"429\":1}}],[\"可能抛异常的位置\",{\"1\":{\"402\":1}}],[\"可能超过了老年代当前可用内存空间\",{\"1\":{\"399\":1}}],[\"可能得到期望之外的值\",{\"1\":{\"340\":1}}],[\"可能是因为机器掉电或者是被人为杀掉的\",{\"1\":{\"727\":1}}],[\"可能是一个复杂计算\",{\"1\":{\"712\":1}}],[\"可能是\",{\"1\":{\"293\":1}}],[\"可能已经挂了\",{\"1\":{\"222\":1}}],[\"可能导致性能瓶颈和增加系统延迟\",{\"1\":{\"829\":1}}],[\"可能导致整个系统的崩溃\",{\"1\":{\"704\":1}}],[\"可能导致的后果就是页表变得非常庞大\",{\"1\":{\"654\":1}}],[\"可能导致索引失效\",{\"1\":{\"498\":3}}],[\"可能导致\",{\"1\":{\"177\":1}}],[\"可能导致元素的丢失\",{\"1\":{\"177\":1}}],[\"可能会在这三个阶段发生丢失\",{\"1\":{\"753\":1}}],[\"可能会被判定为提前结束的字符串而识别不了\",{\"1\":{\"730\":1}}],[\"可能会对业务有一定影响\",{\"1\":{\"703\":1}}],[\"可能会出现这种情况\",{\"1\":{\"591\":1}}],[\"可能会出现这样的问题\",{\"1\":{\"224\":1}}],[\"可能会分配到不同的服务器上\",{\"1\":{\"566\":1}}],[\"可能会现场写一些\",{\"1\":{\"457\":1}}],[\"可能会因为无限创建线程\",{\"1\":{\"364\":1}}],[\"可能会导致级联式的失败\",{\"1\":{\"853\":1}}],[\"可能会导致故障的进一步加剧\",{\"1\":{\"853\":1}}],[\"可能会导致\",{\"1\":{\"727\":1}}],[\"可能会导致阻塞\",{\"1\":{\"719\":1}}],[\"可能会导致执行速度很慢\",{\"1\":{\"718\":1}}],[\"可能会导致数据包时延\",{\"1\":{\"585\":1}}],[\"可能会导致新连接收到旧连接残留的数据包\",{\"1\":{\"578\":1}}],[\"可能会导致索引失效\",{\"1\":{\"498\":1}}],[\"可能会导致oom\",{\"1\":{\"362\":1,\"363\":1}}],[\"可能会导致在阻塞队列中的线程长期处于饥饿状态\",{\"1\":{\"333\":1}}],[\"可能会频繁的\",{\"1\":{\"359\":1}}],[\"可能会遇到什么情况呢\",{\"1\":{\"353\":1}}],[\"可能会溢出\",{\"1\":{\"239\":1}}],[\"可能会有响应时间上的损失\",{\"1\":{\"193\":1}}],[\"可能会有空的内存空间\",{\"1\":{\"154\":1}}],[\"可能会发生这些问题\",{\"1\":{\"177\":1}}],[\"可能的值\",{\"1\":{\"31\":1}}],[\"可配置为系统变量\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"可以高效地处理大规模的日志数据\",{\"1\":{\"877\":1}}],[\"可以帮助用户实时监控和分析日志数据\",{\"1\":{\"877\":1}}],[\"可以帮助用户更好地理解和分析微服务的性能和状态\",{\"1\":{\"876\":1}}],[\"可以帮助我们更便捷地处理集合数据\",{\"1\":{\"294\":1}}],[\"可以选择将日志存储在不同的介质中\",{\"1\":{\"874\":1}}],[\"可以选择将数据保存在内存的\",{\"1\":{\"476\":1}}],[\"可以可视化地追踪请求从一个微服务到另一个微服务的调用情况\",{\"1\":{\"867\":1}}],[\"可以修改请求\",{\"1\":{\"865\":1}}],[\"可以修饰类\",{\"1\":{\"250\":1}}],[\"可以修饰变量\",{\"1\":{\"250\":2}}],[\"可以修饰在类\",{\"1\":{\"250\":1}}],[\"可以与\",{\"1\":{\"876\":1}}],[\"可以与spring\",{\"1\":{\"864\":1}}],[\"可以与feign无缝集成\",{\"1\":{\"850\":1}}],[\"可以灵活地将请求分发给不同的后端服务\",{\"1\":{\"863\":1}}],[\"可以更精确地控制请求的通过速率\",{\"1\":{\"860\":1}}],[\"可以更好的做网络流控\",{\"1\":{\"594\":1}}],[\"可以提高系统的稳定性和可用性\",{\"1\":{\"858\":1}}],[\"可以及时发现和解决服务故障或性能问题\",{\"1\":{\"858\":1}}],[\"可以及时更新注册信息\",{\"1\":{\"834\":1}}],[\"可以返回默认值或执行其他备用逻辑\",{\"1\":{\"858\":1}}],[\"可以返回重复值\",{\"1\":{\"493\":1}}],[\"可以动态修改配置而不需要重启服务\",{\"1\":{\"832\":1}}],[\"可以动态地为类添加一些属性和方法\",{\"1\":{\"804\":1}}],[\"可以独立开发\",{\"1\":{\"828\":1}}],[\"可以简化前端与后端服务的交互\",{\"1\":{\"863\":1}}],[\"可以简化\",{\"1\":{\"819\":1}}],[\"可以快速整合常用依赖\",{\"1\":{\"819\":1}}],[\"可以快速创建独立的\",{\"1\":{\"819\":1}}],[\"可以自动实现客户端的负载均衡\",{\"1\":{\"847\":1}}],[\"可以自动配置\",{\"1\":{\"819\":1}}],[\"可以自动对基本数据类型和它们的包装类进行装箱和拆箱\",{\"1\":{\"240\":1}}],[\"可以添加拦截器\",{\"1\":{\"815\":1}}],[\"可以指定能够触发事务回滚的异常类型\",{\"1\":{\"813\":1}}],[\"可以指定默认的executortype执行器类型\",{\"1\":{\"451\":1}}],[\"可以单独使用\",{\"1\":{\"807\":1}}],[\"可以支持\",{\"1\":{\"799\":1}}],[\"可以解决哪些情况的循环依赖\",{\"1\":{\"799\":1}}],[\"可以解决使用cas进行原子更新时可能出现的\",{\"1\":{\"340\":1}}],[\"可以按照某些规则进行\",{\"1\":{\"796\":1}}],[\"可以创建并管理各种类的对象\",{\"1\":{\"790\":1}}],[\"可以是\",{\"1\":{\"788\":1}}],[\"可以是临界区对象\",{\"1\":{\"645\":1}}],[\"可以方便的实现对程序进行权限拦截\",{\"1\":{\"782\":1}}],[\"可以维护所有对象的创建和依赖关系\",{\"1\":{\"782\":1}}],[\"可以重点对比下\",{\"1\":{\"777\":1}}],[\"可以重新安排语句的执行顺序\",{\"1\":{\"319\":1}}],[\"可以等下一次消息拉取\",{\"1\":{\"771\":1}}],[\"可以像数组一样随机访问每一个条目\",{\"1\":{\"771\":1}}],[\"可以消费\",{\"1\":{\"765\":1}}],[\"可以新建一个临时的topic\",{\"1\":{\"758\":1}}],[\"可以立马启用\",{\"1\":{\"720\":1}}],[\"可以采用以下的api网关选型\",{\"1\":{\"864\":1}}],[\"可以采用这些措施\",{\"1\":{\"853\":1}}],[\"可以采用broker过滤\",{\"1\":{\"762\":1}}],[\"可以采用消息队列的方式\",{\"1\":{\"709\":1}}],[\"可以采用读写分离\",{\"1\":{\"528\":1}}],[\"可以引入消息队列\",{\"1\":{\"708\":1}}],[\"可以利用lua脚本来增强redis的命令\",{\"1\":{\"725\":1}}],[\"可以利用redis本身的redis\",{\"1\":{\"704\":1}}],[\"可以利用配置中心如nacos\",{\"1\":{\"368\":1}}],[\"可以大大提高\",{\"1\":{\"682\":1}}],[\"可以大大减少数据传输大小\",{\"1\":{\"283\":1}}],[\"可以由主节点提供写服务\",{\"1\":{\"682\":1}}],[\"可以由从节点提供服务\",{\"1\":{\"682\":1}}],[\"可以先加载\",{\"1\":{\"680\":1}}],[\"可以先将原对象序列化\",{\"1\":{\"260\":1}}],[\"可以接受数分钟以内的数据丢失\",{\"1\":{\"678\":1}}],[\"可以把订单完成的消息丢进队列里\",{\"1\":{\"740\":1}}],[\"可以把不同的\",{\"1\":{\"704\":1}}],[\"可以把读命令发送到从节点来分担主节点压力\",{\"1\":{\"683\":1}}],[\"可以把rdb文件拷贝道远程机器或者文件系统张\",{\"1\":{\"677\":1}}],[\"可以把参与互联的\",{\"1\":{\"602\":1}}],[\"可以加载aof文件进行数据恢复\",{\"1\":{\"676\":1}}],[\"可以加悲观锁\",{\"1\":{\"225\":1}}],[\"可以满足一般消息队列功能\",{\"1\":{\"669\":1}}],[\"可以继续往下执⾏\",{\"1\":{\"663\":1}}],[\"可以继续活下去\",{\"1\":{\"364\":1}}],[\"可以交换出去\",{\"1\":{\"657\":1}}],[\"可以交给虚拟机的具体实现来自由把握\",{\"1\":{\"422\":1}}],[\"可以随着时间的推移增加等待进程的优先级\",{\"1\":{\"640\":1}}],[\"可以控制\",{\"1\":{\"632\":1}}],[\"可以控制操作系统中所有的内容\",{\"1\":{\"631\":1}}],[\"可以说基本涵盖了面试的必问考点\",{\"1\":{\"620\":1}}],[\"可以说是通俗易懂\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"可以标记\",{\"1\":{\"605\":1}}],[\"可以对服务的执行情况进行监控和统计\",{\"1\":{\"858\":1}}],[\"可以对应多个域名吗\",{\"0\":{\"604\":1}}],[\"可以对集合进行遍历\",{\"1\":{\"444\":1}}],[\"可以这么形容\",{\"1\":{\"597\":1,\"789\":1}}],[\"可以这么说\",{\"1\":{\"506\":1,\"628\":1,\"631\":1,\"791\":1}}],[\"可以再次进入了拥塞避免的算法了\",{\"1\":{\"589\":1}}],[\"可以让发送端根据接收端的实际接收能力控制发送的数据量\",{\"1\":{\"582\":1}}],[\"可以让对象的成员变量在栈上分配和读写\",{\"1\":{\"408\":1}}],[\"可以存任意数据类型\",{\"1\":{\"566\":1}}],[\"可以存储更多的节点数据\",{\"1\":{\"503\":1}}],[\"可以存储的数据为\",{\"1\":{\"502\":1}}],[\"可以存储\",{\"1\":{\"502\":1}}],[\"可以很好的解决了这些风险\",{\"1\":{\"562\":1}}],[\"可以被用作服务注册中心\",{\"1\":{\"835\":1}}],[\"可以被多个请求复用\",{\"1\":{\"558\":1}}],[\"可以被继承吗\",{\"0\":{\"263\":1}}],[\"可以强制开启\",{\"1\":{\"558\":1}}],[\"可以唯一标识一个人\",{\"1\":{\"557\":1}}],[\"可以进行路由\",{\"1\":{\"864\":1}}],[\"可以进行范围查询\",{\"1\":{\"501\":1}}],[\"可以进行自动类型转换\",{\"1\":{\"239\":1}}],[\"可以降低索引的空间占用\",{\"1\":{\"489\":1}}],[\"可以查找出哪些查询语句的执行效率很低\",{\"1\":{\"479\":1}}],[\"可以分为忙等待锁和和⽆忙等待锁\",{\"1\":{\"645\":1}}],[\"可以分为两大步\",{\"1\":{\"448\":1}}],[\"可以分为输入流和输出流\",{\"1\":{\"278\":1}}],[\"可以执行批量操作的sqlsession\",{\"1\":{\"445\":1}}],[\"可以执行非常复杂的查找\",{\"1\":{\"291\":1}}],[\"可以foreach遍历\",{\"1\":{\"445\":1}}],[\"可以用作配置中心\",{\"1\":{\"841\":1}}],[\"可以用作服务注册中心\",{\"1\":{\"835\":1}}],[\"可以用一个服务\",{\"1\":{\"708\":1}}],[\"可以用来记录浏览量\",{\"1\":{\"669\":1}}],[\"可以用来控制多个进程对共享资源的访问\",{\"1\":{\"641\":1}}],[\"可以用来检测网络通不通\",{\"1\":{\"609\":1}}],[\"可以用来设定线程名\",{\"1\":{\"354\":1}}],[\"可以用它来解决超时重发的时间等待问题\",{\"1\":{\"592\":1}}],[\"可以用在动态更新的时候\",{\"1\":{\"444\":1}}],[\"可以配置是否启用延迟加载lazyloadingenabled=true|false\",{\"1\":{\"442\":1}}],[\"可以根据需求编写自己的过滤器逻辑\",{\"1\":{\"865\":1}}],[\"可以根据需求进行动态路由\",{\"1\":{\"864\":1}}],[\"可以根据对象关系模型直接获取\",{\"1\":{\"433\":1}}],[\"可以根据通过设置jvm\",{\"1\":{\"269\":1}}],[\"可以严格控制\",{\"1\":{\"433\":1}}],[\"可以多抓几次做个对比\",{\"1\":{\"418\":1}}],[\"可以从securitycontext或其他地方获取\",{\"1\":{\"849\":1}}],[\"可以从两个方向去优化慢查询\",{\"1\":{\"718\":1}}],[\"可以从以下几个方面排查\",{\"1\":{\"718\":1}}],[\"可以从以下几个方面来说明\",{\"1\":{\"553\":1}}],[\"可以从这些端来监控热点key\",{\"1\":{\"710\":1}}],[\"可以从rdb或者aof中恢复数据\",{\"1\":{\"679\":1}}],[\"可以从几个维度去看这个问题\",{\"1\":{\"503\":1}}],[\"可以从配置或者直接编码来创建sqlsessionfactory\",{\"1\":{\"435\":1}}],[\"可以从处理问题的角度来回答\",{\"1\":{\"413\":1}}],[\"可以从锁的实现\",{\"1\":{\"330\":1}}],[\"可以作为\",{\"1\":{\"391\":1}}],[\"可以划分为以下几个区域\",{\"1\":{\"379\":1}}],[\"可以划分为字节流和字符流\",{\"1\":{\"278\":1}}],[\"可以去看看\",{\"1\":{\"372\":1}}],[\"可以切换到stop状态\",{\"1\":{\"367\":1}}],[\"可以切换到shutdown状态\",{\"1\":{\"367\":1}}],[\"可以达到重复利用的效果\",{\"1\":{\"351\":1}}],[\"可以靠按序申请资源来预防\",{\"1\":{\"342\":1,\"648\":1}}],[\"可以主动释放它占有的资源\",{\"1\":{\"342\":1,\"648\":1}}],[\"可以一次性请求所有的资源\",{\"1\":{\"342\":1}}],[\"可以原子更新一个布尔类型的标记位和引用类型\",{\"1\":{\"340\":1}}],[\"可以考虑使用数据异构的方式异构到\",{\"1\":{\"490\":1}}],[\"可以考虑根绝情况将它拆分成cpu密集型和io密集型任务\",{\"1\":{\"359\":1}}],[\"可以考虑合并多个变量\",{\"1\":{\"338\":1}}],[\"可以考虑改用锁来保证操作的原子性\",{\"1\":{\"338\":1}}],[\"可以类比一个去医院就诊的例子\",{\"1\":{\"325\":1}}],[\"可以叫做内部锁\",{\"1\":{\"325\":1}}],[\"可以看作子主题\",{\"1\":{\"744\":1}}],[\"可以看作是一个逻辑上的\",{\"1\":{\"483\":1}}],[\"可以看做消息的归类\",{\"1\":{\"744\":1}}],[\"可以看看configurableapplicationcontext\",{\"1\":{\"793\":1}}],[\"可以看看\",{\"1\":{\"551\":1,\"793\":1}}],[\"可以看一下一个大概的mybatis通用分页拦截器\",{\"1\":{\"454\":1}}],[\"可以看到eureka和zookeeper的最大区别是一个支持ap\",{\"1\":{\"836\":1}}],[\"可以看到entry的key继承了\",{\"1\":{\"310\":1}}],[\"可以看到日志打印了入参\",{\"1\":{\"805\":1}}],[\"可以看到所谓单例注册\",{\"1\":{\"788\":1}}],[\"可以看到每个磁盘块包含几个数据项\",{\"1\":{\"501\":1}}],[\"可以看到有这么一行\",{\"1\":{\"406\":1}}],[\"可以看到相应的字节码指令\",{\"1\":{\"325\":1}}],[\"可以看出\",{\"1\":{\"191\":1,\"203\":1,\"280\":1}}],[\"可以thread类中定义了一个类型为threadlocal\",{\"1\":{\"310\":1}}],[\"可以将追踪数据发送到\",{\"1\":{\"868\":1}}],[\"可以将追踪信息发送到\",{\"1\":{\"868\":1}}],[\"可以将请求映射到后端的服务实例或url上\",{\"1\":{\"865\":1}}],[\"可以将遍布应用各处的功能分离出来形成可重用的组件\",{\"1\":{\"804\":1}}],[\"可以将\",{\"1\":{\"293\":1}}],[\"可以参与到处理的逻辑中\",{\"1\":{\"289\":1}}],[\"可以理解成生活中的一个人的一些小装扮\",{\"1\":{\"287\":1}}],[\"可以理解为程序和数据库之间的桥梁\",{\"1\":{\"435\":1}}],[\"可以理解为\",{\"1\":{\"251\":1}}],[\"可以认为是一个指纹\",{\"1\":{\"282\":1}}],[\"可以跟多个\",{\"1\":{\"275\":1}}],[\"可以阻断\",{\"1\":{\"256\":1}}],[\"可以访问类的所有成员变量和方法\",{\"1\":{\"254\":1}}],[\"可以使⽤\",{\"1\":{\"254\":1}}],[\"可以使用idl生成不同语言的客户端和服务端代码\",{\"1\":{\"845\":1}}],[\"可以使用http作为通信协议实现不同语言之间的通信\",{\"1\":{\"845\":1,\"846\":1}}],[\"可以使用统计命令redis\",{\"1\":{\"718\":1}}],[\"可以使用客户端的本地存储\",{\"1\":{\"566\":1}}],[\"可以使用索引\",{\"1\":{\"489\":1}}],[\"可以使用\",{\"1\":{\"418\":1,\"433\":1,\"461\":1,\"489\":1,\"566\":2,\"723\":1}}],[\"可以使用命令\",{\"1\":{\"406\":1}}],[\"可以使用exchange\",{\"1\":{\"349\":1}}],[\"可以使用jdk自带的命令行工具排查\",{\"1\":{\"343\":1}}],[\"可以使用访问控制符来保护对类\",{\"1\":{\"250\":1}}],[\"可以使用分布式锁的方式\",{\"1\":{\"225\":1}}],[\"可以使用linkedhashmap\",{\"1\":{\"182\":1}}],[\"可以使用点操作符\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"可以有0个\",{\"1\":{\"744\":1}}],[\"可以有效降低主节点负载和需要传送给从节点的数据量\",{\"1\":{\"683\":1}}],[\"可以有效的防止sql注入\",{\"1\":{\"439\":1}}],[\"可以有不同修饰符\",{\"1\":{\"249\":1}}],[\"可以有多个class定义\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"可以抛出不同的异常\",{\"1\":{\"249\":1}}],[\"可以正确编译\",{\"1\":{\"239\":1}}],[\"可以准备一个队列来保存暂时处理不了的请求\",{\"1\":{\"227\":1}}],[\"可以通过在微服务中添加相应的依赖和配置\",{\"1\":{\"868\":1}}],[\"可以通过实现requestinterceptor接口来定义拦截器\",{\"1\":{\"849\":1}}],[\"可以通过实现这个接口\",{\"1\":{\"806\":1}}],[\"可以通过注解快捷地测试\",{\"1\":{\"782\":1}}],[\"可以通过零拷贝的方式\",{\"1\":{\"773\":1}}],[\"可以通过配置可靠性优先的\",{\"1\":{\"755\":1}}],[\"可以通过配置中的\",{\"1\":{\"31\":1}}],[\"可以通过管道一次性将要执行的多条命令发送给服务端\",{\"1\":{\"726\":1}}],[\"可以通过让消费者休眠的方式的方式来处理\",{\"1\":{\"722\":1}}],[\"可以通过验证\",{\"1\":{\"613\":1}}],[\"可以通过\",{\"1\":{\"423\":1,\"435\":1,\"557\":1,\"677\":1,\"804\":1}}],[\"可以通过这个参数设置这个年龄值\",{\"1\":{\"400\":1}}],[\"可以通过回溯日志的方式来撤销正在处理的已经执行成功的操作\",{\"1\":{\"371\":1}}],[\"可以通过调用线程池的shutdown或shutdownnow方法来关闭线程池\",{\"1\":{\"358\":1}}],[\"可以通过set\",{\"1\":{\"306\":1}}],[\"可以通过java内置的等待\",{\"1\":{\"306\":1}}],[\"可以通过反射获取注解信息\",{\"1\":{\"287\":1}}],[\"可以通过连接池机制改善\",{\"1\":{\"280\":1}}],[\"可以通过限制状态的流动来完成幂等\",{\"1\":{\"225\":1}}],[\"可以表示为\",{\"1\":{\"213\":1}}],[\"可以不做处理\",{\"1\":{\"205\":1}}],[\"可以不需要再重新计算每一个元素的哈希值\",{\"1\":{\"174\":1}}],[\"可以在应用启动时预热feign客户端\",{\"1\":{\"848\":1}}],[\"可以在调用远程服务时提供容错和断路器功能\",{\"1\":{\"847\":1}}],[\"可以在类中定义一个\",{\"1\":{\"798\":1}}],[\"可以在项目启动的时候自动进行加载\",{\"1\":{\"711\":1}}],[\"可以在代理端进行收集统计\",{\"1\":{\"710\":1}}],[\"可以在不影响集群对外服务的情况下\",{\"1\":{\"699\":1}}],[\"可以在一台机器上启动多个redis实例\",{\"1\":{\"673\":1}}],[\"可以在业务的基建中加入对慢\",{\"1\":{\"485\":1}}],[\"可以在sql内直接书写带有物理分页的参数来完成物理分页功能\",{\"1\":{\"454\":1}}],[\"可以在多个sqlsession之间共享\",{\"1\":{\"446\":1}}],[\"可以在多个系统平台上运行\",{\"1\":{\"234\":1}}],[\"可以在多线程下并发使用\",{\"1\":{\"157\":1}}],[\"可以在表中增加一个timestamp或者version字段\",{\"1\":{\"225\":1}}],[\"可以在订单库新增一个消息表\",{\"1\":{\"205\":1}}],[\"可以直接把内核缓冲区⾥的数据拷⻉到\",{\"1\":{\"662\":1}}],[\"可以直接使用字符串存储\",{\"1\":{\"466\":1}}],[\"可以直接⽤接⼝名调⽤\",{\"1\":{\"252\":1}}],[\"可以直接用本地锁来实现对竞争资源的加锁\",{\"1\":{\"194\":1}}],[\"可以直接通过数组下标获取\",{\"1\":{\"154\":1}}],[\"可以实现高可用性\",{\"1\":{\"838\":1}}],[\"可以实现该接口\",{\"1\":{\"815\":1}}],[\"可以实现分布式消息事务\",{\"1\":{\"765\":1}}],[\"可以实现本机任意两个进程通信\",{\"1\":{\"641\":1}}],[\"可以实现按插入的顺序或访问顺序排序\",{\"1\":{\"183\":1}}],[\"可以实现线程安全的\",{\"1\":{\"178\":1}}],[\"可以只选择错误和提醒\",{\"1\":{\"113\":1}}],[\"第四种可以而第五种不可以的原因是\",{\"1\":{\"799\":1}}],[\"第四次挥手\",{\"1\":{\"574\":1}}],[\"第⼆点\",{\"1\":{\"664\":1}}],[\"第⼆是对端⼝资源的占⽤\",{\"1\":{\"579\":1}}],[\"第⼀点\",{\"1\":{\"664\":1}}],[\"第⼀份\",{\"1\":{\"592\":1}}],[\"第⼀是内存资源占⽤\",{\"1\":{\"579\":1}}],[\"第\",{\"0\":{\"572\":1},\"1\":{\"572\":1,\"793\":6}}],[\"第三种就是i\",{\"1\":{\"672\":1}}],[\"第三种选择\",{\"1\":{\"672\":1}}],[\"第三次挥手\",{\"1\":{\"574\":1}}],[\"第三次握手服务端为收到客户端发送过来的\",{\"1\":{\"570\":1}}],[\"第三次握手\",{\"1\":{\"568\":1,\"569\":1}}],[\"第三次破坏\",{\"1\":{\"427\":1}}],[\"第三张表是\",{\"1\":{\"534\":1}}],[\"第三阶段\",{\"1\":{\"532\":1}}],[\"第三层包含了存储引擎\",{\"1\":{\"472\":1}}],[\"第三范式\",{\"1\":{\"460\":1}}],[\"第2种\",{\"1\":{\"437\":1}}],[\"第2句先读i的值\",{\"1\":{\"318\":1}}],[\"第1种\",{\"1\":{\"437\":1}}],[\"第1句是基本类型赋值\",{\"1\":{\"318\":1}}],[\"第3和第4句其实是等效的\",{\"1\":{\"318\":1}}],[\"第二种是业务端\",{\"1\":{\"757\":1}}],[\"第二种选择\",{\"1\":{\"672\":1}}],[\"第二种方法\",{\"1\":{\"445\":1}}],[\"第二张表是\",{\"1\":{\"534\":1}}],[\"第二\",{\"1\":{\"490\":1,\"686\":1}}],[\"第二范式\",{\"1\":{\"460\":1}}],[\"第二次获取bean\",{\"1\":{\"788\":1}}],[\"第二次就是根据第一次得到的物理地址访问内存取出数据\",{\"1\":{\"653\":1}}],[\"第二次挥手\",{\"1\":{\"574\":1}}],[\"第二次握手传回了\",{\"0\":{\"571\":1}}],[\"第二次握手客户端未收到服务端响应的\",{\"1\":{\"570\":1}}],[\"第二次握手\",{\"1\":{\"568\":1,\"569\":1}}],[\"第二次执行\",{\"1\":{\"470\":1}}],[\"第二次破坏\",{\"1\":{\"427\":1}}],[\"第二次增加2^2\",{\"1\":{\"171\":1}}],[\"第二部分是类型指针\",{\"1\":{\"385\":1}}],[\"第二步和第三步就可能会重排序\",{\"1\":{\"319\":1}}],[\"第二阶段\",{\"1\":{\"214\":1,\"532\":1}}],[\"第二个文件为00000000001073741824\",{\"1\":{\"771\":1}}],[\"第二个方面是在扩容时\",{\"1\":{\"168\":1}}],[\"第二个显示\",{\"1\":{\"29\":2}}],[\"第一级缓存失效的基础上\",{\"1\":{\"704\":1}}],[\"第一种是保证消费逻辑的幂等性\",{\"1\":{\"757\":1}}],[\"第一种就是阻塞io模型\",{\"1\":{\"672\":1}}],[\"第一种选择\",{\"1\":{\"672\":1}}],[\"第一种方法\",{\"1\":{\"445\":1}}],[\"第一\",{\"1\":{\"490\":1}}],[\"第一范式\",{\"1\":{\"460\":1}}],[\"第一部分存储对象自身的运行时数据\",{\"1\":{\"385\":1}}],[\"第一次是为了判断是否需要属性填充\",{\"1\":{\"802\":1}}],[\"第一次获取bean\",{\"1\":{\"788\":1}}],[\"第一次挥手\",{\"1\":{\"574\":1}}],[\"第一次握手不能携带数据是出于安全的考虑\",{\"1\":{\"572\":1}}],[\"第一次握手服务端未收到\",{\"1\":{\"570\":1}}],[\"第一次握手\",{\"1\":{\"568\":1}}],[\"第一次破坏\",{\"1\":{\"427\":1}}],[\"第一次请求接口超时了\",{\"1\":{\"224\":1}}],[\"第一次增加1^2个位置\",{\"1\":{\"171\":1}}],[\"第一阶段\",{\"1\":{\"214\":1,\"532\":1}}],[\"第一个问题是redis的高可用问题\",{\"1\":{\"686\":1}}],[\"第一个参数对应的主键值\",{\"1\":{\"488\":1}}],[\"第一个原因是为了方便哈希取余\",{\"1\":{\"168\":1}}],[\"第一个显示\",{\"1\":{\"29\":1}}],[\"第一版\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"渐渐演变到了分布式的soa\",{\"1\":{\"828\":1}}],[\"渐进式地完成的\",{\"1\":{\"731\":1}}],[\"渐进式rehash\",{\"1\":{\"731\":1}}],[\"渐变\",{\"0\":{\"30\":1,\"31\":1,\"32\":1}}],[\"渐出\",{\"1\":{\"27\":1}}],[\"渐入\",{\"1\":{\"27\":1}}],[\"dynamicadvisedinterceptor\",{\"1\":{\"813\":1}}],[\"d的答案\",{\"1\":{\"672\":1}}],[\"d举手\",{\"1\":{\"672\":1}}],[\"dhcp\",{\"1\":{\"605\":1}}],[\"dharma\",{\"1\":{\"64\":1}}],[\"dsack\",{\"1\":{\"594\":1}}],[\"dml\",{\"1\":{\"467\":1,\"479\":1}}],[\"ddos\",{\"0\":{\"614\":1},\"1\":{\"573\":1,\"614\":6}}],[\"ddl\",{\"1\":{\"467\":1,\"479\":1}}],[\"dd\",{\"1\":{\"463\":1}}],[\"ddd1\",{\"1\":{\"294\":3}}],[\"ddd2\",{\"1\":{\"294\":3}}],[\"db\",{\"1\":{\"523\":7}}],[\"dbtype\",{\"1\":{\"453\":1}}],[\"dbms\",{\"1\":{\"439\":1}}],[\"d=128\",{\"1\":{\"269\":1}}],[\"dns\",{\"0\":{\"547\":1,\"600\":1,\"612\":1},\"1\":{\"192\":1,\"542\":1,\"546\":2,\"547\":6,\"600\":2,\"604\":1,\"612\":10,\"835\":1,\"836\":1}}],[\"dna\",{\"1\":{\"64\":1}}],[\"d1=d2\",{\"1\":{\"191\":1}}],[\"djibouti\",{\"1\":{\"64\":1}}],[\"dvd\",{\"1\":{\"64\":1}}],[\"dubbo框架本身提供的熔断降级机制\",{\"1\":{\"857\":1}}],[\"dubbo|dubbo自带熔断降级机制|\",{\"1\":{\"857\":1}}],[\"dubbo可以使用http协议作为通信方式\",{\"1\":{\"846\":1}}],[\"dubbo更多的是作为一个rpc框架来问\",{\"1\":{\"831\":1}}],[\"dubbo更多地被认为是一个高性能的rpc\",{\"1\":{\"830\":1}}],[\"dubbo负载均衡策略\",{\"1\":{\"831\":1}}],[\"dubbo\",{\"1\":{\"622\":1,\"824\":2,\"826\":1,\"830\":3,\"831\":3,\"877\":1}}],[\"durability\",{\"1\":{\"519\":1}}],[\"dumping\",{\"1\":{\"418\":1}}],[\"dump堆内存文件\",{\"1\":{\"417\":1}}],[\"dump\",{\"1\":{\"399\":1,\"413\":3,\"415\":3,\"417\":2,\"418\":11,\"527\":1,\"677\":1}}],[\"dumpling\",{\"1\":{\"64\":1}}],[\"duplicate\",{\"1\":{\"594\":1}}],[\"duplicatekeyexception异常\",{\"1\":{\"225\":1}}],[\"dup\",{\"1\":{\"266\":1}}],[\"duck\",{\"1\":{\"64\":1}}],[\"drdos\",{\"0\":{\"614\":1},\"1\":{\"614\":1}}],[\"drivermanager\",{\"1\":{\"389\":1}}],[\"driver\",{\"1\":{\"389\":1}}],[\"drink\",{\"1\":{\"64\":1}}],[\"dress\",{\"1\":{\"64\":1}}],[\"drum\",{\"1\":{\"64\":3}}],[\"dragon\",{\"1\":{\"64\":2}}],[\"drop\",{\"0\":{\"467\":1},\"1\":{\"64\":1,\"467\":2}}],[\"droplet\",{\"1\":{\"64\":1}}],[\"drops\",{\"1\":{\"64\":1}}],[\"dromedary\",{\"1\":{\"64\":1}}],[\"drooling\",{\"1\":{\"64\":1}}],[\"developer\",{\"1\":{\"806\":4}}],[\"development\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"233\":1,\"879\":1}}],[\"deadline\",{\"1\":{\"772\":1}}],[\"death\",{\"1\":{\"614\":1}}],[\"deaf\",{\"1\":{\"64\":3}}],[\"denial\",{\"1\":{\"614\":3}}],[\"denmark\",{\"1\":{\"64\":1}}],[\"del\",{\"1\":{\"727\":5}}],[\"delete等\",{\"1\":{\"845\":1}}],[\"deletemapping\",{\"1\":{\"784\":1}}],[\"delete\",{\"0\":{\"467\":1},\"1\":{\"467\":2,\"552\":1}}],[\"delayedworkqueue\",{\"1\":{\"365\":1}}],[\"delayqueue\",{\"1\":{\"356\":2,\"365\":2}}],[\"dependency>\",{\"1\":{\"805\":1,\"821\":3}}],[\"dependencies\",{\"1\":{\"802\":1}}],[\"dept\",{\"1\":{\"436\":4,\"445\":2}}],[\"deptid\",{\"1\":{\"436\":6}}],[\"deployment\",{\"1\":{\"427\":1}}],[\"departure\",{\"1\":{\"64\":1}}],[\"department\",{\"1\":{\"64\":1}}],[\"determined\",{\"1\":{\"267\":1}}],[\"detective\",{\"1\":{\"64\":3}}],[\"defaultlistablebeanfactory\",{\"1\":{\"790\":1}}],[\"defaultmqproducer\",{\"1\":{\"763\":2}}],[\"defaultmqpushconsumer\",{\"1\":{\"762\":4}}],[\"defaultsqlsession\",{\"1\":{\"448\":1}}],[\"defaultsqlsessionfactory\",{\"1\":{\"448\":1}}],[\"default\",{\"1\":{\"173\":2,\"181\":1,\"250\":1,\"252\":1,\"291\":1,\"810\":1,\"820\":2,\"859\":1}}],[\"demo\",{\"0\":{\"920\":1},\"1\":{\"352\":1,\"788\":1,\"805\":1,\"821\":2},\"2\":{\"127\":1,\"130\":1}}],[\"de\",{\"1\":{\"64\":2}}],[\"derelict\",{\"1\":{\"64\":1}}],[\"destruction\",{\"1\":{\"793\":1}}],[\"destroymethod\",{\"1\":{\"793\":2}}],[\"destroymethod=\",{\"1\":{\"784\":1}}],[\"destroy方法\",{\"1\":{\"793\":2}}],[\"destroy\",{\"1\":{\"784\":3,\"793\":3}}],[\"des\",{\"1\":{\"616\":1}}],[\"desc\",{\"1\":{\"441\":1,\"805\":1}}],[\"desert\",{\"1\":{\"64\":2}}],[\"desktop\",{\"1\":{\"64\":1}}],[\"desk\",{\"1\":{\"64\":1}}],[\"dec\",{\"1\":{\"556\":1}}],[\"decimal\",{\"1\":{\"465\":3}}],[\"deciduous\",{\"1\":{\"64\":1}}],[\"decorative\",{\"1\":{\"64\":1}}],[\"decoration\",{\"1\":{\"64\":1}}],[\"deer\",{\"1\":{\"64\":1}}],[\"daofactory\",{\"1\":{\"795\":6}}],[\"dao\",{\"1\":{\"783\":1,\"784\":1,\"798\":1}}],[\"dao接口中\",{\"1\":{\"95\":1,\"96\":1,\"97\":1}}],[\"days\",{\"1\":{\"354\":1}}],[\"daemon\",{\"1\":{\"305\":1,\"418\":1}}],[\"da\",{\"1\":{\"64\":1}}],[\"david\",{\"1\":{\"64\":1}}],[\"dagger\",{\"1\":{\"64\":1}}],[\"datetime\",{\"0\":{\"463\":1},\"1\":{\"463\":5}}],[\"date\",{\"1\":{\"64\":1,\"491\":2}}],[\"data\",{\"1\":{\"19\":1,\"29\":1,\"31\":1,\"33\":1,\"348\":1,\"385\":1,\"404\":1,\"526\":1}}],[\"dark\",{\"1\":{\"64\":1}}],[\"dart\",{\"1\":{\"64\":1}}],[\"dango\",{\"1\":{\"64\":1}}],[\"dancers\",{\"1\":{\"64\":1}}],[\"dancer\",{\"1\":{\"64\":1}}],[\"dancing\",{\"1\":{\"64\":4}}],[\"dashboard或api对配置进行了修改\",{\"1\":{\"843\":1}}],[\"dashboard\",{\"1\":{\"831\":1,\"832\":1}}],[\"dash\",{\"1\":{\"64\":2}}],[\"di\",{\"0\":{\"787\":1},\"1\":{\"782\":1,\"783\":1,\"787\":3}}],[\"did\",{\"1\":{\"445\":2}}],[\"digit=character\",{\"1\":{\"270\":1}}],[\"digit\",{\"1\":{\"270\":2}}],[\"divoire\",{\"1\":{\"64\":1}}],[\"division\",{\"1\":{\"64\":1}}],[\"dividers\",{\"1\":{\"64\":1}}],[\"diving\",{\"1\":{\"64\":1}}],[\"diya\",{\"1\":{\"64\":1}}],[\"diamond\",{\"1\":{\"64\":5}}],[\"diamonds\",{\"1\":{\"64\":1}}],[\"diagonal\",{\"1\":{\"64\":1}}],[\"diego\",{\"1\":{\"64\":1}}],[\"die\",{\"1\":{\"64\":1}}],[\"dispatcheservlet\",{\"1\":{\"815\":1}}],[\"dispatcherservlet\",{\"1\":{\"815\":4,\"816\":7,\"817\":3}}],[\"disposablebean\",{\"1\":{\"793\":3}}],[\"displaced\",{\"1\":{\"329\":1}}],[\"distributed\",{\"1\":{\"526\":1,\"614\":2}}],[\"distinct\",{\"1\":{\"470\":1,\"492\":1}}],[\"dish\",{\"1\":{\"64\":1}}],[\"disk\",{\"1\":{\"64\":1}}],[\"discardpolicy\",{\"1\":{\"355\":1}}],[\"discardoldestpolicy\",{\"1\":{\"355\":1}}],[\"disc\",{\"1\":{\"64\":1}}],[\"disappointed\",{\"1\":{\"64\":2}}],[\"disguised\",{\"1\":{\"64\":1}}],[\"dizzy\",{\"1\":{\"64\":2}}],[\"doaround\",{\"1\":{\"805\":1}}],[\"doafter\",{\"1\":{\"805\":1}}],[\"dobefore\",{\"1\":{\"805\":1}}],[\"documented\",{\"1\":{\"805\":1}}],[\"docreatebean\",{\"1\":{\"802\":2}}],[\"docommit\",{\"1\":{\"203\":1}}],[\"docommit三个阶段\",{\"1\":{\"203\":1}}],[\"dos\",{\"0\":{\"614\":1},\"1\":{\"611\":1,\"614\":3}}],[\"doquery\",{\"1\":{\"448\":1}}],[\"dom\",{\"1\":{\"615\":1}}],[\"domain\",{\"1\":{\"444\":1,\"547\":1}}],[\"dominican\",{\"1\":{\"64\":1}}],[\"dominica\",{\"1\":{\"64\":1}}],[\"dot\",{\"1\":{\"64\":1}}],[\"dotted\",{\"1\":{\"64\":1}}],[\"double\",{\"1\":{\"64\":2,\"137\":1,\"140\":1,\"147\":1,\"238\":2,\"239\":1,\"263\":1,\"285\":1,\"321\":3,\"465\":2,\"879\":1}}],[\"doughnut\",{\"1\":{\"64\":1}}],[\"do\",{\"1\":{\"64\":1,\"341\":1,\"727\":3}}],[\"door\",{\"1\":{\"64\":1}}],[\"dollar\",{\"1\":{\"64\":2}}],[\"dolls\",{\"1\":{\"64\":2}}],[\"dolphin\",{\"1\":{\"64\":1}}],[\"dodo\",{\"1\":{\"64\":1}}],[\"dove\",{\"1\":{\"64\":1}}],[\"dogetbean方法\",{\"1\":{\"793\":1}}],[\"dog2\",{\"1\":{\"64\":1}}],[\"dog\",{\"1\":{\"64\":3,\"150\":1,\"186\":1,\"188\":1,\"229\":1,\"285\":2,\"294\":1,\"296\":1,\"375\":1,\"431\":1,\"454\":1,\"456\":1,\"538\":1,\"540\":1,\"617\":1,\"626\":1,\"664\":1,\"666\":1,\"736\":1,\"738\":1,\"778\":1,\"780\":1,\"824\":1,\"826\":1,\"877\":1}}],[\"dontstop\",{\"1\":{\"388\":2}}],[\"donkey\",{\"1\":{\"64\":1}}],[\"don\",{\"1\":{\"64\":1,\"813\":1}}],[\"downwards\",{\"1\":{\"64\":1}}],[\"down\",{\"1\":{\"23\":1,\"64\":9,\"239\":1,\"688\":2,\"689\":2}}],[\"d\",{\"0\":{\"269\":1,\"594\":1},\"1\":{\"36\":1,\"255\":1,\"269\":1,\"594\":2,\"603\":2,\"672\":1}}],[\"o的性能\",{\"1\":{\"773\":1}}],[\"o复用模型\",{\"1\":{\"672\":1}}],[\"o就是\",{\"1\":{\"663\":3}}],[\"o模型中\",{\"1\":{\"664\":1}}],[\"o模型\",{\"1\":{\"663\":1}}],[\"o多路复⽤技术\",{\"1\":{\"663\":1}}],[\"o多路复用吗\",{\"0\":{\"672\":1}}],[\"o多路复用三种实现机制\",{\"1\":{\"664\":1}}],[\"o多路复用\",{\"0\":{\"664\":1},\"1\":{\"663\":2,\"664\":2,\"672\":1}}],[\"o有一个问题\",{\"1\":{\"663\":1}}],[\"o性能\",{\"1\":{\"662\":1}}],[\"o接口从磁盘读取或者写入\",{\"1\":{\"662\":1}}],[\"o设备等\",{\"1\":{\"642\":1}}],[\"o操作之后又得重新排队\",{\"1\":{\"640\":1}}],[\"o密集型进程也不利\",{\"1\":{\"640\":1}}],[\"o管理\",{\"1\":{\"629\":1}}],[\"o>\",{\"1\":{\"458\":1}}],[\"oss项目\",{\"1\":{\"830\":1}}],[\"os从物理磁盘上访问读取文件的同时\",{\"1\":{\"772\":1}}],[\"os会先写入至cache内\",{\"1\":{\"772\":1}}],[\"os所付出的开销显著大于在创建或撤销线程时的开销\",{\"1\":{\"642\":1}}],[\"osi\",{\"1\":{\"542\":13}}],[\"osgi\",{\"1\":{\"427\":3}}],[\"os\",{\"1\":{\"418\":1,\"556\":1,\"626\":1,\"730\":1}}],[\"oomtests\",{\"1\":{\"389\":1}}],[\"oomobject\",{\"1\":{\"388\":2}}],[\"oom\",{\"1\":{\"388\":3,\"389\":1,\"413\":1,\"417\":1}}],[\"oopmap\",{\"0\":{\"402\":1},\"1\":{\"402\":2}}],[\"oop\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"owneristhread\",{\"1\":{\"325\":1}}],[\"owner\",{\"1\":{\"325\":6}}],[\"owl\",{\"1\":{\"64\":1}}],[\"otherwise>\",{\"1\":{\"444\":1}}],[\"otherwise\",{\"1\":{\"267\":1,\"444\":1}}],[\"otter\",{\"1\":{\"64\":1}}],[\"oak\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"obj属性\",{\"1\":{\"732\":1}}],[\"obj=invocation\",{\"1\":{\"453\":2}}],[\"obj\",{\"1\":{\"272\":1,\"389\":2,\"392\":10,\"453\":2,\"790\":2,\"791\":2,\"806\":1}}],[\"objectfactory<\",{\"1\":{\"800\":1}}],[\"objectfactory等等\",{\"1\":{\"448\":1}}],[\"objectmonitor\",{\"1\":{\"325\":1}}],[\"objectmonitor有两个队列\",{\"1\":{\"325\":1}}],[\"objectmonitor的工作原理\",{\"1\":{\"325\":1}}],[\"objectmapper\",{\"1\":{\"283\":1,\"805\":2}}],[\"object作为value的结构\",{\"1\":{\"312\":1}}],[\"objectoutputstream\",{\"1\":{\"283\":1}}],[\"objects\",{\"1\":{\"257\":3}}],[\"object>earlysingletonobjects\",{\"1\":{\"800\":1}}],[\"object>singletonobjects\",{\"1\":{\"800\":1}}],[\"object>>\",{\"1\":{\"97\":1}}],[\"object>\",{\"1\":{\"95\":1,\"436\":1,\"788\":1}}],[\"object\",{\"0\":{\"271\":1,\"272\":1},\"1\":{\"166\":1,\"256\":1,\"257\":1,\"258\":1,\"260\":1,\"267\":4,\"272\":5,\"285\":1,\"310\":2,\"325\":1,\"341\":1,\"357\":1,\"389\":8,\"392\":8,\"425\":4,\"433\":1,\"448\":2,\"450\":8,\"453\":5,\"788\":6,\"793\":4,\"801\":1,\"802\":1,\"805\":2,\"806\":14},\"2\":{\"1\":2,\"3\":2,\"44\":2,\"46\":2,\"51\":2,\"54\":2,\"57\":2,\"60\":2,\"63\":2,\"65\":2,\"68\":2,\"77\":2,\"80\":2,\"83\":2,\"92\":2,\"98\":2,\"101\":2,\"104\":2,\"117\":2,\"120\":2,\"123\":2,\"126\":2,\"129\":2,\"132\":2,\"135\":2,\"138\":2,\"141\":2,\"144\":2,\"146\":2,\"148\":2,\"187\":2,\"228\":2,\"295\":2,\"374\":2,\"430\":2,\"455\":2,\"539\":2,\"618\":2,\"625\":2,\"665\":2,\"737\":2,\"779\":2,\"825\":2,\"878\":2,\"880\":2,\"883\":2,\"885\":2,\"887\":2,\"889\":2,\"891\":2,\"893\":2,\"895\":2,\"897\":2,\"899\":2,\"901\":2,\"903\":2,\"905\":2,\"907\":2,\"909\":2,\"911\":2,\"913\":2,\"915\":2,\"917\":2,\"919\":2,\"921\":2,\"923\":2,\"925\":2,\"927\":2,\"929\":2,\"931\":2,\"933\":2}}],[\"obiect>>类型\",{\"1\":{\"97\":1}}],[\"o2\",{\"1\":{\"64\":1}}],[\"opt\",{\"1\":{\"658\":1}}],[\"optimistic\",{\"1\":{\"515\":1}}],[\"optional>\",{\"1\":{\"821\":1}}],[\"optional=optional\",{\"1\":{\"293\":1}}],[\"optional<string>\",{\"1\":{\"293\":1,\"294\":1}}],[\"optional是用于防范nullpointerexception\",{\"1\":{\"293\":1}}],[\"optional\",{\"0\":{\"293\":1},\"1\":{\"291\":3,\"293\":6,\"294\":1,\"450\":1}}],[\"ophiuchus\",{\"1\":{\"64\":1}}],[\"openid\",{\"1\":{\"863\":1}}],[\"open=\",{\"1\":{\"444\":1}}],[\"opensession\",{\"1\":{\"435\":1,\"445\":5,\"451\":1}}],[\"open\",{\"1\":{\"64\":6,\"73\":1,\"74\":2,\"76\":1,\"445\":2}}],[\"oriented\",{\"1\":{\"828\":1}}],[\"organization\",{\"1\":{\"542\":1}}],[\"org\",{\"1\":{\"435\":2,\"453\":1,\"793\":4,\"813\":1,\"821\":1}}],[\"orm是通过使用描述对象和数据库之间映射的元数据\",{\"1\":{\"433\":1}}],[\"orm是什么\",{\"1\":{\"433\":1}}],[\"orm\",{\"1\":{\"433\":2,\"485\":1,\"783\":2}}],[\"oracle\",{\"1\":{\"381\":1,\"810\":1}}],[\"orangutan\",{\"1\":{\"64\":1}}],[\"orange\",{\"1\":{\"64\":7}}],[\"orelse\",{\"1\":{\"293\":1}}],[\"orderjd\",{\"1\":{\"531\":2}}],[\"orderdesc\",{\"1\":{\"441\":2}}],[\"orderid\",{\"1\":{\"441\":3}}],[\"orderresultmap\",{\"1\":{\"437\":2}}],[\"orders\",{\"1\":{\"437\":2}}],[\"orderno\",{\"1\":{\"437\":2}}],[\"order\",{\"1\":{\"260\":1,\"437\":10,\"441\":8,\"470\":1,\"488\":3,\"489\":1,\"491\":2,\"497\":1,\"505\":1,\"531\":1,\"534\":1,\"804\":1}}],[\"or\",{\"1\":{\"64\":1,\"87\":3,\"88\":3,\"89\":4,\"90\":4,\"91\":2,\"489\":5,\"493\":3,\"498\":1}}],[\"orthodox\",{\"1\":{\"64\":1}}],[\"oman\",{\"1\":{\"64\":1}}],[\"om\",{\"1\":{\"64\":1}}],[\"oceanbase\",{\"1\":{\"210\":1}}],[\"ocean\",{\"1\":{\"64\":2}}],[\"octopus\",{\"1\":{\"64\":1}}],[\"oil\",{\"1\":{\"64\":1}}],[\"oyster\",{\"1\":{\"64\":1}}],[\"oden\",{\"1\":{\"64\":1}}],[\"old的组合\",{\"1\":{\"406\":1}}],[\"oldtab中所有的entry数据都已经放入到newtab中了\",{\"1\":{\"314\":1}}],[\"oldvalue\",{\"1\":{\"186\":3}}],[\"old\",{\"0\":{\"397\":1},\"1\":{\"64\":1,\"394\":1,\"397\":1,\"401\":6,\"406\":2}}],[\"older\",{\"1\":{\"64\":3}}],[\"olive\",{\"1\":{\"64\":1}}],[\"ox\",{\"1\":{\"64\":1}}],[\"ok\",{\"1\":{\"64\":5,\"556\":1,\"724\":1,\"727\":3,\"801\":1}}],[\"ofnullable\",{\"1\":{\"450\":1}}],[\"oftype=\",{\"1\":{\"441\":1}}],[\"oftype\",{\"1\":{\"441\":1}}],[\"offset\",{\"1\":{\"685\":1,\"744\":3,\"778\":2}}],[\"offer\",{\"1\":{\"623\":1}}],[\"off\",{\"1\":{\"64\":1}}],[\"officer\",{\"1\":{\"64\":1}}],[\"office\",{\"1\":{\"64\":6}}],[\"of\",{\"1\":{\"64\":11,\"293\":1,\"614\":4,\"802\":1}}],[\"once\",{\"1\":{\"232\":1}}],[\"oncoming\",{\"1\":{\"64\":5}}],[\"only\",{\"1\":{\"676\":1,\"813\":1}}],[\"onlyifabsent\",{\"1\":{\"186\":1}}],[\"online\",{\"1\":{\"537\":2}}],[\"onloadsuccess\",{\"1\":{\"73\":1}}],[\"one命令让其成为主节点\",{\"1\":{\"688\":1}}],[\"onexpand\",{\"1\":{\"74\":1}}],[\"one\",{\"1\":{\"64\":3}}],[\"onion\",{\"1\":{\"64\":1}}],[\"on\",{\"1\":{\"64\":5,\"414\":1,\"441\":2,\"470\":2,\"497\":1}}],[\"ogre\",{\"1\":{\"64\":1}}],[\"overflow\",{\"1\":{\"730\":1}}],[\"override\",{\"0\":{\"249\":1},\"1\":{\"257\":2,\"285\":1,\"287\":1,\"292\":1,\"300\":1,\"315\":1,\"348\":1,\"349\":2,\"357\":1,\"373\":1,\"453\":2,\"762\":1,\"778\":1,\"793\":6,\"806\":3,\"820\":1,\"849\":1}}],[\"overload\",{\"0\":{\"249\":1}}],[\"over\",{\"1\":{\"64\":3,\"287\":1}}],[\"o\",{\"0\":{\"277\":1},\"1\":{\"38\":1,\"64\":2,\"162\":1,\"257\":4,\"279\":1,\"280\":3,\"441\":3,\"662\":1,\"663\":8,\"730\":1}}],[\"outer\",{\"1\":{\"458\":1,\"470\":3}}],[\"outofmemoryerror\",{\"1\":{\"388\":3,\"418\":1}}],[\"outputstream\",{\"1\":{\"278\":1,\"283\":1,\"817\":1}}],[\"outlying\",{\"1\":{\"64\":1}}],[\"outbox\",{\"1\":{\"64\":1}}],[\"out\",{\"1\":{\"23\":3,\"64\":3,\"137\":10,\"140\":10,\"147\":10,\"245\":3,\"255\":1,\"269\":3,\"276\":4,\"285\":3,\"292\":2,\"293\":1,\"294\":8,\"300\":3,\"315\":1,\"345\":3,\"348\":1,\"349\":1,\"373\":1,\"445\":1,\"453\":4,\"788\":1,\"793\":11,\"806\":6,\"821\":1,\"879\":10}}],[\"fsync操作需要等\",{\"1\":{\"718\":1}}],[\"fd\",{\"1\":{\"664\":1}}],[\"ftp\",{\"1\":{\"542\":1}}],[\"fgc\",{\"1\":{\"417\":5}}],[\"f=3\",{\"1\":{\"239\":1}}],[\"fh\",{\"1\":{\"181\":1}}],[\"fleur\",{\"1\":{\"64\":1}}],[\"flood\",{\"0\":{\"573\":1},\"1\":{\"573\":2,\"614\":4}}],[\"floating\",{\"1\":{\"405\":1}}],[\"float\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"169\":1,\"238\":2,\"239\":3,\"263\":1,\"465\":2,\"879\":1}}],[\"floppy\",{\"1\":{\"64\":1}}],[\"flow\",{\"1\":{\"859\":1}}],[\"flowrulemanager\",{\"1\":{\"859\":1}}],[\"flowrule\",{\"1\":{\"859\":2}}],[\"flowing\",{\"1\":{\"64\":1}}],[\"flower\",{\"1\":{\"64\":3}}],[\"flush\",{\"1\":{\"446\":1}}],[\"flushed\",{\"1\":{\"64\":1}}],[\"flute\",{\"1\":{\"64\":1}}],[\"flight\",{\"1\":{\"64\":2}}],[\"flipper\",{\"1\":{\"64\":1}}],[\"flag\",{\"1\":{\"64\":7}}],[\"flags\",{\"1\":{\"64\":2}}],[\"flashlight\",{\"1\":{\"64\":1}}],[\"flash\",{\"1\":{\"64\":1}}],[\"flat\",{\"1\":{\"64\":1}}],[\"flatbread\",{\"1\":{\"64\":2}}],[\"flamingo\",{\"1\":{\"64\":1}}],[\"flying\",{\"1\":{\"64\":2}}],[\"fly\",{\"1\":{\"64\":1}}],[\"fowler\",{\"1\":{\"824\":1}}],[\"follow\",{\"1\":{\"724\":2}}],[\"follower将其当前term加一然后转换为candidate\",{\"1\":{\"222\":1}}],[\"follower\",{\"1\":{\"221\":1,\"222\":2}}],[\"folder\",{\"1\":{\"64\":2,\"73\":4,\"74\":2,\"76\":2}}],[\"folding\",{\"1\":{\"64\":1}}],[\"fog\",{\"1\":{\"64\":1}}],[\"foggy\",{\"1\":{\"64\":1}}],[\"found\",{\"1\":{\"778\":1}}],[\"fountain\",{\"1\":{\"64\":2}}],[\"four\",{\"1\":{\"64\":2}}],[\"force\",{\"1\":{\"774\":1}}],[\"forgery\",{\"1\":{\"613\":1}}],[\"form\",{\"1\":{\"437\":1}}],[\"format=b\",{\"1\":{\"415\":1,\"417\":1,\"418\":1}}],[\"forname\",{\"1\":{\"389\":1,\"788\":1}}],[\"for\",{\"1\":{\"186\":1,\"225\":1,\"245\":1,\"269\":1,\"285\":1,\"314\":1,\"348\":1,\"373\":1,\"445\":1,\"513\":4,\"542\":1,\"763\":1,\"802\":1}}],[\"foreach标签的属性主要有item\",{\"1\":{\"445\":1}}],[\"foreach的主要用在构建in条件中\",{\"1\":{\"445\":1}}],[\"foreach\",{\"1\":{\"294\":3,\"444\":1}}],[\"foreach将遍历数组的所有元素\",{\"1\":{\"88\":1,\"90\":1}}],[\"foreach>\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"444\":1,\"445\":2}}],[\"forward属性\",{\"1\":{\"732\":1}}],[\"forwardingnode<k\",{\"1\":{\"181\":1}}],[\"forwardingnode\",{\"1\":{\"181\":1}}],[\"forward\",{\"1\":{\"64\":2}}],[\"fork操作发生在rdb和aof重写时\",{\"1\":{\"718\":1}}],[\"fork阻塞\",{\"1\":{\"718\":1}}],[\"forkjointask与一般task的主要区别在于它需要实现compute方法\",{\"1\":{\"373\":1}}],[\"forkjoinpool\",{\"1\":{\"373\":4}}],[\"fork\",{\"0\":{\"373\":1},\"1\":{\"64\":1,\"373\":4}}],[\"fortune\",{\"1\":{\"64\":1}}],[\"fondue\",{\"1\":{\"64\":1}}],[\"food\",{\"1\":{\"64\":2}}],[\"football\",{\"1\":{\"64\":2}}],[\"footprints\",{\"1\":{\"64\":1}}],[\"foot\",{\"1\":{\"64\":1}}],[\"fox\",{\"1\":{\"64\":1}}],[\"fegin怎么做负载均衡\",{\"0\":{\"850\":1}}],[\"feign怎么实现认证传递\",{\"0\":{\"849\":1}}],[\"feign会触发ribbon的加载过程\",{\"1\":{\"848\":1}}],[\"feign可以快速失败并返回预设的响应结果\",{\"1\":{\"847\":1}}],[\"feign支持集成hystrix容错框架\",{\"1\":{\"847\":1}}],[\"feign集成了ribbon负载均衡器\",{\"1\":{\"847\":1}}],[\"feignclientconfig\",{\"1\":{\"849\":1}}],[\"feignclient\",{\"1\":{\"847\":1}}],[\"feign允许开发者使用简单的注解来定义和描述对远程服务的访问\",{\"1\":{\"847\":1}}],[\"feign的主要特点和功能包括\",{\"1\":{\"847\":1}}],[\"feign是在resttemplate\",{\"1\":{\"847\":1}}],[\"feign是一个声明式的web服务客户端\",{\"1\":{\"847\":1}}],[\"feign和dubbo并不是互斥的关系\",{\"1\":{\"846\":1}}],[\"feign\",{\"1\":{\"831\":2,\"832\":1}}],[\"ferry\",{\"1\":{\"64\":1}}],[\"ferris\",{\"1\":{\"64\":1}}],[\"featured\",{\"1\":{\"444\":1}}],[\"feather\",{\"1\":{\"64\":1}}],[\"fearful\",{\"1\":{\"64\":1}}],[\"feet\",{\"1\":{\"64\":1}}],[\"feeding\",{\"1\":{\"64\":4}}],[\"fencing\",{\"1\":{\"64\":1}}],[\"female\",{\"1\":{\"64\":2}}],[\"future<integer>\",{\"1\":{\"373\":1}}],[\"future<object>\",{\"1\":{\"357\":1}}],[\"future\",{\"1\":{\"357\":2}}],[\"future对象可以判断任务是否执行成功\",{\"1\":{\"357\":1}}],[\"futuretask<string>\",{\"1\":{\"300\":2}}],[\"futuna\",{\"1\":{\"64\":1}}],[\"func\",{\"1\":{\"493\":1}}],[\"functionalinterface\",{\"1\":{\"292\":1}}],[\"functional\",{\"1\":{\"292\":2}}],[\"function\",{\"1\":{\"73\":1,\"74\":1,\"292\":1,\"294\":1}}],[\"funeral\",{\"1\":{\"64\":1}}],[\"fulltext\",{\"1\":{\"493\":1}}],[\"full\",{\"0\":{\"397\":1,\"399\":1,\"417\":1},\"1\":{\"64\":2,\"397\":1,\"399\":6,\"417\":1,\"418\":7}}],[\"fuelpump\",{\"1\":{\"64\":1}}],[\"fuji\",{\"1\":{\"64\":1}}],[\"fu\",{\"1\":{\"64\":1}}],[\"fighter\",{\"1\":{\"727\":5}}],[\"fighter3<\",{\"1\":{\"821\":1}}],[\"fighter3\",{\"1\":{\"352\":1,\"441\":2,\"727\":1,\"788\":1,\"793\":2,\"805\":1,\"821\":1}}],[\"fifindclass\",{\"1\":{\"426\":1}}],[\"fifo的实现机制是使用链表将所有在内存的页面按照进入时间的早晚链接起来\",{\"1\":{\"658\":1}}],[\"fifo\",{\"1\":{\"331\":1,\"658\":1}}],[\"fixedthreadpool\",{\"1\":{\"363\":1}}],[\"fiji\",{\"1\":{\"64\":1}}],[\"fin+ack\",{\"1\":{\"576\":2}}],[\"fin\",{\"1\":{\"574\":2,\"575\":5,\"576\":3,\"578\":3,\"580\":1}}],[\"fin=1\",{\"1\":{\"574\":2}}],[\"findconsumeridlist\",{\"1\":{\"777\":1}}],[\"findclass\",{\"1\":{\"427\":1,\"428\":1}}],[\"findautowiringmetadata\",{\"1\":{\"802\":2}}],[\"findactivebloglike\",{\"1\":{\"444\":2}}],[\"findactiveblogwithtitlelike\",{\"1\":{\"444\":1}}],[\"findaddbyname7\",{\"1\":{\"91\":3}}],[\"findaddbyname5\",{\"1\":{\"90\":3}}],[\"findaddbyname6\",{\"1\":{\"89\":3}}],[\"findaddbyname4\",{\"1\":{\"88\":2}}],[\"findaddbyname3\",{\"1\":{\"87\":2}}],[\"findaddbyname2\",{\"1\":{\"86\":2}}],[\"finalizabledelegatedexecutorservice\",{\"1\":{\"362\":1}}],[\"finalize\",{\"0\":{\"256\":1,\"393\":1},\"1\":{\"256\":6,\"272\":1,\"393\":3}}],[\"final和synchronized也能保证可见性\",{\"1\":{\"318\":1}}],[\"finally\",{\"0\":{\"256\":1},\"1\":{\"181\":1,\"256\":2,\"275\":3,\"276\":13,\"311\":1,\"330\":1,\"332\":1,\"357\":1,\"389\":1,\"445\":1,\"448\":1}}],[\"final\",{\"0\":{\"255\":1,\"256\":1},\"1\":{\"166\":1,\"169\":1,\"181\":3,\"252\":1,\"253\":2,\"255\":6,\"256\":2,\"263\":1,\"272\":7,\"282\":1,\"312\":1,\"315\":1,\"341\":2,\"348\":1,\"349\":1,\"367\":5,\"373\":1,\"450\":1,\"795\":1,\"805\":1,\"806\":1}}],[\"finland\",{\"1\":{\"64\":1}}],[\"finger\",{\"1\":{\"64\":2}}],[\"fingers\",{\"1\":{\"64\":3}}],[\"five\",{\"1\":{\"64\":1}}],[\"filterpropertydescriptorsfordependencycheck\",{\"1\":{\"802\":1}}],[\"filteredpds\",{\"1\":{\"802\":3}}],[\"filter\",{\"1\":{\"294\":4,\"762\":1,\"820\":1,\"865\":2}}],[\"filebeat\",{\"1\":{\"877\":1}}],[\"file三层组织结构\",{\"1\":{\"771\":1}}],[\"file=29471\",{\"1\":{\"418\":1}}],[\"file=heap\",{\"1\":{\"417\":1}}],[\"file=\",{\"1\":{\"415\":1}}],[\"filename\",{\"1\":{\"412\":1,\"771\":2}}],[\"file\",{\"1\":{\"64\":4,\"73\":2,\"418\":1,\"676\":1}}],[\"film\",{\"1\":{\"64\":2}}],[\"field\",{\"1\":{\"64\":1}}],[\"first\",{\"1\":{\"64\":2,\"401\":2,\"404\":1}}],[\"fireautoconfigurationimportevents\",{\"1\":{\"820\":1}}],[\"firefox\",{\"1\":{\"554\":2}}],[\"firefighter\",{\"1\":{\"64\":3}}],[\"firecracker\",{\"1\":{\"64\":1}}],[\"fireworks\",{\"1\":{\"64\":1}}],[\"fire\",{\"1\":{\"64\":4}}],[\"fishing\",{\"1\":{\"64\":1}}],[\"fish\",{\"1\":{\"64\":4}}],[\"fist\",{\"1\":{\"64\":5}}],[\"fit\",{\"1\":{\"16\":1}}],[\"french\",{\"1\":{\"64\":3}}],[\"freenext\",{\"1\":{\"325\":1}}],[\"free\",{\"1\":{\"64\":1,\"383\":1}}],[\"fr\",{\"1\":{\"64\":1}}],[\"framed\",{\"1\":{\"64\":1}}],[\"fragment\",{\"1\":{\"21\":1,\"29\":1}}],[\"fried\",{\"1\":{\"64\":2}}],[\"fries\",{\"1\":{\"64\":1}}],[\"fruit\",{\"1\":{\"64\":1}}],[\"from\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"225\":1,\"267\":1,\"379\":1,\"394\":1,\"399\":1,\"436\":4,\"437\":1,\"440\":1,\"441\":2,\"444\":4,\"454\":3,\"470\":3,\"477\":2,\"488\":5,\"489\":3,\"490\":1,\"491\":1,\"507\":1,\"508\":1,\"510\":1,\"513\":4}}],[\"front\",{\"1\":{\"64\":1}}],[\"frog\",{\"1\":{\"64\":1}}],[\"frowning\",{\"1\":{\"64\":6}}],[\"faq\",{\"1\":{\"673\":1}}],[\"fair\",{\"1\":{\"333\":2}}],[\"fairsync\",{\"1\":{\"332\":1,\"333\":3}}],[\"fairy\",{\"1\":{\"64\":3}}],[\"failed\",{\"1\":{\"802\":1,\"859\":1}}],[\"failover\",{\"1\":{\"687\":1,\"698\":1}}],[\"failure\",{\"1\":{\"399\":1}}],[\"fail\",{\"0\":{\"157\":2},\"1\":{\"157\":2,\"158\":1}}],[\"faroe\",{\"1\":{\"64\":1}}],[\"farmer\",{\"1\":{\"64\":3}}],[\"faso\",{\"1\":{\"64\":1}}],[\"fast是一种可能触发的机制\",{\"1\":{\"158\":1}}],[\"fast\",{\"0\":{\"157\":1},\"1\":{\"64\":1,\"157\":1,\"592\":1}}],[\"fax\",{\"1\":{\"64\":1}}],[\"fans\",{\"1\":{\"724\":1}}],[\"fan\",{\"1\":{\"64\":1}}],[\"fallbackmethod\",{\"1\":{\"858\":3}}],[\"fallback\",{\"1\":{\"293\":1,\"704\":1,\"858\":1}}],[\"fallen\",{\"1\":{\"64\":1}}],[\"false\",{\"1\":{\"72\":2,\"137\":2,\"140\":2,\"147\":2,\"238\":1,\"241\":1,\"257\":1,\"269\":3,\"294\":1,\"333\":1,\"879\":2}}],[\"falkland\",{\"1\":{\"64\":1}}],[\"falafel\",{\"1\":{\"64\":1}}],[\"family\",{\"1\":{\"64\":26}}],[\"factories文件中添加自动配置类路径\",{\"1\":{\"821\":1}}],[\"factories\",{\"1\":{\"820\":2}}],[\"factor\",{\"1\":{\"173\":1}}],[\"factorydaoimpl\",{\"1\":{\"795\":1}}],[\"factorydao\",{\"1\":{\"795\":13}}],[\"factory\",{\"1\":{\"64\":4,\"790\":2,\"795\":4}}],[\"facing\",{\"1\":{\"64\":1}}],[\"facebook的memcache节点已经达到了3000个\",{\"1\":{\"713\":1}}],[\"facepalming\",{\"1\":{\"64\":2}}],[\"facepalm\",{\"1\":{\"64\":1}}],[\"facepunch\",{\"1\":{\"64\":1}}],[\"face\",{\"1\":{\"64\":55}}],[\"fade\",{\"1\":{\"23\":8,\"31\":1}}],[\"f11\",{\"1\":{\"40\":1}}],[\"f\",{\"1\":{\"40\":1,\"181\":6,\"239\":2}}],[\"bp\",{\"1\":{\"802\":3}}],[\"bw\",{\"1\":{\"802\":4}}],[\"bgrewriteaof\",{\"1\":{\"720\":1}}],[\"bgsave命令\",{\"1\":{\"676\":1}}],[\"b运行一个时间片之后又切换到a\",{\"1\":{\"635\":1}}],[\"b+tree\",{\"1\":{\"504\":3,\"509\":2}}],[\"b+相比较\",{\"1\":{\"504\":1}}],[\"b+\",{\"0\":{\"503\":1,\"504\":1,\"505\":1},\"1\":{\"502\":1,\"503\":1,\"505\":5}}],[\"b+树能存储多少条数据呢\",{\"0\":{\"502\":1}}],[\"b+树结构的索引\",{\"1\":{\"501\":1}}],[\"b+树\",{\"1\":{\"477\":1,\"501\":1}}],[\"btree\",{\"1\":{\"496\":1}}],[\"b录入是\",{\"1\":{\"349\":1}}],[\"b录入银行流水数据\",{\"1\":{\"349\":1}}],[\"b线程也更新i+1\",{\"1\":{\"340\":1}}],[\"b又变回a的情况\",{\"1\":{\"336\":1}}],[\"bbb2\",{\"1\":{\"294\":3}}],[\"bbb3\",{\"1\":{\"294\":3}}],[\"bbb1\",{\"1\":{\"294\":2}}],[\"b1=new\",{\"1\":{\"269\":1}}],[\"bytype\",{\"1\":{\"796\":4}}],[\"byte\",{\"0\":{\"242\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"238\":2,\"242\":1,\"263\":1,\"283\":1,\"879\":2}}],[\"byname\",{\"1\":{\"796\":1}}],[\"bysql\",{\"1\":{\"762\":1}}],[\"by\",{\"1\":{\"267\":1,\"470\":4,\"488\":3,\"489\":2,\"491\":2,\"505\":1,\"534\":2,\"688\":1,\"689\":2}}],[\"b==b1\",{\"1\":{\"269\":1}}],[\"b=127\",{\"1\":{\"269\":1}}],[\"b=\",{\"1\":{\"266\":2,\"458\":1}}],[\"bhutan\",{\"1\":{\"64\":1}}],[\"because\",{\"1\":{\"813\":1}}],[\"beginlocktimestamp\",{\"1\":{\"778\":2}}],[\"beginner\",{\"1\":{\"64\":1}}],[\"between\",{\"1\":{\"762\":1}}],[\"bettween\",{\"1\":{\"493\":1}}],[\"before于线程a从threadb\",{\"1\":{\"320\":1}}],[\"before于线程b中的任意操作\",{\"1\":{\"320\":1}}],[\"before于任意后续对这个volatile域的读\",{\"1\":{\"320\":1}}],[\"before于随后对这个锁的加锁\",{\"1\":{\"320\":1}}],[\"before于该线程中的任意后续操作\",{\"1\":{\"320\":1}}],[\"before和我们息息相关的有六大规则\",{\"1\":{\"320\":1}}],[\"before和as\",{\"1\":{\"320\":1}}],[\"before关系来执行的结果一致\",{\"1\":{\"320\":1}}],[\"before关系指定的顺序来执行\",{\"1\":{\"320\":1}}],[\"before关系\",{\"1\":{\"320\":1}}],[\"before另一个操作\",{\"1\":{\"320\":1}}],[\"before的定义\",{\"1\":{\"320\":1}}],[\"before了解吗\",{\"0\":{\"320\":1}}],[\"before\",{\"1\":{\"183\":1,\"292\":1,\"320\":3,\"453\":2,\"784\":2,\"804\":1,\"805\":2}}],[\"beijing\",{\"1\":{\"89\":1}}],[\"bermuda\",{\"1\":{\"64\":1}}],[\"benin\",{\"1\":{\"64\":1}}],[\"bento\",{\"1\":{\"64\":1}}],[\"belize\",{\"1\":{\"64\":1}}],[\"belarus\",{\"1\":{\"64\":1}}],[\"belgium\",{\"1\":{\"64\":1}}],[\"bellhop\",{\"1\":{\"64\":1}}],[\"bell\",{\"1\":{\"64\":4}}],[\"behind\",{\"1\":{\"64\":3}}],[\"beverage\",{\"1\":{\"64\":1}}],[\"been\",{\"1\":{\"813\":1}}],[\"beers\",{\"1\":{\"64\":1}}],[\"beer\",{\"1\":{\"64\":1}}],[\"beetle\",{\"1\":{\"64\":2}}],[\"bee\",{\"1\":{\"64\":1}}],[\"beat\",{\"1\":{\"836\":2}}],[\"bea\",{\"1\":{\"381\":1}}],[\"beancreationexception\",{\"1\":{\"802\":2}}],[\"beanclass\",{\"1\":{\"788\":1}}],[\"beanwrapper\",{\"1\":{\"802\":1}}],[\"bean不是线程安全的\",{\"1\":{\"798\":1}}],[\"bean=\",{\"1\":{\"795\":1}}],[\"bean>\",{\"1\":{\"793\":1,\"795\":7}}],[\"bean使用中\",{\"1\":{\"793\":2}}],[\"beanfactoty\",{\"1\":{\"789\":1}}],[\"beanfactoryaware\",{\"1\":{\"793\":2}}],[\"beanfactorypostprocessor\",{\"1\":{\"784\":1,\"791\":1}}],[\"beanfactory\",{\"0\":{\"789\":1,\"790\":1},\"1\":{\"783\":1,\"785\":1,\"788\":9,\"789\":2,\"790\":5,\"791\":5,\"793\":4}}],[\"bean定义\",{\"1\":{\"788\":1}}],[\"bean名称\",{\"1\":{\"788\":2}}],[\"beanregister\",{\"1\":{\"788\":8}}],[\"beandefinitionregistry\",{\"1\":{\"792\":1}}],[\"beandefinitionreader\",{\"1\":{\"792\":1}}],[\"beandefinitionmap\",{\"1\":{\"788\":6}}],[\"beandefinition>\",{\"1\":{\"788\":3}}],[\"beandefinition\",{\"1\":{\"788\":13,\"792\":2}}],[\"beannameaware\",{\"1\":{\"793\":1}}],[\"beannameaware这\",{\"1\":{\"793\":1}}],[\"beanname\",{\"1\":{\"788\":13,\"793\":2,\"802\":7}}],[\"beanpostprocessor\",{\"1\":{\"784\":1,\"791\":1,\"793\":5,\"801\":1,\"812\":1}}],[\"bean生命周期\",{\"1\":{\"621\":1}}],[\"bean传参法\",{\"1\":{\"436\":1}}],[\"bean\",{\"0\":{\"793\":1,\"794\":1,\"797\":1,\"798\":1},\"1\":{\"289\":1,\"435\":1,\"782\":2,\"784\":8,\"785\":3,\"788\":23,\"789\":1,\"790\":3,\"791\":3,\"792\":2,\"793\":15,\"796\":11,\"797\":10,\"798\":14,\"799\":3,\"800\":5,\"801\":4,\"802\":8,\"812\":4,\"819\":1,\"849\":1}}],[\"beans>\",{\"1\":{\"793\":1}}],[\"beansexception\",{\"1\":{\"793\":3}}],[\"beans\",{\"1\":{\"64\":1,\"788\":2,\"790\":1,\"791\":1,\"793\":4}}],[\"beads\",{\"1\":{\"64\":1}}],[\"beach\",{\"1\":{\"64\":1}}],[\"bearer\",{\"1\":{\"849\":1}}],[\"bear\",{\"1\":{\"64\":3}}],[\"beard\",{\"1\":{\"64\":2}}],[\"bearded\",{\"1\":{\"64\":1}}],[\"beaver\",{\"1\":{\"64\":1}}],[\"bed\",{\"1\":{\"64\":2}}],[\"bigkeys命令\",{\"1\":{\"719\":1}}],[\"bigint\",{\"1\":{\"502\":1}}],[\"binglog\",{\"1\":{\"527\":1}}],[\"binlog\",{\"0\":{\"480\":1},\"1\":{\"481\":5,\"482\":10,\"527\":3,\"528\":1,\"534\":1}}],[\"bin\",{\"1\":{\"479\":1,\"480\":4}}],[\"bindingexception\",{\"1\":{\"450\":2}}],[\"bitmaps\",{\"1\":{\"668\":1}}],[\"bitsmap\",{\"1\":{\"664\":2}}],[\"bits\",{\"1\":{\"367\":5}}],[\"biting\",{\"1\":{\"64\":1}}],[\"bio\",{\"0\":{\"280\":1},\"1\":{\"280\":2,\"444\":2}}],[\"biohazard\",{\"1\":{\"64\":1}}],[\"bissau\",{\"1\":{\"64\":1}}],[\"bison\",{\"1\":{\"64\":1}}],[\"bicycles\",{\"1\":{\"64\":1}}],[\"bicyclist\",{\"1\":{\"64\":2}}],[\"billed\",{\"1\":{\"64\":1}}],[\"bikini\",{\"1\":{\"64\":1}}],[\"biking\",{\"1\":{\"64\":4}}],[\"bike\",{\"1\":{\"64\":1}}],[\"birthday\",{\"1\":{\"64\":1}}],[\"bird\",{\"1\":{\"64\":2}}],[\"buf\",{\"1\":{\"676\":1}}],[\"buffers\",{\"1\":{\"845\":1}}],[\"buffers等\",{\"1\":{\"845\":1}}],[\"buffer中的redo\",{\"1\":{\"483\":1}}],[\"buffer\",{\"1\":{\"280\":3,\"384\":1,\"483\":8,\"490\":1,\"655\":1,\"730\":1}}],[\"buffer的连续内存空间\",{\"1\":{\"483\":1}}],[\"buffer的\",{\"1\":{\"280\":1}}],[\"buffalo\",{\"1\":{\"64\":1}}],[\"build\",{\"1\":{\"435\":1,\"448\":3}}],[\"building\",{\"1\":{\"64\":2}}],[\"bundle\",{\"1\":{\"427\":3}}],[\"bump\",{\"1\":{\"383\":1}}],[\"burundi\",{\"1\":{\"64\":1}}],[\"burkina\",{\"1\":{\"64\":1}}],[\"burrito\",{\"1\":{\"64\":1}}],[\"button\",{\"1\":{\"64\":10}}],[\"butter\",{\"1\":{\"64\":1}}],[\"butterfly\",{\"1\":{\"64\":1}}],[\"bucketindex\",{\"1\":{\"167\":1}}],[\"bucket\",{\"1\":{\"64\":1}}],[\"bulgaria\",{\"1\":{\"64\":1}}],[\"bulb\",{\"1\":{\"64\":1}}],[\"bullettrain\",{\"1\":{\"64\":2}}],[\"buoy\",{\"1\":{\"64\":1}}],[\"bug\",{\"1\":{\"64\":1,\"417\":1,\"528\":1,\"678\":1}}],[\"busstop\",{\"1\":{\"64\":1}}],[\"bus\",{\"1\":{\"64\":2}}],[\"busts\",{\"1\":{\"64\":1}}],[\"bust\",{\"1\":{\"64\":1}}],[\"business\",{\"1\":{\"64\":1}}],[\"bubbles\",{\"1\":{\"64\":1}}],[\"bubble\",{\"1\":{\"64\":4}}],[\"boss\",{\"1\":{\"796\":6}}],[\"bosnia\",{\"1\":{\"64\":1}}],[\"body>\",{\"1\":{\"556\":1}}],[\"bob\",{\"1\":{\"91\":1}}],[\"botswana\",{\"1\":{\"64\":1}}],[\"bottle\",{\"1\":{\"64\":2}}],[\"bolivia\",{\"1\":{\"64\":1}}],[\"bolt\",{\"1\":{\"64\":1}}],[\"bomb\",{\"1\":{\"64\":1}}],[\"boolean\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"181\":1,\"186\":1,\"238\":2,\"257\":1,\"263\":1,\"270\":1,\"272\":1,\"294\":3,\"302\":2,\"333\":1,\"340\":1,\"345\":1,\"373\":1,\"879\":1}}],[\"bookmark\",{\"1\":{\"64\":2}}],[\"books\",{\"1\":{\"64\":1}}],[\"book\",{\"1\":{\"64\":6}}],[\"boot无缝集成\",{\"1\":{\"846\":1}}],[\"boot<\",{\"1\":{\"805\":1,\"821\":2}}],[\"bootstrap\",{\"1\":{\"423\":1}}],[\"boot\",{\"0\":{\"818\":1},\"1\":{\"64\":2,\"289\":1,\"782\":1,\"805\":1,\"819\":9,\"820\":1,\"821\":5}}],[\"boomerang\",{\"1\":{\"64\":1}}],[\"boom\",{\"1\":{\"64\":1}}],[\"boat\",{\"1\":{\"64\":2}}],[\"board\",{\"1\":{\"64\":1}}],[\"boar\",{\"1\":{\"64\":1}}],[\"boxing\",{\"1\":{\"64\":1}}],[\"box\",{\"1\":{\"64\":5}}],[\"boundsql\",{\"1\":{\"448\":3}}],[\"bouncing\",{\"1\":{\"64\":3}}],[\"bouvet\",{\"1\":{\"64\":1}}],[\"bouquet\",{\"1\":{\"64\":1}}],[\"bowling\",{\"1\":{\"64\":1}}],[\"bowl\",{\"1\":{\"64\":1}}],[\"bowing\",{\"1\":{\"64\":2}}],[\"bow\",{\"1\":{\"64\":2}}],[\"boy\",{\"1\":{\"64\":21,\"457\":1}}],[\"bone\",{\"1\":{\"64\":2}}],[\"brpop是rpop的阻塞版本\",{\"1\":{\"722\":1}}],[\"brpop消费消息\",{\"1\":{\"722\":1}}],[\"branch\",{\"1\":{\"871\":1,\"872\":1}}],[\"brazzaville\",{\"1\":{\"64\":1}}],[\"brazil\",{\"1\":{\"64\":1}}],[\"brain\",{\"1\":{\"64\":1}}],[\"brunei\",{\"1\":{\"64\":1}}],[\"british\",{\"1\":{\"64\":2}}],[\"brightness\",{\"1\":{\"64\":2}}],[\"briefcase\",{\"1\":{\"64\":1}}],[\"brief\",{\"1\":{\"64\":1}}],[\"bridge\",{\"1\":{\"64\":1}}],[\"bride\",{\"1\":{\"64\":1}}],[\"bricks\",{\"1\":{\"64\":1}}],[\"breaker\",{\"1\":{\"858\":1}}],[\"break\",{\"0\":{\"243\":1},\"1\":{\"181\":3,\"243\":1,\"450\":1,\"778\":1}}],[\"bread\",{\"1\":{\"64\":2}}],[\"breast\",{\"1\":{\"64\":1}}],[\"brokercontroller\",{\"1\":{\"778\":6}}],[\"brokerallowsuspend\",{\"1\":{\"778\":1}}],[\"broker端在收到consumer的心跳消息后\",{\"1\":{\"777\":1}}],[\"broker允许等待30s的时间\",{\"1\":{\"771\":1}}],[\"broker是怎么保存数据的呢\",{\"0\":{\"771\":1}}],[\"broker在启动的时候去向所有的nameserver注册\",{\"1\":{\"769\":1}}],[\"brokerid机器组成\",{\"1\":{\"767\":1}}],[\"broker可以配置两种角色\",{\"1\":{\"767\":1}}],[\"broker的高可用是通过集群和主从实现的\",{\"1\":{\"767\":1}}],[\"broker的刷盘机制\",{\"1\":{\"755\":1}}],[\"broker收到延时消息了\",{\"1\":{\"764\":1}}],[\"broker支持master和slave同步复制\",{\"1\":{\"755\":1}}],[\"broker通过主从模式来保证高可用\",{\"1\":{\"755\":1}}],[\"broker\",{\"0\":{\"749\":1},\"1\":{\"744\":1,\"746\":1,\"747\":1,\"748\":2,\"749\":2,\"755\":1,\"762\":2,\"765\":7,\"767\":6,\"769\":1,\"774\":1,\"778\":2}}],[\"broken\",{\"1\":{\"64\":1}}],[\"broom\",{\"1\":{\"64\":1}}],[\"broccoli\",{\"1\":{\"64\":1}}],[\"brown\",{\"1\":{\"64\":3}}],[\"bam\",{\"1\":{\"293\":3}}],[\"bamboo\",{\"1\":{\"64\":1}}],[\"baidu\",{\"1\":{\"107\":1,\"115\":1,\"546\":1,\"547\":3}}],[\"bahamas\",{\"1\":{\"64\":1}}],[\"bahrain\",{\"1\":{\"64\":1}}],[\"badge\",{\"1\":{\"64\":1}}],[\"badger\",{\"1\":{\"64\":1}}],[\"badminton\",{\"1\":{\"64\":1}}],[\"basically\",{\"1\":{\"193\":2}}],[\"base的主要含义\",{\"1\":{\"193\":1}}],[\"base\",{\"1\":{\"193\":1}}],[\"base理论了解吗\",{\"0\":{\"193\":1}}],[\"baseball\",{\"1\":{\"64\":1}}],[\"basket\",{\"1\":{\"64\":1}}],[\"basketball\",{\"1\":{\"64\":3}}],[\"barrier\",{\"1\":{\"346\":1}}],[\"barthelemy\",{\"1\":{\"64\":1}}],[\"barbados\",{\"1\":{\"64\":1}}],[\"barbuda\",{\"1\":{\"64\":1}}],[\"barber\",{\"1\":{\"64\":1}}],[\"bar\",{\"1\":{\"64\":2}}],[\"bacon\",{\"1\":{\"64\":1}}],[\"backward\",{\"1\":{\"64\":1}}],[\"back\",{\"1\":{\"64\":3,\"813\":1}}],[\"background\",{\"1\":{\"19\":1,\"76\":3}}],[\"baggage\",{\"1\":{\"64\":1}}],[\"bagel\",{\"1\":{\"64\":1}}],[\"baguette\",{\"1\":{\"64\":1}}],[\"bangladesh\",{\"1\":{\"64\":1}}],[\"bangbang\",{\"1\":{\"64\":1}}],[\"banjo\",{\"1\":{\"64\":1}}],[\"bank\",{\"1\":{\"64\":1}}],[\"banana\",{\"1\":{\"64\":1}}],[\"bandage\",{\"1\":{\"64\":2}}],[\"batchexecutor\",{\"1\":{\"451\":2}}],[\"batch\",{\"1\":{\"445\":2,\"451\":1}}],[\"battery\",{\"1\":{\"64\":2}}],[\"bat\",{\"1\":{\"64\":1}}],[\"bathtub\",{\"1\":{\"64\":1}}],[\"bath\",{\"1\":{\"64\":1}}],[\"balance\",{\"1\":{\"64\":1}}],[\"ballot\",{\"1\":{\"64\":2}}],[\"balloon\",{\"1\":{\"64\":3}}],[\"ballet\",{\"1\":{\"64\":1}}],[\"ball\",{\"1\":{\"64\":7}}],[\"bald\",{\"1\":{\"64\":3}}],[\"baby\",{\"1\":{\"64\":7}}],[\"b\",{\"0\":{\"269\":1,\"504\":1},\"1\":{\"36\":1,\"64\":1,\"245\":4,\"266\":2,\"269\":1,\"293\":1,\"294\":3,\"320\":1,\"321\":1,\"324\":1,\"334\":2,\"349\":4,\"384\":1,\"429\":1,\"442\":1,\"445\":1,\"458\":3,\"477\":1,\"488\":2,\"490\":2,\"504\":5,\"514\":2,\"518\":2,\"521\":3,\"603\":2,\"605\":1,\"609\":5,\"724\":3,\"799\":4,\"800\":9,\"807\":2,\"813\":9}}],[\"b|c\",{\"1\":{\"36\":1}}],[\"blob\",{\"0\":{\"462\":1},\"1\":{\"462\":2}}],[\"blogs\",{\"1\":{\"466\":1}}],[\"blogmapper\",{\"1\":{\"435\":3,\"450\":2}}],[\"blog\",{\"1\":{\"435\":5,\"444\":7}}],[\"bloch\",{\"1\":{\"291\":1}}],[\"blockexception\",{\"1\":{\"859\":1}}],[\"blocked\",{\"1\":{\"303\":1,\"414\":1,\"637\":1}}],[\"blockhandlerforgetuser\",{\"1\":{\"859\":2}}],[\"blockhandler\",{\"1\":{\"859\":2}}],[\"blocking\",{\"1\":{\"280\":2}}],[\"block\",{\"1\":{\"11\":1,\"483\":3}}],[\"blood\",{\"1\":{\"64\":1}}],[\"blossom\",{\"1\":{\"64\":2}}],[\"blowfish\",{\"1\":{\"64\":1}}],[\"blonde\",{\"1\":{\"64\":1}}],[\"blond\",{\"1\":{\"64\":3}}],[\"black\",{\"1\":{\"64\":13}}],[\"blush\",{\"1\":{\"64\":1}}],[\"blueberries\",{\"1\":{\"64\":1}}],[\"blue\",{\"1\":{\"25\":2,\"64\":8}}],[\"背景\",{\"0\":{\"19\":1}}],[\"使⽤三级缓存主要是为了保证不管什么时候使⽤的都是⼀个对象\",{\"1\":{\"801\":1}}],[\"使⽤多线程能提升io读写的效率\",{\"1\":{\"674\":1}}],[\"使⽤单线程\",{\"1\":{\"671\":1}}],[\"使⽤事件驱动的机制\",{\"1\":{\"664\":1}}],[\"使⽤固定⻓度的\",{\"1\":{\"664\":1}}],[\"使⽤加锁操作和解锁操作可以解决并发线程\",{\"1\":{\"645\":1}}],[\"使服务器无法提供正常服务\",{\"1\":{\"611\":1}}],[\"使数据库返回到事务开始前的状态\",{\"1\":{\"519\":1}}],[\"使得性能较高的服务器能够处理更多的请求\",{\"1\":{\"851\":1}}],[\"使得远程调用变得非常直观和易于理解\",{\"1\":{\"847\":1}}],[\"使得应用程序更加灵活\",{\"1\":{\"828\":1}}],[\"使得应用端可以利用多个从节点实现读写分离\",{\"1\":{\"683\":1}}],[\"使得\",{\"1\":{\"727\":1,\"807\":1}}],[\"使得哨兵可以及时发现主节点故障并完成转移\",{\"1\":{\"687\":1}}],[\"使得从节点不但可以复制主节点数据\",{\"1\":{\"683\":1}}],[\"使得服务器能够有效对抗海量的\",{\"1\":{\"614\":1}}],[\"使得服务器不能为正常⽤户服务\",{\"1\":{\"573\":1}}],[\"使得这种攻击很难被检测到\",{\"1\":{\"611\":1}}],[\"使得这些差异对上层的查询过程透明\",{\"1\":{\"472\":1}}],[\"使得数据报在不同的网络中能够被传输\",{\"1\":{\"602\":1}}],[\"使得报⽂能够加密传输\",{\"1\":{\"561\":1}}],[\"使得添加的元素均匀分布在hashmap的每个位置上\",{\"1\":{\"168\":1}}],[\"使相同的\",{\"1\":{\"33\":1}}],[\"使它们填充满幻灯片垂直方向上的剩余空间\",{\"1\":{\"17\":1}}],[\"使用kibana进行可视化和分析\",{\"1\":{\"877\":1}}],[\"使用k个不同的哈希函数将这个变量映射为bit列表的的k个点\",{\"1\":{\"705\":1}}],[\"使用elk进行微服务日志收集的一般流程如下\",{\"1\":{\"877\":1}}],[\"使用executortype\",{\"1\":{\"445\":1}}],[\"使用拦截器传递认证信息\",{\"1\":{\"849\":1}}],[\"使用ribbon实现负载均衡\",{\"1\":{\"847\":1}}],[\"使用resttemplate实现http调用\",{\"1\":{\"847\":1}}],[\"使用restful风格的接口进行定义和调用\",{\"1\":{\"846\":1}}],[\"使用resulthandler处理返回结果\",{\"1\":{\"448\":1}}],[\"使用redis的pub\",{\"1\":{\"722\":1}}],[\"使用redis\",{\"0\":{\"722\":1}}],[\"使用redis计数\",{\"1\":{\"669\":1}}],[\"使用redis存储token\",{\"1\":{\"669\":1}}],[\"使用reentrantlock加锁\",{\"1\":{\"180\":1}}],[\"使用基于\",{\"1\":{\"830\":1}}],[\"使用后端数据库默认的隔离界别\",{\"1\":{\"810\":1}}],[\"使用纯\",{\"1\":{\"807\":1}}],[\"使用二级缓存解决循环依赖也是\",{\"1\":{\"801\":1}}],[\"使用二级缓存属性类需要实现serializable序列化接口\",{\"1\":{\"446\":1}}],[\"使用不同的\",{\"1\":{\"797\":1}}],[\"使用不当\",{\"1\":{\"389\":1}}],[\"使用非静态工厂的方法注入对象\",{\"1\":{\"795\":1}}],[\"使用非主键索引查询数据时会回表\",{\"1\":{\"489\":1}}],[\"使用静态工厂的方法注入对象\",{\"1\":{\"795\":1}}],[\"使用到了适配器模式\",{\"1\":{\"785\":1}}],[\"使用工厂模式通过\",{\"1\":{\"785\":1}}],[\"使用传统的方式\",{\"1\":{\"773\":1}}],[\"使用传统i\",{\"1\":{\"662\":1}}],[\"使用broker端的后台服务线程\",{\"1\":{\"771\":1}}],[\"使用bigkeys命令以遍历的方式分析redis实例中的所有key\",{\"1\":{\"719\":1}}],[\"使用bind标签\",{\"1\":{\"440\":1}}],[\"使用标签\",{\"1\":{\"744\":1}}],[\"使用标记\",{\"1\":{\"401\":1}}],[\"使用zset\",{\"1\":{\"723\":1}}],[\"使用logstash收集日志\",{\"1\":{\"877\":1}}],[\"使用long\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"使用list作为队列\",{\"1\":{\"722\":2}}],[\"使用multiget等操作实现事务读取\",{\"1\":{\"719\":1}}],[\"使用monitor命令统计热点key是很多开发和运维人员首先想到\",{\"1\":{\"710\":1}}],[\"使用这个字典进行记录\",{\"1\":{\"710\":1}}],[\"使用特定的数据\",{\"1\":{\"693\":1}}],[\"使用psync\",{\"1\":{\"685\":1}}],[\"使用plugin生成代理对象\",{\"1\":{\"453\":1}}],[\"使用springcloud开发\",{\"1\":{\"864\":1}}],[\"使用save相关配置\",{\"1\":{\"676\":1}}],[\"使用synchronized\",{\"1\":{\"339\":1}}],[\"使用三次握手和四次挥手保证可靠地建立连接和释放连接\",{\"1\":{\"581\":1}}],[\"使用quic\",{\"1\":{\"559\":1}}],[\"使用率是否下降\",{\"1\":{\"538\":1}}],[\"使用率飙升\",{\"1\":{\"418\":1}}],[\"使用关系型数据库\",{\"1\":{\"534\":1}}],[\"使用定时任务\",{\"1\":{\"532\":1}}],[\"使用定时任务轮询查询状态为未同步的消息表\",{\"1\":{\"205\":1}}],[\"使用数据迁移程序\",{\"1\":{\"532\":1}}],[\"使用起来非常灵活\",{\"1\":{\"531\":1}}],[\"使用起来很简单\",{\"1\":{\"315\":1}}],[\"使用前缀索引\",{\"1\":{\"497\":1}}],[\"使用索引优化\",{\"1\":{\"493\":1}}],[\"使用索引选择行\",{\"1\":{\"493\":1}}],[\"使用联合索引的时候\",{\"1\":{\"489\":1}}],[\"使用合适的存储引擎将会提高整个数据库的性能\",{\"1\":{\"476\":1}}],[\"使用哪一种引擎可以根据需要灵活选择\",{\"1\":{\"476\":1}}],[\"使用默认的\",{\"1\":{\"476\":1}}],[\"使用foreach标签\",{\"1\":{\"445\":1}}],[\"使用连接池统一管理数据库连接\",{\"1\":{\"433\":1}}],[\"使用hibernate查询关联对象或者关联集合对象时\",{\"1\":{\"433\":1}}],[\"使用多种隔离级别来控制事务如何与其他并发事务隔离\",{\"1\":{\"519\":1}}],[\"使用多条线程进行垃圾收集\",{\"1\":{\"401\":1}}],[\"使用多线程的目的是为了充分利用cpu\",{\"1\":{\"304\":1}}],[\"使用直接指针来访问最大的好处就是速度更快\",{\"1\":{\"386\":1}}],[\"使用句柄来访问的最大好处就是\",{\"1\":{\"386\":1}}],[\"使用永久代实现方法区\",{\"1\":{\"380\":1}}],[\"使用无界队列的线程池会导致什么问题吗\",{\"1\":{\"365\":1}}],[\"使用场景\",{\"1\":{\"363\":1,\"365\":1}}],[\"使用完\",{\"1\":{\"389\":1}}],[\"使用完之后调用release\",{\"1\":{\"348\":1}}],[\"使用完threadlocal后\",{\"1\":{\"311\":1}}],[\"使用jstat\",{\"1\":{\"418\":1}}],[\"使用jstack查看线程堆栈信息\",{\"1\":{\"343\":1}}],[\"使用join方法会等待子任务执行完并得到其结果\",{\"1\":{\"373\":1}}],[\"使用jps查找运行的java进程\",{\"1\":{\"343\":1}}],[\"使用juc包下的锁\",{\"1\":{\"339\":1}}],[\"使用cglib创建目标对象的代理对象\",{\"1\":{\"442\":1}}],[\"使用concat\",{\"1\":{\"440\":1}}],[\"使用countdownlatch时\",{\"1\":{\"347\":1}}],[\"使用cas实现\",{\"1\":{\"341\":1}}],[\"使用css\",{\"0\":{\"76\":1}}],[\"使用原子的方式更新基本类型\",{\"1\":{\"340\":1}}],[\"使用循环原子类\",{\"1\":{\"339\":1}}],[\"使用一个处理器或一条收集线程去完成垃圾收集工作\",{\"1\":{\"401\":1}}],[\"使用一个\",{\"1\":{\"331\":1}}],[\"使用的流量控制协议是可变大小的滑动窗口协议\",{\"1\":{\"581\":1}}],[\"使用的人员可能发现点击后很久后页面都没反应\",{\"1\":{\"413\":1}}],[\"使用的\",{\"1\":{\"388\":1,\"412\":1}}],[\"使用的是weakreference的赋值\",{\"1\":{\"310\":1}}],[\"使用的时候再一个一个的一次调用就可以\",{\"1\":{\"247\":1}}],[\"使用top\",{\"1\":{\"418\":1}}],[\"使用threadlocal\",{\"1\":{\"306\":1}}],[\"使用thread\",{\"1\":{\"306\":1}}],[\"使用transient关键字修饰\",{\"1\":{\"282\":1}}],[\"使用注解作为切点就是运行期注解的应用\",{\"1\":{\"287\":1}}],[\"使用了http2作为传输层的一层协议\",{\"1\":{\"845\":1}}],[\"使用了索引下推优化\",{\"1\":{\"510\":1}}],[\"使用了索引合并优化方法\",{\"1\":{\"493\":1}}],[\"使用了\",{\"1\":{\"272\":1,\"730\":1}}],[\"使用心跳\",{\"1\":{\"222\":1}}],[\"使用尾插法插入元素\",{\"1\":{\"177\":1}}],[\"使用头插法插入元素\",{\"1\":{\"177\":1}}],[\"使用随机哈希码\",{\"1\":{\"172\":1}}],[\"使用扰动函数\",{\"1\":{\"165\":1}}],[\"使用\",{\"1\":{\"7\":3,\"158\":3,\"264\":1,\"285\":1,\"291\":2,\"292\":1,\"294\":1,\"352\":1,\"389\":1,\"407\":1,\"410\":1,\"415\":1,\"418\":4,\"421\":1,\"461\":1,\"493\":1,\"519\":1,\"538\":1,\"558\":1,\"559\":1,\"598\":1,\"612\":1,\"678\":1,\"715\":1,\"723\":1,\"734\":1,\"736\":1,\"784\":1,\"787\":1,\"791\":2,\"805\":1,\"806\":2,\"807\":1,\"817\":1}}],[\"cglibaopproxy\",{\"1\":{\"813\":1}}],[\"cglib\",{\"0\":{\"806\":1},\"1\":{\"804\":1,\"806\":9,\"807\":1,\"812\":1}}],[\"c字符串不记录自身长度带来的另外一个问题是容易造成缓存区溢出\",{\"1\":{\"730\":1}}],[\"c语言的字符串可能有什么问题\",{\"1\":{\"730\":1}}],[\"c语⾔的字符串不记录⾃身的⻓度信息\",{\"1\":{\"729\":1}}],[\"c语⾔实现\",{\"1\":{\"671\":1}}],[\"ctl\",{\"1\":{\"664\":1}}],[\"ctrl\",{\"1\":{\"42\":1}}],[\"cwnd到达慢启动阀值后\",{\"1\":{\"587\":1}}],[\"cwnd是发送⽅维护的⼀个的状态变量\",{\"1\":{\"585\":1}}],[\"cwnd\",{\"1\":{\"585\":5,\"586\":8,\"587\":6,\"588\":5,\"589\":8}}],[\"csproxy\",{\"1\":{\"806\":4}}],[\"csrf\",{\"0\":{\"613\":1},\"1\":{\"613\":7}}],[\"css\",{\"1\":{\"560\":1,\"615\":1}}],[\"csiar\",{\"1\":{\"428\":1}}],[\"cms\",{\"0\":{\"403\":1,\"405\":1},\"1\":{\"401\":2,\"403\":5,\"405\":3,\"406\":2,\"407\":1}}],[\"cms和g1\",{\"1\":{\"401\":1}}],[\"cxq\",{\"1\":{\"325\":1}}],[\"c排到a和b的前面\",{\"1\":{\"321\":1}}],[\"c不能被重排序到a和b的前面\",{\"1\":{\"321\":1}}],[\"c==d\",{\"1\":{\"269\":1}}],[\"c=128\",{\"1\":{\"269\":1}}],[\"c=\",{\"0\":{\"269\":1}}],[\"c++\",{\"1\":{\"232\":1}}],[\"c++里难以理解的多继承\",{\"1\":{\"231\":1}}],[\"c++语言的各种优点\",{\"1\":{\"231\":1}}],[\"cpu的消耗\",{\"1\":{\"722\":1}}],[\"cpu的管理和分配\",{\"1\":{\"629\":1}}],[\"cpu饱和的问题\",{\"1\":{\"718\":1}}],[\"cpu成为redis的瓶颈的情况很少见\",{\"1\":{\"673\":1}}],[\"cpu分配的基本单位\",{\"1\":{\"299\":1}}],[\"cpu\",{\"0\":{\"414\":1,\"538\":1},\"1\":{\"299\":1,\"302\":2,\"304\":3,\"317\":3,\"332\":2,\"334\":1,\"364\":1,\"401\":1,\"405\":1,\"410\":1,\"412\":3,\"414\":4,\"418\":3,\"538\":2,\"572\":1,\"629\":1,\"632\":1,\"633\":2,\"636\":3,\"637\":1,\"640\":2,\"642\":1,\"655\":1,\"720\":1}}],[\"cp模型的常见应用\",{\"1\":{\"192\":1}}],[\"cp\",{\"1\":{\"192\":3,\"836\":1}}],[\"ccc\",{\"1\":{\"294\":3}}],[\"cc\",{\"1\":{\"72\":1,\"73\":1}}],[\"certificate\",{\"1\":{\"564\":4}}],[\"ceuta\",{\"1\":{\"64\":1}}],[\"center\",{\"1\":{\"76\":6}}],[\"centered\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"central\",{\"1\":{\"64\":1}}],[\"czech\",{\"1\":{\"64\":1}}],[\"cyclic\",{\"1\":{\"346\":1}}],[\"cyclicbarrier可以在所有的线程释放后重新使用\",{\"1\":{\"347\":1}}],[\"cyclicbarrier面向的是线程数\",{\"1\":{\"347\":1}}],[\"cyclicbarrier是可重用的\",{\"1\":{\"347\":1}}],[\"cyclicbarrier和countdownlatch有什么区别\",{\"0\":{\"347\":1}}],[\"cyclicbarrier最最核心的方法\",{\"1\":{\"346\":1}}],[\"cyclicbarrier的字面意思是可循环使用\",{\"1\":{\"346\":1}}],[\"cyclicbarrier\",{\"0\":{\"346\":1},\"1\":{\"347\":1}}],[\"cyclone\",{\"1\":{\"64\":1}}],[\"cyprus\",{\"1\":{\"64\":1}}],[\"cncf\",{\"1\":{\"868\":1}}],[\"cn\",{\"1\":{\"64\":1,\"115\":1,\"441\":2,\"788\":1,\"793\":2,\"805\":1,\"821\":1}}],[\"cdn\",{\"1\":{\"553\":1,\"614\":1}}],[\"cd\",{\"1\":{\"64\":1}}],[\"ci\",{\"1\":{\"466\":1}}],[\"cidr\",{\"1\":{\"605\":2}}],[\"cid\",{\"1\":{\"441\":1,\"762\":1}}],[\"circuit\",{\"1\":{\"858\":1}}],[\"circus\",{\"1\":{\"64\":1}}],[\"circle\",{\"1\":{\"64\":9}}],[\"cinema\",{\"1\":{\"64\":1}}],[\"cityinfodictmapper\",{\"1\":{\"813\":3}}],[\"cityinfodict\",{\"1\":{\"813\":17}}],[\"city=\",{\"1\":{\"489\":1}}],[\"city\",{\"1\":{\"64\":3,\"489\":2}}],[\"cityscape\",{\"1\":{\"64\":1}}],[\"chrome\",{\"1\":{\"554\":2}}],[\"christmas\",{\"1\":{\"64\":2}}],[\"chubby分布式锁\",{\"1\":{\"210\":1}}],[\"church\",{\"1\":{\"64\":1}}],[\"change是\",{\"1\":{\"537\":1}}],[\"change\",{\"1\":{\"537\":1}}],[\"channelinfotable中\",{\"1\":{\"777\":1}}],[\"channel\",{\"1\":{\"280\":2,\"722\":1,\"778\":1}}],[\"charset\",{\"1\":{\"556\":1}}],[\"character\",{\"1\":{\"285\":1,\"466\":1}}],[\"charat\",{\"1\":{\"270\":1,\"293\":1}}],[\"char字符数组下标和长度\",{\"1\":{\"270\":1}}],[\"char\",{\"0\":{\"461\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"238\":2,\"242\":1,\"263\":1,\"461\":6,\"879\":2}}],[\"chart\",{\"1\":{\"64\":4}}],[\"chad\",{\"1\":{\"64\":1}}],[\"chain\",{\"1\":{\"865\":1}}],[\"chains\",{\"1\":{\"64\":1}}],[\"chair\",{\"1\":{\"64\":1}}],[\"champagne\",{\"1\":{\"64\":1}}],[\"choose>\",{\"1\":{\"444\":1}}],[\"choose\",{\"1\":{\"444\":1}}],[\"chopsticks\",{\"1\":{\"64\":1}}],[\"chocolate\",{\"1\":{\"64\":1}}],[\"checkholdrequest\",{\"1\":{\"778\":1}}],[\"checkpoint是当前要擦除的位置\",{\"1\":{\"483\":1}}],[\"checkpoint\",{\"1\":{\"483\":2}}],[\"checkexcludedclasses\",{\"1\":{\"820\":1}}],[\"checkedexception\",{\"1\":{\"274\":1}}],[\"checkered\",{\"1\":{\"64\":1}}],[\"checkbox0\",{\"1\":{\"74\":1}}],[\"checkbox\",{\"1\":{\"74\":1}}],[\"check\",{\"1\":{\"64\":3,\"677\":1,\"778\":1}}],[\"chess\",{\"1\":{\"64\":1}}],[\"chestnut\",{\"1\":{\"64\":1}}],[\"cheese\",{\"1\":{\"64\":1}}],[\"cherries\",{\"1\":{\"64\":1}}],[\"cherry\",{\"1\":{\"64\":1}}],[\"chile\",{\"1\":{\"64\":1}}],[\"children\",{\"1\":{\"64\":1}}],[\"child\",{\"1\":{\"64\":1,\"300\":1}}],[\"chime\",{\"1\":{\"64\":1}}],[\"chick\",{\"1\":{\"64\":3}}],[\"chicken\",{\"1\":{\"64\":1}}],[\"chipmunk\",{\"1\":{\"64\":1}}],[\"cause\",{\"1\":{\"450\":1}}],[\"caching\",{\"1\":{\"858\":1}}],[\"cache机制的预读取作用下\",{\"1\":{\"772\":1}}],[\"cachedinvoker\",{\"1\":{\"450\":1}}],[\"cachedthreadpool\",{\"1\":{\"364\":1}}],[\"cache\",{\"1\":{\"269\":2,\"446\":1,\"556\":1,\"655\":2}}],[\"cactus\",{\"1\":{\"64\":1}}],[\"ca模型的常见应用\",{\"1\":{\"192\":1}}],[\"ca\",{\"1\":{\"192\":1,\"561\":1,\"564\":10}}],[\"cascading\",{\"1\":{\"615\":1}}],[\"case\",{\"1\":{\"450\":1,\"778\":1}}],[\"cas的经典三大问题\",{\"1\":{\"335\":1}}],[\"cas叫做compareandswap\",{\"1\":{\"334\":1}}],[\"cas了解多少\",{\"0\":{\"334\":1}}],[\"cas呢\",{\"0\":{\"334\":1}}],[\"cas\",{\"0\":{\"335\":1},\"1\":{\"331\":1,\"333\":3,\"334\":2,\"338\":2,\"384\":1}}],[\"cas获取偏向锁失败表示有竞争\",{\"1\":{\"328\":1}}],[\"casting\",{\"1\":{\"239\":1}}],[\"castabat\",{\"1\":{\"181\":1}}],[\"castle\",{\"1\":{\"64\":2}}],[\"cas操作都不做\",{\"1\":{\"327\":1}}],[\"cas操作\",{\"1\":{\"181\":1}}],[\"cas+synchronized\",{\"0\":{\"181\":1}}],[\"caicos\",{\"1\":{\"64\":1}}],[\"cayman\",{\"1\":{\"64\":1}}],[\"cabinet\",{\"1\":{\"64\":1}}],[\"cableway\",{\"1\":{\"64\":1}}],[\"caledonia\",{\"1\":{\"64\":1}}],[\"calendar\",{\"1\":{\"64\":2}}],[\"callerrunspolicy\",{\"1\":{\"355\":1}}],[\"callertask\",{\"1\":{\"300\":2}}],[\"callablestatement\",{\"1\":{\"448\":1}}],[\"callable<string>\",{\"1\":{\"300\":1}}],[\"callable\",{\"1\":{\"292\":1}}],[\"calling\",{\"1\":{\"64\":1}}],[\"call\",{\"1\":{\"64\":1,\"300\":1,\"402\":1,\"725\":4,\"830\":1,\"845\":1}}],[\"capabilities\",{\"1\":{\"477\":1}}],[\"capacity\",{\"1\":{\"169\":3,\"173\":1,\"181\":1}}],[\"cap对应的模型和应用\",{\"0\":{\"192\":1}}],[\"cap原则又称cap定理\",{\"1\":{\"190\":1}}],[\"cape\",{\"1\":{\"64\":1}}],[\"capital\",{\"1\":{\"64\":1}}],[\"capricorn\",{\"1\":{\"64\":1}}],[\"cap\",{\"1\":{\"64\":1,\"169\":2,\"836\":1}}],[\"cambodia\",{\"1\":{\"64\":1}}],[\"cameroon\",{\"1\":{\"64\":1}}],[\"camera\",{\"1\":{\"64\":4}}],[\"camel\",{\"1\":{\"64\":2}}],[\"camping\",{\"1\":{\"64\":1}}],[\"cake\",{\"1\":{\"64\":3}}],[\"cancompute\",{\"1\":{\"373\":2}}],[\"cancommit\",{\"1\":{\"203\":2}}],[\"cancel\",{\"1\":{\"204\":3,\"870\":1}}],[\"cancer\",{\"1\":{\"64\":1}}],[\"canal\",{\"1\":{\"708\":1}}],[\"canary\",{\"1\":{\"64\":1}}],[\"canada\",{\"1\":{\"64\":1}}],[\"candidate\",{\"1\":{\"221\":1}}],[\"candle\",{\"1\":{\"64\":1}}],[\"candy\",{\"1\":{\"64\":1}}],[\"canoe\",{\"1\":{\"64\":1}}],[\"canned\",{\"1\":{\"64\":1}}],[\"cane\",{\"1\":{\"64\":4}}],[\"caribbean\",{\"1\":{\"64\":1}}],[\"cartesianproduct\",{\"1\":{\"470\":1}}],[\"cart\",{\"1\":{\"64\":1}}],[\"cartwheeling\",{\"1\":{\"64\":3}}],[\"carpentry\",{\"1\":{\"64\":1}}],[\"card\",{\"1\":{\"64\":5}}],[\"cards\",{\"1\":{\"64\":1}}],[\"car\",{\"1\":{\"64\":7,\"796\":7}}],[\"carousel\",{\"1\":{\"64\":1}}],[\"carrot\",{\"1\":{\"64\":1}}],[\"care\",{\"1\":{\"64\":1}}],[\"catdaoimpl\",{\"1\":{\"795\":3}}],[\"categorybean\",{\"1\":{\"441\":2}}],[\"categoryname\",{\"1\":{\"441\":2}}],[\"categoryid\",{\"1\":{\"441\":2}}],[\"category\",{\"1\":{\"441\":5}}],[\"cats=new\",{\"1\":{\"285\":2}}],[\"catch\",{\"1\":{\"256\":1,\"275\":4,\"276\":2,\"300\":2,\"332\":1,\"345\":2,\"348\":1,\"349\":2,\"357\":2,\"373\":2,\"389\":1,\"450\":2,\"778\":1,\"788\":2,\"802\":2,\"813\":2}}],[\"cat2\",{\"1\":{\"64\":1}}],[\"cat\",{\"1\":{\"64\":11}}],[\"cunha\",{\"1\":{\"64\":1}}],[\"cuba\",{\"1\":{\"64\":1}}],[\"cube|rollup\",{\"1\":{\"470\":1}}],[\"cube\",{\"1\":{\"64\":1,\"470\":1}}],[\"customer\",{\"1\":{\"491\":3}}],[\"customs\",{\"1\":{\"64\":1}}],[\"custard\",{\"1\":{\"64\":1}}],[\"cup\",{\"1\":{\"64\":1}}],[\"cupcake\",{\"1\":{\"64\":1}}],[\"cupid\",{\"1\":{\"64\":1}}],[\"cutlery\",{\"1\":{\"64\":1}}],[\"cut\",{\"1\":{\"64\":1}}],[\"cucumber\",{\"1\":{\"64\":1}}],[\"cursor<e>\",{\"1\":{\"448\":1}}],[\"cursing\",{\"1\":{\"64\":1}}],[\"curacao\",{\"1\":{\"64\":1}}],[\"curl\",{\"1\":{\"64\":1}}],[\"curling\",{\"1\":{\"64\":1}}],[\"curly\",{\"1\":{\"64\":4}}],[\"currency\",{\"1\":{\"64\":1}}],[\"currenttimemillis\",{\"1\":{\"445\":2,\"805\":2}}],[\"currentthread\",{\"1\":{\"310\":1}}],[\"current\",{\"1\":{\"25\":3,\"463\":1}}],[\"curry\",{\"1\":{\"64\":1}}],[\"crud\",{\"1\":{\"804\":1}}],[\"crutch\",{\"1\":{\"64\":1}}],[\"critical\",{\"1\":{\"727\":3}}],[\"cricket\",{\"1\":{\"64\":2}}],[\"crc\",{\"1\":{\"580\":1}}],[\"creator\",{\"1\":{\"523\":2}}],[\"createbean\",{\"1\":{\"788\":2}}],[\"createtime\",{\"1\":{\"443\":1}}],[\"create\",{\"1\":{\"443\":1,\"806\":1}}],[\"created\",{\"1\":{\"418\":1}}],[\"createstatement\",{\"1\":{\"389\":1}}],[\"createinheritedmap\",{\"1\":{\"315\":1}}],[\"createmap\",{\"1\":{\"310\":1}}],[\"cream\",{\"1\":{\"64\":1}}],[\"credit\",{\"1\":{\"64\":1}}],[\"crescent\",{\"1\":{\"64\":4}}],[\"crash\",{\"1\":{\"477\":1}}],[\"crayon\",{\"1\":{\"64\":1}}],[\"crab\",{\"1\":{\"64\":1}}],[\"cracker\",{\"1\":{\"64\":1}}],[\"croatia\",{\"1\":{\"64\":1}}],[\"croissant\",{\"1\":{\"64\":1}}],[\"crocodile\",{\"1\":{\"64\":1}}],[\"crown\",{\"1\":{\"64\":2}}],[\"cross\",{\"1\":{\"64\":3,\"458\":1,\"613\":1,\"615\":1}}],[\"crossing\",{\"1\":{\"64\":1}}],[\"crossed\",{\"1\":{\"64\":4}}],[\"crossbones\",{\"1\":{\"64\":1}}],[\"crystal\",{\"1\":{\"64\":1}}],[\"crying\",{\"1\":{\"64\":1}}],[\"cry\",{\"1\":{\"64\":1}}],[\"clustering\",{\"1\":{\"745\":1}}],[\"cluster或者第三方集群方案如codis等\",{\"1\":{\"704\":1}}],[\"cluster\",{\"1\":{\"697\":2}}],[\"clubs\",{\"1\":{\"64\":1}}],[\"clh\",{\"1\":{\"331\":4}}],[\"cleansomeslots\",{\"1\":{\"314\":1}}],[\"cl\",{\"1\":{\"64\":1}}],[\"client向token\",{\"1\":{\"861\":1}}],[\"client的机制来实现集群限流\",{\"1\":{\"861\":1}}],[\"clients\",{\"1\":{\"848\":1}}],[\"client可以通过注册监听器的方式\",{\"1\":{\"842\":1}}],[\"client通过api从nacos\",{\"1\":{\"842\":1}}],[\"client会向nacos\",{\"1\":{\"842\":1}}],[\"client\",{\"1\":{\"806\":4,\"836\":2}}],[\"cli\",{\"1\":{\"718\":1}}],[\"clipperton\",{\"1\":{\"64\":1}}],[\"clipboard\",{\"1\":{\"64\":1}}],[\"clinking\",{\"1\":{\"64\":1}}],[\"climbing\",{\"1\":{\"64\":3}}],[\"clazz\",{\"1\":{\"788\":2}}],[\"clazz=list\",{\"1\":{\"285\":1}}],[\"claim\",{\"1\":{\"64\":1}}],[\"clamp\",{\"1\":{\"64\":1}}],[\"claus\",{\"1\":{\"64\":2}}],[\"clapper\",{\"1\":{\"64\":1}}],[\"clap\",{\"1\":{\"64\":1}}],[\"class=\",{\"1\":{\"793\":2,\"795\":6}}],[\"classnotfoundexception\",{\"1\":{\"788\":1}}],[\"classname\",{\"1\":{\"788\":2}}],[\"classloader\",{\"1\":{\"423\":3,\"426\":1,\"427\":4,\"428\":4}}],[\"class<t>\",{\"1\":{\"450\":2}}],[\"class<\",{\"1\":{\"272\":1,\"285\":1,\"813\":1,\"820\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"791\":1,\"793\":2}}],[\"classpathresource\",{\"1\":{\"790\":1}}],[\"classpath\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"423\":1,\"425\":1,\"879\":1}}],[\"classpath=\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"classpath环境属性\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"classical\",{\"1\":{\"64\":1}}],[\"class\",{\"0\":{\"23\":1,\"25\":1,\"252\":1},\"1\":{\"16\":1,\"17\":1,\"21\":1,\"137\":6,\"140\":6,\"147\":6,\"235\":2,\"236\":1,\"238\":1,\"257\":1,\"258\":1,\"266\":1,\"269\":1,\"272\":1,\"276\":3,\"285\":3,\"287\":5,\"289\":1,\"300\":4,\"310\":2,\"315\":1,\"324\":3,\"325\":1,\"348\":1,\"349\":1,\"352\":1,\"373\":1,\"377\":2,\"388\":3,\"389\":3,\"422\":2,\"423\":3,\"428\":5,\"429\":2,\"435\":1,\"441\":2,\"445\":1,\"450\":4,\"453\":5,\"788\":11,\"790\":1,\"791\":1,\"793\":3,\"795\":5,\"805\":3,\"806\":6,\"807\":1,\"813\":1,\"820\":1,\"821\":5,\"849\":1,\"858\":1,\"879\":6}}],[\"closestatement\",{\"1\":{\"448\":1}}],[\"close=\",{\"1\":{\"444\":1}}],[\"close\",{\"0\":{\"578\":1},\"1\":{\"389\":1,\"417\":1,\"435\":1,\"445\":3,\"446\":1,\"568\":1,\"574\":1,\"578\":3,\"788\":1,\"793\":1}}],[\"closed\",{\"0\":{\"576\":1},\"1\":{\"64\":6,\"73\":1,\"573\":1,\"574\":2,\"576\":1}}],[\"cloneable\",{\"1\":{\"272\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"272\":2}}],[\"clone\",{\"1\":{\"186\":1,\"260\":1,\"261\":2,\"272\":4}}],[\"clothes\",{\"1\":{\"64\":1}}],[\"cloud提供了多种选择的微服务链路追踪方案\",{\"1\":{\"868\":1}}],[\"cloud集成\",{\"1\":{\"864\":1}}],[\"cloud的其他组件集成\",{\"1\":{\"864\":1}}],[\"cloud官方推荐的api网关\",{\"1\":{\"864\":1}}],[\"cloud早期版本中提供的默认api网关\",{\"1\":{\"864\":1}}],[\"cloud|resilience4j|\",{\"1\":{\"857\":1}}],[\"cloud其他组件无缝集成|\",{\"1\":{\"857\":1}}],[\"cloud其他组件无缝集成\",{\"1\":{\"857\":1}}],[\"cloud生态系统\",{\"1\":{\"846\":1}}],[\"cloud\",{\"0\":{\"823\":1,\"865\":1},\"1\":{\"64\":8,\"824\":2,\"826\":1,\"830\":5,\"831\":11,\"832\":15,\"835\":1,\"841\":1,\"857\":3,\"864\":3,\"865\":6,\"868\":7,\"877\":1}}],[\"clouds\",{\"1\":{\"64\":1}}],[\"clockwise\",{\"1\":{\"64\":1}}],[\"clock930\",{\"1\":{\"64\":1}}],[\"clock9\",{\"1\":{\"64\":1}}],[\"clock830\",{\"1\":{\"64\":1}}],[\"clock8\",{\"1\":{\"64\":1}}],[\"clock730\",{\"1\":{\"64\":1}}],[\"clock7\",{\"1\":{\"64\":1}}],[\"clock630\",{\"1\":{\"64\":1}}],[\"clock6\",{\"1\":{\"64\":1}}],[\"clock530\",{\"1\":{\"64\":1}}],[\"clock5\",{\"1\":{\"64\":1}}],[\"clock430\",{\"1\":{\"64\":1}}],[\"clock4\",{\"1\":{\"64\":1}}],[\"clock330\",{\"1\":{\"64\":1}}],[\"clock3\",{\"1\":{\"64\":1}}],[\"clock230\",{\"1\":{\"64\":1}}],[\"clock2\",{\"1\":{\"64\":1}}],[\"clock1130\",{\"1\":{\"64\":1}}],[\"clock11\",{\"1\":{\"64\":1}}],[\"clock1030\",{\"1\":{\"64\":1}}],[\"clock10\",{\"1\":{\"64\":1}}],[\"clock130\",{\"1\":{\"64\":1}}],[\"clock1\",{\"1\":{\"64\":1}}],[\"clock1230\",{\"1\":{\"64\":1}}],[\"clock12\",{\"1\":{\"64\":1}}],[\"clock\",{\"1\":{\"64\":3}}],[\"clover\",{\"1\":{\"64\":1}}],[\"clown\",{\"1\":{\"64\":1}}],[\"cost\",{\"1\":{\"778\":1}}],[\"costtime\",{\"1\":{\"778\":3}}],[\"costa\",{\"1\":{\"64\":1}}],[\"cosumer\",{\"1\":{\"769\":1}}],[\"cosumer可以从master和slave角色的broker读取消息\",{\"1\":{\"767\":1}}],[\"codis这些基于代理的redis分布式架构\",{\"1\":{\"710\":1}}],[\"codehole\",{\"1\":{\"727\":1}}],[\"code\",{\"1\":{\"267\":3}}],[\"cote\",{\"1\":{\"64\":1}}],[\"coordinator\",{\"1\":{\"208\":1,\"871\":2}}],[\"cool\",{\"1\":{\"64\":1}}],[\"cookie\",{\"0\":{\"566\":1},\"1\":{\"64\":2,\"565\":1,\"566\":26,\"573\":3}}],[\"cook\",{\"1\":{\"64\":4}}],[\"coffin\",{\"1\":{\"64\":1}}],[\"coffee\",{\"1\":{\"64\":1}}],[\"counted\",{\"1\":{\"402\":1}}],[\"counter\",{\"1\":{\"379\":1}}],[\"counterclockwise\",{\"1\":{\"64\":1}}],[\"counting\",{\"1\":{\"390\":1,\"404\":1}}],[\"counttask\",{\"1\":{\"373\":8}}],[\"countdown\",{\"1\":{\"345\":8}}],[\"countdownlatch在计数器为0时不能再使用\",{\"1\":{\"347\":1}}],[\"countdownlatch面向的是任务数\",{\"1\":{\"347\":1}}],[\"countdownlatch中的各个子线程不可以等待其他线程\",{\"1\":{\"347\":1}}],[\"countdownlatch是一次性的\",{\"1\":{\"347\":2}}],[\"countdownlatch的核心方法也不多\",{\"1\":{\"345\":1}}],[\"countdownlatch模仿这个场景\",{\"1\":{\"345\":1}}],[\"countdownlatch允许一个或多个线程等待其他线程完成操作\",{\"1\":{\"345\":1}}],[\"countdownlatch\",{\"0\":{\"345\":1},\"1\":{\"345\":23,\"347\":1}}],[\"count\",{\"0\":{\"469\":3},\"1\":{\"245\":3,\"294\":3,\"325\":3,\"348\":3,\"367\":5,\"469\":11,\"477\":2,\"534\":1}}],[\"count=coutn+1\",{\"1\":{\"245\":1}}],[\"count=count++\",{\"1\":{\"245\":1}}],[\"count=0\",{\"1\":{\"245\":1}}],[\"couch\",{\"1\":{\"64\":1}}],[\"couplekiss\",{\"1\":{\"64\":4}}],[\"couple\",{\"1\":{\"64\":5}}],[\"coin\",{\"1\":{\"64\":1}}],[\"cover\",{\"1\":{\"64\":1,\"270\":1}}],[\"coat\",{\"1\":{\"64\":2}}],[\"coaster\",{\"1\":{\"64\":1}}],[\"com所对应的\",{\"1\":{\"547\":1}}],[\"com的权限域名服务器的\",{\"1\":{\"547\":1}}],[\"com对应的\",{\"1\":{\"547\":1}}],[\"comidx\",{\"1\":{\"509\":1}}],[\"common\",{\"0\":{\"884\":1}}],[\"commonclassloader\",{\"1\":{\"429\":1}}],[\"command\",{\"1\":{\"450\":1,\"859\":1}}],[\"commitlog目录中\",{\"1\":{\"771\":1}}],[\"commitlog文件保存于$\",{\"1\":{\"771\":1}}],[\"commitlog\",{\"1\":{\"749\":1,\"771\":1}}],[\"commited\",{\"1\":{\"521\":1}}],[\"committed和repeatable\",{\"1\":{\"523\":2}}],[\"committed\",{\"1\":{\"513\":1,\"520\":1,\"522\":1,\"523\":2,\"810\":1}}],[\"commit\",{\"1\":{\"435\":1,\"445\":1,\"477\":1,\"481\":1,\"765\":3,\"870\":1,\"871\":1}}],[\"com\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"107\":1,\"115\":1,\"352\":1,\"389\":1,\"428\":1,\"429\":1,\"436\":1,\"437\":2,\"440\":1,\"445\":1,\"489\":1,\"546\":1,\"547\":1,\"795\":3,\"847\":1,\"858\":1}}],[\"combotree\",{\"1\":{\"72\":1,\"73\":1}}],[\"combotree去掉默认图标或更换图标\",{\"0\":{\"70\":1}}],[\"combotree去掉默认图标\",{\"1\":{\"50\":1}}],[\"comoros\",{\"1\":{\"64\":1}}],[\"compile\",{\"1\":{\"807\":2}}],[\"component\",{\"1\":{\"784\":5,\"805\":1}}],[\"component注解就声明了一个类为\",{\"1\":{\"289\":1}}],[\"compress\",{\"1\":{\"558\":1}}],[\"comprator\",{\"1\":{\"184\":1}}],[\"computetransactionattribute\",{\"1\":{\"813\":1}}],[\"computetransactionattribute方法\",{\"1\":{\"813\":1}}],[\"compute\",{\"1\":{\"373\":1}}],[\"computer\",{\"1\":{\"64\":3}}],[\"compact\",{\"1\":{\"395\":1}}],[\"compareto\",{\"1\":{\"294\":1}}],[\"compareandswapobject\",{\"1\":{\"181\":1}}],[\"compareandswapint\",{\"1\":{\"181\":2,\"341\":2}}],[\"comparator\",{\"1\":{\"184\":1,\"292\":1}}],[\"comparable\",{\"1\":{\"184\":1}}],[\"compass\",{\"1\":{\"64\":1}}],[\"comet\",{\"1\":{\"64\":1}}],[\"coreos\",{\"1\":{\"835\":1}}],[\"core\",{\"1\":{\"783\":2}}],[\"corepoolsize时\",{\"1\":{\"354\":3}}],[\"corepoolsize\",{\"1\":{\"352\":1,\"353\":5,\"354\":3,\"365\":2}}],[\"corn\",{\"1\":{\"64\":1}}],[\"coral\",{\"1\":{\"64\":1}}],[\"cocos\",{\"1\":{\"64\":1}}],[\"coconut\",{\"1\":{\"64\":1}}],[\"cocktail\",{\"1\":{\"64\":1}}],[\"cockroach\",{\"1\":{\"64\":1}}],[\"cow2\",{\"1\":{\"64\":1}}],[\"cow\",{\"1\":{\"64\":1}}],[\"cowboy\",{\"1\":{\"64\":1}}],[\"copyonwritearraylist容器允许并发读\",{\"1\":{\"159\":1}}],[\"copyonwritearraylist采用了一种读写分离的并发策略\",{\"1\":{\"159\":1}}],[\"copyonwritearraylist就是线程安全版本的arraylist\",{\"1\":{\"159\":1}}],[\"copyonwritearraylist了解多少\",{\"0\":{\"159\":1}}],[\"copyonwritearraylist\",{\"1\":{\"158\":1}}],[\"copyright\",{\"1\":{\"64\":1}}],[\"cop\",{\"1\":{\"64\":1}}],[\"column<\",{\"1\":{\"489\":1}}],[\"column\",{\"1\":{\"437\":1}}],[\"column为数据库表中的属性\",{\"1\":{\"437\":1}}],[\"column=\",{\"1\":{\"437\":2,\"441\":9}}],[\"collapsing\",{\"1\":{\"858\":1}}],[\"collapseall\",{\"1\":{\"73\":1}}],[\"collate\",{\"1\":{\"466\":1}}],[\"collected\",{\"1\":{\"379\":1}}],[\"collection的属性值为array\",{\"1\":{\"445\":1}}],[\"collection属性值为list\",{\"1\":{\"445\":1}}],[\"collection\",{\"1\":{\"445\":1}}],[\"collection指的就是一对多查询\",{\"1\":{\"442\":1}}],[\"collection>\",{\"1\":{\"441\":1}}],[\"collections\",{\"1\":{\"158\":1,\"178\":3}}],[\"collection配置为该属性名stumap即可\",{\"1\":{\"91\":1}}],[\"collection配置为该属性名stuarray即可\",{\"1\":{\"90\":1}}],[\"collection配置为该属性名stulist即可\",{\"1\":{\"89\":1}}],[\"collection直接配置为相应集合中的属性名即可\",{\"1\":{\"89\":1}}],[\"collection=\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"444\":1,\"445\":2}}],[\"collection无默认键\",{\"1\":{\"86\":1}}],[\"collision\",{\"1\":{\"64\":1}}],[\"colombia\",{\"1\":{\"64\":1}}],[\"cold\",{\"1\":{\"64\":2}}],[\"conusmer消费消息的时候同样从nameserver获取broker地址\",{\"1\":{\"769\":1}}],[\"condition\",{\"1\":{\"510\":1}}],[\"condition>的记录才被插入虚拟表\",{\"1\":{\"470\":2}}],[\"condition>的行才被插入虚拟表\",{\"1\":{\"470\":1}}],[\"connect\",{\"1\":{\"863\":1}}],[\"connections\",{\"1\":{\"559\":1}}],[\"connection\",{\"1\":{\"389\":2,\"556\":1,\"560\":1,\"851\":1}}],[\"conn\",{\"1\":{\"389\":3}}],[\"contrib\",{\"1\":{\"858\":1}}],[\"controller\",{\"1\":{\"784\":5,\"785\":1,\"798\":1,\"805\":1,\"816\":5,\"817\":5}}],[\"control\",{\"1\":{\"64\":2,\"381\":1,\"411\":1,\"515\":2,\"523\":1,\"556\":1,\"608\":1,\"609\":1}}],[\"container是必要模块之外\",{\"1\":{\"783\":1}}],[\"containskey\",{\"1\":{\"788\":1}}],[\"contains\",{\"1\":{\"267\":1}}],[\"content\",{\"1\":{\"466\":1,\"556\":3}}],[\"context=new\",{\"1\":{\"791\":1}}],[\"context\",{\"1\":{\"427\":1,\"636\":1,\"762\":1,\"783\":1,\"791\":1,\"793\":3}}],[\"continue\",{\"0\":{\"243\":1},\"1\":{\"243\":1}}],[\"consul等等\",{\"1\":{\"837\":1}}],[\"consul\",{\"1\":{\"831\":1,\"832\":1,\"835\":2,\"841\":1,\"846\":1}}],[\"consuming\",{\"1\":{\"805\":1}}],[\"consumequeue逻辑消费队列存储的数据较少\",{\"1\":{\"772\":1}}],[\"consumequeue\",{\"1\":{\"771\":3}}],[\"consumequeue文件可以看成是基于topic的commitlog索引文件\",{\"1\":{\"771\":1}}],[\"consumequeue文件\",{\"1\":{\"771\":1}}],[\"consume\",{\"1\":{\"762\":1,\"772\":1}}],[\"consumeconcurrentlycontext\",{\"1\":{\"762\":1}}],[\"consumeconcurrentlystatus\",{\"1\":{\"762\":2}}],[\"consumemessage\",{\"1\":{\"762\":1}}],[\"consumer端实现负载均衡的核心类\",{\"1\":{\"777\":1}}],[\"consumer端的心跳包发送\",{\"1\":{\"777\":1}}],[\"consumer端的两种消费模式\",{\"1\":{\"777\":1}}],[\"consumertable\",{\"1\":{\"777\":1}}],[\"consumer的负载均衡\",{\"0\":{\"777\":1}}],[\"consumer也就肯定有机会去消费这条消息\",{\"1\":{\"771\":1}}],[\"consumer也由用户部署\",{\"1\":{\"751\":1}}],[\"consumer即可根据consumequeue来查找待消费的消息\",{\"1\":{\"771\":1}}],[\"consumer消费者集群和若干broker\",{\"1\":{\"769\":1}}],[\"consumer保证消息成功消费的关键在于确认的时机\",{\"1\":{\"756\":1}}],[\"consumer\",{\"0\":{\"751\":1},\"1\":{\"292\":1,\"744\":3,\"746\":1,\"747\":1,\"748\":1,\"749\":1,\"751\":2,\"761\":4,\"762\":10,\"765\":4,\"767\":5,\"769\":1,\"778\":1}}],[\"consistent\",{\"1\":{\"193\":1}}],[\"consistency\",{\"1\":{\"190\":2,\"193\":3,\"519\":1}}],[\"constructor\",{\"1\":{\"795\":1,\"796\":3}}],[\"construction\",{\"1\":{\"64\":5}}],[\"const\",{\"1\":{\"12\":1,\"137\":1,\"140\":1,\"147\":1,\"493\":5,\"879\":1}}],[\"concurrency\",{\"1\":{\"515\":2,\"523\":1}}],[\"concurrent\",{\"1\":{\"340\":1,\"401\":1,\"403\":3,\"404\":1}}],[\"concurrenthashmap线程安全在jdk1\",{\"1\":{\"179\":1}}],[\"concurrenthashmap\",{\"1\":{\"178\":2}}],[\"concurrent包下的容器都是安全失败\",{\"1\":{\"157\":1}}],[\"concat\",{\"1\":{\"440\":1}}],[\"concave\",{\"1\":{\"31\":1}}],[\"congiguration\",{\"1\":{\"792\":2}}],[\"congestion\",{\"1\":{\"585\":1}}],[\"congo\",{\"1\":{\"64\":2}}],[\"congratulations\",{\"1\":{\"64\":1}}],[\"convertargstosqlcommandparam\",{\"1\":{\"450\":1}}],[\"convenience\",{\"1\":{\"64\":1}}],[\"convex\",{\"1\":{\"31\":1}}],[\"conf\",{\"1\":{\"715\":1}}],[\"configure\",{\"1\":{\"821\":1}}],[\"configurationproperties\",{\"1\":{\"821\":1}}],[\"configurations\",{\"1\":{\"820\":9}}],[\"configuration\",{\"1\":{\"448\":7,\"687\":1,\"784\":1,\"821\":2,\"849\":1}}],[\"config\",{\"1\":{\"433\":1,\"435\":1,\"448\":3,\"793\":1,\"831\":2,\"832\":2,\"841\":1}}],[\"confirm和cancel方法\",{\"1\":{\"870\":1}}],[\"confirm和cancel三个阶段的操作\",{\"1\":{\"870\":1}}],[\"confirm\",{\"1\":{\"204\":3,\"870\":1}}],[\"confetti\",{\"1\":{\"64\":1}}],[\"confounded\",{\"1\":{\"64\":1}}],[\"confused\",{\"1\":{\"64\":1}}],[\"c\",{\"0\":{\"730\":1},\"1\":{\"36\":2,\"181\":2,\"192\":1,\"269\":1,\"320\":2,\"321\":1,\"325\":1,\"334\":2,\"441\":3,\"603\":2,\"605\":1,\"730\":7}}],[\"rpop消费消息\",{\"1\":{\"722\":1}}],[\"rpc方式\",{\"1\":{\"831\":1}}],[\"rpc\",{\"1\":{\"222\":1,\"227\":1,\"824\":1,\"830\":1,\"832\":1,\"845\":1}}],[\"rdb文件存在错误时\",{\"1\":{\"679\":1}}],[\"rdb文件成功后\",{\"1\":{\"679\":1}}],[\"rdb和aof如何选择\",{\"0\":{\"678\":1}}],[\"rdb恢复数据的速度远远快于aof的方式\",{\"1\":{\"677\":1}}],[\"rdb持久化过程由子进程负责\",{\"1\":{\"676\":1}}],[\"rdb持久化是把当前进程数据生成快照保存到硬盘的过程\",{\"1\":{\"676\":1}}],[\"rdb⽂件是⼀个压缩的⼆进制⽂件\",{\"1\":{\"676\":1}}],[\"rdb\",{\"0\":{\"677\":1},\"1\":{\"676\":1,\"677\":6,\"678\":5,\"680\":4,\"719\":2}}],[\"rwnd\",{\"1\":{\"585\":2}}],[\"rwanda\",{\"1\":{\"64\":1}}],[\"rcvd\",{\"1\":{\"573\":1}}],[\"rcv\",{\"1\":{\"568\":1}}],[\"rto\",{\"1\":{\"588\":3,\"589\":1,\"591\":8}}],[\"rttvar\",{\"1\":{\"591\":5}}],[\"rtt\",{\"1\":{\"587\":1,\"591\":5,\"726\":1}}],[\"rt\",{\"1\":{\"425\":1}}],[\"rm\",{\"1\":{\"202\":1,\"208\":3}}],[\"rsa\",{\"0\":{\"617\":1},\"1\":{\"616\":1,\"617\":1}}],[\"rst\",{\"1\":{\"570\":1,\"578\":1,\"580\":1}}],[\"rs\",{\"1\":{\"181\":4,\"389\":1}}],[\"rrrr\",{\"0\":{\"137\":1,\"140\":1}}],[\"ruleconstant\",{\"1\":{\"859\":1}}],[\"rule1\",{\"1\":{\"859\":6}}],[\"rules\",{\"1\":{\"859\":3}}],[\"ruler\",{\"1\":{\"64\":2}}],[\"runwith\",{\"1\":{\"821\":1}}],[\"runid\",{\"1\":{\"685\":1}}],[\"runing\",{\"1\":{\"637\":1}}],[\"run\",{\"1\":{\"232\":1,\"292\":2,\"300\":2,\"315\":2,\"348\":1,\"349\":2,\"357\":1,\"388\":1,\"778\":2}}],[\"runtime和处理器共同编织了这么一个\",{\"1\":{\"321\":1}}],[\"runtime和处理器都必须遵守as\",{\"1\":{\"321\":1}}],[\"runtimeexception\",{\"1\":{\"274\":1,\"813\":1,\"859\":1}}],[\"runtime\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"287\":2,\"359\":1,\"805\":1,\"879\":1}}],[\"runnabletask\",{\"1\":{\"300\":3}}],[\"runnable\",{\"1\":{\"292\":3,\"300\":3,\"303\":1,\"310\":1,\"348\":1,\"349\":2,\"357\":1,\"388\":1,\"418\":2}}],[\"running\",{\"1\":{\"64\":4,\"292\":2,\"300\":1,\"367\":3}}],[\"runner\",{\"1\":{\"64\":1}}],[\"ru\",{\"1\":{\"64\":1}}],[\"rugby\",{\"1\":{\"64\":1}}],[\"ribbon通过从服务注册中心获取可用服务列表\",{\"1\":{\"850\":1}}],[\"ribbon是netflix开源的一个客户端负载均衡器\",{\"1\":{\"850\":1}}],[\"ribbon的基础上进一步封装\",{\"1\":{\"847\":1}}],[\"ribbon\",{\"0\":{\"850\":1},\"1\":{\"64\":2,\"830\":1,\"831\":2,\"848\":1}}],[\"ringed\",{\"1\":{\"64\":1}}],[\"ring\",{\"1\":{\"64\":2}}],[\"rico\",{\"1\":{\"64\":1}}],[\"rica\",{\"1\":{\"64\":1}}],[\"rickshaw\",{\"1\":{\"64\":1}}],[\"rice\",{\"1\":{\"64\":5}}],[\"rightresult\",{\"1\":{\"373\":2}}],[\"righttask\",{\"1\":{\"373\":3}}],[\"rightwards\",{\"1\":{\"64\":3}}],[\"right\",{\"1\":{\"23\":1,\"53\":1,\"64\":9,\"125\":1,\"128\":1,\"459\":1,\"470\":1}}],[\"rhinoceros\",{\"1\":{\"64\":1}}],[\"rank\",{\"1\":{\"732\":1}}],[\"random\",{\"1\":{\"717\":2,\"851\":2}}],[\"randomuuid\",{\"1\":{\"445\":1}}],[\"range\",{\"1\":{\"493\":4,\"529\":1,\"530\":1}}],[\"radix\",{\"1\":{\"270\":3}}],[\"radioactive\",{\"1\":{\"64\":1}}],[\"radio\",{\"1\":{\"64\":2}}],[\"raft算法的角色\",{\"0\":{\"221\":1}}],[\"raft算法的工作流程\",{\"0\":{\"220\":1}}],[\"raft算法是什么\",{\"0\":{\"219\":1}}],[\"raft\",{\"1\":{\"219\":3,\"221\":1,\"222\":1}}],[\"razor\",{\"1\":{\"64\":1}}],[\"ray\",{\"1\":{\"64\":1}}],[\"rainbow\",{\"1\":{\"64\":2}}],[\"rain\",{\"1\":{\"64\":3}}],[\"rail\",{\"1\":{\"64\":1}}],[\"railway\",{\"1\":{\"64\":4}}],[\"raising\",{\"1\":{\"64\":3}}],[\"raised\",{\"1\":{\"64\":6}}],[\"rabbitmq\",{\"1\":{\"741\":1}}],[\"rabbit2\",{\"1\":{\"64\":1}}],[\"rabbit\",{\"1\":{\"64\":1}}],[\"ratelimiter是一个谷歌提供的限流\",{\"1\":{\"227\":1}}],[\"ratelimiter限流\",{\"1\":{\"227\":1}}],[\"rat\",{\"1\":{\"64\":1}}],[\"ramen\",{\"1\":{\"64\":1}}],[\"ram\",{\"1\":{\"64\":1,\"475\":1,\"657\":1}}],[\"race\",{\"1\":{\"181\":1}}],[\"racehorse\",{\"1\":{\"64\":1}}],[\"raccoon\",{\"1\":{\"64\":1}}],[\"racing\",{\"1\":{\"64\":2}}],[\"rage\",{\"1\":{\"64\":1}}],[\"robin\",{\"1\":{\"851\":2}}],[\"robot\",{\"1\":{\"64\":1}}],[\"rod\",{\"1\":{\"782\":1}}],[\"roctetmq基本架构了解吗\",{\"0\":{\"746\":1}}],[\"rocketmq消息长轮询了解吗\",{\"0\":{\"778\":1}}],[\"rocketmq提供了两种刷盘策略\",{\"1\":{\"774\":1}}],[\"rocketmq主要通过mappedbytebuffer对文件进行读写操作\",{\"1\":{\"772\":1}}],[\"rocketmq主要的存储文件包括commitlog文件\",{\"1\":{\"771\":1}}],[\"rocketmq对文件的读写巧妙地利用了操作系统的一些高效文件读写方式\",{\"1\":{\"772\":1}}],[\"rocketmq采用的是混合型的存储结构\",{\"1\":{\"771\":1}}],[\"rocketmq不使用zookeeper其实主要可能从这几方面来考虑\",{\"1\":{\"770\":1}}],[\"rocketmq进程\",{\"1\":{\"769\":1}}],[\"rocketmq由nameserver注册中心集群\",{\"1\":{\"769\":1}}],[\"rocketmq是一个分布式消息队列\",{\"1\":{\"769\":1}}],[\"rocketmq是支持延时消息的\",{\"1\":{\"763\":1}}],[\"rocketmq怎么实现延时消息的\",{\"0\":{\"764\":1}}],[\"rocketmq择了确保一定投递\",{\"1\":{\"757\":1}}],[\"rocketmq的客户端在默认方式下selectonemessagequeue\",{\"1\":{\"776\":1}}],[\"rocketmq的具体做法是\",{\"1\":{\"771\":1}}],[\"rocketmq的混合型存储结构\",{\"1\":{\"771\":1}}],[\"rocketmq的高可用主要是在体现在broker的读和写的高可用\",{\"1\":{\"767\":1}}],[\"rocketmq的基本架构\",{\"1\":{\"746\":1}}],[\"rocketmq的消息模型中\",{\"1\":{\"744\":1}}],[\"rocketmq还有一些其它的queue\",{\"1\":{\"744\":1}}],[\"rocketmq中的负载均衡都在client端完成\",{\"1\":{\"775\":1}}],[\"rocketmq中\",{\"1\":{\"744\":1}}],[\"rocketmq本身的消息是由下面几部分组成\",{\"1\":{\"744\":1}}],[\"rocketmq使用的消息模型是标准的发布\",{\"1\":{\"744\":1}}],[\"rocketmq缺点\",{\"1\":{\"742\":1}}],[\"rocketmq优点\",{\"1\":{\"742\":1}}],[\"rocketmq有什么优缺点\",{\"0\":{\"742\":1}}],[\"rocketmq都采用了零拷贝技术来提升io效率\",{\"1\":{\"662\":1}}],[\"rocketmq面试题八股文\",{\"1\":{\"623\":1}}],[\"rocketmq\",{\"0\":{\"775\":1},\"1\":{\"620\":1,\"623\":1,\"624\":1,\"738\":2,\"741\":1,\"744\":1,\"746\":1,\"747\":1,\"750\":1,\"761\":1,\"766\":4,\"767\":1,\"778\":1,\"831\":1}}],[\"rocket\",{\"1\":{\"64\":1,\"771\":1}}],[\"rock\",{\"1\":{\"64\":1}}],[\"roketmq在稳定性上可能更值得信赖\",{\"1\":{\"742\":1}}],[\"route\",{\"1\":{\"865\":1}}],[\"router\",{\"1\":{\"531\":1}}],[\"round\",{\"1\":{\"64\":1,\"591\":2,\"726\":1,\"851\":2}}],[\"romania\",{\"1\":{\"64\":1}}],[\"rotating\",{\"1\":{\"64\":1}}],[\"rootbeandefinition\",{\"1\":{\"802\":1}}],[\"roots\",{\"0\":{\"391\":1},\"1\":{\"390\":1,\"391\":1,\"393\":1,\"403\":2}}],[\"root\",{\"1\":{\"64\":1,\"390\":1,\"404\":2,\"418\":1}}],[\"rooster\",{\"1\":{\"64\":1}}],[\"rose\",{\"1\":{\"64\":1}}],[\"rosette\",{\"1\":{\"64\":1}}],[\"rows\",{\"1\":{\"493\":2}}],[\"rowbounds\",{\"1\":{\"448\":3}}],[\"rowboat\",{\"1\":{\"64\":1}}],[\"rowing\",{\"1\":{\"64\":2}}],[\"rolled\",{\"1\":{\"813\":1}}],[\"roller\",{\"1\":{\"64\":2}}],[\"rollbackfor=\",{\"1\":{\"813\":1}}],[\"rollbackfor\",{\"1\":{\"813\":3}}],[\"rollback\",{\"1\":{\"477\":1,\"479\":1,\"765\":3,\"813\":1}}],[\"rollup\",{\"1\":{\"470\":1}}],[\"roll\",{\"1\":{\"64\":3,\"523\":3}}],[\"rofl\",{\"1\":{\"64\":1}}],[\"rename\",{\"1\":{\"762\":1}}],[\"rebalancepullimpl类里面的该方法为空\",{\"1\":{\"777\":1}}],[\"rebalancepushimpl和rebalancepullimpl两个实现类的dispatchpullrequest\",{\"1\":{\"777\":1}}],[\"rebalancebytopic\",{\"1\":{\"777\":1}}],[\"rebalanceservice线程的run\",{\"1\":{\"777\":1}}],[\"rebalanceservice的启动\",{\"1\":{\"777\":1}}],[\"rebalanceimpl\",{\"1\":{\"777\":1}}],[\"rebalance\",{\"1\":{\"732\":1}}],[\"rewrite\",{\"1\":{\"676\":1}}],[\"rewind\",{\"1\":{\"64\":1}}],[\"rev\",{\"1\":{\"582\":2,\"583\":2}}],[\"revolving\",{\"1\":{\"64\":1}}],[\"ref=\",{\"1\":{\"795\":2}}],[\"reflection\",{\"1\":{\"614\":1}}],[\"referer\",{\"1\":{\"613\":3}}],[\"referent\",{\"1\":{\"310\":2}}],[\"referencequeue\",{\"1\":{\"392\":6}}],[\"reference被销毁\",{\"1\":{\"311\":1}}],[\"reference\",{\"1\":{\"263\":1,\"267\":1,\"386\":6,\"390\":1,\"392\":7}}],[\"ref\",{\"1\":{\"493\":11}}],[\"reuseaddr\",{\"1\":{\"579\":1}}],[\"reuse\",{\"1\":{\"451\":1}}],[\"reuseexecutor\",{\"1\":{\"451\":2}}],[\"reunion\",{\"1\":{\"64\":1}}],[\"region\",{\"1\":{\"401\":1,\"404\":11}}],[\"registersingletonbean\",{\"1\":{\"788\":2}}],[\"registermessagelistener\",{\"1\":{\"762\":1}}],[\"register\",{\"1\":{\"379\":1}}],[\"registered\",{\"1\":{\"64\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"353\":1}}],[\"reentrantlock怎么实现公平锁的\",{\"0\":{\"333\":1}}],[\"reentrantlock需要手工声明来加锁和释放锁\",{\"1\":{\"330\":1}}],[\"reentrantlock类借助condition接口与newcondition\",{\"1\":{\"330\":1}}],[\"reentrantlock可以指定是公平锁还是非公平锁\",{\"1\":{\"330\":1}}],[\"reentrantlock提供了一种能够中断等待锁的线程的机制\",{\"1\":{\"330\":1}}],[\"reentrantlock\",{\"0\":{\"332\":1},\"1\":{\"330\":1,\"332\":4,\"333\":7}}],[\"retention\",{\"1\":{\"805\":1}}],[\"retentionpolicy\",{\"1\":{\"287\":3,\"805\":1}}],[\"retransmit\",{\"1\":{\"592\":1}}],[\"retransmission\",{\"1\":{\"591\":1}}],[\"returnvalue\",{\"1\":{\"806\":2}}],[\"returnsoptional\",{\"1\":{\"450\":1}}],[\"returnscursor\",{\"1\":{\"450\":1}}],[\"returnsmap\",{\"1\":{\"450\":1}}],[\"returnsmany\",{\"1\":{\"450\":1}}],[\"returnsvoid\",{\"1\":{\"450\":1}}],[\"returned\",{\"1\":{\"267\":2}}],[\"return\",{\"0\":{\"243\":1},\"1\":{\"166\":1,\"167\":1,\"169\":1,\"181\":4,\"186\":2,\"243\":1,\"245\":1,\"257\":4,\"266\":1,\"270\":1,\"276\":11,\"285\":2,\"300\":1,\"312\":1,\"341\":2,\"362\":1,\"363\":1,\"364\":1,\"373\":1,\"448\":3,\"450\":4,\"453\":2,\"725\":5,\"762\":1,\"788\":10,\"793\":4,\"795\":3,\"802\":3,\"805\":2,\"806\":4,\"813\":3,\"817\":1,\"820\":2,\"849\":2,\"859\":1}}],[\"real\",{\"1\":{\"858\":1}}],[\"reactor\",{\"1\":{\"280\":2}}],[\"read调⽤就会在这个同步过程中等待⽐较⻓的时间\",{\"1\":{\"663\":1}}],[\"ready\",{\"1\":{\"637\":1}}],[\"read隔离级别下\",{\"1\":{\"523\":1}}],[\"read隔离级别来说\",{\"1\":{\"523\":1}}],[\"readview\",{\"1\":{\"522\":3,\"523\":17}}],[\"read\",{\"1\":{\"512\":1,\"513\":1,\"519\":2,\"520\":4,\"521\":3,\"522\":2,\"523\":6,\"662\":1,\"663\":5,\"810\":3}}],[\"reader\",{\"1\":{\"278\":1,\"448\":3}}],[\"readobject\",{\"1\":{\"186\":1}}],[\"requesttemplate\",{\"1\":{\"849\":1}}],[\"requestinterceptor\",{\"1\":{\"849\":3}}],[\"requestresponsebodymethodprocessor\",{\"1\":{\"817\":1}}],[\"requestcontextholder\",{\"1\":{\"805\":1}}],[\"requestbody\",{\"1\":{\"784\":1}}],[\"requestmapping\",{\"1\":{\"784\":2}}],[\"requestheader\",{\"1\":{\"778\":3}}],[\"request\",{\"1\":{\"613\":1,\"778\":2,\"784\":3,\"797\":2,\"805\":5,\"858\":2}}],[\"requestvote\",{\"1\":{\"222\":1}}],[\"required\",{\"1\":{\"72\":1,\"287\":1,\"811\":1,\"813\":2}}],[\"rehash的过程不是⼀次性完成的\",{\"1\":{\"729\":1}}],[\"rehash\",{\"0\":{\"731\":1},\"1\":{\"177\":1,\"314\":2}}],[\"remote\",{\"1\":{\"830\":1,\"845\":1}}],[\"removeall\",{\"1\":{\"820\":1}}],[\"removeduplicates\",{\"1\":{\"820\":1}}],[\"remove\",{\"1\":{\"311\":1,\"389\":1}}],[\"removeclass\",{\"1\":{\"73\":2,\"74\":2}}],[\"remark\",{\"1\":{\"403\":1,\"404\":1}}],[\"reminder\",{\"1\":{\"64\":1}}],[\"repository\",{\"1\":{\"784\":1}}],[\"reputmessageservice不停地分发请求并异步构建consumequeue\",{\"1\":{\"771\":1}}],[\"republic\",{\"1\":{\"64\":3}}],[\"repeatable\",{\"1\":{\"519\":1,\"520\":2,\"521\":1,\"522\":1,\"523\":2,\"810\":1}}],[\"repeat\",{\"1\":{\"64\":2,\"76\":3}}],[\"recovery\",{\"1\":{\"477\":1}}],[\"record\",{\"1\":{\"64\":1,\"513\":3}}],[\"recursivetask<integer>\",{\"1\":{\"373\":1}}],[\"recursions\",{\"1\":{\"325\":1}}],[\"recycle\",{\"1\":{\"64\":1}}],[\"receipt\",{\"1\":{\"64\":1}}],[\"receiver\",{\"1\":{\"64\":1}}],[\"resilience4j\",{\"1\":{\"831\":1,\"832\":1}}],[\"resizers\",{\"1\":{\"181\":1}}],[\"resizestamp\",{\"1\":{\"181\":1}}],[\"resize\",{\"1\":{\"164\":1,\"181\":1,\"314\":1}}],[\"resttemplate\",{\"1\":{\"785\":1,\"831\":2}}],[\"restful\",{\"0\":{\"817\":1},\"1\":{\"784\":2,\"816\":1,\"817\":1,\"832\":1}}],[\"restcontroller\",{\"1\":{\"784\":2}}],[\"restroom\",{\"1\":{\"64\":1}}],[\"responsebody\",{\"1\":{\"784\":5,\"817\":2}}],[\"response\",{\"1\":{\"778\":1,\"784\":1,\"805\":1}}],[\"responsecode\",{\"1\":{\"778\":1}}],[\"responsible\",{\"1\":{\"325\":1}}],[\"resolution\",{\"1\":{\"421\":1,\"606\":1}}],[\"resourceloader\",{\"1\":{\"788\":4}}],[\"resources\",{\"1\":{\"435\":1,\"821\":1}}],[\"resource\",{\"1\":{\"202\":1,\"208\":1,\"435\":2,\"557\":2,\"785\":1,\"859\":1,\"871\":2}}],[\"resourcename\",{\"1\":{\"198\":2}}],[\"resulthandler\",{\"1\":{\"448\":6}}],[\"resultmap>\",{\"1\":{\"437\":1,\"441\":2}}],[\"resultmap=\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"436\":4,\"437\":1,\"441\":2}}],[\"resultsethandler\",{\"1\":{\"448\":3,\"453\":1}}],[\"resultset\",{\"1\":{\"389\":2}}],[\"result=task\",{\"1\":{\"300\":1}}],[\"result=0\",{\"1\":{\"270\":1}}],[\"result\",{\"1\":{\"270\":4,\"300\":1,\"373\":2,\"450\":10,\"805\":3}}],[\"resulttype=\",{\"1\":{\"95\":1,\"96\":1,\"97\":1,\"437\":1,\"440\":1,\"444\":4}}],[\"rescue\",{\"1\":{\"64\":1}}],[\"rex\",{\"1\":{\"64\":1}}],[\"reload命令重新加载redis时\",{\"1\":{\"676\":1}}],[\"relay\",{\"1\":{\"527\":2}}],[\"relational\",{\"1\":{\"433\":1}}],[\"relaxed\",{\"1\":{\"64\":1}}],[\"release\",{\"1\":{\"348\":1}}],[\"relieved\",{\"1\":{\"64\":2}}],[\"redo\",{\"0\":{\"480\":1,\"483\":1},\"1\":{\"479\":2,\"480\":5,\"481\":5,\"482\":9,\"483\":5,\"519\":7}}],[\"reduced\",{\"1\":{\"294\":1}}],[\"reduced=\",{\"1\":{\"294\":1}}],[\"reduce\",{\"1\":{\"294\":3}}],[\"redisdb\",{\"1\":{\"731\":1}}],[\"redis如何解决\",{\"1\":{\"730\":1}}],[\"redis跳跃表由zskiplist和zskiplistnode组成\",{\"1\":{\"729\":1}}],[\"redis中在实现有序集合键和集群节点的内部结构中都是⽤到了跳跃表\",{\"1\":{\"729\":1}}],[\"redis中的value支持string\",{\"1\":{\"668\":1}}],[\"redis使⽤hash表作为底层实现\",{\"1\":{\"729\":1}}],[\"redis使用过程中\",{\"1\":{\"719\":1}}],[\"redis使用情况\",{\"1\":{\"718\":1}}],[\"redis使用了raft算法实\",{\"1\":{\"689\":1}}],[\"redis使用了raft算法实现领导者选举\",{\"1\":{\"688\":1}}],[\"redis链表是⼀个双向⽆环链表结构\",{\"1\":{\"729\":1}}],[\"redis没有直接使⽤c语⾔传统的字符串表示\",{\"1\":{\"729\":1}}],[\"redis并没有使用这些数据结构来直接实现键值对数据库\",{\"1\":{\"729\":1}}],[\"redisson\",{\"1\":{\"727\":1}}],[\"redission\",{\"1\":{\"198\":1}}],[\"redis是分布式锁本质上要实现的目标就是在\",{\"1\":{\"727\":1}}],[\"redis是一款强大的性能利器\",{\"1\":{\"668\":1}}],[\"redis是一种基于键值对\",{\"1\":{\"668\":1}}],[\"redis和lua脚本的使用了解吗\",{\"0\":{\"725\":1}}],[\"redis事务的注意点有哪些\",{\"1\":{\"724\":1}}],[\"redis事务的原理\",{\"1\":{\"724\":1}}],[\"redis应用\",{\"0\":{\"721\":1}}],[\"redis常见性能问题和解决方案\",{\"0\":{\"720\":1}}],[\"redis发生阻塞\",{\"1\":{\"718\":1}}],[\"redis阻塞\",{\"0\":{\"718\":1}}],[\"redis支持六种策略\",{\"1\":{\"717\":1}}],[\"redis所用内存达到maxmemory上限时会触发相应的溢出控制策略\",{\"1\":{\"717\":1}}],[\"redis有动态字符串\",{\"1\":{\"729\":1}}],[\"redis有哪些内存溢出控制\",{\"0\":{\"717\":1}}],[\"redis有五种基本数据结构\",{\"1\":{\"670\":1}}],[\"redis主线程调用fork操作产生共享\",{\"1\":{\"718\":1}}],[\"redis主要有2种过期数据回收策略\",{\"1\":{\"716\":1}}],[\"redis主从复制的工作流程大概可以分为如下几步\",{\"1\":{\"684\":1}}],[\"redis主从有几种常见的拓扑结构\",{\"0\":{\"683\":1}}],[\"redis报内存不足怎么处理\",{\"0\":{\"715\":1}}],[\"redis运维\",{\"0\":{\"714\":1}}],[\"redis服务端\",{\"1\":{\"710\":1}}],[\"redis本身能够承受的ops\",{\"1\":{\"710\":1}}],[\"redis来说\",{\"1\":{\"710\":1}}],[\"redis缓存\",{\"1\":{\"709\":1}}],[\"redis集群提供了灵活的节点扩容和收缩方案\",{\"1\":{\"699\":1}}],[\"redis集群内节点通过ping\",{\"1\":{\"698\":1}}],[\"redis集群的故障转移和哨兵的故障转移类似\",{\"1\":{\"698\":1}}],[\"redis集群把所有的数据映射到16384个槽中\",{\"1\":{\"697\":1}}],[\"redis集群一般由多个节点组成\",{\"1\":{\"697\":1}}],[\"redis集群通过数据分区来实现数据的分布式存储\",{\"1\":{\"696\":1}}],[\"redis早期支持的复制功能只有全量复制\",{\"1\":{\"685\":1}}],[\"redis在2\",{\"1\":{\"685\":1}}],[\"redis保证高可用主要有三种方式\",{\"1\":{\"681\":1}}],[\"redis启动失败并打印错误信息\",{\"1\":{\"679\":1}}],[\"redis启动成功\",{\"1\":{\"679\":1}}],[\"redis演进过程存在多个格式的rdb版本\",{\"1\":{\"677\":1}}],[\"redis进程执行fork操作创建子进程\",{\"1\":{\"676\":1}}],[\"redis持久化⽅案分为rdb和aof两种\",{\"1\":{\"676\":1}}],[\"redis持久化⽅式有哪些\",{\"0\":{\"676\":1}}],[\"redis不是说用单线程的吗\",{\"1\":{\"674\":1}}],[\"redis6\",{\"0\":{\"674\":1},\"1\":{\"674\":1}}],[\"redis为什么早期选择单线程\",{\"0\":{\"673\":1}}],[\"redis为什么快呢\",{\"0\":{\"671\":1}}],[\"redis做了⼤量的优化\",{\"1\":{\"671\":1}}],[\"redis的管道了解吗\",{\"0\":{\"726\":1}}],[\"redis的事务功能比较简单\",{\"1\":{\"725\":1}}],[\"redis的过期数据回收策略有哪些\",{\"0\":{\"716\":1}}],[\"redis的主从复制原理了解吗\",{\"0\":{\"684\":1}}],[\"redis的复制拓扑结构可以支持单层或多层复制关系\",{\"1\":{\"683\":1}}],[\"redis的数据恢复\",{\"0\":{\"679\":1}}],[\"redis的瓶颈最有可能是内存的大小或者网络限制\",{\"1\":{\"673\":1}}],[\"redis的速度⾮常的快\",{\"1\":{\"671\":1}}],[\"redis的应用一般会结合项目去问\",{\"1\":{\"669\":1}}],[\"redis提供了简单的事务\",{\"1\":{\"724\":1}}],[\"redis提供了发布订阅功能和阻塞队列的功能\",{\"1\":{\"669\":1}}],[\"redis提供了列表和有序集合数据结构\",{\"1\":{\"669\":1}}],[\"redis天然支持计数功能\",{\"1\":{\"669\":1}}],[\"redis可以用来干什么\",{\"0\":{\"669\":1}}],[\"redis可以满足很多的应用场景\",{\"1\":{\"668\":1}}],[\"redis还提供了键过期\",{\"1\":{\"668\":1}}],[\"redis还可以将内存的数据利用快照和日志的形式保存到硬盘上\",{\"1\":{\"668\":1}}],[\"redis面试题八股文\",{\"1\":{\"623\":1}}],[\"redis执行命令是单线程的\",{\"1\":{\"198\":1}}],[\"redis实现分布式锁了解吗\",{\"0\":{\"727\":1}}],[\"redis实现分布式锁就是利用这个特性\",{\"1\":{\"198\":1}}],[\"redis实现分布式锁\",{\"1\":{\"198\":1}}],[\"redis怎么实现分布式锁\",{\"0\":{\"198\":1}}],[\"redis分布式锁\",{\"1\":{\"195\":1}}],[\"redis\",{\"0\":{\"670\":1,\"680\":1,\"687\":1,\"688\":1,\"691\":1,\"723\":1,\"724\":1,\"730\":1},\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"566\":1,\"617\":1,\"620\":1,\"623\":1,\"624\":1,\"664\":1,\"666\":2,\"673\":2,\"677\":1,\"678\":1,\"679\":1,\"680\":4,\"682\":8,\"687\":3,\"691\":1,\"695\":1,\"715\":4,\"719\":2,\"724\":5,\"725\":4,\"726\":6,\"727\":1,\"730\":2,\"731\":3,\"732\":2,\"733\":1,\"734\":2,\"736\":1,\"740\":1,\"778\":1,\"824\":1,\"830\":1,\"877\":1}}],[\"red\",{\"1\":{\"25\":2,\"64\":9}}],[\"r\",{\"1\":{\"16\":1,\"17\":1,\"321\":3}}],[\"🚩\",{\"1\":{\"64\":1}}],[\"🔲\",{\"1\":{\"64\":1}}],[\"🔳\",{\"1\":{\"64\":1}}],[\"🔘\",{\"1\":{\"64\":1}}],[\"💠\",{\"1\":{\"64\":1}}],[\"🔻\",{\"1\":{\"64\":1}}],[\"🔺\",{\"1\":{\"64\":1}}],[\"🔹\",{\"1\":{\"64\":1}}],[\"🔸\",{\"1\":{\"64\":1}}],[\"🔷\",{\"1\":{\"64\":1}}],[\"🔶\",{\"1\":{\"64\":1}}],[\"🟫\",{\"1\":{\"64\":1}}],[\"🟪\",{\"1\":{\"64\":1}}],[\"🟦\",{\"1\":{\"64\":1}}],[\"🟩\",{\"1\":{\"64\":1}}],[\"🟨\",{\"1\":{\"64\":1}}],[\"🟧\",{\"1\":{\"64\":1}}],[\"🟥\",{\"1\":{\"64\":1}}],[\"🟤\",{\"1\":{\"64\":1}}],[\"🟣\",{\"1\":{\"64\":1}}],[\"🔵\",{\"1\":{\"64\":1}}],[\"🟢\",{\"1\":{\"64\":1}}],[\"🟡\",{\"1\":{\"64\":1}}],[\"🟠\",{\"1\":{\"64\":1}}],[\"🔴\",{\"1\":{\"64\":1}}],[\"🔤\",{\"1\":{\"64\":1}}],[\"🔣\",{\"1\":{\"64\":1}}],[\"🔡\",{\"1\":{\"64\":1}}],[\"🔠\",{\"1\":{\"64\":1}}],[\"🔟\",{\"1\":{\"64\":1}}],[\"🔰\",{\"1\":{\"64\":1}}],[\"📛\",{\"1\":{\"64\":1}}],[\"🔱\",{\"1\":{\"64\":1}}],[\"💲\",{\"1\":{\"64\":1}}],[\"💱\",{\"1\":{\"64\":1}}],[\"🟰\",{\"1\":{\"64\":1}}],[\"📴\",{\"1\":{\"64\":1}}],[\"📳\",{\"1\":{\"64\":1}}],[\"🛜\",{\"1\":{\"64\":1}}],[\"📶\",{\"1\":{\"64\":1}}],[\"🔆\",{\"1\":{\"64\":1}}],[\"🔅\",{\"1\":{\"64\":1}}],[\"🔽\",{\"1\":{\"64\":1}}],[\"🔼\",{\"1\":{\"64\":1}}],[\"🔂\",{\"1\":{\"64\":1}}],[\"🔁\",{\"1\":{\"64\":1}}],[\"🔀\",{\"1\":{\"64\":1}}],[\"🔯\",{\"1\":{\"64\":1}}],[\"🕎\",{\"1\":{\"64\":1}}],[\"🕉️\",{\"1\":{\"64\":1}}],[\"🛐\",{\"1\":{\"64\":1}}],[\"🔝\",{\"1\":{\"64\":1}}],[\"🔜\",{\"1\":{\"64\":1}}],[\"🔛\",{\"1\":{\"64\":1}}],[\"🔚\",{\"1\":{\"64\":1}}],[\"🔙\",{\"1\":{\"64\":1}}],[\"🔄\",{\"1\":{\"64\":1}}],[\"🔃\",{\"1\":{\"64\":1}}],[\"🔞\",{\"1\":{\"64\":1}}],[\"📵\",{\"1\":{\"64\":1}}],[\"🚷\",{\"1\":{\"64\":1}}],[\"🚱\",{\"1\":{\"64\":1}}],[\"🚯\",{\"1\":{\"64\":1}}],[\"🚭\",{\"1\":{\"64\":1}}],[\"🚳\",{\"1\":{\"64\":1}}],[\"🚫\",{\"1\":{\"64\":1}}],[\"🚸\",{\"1\":{\"64\":1}}],[\"🛅\",{\"1\":{\"64\":1}}],[\"🛄\",{\"1\":{\"64\":1}}],[\"🛃\",{\"1\":{\"64\":1}}],[\"🛂\",{\"1\":{\"64\":1}}],[\"🚾\",{\"1\":{\"64\":1}}],[\"🚼\",{\"1\":{\"64\":1}}],[\"🚻\",{\"1\":{\"64\":1}}],[\"🚺\",{\"1\":{\"64\":1}}],[\"🚹\",{\"1\":{\"64\":1}}],[\"🚰\",{\"1\":{\"64\":1}}],[\"🚮\",{\"1\":{\"64\":1}}],[\"🗿\",{\"1\":{\"64\":1}}],[\"🚬\",{\"1\":{\"64\":1}}],[\"🛒\",{\"1\":{\"64\":1}}],[\"🛁\",{\"1\":{\"64\":1}}],[\"🚿\",{\"1\":{\"64\":1}}],[\"🚽\",{\"1\":{\"64\":1}}],[\"🛋️\",{\"1\":{\"64\":1}}],[\"🛏️\",{\"1\":{\"64\":1}}],[\"🛗\",{\"1\":{\"64\":1}}],[\"🚪\",{\"1\":{\"64\":1}}],[\"💊\",{\"1\":{\"64\":1}}],[\"💉\",{\"1\":{\"64\":1}}],[\"📡\",{\"1\":{\"64\":1}}],[\"🔭\",{\"1\":{\"64\":1}}],[\"🔬\",{\"1\":{\"64\":1}}],[\"🔗\",{\"1\":{\"64\":1}}],[\"🗜️\",{\"1\":{\"64\":1}}],[\"🔩\",{\"1\":{\"64\":1}}],[\"🔧\",{\"1\":{\"64\":1}}],[\"🛡️\",{\"1\":{\"64\":1}}],[\"💣\",{\"1\":{\"64\":1}}],[\"🗡️\",{\"1\":{\"64\":1}}],[\"🛠️\",{\"1\":{\"64\":1}}],[\"🔨\",{\"1\":{\"64\":1}}],[\"🗝️\",{\"1\":{\"64\":1}}],[\"🔑\",{\"1\":{\"64\":1}}],[\"🔐\",{\"1\":{\"64\":1}}],[\"🔏\",{\"1\":{\"64\":1}}],[\"🔓\",{\"1\":{\"64\":1}}],[\"🔒\",{\"1\":{\"64\":1}}],[\"🗑️\",{\"1\":{\"64\":1}}],[\"🗄️\",{\"1\":{\"64\":1}}],[\"🗃️\",{\"1\":{\"64\":1}}],[\"📐\",{\"1\":{\"64\":1}}],[\"📏\",{\"1\":{\"64\":1}}],[\"🖇️\",{\"1\":{\"64\":1}}],[\"📎\",{\"1\":{\"64\":1}}],[\"📍\",{\"1\":{\"64\":1}}],[\"📌\",{\"1\":{\"64\":1}}],[\"📋\",{\"1\":{\"64\":1}}],[\"📊\",{\"1\":{\"64\":1}}],[\"📉\",{\"1\":{\"64\":1}}],[\"📈\",{\"1\":{\"64\":1}}],[\"📇\",{\"1\":{\"64\":1}}],[\"🗓️\",{\"1\":{\"64\":1}}],[\"🗒️\",{\"1\":{\"64\":1}}],[\"📆\",{\"1\":{\"64\":1}}],[\"📅\",{\"1\":{\"64\":1}}],[\"🗂️\",{\"1\":{\"64\":1}}],[\"📂\",{\"1\":{\"64\":1}}],[\"📁\",{\"1\":{\"64\":1}}],[\"💼\",{\"1\":{\"64\":1}}],[\"📝\",{\"1\":{\"64\":2}}],[\"🖍️\",{\"1\":{\"64\":1}}],[\"🖌️\",{\"1\":{\"64\":1}}],[\"🖊️\",{\"1\":{\"64\":1}}],[\"🖋️\",{\"1\":{\"64\":1}}],[\"🗳️\",{\"1\":{\"64\":1}}],[\"📮\",{\"1\":{\"64\":1}}],[\"📭\",{\"1\":{\"64\":1}}],[\"📬\",{\"1\":{\"64\":1}}],[\"📪\",{\"1\":{\"64\":1}}],[\"📫\",{\"1\":{\"64\":1}}],[\"📦\",{\"1\":{\"64\":1}}],[\"📥\",{\"1\":{\"64\":1}}],[\"📤\",{\"1\":{\"64\":1}}],[\"📩\",{\"1\":{\"64\":1}}],[\"📨\",{\"1\":{\"64\":1}}],[\"📧\",{\"1\":{\"64\":2}}],[\"💹\",{\"1\":{\"64\":1}}],[\"💳\",{\"1\":{\"64\":1}}],[\"💸\",{\"1\":{\"64\":1}}],[\"💷\",{\"1\":{\"64\":1}}],[\"💶\",{\"1\":{\"64\":1}}],[\"💵\",{\"1\":{\"64\":1}}],[\"💴\",{\"1\":{\"64\":1}}],[\"💰\",{\"1\":{\"64\":1}}],[\"🔖\",{\"1\":{\"64\":1}}],[\"📑\",{\"1\":{\"64\":1}}],[\"🗞️\",{\"1\":{\"64\":1}}],[\"📰\",{\"1\":{\"64\":1}}],[\"📄\",{\"1\":{\"64\":1}}],[\"📜\",{\"1\":{\"64\":1}}],[\"📃\",{\"1\":{\"64\":1}}],[\"📒\",{\"1\":{\"64\":1}}],[\"📓\",{\"1\":{\"64\":1}}],[\"📚\",{\"1\":{\"64\":1}}],[\"📙\",{\"1\":{\"64\":1}}],[\"📘\",{\"1\":{\"64\":1}}],[\"📗\",{\"1\":{\"64\":1}}],[\"📖\",{\"1\":{\"64\":2}}],[\"📕\",{\"1\":{\"64\":1}}],[\"📔\",{\"1\":{\"64\":1}}],[\"🔦\",{\"1\":{\"64\":1}}],[\"💡\",{\"1\":{\"64\":1}}],[\"🕯️\",{\"1\":{\"64\":1}}],[\"🔎\",{\"1\":{\"64\":1}}],[\"🔍\",{\"1\":{\"64\":1}}],[\"📼\",{\"1\":{\"64\":1}}],[\"📹\",{\"1\":{\"64\":1}}],[\"📸\",{\"1\":{\"64\":1}}],[\"📷\",{\"1\":{\"64\":1}}],[\"📺\",{\"1\":{\"64\":1}}],[\"📽️\",{\"1\":{\"64\":1}}],[\"📀\",{\"1\":{\"64\":1}}],[\"💿\",{\"1\":{\"64\":1}}],[\"💾\",{\"1\":{\"64\":1}}],[\"💽\",{\"1\":{\"64\":1}}],[\"🖲️\",{\"1\":{\"64\":1}}],[\"🖱️\",{\"1\":{\"64\":1}}],[\"🖨️\",{\"1\":{\"64\":1}}],[\"🖥️\",{\"1\":{\"64\":1}}],[\"💻\",{\"1\":{\"64\":1}}],[\"🔌\",{\"1\":{\"64\":1}}],[\"🔋\",{\"1\":{\"64\":1}}],[\"📠\",{\"1\":{\"64\":1}}],[\"📟\",{\"1\":{\"64\":1}}],[\"📞\",{\"1\":{\"64\":1}}],[\"📲\",{\"1\":{\"64\":1}}],[\"📱\",{\"1\":{\"64\":1}}],[\"📻\",{\"1\":{\"64\":1}}],[\"🔕\",{\"1\":{\"64\":1}}],[\"🔔\",{\"1\":{\"64\":1}}],[\"📯\",{\"1\":{\"64\":1}}],[\"📣\",{\"1\":{\"64\":1}}],[\"📢\",{\"1\":{\"64\":1}}],[\"🔊\",{\"1\":{\"64\":1}}],[\"🔉\",{\"1\":{\"64\":1}}],[\"🔈\",{\"1\":{\"64\":1}}],[\"🔇\",{\"1\":{\"64\":1}}],[\"💎\",{\"1\":{\"64\":1}}],[\"💍\",{\"1\":{\"64\":1}}],[\"💄\",{\"1\":{\"64\":1}}],[\"📿\",{\"1\":{\"64\":1}}],[\"👒\",{\"1\":{\"64\":1}}],[\"👑\",{\"1\":{\"64\":1}}],[\"👢\",{\"1\":{\"64\":1}}],[\"👡\",{\"1\":{\"64\":1}}],[\"👠\",{\"1\":{\"64\":1}}],[\"👟\",{\"1\":{\"64\":1}}],[\"👞\",{\"1\":{\"64\":2}}],[\"🛍️\",{\"1\":{\"64\":1}}],[\"👝\",{\"1\":{\"64\":1}}],[\"👜\",{\"1\":{\"64\":1}}],[\"👛\",{\"1\":{\"64\":1}}],[\"👚\",{\"1\":{\"64\":1}}],[\"👙\",{\"1\":{\"64\":1}}],[\"👘\",{\"1\":{\"64\":1}}],[\"👗\",{\"1\":{\"64\":1}}],[\"👖\",{\"1\":{\"64\":1}}],[\"👕\",{\"1\":{\"64\":2}}],[\"👔\",{\"1\":{\"64\":1}}],[\"🕶️\",{\"1\":{\"64\":1}}],[\"👓\",{\"1\":{\"64\":1}}],[\"🖼️\",{\"1\":{\"64\":1}}],[\"🕹️\",{\"1\":{\"64\":1}}],[\"🔮\",{\"1\":{\"64\":1}}],[\"🔫\",{\"1\":{\"64\":1}}],[\"🛷\",{\"1\":{\"64\":1}}],[\"💧\",{\"1\":{\"64\":1}}],[\"🔥\",{\"1\":{\"64\":1}}],[\"🕦\",{\"1\":{\"64\":1}}],[\"🕚\",{\"1\":{\"64\":1}}],[\"🕥\",{\"1\":{\"64\":1}}],[\"🕙\",{\"1\":{\"64\":1}}],[\"🕤\",{\"1\":{\"64\":1}}],[\"🕘\",{\"1\":{\"64\":1}}],[\"🕣\",{\"1\":{\"64\":1}}],[\"🕗\",{\"1\":{\"64\":1}}],[\"🕢\",{\"1\":{\"64\":1}}],[\"🕖\",{\"1\":{\"64\":1}}],[\"🕡\",{\"1\":{\"64\":1}}],[\"🕕\",{\"1\":{\"64\":1}}],[\"🕠\",{\"1\":{\"64\":1}}],[\"🕔\",{\"1\":{\"64\":1}}],[\"🕟\",{\"1\":{\"64\":1}}],[\"🕓\",{\"1\":{\"64\":1}}],[\"🕞\",{\"1\":{\"64\":1}}],[\"🕒\",{\"1\":{\"64\":1}}],[\"🕝\",{\"1\":{\"64\":1}}],[\"🕑\",{\"1\":{\"64\":1}}],[\"🕜\",{\"1\":{\"64\":1}}],[\"🕐\",{\"1\":{\"64\":1}}],[\"🕧\",{\"1\":{\"64\":1}}],[\"🕛\",{\"1\":{\"64\":1}}],[\"🕰️\",{\"1\":{\"64\":1}}],[\"🛎️\",{\"1\":{\"64\":1}}],[\"🛸\",{\"1\":{\"64\":1}}],[\"🚀\",{\"1\":{\"64\":1}}],[\"🛰️\",{\"1\":{\"64\":1}}],[\"🚡\",{\"1\":{\"64\":1}}],[\"🚠\",{\"1\":{\"64\":1}}],[\"🚟\",{\"1\":{\"64\":1}}],[\"🚁\",{\"1\":{\"64\":1}}],[\"💺\",{\"1\":{\"64\":1}}],[\"🛬\",{\"1\":{\"64\":1}}],[\"🛫\",{\"1\":{\"64\":1}}],[\"🛩️\",{\"1\":{\"64\":1}}],[\"🚢\",{\"1\":{\"64\":1}}],[\"🛥️\",{\"1\":{\"64\":1}}],[\"🛳️\",{\"1\":{\"64\":1}}],[\"🚤\",{\"1\":{\"64\":1}}],[\"🛶\",{\"1\":{\"64\":1}}],[\"🛟\",{\"1\":{\"64\":1}}],[\"🚧\",{\"1\":{\"64\":1}}],[\"🛑\",{\"1\":{\"64\":1}}],[\"🚦\",{\"1\":{\"64\":1}}],[\"🚥\",{\"1\":{\"64\":1}}],[\"🚨\",{\"1\":{\"64\":1}}],[\"🛞\",{\"1\":{\"64\":1}}],[\"🛢️\",{\"1\":{\"64\":1}}],[\"🛤️\",{\"1\":{\"64\":1}}],[\"🛣️\",{\"1\":{\"64\":1}}],[\"🚏\",{\"1\":{\"64\":1}}],[\"🛼\",{\"1\":{\"64\":1}}],[\"🛹\",{\"1\":{\"64\":1}}],[\"🛴\",{\"1\":{\"64\":1}}],[\"🚲\",{\"1\":{\"64\":1}}],[\"🛺\",{\"1\":{\"64\":1}}],[\"🛵\",{\"1\":{\"64\":1}}],[\"🚜\",{\"1\":{\"64\":1}}],[\"🚛\",{\"1\":{\"64\":1}}],[\"🚚\",{\"1\":{\"64\":1}}],[\"🛻\",{\"1\":{\"64\":1}}],[\"🚙\",{\"1\":{\"64\":1}}],[\"🚘\",{\"1\":{\"64\":1}}],[\"🚗\",{\"1\":{\"64\":2}}],[\"🚖\",{\"1\":{\"64\":1}}],[\"🚕\",{\"1\":{\"64\":1}}],[\"🚔\",{\"1\":{\"64\":1}}],[\"🚓\",{\"1\":{\"64\":1}}],[\"🚒\",{\"1\":{\"64\":1}}],[\"🚑\",{\"1\":{\"64\":1}}],[\"🚐\",{\"1\":{\"64\":1}}],[\"🚎\",{\"1\":{\"64\":1}}],[\"🚍\",{\"1\":{\"64\":1}}],[\"🚌\",{\"1\":{\"64\":1}}],[\"🚋\",{\"1\":{\"64\":1}}],[\"🚞\",{\"1\":{\"64\":1}}],[\"🚝\",{\"1\":{\"64\":1}}],[\"🚊\",{\"1\":{\"64\":1}}],[\"🚉\",{\"1\":{\"64\":1}}],[\"🚈\",{\"1\":{\"64\":1}}],[\"🚇\",{\"1\":{\"64\":1}}],[\"🚆\",{\"1\":{\"64\":1}}],[\"🚅\",{\"1\":{\"64\":1}}],[\"🚄\",{\"1\":{\"64\":1}}],[\"🚃\",{\"1\":{\"64\":1}}],[\"🚂\",{\"1\":{\"64\":1}}],[\"💈\",{\"1\":{\"64\":1}}],[\"🛝\",{\"1\":{\"64\":1}}],[\"🕋\",{\"1\":{\"64\":1}}],[\"🕍\",{\"1\":{\"64\":1}}],[\"🛕\",{\"1\":{\"64\":1}}],[\"🕌\",{\"1\":{\"64\":1}}],[\"🗽\",{\"1\":{\"64\":1}}],[\"🗼\",{\"1\":{\"64\":1}}],[\"💒\",{\"1\":{\"64\":1}}],[\"🛖\",{\"1\":{\"64\":1}}],[\"🗻\",{\"1\":{\"64\":1}}],[\"🗾\",{\"1\":{\"64\":1}}],[\"🗺️\",{\"1\":{\"64\":1}}],[\"🔪\",{\"1\":{\"64\":2}}],[\"💮\",{\"1\":{\"64\":1}}],[\"💐\",{\"1\":{\"64\":1}}],[\"🕸️\",{\"1\":{\"64\":1}}],[\"🕷️\",{\"1\":{\"64\":1}}],[\"🐞\",{\"1\":{\"64\":1}}],[\"🐝\",{\"1\":{\"64\":2}}],[\"🐜\",{\"1\":{\"64\":1}}],[\"🐛\",{\"1\":{\"64\":1}}],[\"🐌\",{\"1\":{\"64\":1}}],[\"🐚\",{\"1\":{\"64\":1}}],[\"🐙\",{\"1\":{\"64\":1}}],[\"🐡\",{\"1\":{\"64\":1}}],[\"🐠\",{\"1\":{\"64\":1}}],[\"🐟\",{\"1\":{\"64\":1}}],[\"🐬\",{\"1\":{\"64\":2}}],[\"🐋\",{\"1\":{\"64\":1}}],[\"🐳\",{\"1\":{\"64\":1}}],[\"🐉\",{\"1\":{\"64\":1}}],[\"🐲\",{\"1\":{\"64\":1}}],[\"🐍\",{\"1\":{\"64\":1}}],[\"🐢\",{\"1\":{\"64\":1}}],[\"🐊\",{\"1\":{\"64\":1}}],[\"🐸\",{\"1\":{\"64\":1}}],[\"🕊️\",{\"1\":{\"64\":1}}],[\"🐧\",{\"1\":{\"64\":1}}],[\"🐦‍⬛\",{\"1\":{\"64\":1}}],[\"🐦\",{\"1\":{\"64\":1}}],[\"🐥\",{\"1\":{\"64\":1}}],[\"🐤\",{\"1\":{\"64\":1}}],[\"🐣\",{\"1\":{\"64\":1}}],[\"🐓\",{\"1\":{\"64\":1}}],[\"🐔\",{\"1\":{\"64\":1}}],[\"🐾\",{\"1\":{\"64\":2}}],[\"🐼\",{\"1\":{\"64\":1}}],[\"🐨\",{\"1\":{\"64\":1}}],[\"🐻‍❄️\",{\"1\":{\"64\":1}}],[\"🐻\",{\"1\":{\"64\":1}}],[\"🐿️\",{\"1\":{\"64\":1}}],[\"🐇\",{\"1\":{\"64\":1}}],[\"🐰\",{\"1\":{\"64\":1}}],[\"🐹\",{\"1\":{\"64\":1}}],[\"🐀\",{\"1\":{\"64\":1}}],[\"🐁\",{\"1\":{\"64\":1}}],[\"🐭\",{\"1\":{\"64\":1}}],[\"🐘\",{\"1\":{\"64\":1}}],[\"🐫\",{\"1\":{\"64\":1}}],[\"🐪\",{\"1\":{\"64\":1}}],[\"🐐\",{\"1\":{\"64\":1}}],[\"🐑\",{\"1\":{\"64\":1}}],[\"🐏\",{\"1\":{\"64\":1}}],[\"🐽\",{\"1\":{\"64\":1}}],[\"🐗\",{\"1\":{\"64\":1}}],[\"🐖\",{\"1\":{\"64\":1}}],[\"🐷\",{\"1\":{\"64\":1}}],[\"🐄\",{\"1\":{\"64\":1}}],[\"🐃\",{\"1\":{\"64\":1}}],[\"🐂\",{\"1\":{\"64\":1}}],[\"🐮\",{\"1\":{\"64\":1}}],[\"🐎\",{\"1\":{\"64\":1}}],[\"🐴\",{\"1\":{\"64\":1}}],[\"🐆\",{\"1\":{\"64\":1}}],[\"🐅\",{\"1\":{\"64\":1}}],[\"🐯\",{\"1\":{\"64\":1}}],[\"🐈‍⬛\",{\"1\":{\"64\":1}}],[\"🐈\",{\"1\":{\"64\":1}}],[\"🐱\",{\"1\":{\"64\":1}}],[\"🐺\",{\"1\":{\"64\":1}}],[\"🐩\",{\"1\":{\"64\":1}}],[\"🐕‍🦺\",{\"1\":{\"64\":1}}],[\"🐕\",{\"1\":{\"64\":1}}],[\"🐶\",{\"1\":{\"64\":1}}],[\"🐒\",{\"1\":{\"64\":1}}],[\"🐵\",{\"1\":{\"64\":1}}],[\"👣\",{\"1\":{\"64\":1}}],[\"👥\",{\"1\":{\"64\":1}}],[\"👤\",{\"1\":{\"64\":1}}],[\"🗣️\",{\"1\":{\"64\":1}}],[\"👪\",{\"1\":{\"64\":1}}],[\"💑\",{\"1\":{\"64\":1}}],[\"💏\",{\"1\":{\"64\":1}}],[\"👬\",{\"1\":{\"64\":1}}],[\"👫\",{\"1\":{\"64\":1}}],[\"👭\",{\"1\":{\"64\":1}}],[\"🛌\",{\"1\":{\"64\":1}}],[\"🛀\",{\"1\":{\"64\":1}}],[\"🚵‍♀️\",{\"1\":{\"64\":1}}],[\"🚵‍♂️\",{\"1\":{\"64\":1}}],[\"🚵\",{\"1\":{\"64\":1}}],[\"🚴‍♀️\",{\"1\":{\"64\":1}}],[\"🚴‍♂️\",{\"1\":{\"64\":1}}],[\"🚴\",{\"1\":{\"64\":1}}],[\"🚣‍♀️\",{\"1\":{\"64\":1}}],[\"🚣‍♂️\",{\"1\":{\"64\":1}}],[\"🚣\",{\"1\":{\"64\":1}}],[\"👯‍♀️\",{\"1\":{\"64\":1}}],[\"👯‍♂️\",{\"1\":{\"64\":1}}],[\"👯\",{\"1\":{\"64\":1}}],[\"🕴️\",{\"1\":{\"64\":1}}],[\"🕺\",{\"1\":{\"64\":1}}],[\"💃\",{\"1\":{\"64\":2}}],[\"🚶‍♀️\",{\"1\":{\"64\":1}}],[\"🚶‍♂️\",{\"1\":{\"64\":1}}],[\"🚶\",{\"1\":{\"64\":1}}],[\"💇‍♀️\",{\"1\":{\"64\":1}}],[\"💇‍♂️\",{\"1\":{\"64\":1}}],[\"💇\",{\"1\":{\"64\":1}}],[\"💆‍♀️\",{\"1\":{\"64\":1}}],[\"💆‍♂️\",{\"1\":{\"64\":1}}],[\"💆\",{\"1\":{\"64\":1}}],[\"👼\",{\"1\":{\"64\":1}}],[\"👰‍♀️\",{\"1\":{\"64\":2}}],[\"👰‍♂️\",{\"1\":{\"64\":1}}],[\"👰\",{\"1\":{\"64\":1}}],[\"👲\",{\"1\":{\"64\":1}}],[\"👳‍♀️\",{\"1\":{\"64\":1}}],[\"👳‍♂️\",{\"1\":{\"64\":1}}],[\"👳\",{\"1\":{\"64\":1}}],[\"👸\",{\"1\":{\"64\":1}}],[\"👷‍♀️\",{\"1\":{\"64\":1}}],[\"👷‍♂️\",{\"1\":{\"64\":1}}],[\"👷\",{\"1\":{\"64\":1}}],[\"💂‍♀️\",{\"1\":{\"64\":1}}],[\"💂‍♂️\",{\"1\":{\"64\":1}}],[\"💂\",{\"1\":{\"64\":1}}],[\"🕵️‍♀️\",{\"1\":{\"64\":1}}],[\"🕵️‍♂️\",{\"1\":{\"64\":1}}],[\"🕵️\",{\"1\":{\"64\":1}}],[\"👮‍♀️\",{\"1\":{\"64\":1}}],[\"👮‍♂️\",{\"1\":{\"64\":1}}],[\"👮\",{\"1\":{\"64\":2}}],[\"🙇‍♀️\",{\"1\":{\"64\":1}}],[\"🙇‍♂️\",{\"1\":{\"64\":1}}],[\"🙇\",{\"1\":{\"64\":1}}],[\"🙋‍♀️\",{\"1\":{\"64\":1}}],[\"🙋‍♂️\",{\"1\":{\"64\":1}}],[\"🙋\",{\"1\":{\"64\":1}}],[\"💁‍♀️\",{\"1\":{\"64\":2}}],[\"💁‍♂️\",{\"1\":{\"64\":2}}],[\"💁\",{\"1\":{\"64\":2}}],[\"🙆‍♀️\",{\"1\":{\"64\":1}}],[\"🙆‍♂️\",{\"1\":{\"64\":1}}],[\"🙆\",{\"1\":{\"64\":1}}],[\"🙅‍♀️\",{\"1\":{\"64\":2}}],[\"🙅‍♂️\",{\"1\":{\"64\":2}}],[\"🙅\",{\"1\":{\"64\":1}}],[\"🙎‍♀️\",{\"1\":{\"64\":1}}],[\"🙎‍♂️\",{\"1\":{\"64\":1}}],[\"🙎\",{\"1\":{\"64\":1}}],[\"🙍‍♀️\",{\"1\":{\"64\":1}}],[\"🙍‍♂️\",{\"1\":{\"64\":1}}],[\"🙍\",{\"1\":{\"64\":1}}],[\"👵\",{\"1\":{\"64\":1}}],[\"👴\",{\"1\":{\"64\":1}}],[\"👩‍❤️‍👩\",{\"1\":{\"64\":1}}],[\"👩‍❤️‍👨\",{\"1\":{\"64\":1}}],[\"👩‍❤️‍💋‍👩\",{\"1\":{\"64\":1}}],[\"👩‍❤️‍💋‍👨\",{\"1\":{\"64\":1}}],[\"👩‍✈️\",{\"1\":{\"64\":1}}],[\"👩‍👧‍👧\",{\"1\":{\"64\":1}}],[\"👩‍👧‍👦\",{\"1\":{\"64\":1}}],[\"👩‍👧\",{\"1\":{\"64\":1}}],[\"👩‍👦‍👦\",{\"1\":{\"64\":1}}],[\"👩‍👦\",{\"1\":{\"64\":1}}],[\"👩‍👩‍👧‍👧\",{\"1\":{\"64\":1}}],[\"👩‍👩‍👧‍👦\",{\"1\":{\"64\":1}}],[\"👩‍👩‍👧\",{\"1\":{\"64\":1}}],[\"👩‍👩‍👦‍👦\",{\"1\":{\"64\":1}}],[\"👩‍👩‍👦\",{\"1\":{\"64\":1}}],[\"👩‍🚒\",{\"1\":{\"64\":1}}],[\"👩‍🚀\",{\"1\":{\"64\":1}}],[\"👩‍💻\",{\"1\":{\"64\":1}}],[\"👩‍🔬\",{\"1\":{\"64\":1}}],[\"👩‍💼\",{\"1\":{\"64\":1}}],[\"👩‍🔧\",{\"1\":{\"64\":1}}],[\"👩‍⚖️\",{\"1\":{\"64\":1}}],[\"👩‍🍼\",{\"1\":{\"64\":1}}],[\"👩‍🎨\",{\"1\":{\"64\":1}}],[\"👩‍🎤\",{\"1\":{\"64\":1}}],[\"👩‍🏭\",{\"1\":{\"64\":1}}],[\"👩‍🍳\",{\"1\":{\"64\":1}}],[\"👩‍🌾\",{\"1\":{\"64\":1}}],[\"👩‍🏫\",{\"1\":{\"64\":1}}],[\"👩‍🎓\",{\"1\":{\"64\":1}}],[\"👩‍⚕️\",{\"1\":{\"64\":1}}],[\"👩‍🦽\",{\"1\":{\"64\":1}}],[\"👩‍🦼\",{\"1\":{\"64\":1}}],[\"👩‍🦯\",{\"1\":{\"64\":1}}],[\"👩‍🦲\",{\"1\":{\"64\":1}}],[\"👩‍🦳\",{\"1\":{\"64\":1}}],[\"👩‍🦱\",{\"1\":{\"64\":1}}],[\"👩‍🦰\",{\"1\":{\"64\":1}}],[\"👩\",{\"1\":{\"64\":1}}],[\"👨‍❤️‍👨\",{\"1\":{\"64\":1}}],[\"👨‍❤️‍💋‍👨\",{\"1\":{\"64\":1}}],[\"👨‍✈️\",{\"1\":{\"64\":1}}],[\"👨‍👧‍👧\",{\"1\":{\"64\":1}}],[\"👨‍👧‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👧\",{\"1\":{\"64\":1}}],[\"👨‍👦‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👨‍👧‍👧\",{\"1\":{\"64\":1}}],[\"👨‍👨‍👧‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👨‍👧\",{\"1\":{\"64\":1}}],[\"👨‍👨‍👦‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👨‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👩‍👧‍👧\",{\"1\":{\"64\":1}}],[\"👨‍👩‍👧‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👩‍👧\",{\"1\":{\"64\":1}}],[\"👨‍👩‍👦‍👦\",{\"1\":{\"64\":1}}],[\"👨‍👩‍👦\",{\"1\":{\"64\":1}}],[\"👨‍🚒\",{\"1\":{\"64\":1}}],[\"👨‍🚀\",{\"1\":{\"64\":1}}],[\"👨‍💻\",{\"1\":{\"64\":1}}],[\"👨‍🔬\",{\"1\":{\"64\":1}}],[\"👨‍💼\",{\"1\":{\"64\":1}}],[\"👨‍🔧\",{\"1\":{\"64\":1}}],[\"👨‍⚖️\",{\"1\":{\"64\":1}}],[\"👨‍🍼\",{\"1\":{\"64\":1}}],[\"👨‍🎨\",{\"1\":{\"64\":1}}],[\"👨‍🎤\",{\"1\":{\"64\":1}}],[\"👨‍🏭\",{\"1\":{\"64\":1}}],[\"👨‍🍳\",{\"1\":{\"64\":1}}],[\"👨‍🌾\",{\"1\":{\"64\":1}}],[\"👨‍🏫\",{\"1\":{\"64\":1}}],[\"👨‍🎓\",{\"1\":{\"64\":1}}],[\"👨‍⚕️\",{\"1\":{\"64\":1}}],[\"👨‍🦽\",{\"1\":{\"64\":1}}],[\"👨‍🦼\",{\"1\":{\"64\":1}}],[\"👨‍🦯\",{\"1\":{\"64\":1}}],[\"👨‍🦲\",{\"1\":{\"64\":1}}],[\"👨‍🦳\",{\"1\":{\"64\":1}}],[\"👨‍🦱\",{\"1\":{\"64\":1}}],[\"👨‍🦰\",{\"1\":{\"64\":1}}],[\"👨\",{\"1\":{\"64\":1}}],[\"👱‍♂️\",{\"1\":{\"64\":1}}],[\"👱‍♀️\",{\"1\":{\"64\":2}}],[\"👱\",{\"1\":{\"64\":1}}],[\"👧\",{\"1\":{\"64\":1}}],[\"👦\",{\"1\":{\"64\":1}}],[\"👶\",{\"1\":{\"64\":1}}],[\"👄\",{\"1\":{\"64\":1}}],[\"👅\",{\"1\":{\"64\":1}}],[\"👁️\",{\"1\":{\"64\":1}}],[\"👁️‍🗨️\",{\"1\":{\"64\":1}}],[\"👀\",{\"1\":{\"64\":1}}],[\"👃\",{\"1\":{\"64\":1}}],[\"👂\",{\"1\":{\"64\":1}}],[\"💪\",{\"1\":{\"64\":1}}],[\"💅\",{\"1\":{\"64\":1}}],[\"🙏\",{\"1\":{\"64\":1}}],[\"👐\",{\"1\":{\"64\":1}}],[\"🙌\",{\"1\":{\"64\":1}}],[\"👏\",{\"1\":{\"64\":1}}],[\"👊\",{\"1\":{\"64\":3}}],[\"👎\",{\"1\":{\"64\":2}}],[\"👍\",{\"1\":{\"64\":2}}],[\"🖕\",{\"1\":{\"64\":2}}],[\"👉\",{\"1\":{\"64\":1}}],[\"👈\",{\"1\":{\"64\":1}}],[\"👌\",{\"1\":{\"64\":1}}],[\"🖖\",{\"1\":{\"64\":1}}],[\"🖐️\",{\"1\":{\"64\":1}}],[\"👋\",{\"1\":{\"64\":1}}],[\"💤\",{\"1\":{\"64\":1}}],[\"💭\",{\"1\":{\"64\":1}}],[\"🗯️\",{\"1\":{\"64\":1}}],[\"🗨️\",{\"1\":{\"64\":1}}],[\"💬\",{\"1\":{\"64\":1}}],[\"🕳️\",{\"1\":{\"64\":1}}],[\"💨\",{\"1\":{\"64\":1}}],[\"💦\",{\"1\":{\"64\":1}}],[\"💫\",{\"1\":{\"64\":1}}],[\"💥\",{\"1\":{\"64\":2}}],[\"💢\",{\"1\":{\"64\":1}}],[\"💋\",{\"1\":{\"64\":1}}],[\"🖤\",{\"1\":{\"64\":1}}],[\"💜\",{\"1\":{\"64\":1}}],[\"💙\",{\"1\":{\"64\":1}}],[\"💚\",{\"1\":{\"64\":1}}],[\"💛\",{\"1\":{\"64\":1}}],[\"💔\",{\"1\":{\"64\":1}}],[\"💟\",{\"1\":{\"64\":1}}],[\"💕\",{\"1\":{\"64\":1}}],[\"💞\",{\"1\":{\"64\":1}}],[\"💓\",{\"1\":{\"64\":1}}],[\"💗\",{\"1\":{\"64\":1}}],[\"💖\",{\"1\":{\"64\":1}}],[\"💝\",{\"1\":{\"64\":1}}],[\"💘\",{\"1\":{\"64\":1}}],[\"💌\",{\"1\":{\"64\":1}}],[\"🙊\",{\"1\":{\"64\":1}}],[\"🙉\",{\"1\":{\"64\":1}}],[\"🙈\",{\"1\":{\"64\":1}}],[\"😾\",{\"1\":{\"64\":1}}],[\"😿\",{\"1\":{\"64\":1}}],[\"🙀\",{\"1\":{\"64\":1}}],[\"😽\",{\"1\":{\"64\":1}}],[\"😼\",{\"1\":{\"64\":1}}],[\"😻\",{\"1\":{\"64\":1}}],[\"😹\",{\"1\":{\"64\":1}}],[\"😸\",{\"1\":{\"64\":1}}],[\"😺\",{\"1\":{\"64\":1}}],[\"👾\",{\"1\":{\"64\":1}}],[\"👽\",{\"1\":{\"64\":1}}],[\"👻\",{\"1\":{\"64\":1}}],[\"👺\",{\"1\":{\"64\":1}}],[\"👹\",{\"1\":{\"64\":1}}],[\"💩\",{\"1\":{\"64\":3}}],[\"💀\",{\"1\":{\"64\":1}}],[\"👿\",{\"1\":{\"64\":1}}],[\"😈\",{\"1\":{\"64\":1}}],[\"😠\",{\"1\":{\"64\":1}}],[\"😡\",{\"1\":{\"64\":2}}],[\"😤\",{\"1\":{\"64\":1}}],[\"😫\",{\"1\":{\"64\":1}}],[\"😩\",{\"1\":{\"64\":1}}],[\"😓\",{\"1\":{\"64\":1}}],[\"😞\",{\"1\":{\"64\":1}}],[\"😣\",{\"1\":{\"64\":1}}],[\"😖\",{\"1\":{\"64\":1}}],[\"😱\",{\"1\":{\"64\":1}}],[\"😭\",{\"1\":{\"64\":1}}],[\"😢\",{\"1\":{\"64\":1}}],[\"😥\",{\"1\":{\"64\":1}}],[\"😰\",{\"1\":{\"64\":1}}],[\"😨\",{\"1\":{\"64\":1}}],[\"😧\",{\"1\":{\"64\":1}}],[\"😦\",{\"1\":{\"64\":1}}],[\"😳\",{\"1\":{\"64\":1}}],[\"😲\",{\"1\":{\"64\":1}}],[\"😯\",{\"1\":{\"64\":1}}],[\"😮\",{\"1\":{\"64\":1}}],[\"😮‍💨\",{\"1\":{\"64\":1}}],[\"🙁\",{\"1\":{\"64\":1}}],[\"😟\",{\"1\":{\"64\":1}}],[\"😕\",{\"1\":{\"64\":1}}],[\"😎\",{\"1\":{\"64\":1}}],[\"😵‍💫\",{\"1\":{\"64\":1}}],[\"😵\",{\"1\":{\"64\":1}}],[\"😷\",{\"1\":{\"64\":1}}],[\"😴\",{\"1\":{\"64\":1}}],[\"😪\",{\"1\":{\"64\":1}}],[\"😔\",{\"1\":{\"64\":1}}],[\"😌\",{\"1\":{\"64\":1}}],[\"😬\",{\"1\":{\"64\":1}}],[\"🙄\",{\"1\":{\"64\":1}}],[\"😒\",{\"1\":{\"64\":1}}],[\"😏\",{\"1\":{\"64\":1}}],[\"😶‍🌫️\",{\"1\":{\"64\":1}}],[\"😶\",{\"1\":{\"64\":1}}],[\"😑\",{\"1\":{\"64\":1}}],[\"😐\",{\"1\":{\"64\":1}}],[\"😝\",{\"1\":{\"64\":1}}],[\"😜\",{\"1\":{\"64\":1}}],[\"😛\",{\"1\":{\"64\":1}}],[\"😋\",{\"1\":{\"64\":1}}],[\"😙\",{\"1\":{\"64\":1}}],[\"😚\",{\"1\":{\"64\":1}}],[\"😗\",{\"1\":{\"64\":1}}],[\"😘\",{\"1\":{\"64\":1}}],[\"😍\",{\"1\":{\"64\":1}}],[\"😇\",{\"1\":{\"64\":1}}],[\"😊\",{\"1\":{\"64\":1}}],[\"😉\",{\"1\":{\"64\":1}}],[\"🙃\",{\"1\":{\"64\":1}}],[\"🙂\",{\"1\":{\"64\":1}}],[\"😂\",{\"1\":{\"64\":1}}],[\"😅\",{\"1\":{\"64\":1}}],[\"😆\",{\"1\":{\"64\":2}}],[\"😁\",{\"1\":{\"64\":1}}],[\"😄\",{\"1\":{\"64\":1}}],[\"😃\",{\"1\":{\"64\":1}}],[\"😀\",{\"1\":{\"64\":1}}],[\"🔢\",{\"1\":{\"64\":1}}],[\"💯\",{\"1\":{\"64\":1}}],[\"👆\",{\"1\":{\"16\":1,\"17\":1,\"64\":1}}],[\"👇👇👇\",{\"1\":{\"624\":1}}],[\"👇\",{\"1\":{\"6\":1,\"64\":1}}],[\"i18n\",{\"1\":{\"791\":1}}],[\"illegalaccessexception\",{\"1\":{\"788\":1}}],[\"ilp\",{\"1\":{\"319\":1}}],[\"ie\",{\"1\":{\"554\":1}}],[\"igmp\",{\"1\":{\"542\":1}}],[\"ignored\",{\"1\":{\"345\":1}}],[\"ipc\",{\"1\":{\"641\":1}}],[\"ipv6\",{\"1\":{\"605\":1}}],[\"ipv4\",{\"0\":{\"605\":1},\"1\":{\"560\":1,\"605\":4}}],[\"ip\",{\"0\":{\"601\":1,\"602\":1,\"603\":1,\"604\":2,\"607\":1},\"1\":{\"542\":4,\"546\":1,\"547\":6,\"548\":2,\"573\":1,\"584\":2,\"602\":19,\"603\":3,\"604\":4,\"605\":12,\"606\":10,\"607\":12,\"608\":2,\"609\":9,\"612\":3,\"614\":2,\"694\":1,\"697\":1,\"718\":1,\"805\":2}}],[\"iphone\",{\"1\":{\"64\":1}}],[\"ibatis\",{\"1\":{\"453\":1,\"783\":1}}],[\"i0\",{\"1\":{\"278\":1}}],[\"i<len\",{\"1\":{\"270\":1}}],[\"i<\",{\"1\":{\"245\":1}}],[\"i++\",{\"1\":{\"245\":2,\"270\":1,\"318\":1,\"348\":1,\"373\":1,\"445\":1,\"763\":1}}],[\"i=temp\",{\"1\":{\"245\":1}}],[\"i=i++\",{\"1\":{\"245\":1}}],[\"i=1\",{\"1\":{\"245\":2}}],[\"i=10\",{\"1\":{\"240\":1}}],[\"i=0\",{\"1\":{\"13\":1,\"245\":1,\"270\":1}}],[\"i\",{\"0\":{\"277\":1},\"1\":{\"164\":2,\"181\":2,\"245\":4,\"276\":9,\"279\":1,\"280\":3,\"300\":1,\"312\":1,\"314\":1,\"318\":4,\"348\":2,\"373\":3,\"445\":2,\"629\":1,\"642\":1,\"663\":3,\"732\":1,\"763\":3}}],[\"ifpresent\",{\"1\":{\"293\":1,\"294\":1}}],[\"if\",{\"0\":{\"321\":1},\"1\":{\"164\":1,\"181\":7,\"186\":2,\"198\":1,\"257\":2,\"267\":1,\"270\":1,\"310\":1,\"314\":3,\"315\":1,\"320\":1,\"321\":6,\"326\":1,\"373\":1,\"444\":1,\"450\":6,\"725\":4,\"727\":1,\"778\":4,\"788\":2,\"802\":5,\"813\":1,\"820\":1}}],[\"if>\",{\"1\":{\"87\":3,\"88\":4,\"89\":4,\"90\":5,\"91\":1,\"444\":8}}],[\"ioc\",{\"0\":{\"786\":1,\"787\":1,\"788\":1},\"1\":{\"782\":2,\"783\":1,\"787\":5,\"788\":2,\"792\":1,\"793\":1,\"796\":2,\"807\":1}}],[\"ios\",{\"1\":{\"566\":1}}],[\"iostat\",{\"1\":{\"410\":1}}],[\"ioexception\",{\"1\":{\"445\":1,\"788\":1}}],[\"io密集型\",{\"1\":{\"359\":3}}],[\"io\",{\"0\":{\"278\":1,\"661\":1,\"663\":1},\"1\":{\"159\":1,\"186\":1,\"193\":1,\"196\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"278\":3,\"280\":5,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"389\":1,\"408\":1,\"410\":1,\"417\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"491\":1,\"493\":2,\"497\":1,\"502\":1,\"504\":3,\"510\":1,\"516\":1,\"523\":1,\"527\":1,\"534\":1,\"536\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"673\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"images\",{\"1\":{\"76\":3}}],[\"import\",{\"1\":{\"820\":2,\"858\":1}}],[\"important\",{\"1\":{\"76\":3}}],[\"implements\",{\"1\":{\"285\":1,\"300\":2,\"310\":1,\"453\":2,\"793\":2,\"806\":2}}],[\"imp\",{\"1\":{\"64\":2}}],[\"icmp\",{\"0\":{\"608\":1},\"1\":{\"542\":1,\"608\":4,\"609\":4}}],[\"icp\",{\"1\":{\"510\":2}}],[\"icon\",{\"1\":{\"73\":4,\"76\":1}}],[\"iceland\",{\"1\":{\"64\":1}}],[\"ice\",{\"1\":{\"64\":5}}],[\"icecream\",{\"1\":{\"64\":1}}],[\"iterator\",{\"1\":{\"788\":1,\"802\":2}}],[\"iterator<string>\",{\"1\":{\"788\":1}}],[\"item\",{\"1\":{\"444\":2,\"445\":1}}],[\"item=\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"444\":1,\"445\":2}}],[\"item属性分别表示为该map集合中的key\",{\"1\":{\"86\":1,\"91\":1}}],[\"it\",{\"1\":{\"64\":1,\"788\":3,\"813\":1}}],[\"its\",{\"1\":{\"64\":1}}],[\"iran\",{\"1\":{\"64\":1}}],[\"iraq\",{\"1\":{\"64\":1}}],[\"ireland\",{\"1\":{\"64\":1}}],[\"isenabled\",{\"1\":{\"820\":1}}],[\"ispublic\",{\"1\":{\"813\":1}}],[\"ispresent\",{\"1\":{\"293\":1}}],[\"isolver\",{\"1\":{\"806\":5}}],[\"isolation\",{\"1\":{\"519\":1,\"810\":5,\"858\":1}}],[\"isstopped\",{\"1\":{\"778\":1}}],[\"isinterrupted\",{\"1\":{\"302\":2}}],[\"is\",{\"1\":{\"267\":4,\"292\":2,\"300\":1,\"450\":1,\"498\":2,\"688\":1,\"689\":2}}],[\"islongpollingenable\",{\"1\":{\"778\":2}}],[\"isle\",{\"1\":{\"64\":1}}],[\"islands\",{\"1\":{\"64\":17}}],[\"island\",{\"1\":{\"64\":6}}],[\"israel\",{\"1\":{\"64\":1}}],[\"idno\",{\"1\":{\"793\":1}}],[\"ids\",{\"1\":{\"523\":3}}],[\"id分别为100\",{\"1\":{\"523\":1}}],[\"idx\",{\"1\":{\"489\":1}}],[\"id=2\",{\"1\":{\"481\":2,\"482\":1}}],[\"id=p\",{\"1\":{\"441\":1}}],[\"id=123\",{\"1\":{\"225\":2}}],[\"id=\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"95\":1,\"96\":1,\"97\":1,\"436\":4,\"437\":5,\"440\":1,\"441\":5,\"443\":1,\"444\":6,\"445\":3,\"795\":2}}],[\"identifier\",{\"1\":{\"557\":1}}],[\"identification\",{\"1\":{\"64\":1}}],[\"ide\",{\"1\":{\"282\":1}}],[\"ideograph\",{\"1\":{\"64\":1}}],[\"id\",{\"1\":{\"64\":1,\"72\":1,\"91\":1,\"282\":3,\"385\":1,\"414\":4,\"418\":2,\"436\":4,\"437\":6,\"440\":1,\"441\":6,\"443\":1,\"444\":2,\"445\":2,\"460\":2,\"481\":1,\"488\":8,\"489\":1,\"491\":6,\"493\":2,\"513\":8,\"523\":23,\"531\":6,\"534\":5,\"639\":1,\"759\":1,\"760\":1,\"766\":3,\"795\":9,\"859\":2,\"871\":4,\"872\":2}}],[\"izakaya\",{\"1\":{\"64\":1}}],[\"injection\",{\"1\":{\"802\":1}}],[\"injectionmetadata\",{\"1\":{\"802\":1}}],[\"inject和\",{\"1\":{\"802\":1}}],[\"inject\",{\"1\":{\"802\":3}}],[\"inode\",{\"1\":{\"660\":3}}],[\"in子查询\",{\"1\":{\"493\":1}}],[\"innodb\",{\"0\":{\"477\":1,\"513\":1},\"1\":{\"475\":5,\"476\":2,\"477\":9,\"479\":4,\"480\":2,\"481\":1,\"489\":1,\"495\":1,\"501\":1,\"502\":2,\"506\":1,\"507\":1,\"509\":1,\"513\":1,\"514\":1,\"516\":1,\"519\":9,\"523\":1}}],[\"innocent\",{\"1\":{\"64\":1}}],[\"inner\",{\"1\":{\"458\":1,\"459\":1}}],[\"inheritthreadlocals\",{\"1\":{\"315\":1}}],[\"inheritablethreadlocals\",{\"1\":{\"315\":4}}],[\"inheritablethreadlocaltest\",{\"1\":{\"315\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"315\":2}}],[\"incrby\",{\"1\":{\"725\":1}}],[\"increment\",{\"1\":{\"312\":2}}],[\"incoming\",{\"1\":{\"64\":1}}],[\"inputarray\",{\"1\":{\"285\":2}}],[\"inputstream\",{\"1\":{\"278\":2,\"283\":1,\"435\":3,\"788\":4}}],[\"invocationhandler\",{\"1\":{\"806\":5}}],[\"invocation\",{\"1\":{\"453\":4}}],[\"invokeandhandle\",{\"1\":{\"817\":1}}],[\"invoke\",{\"1\":{\"285\":1,\"450\":3,\"806\":4,\"813\":1}}],[\"invoked\",{\"1\":{\"267\":1}}],[\"invokevirtual\",{\"1\":{\"266\":3}}],[\"invokespecial\",{\"1\":{\"266\":1}}],[\"invader\",{\"1\":{\"64\":1}}],[\"instantiationawarebeanpostprocessor\",{\"1\":{\"802\":2}}],[\"instantiationaware\",{\"1\":{\"802\":1}}],[\"instantiation\",{\"1\":{\"791\":1,\"793\":1}}],[\"instantiationexception\",{\"1\":{\"788\":1}}],[\"instance\",{\"1\":{\"385\":1,\"450\":1,\"793\":1}}],[\"instance=new\",{\"1\":{\"319\":1}}],[\"instanceof\",{\"1\":{\"181\":1,\"257\":1}}],[\"instruction\",{\"1\":{\"319\":1}}],[\"insertb\",{\"1\":{\"813\":3}}],[\"insert>\",{\"1\":{\"443\":1,\"445\":3}}],[\"insert\",{\"1\":{\"443\":3,\"445\":3,\"513\":2,\"813\":7}}],[\"insert操作\",{\"1\":{\"225\":1}}],[\"insert前先select\",{\"1\":{\"225\":1}}],[\"inside\",{\"1\":{\"64\":1}}],[\"initflowqpsrule\",{\"1\":{\"859\":1}}],[\"initmethod=\",{\"1\":{\"784\":1}}],[\"init\",{\"1\":{\"639\":3,\"784\":3,\"793\":3}}],[\"init的时候\",{\"1\":{\"315\":1}}],[\"inittable\",{\"1\":{\"181\":2}}],[\"initializers\",{\"1\":{\"822\":1}}],[\"initializingbean\",{\"1\":{\"793\":4}}],[\"initialization\",{\"1\":{\"181\":1,\"421\":1,\"793\":1}}],[\"initialmark\",{\"1\":{\"340\":1}}],[\"initialref\",{\"1\":{\"340\":1}}],[\"initial\",{\"1\":{\"173\":1,\"403\":1,\"404\":1}}],[\"initialcapacity\",{\"1\":{\"169\":2}}],[\"introduction\",{\"1\":{\"804\":1}}],[\"intset\",{\"1\":{\"729\":1}}],[\"intvl\",{\"1\":{\"560\":2}}],[\"into\",{\"1\":{\"443\":1,\"445\":3}}],[\"intarray\",{\"1\":{\"285\":1}}],[\"intarray=\",{\"1\":{\"285\":1}}],[\"int结果\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"int常量\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"intel\",{\"1\":{\"556\":1}}],[\"intention\",{\"1\":{\"513\":2}}],[\"integercache\",{\"1\":{\"269\":4}}],[\"integer\",{\"0\":{\"268\":1,\"269\":4,\"270\":1},\"1\":{\"137\":4,\"140\":4,\"147\":4,\"240\":1,\"269\":16,\"270\":4,\"285\":2,\"364\":1,\"365\":1,\"373\":1,\"441\":1,\"724\":3,\"727\":2,\"793\":3,\"813\":3,\"879\":4}}],[\"intercepts\",{\"1\":{\"453\":1}}],[\"intercept\",{\"1\":{\"453\":2,\"806\":1,\"813\":1}}],[\"interceptor=\",{\"1\":{\"453\":1}}],[\"interceptor\",{\"1\":{\"453\":4}}],[\"interrupted\",{\"1\":{\"302\":1}}],[\"interruptedexception\",{\"1\":{\"272\":3,\"300\":1,\"345\":4,\"348\":1,\"349\":2,\"357\":1,\"373\":1}}],[\"interrupt\",{\"1\":{\"302\":2}}],[\"interrobang\",{\"1\":{\"64\":1}}],[\"internet\",{\"1\":{\"602\":1,\"608\":1,\"609\":2}}],[\"international\",{\"1\":{\"542\":1}}],[\"intern\",{\"0\":{\"267\":1},\"1\":{\"267\":1,\"381\":1}}],[\"interface\",{\"0\":{\"252\":1},\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"238\":1,\"285\":1,\"292\":2,\"445\":1,\"448\":2,\"805\":1,\"806\":3,\"820\":1,\"847\":1}}],[\"int数值\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"int变量\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"int\",{\"1\":{\"137\":6,\"140\":6,\"147\":6,\"154\":2,\"166\":2,\"167\":5,\"169\":4,\"181\":5,\"238\":2,\"239\":2,\"240\":1,\"242\":1,\"245\":8,\"251\":1,\"257\":1,\"258\":2,\"263\":1,\"269\":2,\"270\":6,\"272\":2,\"276\":4,\"302\":1,\"306\":1,\"312\":3,\"314\":2,\"318\":2,\"322\":1,\"331\":1,\"341\":4,\"348\":3,\"363\":1,\"365\":1,\"367\":5,\"373\":10,\"436\":2,\"437\":2,\"441\":2,\"445\":1,\"763\":2,\"778\":1,\"795\":3,\"813\":2,\"879\":6}}],[\"indian\",{\"1\":{\"64\":1}}],[\"india\",{\"1\":{\"64\":1}}],[\"indonesia\",{\"1\":{\"64\":1}}],[\"index文件的存储位置是\",{\"1\":{\"771\":1}}],[\"indexfile的底层存储设计为在文件系统中实现hashmap结构\",{\"1\":{\"771\":1}}],[\"indexfile\",{\"1\":{\"771\":2}}],[\"indexfile文件\",{\"1\":{\"771\":1}}],[\"indexfor\",{\"1\":{\"167\":2}}],[\"index2\",{\"1\":{\"489\":1}}],[\"index=\",{\"1\":{\"86\":1,\"91\":1,\"444\":1}}],[\"index\",{\"1\":{\"29\":1,\"64\":4,\"86\":1,\"91\":1,\"154\":2,\"444\":1,\"445\":2,\"489\":2,\"493\":11,\"509\":1,\"510\":1}}],[\"inf\",{\"1\":{\"820\":2,\"821\":1}}],[\"info\",{\"1\":{\"778\":3,\"805\":9}}],[\"information\",{\"1\":{\"64\":2}}],[\"infinity\",{\"1\":{\"64\":1}}],[\"ink\",{\"1\":{\"64\":1}}],[\"inbox\",{\"1\":{\"64\":1}}],[\"in\",{\"0\":{\"464\":1},\"1\":{\"23\":3,\"64\":13,\"444\":1,\"464\":7,\"493\":1,\"498\":1}}],[\"inline\",{\"1\":{\"11\":1}}],[\"sds\",{\"0\":{\"730\":1},\"1\":{\"729\":1,\"730\":4}}],[\"sdk\",{\"1\":{\"233\":1}}],[\"srarter\",{\"0\":{\"821\":1}}],[\"srtt|\",{\"1\":{\"591\":1}}],[\"srtt\",{\"1\":{\"591\":7}}],[\"sri\",{\"1\":{\"64\":1}}],[\"sshthresh\",{\"1\":{\"588\":1,\"589\":4}}],[\"ssthresh\",{\"1\":{\"586\":1,\"587\":2,\"588\":1}}],[\"ssl进行安全加密\",{\"1\":{\"845\":1}}],[\"ssl\",{\"1\":{\"561\":2,\"562\":2}}],[\"ss\",{\"1\":{\"463\":1}}],[\"sz\",{\"1\":{\"314\":2}}],[\"s2\",{\"1\":{\"294\":1}}],[\"sq\",{\"1\":{\"457\":1}}],[\"sql表达式过滤更加灵活\",{\"1\":{\"762\":1}}],[\"sql执行和执行结果映射处理等\",{\"1\":{\"449\":1}}],[\"sql解析\",{\"1\":{\"449\":1}}],[\"sqlexception\",{\"1\":{\"448\":7}}],[\"sql层表达不直观\",{\"1\":{\"436\":1}}],[\"sqlsession只是一个门面\",{\"1\":{\"448\":1}}],[\"sqlsession相当于jdbc中的connection\",{\"1\":{\"435\":1}}],[\"sqlsession\",{\"1\":{\"435\":7,\"445\":1,\"446\":1,\"448\":2,\"450\":14}}],[\"sqlsessionfactory只是一个接口\",{\"1\":{\"448\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"435\":3}}],[\"sqlsessionfactory\",{\"1\":{\"435\":6,\"445\":3,\"448\":4}}],[\"sql编写量较少\",{\"1\":{\"434\":1}}],[\"sql优化和移植性\",{\"1\":{\"434\":1}}],[\"sql变化导致解析代码变化\",{\"1\":{\"433\":1}}],[\"sql语句写在代码中造成代码不易维护\",{\"1\":{\"433\":1}}],[\"sql语句依赖于数据库\",{\"1\":{\"433\":1}}],[\"sql语句的编写工作量较大\",{\"1\":{\"433\":1}}],[\"sql\",{\"0\":{\"470\":1,\"473\":1,\"484\":1,\"485\":1,\"486\":1},\"1\":{\"291\":1,\"417\":1,\"433\":3,\"434\":2,\"435\":1,\"448\":4,\"457\":2,\"458\":1,\"473\":2,\"485\":3,\"486\":2,\"487\":1,\"489\":2,\"493\":6,\"497\":1,\"516\":2,\"526\":1,\"527\":1,\"528\":3,\"538\":5,\"712\":1,\"762\":1}}],[\"square\",{\"1\":{\"64\":17}}],[\"squared\",{\"1\":{\"64\":1}}],[\"squid\",{\"1\":{\"64\":1}}],[\"sb\",{\"1\":{\"255\":2,\"266\":2}}],[\"sb=new\",{\"1\":{\"255\":1,\"266\":1}}],[\"s1+=\",{\"1\":{\"239\":1}}],[\"s1+1\",{\"1\":{\"239\":1}}],[\"s1\",{\"1\":{\"239\":12,\"294\":1}}],[\"s\",{\"1\":{\"107\":1,\"115\":1,\"208\":1,\"265\":1,\"270\":5,\"285\":1,\"293\":2,\"294\":6,\"325\":1,\"348\":3,\"357\":1,\"417\":1,\"512\":1,\"793\":1}}],[\"svn等版本控制系统中\",{\"1\":{\"841\":1}}],[\"svg\",{\"1\":{\"76\":3}}],[\"svalbard\",{\"1\":{\"64\":1}}],[\"synack\",{\"1\":{\"573\":1}}],[\"synagogue\",{\"1\":{\"64\":1}}],[\"syn+ack\",{\"1\":{\"573\":2}}],[\"syn\",{\"0\":{\"571\":1,\"573\":1},\"1\":{\"568\":2,\"569\":1,\"570\":2,\"571\":1,\"572\":1,\"573\":17,\"580\":1,\"614\":3}}],[\"syn=1\",{\"1\":{\"568\":2,\"569\":1}}],[\"synchronousqueue<runnable>\",{\"1\":{\"364\":1}}],[\"synchronousqueue\",{\"1\":{\"356\":2}}],[\"synchronized会保证多线程不会同时更新变量i\",{\"1\":{\"340\":1}}],[\"synchronized与wait\",{\"1\":{\"330\":1}}],[\"synchronized的性能比reentrantlock差很多\",{\"1\":{\"330\":1}}],[\"synchronized的实现直接调用objectmonitor的enter和exit\",{\"1\":{\"327\":1}}],[\"synchronized的实现原理\",{\"0\":{\"325\":1}}],[\"synchronized是java语言的关键字\",{\"1\":{\"330\":1}}],[\"synchronized是怎么加锁的呢\",{\"1\":{\"325\":1}}],[\"synchronized做了哪些优化\",{\"1\":{\"327\":1}}],[\"synchronized优化了解吗\",{\"0\":{\"327\":1}}],[\"synchronized怎么实现可重入的呢\",{\"1\":{\"326\":1}}],[\"synchronized怎么保证有序性\",{\"1\":{\"326\":1}}],[\"synchronized怎么保证可见性\",{\"1\":{\"326\":1}}],[\"synchronized同步的代码块\",{\"1\":{\"326\":1}}],[\"synchronized可见性\",{\"0\":{\"326\":1}}],[\"synchronized都是基于monitor实现的\",{\"1\":{\"325\":1}}],[\"synchronized锁住的是什么呢\",{\"1\":{\"325\":1}}],[\"synchronized标记符来实现同步\",{\"1\":{\"325\":1}}],[\"synchronized修饰同步方法时\",{\"1\":{\"325\":1}}],[\"synchronized修饰代码块时\",{\"1\":{\"325\":1}}],[\"synchronizeddemo\",{\"1\":{\"325\":1}}],[\"synchronized主要有三种用法\",{\"1\":{\"324\":1}}],[\"synchronized经常用的\",{\"1\":{\"324\":1}}],[\"synchronized用过吗\",{\"0\":{\"324\":1}}],[\"synchronized或者volatile都可以保证多线程之间操作的有序性\",{\"1\":{\"318\":1}}],[\"synchronized\",{\"1\":{\"178\":1,\"181\":1,\"264\":1,\"324\":9,\"325\":1,\"326\":3,\"330\":1,\"352\":1}}],[\"synchronizedmap\",{\"1\":{\"178\":3}}],[\"synchronizedlist\",{\"1\":{\"158\":1}}],[\"sync\",{\"1\":{\"333\":2,\"676\":1}}],[\"systemclock\",{\"1\":{\"778\":2}}],[\"system\",{\"1\":{\"137\":10,\"140\":10,\"147\":10,\"245\":3,\"255\":1,\"256\":1,\"269\":3,\"276\":4,\"285\":3,\"292\":1,\"294\":8,\"300\":3,\"315\":1,\"345\":3,\"348\":1,\"349\":1,\"373\":1,\"399\":2,\"423\":1,\"445\":3,\"453\":4,\"493\":3,\"547\":1,\"788\":1,\"793\":11,\"805\":2,\"806\":6,\"821\":1,\"879\":10}}],[\"syria\",{\"1\":{\"64\":1}}],[\"syringe\",{\"1\":{\"64\":1}}],[\"symbols\",{\"1\":{\"64\":1}}],[\"symbol\",{\"1\":{\"64\":5}}],[\"soa关注于服务的重用性和组合性\",{\"1\":{\"828\":1}}],[\"soa\",{\"1\":{\"828\":1}}],[\"soap\",{\"1\":{\"64\":1}}],[\"solver\",{\"1\":{\"806\":8}}],[\"solve\",{\"1\":{\"806\":5}}],[\"solomon\",{\"1\":{\"64\":1}}],[\"something\",{\"1\":{\"727\":3}}],[\"somalia\",{\"1\":{\"64\":1}}],[\"sort等命\",{\"1\":{\"718\":1}}],[\"sorted\",{\"1\":{\"294\":4,\"670\":1}}],[\"so\",{\"1\":{\"579\":1}}],[\"sonwflake\",{\"1\":{\"534\":1}}],[\"softreference\",{\"1\":{\"392\":3}}],[\"soft\",{\"1\":{\"193\":2,\"392\":1}}],[\"softball\",{\"1\":{\"64\":1}}],[\"sos\",{\"1\":{\"64\":1}}],[\"southern\",{\"1\":{\"64\":1}}],[\"south\",{\"1\":{\"64\":4}}],[\"source\",{\"1\":{\"64\":1,\"287\":1}}],[\"sound\",{\"1\":{\"64\":2}}],[\"soon\",{\"1\":{\"64\":1}}],[\"soc\",{\"1\":{\"428\":1}}],[\"socket\",{\"0\":{\"548\":1},\"1\":{\"389\":1,\"548\":3,\"641\":2,\"662\":1,\"664\":10}}],[\"socks\",{\"1\":{\"64\":1}}],[\"soccer\",{\"1\":{\"64\":1}}],[\"sob\",{\"1\":{\"64\":1}}],[\"smtp\",{\"1\":{\"542\":1}}],[\"smoking\",{\"1\":{\"64\":2}}],[\"small\",{\"1\":{\"64\":12}}],[\"smirk\",{\"1\":{\"64\":2}}],[\"smiling\",{\"1\":{\"64\":5}}],[\"smile\",{\"1\":{\"64\":3}}],[\"smiley\",{\"1\":{\"64\":2}}],[\"sismember\",{\"1\":{\"724\":1}}],[\"sigcld\",{\"1\":{\"641\":1}}],[\"sigalrm\",{\"1\":{\"641\":1}}],[\"sigterm\",{\"1\":{\"641\":1}}],[\"sigkill\",{\"1\":{\"641\":1}}],[\"sigfpe\",{\"1\":{\"641\":1}}],[\"sigbus和sigsegv\",{\"1\":{\"641\":1}}],[\"sigquit\",{\"1\":{\"641\":1}}],[\"sigint\",{\"1\":{\"641\":1}}],[\"sighup\",{\"1\":{\"641\":1}}],[\"signature\",{\"1\":{\"453\":1,\"564\":3}}],[\"signal\",{\"1\":{\"64\":1}}],[\"sign\",{\"1\":{\"64\":9}}],[\"site\",{\"1\":{\"613\":1,\"615\":1}}],[\"simpleexecutor\",{\"1\":{\"451\":2}}],[\"simple\",{\"1\":{\"389\":1,\"451\":1,\"493\":1}}],[\"size超过10kb\",{\"1\":{\"719\":1}}],[\"size\",{\"1\":{\"314\":1,\"384\":1}}],[\"size=1\",{\"1\":{\"266\":1}}],[\"sizectl\",{\"1\":{\"181\":5}}],[\"since\",{\"1\":{\"292\":1}}],[\"sint\",{\"1\":{\"64\":1}}],[\"singletonmap\",{\"1\":{\"788\":4}}],[\"singleton\",{\"1\":{\"319\":2,\"784\":1,\"797\":1}}],[\"singapore\",{\"1\":{\"64\":1}}],[\"singer\",{\"1\":{\"64\":3}}],[\"sierra\",{\"1\":{\"64\":1}}],[\"six\",{\"1\":{\"64\":2}}],[\"side\",{\"1\":{\"64\":1}}],[\"silhouette\",{\"1\":{\"64\":2}}],[\"swnd\",{\"1\":{\"585\":2}}],[\"swapping\",{\"1\":{\"657\":1}}],[\"swap\",{\"1\":{\"427\":1,\"657\":1}}],[\"swaziland\",{\"1\":{\"64\":1}}],[\"swan\",{\"1\":{\"64\":1}}],[\"switch\",{\"0\":{\"242\":1},\"1\":{\"242\":1,\"444\":1,\"636\":1}}],[\"switzerland\",{\"1\":{\"64\":1}}],[\"swim\",{\"1\":{\"64\":1}}],[\"swimsuit\",{\"1\":{\"64\":1}}],[\"swimming\",{\"1\":{\"64\":2}}],[\"swimmer\",{\"1\":{\"64\":1}}],[\"swords\",{\"1\":{\"64\":1}}],[\"sweep\",{\"1\":{\"395\":1,\"401\":1,\"403\":2,\"405\":1}}],[\"sweet\",{\"1\":{\"64\":1}}],[\"sweden\",{\"1\":{\"64\":1}}],[\"sweat\",{\"1\":{\"64\":4}}],[\"snd\",{\"1\":{\"583\":3}}],[\"snmp\",{\"1\":{\"542\":1}}],[\"snowman\",{\"1\":{\"64\":2}}],[\"snowflake\",{\"1\":{\"64\":1}}],[\"snow\",{\"1\":{\"64\":3}}],[\"snowboarder\",{\"1\":{\"64\":1}}],[\"snapshot<\",{\"1\":{\"821\":1}}],[\"snapshot\",{\"1\":{\"678\":1,\"770\":1}}],[\"snail\",{\"1\":{\"64\":1}}],[\"snake\",{\"1\":{\"64\":1}}],[\"sneezing\",{\"1\":{\"64\":1}}],[\"skywalking或sentinel\",{\"1\":{\"831\":1}}],[\"skywalking\",{\"1\":{\"831\":1,\"832\":1,\"868\":3}}],[\"skiplist\",{\"1\":{\"729\":1,\"732\":1}}],[\"ski\",{\"1\":{\"64\":1}}],[\"skier\",{\"1\":{\"64\":1}}],[\"skate\",{\"1\":{\"64\":2}}],[\"skateboard\",{\"1\":{\"64\":1}}],[\"skunk\",{\"1\":{\"64\":1}}],[\"skull\",{\"1\":{\"64\":2}}],[\"schemalocation=\",{\"1\":{\"793\":1}}],[\"schema\",{\"1\":{\"537\":2,\"793\":3}}],[\"schedule\",{\"1\":{\"764\":1}}],[\"scheduled\",{\"1\":{\"763\":1}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"365\":1}}],[\"schedulewithfixeddelay\",{\"1\":{\"365\":1}}],[\"scheduleatfixedrate\",{\"1\":{\"365\":1}}],[\"school\",{\"1\":{\"64\":2}}],[\"sc\",{\"1\":{\"181\":14}}],[\"scan\",{\"1\":{\"736\":2}}],[\"scavenge收集器\",{\"1\":{\"406\":1}}],[\"scavenge\",{\"1\":{\"401\":4,\"406\":3}}],[\"scale\",{\"1\":{\"64\":1,\"465\":1}}],[\"scarf\",{\"1\":{\"64\":1}}],[\"scissors\",{\"1\":{\"64\":1}}],[\"scientist\",{\"1\":{\"64\":3}}],[\"scripts\",{\"1\":{\"726\":1}}],[\"script\",{\"1\":{\"615\":1}}],[\"scripting\",{\"1\":{\"615\":1}}],[\"screwdriver\",{\"1\":{\"64\":1}}],[\"scream\",{\"1\":{\"64\":2}}],[\"scroll\",{\"1\":{\"64\":1}}],[\"scene\",{\"1\":{\"64\":1}}],[\"scope\",{\"1\":{\"784\":1}}],[\"scotland\",{\"1\":{\"64\":1}}],[\"scorpius\",{\"1\":{\"64\":1}}],[\"scorpion\",{\"1\":{\"64\":1}}],[\"score属性\",{\"1\":{\"732\":1}}],[\"score1\",{\"1\":{\"723\":1}}],[\"score\",{\"1\":{\"64\":1,\"670\":1}}],[\"scooter\",{\"1\":{\"64\":2}}],[\"seq5\",{\"1\":{\"592\":3}}],[\"seq4\",{\"1\":{\"592\":3}}],[\"seq3\",{\"1\":{\"592\":3}}],[\"seq2\",{\"1\":{\"592\":7}}],[\"seq1\",{\"1\":{\"592\":1}}],[\"seq\",{\"1\":{\"569\":1,\"574\":1}}],[\"seq=w\",{\"1\":{\"574\":1}}],[\"seq=u+1\",{\"1\":{\"574\":1}}],[\"seq=u\",{\"1\":{\"574\":1}}],[\"seq=y\",{\"1\":{\"568\":1}}],[\"seq=x\",{\"1\":{\"568\":1}}],[\"send\",{\"1\":{\"763\":1}}],[\"sendfile\",{\"1\":{\"662\":2}}],[\"sentinel利用了token\",{\"1\":{\"861\":1}}],[\"sentinel怎么实现集群限流\",{\"0\":{\"861\":1}}],[\"sentinel怎么实现限流的\",{\"0\":{\"859\":1}}],[\"sentinel使用滑动窗口限流算法来实现限流\",{\"1\":{\"860\":1}}],[\"sentinel采用的什么限流算法\",{\"0\":{\"860\":1}}],[\"sentinel会根据资源的限流规则判断是否需要进行限流控制\",{\"1\":{\"859\":1}}],[\"sentinel会监控每个资源的流量情况\",{\"1\":{\"859\":1}}],[\"sentinelresource\",{\"1\":{\"859\":1}}],[\"sentinel通过动态管理限流规则\",{\"1\":{\"859\":1}}],[\"sentinel通过三个定时监控任务完成对各个节点发现和监控\",{\"1\":{\"688\":1}}],[\"sentinels\",{\"1\":{\"689\":1}}],[\"sentinel领导者节点会向剩余的从节点发送命令\",{\"1\":{\"688\":1}}],[\"sentinel领导者节点会对第一步选出来的从节点执行slaveof\",{\"1\":{\"688\":1}}],[\"sentinel节点集合会将原来的主节点更新为从节点\",{\"1\":{\"688\":1}}],[\"sentinel节点之间会做一个领导者选举的工作\",{\"1\":{\"688\":1}}],[\"sentinel节点认为主节点确实有问题\",{\"1\":{\"688\":1}}],[\"sentinel节点就会对该节点做失败判定\",{\"1\":{\"688\":1}}],[\"sentinel\",{\"0\":{\"687\":1,\"688\":1},\"1\":{\"687\":2,\"688\":1,\"831\":5,\"832\":3}}],[\"sent\",{\"1\":{\"568\":1}}],[\"senegal\",{\"1\":{\"64\":1}}],[\"separator\",{\"1\":{\"445\":2}}],[\"separator=\",{\"1\":{\"444\":1,\"445\":2}}],[\"sessionstorage\",{\"1\":{\"566\":1}}],[\"sessionid\",{\"1\":{\"566\":9}}],[\"session\",{\"0\":{\"566\":1},\"1\":{\"389\":1,\"435\":3,\"446\":1,\"450\":1,\"538\":2,\"565\":1,\"566\":22,\"784\":1,\"797\":4}}],[\"session等等数据隔离也都可以通过threadlocal去实现\",{\"1\":{\"309\":1}}],[\"seconds\",{\"1\":{\"352\":1,\"354\":1,\"364\":1}}],[\"secret\",{\"1\":{\"64\":1}}],[\"sem\",{\"1\":{\"645\":5}}],[\"semaphore的acquire\",{\"1\":{\"348\":1}}],[\"semaphore的用法也很简单\",{\"1\":{\"348\":1}}],[\"semaphore的构造方法\",{\"1\":{\"348\":1}}],[\"semaphore的本质就是协调多个线程对共享资源的获取\",{\"1\":{\"348\":1}}],[\"semaphoretest\",{\"1\":{\"348\":1}}],[\"semaphore\",{\"0\":{\"348\":1},\"1\":{\"348\":5}}],[\"semi\",{\"1\":{\"23\":1}}],[\"se\",{\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"664\":1,\"736\":1,\"778\":1,\"824\":1,\"877\":1}}],[\"segmentation\",{\"1\":{\"652\":1}}],[\"segment\",{\"1\":{\"574\":1,\"576\":1}}],[\"segment如果是空就先初始化\",{\"1\":{\"180\":1}}],[\"segment之间相互不会受到影响\",{\"1\":{\"180\":1}}],[\"segment则包含hashentry的数组\",{\"1\":{\"180\":1}}],[\"segment继承于reentrantlock\",{\"1\":{\"180\":1}}],[\"setlimitapp\",{\"1\":{\"859\":1}}],[\"setgrade\",{\"1\":{\"859\":1}}],[\"setresource\",{\"1\":{\"859\":1}}],[\"set<string>\",{\"1\":{\"820\":1}}],[\"setparentcityid\",{\"1\":{\"813\":2}}],[\"setparameters的作用就是设置预编译sql语句的参数\",{\"1\":{\"448\":1}}],[\"setparameters\",{\"1\":{\"448\":2}}],[\"setcount\",{\"1\":{\"859\":1}}],[\"setcontext\",{\"1\":{\"427\":1}}],[\"setcityname\",{\"1\":{\"813\":3}}],[\"setcallback\",{\"1\":{\"806\":1}}],[\"setfactorydao\",{\"1\":{\"795\":1}}],[\"setid\",{\"1\":{\"795\":1}}],[\"setname\",{\"1\":{\"793\":1}}],[\"setno\",{\"1\":{\"793\":1}}],[\"setnx命令\",{\"1\":{\"727\":1}}],[\"setnx\",{\"1\":{\"198\":2,\"727\":7}}],[\"setdelaytimelevel\",{\"1\":{\"763\":1}}],[\"set指令\",{\"1\":{\"727\":1}}],[\"set等集合类型时\",{\"1\":{\"719\":1}}],[\"set集合大小做了限制\",{\"1\":{\"664\":1}}],[\"set集合很大时\",{\"1\":{\"664\":2}}],[\"set集合从用户态拷贝到内核态\",{\"1\":{\"664\":1}}],[\"set集合拷⻉到内核⾥\",{\"1\":{\"664\":1}}],[\"set拷⻉回⽤户态⾥\",{\"1\":{\"664\":1}}],[\"set的⽅式\",{\"1\":{\"664\":1}}],[\"set的父接口\",{\"1\":{\"152\":1}}],[\"setter\",{\"1\":{\"788\":1,\"795\":1,\"799\":3,\"800\":1,\"821\":1}}],[\"setter方法来设置线程池的参数\",{\"1\":{\"368\":1}}],[\"settings\",{\"1\":{\"451\":1}}],[\"set>\",{\"1\":{\"444\":1}}],[\"setbeanfactory方法\",{\"1\":{\"793\":2}}],[\"setbeanfactory\",{\"1\":{\"793\":1}}],[\"setbeanclass\",{\"1\":{\"788\":1}}],[\"setbeanname方法\",{\"1\":{\"793\":2}}],[\"setbeanname\",{\"1\":{\"788\":1,\"793\":1}}],[\"setb\",{\"1\":{\"442\":1}}],[\"set挂号才有资格\",{\"1\":{\"325\":1}}],[\"set面试没啥好问的\",{\"1\":{\"185\":1}}],[\"set\",{\"0\":{\"185\":1},\"1\":{\"137\":1,\"140\":1,\"147\":1,\"152\":2,\"198\":2,\"225\":1,\"308\":1,\"310\":2,\"311\":1,\"314\":1,\"315\":1,\"325\":2,\"390\":1,\"444\":1,\"466\":1,\"664\":2,\"668\":1,\"670\":3,\"719\":1,\"727\":3,\"795\":1,\"859\":1,\"879\":1}}],[\"setsuperclass\",{\"1\":{\"806\":1}}],[\"setstaticfactorydao\",{\"1\":{\"795\":1}}],[\"setstumap\",{\"1\":{\"91\":1}}],[\"setstuarray\",{\"1\":{\"90\":1}}],[\"setstulist\",{\"1\":{\"89\":1}}],[\"setsize\",{\"1\":{\"664\":1}}],[\"setsex\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"sex\",{\"1\":{\"87\":3,\"88\":3,\"89\":6,\"90\":6,\"91\":3,\"440\":1}}],[\"sex所示\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"selectimports\",{\"1\":{\"820\":1}}],[\"selective\",{\"1\":{\"593\":1}}],[\"select机制的缺点\",{\"1\":{\"664\":1}}],[\"selectpostin\",{\"1\":{\"444\":1}}],[\"selectblog\",{\"1\":{\"435\":2}}],[\"selectone\",{\"1\":{\"435\":1,\"450\":1}}],[\"selector\",{\"1\":{\"280\":2}}],[\"selectuser\",{\"1\":{\"95\":2,\"96\":2,\"97\":2,\"436\":8}}],[\"select>\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"95\":1,\"96\":1,\"97\":1,\"436\":4,\"437\":2,\"440\":1,\"441\":2,\"444\":4}}],[\"select\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"225\":1,\"436\":4,\"437\":2,\"440\":1,\"441\":2,\"444\":4,\"450\":1,\"454\":3,\"469\":2,\"470\":2,\"473\":1,\"477\":2,\"479\":1,\"488\":5,\"489\":3,\"490\":1,\"491\":1,\"493\":3,\"507\":1,\"508\":2,\"510\":1,\"664\":8,\"672\":1}}],[\"selfie\",{\"1\":{\"64\":1}}],[\"seychelles\",{\"1\":{\"64\":1}}],[\"serialzable\",{\"1\":{\"521\":1}}],[\"serial\",{\"1\":{\"401\":9,\"407\":1}}],[\"serial语义使单线程情况下\",{\"1\":{\"321\":1}}],[\"serial语义的存在\",{\"1\":{\"326\":1}}],[\"serial语义的编译器\",{\"1\":{\"321\":1}}],[\"serial语义的意思是\",{\"1\":{\"321\":1}}],[\"serial语义把单线程程序保护了起来\",{\"1\":{\"321\":1}}],[\"serial语义\",{\"1\":{\"321\":2}}],[\"serial又是什么\",{\"0\":{\"321\":1}}],[\"serial来约束\",{\"1\":{\"320\":1}}],[\"serialversionuid=1l\",{\"1\":{\"282\":1}}],[\"serialversionuid\",{\"1\":{\"282\":7}}],[\"serializable\",{\"1\":{\"261\":1,\"282\":2,\"519\":1,\"520\":1,\"810\":1}}],[\"servletserverhttpresponse\",{\"1\":{\"817\":3}}],[\"servletinvocablehandlermethod\",{\"1\":{\"817\":1}}],[\"servlet\",{\"1\":{\"815\":1}}],[\"servletrequestattributes\",{\"1\":{\"805\":2}}],[\"server根据配置的规则决定是否限流\",{\"1\":{\"861\":1}}],[\"server根据键查找对应的配置信息\",{\"1\":{\"842\":1}}],[\"server和token\",{\"1\":{\"861\":1}}],[\"server获取配置信息\",{\"1\":{\"842\":1}}],[\"server注册自己的配置信息\",{\"1\":{\"842\":1}}],[\"server注册时\",{\"1\":{\"838\":1}}],[\"server不再剔除注册表中的服务实例\",{\"1\":{\"838\":1}}],[\"server节点在一定时间内没有接收到心跳时\",{\"1\":{\"838\":1}}],[\"server实例发生故障时\",{\"1\":{\"838\":1}}],[\"server实例都会复制其他实例的注册信息\",{\"1\":{\"838\":1}}],[\"server实例部署在不同的节点上\",{\"1\":{\"838\":1}}],[\"server保证高可用\",{\"1\":{\"838\":1}}],[\"server怎么保证高可用\",{\"0\":{\"838\":1}}],[\"server会通知已注册的监听器\",{\"1\":{\"842\":1}}],[\"server会返回一个可用的服务实例列表给客户端\",{\"1\":{\"837\":1}}],[\"server会将这些信息保存在内存中\",{\"1\":{\"837\":1}}],[\"server在一定时间内没有收到某个服务实例的心跳\",{\"1\":{\"837\":1}}],[\"server发送请求\",{\"1\":{\"861\":1}}],[\"server发送查询请求\",{\"1\":{\"837\":1}}],[\"server发送心跳\",{\"1\":{\"837\":1}}],[\"server发送注册请求\",{\"1\":{\"837\":1}}],[\"serverhttpresponse\",{\"1\":{\"817\":1}}],[\"server即可\",{\"1\":{\"679\":1}}],[\"server\",{\"1\":{\"219\":1,\"221\":1,\"472\":2,\"481\":1,\"510\":5,\"556\":1,\"762\":1}}],[\"service1\",{\"1\":{\"811\":1}}],[\"servicex\",{\"1\":{\"811\":1}}],[\"service将调用该接口方法\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1}}],[\"service\",{\"1\":{\"64\":1,\"418\":1,\"614\":3,\"778\":3,\"784\":2,\"798\":1,\"828\":2,\"831\":1,\"848\":1,\"858\":1}}],[\"serbia\",{\"1\":{\"64\":1}}],[\"seven\",{\"1\":{\"64\":1}}],[\"sewing\",{\"1\":{\"64\":1}}],[\"seata确保了事务的一致性和恢复性\",{\"1\":{\"874\":1}}],[\"seata事务的执行流程可以简要概括为以下几个步骤\",{\"1\":{\"872\":1}}],[\"seata的事务回滚是通过回滚日志实现的\",{\"1\":{\"874\":1}}],[\"seata的事务回滚是怎么实现的\",{\"0\":{\"874\":1}}],[\"seata的事务执行流程是什么样的\",{\"0\":{\"872\":1}}],[\"seata的实现原理基于两阶段提交\",{\"1\":{\"871\":1}}],[\"seata的实现原理主要包括三个核心组件\",{\"1\":{\"871\":1}}],[\"seata提供了与saga模式兼容的saga框架\",{\"1\":{\"870\":1}}],[\"seata通过与数据库的xa事务协议进行交互\",{\"1\":{\"870\":1}}],[\"seata通过调用业务代码中的try\",{\"1\":{\"870\":1}}],[\"seata通过在业务代码中嵌入事务上下文\",{\"1\":{\"870\":1}}],[\"seata会拦截并解析业务代码中的sql语句\",{\"1\":{\"870\":1}}],[\"seata以下几种模式的分布式事务\",{\"1\":{\"870\":1}}],[\"seata支持哪些模式的分布式事务\",{\"0\":{\"870\":1}}],[\"seata\",{\"1\":{\"208\":2,\"831\":2,\"832\":1}}],[\"seat\",{\"1\":{\"64\":1}}],[\"seal\",{\"1\":{\"64\":1}}],[\"seedling\",{\"1\":{\"64\":1}}],[\"see\",{\"1\":{\"64\":1}}],[\"springrunner\",{\"1\":{\"821\":1}}],[\"springmvc\",{\"0\":{\"817\":1}}],[\"springapplication\",{\"1\":{\"822\":1}}],[\"springaop\",{\"1\":{\"804\":1}}],[\"springaction\",{\"1\":{\"795\":6}}],[\"springframework\",{\"1\":{\"793\":3,\"805\":1,\"813\":1,\"821\":3}}],[\"springbboot\",{\"1\":{\"784\":1}}],[\"springboottest\",{\"1\":{\"821\":1}}],[\"springbootapplication是一个复合注解\",{\"1\":{\"820\":1}}],[\"springboot\",{\"0\":{\"819\":1,\"820\":1,\"821\":1,\"822\":1},\"1\":{\"784\":1,\"805\":1,\"819\":2,\"820\":1,\"821\":3,\"822\":1,\"824\":1}}],[\"springbootdemo\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"springcloud也支持对多种配置中心的集成\",{\"1\":{\"841\":1}}],[\"springcloud可以选择哪些微服务链路追踪方案\",{\"0\":{\"868\":1}}],[\"springcloud可以选择哪些api网关\",{\"0\":{\"864\":1}}],[\"springcloud可以选择哪些配置中心\",{\"0\":{\"841\":1}}],[\"springcloud可以选择哪些注册中心\",{\"0\":{\"835\":1}}],[\"springcloud可以与多种注册中心进行集成\",{\"1\":{\"835\":1}}],[\"springcloud\",{\"0\":{\"824\":1},\"1\":{\"784\":1,\"824\":2}}],[\"spring5\",{\"1\":{\"782\":1,\"797\":1}}],[\"spring作为\",{\"1\":{\"782\":1}}],[\"spring面试题八股文\",{\"1\":{\"623\":1}}],[\"spring可以帮助我们创建线程安全的\",{\"1\":{\"435\":1}}],[\"spring\",{\"0\":{\"782\":1,\"783\":1,\"784\":1,\"785\":1,\"788\":1,\"792\":1,\"793\":1,\"796\":1,\"797\":1,\"798\":1,\"800\":1,\"807\":1,\"809\":1,\"810\":1,\"811\":1,\"815\":1,\"816\":1,\"818\":1,\"823\":1,\"865\":1},\"1\":{\"186\":1,\"227\":1,\"287\":1,\"289\":5,\"294\":1,\"373\":1,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"620\":1,\"623\":1,\"624\":1,\"664\":1,\"736\":1,\"778\":1,\"780\":2,\"782\":11,\"783\":13,\"784\":8,\"785\":9,\"788\":8,\"789\":4,\"790\":2,\"792\":1,\"793\":7,\"794\":2,\"795\":3,\"796\":9,\"797\":2,\"798\":2,\"799\":6,\"800\":2,\"802\":1,\"804\":3,\"805\":1,\"806\":1,\"807\":7,\"808\":3,\"809\":1,\"810\":1,\"811\":5,\"812\":1,\"813\":4,\"816\":1,\"817\":1,\"819\":19,\"820\":4,\"821\":3,\"824\":4,\"826\":1,\"830\":4,\"831\":8,\"832\":15,\"835\":1,\"841\":1,\"857\":3,\"864\":3,\"865\":2,\"868\":8,\"877\":2}}],[\"spoked\",{\"1\":{\"64\":1}}],[\"sponge\",{\"1\":{\"64\":1}}],[\"sports\",{\"1\":{\"64\":1}}],[\"spoon\",{\"1\":{\"64\":2}}],[\"spirng\",{\"1\":{\"819\":1}}],[\"spiral\",{\"1\":{\"64\":3}}],[\"spi\",{\"1\":{\"427\":3}}],[\"spinclock\",{\"1\":{\"325\":1}}],[\"spinfreq\",{\"1\":{\"325\":1}}],[\"spin\",{\"1\":{\"181\":1}}],[\"spider\",{\"1\":{\"64\":2}}],[\"splayed\",{\"1\":{\"64\":1}}],[\"speedboat\",{\"1\":{\"64\":1}}],[\"speech\",{\"1\":{\"64\":3}}],[\"speaker\",{\"1\":{\"64\":1}}],[\"speaking\",{\"1\":{\"64\":1}}],[\"speak\",{\"1\":{\"64\":1}}],[\"spades\",{\"1\":{\"64\":1}}],[\"sparkle\",{\"1\":{\"64\":1}}],[\"sparkles\",{\"1\":{\"64\":1}}],[\"sparkler\",{\"1\":{\"64\":1}}],[\"sparkling\",{\"1\":{\"64\":1}}],[\"spaghetti\",{\"1\":{\"64\":1}}],[\"space\",{\"1\":{\"64\":1,\"381\":1,\"657\":1}}],[\"subscriptiondata\",{\"1\":{\"778\":1}}],[\"subscribe\",{\"1\":{\"762\":2}}],[\"subscriber\",{\"1\":{\"743\":1}}],[\"substring\",{\"1\":{\"445\":1}}],[\"sub来进行消息的发布\",{\"1\":{\"722\":1}}],[\"sub机制\",{\"1\":{\"709\":1}}],[\"subquery\",{\"1\":{\"493\":7}}],[\"submit\",{\"1\":{\"357\":2,\"373\":1}}],[\"success\",{\"1\":{\"762\":1}}],[\"succ\",{\"1\":{\"325\":1}}],[\"supported\",{\"1\":{\"813\":1}}],[\"supports\",{\"1\":{\"813\":1}}],[\"supplier\",{\"1\":{\"292\":1}}],[\"suppresswarnings\",{\"1\":{\"181\":1}}],[\"super\",{\"1\":{\"310\":2,\"315\":1,\"365\":1}}],[\"supervillain\",{\"1\":{\"64\":3}}],[\"superhero\",{\"1\":{\"64\":3}}],[\"survivorratio=n\",{\"1\":{\"412\":1}}],[\"survivor\",{\"1\":{\"396\":6,\"400\":3,\"404\":1,\"412\":4}}],[\"survivor空间等名词\",{\"1\":{\"379\":1}}],[\"survivor空间\",{\"1\":{\"379\":1}}],[\"surprises\",{\"1\":{\"270\":1}}],[\"suriname\",{\"1\":{\"64\":1}}],[\"surfing\",{\"1\":{\"64\":2}}],[\"surfer\",{\"1\":{\"64\":1}}],[\"sudan\",{\"1\":{\"64\":2}}],[\"suspendpullrequest\",{\"1\":{\"778\":1}}],[\"suspendtimeoutmillislong\",{\"1\":{\"778\":1}}],[\"suspend\",{\"1\":{\"778\":1}}],[\"suspension\",{\"1\":{\"64\":1}}],[\"sushi\",{\"1\":{\"64\":1}}],[\"sun\",{\"1\":{\"64\":4,\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"sunny\",{\"1\":{\"64\":2}}],[\"sunset\",{\"1\":{\"64\":1}}],[\"sunrise\",{\"1\":{\"64\":3}}],[\"sunflower\",{\"1\":{\"64\":1}}],[\"sunglasses\",{\"1\":{\"64\":2}}],[\"suit\",{\"1\":{\"64\":1}}],[\"sum\",{\"1\":{\"13\":1,\"373\":4}}],[\"slave读\",{\"1\":{\"767\":1}}],[\"slave角色的broker只支持读\",{\"1\":{\"767\":1}}],[\"slave1\",{\"1\":{\"720\":1}}],[\"slave1<\",{\"1\":{\"720\":1}}],[\"slave3\",{\"1\":{\"720\":1}}],[\"slave2<\",{\"1\":{\"720\":1}}],[\"slave\",{\"1\":{\"527\":5,\"682\":1,\"684\":1,\"685\":1,\"720\":3,\"767\":4}}],[\"slowlog\",{\"1\":{\"718\":1}}],[\"slow\",{\"1\":{\"479\":1,\"586\":1}}],[\"slovakia\",{\"1\":{\"64\":1}}],[\"slovenia\",{\"1\":{\"64\":1}}],[\"slot\",{\"1\":{\"64\":1,\"695\":1,\"697\":1}}],[\"sloth\",{\"1\":{\"64\":1}}],[\"sleuth\",{\"1\":{\"831\":1,\"832\":1,\"868\":6}}],[\"sled\",{\"1\":{\"64\":1}}],[\"sleep\",{\"1\":{\"272\":1,\"302\":1,\"345\":2}}],[\"sleeping\",{\"1\":{\"64\":2}}],[\"sleepy\",{\"1\":{\"64\":1}}],[\"slightly\",{\"1\":{\"64\":2}}],[\"slider\",{\"1\":{\"64\":1}}],[\"slideend\",{\"1\":{\"43\":1}}],[\"slide\",{\"1\":{\"7\":1,\"31\":1,\"64\":1}}],[\"slidestart\",{\"1\":{\"4\":1}}],[\"sadd\",{\"1\":{\"724\":2}}],[\"sack\",{\"0\":{\"593\":1,\"594\":2},\"1\":{\"590\":2,\"592\":1,\"593\":3,\"594\":6}}],[\"save命令\",{\"1\":{\"676\":1}}],[\"save\",{\"1\":{\"348\":1,\"676\":1}}],[\"saga模式是一种基于事件驱动的分布式事务模式\",{\"1\":{\"870\":1}}],[\"saga模式\",{\"1\":{\"870\":1}}],[\"saga事务\",{\"1\":{\"201\":1}}],[\"sagittarius\",{\"1\":{\"64\":1}}],[\"safe能力\",{\"1\":{\"482\":1}}],[\"safepoint\",{\"1\":{\"402\":1}}],[\"safe\",{\"0\":{\"157\":1},\"1\":{\"157\":1}}],[\"safety\",{\"1\":{\"64\":2}}],[\"sao\",{\"1\":{\"64\":1}}],[\"sahara\",{\"1\":{\"64\":1}}],[\"samoa\",{\"1\":{\"64\":2}}],[\"sa\",{\"1\":{\"64\":1}}],[\"saw\",{\"1\":{\"64\":1}}],[\"saxophone\",{\"1\":{\"64\":1}}],[\"sari\",{\"1\":{\"64\":1}}],[\"sash\",{\"1\":{\"64\":1}}],[\"sassy\",{\"1\":{\"64\":2}}],[\"satchel\",{\"1\":{\"64\":1}}],[\"satellite\",{\"1\":{\"64\":2}}],[\"satisfied\",{\"1\":{\"64\":1}}],[\"sailboat\",{\"1\":{\"64\":1}}],[\"sake\",{\"1\":{\"64\":1}}],[\"salary\",{\"1\":{\"465\":2}}],[\"salad\",{\"1\":{\"64\":1}}],[\"salvador\",{\"1\":{\"64\":1}}],[\"salt\",{\"1\":{\"64\":1}}],[\"salute\",{\"1\":{\"64\":1}}],[\"saluting\",{\"1\":{\"64\":1}}],[\"san\",{\"1\":{\"64\":1}}],[\"sandal\",{\"1\":{\"64\":2}}],[\"sand\",{\"1\":{\"64\":1}}],[\"sandwich\",{\"1\":{\"64\":2}}],[\"santa\",{\"1\":{\"64\":1}}],[\"saudi\",{\"1\":{\"64\":1}}],[\"saucer\",{\"1\":{\"64\":1}}],[\"sauropod\",{\"1\":{\"64\":1}}],[\"sauna\",{\"1\":{\"64\":3}}],[\"shutdownnow\",{\"1\":{\"358\":2}}],[\"shutdown\",{\"1\":{\"348\":1,\"349\":1,\"357\":1,\"358\":3,\"367\":3}}],[\"shushing\",{\"1\":{\"64\":1}}],[\"show\",{\"1\":{\"479\":1,\"516\":1,\"538\":1}}],[\"shower\",{\"1\":{\"64\":1}}],[\"short\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"238\":2,\"239\":6,\"242\":1,\"263\":1,\"879\":1}}],[\"shorts\",{\"1\":{\"64\":1}}],[\"shoes\",{\"1\":{\"64\":1}}],[\"shoe\",{\"1\":{\"64\":4}}],[\"shopping\",{\"1\":{\"64\":2}}],[\"shift\",{\"1\":{\"181\":1}}],[\"shield\",{\"1\":{\"64\":1}}],[\"shirt\",{\"1\":{\"64\":2}}],[\"ship\",{\"1\":{\"64\":2}}],[\"shinto\",{\"1\":{\"64\":1}}],[\"shit\",{\"1\":{\"64\":1}}],[\"sheets\",{\"1\":{\"615\":1}}],[\"sheep\",{\"1\":{\"64\":1}}],[\"shell下执行kill\",{\"1\":{\"641\":2}}],[\"shell\",{\"1\":{\"64\":1}}],[\"sharding\",{\"1\":{\"533\":1}}],[\"shared\",{\"1\":{\"331\":1}}],[\"shark\",{\"1\":{\"64\":1}}],[\"shanghai\",{\"1\":{\"91\":1}}],[\"shape\",{\"1\":{\"64\":1}}],[\"shaved\",{\"1\":{\"64\":1}}],[\"shallow\",{\"1\":{\"64\":1}}],[\"shamrock\",{\"1\":{\"64\":1}}],[\"shaking\",{\"1\":{\"64\":1}}],[\"shrine\",{\"1\":{\"64\":1}}],[\"shrink\",{\"1\":{\"25\":1}}],[\"shrimp\",{\"1\":{\"64\":2}}],[\"shrugging\",{\"1\":{\"64\":2}}],[\"shrug\",{\"1\":{\"64\":1}}],[\"stdout\",{\"1\":{\"877\":1}}],[\"style\",{\"1\":{\"615\":1}}],[\"style>\",{\"1\":{\"76\":1}}],[\"stw\",{\"1\":{\"402\":1,\"404\":3}}],[\"stmt\",{\"1\":{\"389\":2,\"448\":4}}],[\"st\",{\"1\":{\"64\":7}}],[\"stock\",{\"1\":{\"725\":3}}],[\"stone\",{\"1\":{\"64\":1}}],[\"stopwatch\",{\"1\":{\"64\":1}}],[\"stop\",{\"0\":{\"402\":1},\"1\":{\"64\":2,\"367\":3,\"395\":1,\"401\":1,\"403\":2,\"404\":1}}],[\"store\",{\"1\":{\"64\":2,\"771\":2}}],[\"stethoscope\",{\"1\":{\"64\":1}}],[\"steam\",{\"1\":{\"64\":1}}],[\"stew\",{\"1\":{\"64\":1}}],[\"staff\",{\"1\":{\"491\":3}}],[\"stackleakbythread\",{\"1\":{\"388\":2}}],[\"stacks\",{\"1\":{\"379\":1}}],[\"stack\",{\"1\":{\"379\":1}}],[\"stack=2\",{\"1\":{\"266\":1}}],[\"staic\",{\"1\":{\"324\":1}}],[\"stamp\",{\"1\":{\"181\":1,\"336\":1}}],[\"standardization\",{\"1\":{\"542\":1}}],[\"standing\",{\"1\":{\"64\":3}}],[\"stanford\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"stat获取当前\",{\"1\":{\"718\":1}}],[\"status\",{\"1\":{\"516\":1}}],[\"statue\",{\"1\":{\"64\":1}}],[\"statements\",{\"1\":{\"451\":1}}],[\"statement>内\",{\"1\":{\"451\":1}}],[\"statementhandler\",{\"1\":{\"448\":4,\"453\":1}}],[\"statement\",{\"1\":{\"389\":2,\"448\":9}}],[\"state\",{\"1\":{\"193\":2,\"331\":2,\"333\":1,\"418\":1,\"444\":5}}],[\"staticfactorydao\",{\"1\":{\"795\":7}}],[\"staticfacotrydaoimpl\",{\"1\":{\"795\":1}}],[\"static<e>\",{\"1\":{\"285\":1}}],[\"static\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"166\":1,\"167\":1,\"169\":1,\"181\":1,\"252\":1,\"253\":4,\"254\":2,\"269\":3,\"270\":1,\"276\":6,\"282\":1,\"300\":4,\"308\":1,\"310\":1,\"312\":2,\"315\":1,\"324\":1,\"345\":3,\"348\":4,\"349\":3,\"362\":1,\"363\":1,\"364\":1,\"367\":5,\"373\":2,\"388\":3,\"389\":1,\"788\":1,\"790\":1,\"791\":1,\"793\":1,\"795\":1,\"805\":1,\"806\":2,\"859\":1,\"879\":1}}],[\"station\",{\"1\":{\"64\":1}}],[\"stadium\",{\"1\":{\"64\":1}}],[\"starttime\",{\"1\":{\"805\":2}}],[\"starter<\",{\"1\":{\"821\":2}}],[\"starter\",{\"1\":{\"805\":1,\"821\":5,\"872\":1}}],[\"started\",{\"1\":{\"778\":1}}],[\"startswithb\",{\"1\":{\"294\":1}}],[\"startswithb=\",{\"1\":{\"294\":1}}],[\"startswith\",{\"1\":{\"294\":6}}],[\"start\",{\"1\":{\"292\":2,\"300\":3,\"315\":1,\"320\":3,\"345\":10,\"373\":8,\"388\":1,\"445\":2,\"586\":1,\"762\":1,\"763\":1,\"805\":1}}],[\"star2\",{\"1\":{\"64\":1}}],[\"stars\",{\"1\":{\"64\":2}}],[\"star\",{\"1\":{\"64\":6}}],[\"stub\",{\"1\":{\"357\":1}}],[\"stuarray\",{\"1\":{\"88\":1,\"90\":5}}],[\"stulist\",{\"1\":{\"87\":1,\"89\":1}}],[\"stumap\",{\"1\":{\"86\":5,\"91\":1}}],[\"studio\",{\"1\":{\"64\":1}}],[\"studentservice\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"studentresultmap\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1}}],[\"studentmapper\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1}}],[\"student\",{\"1\":{\"64\":3,\"88\":1,\"89\":2,\"90\":4,\"454\":2}}],[\"stuffed\",{\"1\":{\"64\":1}}],[\"stuck\",{\"1\":{\"64\":3}}],[\"struts\",{\"1\":{\"782\":1}}],[\"struck\",{\"1\":{\"64\":1}}],[\"str2\",{\"0\":{\"265\":1}}],[\"str1\",{\"0\":{\"265\":1},\"1\":{\"265\":1}}],[\"strongly\",{\"1\":{\"392\":1}}],[\"strong\",{\"1\":{\"193\":1}}],[\"stream\",{\"0\":{\"294\":1},\"1\":{\"291\":4,\"294\":13}}],[\"strength\",{\"1\":{\"64\":1}}],[\"stretch\",{\"1\":{\"17\":1}}],[\"straight\",{\"1\":{\"64\":1}}],[\"straw\",{\"1\":{\"64\":1}}],[\"strawberry\",{\"1\":{\"64\":1}}],[\"stringpropertynames\",{\"1\":{\"788\":1}}],[\"stringcollection\",{\"1\":{\"294\":16}}],[\"stringcollection=new\",{\"1\":{\"294\":1}}],[\"stringarray\",{\"1\":{\"285\":1}}],[\"stringarray=\",{\"1\":{\"285\":1}}],[\"stringbuffer\",{\"0\":{\"264\":1},\"1\":{\"264\":2}}],[\"stringbuilder\",{\"0\":{\"264\":1},\"1\":{\"255\":2,\"264\":1,\"266\":15}}],[\"string\",{\"0\":{\"242\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":3,\"266\":1,\"270\":1},\"1\":{\"96\":1,\"137\":1,\"140\":1,\"147\":1,\"242\":1,\"251\":1,\"257\":2,\"263\":4,\"264\":5,\"265\":6,\"266\":14,\"267\":7,\"269\":1,\"270\":5,\"272\":2,\"276\":3,\"285\":2,\"294\":4,\"300\":5,\"315\":1,\"345\":2,\"348\":1,\"349\":4,\"373\":1,\"381\":1,\"388\":2,\"389\":1,\"413\":4,\"435\":1,\"436\":2,\"441\":2,\"448\":1,\"670\":1,\"763\":1,\"778\":1,\"788\":6,\"790\":2,\"791\":1,\"793\":7,\"795\":1,\"802\":2,\"805\":2,\"806\":2,\"820\":2,\"821\":1,\"847\":1,\"849\":1,\"858\":2,\"859\":2,\"879\":1}}],[\"string>\",{\"1\":{\"86\":1,\"91\":1}}],[\"strip\",{\"1\":{\"64\":1}}],[\"strike\",{\"1\":{\"25\":1}}],[\"0个\",{\"1\":{\"744\":1}}],[\"0时\",{\"1\":{\"719\":2}}],[\"0的多线程是用多线程来处理数据的读写和协议解析\",{\"1\":{\"674\":1}}],[\"0成了多线程的\",{\"1\":{\"674\":1}}],[\"0使用多线程是怎么回事\",{\"0\":{\"674\":1}}],[\"0~1023\",{\"1\":{\"664\":1}}],[\"08\",{\"0\":{\"637\":1}}],[\"06\",{\"0\":{\"635\":1}}],[\"05\",{\"0\":{\"633\":1},\"1\":{\"556\":1}}],[\"04\",{\"0\":{\"632\":1},\"1\":{\"519\":1}}],[\"02\",{\"0\":{\"629\":1},\"1\":{\"519\":1}}],[\"07\",{\"0\":{\"636\":1},\"1\":{\"463\":1}}],[\"03\",{\"0\":{\"631\":1},\"1\":{\"463\":1,\"519\":1}}],[\"09\",{\"0\":{\"638\":1},\"1\":{\"463\":1}}],[\"0>\",{\"1\":{\"458\":1}}],[\"0x0000000000000000\",{\"1\":{\"418\":1}}],[\"0x61c88647\",{\"1\":{\"312\":1}}],[\"00\",{\"1\":{\"329\":1,\"463\":5,\"556\":2}}],[\"000000\",{\"1\":{\"463\":2}}],[\"00000006\",{\"1\":{\"172\":1}}],[\"0000\",{\"1\":{\"167\":7}}],[\"01\",{\"0\":{\"628\":1},\"1\":{\"328\":1,\"463\":6,\"491\":2,\"519\":1}}],[\"0d\",{\"1\":{\"238\":1}}],[\"0f\",{\"1\":{\"238\":1}}],[\"0l\",{\"1\":{\"238\":1,\"362\":1,\"363\":1}}],[\"0️⃣\",{\"1\":{\"64\":1}}],[\"0\",{\"0\":{\"558\":2,\"680\":1},\"1\":{\"13\":1,\"89\":1,\"90\":1,\"137\":2,\"140\":2,\"147\":2,\"164\":2,\"166\":1,\"169\":1,\"181\":6,\"238\":3,\"245\":1,\"256\":1,\"266\":1,\"269\":1,\"272\":1,\"276\":1,\"293\":1,\"314\":1,\"321\":1,\"322\":1,\"325\":8,\"333\":1,\"348\":1,\"364\":1,\"365\":1,\"367\":1,\"373\":1,\"429\":3,\"436\":1,\"445\":2,\"454\":1,\"458\":1,\"469\":1,\"473\":1,\"477\":1,\"483\":1,\"489\":1,\"556\":3,\"558\":6,\"560\":1,\"582\":2,\"591\":2,\"603\":1,\"622\":3,\"641\":4,\"645\":2,\"658\":2,\"660\":1,\"673\":1,\"680\":1,\"695\":2,\"724\":11,\"725\":1,\"730\":2,\"731\":3,\"732\":1,\"762\":1,\"763\":1,\"793\":1,\"813\":1,\"821\":1,\"879\":2}}],[\"ttl\",{\"1\":{\"717\":1}}],[\"tddl\",{\"1\":{\"526\":1}}],[\"tda\",{\"1\":{\"418\":1}}],[\"t3\",{\"1\":{\"513\":1}}],[\"tx\",{\"1\":{\"448\":2}}],[\"txt\",{\"1\":{\"418\":1}}],[\"tlb\",{\"1\":{\"655\":1}}],[\"tls\",{\"1\":{\"559\":3,\"561\":2,\"562\":2}}],[\"tlab\",{\"1\":{\"384\":1}}],[\"tl1正在等待\",{\"1\":{\"342\":1,\"647\":1}}],[\"tn\",{\"1\":{\"342\":2,\"647\":2}}],[\"t2用的资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"t2\",{\"1\":{\"342\":1,\"513\":1,\"544\":1,\"647\":1}}],[\"t1\",{\"1\":{\"342\":2,\"513\":1,\"647\":2}}],[\"t0占用的资源\",{\"1\":{\"342\":1,\"647\":1}}],[\"t0\",{\"1\":{\"342\":2,\"647\":2}}],[\"t线程还在同步代码块中\",{\"1\":{\"328\":1}}],[\"t线程已经退出同步代码块\",{\"1\":{\"328\":1}}],[\"typehandler有两个作用\",{\"1\":{\"438\":1}}],[\"type=\",{\"1\":{\"437\":1,\"441\":2}}],[\"type\",{\"1\":{\"263\":2,\"285\":1,\"450\":4,\"453\":1,\"488\":3,\"493\":4,\"556\":1}}],[\"typora进行图像设置\",{\"0\":{\"116\":1}}],[\"typoraio\",{\"1\":{\"115\":1}}],[\"typora\",{\"0\":{\"115\":1},\"1\":{\"115\":1}}],[\"typora+picgo设置\",{\"0\":{\"114\":1}}],[\"tcp\",{\"0\":{\"567\":1,\"568\":1,\"569\":1,\"574\":1,\"575\":1,\"576\":1,\"580\":1,\"581\":1,\"582\":1,\"583\":1,\"585\":1,\"590\":1,\"595\":1,\"597\":1},\"1\":{\"542\":3,\"546\":5,\"548\":1,\"555\":3,\"558\":3,\"559\":2,\"560\":14,\"561\":3,\"562\":1,\"568\":4,\"569\":2,\"573\":3,\"574\":1,\"577\":2,\"578\":1,\"579\":4,\"580\":14,\"581\":12,\"582\":2,\"583\":5,\"584\":6,\"585\":3,\"586\":1,\"591\":2,\"592\":3,\"593\":2,\"594\":1,\"595\":13,\"596\":1,\"597\":4,\"598\":3,\"600\":4,\"602\":3,\"609\":1,\"836\":2}}],[\"tc\",{\"1\":{\"208\":9}}],[\"tcc模式是一种基于补偿机制的分布式事务模式\",{\"1\":{\"870\":1}}],[\"tcc了解吗\",{\"0\":{\"204\":1}}],[\"tcc\",{\"1\":{\"201\":1,\"204\":4,\"870\":1}}],[\"tm\",{\"1\":{\"64\":1,\"202\":1,\"208\":3}}],[\"twitter\",{\"1\":{\"534\":1,\"868\":1}}],[\"twisted\",{\"1\":{\"64\":1}}],[\"two\",{\"1\":{\"64\":4,\"870\":1,\"871\":1}}],[\"tv\",{\"1\":{\"64\":1}}],[\"tshirt\",{\"1\":{\"64\":1}}],[\"targetclass\",{\"1\":{\"813\":1}}],[\"target\",{\"1\":{\"804\":1,\"805\":1,\"806\":13}}],[\"tagc\",{\"1\":{\"762\":1}}],[\"tagb\",{\"1\":{\"762\":1}}],[\"taga\",{\"1\":{\"762\":1}}],[\"tag\",{\"1\":{\"670\":1,\"744\":5,\"762\":1}}],[\"taobao\",{\"1\":{\"526\":1}}],[\"take\",{\"1\":{\"365\":1}}],[\"takeout\",{\"1\":{\"64\":1}}],[\"tail\",{\"1\":{\"331\":1}}],[\"taiwan\",{\"1\":{\"64\":1}}],[\"task=new\",{\"1\":{\"300\":1}}],[\"task\",{\"1\":{\"300\":3,\"373\":2}}],[\"tablejd\",{\"1\":{\"531\":1}}],[\"table>执行笛卡儿积\",{\"1\":{\"470\":1}}],[\"table>和右表<right\",{\"1\":{\"470\":1}}],[\"table该位置key相同就返回\",{\"1\":{\"181\":1}}],[\"tablesizefor\",{\"1\":{\"169\":3}}],[\"table\",{\"1\":{\"164\":1,\"167\":1,\"181\":5,\"312\":2,\"314\":1,\"466\":1,\"477\":2,\"488\":5,\"489\":2,\"493\":1,\"509\":1,\"531\":1}}],[\"tab\",{\"1\":{\"164\":5,\"181\":17,\"314\":3}}],[\"tabs\",{\"1\":{\"64\":1}}],[\"tajikistan\",{\"1\":{\"64\":1}}],[\"taurus\",{\"1\":{\"64\":1}}],[\"tanzania\",{\"1\":{\"64\":1}}],[\"tanabata\",{\"1\":{\"64\":1}}],[\"tangerine\",{\"1\":{\"64\":1}}],[\"tada\",{\"1\":{\"64\":1}}],[\"taxi\",{\"1\":{\"64\":2}}],[\"tamale\",{\"1\":{\"64\":1}}],[\"taco\",{\"1\":{\"64\":1}}],[\"tuvalu\",{\"1\":{\"64\":1}}],[\"tunisia\",{\"1\":{\"64\":1}}],[\"tube\",{\"1\":{\"64\":1}}],[\"tumbler\",{\"1\":{\"64\":1}}],[\"tulip\",{\"1\":{\"64\":1}}],[\"turkmenistan\",{\"1\":{\"64\":1}}],[\"turks\",{\"1\":{\"64\":1}}],[\"turkey\",{\"1\":{\"64\":1}}],[\"turtle\",{\"1\":{\"64\":1}}],[\"turban\",{\"1\":{\"64\":3}}],[\"tuxedo\",{\"1\":{\"64\":3}}],[\"tid=0x00007fbe2c164000\",{\"1\":{\"418\":1}}],[\"tidying\",{\"1\":{\"367\":3}}],[\"title\",{\"1\":{\"74\":1,\"444\":9}}],[\"timout\",{\"1\":{\"302\":1}}],[\"timor\",{\"1\":{\"64\":1}}],[\"timestamp\",{\"0\":{\"463\":1},\"1\":{\"443\":1,\"463\":6,\"515\":1}}],[\"timeunit\",{\"1\":{\"345\":1,\"349\":1,\"352\":1,\"354\":7,\"362\":1,\"363\":1,\"364\":1}}],[\"time\",{\"0\":{\"578\":1,\"579\":1},\"1\":{\"303\":1,\"443\":1,\"479\":1,\"560\":2,\"574\":1,\"576\":1,\"578\":4,\"579\":6,\"591\":2,\"698\":1,\"726\":1,\"805\":1,\"807\":2,\"858\":1}}],[\"timeout时间内通信一直失败\",{\"1\":{\"698\":1}}],[\"timeout时间\",{\"1\":{\"685\":1}}],[\"timeout\",{\"1\":{\"222\":1,\"272\":3,\"302\":4,\"345\":1,\"349\":1,\"560\":1,\"591\":1}}],[\"timer\",{\"1\":{\"64\":1,\"577\":1}}],[\"ticket\",{\"1\":{\"64\":1}}],[\"tickets\",{\"1\":{\"64\":1}}],[\"tiger2\",{\"1\":{\"64\":1}}],[\"tiger\",{\"1\":{\"64\":1}}],[\"tipping\",{\"1\":{\"64\":3}}],[\"tired\",{\"1\":{\"64\":1}}],[\"totalmessagestosend\",{\"1\":{\"763\":2}}],[\"todo\",{\"1\":{\"357\":1}}],[\"touppercase\",{\"1\":{\"294\":1}}],[\"to\",{\"1\":{\"267\":3,\"379\":1,\"394\":1,\"399\":1,\"418\":1,\"450\":1,\"859\":1}}],[\"tostring\",{\"1\":{\"266\":2,\"272\":1,\"445\":1,\"805\":1}}],[\"tolerance\",{\"1\":{\"190\":2}}],[\"tonumber\",{\"1\":{\"725\":2}}],[\"tony\",{\"1\":{\"89\":1}}],[\"tonga\",{\"1\":{\"64\":1}}],[\"tongue\",{\"1\":{\"64\":4}}],[\"tobago\",{\"1\":{\"64\":1}}],[\"token存储\",{\"1\":{\"669\":1}}],[\"token\",{\"1\":{\"613\":5,\"849\":1,\"861\":1}}],[\"token机制\",{\"1\":{\"225\":1}}],[\"tokelau\",{\"1\":{\"64\":1}}],[\"tokyo\",{\"1\":{\"64\":1}}],[\"togo\",{\"1\":{\"64\":1}}],[\"together\",{\"1\":{\"64\":1}}],[\"tomact\",{\"1\":{\"429\":1}}],[\"tomato\",{\"1\":{\"64\":1}}],[\"tomcat\",{\"0\":{\"429\":1},\"1\":{\"429\":4,\"819\":2}}],[\"tom\",{\"1\":{\"90\":1}}],[\"tome\",{\"1\":{\"64\":1}}],[\"topictest\",{\"1\":{\"762\":1}}],[\"topic全局消息有序\",{\"1\":{\"761\":1}}],[\"topic下所有的消息\",{\"1\":{\"744\":1}}],[\"topic\",{\"1\":{\"743\":1,\"744\":11,\"748\":4,\"749\":1,\"759\":1,\"761\":2,\"762\":1,\"764\":1,\"766\":1,\"767\":2,\"771\":2,\"778\":2}}],[\"topicsubscribeinfotable中\",{\"1\":{\"777\":1}}],[\"topics\",{\"1\":{\"673\":1}}],[\"topology\",{\"1\":{\"76\":3}}],[\"top\",{\"1\":{\"64\":1,\"410\":1,\"414\":2,\"418\":1,\"538\":1}}],[\"tophat\",{\"1\":{\"64\":1}}],[\"toilet\",{\"1\":{\"64\":1}}],[\"tools是由python写的用来分析redis的rdb快照文件用的工具\",{\"1\":{\"719\":1}}],[\"tools\",{\"1\":{\"719\":1}}],[\"toolbox\",{\"1\":{\"64\":1}}],[\"toothbrush\",{\"1\":{\"64\":1}}],[\"tooth\",{\"1\":{\"64\":1}}],[\"tornado\",{\"1\":{\"64\":1}}],[\"tower\",{\"1\":{\"64\":1}}],[\"tecent项目\",{\"1\":{\"831\":1}}],[\"technologist\",{\"1\":{\"64\":3}}],[\"template\",{\"1\":{\"785\":1,\"849\":2}}],[\"temple\",{\"1\":{\"64\":1}}],[\"temporary\",{\"1\":{\"493\":1}}],[\"temp\",{\"1\":{\"245\":1}}],[\"temp=count\",{\"1\":{\"245\":1}}],[\"temp=i\",{\"1\":{\"245\":1}}],[\"terminated\",{\"1\":{\"303\":1,\"367\":4}}],[\"term\",{\"1\":{\"221\":1}}],[\"territories\",{\"1\":{\"64\":2}}],[\"territory\",{\"1\":{\"64\":1}}],[\"telescope\",{\"1\":{\"64\":1}}],[\"telephone\",{\"1\":{\"64\":2}}],[\"testtopic\",{\"1\":{\"763\":1}}],[\"testbatch\",{\"1\":{\"445\":1}}],[\"test1\",{\"1\":{\"276\":4}}],[\"test=\",{\"1\":{\"87\":3,\"88\":4,\"89\":4,\"90\":5,\"91\":1,\"444\":10}}],[\"test\",{\"1\":{\"64\":1,\"276\":2,\"429\":1,\"445\":1,\"489\":5,\"491\":1,\"788\":2,\"813\":2,\"821\":1}}],[\"teddy\",{\"1\":{\"64\":1}}],[\"ten\",{\"1\":{\"64\":1}}],[\"tennis\",{\"1\":{\"64\":1}}],[\"tent\",{\"1\":{\"64\":2}}],[\"tea\",{\"1\":{\"64\":2}}],[\"teapot\",{\"1\":{\"64\":1}}],[\"teacher\",{\"1\":{\"64\":3}}],[\"tears\",{\"1\":{\"64\":1}}],[\"tear\",{\"1\":{\"64\":1}}],[\"textfield\",{\"1\":{\"72\":1}}],[\"text\",{\"0\":{\"462\":1},\"1\":{\"16\":1,\"72\":1,\"462\":2,\"466\":1,\"556\":1}}],[\"tex\",{\"1\":{\"13\":1}}],[\"thu\",{\"1\":{\"556\":1}}],[\"thumbsdown\",{\"1\":{\"64\":1}}],[\"thumbsup\",{\"1\":{\"64\":1}}],[\"thumb\",{\"1\":{\"64\":1}}],[\"thrift等\",{\"1\":{\"845\":1}}],[\"throw\",{\"1\":{\"275\":3,\"450\":3,\"802\":2,\"859\":1}}],[\"throwable是\",{\"1\":{\"274\":1}}],[\"throwable\",{\"1\":{\"272\":1,\"274\":1,\"388\":1,\"450\":2,\"453\":2,\"778\":1,\"802\":1,\"805\":4,\"806\":2}}],[\"throws\",{\"1\":{\"270\":1,\"272\":5,\"275\":3,\"300\":1,\"345\":2,\"388\":1,\"445\":1,\"448\":7,\"450\":1,\"453\":2,\"793\":5,\"805\":4,\"806\":2,\"813\":3}}],[\"thredloca\",{\"1\":{\"798\":1}}],[\"threshold\",{\"1\":{\"164\":1,\"169\":2,\"173\":1,\"177\":1,\"314\":6,\"373\":2,\"586\":1}}],[\"threadspool\",{\"1\":{\"357\":1}}],[\"threadfactory\",{\"1\":{\"353\":1,\"354\":1,\"362\":3,\"363\":3,\"364\":3}}],[\"threadpoolexecutor\",{\"1\":{\"362\":1,\"363\":1,\"364\":1}}],[\"threadpool\",{\"1\":{\"348\":3,\"349\":4}}],[\"threadb\",{\"1\":{\"320\":1}}],[\"thread的引用\",{\"1\":{\"311\":1}}],[\"threadlocalhashcode\",{\"1\":{\"312\":1}}],[\"threadlocal本身不存储值\",{\"1\":{\"310\":1}}],[\"threadlocals\",{\"1\":{\"310\":1}}],[\"threadlocal实现的秘密都在这个threadlocalmap了\",{\"1\":{\"310\":1}}],[\"threadlocalmap扩容机制了解吗\",{\"0\":{\"314\":1}}],[\"threadlocalmap没有使用链表\",{\"1\":{\"313\":1}}],[\"threadlocalmap怎么解决hash冲突的\",{\"0\":{\"313\":1}}],[\"threadlocalmap用的是哈希取余法\",{\"1\":{\"312\":1}}],[\"threadlocalmap虽然被叫做map\",{\"1\":{\"312\":1}}],[\"threadlocalmap中使用的\",{\"1\":{\"311\":1}}],[\"threadlocalmap内部维护着entry数组\",{\"1\":{\"310\":1}}],[\"threadlocalmap的结构了解吗\",{\"0\":{\"312\":1}}],[\"threadlocalmap的key没了\",{\"1\":{\"311\":1}}],[\"threadlocalmap的key\",{\"1\":{\"311\":1}}],[\"threadlocalmap的实例变量threadlocals\",{\"1\":{\"310\":1}}],[\"threadlocalmap的成员变量threadlocals\",{\"1\":{\"310\":1}}],[\"threadlocalmap既然被称为map\",{\"1\":{\"310\":1}}],[\"threadlocalmap是thread的属性\",{\"1\":{\"310\":1}}],[\"threadlocalmap\",{\"1\":{\"310\":2,\"315\":1}}],[\"threadlocal怎么实现的呢\",{\"0\":{\"310\":1}}],[\"threadlocal<\",{\"1\":{\"310\":1}}],[\"threadlocal<>\",{\"1\":{\"308\":1}}],[\"threadlocal<string>\",{\"1\":{\"308\":1,\"311\":1}}],[\"threadlocal是什么\",{\"0\":{\"308\":1}}],[\"threadlocal其实应用场景不是很多\",{\"1\":{\"307\":1}}],[\"threadlocal\",{\"0\":{\"307\":1,\"311\":1},\"1\":{\"306\":1,\"308\":1,\"310\":3,\"311\":2,\"315\":6,\"389\":3,\"798\":3,\"811\":1}}],[\"thread类有一个类型为threadlocal\",{\"1\":{\"310\":1}}],[\"thread类中的静态方法\",{\"1\":{\"302\":2}}],[\"thread类也提供了一个方法用于等待的方法\",{\"1\":{\"302\":1}}],[\"threadtest\",{\"1\":{\"300\":1}}],[\"thread\",{\"1\":{\"64\":1,\"181\":1,\"292\":4,\"300\":6,\"310\":3,\"315\":2,\"345\":22,\"348\":3,\"352\":1,\"384\":1,\"388\":4,\"418\":2,\"427\":2,\"858\":1}}],[\"three\",{\"1\":{\"64\":2}}],[\"this|object\",{\"1\":{\"324\":1}}],[\"this\",{\"0\":{\"251\":1},\"1\":{\"169\":2,\"181\":2,\"251\":6,\"257\":1,\"267\":3,\"285\":1,\"300\":1,\"310\":2,\"315\":1,\"324\":1,\"341\":3,\"373\":2,\"393\":1,\"448\":10,\"450\":22,\"778\":15,\"788\":1,\"793\":2,\"795\":4,\"802\":3,\"806\":3,\"813\":1,\"820\":8}}],[\"thinking\",{\"1\":{\"64\":1}}],[\"thailand\",{\"1\":{\"64\":1}}],[\"thong\",{\"1\":{\"64\":1}}],[\"thought\",{\"1\":{\"64\":1}}],[\"the\",{\"0\":{\"402\":1},\"1\":{\"64\":1,\"267\":6,\"310\":1,\"383\":1,\"395\":1,\"401\":1,\"402\":1,\"403\":2,\"404\":1,\"450\":1}}],[\"thermometer\",{\"1\":{\"64\":2}}],[\"then\",{\"1\":{\"23\":2,\"267\":1,\"725\":4}}],[\"theta\",{\"1\":{\"13\":2}}],[\"t\",{\"1\":{\"64\":2,\"285\":6,\"306\":1,\"310\":6,\"315\":2,\"328\":1,\"450\":3,\"454\":2,\"510\":1,\"513\":4,\"813\":1,\"861\":1}}],[\"trx\",{\"1\":{\"523\":17}}],[\"tryacquire\",{\"1\":{\"333\":2}}],[\"trydemo\",{\"1\":{\"276\":3}}],[\"try\",{\"1\":{\"181\":1,\"204\":3,\"256\":1,\"275\":3,\"276\":6,\"300\":1,\"311\":1,\"332\":1,\"345\":2,\"348\":1,\"349\":2,\"357\":1,\"373\":1,\"389\":1,\"445\":1,\"448\":1,\"450\":2,\"778\":1,\"788\":2,\"802\":1,\"813\":2,\"870\":1}}],[\"tr\",{\"1\":{\"64\":1}}],[\"trip\",{\"1\":{\"591\":2,\"726\":1}}],[\"trim\",{\"1\":{\"444\":1}}],[\"trinidad\",{\"1\":{\"64\":1}}],[\"tristan\",{\"1\":{\"64\":1}}],[\"triangle\",{\"1\":{\"64\":2}}],[\"triangular\",{\"1\":{\"64\":2}}],[\"trident\",{\"1\":{\"64\":1}}],[\"triumph\",{\"1\":{\"64\":1}}],[\"trend\",{\"1\":{\"64\":2}}],[\"treemap\",{\"0\":{\"184\":1},\"1\":{\"182\":1,\"184\":2}}],[\"treeifybin\",{\"1\":{\"164\":1}}],[\"tree加载完成后运行\",{\"0\":{\"73\":1}}],[\"tree显示的text文本\",{\"1\":{\"72\":1}}],[\"tree绑定的value值\",{\"1\":{\"72\":1}}],[\"tree\",{\"0\":{\"70\":1},\"1\":{\"50\":1,\"64\":5,\"73\":12,\"74\":5,\"76\":3,\"504\":4}}],[\"truncate\",{\"0\":{\"467\":1},\"1\":{\"467\":2}}],[\"true\",{\"1\":{\"72\":2,\"137\":1,\"140\":1,\"147\":1,\"241\":2,\"257\":1,\"258\":1,\"267\":1,\"269\":1,\"272\":2,\"293\":1,\"294\":3,\"333\":2,\"388\":3,\"443\":1,\"444\":1,\"727\":3,\"848\":1,\"879\":1}}],[\"trumpet\",{\"1\":{\"64\":1}}],[\"truck\",{\"1\":{\"64\":2}}],[\"translation\",{\"1\":{\"655\":1}}],[\"transactionattribute\",{\"1\":{\"813\":1}}],[\"transactional\",{\"1\":{\"784\":2,\"809\":1,\"812\":1,\"813\":13}}],[\"transactioninterceptor\",{\"1\":{\"813\":1}}],[\"transactiondefinition\",{\"1\":{\"810\":1,\"813\":3}}],[\"transactiontemplate\",{\"1\":{\"809\":1}}],[\"transactions\",{\"1\":{\"726\":1}}],[\"transactionfactory\",{\"1\":{\"448\":3}}],[\"transaction\",{\"1\":{\"202\":1,\"208\":2,\"813\":2,\"871\":6,\"872\":3}}],[\"transfer\",{\"1\":{\"181\":1,\"845\":1}}],[\"transferindex\",{\"1\":{\"181\":1}}],[\"transient\",{\"1\":{\"282\":3}}],[\"transient关键字的作用是让被修饰的成员属性不被序列化\",{\"1\":{\"156\":1}}],[\"transition\",{\"1\":{\"31\":3}}],[\"transgender\",{\"1\":{\"64\":2}}],[\"trap\",{\"1\":{\"64\":1}}],[\"tray\",{\"1\":{\"64\":2}}],[\"traffic\",{\"1\":{\"64\":2}}],[\"trackball\",{\"1\":{\"64\":1}}],[\"track\",{\"1\":{\"64\":3}}],[\"tractor\",{\"1\":{\"64\":1}}],[\"train\",{\"1\":{\"64\":1}}],[\"train2\",{\"1\":{\"64\":1}}],[\"tramway\",{\"1\":{\"64\":1}}],[\"tram\",{\"1\":{\"64\":1}}],[\"trophy\",{\"1\":{\"64\":1}}],[\"tropical\",{\"1\":{\"64\":2}}],[\"trolleybus\",{\"1\":{\"64\":1}}],[\"troll\",{\"1\":{\"64\":1}}],[\"jndi\",{\"1\":{\"427\":1}}],[\"jni\",{\"1\":{\"391\":1}}],[\"jvisualvm\",{\"1\":{\"417\":1,\"418\":1}}],[\"jvm先检查对象markword是否指向当前线程栈帧中的锁记录\",{\"1\":{\"329\":1}}],[\"jvm使用cas操作将对象头markword更新为指向锁记录的指针\",{\"1\":{\"329\":1}}],[\"jvm会判断是否已经时重量级锁\",{\"1\":{\"329\":1}}],[\"jvm会正常退出\",{\"1\":{\"305\":1}}],[\"jvm采用acc\",{\"1\":{\"325\":1}}],[\"jvm采用monitorenter\",{\"1\":{\"325\":1}}],[\"jvm退出\",{\"1\":{\"305\":1}}],[\"jvm执行start方法\",{\"1\":{\"301\":1}}],[\"jvm执行java程序\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"jvm等等\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"jvm\",{\"0\":{\"233\":1,\"377\":1,\"379\":1,\"384\":2,\"409\":1,\"412\":1,\"413\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"186\":1,\"227\":1,\"233\":4,\"236\":1,\"245\":1,\"259\":1,\"276\":1,\"285\":1,\"289\":1,\"294\":1,\"305\":1,\"307\":1,\"373\":1,\"375\":1,\"377\":4,\"379\":3,\"382\":1,\"384\":1,\"388\":1,\"389\":2,\"413\":5,\"417\":5,\"422\":2,\"429\":1,\"454\":1,\"538\":1,\"617\":1,\"620\":1,\"623\":1,\"624\":1,\"664\":1,\"736\":1,\"778\":1,\"804\":1,\"824\":1,\"877\":1,\"879\":2}}],[\"jconsole\",{\"1\":{\"411\":1}}],[\"jcmd\",{\"1\":{\"410\":1}}],[\"jhat\",{\"1\":{\"410\":1,\"418\":3}}],[\"jinfo\",{\"1\":{\"410\":1}}],[\"jit\",{\"1\":{\"408\":2}}],[\"jigsaw\",{\"1\":{\"64\":1}}],[\"jmap\",{\"1\":{\"399\":1,\"410\":1,\"415\":2,\"417\":4,\"418\":4}}],[\"jmm属于语言级的内存模型\",{\"1\":{\"319\":1}}],[\"jmm只能保证基本的原子性\",{\"1\":{\"318\":1}}],[\"jmm的很多技术都是围绕着这三大特性展开\",{\"1\":{\"318\":1}}],[\"jmm定义了线程和主内存之间的抽象关系\",{\"1\":{\"317\":1}}],[\"jmm\",{\"0\":{\"317\":1},\"1\":{\"317\":1}}],[\"jrockit\",{\"1\":{\"381\":4}}],[\"jre提供的加载类的路径\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"jre\",{\"0\":{\"233\":1},\"1\":{\"137\":1,\"140\":1,\"147\":1,\"233\":4,\"285\":1,\"879\":1}}],[\"j9\",{\"1\":{\"381\":2}}],[\"js\",{\"1\":{\"560\":1,\"868\":1}}],[\"jstat\",{\"1\":{\"410\":2,\"415\":1,\"417\":2,\"418\":1}}],[\"jstack\",{\"1\":{\"343\":1,\"410\":1,\"414\":1,\"418\":1}}],[\"jsongenerator\",{\"1\":{\"817\":1}}],[\"json\",{\"1\":{\"283\":3,\"784\":1,\"816\":1,\"817\":2,\"819\":1,\"845\":1}}],[\"jshell>\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"jshell工具\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"j++\",{\"1\":{\"269\":1,\"314\":1}}],[\"jdo\",{\"1\":{\"783\":1}}],[\"jdbctemplate\",{\"1\":{\"785\":1}}],[\"jdbctype=\",{\"1\":{\"443\":1}}],[\"jdbc批处理不支持select\",{\"1\":{\"451\":1}}],[\"jdbc编程有哪些不足之处\",{\"1\":{\"433\":1}}],[\"jdbc\",{\"1\":{\"389\":1,\"427\":2,\"433\":2,\"533\":1,\"782\":2,\"783\":2}}],[\"jdb\",{\"1\":{\"233\":1}}],[\"jdkdynamicaopproxy\",{\"1\":{\"813\":1}}],[\"jdk5\",{\"1\":{\"285\":1}}],[\"jdk7~jdk9\",{\"1\":{\"252\":1}}],[\"jdk9\",{\"1\":{\"252\":1}}],[\"jdk8\",{\"1\":{\"252\":1}}],[\"jdk1\",{\"0\":{\"175\":1,\"290\":1,\"291\":1,\"380\":1},\"1\":{\"161\":3,\"175\":2,\"177\":2,\"181\":1,\"280\":2,\"290\":1,\"291\":1,\"379\":1,\"380\":4,\"406\":1}}],[\"jdk安装与配置\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"jdk\",{\"0\":{\"233\":1,\"806\":1},\"1\":{\"137\":4,\"140\":4,\"147\":4,\"177\":4,\"233\":2,\"252\":3,\"267\":1,\"272\":1,\"280\":2,\"285\":1,\"290\":1,\"292\":1,\"353\":2,\"381\":4,\"388\":1,\"392\":3,\"407\":1,\"410\":1,\"411\":1,\"417\":1,\"418\":1,\"427\":3,\"782\":1,\"804\":1,\"806\":8,\"807\":1,\"812\":2,\"879\":4}}],[\"j2ee\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"j2me\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"jprofiler\",{\"1\":{\"411\":1,\"413\":2,\"418\":1}}],[\"jps\",{\"1\":{\"343\":1,\"410\":1,\"418\":1}}],[\"jp\",{\"1\":{\"64\":1}}],[\"jetty\",{\"1\":{\"819\":1}}],[\"jersey\",{\"1\":{\"64\":1}}],[\"jeans\",{\"1\":{\"64\":1}}],[\"jellyfish\",{\"1\":{\"64\":1}}],[\"johnson\",{\"1\":{\"782\":1}}],[\"jourwon\",{\"1\":{\"436\":1,\"437\":2,\"440\":1,\"445\":1}}],[\"joinpoint\",{\"1\":{\"804\":1,\"805\":5}}],[\"joins\",{\"1\":{\"459\":1}}],[\"join框架应用的例子\",{\"1\":{\"373\":1}}],[\"join框架的定义\",{\"1\":{\"373\":1}}],[\"join框架\",{\"1\":{\"373\":1}}],[\"join框架是java7提供的一个用于并行执行任务的框架\",{\"1\":{\"373\":1}}],[\"join框架了解吗\",{\"0\":{\"373\":1}}],[\"join\",{\"0\":{\"490\":1},\"1\":{\"302\":3,\"306\":3,\"320\":3,\"373\":2,\"441\":2,\"458\":3,\"459\":3,\"470\":4,\"490\":8,\"497\":1,\"534\":4}}],[\"josh\",{\"1\":{\"291\":1}}],[\"jordan\",{\"1\":{\"64\":1}}],[\"joker\",{\"1\":{\"64\":1}}],[\"joystick\",{\"1\":{\"64\":1}}],[\"joy\",{\"1\":{\"64\":2}}],[\"junit\",{\"1\":{\"782\":1}}],[\"just\",{\"1\":{\"181\":1}}],[\"juggling\",{\"1\":{\"64\":3}}],[\"judge\",{\"1\":{\"64\":3}}],[\"jaeger\",{\"1\":{\"868\":4}}],[\"jacobson\",{\"1\":{\"591\":1}}],[\"jackson\",{\"1\":{\"283\":1,\"817\":1,\"819\":1}}],[\"jack\",{\"1\":{\"64\":1}}],[\"jan\",{\"1\":{\"64\":1}}],[\"jamaica\",{\"1\":{\"64\":1}}],[\"japan\",{\"1\":{\"64\":1}}],[\"japanese\",{\"1\":{\"64\":3}}],[\"jar\",{\"1\":{\"64\":1,\"425\":1,\"429\":1,\"807\":1}}],[\"javanica\",{\"1\":{\"858\":1}}],[\"javamail\",{\"1\":{\"782\":1}}],[\"javaee\",{\"1\":{\"782\":1}}],[\"java基础\",{\"1\":{\"624\":1}}],[\"java基础知识python\",{\"1\":{\"131\":1}}],[\"javase\",{\"0\":{\"888\":1},\"1\":{\"623\":1}}],[\"javascript\",{\"0\":{\"914\":1},\"2\":{\"69\":1,\"136\":1}}],[\"java并发\",{\"1\":{\"620\":1,\"624\":1}}],[\"java集合\",{\"1\":{\"620\":1,\"624\":1}}],[\"java集合连环三十问\",{\"1\":{\"372\":1}}],[\"java框架\",{\"1\":{\"620\":1}}],[\"javatype=\",{\"1\":{\"441\":1}}],[\"javavmstackoom\",{\"1\":{\"388\":3}}],[\"java从jdk\",{\"1\":{\"340\":1}}],[\"java有哪些保证原子性的方法\",{\"0\":{\"339\":1}}],[\"java提供了atomicstampreference类\",{\"1\":{\"336\":1}}],[\"java对象头里\",{\"1\":{\"327\":1}}],[\"java是利用volatile关键字来保证可见性的\",{\"1\":{\"318\":1}}],[\"java内存模型的抽象图\",{\"1\":{\"317\":1}}],[\"java内存模型\",{\"0\":{\"316\":1},\"1\":{\"317\":1}}],[\"java中的线程分为两类\",{\"1\":{\"305\":1}}],[\"java中创建线程主要有三种方式\",{\"1\":{\"300\":1}}],[\"java线程状态变化如图示\",{\"1\":{\"303\":1}}],[\"java线程将操作系统中的就绪和运行两种状态笼统的称作\",{\"1\":{\"303\":1}}],[\"java8\",{\"1\":{\"291\":1,\"292\":3}}],[\"java运行环境\",{\"1\":{\"285\":1}}],[\"javabean\",{\"1\":{\"282\":1,\"815\":1}}],[\"javap\",{\"1\":{\"266\":1,\"325\":1}}],[\"java5\",{\"1\":{\"242\":1}}],[\"javadoc\",{\"1\":{\"233\":1}}],[\"java数据类型简介\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"java文件中\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"javac\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"233\":1,\"879\":2}}],[\"java源文件\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"java虚拟机\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"java可移植性\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"java语言特点\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"java发展简介\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"java\",{\"0\":{\"48\":1,\"230\":1,\"231\":1,\"232\":1,\"236\":1,\"238\":1,\"259\":1,\"261\":1,\"263\":1,\"274\":1,\"278\":1,\"285\":1,\"391\":1,\"394\":1,\"886\":1,\"924\":1},\"1\":{\"59\":1,\"95\":1,\"96\":1,\"97\":1,\"137\":14,\"140\":14,\"147\":14,\"150\":2,\"157\":2,\"159\":4,\"178\":1,\"186\":7,\"193\":4,\"198\":4,\"208\":4,\"222\":4,\"225\":4,\"227\":7,\"231\":4,\"232\":6,\"233\":12,\"234\":5,\"235\":10,\"236\":8,\"238\":3,\"239\":1,\"240\":1,\"242\":3,\"245\":5,\"248\":1,\"250\":2,\"251\":1,\"252\":2,\"256\":1,\"259\":2,\"261\":6,\"263\":2,\"266\":6,\"267\":4,\"270\":4,\"274\":2,\"278\":3,\"279\":1,\"280\":3,\"282\":2,\"283\":4,\"285\":7,\"287\":1,\"289\":1,\"291\":4,\"292\":1,\"293\":1,\"294\":8,\"296\":1,\"302\":1,\"306\":4,\"315\":4,\"317\":2,\"322\":4,\"343\":4,\"349\":4,\"373\":7,\"375\":1,\"377\":5,\"379\":17,\"381\":3,\"383\":4,\"384\":1,\"385\":1,\"386\":5,\"388\":2,\"390\":1,\"392\":1,\"394\":1,\"395\":1,\"397\":2,\"404\":1,\"406\":2,\"408\":5,\"410\":1,\"411\":3,\"415\":1,\"418\":2,\"419\":4,\"422\":6,\"423\":9,\"425\":2,\"427\":5,\"428\":10,\"429\":8,\"436\":2,\"446\":4,\"451\":4,\"454\":7,\"473\":4,\"477\":4,\"483\":4,\"490\":1,\"493\":4,\"510\":4,\"516\":4,\"523\":4,\"534\":4,\"538\":7,\"544\":4,\"549\":4,\"566\":4,\"595\":4,\"600\":4,\"609\":4,\"617\":7,\"623\":9,\"629\":4,\"633\":4,\"649\":4,\"658\":4,\"664\":7,\"674\":4,\"680\":4,\"699\":4,\"713\":4,\"720\":4,\"727\":4,\"731\":1,\"734\":4,\"736\":7,\"751\":4,\"767\":4,\"778\":7,\"782\":2,\"784\":1,\"785\":4,\"787\":1,\"788\":5,\"796\":1,\"802\":4,\"807\":5,\"813\":4,\"817\":4,\"819\":1,\"824\":7,\"830\":1,\"831\":3,\"832\":4,\"838\":4,\"843\":4,\"851\":4,\"861\":4,\"865\":4,\"868\":6,\"874\":4,\"877\":7,\"879\":14},\"2\":{\"133\":1}}],[\"java开发手册\",{\"1\":{\"360\":1}}],[\"java开发\",{\"1\":{\"0\":1}}],[\"j\",{\"1\":{\"13\":1,\"314\":4,\"318\":1}}],[\"格式使用数学公式\",{\"1\":{\"13\":1}}],[\"你知道\",{\"0\":{\"792\":1}}],[\"你应该也知道\",{\"1\":{\"788\":1}}],[\"你有自己实现过简单的\",{\"1\":{\"788\":1}}],[\"你有下面几个选择\",{\"1\":{\"672\":1}}],[\"你下去依次检查c\",{\"1\":{\"672\":1}}],[\"你站在讲台上等\",{\"1\":{\"672\":1}}],[\"你创建30个分身\",{\"1\":{\"672\":1}}],[\"你用循环挨个处理socket\",{\"1\":{\"672\":1}}],[\"你的朋友可以用其中任何一个绰号叫你\",{\"1\":{\"604\":1}}],[\"你才能打下一句\",{\"1\":{\"583\":1}}],[\"你才能这么轻松地使用各种框架\",{\"1\":{\"289\":1}}],[\"你打完一句话\",{\"1\":{\"583\":1}}],[\"你是把话憋着不说吗\",{\"1\":{\"583\":1}}],[\"你是不是外面有别的狗子了\",{\"1\":{\"574\":1}}],[\"你是不是不爱我了\",{\"1\":{\"574\":1}}],[\"你是如何解决的\",{\"0\":{\"516\":1}}],[\"你老婆要生了\",{\"1\":{\"568\":1}}],[\"你觉得应该怎么实现一个热部署功能\",{\"0\":{\"428\":1}}],[\"你们的服务怎么做日志收集\",{\"0\":{\"877\":1}}],[\"你们的服务怎么做监控和告警\",{\"0\":{\"876\":1}}],[\"你们一般是怎么分库的呢\",{\"0\":{\"529\":1}}],[\"你们线上用的什么垃圾收集器\",{\"0\":{\"406\":1}}],[\"你们用什么\",{\"0\":{\"208\":1}}],[\"你能现场写一下\",{\"1\":{\"805\":1}}],[\"你能听到吗\",{\"1\":{\"568\":2}}],[\"你能设计实现一个线程池吗\",{\"0\":{\"370\":1}}],[\"你能自己设计实现一个hashmap吗\",{\"0\":{\"176\":1}}],[\"你必须在构造中指定参与协作的线程数\",{\"1\":{\"347\":1}}],[\"你在工作中用到过threadlocal吗\",{\"0\":{\"309\":1}}],[\"你在旁边阅读一段\",{\"1\":{\"236\":1}}],[\"你还可以调用这些方法和属性\",{\"1\":{\"289\":1}}],[\"你还知道哪些哈希函数的构造方法呢\",{\"0\":{\"170\":1}}],[\"你重写过\",{\"1\":{\"258\":1}}],[\"你想读一本外国的小说\",{\"1\":{\"236\":1}}],[\"你了解哪些限流算法\",{\"0\":{\"227\":1}}],[\"你对红黑树了解多少\",{\"0\":{\"162\":1}}],[\"你好java基础\",{\"0\":{\"147\":1,\"879\":1}}],[\"你好\",{\"0\":{\"143\":1,\"145\":1},\"1\":{\"821\":1}}],[\"你需要在元素上添加\",{\"1\":{\"21\":1}}],[\"你可以慢慢去发现\",{\"1\":{\"621\":1}}],[\"你可以先等翻译人员将全本的小说\",{\"1\":{\"236\":1}}],[\"你可以找一个翻译人员帮助你翻译\",{\"1\":{\"236\":1}}],[\"你可以对代码块进行高亮\",{\"1\":{\"36\":1}}],[\"你可以在相邻的幻灯片上添加\",{\"1\":{\"33\":1}}],[\"你可以在幻灯片中使用\",{\"1\":{\"8\":1,\"9\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1}}],[\"你可以使用\",{\"1\":{\"29\":1,\"36\":1}}],[\"你可以按照顺序包裹一个\",{\"1\":{\"27\":1}}],[\"你可以通过向特定幻灯片添加\",{\"1\":{\"19\":1}}],[\"你也可以使用\",{\"1\":{\"13\":1}}],[\"=400\",{\"1\":{\"582\":1}}],[\"=v\",{\"1\":{\"574\":1}}],[\"=6\",{\"1\":{\"513\":1}}],[\"=new\",{\"1\":{\"392\":1}}],[\"=digit\",{\"1\":{\"270\":1}}],[\"=radix\",{\"1\":{\"270\":1}}],[\"=3\",{\"1\":{\"239\":1,\"513\":1}}],[\"=key\",{\"1\":{\"170\":1}}],[\"==和\",{\"0\":{\"257\":1}}],[\"==null\",{\"1\":{\"186\":1}}],[\"==\",{\"1\":{\"164\":3,\"166\":1,\"181\":9,\"186\":1,\"257\":5,\"272\":1,\"314\":1,\"333\":1,\"445\":1,\"450\":2,\"725\":2,\"802\":4}}],[\"===========================================\",{\"1\":{\"805\":2}}],[\"==========================================\",{\"1\":{\"805\":2}}],[\"=================\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"=expectedmodcount\",{\"1\":{\"157\":1}}],[\"=>\",{\"1\":{\"36\":1}}],[\"=\",{\"0\":{\"265\":2,\"269\":2},\"1\":{\"12\":1,\"13\":1,\"36\":3,\"86\":1,\"87\":6,\"88\":7,\"89\":10,\"90\":13,\"91\":5,\"137\":10,\"140\":10,\"147\":10,\"164\":6,\"166\":1,\"167\":1,\"169\":4,\"173\":1,\"181\":18,\"186\":3,\"239\":8,\"241\":1,\"245\":3,\"257\":1,\"265\":2,\"269\":2,\"272\":1,\"276\":3,\"285\":1,\"300\":2,\"308\":1,\"310\":5,\"311\":1,\"312\":2,\"314\":5,\"315\":5,\"318\":3,\"321\":3,\"322\":1,\"325\":16,\"332\":1,\"333\":3,\"341\":1,\"345\":12,\"348\":4,\"349\":5,\"354\":3,\"357\":2,\"367\":5,\"373\":15,\"388\":3,\"389\":8,\"392\":12,\"406\":1,\"435\":7,\"436\":8,\"437\":2,\"441\":1,\"444\":16,\"445\":6,\"448\":13,\"450\":10,\"453\":3,\"488\":7,\"489\":3,\"491\":1,\"498\":1,\"507\":1,\"508\":1,\"509\":1,\"560\":3,\"582\":1,\"585\":1,\"586\":1,\"587\":2,\"588\":3,\"589\":5,\"591\":8,\"592\":1,\"594\":1,\"603\":1,\"725\":2,\"762\":2,\"763\":5,\"778\":9,\"788\":18,\"790\":2,\"791\":1,\"793\":4,\"795\":4,\"802\":8,\"805\":6,\"806\":9,\"813\":6,\"820\":6,\"821\":1,\"847\":2,\"858\":1,\"859\":3,\"879\":10}}],[\"ajc\",{\"1\":{\"807\":1}}],[\"aof刷盘阻塞\",{\"1\":{\"718\":1}}],[\"aof关闭或者aof文件不存在时\",{\"1\":{\"679\":1}}],[\"aof持久化开启且存在aof文件时\",{\"1\":{\"679\":1}}],[\"aof缓冲区根据对应的策略向硬盘做同步操作\",{\"1\":{\"676\":1}}],[\"aof的工作流程操作\",{\"1\":{\"676\":1}}],[\"aof的主要作用是解决了数据持久化的实时性\",{\"1\":{\"676\":1}}],[\"aof\",{\"0\":{\"677\":1},\"1\":{\"676\":2,\"677\":6,\"678\":5,\"679\":1,\"680\":8,\"720\":4}}],[\"aop<\",{\"1\":{\"805\":1}}],[\"aop\",{\"0\":{\"803\":1,\"804\":1,\"805\":1,\"807\":2},\"1\":{\"287\":1,\"782\":2,\"783\":2,\"784\":1,\"785\":2,\"804\":7,\"805\":6,\"806\":1,\"807\":9,\"809\":2,\"812\":2,\"813\":2}}],[\"a又举手\",{\"1\":{\"672\":1}}],[\"a运行一个时间片之后\",{\"1\":{\"635\":1}}],[\"aes\",{\"0\":{\"617\":1},\"1\":{\"616\":1,\"617\":1}}],[\"aerial\",{\"1\":{\"64\":1}}],[\"ahead\",{\"1\":{\"519\":1}}],[\"a3\",{\"1\":{\"509\":2}}],[\"a2\",{\"1\":{\"509\":3}}],[\"a1\",{\"1\":{\"509\":4,\"799\":1}}],[\"a1==b1\",{\"1\":{\"269\":1}}],[\"a✖️b=\",{\"1\":{\"458\":1}}],[\"a录入的是\",{\"1\":{\"349\":1}}],[\"a录入银行流水数据\",{\"1\":{\"349\":1}}],[\"a和b数据是否一致\",{\"1\":{\"349\":1}}],[\"a和c之间存在数据依赖关系\",{\"1\":{\"321\":1}}],[\"action\",{\"1\":{\"815\":1}}],[\"activemq作为\",{\"1\":{\"741\":1}}],[\"active\",{\"1\":{\"444\":2}}],[\"acknowledgment\",{\"1\":{\"593\":1}}],[\"acknum=y+1\",{\"1\":{\"568\":1}}],[\"acknum=x+1\",{\"1\":{\"568\":1}}],[\"ack1\",{\"1\":{\"574\":1}}],[\"ack=w+1\",{\"1\":{\"574\":1}}],[\"ack=u+1\",{\"1\":{\"574\":2}}],[\"ack=1\",{\"1\":{\"568\":2,\"574\":2}}],[\"ack\",{\"0\":{\"571\":1},\"1\":{\"560\":1,\"569\":1,\"570\":3,\"571\":1,\"573\":5,\"574\":3,\"575\":2,\"576\":7,\"578\":2,\"580\":1,\"582\":1,\"583\":2,\"584\":7,\"586\":4,\"587\":3,\"588\":1,\"589\":5,\"591\":1,\"592\":6,\"593\":1,\"594\":5,\"614\":1}}],[\"acid\",{\"0\":{\"519\":1},\"1\":{\"476\":1,\"519\":2,\"836\":1}}],[\"acquire\",{\"1\":{\"348\":1}}],[\"account\",{\"1\":{\"441\":2}}],[\"accordion\",{\"1\":{\"64\":1}}],[\"acc\",{\"1\":{\"325\":1}}],[\"accumulating\",{\"1\":{\"270\":1}}],[\"accecptor\",{\"1\":{\"213\":1}}],[\"accept\",{\"0\":{\"216\":1},\"1\":{\"64\":1,\"214\":1,\"215\":1,\"556\":3,\"570\":3,\"573\":2}}],[\"await\",{\"1\":{\"345\":5}}],[\"a线程更新i+1\",{\"1\":{\"340\":1}}],[\"aqs源码里面有很多细节可问\",{\"1\":{\"331\":1}}],[\"aqs是基于一个fifo的双向队列\",{\"1\":{\"331\":1}}],[\"aqs\",{\"1\":{\"331\":6,\"332\":3}}],[\"aqs了解多少\",{\"0\":{\"331\":1}}],[\"aquarius\",{\"1\":{\"64\":1}}],[\"aaa\",{\"1\":{\"489\":3}}],[\"aaa1\",{\"1\":{\"294\":5}}],[\"aaa2\",{\"1\":{\"294\":5}}],[\"aaron\",{\"1\":{\"89\":2,\"90\":2,\"91\":1}}],[\"a=1\",{\"1\":{\"482\":1}}],[\"a=127\",{\"1\":{\"269\":1}}],[\"a==b\",{\"1\":{\"269\":1}}],[\"a=\",{\"0\":{\"269\":1},\"1\":{\"266\":2,\"269\":1,\"458\":1}}],[\"agent\",{\"1\":{\"556\":1}}],[\"age=10的条件进行过滤\",{\"1\":{\"510\":1}}],[\"age=10\",{\"1\":{\"510\":1}}],[\"age=age\",{\"1\":{\"251\":1}}],[\"age\",{\"1\":{\"251\":1,\"440\":1,\"509\":7,\"510\":1}}],[\"a+1\",{\"1\":{\"245\":1}}],[\"a++输出的是\",{\"1\":{\"245\":1}}],[\"a++\",{\"1\":{\"245\":1}}],[\"apollo\",{\"1\":{\"831\":1,\"841\":1}}],[\"apollo等等\",{\"1\":{\"368\":1,\"830\":1}}],[\"apache\",{\"1\":{\"453\":1,\"556\":1,\"835\":1,\"836\":1,\"868\":1}}],[\"api版本管理\",{\"1\":{\"863\":1}}],[\"api的调用\",{\"1\":{\"846\":1}}],[\"api调用等\",{\"1\":{\"845\":1}}],[\"api进行访问和管理\",{\"1\":{\"841\":1}}],[\"apisix支持灵活的配置方式\",{\"1\":{\"864\":1}}],[\"apisix基于nginx和lua开发\",{\"1\":{\"864\":1}}],[\"apisix等\",{\"1\":{\"832\":1}}],[\"apisix\",{\"1\":{\"831\":1,\"864\":1}}],[\"api网关可以管理不同版本的api\",{\"1\":{\"863\":1}}],[\"api网关可以在客户端和后端服务之间进行数据格式转换和协议转换\",{\"1\":{\"863\":1}}],[\"api网关可以在后端服务之间实现负载均衡\",{\"1\":{\"863\":1}}],[\"api网关可以收集和记录请求的指标和日志\",{\"1\":{\"863\":1}}],[\"api网关可以缓存后端服务的响应\",{\"1\":{\"863\":1}}],[\"api网关可以集中处理身份验证和授权\",{\"1\":{\"863\":1}}],[\"api网关根据请求的url路径或其他标识\",{\"1\":{\"863\":1}}],[\"api网关的主要功能包括\",{\"1\":{\"863\":1}}],[\"api网关\",{\"1\":{\"831\":1,\"832\":1,\"863\":1}}],[\"apitest\",{\"1\":{\"788\":1}}],[\"api或数据结构使用不合理\",{\"1\":{\"718\":1}}],[\"api接口层\",{\"1\":{\"449\":1}}],[\"api\",{\"1\":{\"280\":1,\"291\":6,\"292\":1,\"472\":1,\"528\":1,\"782\":3,\"819\":1,\"830\":1,\"832\":1,\"847\":1,\"863\":1}}],[\"appendfsync\",{\"1\":{\"677\":1}}],[\"append\",{\"1\":{\"255\":1,\"266\":6,\"676\":2,\"677\":1}}],[\"apply\",{\"1\":{\"849\":1}}],[\"appliaction\",{\"1\":{\"819\":1}}],[\"applicantcontext\",{\"0\":{\"789\":1},\"1\":{\"789\":2}}],[\"applicationevent\",{\"1\":{\"791\":1}}],[\"applicationcontext\",{\"0\":{\"791\":1},\"1\":{\"785\":1,\"791\":7,\"793\":3}}],[\"application\",{\"1\":{\"202\":1,\"784\":1}}],[\"apple\",{\"1\":{\"64\":2}}],[\"ap模型常见应用\",{\"1\":{\"192\":1}}],[\"ap\",{\"1\":{\"192\":3,\"202\":1,\"544\":1,\"836\":1}}],[\"avoids\",{\"1\":{\"270\":1}}],[\"avocado\",{\"1\":{\"64\":1}}],[\"available的broker代理\",{\"1\":{\"776\":1}}],[\"availableprocessors\",{\"1\":{\"359\":1}}],[\"available\",{\"1\":{\"193\":2}}],[\"availability\",{\"1\":{\"190\":2}}],[\"azerbaijan\",{\"1\":{\"64\":1}}],[\"august\",{\"1\":{\"556\":1}}],[\"auth\",{\"1\":{\"698\":1}}],[\"authorization\",{\"1\":{\"849\":1}}],[\"authority\",{\"1\":{\"564\":1}}],[\"author\",{\"1\":{\"444\":9}}],[\"autoconfigure\",{\"1\":{\"821\":1}}],[\"autoconfigurationentry\",{\"1\":{\"820\":2}}],[\"autoconfigurationimportselector实现了importselector接口\",{\"1\":{\"820\":1}}],[\"autoconfigurationimportselector\",{\"1\":{\"820\":3}}],[\"autoconfigurationimportselector类\",{\"1\":{\"820\":1}}],[\"autoconfigurationpackage\",{\"1\":{\"820\":1}}],[\"autocommit\",{\"1\":{\"448\":2}}],[\"autodetect\",{\"1\":{\"796\":1}}],[\"autowire\",{\"1\":{\"819\":1}}],[\"autowire=\",{\"1\":{\"796\":1}}],[\"autowired注解\",{\"1\":{\"802\":1}}],[\"autowiredannotationbeanpostprocessor\",{\"1\":{\"802\":3}}],[\"autowired\",{\"0\":{\"802\":1},\"1\":{\"287\":1,\"784\":2,\"802\":5,\"821\":1}}],[\"automatic\",{\"1\":{\"687\":1}}],[\"automobile\",{\"1\":{\"64\":1}}],[\"autoboxcachemax=来修改缓存的最大值\",{\"1\":{\"269\":1}}],[\"autoadd\",{\"1\":{\"245\":1}}],[\"auto\",{\"1\":{\"33\":1,\"64\":1,\"357\":1}}],[\"australia\",{\"1\":{\"64\":1}}],[\"austria\",{\"1\":{\"64\":1}}],[\"afterthrowing\",{\"1\":{\"804\":1}}],[\"afterreturning\",{\"1\":{\"804\":1}}],[\"afterpropertiesset方法\",{\"1\":{\"793\":2}}],[\"afterpropertiesset\",{\"1\":{\"793\":1}}],[\"afternodeaccess\",{\"1\":{\"186\":1}}],[\"after\",{\"1\":{\"183\":1,\"453\":2,\"688\":1,\"690\":1,\"784\":2,\"804\":1,\"805\":1}}],[\"afghanistan\",{\"1\":{\"64\":1}}],[\"african\",{\"1\":{\"64\":1}}],[\"africa\",{\"1\":{\"64\":2}}],[\"abortpolicy\",{\"1\":{\"355\":1}}],[\"ab=sb\",{\"1\":{\"266\":1}}],[\"ab=a+b\",{\"1\":{\"266\":1}}],[\"abstractfallbacktransactionattributesource\",{\"1\":{\"813\":1}}],[\"abstractautoproxycreator\",{\"1\":{\"812\":1}}],[\"abstractautowirecapablebeanfactory\",{\"1\":{\"790\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"331\":1}}],[\"abstract\",{\"0\":{\"252\":1}}],[\"aba问题\",{\"1\":{\"340\":1}}],[\"aba\",{\"0\":{\"336\":1}}],[\"abase\",{\"1\":{\"181\":1}}],[\"abacus\",{\"1\":{\"64\":1}}],[\"ab\",{\"1\":{\"64\":1,\"266\":1,\"799\":2}}],[\"abc\",{\"0\":{\"265\":2},\"1\":{\"64\":1,\"255\":1,\"265\":9}}],[\"abcd\",{\"1\":{\"64\":2,\"255\":1}}],[\"admin\",{\"1\":{\"859\":1}}],[\"advice\",{\"1\":{\"784\":1,\"785\":1,\"804\":1}}],[\"advantage\",{\"1\":{\"64\":1}}],[\"addslots命令为节点分配槽\",{\"1\":{\"697\":1}}],[\"addr命令\",{\"1\":{\"689\":2}}],[\"addr命令向其他sentinel节点询问对主节点的判断\",{\"1\":{\"688\":1}}],[\"address\",{\"1\":{\"87\":4,\"88\":4,\"89\":4,\"90\":4,\"91\":1,\"606\":1,\"651\":2}}],[\"addbatch\",{\"1\":{\"451\":1}}],[\"addemp\",{\"1\":{\"445\":3}}],[\"addempsbatch\",{\"1\":{\"445\":2}}],[\"added\",{\"1\":{\"267\":1}}],[\"add=clazz\",{\"1\":{\"285\":1}}],[\"add\",{\"1\":{\"89\":2,\"186\":1,\"285\":6,\"294\":8,\"365\":1,\"388\":1,\"389\":1,\"489\":2,\"509\":1,\"859\":1}}],[\"adhesive\",{\"1\":{\"64\":1}}],[\"adult\",{\"1\":{\"64\":2}}],[\"axe\",{\"1\":{\"64\":1}}],[\"aio\",{\"0\":{\"280\":1},\"1\":{\"280\":1,\"663\":1}}],[\"airplane\",{\"1\":{\"64\":2}}],[\"aid\",{\"1\":{\"64\":1}}],[\"asm\",{\"1\":{\"806\":1}}],[\"aspectj\",{\"0\":{\"807\":1},\"1\":{\"784\":1,\"804\":1,\"807\":6}}],[\"aspect\",{\"1\":{\"784\":1,\"804\":1,\"805\":2}}],[\"aside\",{\"1\":{\"707\":1}}],[\"asia\",{\"1\":{\"64\":1}}],[\"ascii\",{\"1\":{\"558\":1,\"566\":1,\"730\":2}}],[\"asc\",{\"1\":{\"488\":3}}],[\"ascension\",{\"1\":{\"64\":1}}],[\"async\",{\"1\":{\"411\":1}}],[\"asynchronous\",{\"1\":{\"280\":1}}],[\"association指的就是一对一\",{\"1\":{\"442\":1}}],[\"association>\",{\"1\":{\"441\":1}}],[\"associated\",{\"1\":{\"310\":1}}],[\"assert\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"as\",{\"0\":{\"321\":1},\"1\":{\"267\":1,\"321\":3,\"813\":2}}],[\"ashift\",{\"1\":{\"181\":1}}],[\"astore\",{\"1\":{\"266\":3}}],[\"astonished\",{\"1\":{\"64\":1}}],[\"asterisk\",{\"1\":{\"64\":2}}],[\"astronaut\",{\"1\":{\"64\":3}}],[\"am\",{\"1\":{\"300\":1}}],[\"amount=amount+100\",{\"1\":{\"225\":1}}],[\"american\",{\"1\":{\"64\":1}}],[\"americas\",{\"1\":{\"64\":1}}],[\"amulet\",{\"1\":{\"64\":1}}],[\"ambulance\",{\"1\":{\"64\":1}}],[\"amphora\",{\"1\":{\"64\":1}}],[\"at模式是seata默认支持的模式\",{\"1\":{\"870\":1}}],[\"attributes\",{\"1\":{\"805\":2,\"820\":3}}],[\"atomikos\",{\"1\":{\"870\":1}}],[\"atomicity\",{\"1\":{\"519\":1}}],[\"atomicintegerfieldupdater\",{\"1\":{\"340\":1}}],[\"atomicintegerarray类主要是提供原子的方式更新数组里的整型\",{\"1\":{\"340\":1}}],[\"atomicintegerarray\",{\"1\":{\"340\":1}}],[\"atomicinteger\",{\"0\":{\"341\":1},\"1\":{\"340\":1}}],[\"atomicstampedreference\",{\"1\":{\"340\":1}}],[\"atomicmarkablereference\",{\"1\":{\"340\":1}}],[\"atomicreferencefieldupdater\",{\"1\":{\"340\":1}}],[\"atomicreference\",{\"1\":{\"340\":1}}],[\"atomicreferencearray\",{\"1\":{\"340\":1}}],[\"atomiclongfieldupdater\",{\"1\":{\"340\":1}}],[\"atomiclongarray\",{\"1\":{\"340\":1}}],[\"atomiclong\",{\"1\":{\"340\":1}}],[\"atomicboolean\",{\"1\":{\"340\":1}}],[\"atomic包提供了以下4个类\",{\"1\":{\"340\":1}}],[\"atomic包提供了以下3个类进行原子字段更新\",{\"1\":{\"340\":1}}],[\"atomic包提供了以下3个类\",{\"1\":{\"340\":2}}],[\"atomic包里的类基本都是使用unsafe实现的包装类\",{\"1\":{\"340\":1}}],[\"atomic包\",{\"1\":{\"340\":1}}],[\"atom\",{\"1\":{\"64\":1}}],[\"atm\",{\"1\":{\"64\":1}}],[\"athletic\",{\"1\":{\"64\":1}}],[\"at\",{\"1\":{\"64\":2,\"870\":1}}],[\"annotationattributes\",{\"1\":{\"820\":1}}],[\"annotationmetadata\",{\"1\":{\"820\":6}}],[\"annotation\",{\"1\":{\"805\":1,\"858\":1}}],[\"anystartswitha\",{\"1\":{\"294\":1}}],[\"anystartswitha=\",{\"1\":{\"294\":1}}],[\"anymatch\",{\"1\":{\"294\":1}}],[\"any\",{\"1\":{\"232\":1}}],[\"anchor\",{\"1\":{\"64\":1}}],[\"antarctica\",{\"1\":{\"64\":1}}],[\"antigua\",{\"1\":{\"64\":1}}],[\"ant\",{\"1\":{\"64\":1}}],[\"anatomical\",{\"1\":{\"64\":1}}],[\"angola\",{\"1\":{\"64\":1}}],[\"anguilla\",{\"1\":{\"64\":1}}],[\"anguished\",{\"1\":{\"64\":1}}],[\"angel\",{\"1\":{\"64\":1}}],[\"anger\",{\"1\":{\"64\":2}}],[\"angry\",{\"1\":{\"64\":1}}],[\"andorra\",{\"1\":{\"64\":1}}],[\"and\",{\"1\":{\"64\":12,\"86\":1,\"225\":1,\"267\":1,\"404\":1,\"436\":4,\"444\":8,\"488\":3,\"493\":1,\"509\":1,\"510\":2,\"513\":2,\"762\":2,\"858\":1}}],[\"animate\",{\"1\":{\"33\":1}}],[\"architecture\",{\"1\":{\"828\":1}}],[\"around\",{\"1\":{\"784\":2,\"804\":1,\"805\":2}}],[\"arp\",{\"0\":{\"606\":1},\"1\":{\"606\":14}}],[\"arg>\",{\"1\":{\"795\":1}}],[\"arg\",{\"1\":{\"795\":1}}],[\"argv\",{\"1\":{\"725\":1}}],[\"args\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"266\":1,\"269\":1,\"276\":3,\"300\":3,\"315\":1,\"345\":2,\"348\":1,\"349\":1,\"373\":1,\"388\":2,\"450\":9,\"453\":1,\"790\":1,\"791\":1,\"793\":1,\"805\":2,\"806\":6,\"879\":1}}],[\"argentina\",{\"1\":{\"64\":1}}],[\"aruba\",{\"1\":{\"64\":1}}],[\"arabia\",{\"1\":{\"64\":1}}],[\"arab\",{\"1\":{\"64\":1}}],[\"aries\",{\"1\":{\"64\":1}}],[\"arthas\",{\"1\":{\"411\":1}}],[\"art\",{\"1\":{\"64\":1}}],[\"arts\",{\"1\":{\"64\":2}}],[\"artifactid>\",{\"1\":{\"805\":1,\"821\":3}}],[\"artificial\",{\"1\":{\"64\":1}}],[\"articulated\",{\"1\":{\"64\":1}}],[\"artist\",{\"1\":{\"64\":3}}],[\"arrayblockingqueue\",{\"1\":{\"356\":2}}],[\"arraylist<oomobject>\",{\"1\":{\"388\":1}}],[\"arraylist<>\",{\"1\":{\"285\":1,\"294\":1,\"859\":1}}],[\"arraylist\",{\"1\":{\"158\":5,\"389\":1}}],[\"arraylist通过两个方法readobject\",{\"1\":{\"156\":1}}],[\"arraylist的线程安全仍然没有保证\",{\"1\":{\"158\":1}}],[\"arraylist的序列化不太一样\",{\"1\":{\"156\":1}}],[\"arraylist的扩容是创建一个1\",{\"1\":{\"155\":1}}],[\"arraylist的扩容机制了解吗\",{\"0\":{\"155\":1}}],[\"arraylist怎么序列化的知道吗\",{\"0\":{\"156\":1}}],[\"arraylist是基于数组的集合\",{\"1\":{\"155\":1}}],[\"arraylist是预先定义好的数组\",{\"1\":{\"154\":1}}],[\"arraylist基于数组\",{\"1\":{\"154\":2}}],[\"arraylist基于数组实现\",{\"1\":{\"154\":2}}],[\"arraylist增删如果是数组末尾的位置\",{\"1\":{\"154\":1}}],[\"arraylist更利于查找\",{\"1\":{\"154\":1}}],[\"arraylist和linkedlist有什么区别\",{\"0\":{\"154\":1}}],[\"array\",{\"0\":{\"90\":1},\"1\":{\"88\":1}}],[\"array数组\",{\"0\":{\"85\":1},\"1\":{\"49\":1}}],[\"arrows\",{\"1\":{\"64\":3}}],[\"arrow\",{\"1\":{\"64\":22}}],[\"arrival\",{\"1\":{\"64\":1}}],[\"armenia\",{\"1\":{\"64\":1}}],[\"arm\",{\"1\":{\"64\":1}}],[\"area\",{\"1\":{\"321\":1}}],[\"are\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"always\",{\"1\":{\"677\":1}}],[\"allkeys\",{\"1\":{\"717\":2}}],[\"all\",{\"0\":{\"468\":1},\"1\":{\"468\":3,\"492\":2,\"493\":2}}],[\"allowpublicmethodsonly\",{\"1\":{\"813\":1}}],[\"allow\",{\"1\":{\"813\":1}}],[\"allowcaching\",{\"1\":{\"802\":1}}],[\"allowmultiqueries=true\",{\"1\":{\"445\":1}}],[\"alloc\",{\"1\":{\"730\":1}}],[\"allocation\",{\"1\":{\"384\":1}}],[\"allstartswitha\",{\"1\":{\"294\":1}}],[\"allstartswitha=\",{\"1\":{\"294\":1}}],[\"allmatch\",{\"1\":{\"294\":1}}],[\"already\",{\"1\":{\"267\":1}}],[\"aload\",{\"1\":{\"266\":2}}],[\"algeria\",{\"1\":{\"64\":1}}],[\"aland\",{\"1\":{\"64\":1}}],[\"alarm\",{\"1\":{\"64\":1}}],[\"albania\",{\"1\":{\"64\":1}}],[\"alembic\",{\"1\":{\"64\":1}}],[\"alibaba生态系统紧密集成|\",{\"1\":{\"857\":1}}],[\"alibaba|sentinel|\",{\"1\":{\"857\":1}}],[\"alibaba项目的发起人已经跑路去了腾讯\",{\"1\":{\"831\":1}}],[\"alibaba\",{\"1\":{\"824\":1,\"830\":2,\"831\":5,\"832\":7}}],[\"alive\",{\"1\":{\"558\":1,\"560\":3,\"836\":1}}],[\"alien\",{\"1\":{\"64\":1}}],[\"aligned\",{\"1\":{\"53\":1,\"125\":1,\"128\":1}}],[\"alter\",{\"1\":{\"466\":1,\"489\":2,\"509\":1}}],[\"alternation\",{\"1\":{\"64\":1}}],[\"alt\",{\"1\":{\"42\":1}}],[\"a\",{\"1\":{\"12\":1,\"36\":2,\"64\":2,\"192\":1,\"245\":1,\"266\":2,\"267\":2,\"269\":1,\"285\":1,\"294\":8,\"321\":1,\"324\":1,\"334\":3,\"349\":5,\"384\":1,\"429\":1,\"458\":3,\"475\":1,\"488\":3,\"490\":2,\"514\":2,\"518\":2,\"521\":4,\"603\":2,\"605\":1,\"609\":1,\"724\":3,\"762\":3,\"788\":3,\"799\":3,\"800\":18,\"807\":1,\"813\":9}}],[\"3的数据\",{\"1\":{\"813\":2}}],[\"3m\",{\"1\":{\"763\":1}}],[\"3xx\",{\"1\":{\"551\":1}}],[\"3个窗口对应核心线程池数\",{\"1\":{\"353\":1}}],[\"39\",{\"0\":{\"274\":1,\"345\":1,\"417\":1,\"507\":1,\"583\":1,\"720\":1}}],[\"37\",{\"0\":{\"270\":1,\"342\":1,\"415\":1,\"505\":1,\"581\":1,\"718\":1}}],[\"36\",{\"0\":{\"269\":1,\"341\":1,\"414\":1,\"504\":1,\"580\":1,\"717\":1}}],[\"35\",{\"0\":{\"267\":1,\"340\":1,\"413\":1,\"503\":1,\"579\":1,\"716\":1,\"824\":1},\"1\":{\"501\":4,\"780\":1,\"824\":1}}],[\"3499\",{\"1\":{\"594\":1}}],[\"34\",{\"0\":{\"266\":1,\"339\":1,\"412\":1,\"502\":1,\"578\":1,\"715\":1,\"822\":1}}],[\"3306\",{\"1\":{\"445\":1}}],[\"33\",{\"0\":{\"265\":1,\"335\":1,\"411\":1,\"501\":1,\"577\":1,\"713\":1,\"821\":1,\"877\":1},\"1\":{\"826\":2,\"877\":2}}],[\"31\",{\"0\":{\"263\":1,\"333\":1,\"408\":1,\"499\":1,\"575\":1,\"663\":1,\"711\":1,\"819\":1,\"871\":1},\"1\":{\"276\":1,\"463\":1}}],[\"3pc\",{\"0\":{\"203\":1},\"1\":{\"201\":1,\"203\":1,\"210\":1}}],[\"30m\",{\"1\":{\"763\":1}}],[\"30s\",{\"1\":{\"763\":1}}],[\"3000~3500\",{\"1\":{\"594\":2}}],[\"3000\",{\"1\":{\"594\":1}}],[\"302\",{\"1\":{\"551\":3}}],[\"301\",{\"1\":{\"551\":3}}],[\"30\",{\"0\":{\"186\":1,\"261\":1,\"332\":1,\"407\":1,\"498\":1,\"574\":1,\"662\":1,\"710\":1,\"817\":1,\"870\":1},\"1\":{\"150\":1,\"169\":1,\"186\":1,\"348\":1,\"431\":1}}],[\"38\",{\"0\":{\"272\":1,\"343\":1,\"416\":1,\"506\":1,\"582\":1,\"719\":1},\"1\":{\"150\":1}}],[\"32的随机数\",{\"1\":{\"729\":1}}],[\"32bit\",{\"1\":{\"167\":1,\"580\":1}}],[\"32\",{\"0\":{\"264\":1,\"334\":1,\"410\":1,\"500\":1,\"576\":1,\"664\":1,\"712\":1,\"820\":1,\"876\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"238\":2,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"381\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"580\":2,\"595\":1,\"600\":1,\"605\":2,\"609\":1,\"617\":1,\"626\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"788\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1,\"879\":2}}],[\"3️⃣\",{\"1\":{\"64\":1}}],[\"3rd\",{\"1\":{\"64\":1}}],[\"3\",{\"0\":{\"74\":1,\"155\":1,\"192\":1,\"198\":1,\"204\":1,\"233\":1,\"300\":1,\"380\":1,\"435\":1,\"460\":1,\"544\":1,\"559\":1,\"572\":1,\"670\":1,\"742\":1,\"784\":1,\"830\":1},\"1\":{\"11\":1,\"36\":1,\"53\":1,\"72\":1,\"89\":1,\"90\":1,\"125\":1,\"128\":1,\"137\":3,\"140\":3,\"147\":3,\"154\":1,\"225\":1,\"229\":1,\"239\":2,\"244\":1,\"251\":1,\"266\":3,\"276\":10,\"285\":2,\"291\":1,\"294\":1,\"314\":2,\"321\":1,\"328\":2,\"329\":1,\"334\":1,\"367\":1,\"379\":1,\"402\":1,\"412\":4,\"413\":1,\"414\":1,\"415\":1,\"417\":1,\"418\":1,\"422\":1,\"428\":1,\"433\":1,\"434\":1,\"435\":1,\"440\":1,\"466\":1,\"470\":1,\"477\":1,\"483\":1,\"501\":1,\"502\":2,\"512\":1,\"513\":1,\"516\":1,\"534\":3,\"538\":2,\"559\":7,\"560\":1,\"572\":1,\"588\":1,\"589\":2,\"592\":1,\"622\":1,\"641\":1,\"662\":1,\"664\":1,\"676\":1,\"683\":1,\"694\":2,\"695\":1,\"698\":1,\"711\":1,\"725\":1,\"734\":1,\"754\":1,\"755\":1,\"762\":2,\"763\":1,\"765\":1,\"766\":3,\"777\":1,\"780\":1,\"788\":1,\"790\":1,\"793\":3,\"811\":1,\"813\":3,\"817\":1,\"820\":2,\"877\":1,\"879\":3}}],[\"2的数据\",{\"1\":{\"813\":2}}],[\"2的倍数意味着该数的二进制位只有一位为1\",{\"1\":{\"168\":1}}],[\"2h\",{\"1\":{\"763\":1}}],[\"2m\",{\"1\":{\"763\":1}}],[\"2msl\",{\"0\":{\"576\":1},\"1\":{\"574\":1,\"576\":4}}],[\"2+1个主节点选票将导致故障转移失败\",{\"1\":{\"698\":1}}],[\"2+1的选票\",{\"1\":{\"698\":1}}],[\"2+1\",{\"1\":{\"689\":1}}],[\"2kb\",{\"1\":{\"554\":1}}],[\"2xx\",{\"1\":{\"551\":1}}],[\"2gb\",{\"1\":{\"477\":1}}],[\"2>\",{\"1\":{\"458\":2}}],[\"2pc\",{\"1\":{\"201\":1,\"203\":1,\"204\":1,\"210\":1}}],[\"29452\",{\"1\":{\"418\":2}}],[\"29471\",{\"1\":{\"418\":3}}],[\"29\",{\"0\":{\"184\":1,\"260\":1,\"331\":1,\"406\":1,\"497\":1,\"573\":1,\"660\":1,\"709\":1,\"816\":1,\"868\":1}}],[\"28\",{\"0\":{\"183\":1,\"259\":1,\"330\":1,\"405\":1,\"496\":1,\"572\":1,\"658\":1,\"706\":1,\"815\":1,\"867\":1},\"1\":{\"556\":1}}],[\"27\",{\"0\":{\"182\":1,\"258\":1,\"327\":1,\"404\":1,\"495\":1,\"571\":1,\"657\":1,\"705\":1,\"813\":1,\"865\":1}}],[\"26\",{\"0\":{\"179\":1,\"257\":1,\"326\":1,\"403\":1,\"493\":1,\"570\":1,\"656\":1,\"701\":1,\"812\":1,\"864\":1}}],[\"256\",{\"1\":{\"617\":1}}],[\"256t\",{\"1\":{\"607\":1}}],[\"256tb\",{\"1\":{\"475\":1}}],[\"255\",{\"1\":{\"461\":1}}],[\"25\",{\"0\":{\"178\":1,\"256\":1,\"325\":1,\"402\":1,\"486\":1,\"569\":1,\"655\":1,\"699\":1,\"811\":1,\"863\":1},\"1\":{\"188\":1,\"266\":1,\"591\":1}}],[\"240~255\",{\"1\":{\"603\":1}}],[\"24\",{\"0\":{\"177\":1,\"255\":1,\"324\":1,\"401\":1,\"485\":1,\"568\":1,\"654\":1,\"696\":1,\"810\":1,\"859\":1},\"1\":{\"266\":1,\"603\":2}}],[\"23\",{\"0\":{\"176\":1,\"322\":1,\"400\":1,\"483\":1,\"566\":1,\"653\":1,\"692\":1,\"778\":1,\"809\":1,\"858\":1},\"1\":{\"463\":1,\"738\":1}}],[\"224~239\",{\"1\":{\"603\":1}}],[\"22\",{\"0\":{\"175\":1,\"254\":1,\"321\":1,\"399\":1,\"482\":1,\"565\":1,\"652\":1,\"691\":1,\"774\":1,\"775\":1,\"807\":1,\"854\":1}}],[\"222即可无套路获取\",{\"1\":{\"624\":1}}],[\"222\",{\"1\":{\"159\":1,\"186\":1,\"193\":1,\"198\":1,\"208\":1,\"222\":1,\"225\":1,\"227\":1,\"236\":1,\"245\":1,\"261\":1,\"267\":1,\"270\":1,\"294\":1,\"306\":1,\"315\":1,\"322\":1,\"343\":1,\"349\":1,\"373\":1,\"408\":1,\"419\":1,\"429\":1,\"446\":1,\"451\":1,\"454\":1,\"473\":1,\"477\":1,\"483\":1,\"493\":1,\"510\":1,\"516\":1,\"523\":1,\"534\":1,\"538\":1,\"544\":1,\"549\":1,\"566\":1,\"595\":1,\"600\":1,\"609\":1,\"617\":1,\"629\":1,\"633\":1,\"649\":1,\"658\":1,\"664\":1,\"674\":1,\"680\":1,\"699\":1,\"713\":1,\"720\":1,\"727\":1,\"734\":1,\"736\":1,\"751\":1,\"767\":1,\"778\":1,\"785\":1,\"802\":1,\"807\":1,\"813\":1,\"817\":1,\"824\":1,\"832\":1,\"838\":1,\"843\":1,\"851\":1,\"861\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1}}],[\"21\",{\"0\":{\"174\":1,\"253\":1,\"320\":1,\"398\":1,\"481\":1,\"564\":1,\"651\":1,\"690\":1,\"772\":1,\"806\":1,\"853\":1},\"1\":{\"266\":1}}],[\"2147483647\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"2147483648~2147483647\",{\"1\":{\"167\":1}}],[\"2147483648\",{\"1\":{\"137\":2,\"140\":2,\"147\":2,\"879\":2}}],[\"2014\",{\"1\":{\"824\":1}}],[\"2010年\",{\"1\":{\"713\":1}}],[\"2010\",{\"1\":{\"491\":1}}],[\"20m\",{\"1\":{\"763\":1}}],[\"2001\",{\"1\":{\"793\":1}}],[\"2003\",{\"1\":{\"782\":1}}],[\"200~299\",{\"1\":{\"593\":1}}],[\"200=200\",{\"1\":{\"582\":1}}],[\"200\",{\"1\":{\"556\":1,\"582\":7}}],[\"200的事务对这条记录进行update操作\",{\"1\":{\"523\":1}}],[\"2000w个索引\",{\"1\":{\"771\":1}}],[\"2000\",{\"1\":{\"502\":1,\"531\":1,\"554\":1}}],[\"20\",{\"0\":{\"173\":1,\"252\":1,\"319\":1,\"397\":1,\"454\":1,\"480\":1,\"563\":1,\"649\":1,\"689\":1,\"771\":1,\"805\":1,\"851\":1},\"1\":{\"415\":2,\"431\":1,\"454\":1,\"509\":1,\"584\":2,\"783\":1,\"859\":2}}],[\"2️⃣\",{\"1\":{\"64\":1}}],[\"2nd\",{\"1\":{\"64\":1}}],[\"2\",{\"0\":{\"73\":1,\"154\":1,\"191\":1,\"197\":1,\"203\":1,\"232\":1,\"244\":1,\"299\":1,\"379\":1,\"434\":1,\"459\":1,\"543\":1,\"558\":1,\"669\":1,\"741\":1,\"783\":1,\"829\":1},\"1\":{\"11\":1,\"36\":2,\"53\":1,\"64\":1,\"91\":1,\"95\":1,\"96\":1,\"97\":1,\"125\":1,\"128\":1,\"137\":3,\"140\":3,\"147\":3,\"154\":1,\"167\":2,\"169\":2,\"177\":1,\"181\":2,\"222\":1,\"225\":1,\"238\":2,\"244\":2,\"245\":1,\"266\":4,\"272\":2,\"276\":6,\"285\":2,\"296\":1,\"302\":1,\"314\":1,\"318\":1,\"328\":1,\"349\":1,\"359\":1,\"367\":1,\"373\":1,\"379\":1,\"392\":3,\"402\":1,\"412\":1,\"413\":1,\"414\":1,\"415\":1,\"417\":1,\"418\":1,\"422\":1,\"427\":3,\"428\":1,\"433\":1,\"434\":1,\"435\":1,\"440\":1,\"458\":1,\"465\":2,\"477\":1,\"488\":3,\"502\":1,\"516\":1,\"534\":2,\"538\":2,\"540\":2,\"558\":4,\"559\":1,\"560\":1,\"574\":2,\"576\":4,\"586\":4,\"588\":2,\"589\":1,\"592\":6,\"605\":2,\"607\":1,\"622\":1,\"641\":1,\"645\":1,\"662\":3,\"664\":1,\"676\":1,\"683\":1,\"694\":2,\"711\":1,\"718\":1,\"724\":1,\"725\":2,\"727\":1,\"734\":1,\"748\":1,\"754\":1,\"755\":1,\"765\":1,\"777\":1,\"782\":1,\"788\":1,\"790\":1,\"793\":3,\"813\":4,\"817\":1,\"820\":2,\"879\":3}}],[\"1的维护\",{\"1\":{\"864\":1}}],[\"1的mask范围在高位多1bit\",{\"1\":{\"174\":1}}],[\"1h\",{\"1\":{\"763\":1}}],[\"1h后去检查这个订单的状态\",{\"1\":{\"763\":1}}],[\"1个\",{\"1\":{\"744\":2}}],[\"1解析出当前为全量复制\",{\"1\":{\"685\":1}}],[\"1表示加锁\",{\"1\":{\"645\":1}}],[\"1~126\",{\"1\":{\"603\":1}}],[\"1m\",{\"1\":{\"763\":1}}],[\"1msl\",{\"1\":{\"576\":1}}],[\"1mhxxiovriazqipjv6jydxw\",{\"1\":{\"107\":1}}],[\"1xx\",{\"1\":{\"551\":1}}],[\"1>\",{\"1\":{\"458\":2}}],[\"1+n\",{\"1\":{\"412\":1}}],[\"1+2+3+\",{\"1\":{\"373\":1}}],[\"1l\",{\"1\":{\"282\":1}}],[\"192~223\",{\"1\":{\"603\":1}}],[\"1996\",{\"1\":{\"556\":1}}],[\"1997\",{\"1\":{\"556\":1}}],[\"190\",{\"1\":{\"488\":1}}],[\"190289\",{\"1\":{\"488\":2}}],[\"19\",{\"0\":{\"172\":1,\"251\":1,\"318\":1,\"396\":1,\"453\":1,\"479\":1,\"562\":1,\"648\":1,\"688\":1,\"770\":1,\"804\":1,\"850\":1}}],[\"1800\",{\"1\":{\"560\":1}}],[\"18\",{\"0\":{\"171\":1,\"250\":1,\"317\":1,\"395\":1,\"451\":1,\"477\":1,\"561\":1,\"647\":1,\"687\":1,\"769\":1,\"802\":1,\"849\":1},\"1\":{\"266\":1,\"325\":1,\"345\":2,\"347\":1}}],[\"17\",{\"0\":{\"170\":1,\"249\":1,\"315\":1,\"394\":1,\"450\":1,\"476\":1,\"560\":1,\"646\":1,\"686\":1,\"767\":1,\"801\":1,\"848\":1},\"1\":{\"266\":1,\"290\":1,\"501\":4}}],[\"1就可以得到二进制位上1变成0\",{\"1\":{\"168\":1}}],[\"1500\",{\"1\":{\"345\":1}}],[\"15\",{\"0\":{\"168\":1,\"247\":1,\"313\":1,\"392\":1,\"448\":1,\"473\":1,\"558\":1,\"644\":1,\"684\":1,\"765\":1,\"799\":1,\"846\":1},\"1\":{\"400\":1,\"556\":1,\"560\":1,\"580\":1,\"695\":1,\"788\":1}}],[\"1=15\",{\"1\":{\"167\":1}}],[\"14=1170\",{\"1\":{\"502\":1}}],[\"14\",{\"0\":{\"167\":1,\"245\":1,\"312\":1,\"391\":1,\"446\":1,\"472\":1,\"557\":1,\"643\":1,\"683\":1,\"763\":1,\"798\":1,\"845\":1},\"1\":{\"266\":1,\"321\":1,\"463\":1,\"502\":1,\"557\":1}}],[\"137582\",{\"1\":{\"556\":1}}],[\"13\",{\"0\":{\"166\":1,\"244\":1,\"311\":1,\"390\":1,\"445\":1,\"470\":1,\"556\":1,\"642\":1,\"682\":1,\"762\":1,\"797\":1,\"843\":1},\"1\":{\"137\":1,\"140\":1,\"147\":1,\"266\":1,\"531\":1,\"879\":1}}],[\"16=21902400\",{\"1\":{\"502\":1}}],[\"16384\",{\"1\":{\"502\":1}}],[\"16\",{\"0\":{\"169\":1,\"248\":1,\"314\":1,\"393\":1,\"449\":1,\"475\":1,\"559\":1,\"645\":1,\"685\":1,\"766\":1,\"800\":1,\"847\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"164\":1,\"166\":1,\"167\":4,\"169\":2,\"238\":2,\"272\":1,\"373\":1,\"414\":2,\"418\":2,\"556\":1,\"580\":4,\"583\":1,\"603\":2,\"695\":1,\"734\":1,\"788\":1,\"879\":2}}],[\"125\",{\"1\":{\"591\":1}}],[\"128~191\",{\"1\":{\"603\":1}}],[\"128\",{\"0\":{\"269\":2},\"1\":{\"269\":2,\"605\":1}}],[\"127\",{\"0\":{\"269\":2},\"1\":{\"269\":4,\"724\":5}}],[\"12\",{\"0\":{\"165\":1,\"227\":1,\"243\":1,\"310\":1,\"389\":1,\"444\":1,\"469\":1,\"555\":1,\"641\":1,\"680\":1,\"759\":1,\"796\":1,\"842\":1},\"1\":{\"137\":1,\"140\":1,\"147\":1,\"188\":1,\"227\":1,\"285\":1,\"463\":1,\"513\":1,\"531\":1,\"879\":1}}],[\"123\",{\"1\":{\"89\":1,\"795\":1}}],[\"123456\",{\"1\":{\"285\":1}}],[\"1234\",{\"1\":{\"64\":1}}],[\"110\",{\"1\":{\"603\":1}}],[\"1170^2\",{\"1\":{\"502\":1}}],[\"1170\",{\"1\":{\"502\":3}}],[\"1121\",{\"1\":{\"445\":1}}],[\"1110\",{\"1\":{\"603\":1}}],[\"111这样形式的\",{\"1\":{\"168\":1}}],[\"1111\",{\"1\":{\"167\":1,\"603\":1}}],[\"11\",{\"0\":{\"164\":1,\"224\":1,\"242\":1,\"309\":1,\"388\":1,\"443\":1,\"468\":1,\"554\":1,\"640\":1,\"679\":1,\"758\":1,\"795\":1,\"841\":1},\"1\":{\"137\":1,\"140\":1,\"147\":1,\"272\":1,\"418\":1,\"470\":1,\"879\":1}}],[\"10m\",{\"1\":{\"763\":1}}],[\"10s\",{\"1\":{\"763\":1}}],[\"10秒\",{\"1\":{\"690\":1}}],[\"1024\",{\"1\":{\"664\":1}}],[\"1050就表示给pid为1050的进程发送sigkil信号\",{\"1\":{\"641\":1}}],[\"101\",{\"1\":{\"435\":2}}],[\"10\",{\"0\":{\"163\":1,\"218\":1,\"241\":1,\"308\":1,\"387\":1,\"442\":1,\"467\":1,\"553\":1,\"639\":1,\"678\":1,\"757\":1,\"794\":1,\"840\":1},\"1\":{\"137\":2,\"140\":2,\"147\":2,\"266\":1,\"348\":2,\"418\":3,\"454\":1,\"488\":2,\"518\":1,\"556\":2,\"577\":1,\"583\":2,\"603\":1,\"726\":2,\"793\":3,\"879\":2}}],[\"100=100\",{\"1\":{\"582\":1}}],[\"10000次\",{\"1\":{\"445\":1}}],[\"10000次==\",{\"1\":{\"445\":1}}],[\"1000\",{\"1\":{\"345\":1,\"415\":1,\"417\":1,\"445\":1,\"463\":1,\"531\":3,\"620\":1,\"778\":2}}],[\"100\",{\"1\":{\"64\":1,\"245\":1,\"373\":1,\"407\":1,\"418\":1,\"531\":2,\"582\":3,\"763\":1}}],[\"1s\",{\"1\":{\"763\":1}}],[\"1sxft1esklocslhmpee80vq\",{\"1\":{\"115\":1}}],[\"1st\",{\"1\":{\"64\":1}}],[\"1️⃣\",{\"1\":{\"64\":1}}],[\"1\",{\"0\":{\"72\":1,\"152\":1,\"180\":1,\"181\":1,\"190\":1,\"196\":1,\"202\":1,\"231\":1,\"298\":1,\"377\":1,\"380\":2,\"433\":1,\"458\":1,\"469\":1,\"542\":1,\"558\":3,\"668\":1,\"740\":1,\"782\":1,\"828\":1},\"1\":{\"11\":1,\"12\":1,\"13\":1,\"36\":2,\"53\":1,\"64\":1,\"72\":1,\"76\":1,\"90\":2,\"95\":1,\"96\":1,\"97\":1,\"125\":1,\"128\":1,\"137\":10,\"140\":10,\"147\":10,\"154\":2,\"164\":1,\"167\":3,\"168\":2,\"169\":5,\"175\":8,\"177\":5,\"180\":1,\"181\":3,\"204\":1,\"225\":1,\"229\":1,\"238\":2,\"239\":11,\"245\":6,\"266\":2,\"276\":3,\"285\":2,\"292\":1,\"296\":1,\"302\":1,\"312\":1,\"318\":1,\"321\":1,\"325\":3,\"326\":2,\"328\":1,\"340\":1,\"341\":1,\"345\":1,\"359\":1,\"362\":2,\"367\":2,\"373\":2,\"375\":1,\"379\":1,\"380\":2,\"392\":3,\"394\":2,\"402\":1,\"407\":2,\"412\":4,\"413\":1,\"414\":1,\"415\":1,\"417\":2,\"418\":1,\"422\":1,\"427\":3,\"428\":1,\"429\":3,\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"440\":1,\"444\":1,\"445\":1,\"456\":1,\"458\":1,\"469\":5,\"470\":1,\"477\":1,\"481\":1,\"489\":1,\"502\":1,\"513\":7,\"515\":1,\"516\":1,\"534\":2,\"538\":2,\"556\":3,\"558\":8,\"559\":2,\"560\":4,\"570\":1,\"574\":1,\"576\":1,\"580\":1,\"586\":4,\"587\":4,\"588\":1,\"591\":3,\"592\":1,\"619\":1,\"622\":1,\"626\":1,\"639\":1,\"641\":3,\"645\":3,\"658\":2,\"662\":1,\"664\":1,\"666\":1,\"676\":1,\"683\":1,\"685\":1,\"694\":2,\"707\":1,\"711\":1,\"718\":1,\"724\":8,\"725\":8,\"727\":2,\"729\":1,\"730\":1,\"731\":2,\"738\":2,\"748\":1,\"754\":1,\"755\":1,\"765\":1,\"777\":1,\"780\":1,\"788\":1,\"793\":4,\"813\":1,\"817\":2,\"820\":2,\"821\":1,\"826\":1,\"848\":1,\"877\":1,\"879\":10}}],[\"项目中\",{\"1\":{\"805\":1}}],[\"项目引入了\",{\"1\":{\"291\":1}}],[\"项目\",{\"1\":{\"11\":6,\"822\":1}}],[\"斜体\",{\"1\":{\"10\":1}}],[\"粗体\",{\"1\":{\"10\":1}}],[\"标签有助于保持你的代码干净和连贯\",{\"1\":{\"744\":1}}],[\"标签\",{\"0\":{\"892\":1,\"900\":1,\"902\":1,\"904\":1,\"906\":1,\"908\":1,\"910\":1,\"912\":1,\"914\":1,\"916\":1,\"918\":1,\"920\":1,\"922\":1,\"924\":1,\"926\":1,\"928\":1,\"930\":1,\"932\":1},\"1\":{\"670\":1,\"744\":1}}],[\"标识切面\",{\"1\":{\"805\":1}}],[\"标识的是\",{\"1\":{\"557\":1}}],[\"标识符\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"标识符与关键字\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"标量替换\",{\"1\":{\"408\":1}}],[\"标志是否等于预期标志\",{\"1\":{\"336\":1}}],[\"标记为\",{\"1\":{\"765\":1}}],[\"标记为可读或可写\",{\"1\":{\"664\":1}}],[\"标记再并发标记过程中产生的垃圾\",{\"1\":{\"404\":1}}],[\"标记了从\",{\"1\":{\"404\":1}}],[\"标记并发标记阶段产生对象\",{\"1\":{\"403\":1}}],[\"标记出所有需要回收的对象\",{\"1\":{\"395\":1}}],[\"标记\",{\"1\":{\"395\":11,\"403\":1}}],[\"标记自身也可以设置一些值\",{\"1\":{\"287\":1}}],[\"标记不支持随机访问\",{\"1\":{\"154\":1}}],[\"标准语法中的内容均不受支持\",{\"1\":{\"14\":1}}],[\"标题默认会自动转换为大写\",{\"1\":{\"10\":1}}],[\"标注水平幻灯片\",{\"1\":{\"7\":1}}],[\"标注幻灯片\",{\"0\":{\"6\":1,\"7\":1}}],[\"mvc\",{\"0\":{\"814\":1,\"815\":1,\"816\":1},\"1\":{\"783\":2,\"784\":1,\"785\":1,\"798\":1,\"816\":1}}],[\"mvcc\",{\"0\":{\"523\":1},\"1\":{\"519\":3,\"523\":1}}],[\"mq\",{\"1\":{\"777\":1}}],[\"mqset\",{\"1\":{\"777\":3}}],[\"mq核心中去实现jms等接口\",{\"1\":{\"742\":1}}],[\"mq功能较为完善\",{\"1\":{\"742\":1}}],[\"mq消费者在读取消息时\",{\"1\":{\"224\":1}}],[\"mq消息事务了解吗\",{\"0\":{\"206\":1}}],[\"mq消息事务\",{\"1\":{\"201\":1}}],[\"mmap\",{\"1\":{\"662\":2}}],[\"mm\",{\"1\":{\"463\":2}}],[\"msgs\",{\"1\":{\"762\":1}}],[\"mss\",{\"1\":{\"581\":1,\"584\":2,\"586\":2,\"587\":1,\"595\":2}}],[\"msl\",{\"1\":{\"576\":3}}],[\"ms\",{\"1\":{\"448\":4,\"778\":1,\"805\":1}}],[\"ms时间内被其它线程唤醒\",{\"1\":{\"302\":1}}],[\"mbd\",{\"1\":{\"802\":3}}],[\"mb\",{\"1\":{\"407\":1}}],[\"mn\",{\"1\":{\"215\":2,\"216\":2}}],[\"myservicemethod\",{\"1\":{\"858\":1}}],[\"myservice\",{\"1\":{\"858\":1}}],[\"mysql各自的承受能力都不一样\",{\"1\":{\"740\":1}}],[\"mysql面试题八股文\",{\"1\":{\"623\":1}}],[\"mysqld\",{\"1\":{\"538\":2}}],[\"mysqldumpslow\",{\"1\":{\"485\":1}}],[\"mysql会额外搜索包含null值的行\",{\"1\":{\"493\":1}}],[\"mysql5\",{\"1\":{\"475\":1,\"510\":1}}],[\"mysql8\",{\"1\":{\"473\":1,\"477\":1}}],[\"mysql支持values\",{\"1\":{\"445\":1}}],[\"mysql下批量保存\",{\"1\":{\"445\":1}}],[\"mysqlintegrityconstraintviolationexception异常\",{\"1\":{\"225\":1}}],[\"mysql分布式锁如何实现呢\",{\"0\":{\"196\":1}}],[\"mysql分布式锁\",{\"1\":{\"195\":1}}],[\"mysql\",{\"0\":{\"459\":1,\"464\":1,\"465\":1,\"466\":1,\"472\":1,\"473\":1,\"475\":1,\"479\":1,\"501\":1,\"512\":1,\"515\":1,\"516\":1,\"518\":1,\"520\":1,\"538\":1},\"1\":{\"186\":1,\"227\":1,\"294\":1,\"373\":1,\"389\":1,\"429\":1,\"445\":1,\"453\":1,\"454\":1,\"456\":2,\"459\":2,\"464\":1,\"465\":2,\"466\":2,\"472\":4,\"473\":1,\"475\":1,\"476\":1,\"479\":4,\"481\":1,\"485\":1,\"489\":3,\"490\":1,\"491\":1,\"492\":2,\"493\":6,\"494\":1,\"496\":2,\"497\":1,\"498\":2,\"500\":1,\"501\":1,\"510\":6,\"513\":1,\"519\":3,\"520\":1,\"523\":1,\"536\":1,\"538\":2,\"617\":1,\"620\":1,\"623\":1,\"624\":1,\"664\":1,\"724\":1,\"736\":1,\"778\":1,\"810\":1,\"824\":1,\"836\":2,\"877\":1}}],[\"myexception\",{\"1\":{\"813\":1}}],[\"mybeanpostprocessor\",{\"1\":{\"793\":3}}],[\"mybatis面试题八股文\",{\"1\":{\"623\":1}}],[\"mybatis使用rowbounds对象进行分页\",{\"1\":{\"454\":1}}],[\"mybatis使用jdk的动态代理\",{\"1\":{\"453\":1}}],[\"mybatis使用过程\",{\"0\":{\"435\":1}}],[\"mybatis会话的运行需要parameterhandler\",{\"1\":{\"453\":1}}],[\"mybatis中如何指定使用哪一种executor执行器\",{\"1\":{\"451\":1}}],[\"mybatis中有一些支持动态sql的标签\",{\"1\":{\"444\":1}}],[\"mybatis有三种基本的executor执行器\",{\"1\":{\"451\":1}}],[\"mybatis都有哪些executor执行器\",{\"0\":{\"451\":1}}],[\"mybatis的功能架构是什么样的\",{\"0\":{\"449\":1}}],[\"mybatis为我们提供了一个defaultresultsethandler\",{\"1\":{\"448\":1}}],[\"mybatis默认打开一级缓存\",{\"1\":{\"446\":1}}],[\"mybatis内置的executortype有3种\",{\"1\":{\"445\":1}}],[\"mybatis如何执行批量操作\",{\"0\":{\"445\":1}}],[\"mybatis支持动态sql吗\",{\"0\":{\"444\":1}}],[\"mybatis支持association关联对象和collection关联集合对象的延迟加载\",{\"1\":{\"442\":1}}],[\"mybatis能执行一对一\",{\"0\":{\"441\":1}}],[\"mybatis在处理\",{\"1\":{\"439\":1}}],[\"mybatis可以映射任何对象到表的一列上\",{\"1\":{\"438\":1}}],[\"mybatis当然可以映射枚举类\",{\"1\":{\"438\":1}}],[\"mybatis是如何分页的\",{\"1\":{\"454\":1}}],[\"mybatis是如何进行分页的\",{\"0\":{\"454\":1}}],[\"mybatis是如何解决的\",{\"1\":{\"433\":1}}],[\"mybatis是一个成熟的框架\",{\"1\":{\"448\":1}}],[\"mybatis是否支持延迟加载\",{\"0\":{\"442\":1}}],[\"mybatis是否可以映射enum枚举类\",{\"0\":{\"438\":1}}],[\"mybatis通常也是和spring集成使用\",{\"1\":{\"435\":1}}],[\"mybatis生命周期\",{\"1\":{\"435\":1}}],[\"mybatis基本使用的过程大概可以分为这么几步\",{\"1\":{\"435\":1}}],[\"mybatis和hibernate的适用场景不同\",{\"1\":{\"434\":1}}],[\"mybatis自动将sql执行结果映射至java对象\",{\"1\":{\"433\":1}}],[\"mybatis自动将java对象映射至sql语句\",{\"1\":{\"433\":1}}],[\"mybatis查询返回list集合\",{\"0\":{\"94\":1}}],[\"mybatis查询条件list集合\",{\"0\":{\"85\":1}}],[\"mybatis\",{\"0\":{\"49\":1,\"434\":1},\"1\":{\"49\":2,\"186\":1,\"227\":1,\"289\":1,\"294\":1,\"373\":1,\"429\":1,\"431\":2,\"433\":2,\"434\":4,\"435\":3,\"445\":1,\"448\":4,\"454\":1,\"538\":1,\"617\":1,\"620\":1,\"623\":1,\"624\":1,\"664\":1,\"736\":1,\"778\":1,\"782\":1,\"824\":1,\"877\":1}}],[\"mycat\",{\"1\":{\"533\":1}}],[\"myisam\",{\"1\":{\"476\":1,\"477\":8,\"480\":1,\"506\":1}}],[\"myinterceptor\",{\"1\":{\"453\":2}}],[\"mylsam\",{\"0\":{\"477\":1},\"1\":{\"475\":2,\"477\":1}}],[\"myplugin\",{\"1\":{\"453\":1}}],[\"myheapdump\",{\"1\":{\"415\":1}}],[\"mythread\",{\"1\":{\"300\":3}}],[\"myanmar\",{\"1\":{\"64\":1}}],[\"mcdonald\",{\"1\":{\"64\":1}}],[\"m\",{\"1\":{\"64\":1,\"213\":1,\"458\":2,\"523\":3,\"676\":1}}],[\"multi命令代表事务开始\",{\"1\":{\"724\":1}}],[\"multi\",{\"1\":{\"217\":2,\"523\":1,\"724\":1}}],[\"multiplication\",{\"1\":{\"64\":1}}],[\"mutex\",{\"1\":{\"712\":1}}],[\"mute\",{\"1\":{\"64\":1}}],[\"musical\",{\"1\":{\"64\":3}}],[\"mushroom\",{\"1\":{\"64\":1}}],[\"muscle\",{\"1\":{\"64\":1}}],[\"mixed\",{\"0\":{\"397\":1},\"1\":{\"397\":1}}],[\"mission\",{\"1\":{\"381\":1,\"411\":1}}],[\"miquelon\",{\"1\":{\"64\":1}}],[\"minor\",{\"0\":{\"397\":1,\"398\":1,\"416\":1},\"1\":{\"397\":1,\"416\":3}}],[\"minutes\",{\"1\":{\"354\":1}}],[\"minus\",{\"1\":{\"64\":1}}],[\"min\",{\"1\":{\"137\":11,\"140\":11,\"147\":11,\"523\":3,\"585\":1,\"879\":11}}],[\"mini\",{\"1\":{\"788\":1}}],[\"minidisc\",{\"1\":{\"64\":1}}],[\"minibus\",{\"1\":{\"64\":1}}],[\"microservices\",{\"1\":{\"828\":1}}],[\"microseconds\",{\"1\":{\"354\":1}}],[\"microscope\",{\"1\":{\"64\":1}}],[\"micronesia\",{\"1\":{\"64\":1}}],[\"microphone\",{\"1\":{\"64\":2}}],[\"microbe\",{\"1\":{\"64\":1}}],[\"mirror\",{\"1\":{\"64\":2}}],[\"milliseconds没有进行有效回复\",{\"1\":{\"688\":1}}],[\"milliseconds\",{\"1\":{\"354\":1,\"362\":1,\"363\":1,\"690\":1}}],[\"millis\",{\"1\":{\"302\":1,\"306\":2}}],[\"military\",{\"1\":{\"64\":2}}],[\"milky\",{\"1\":{\"64\":1}}],[\"milk\",{\"1\":{\"64\":1}}],[\"middle\",{\"1\":{\"64\":1,\"373\":3}}],[\"mx\",{\"1\":{\"64\":1}}],[\"mesh\",{\"1\":{\"831\":3}}],[\"messagesource\",{\"1\":{\"791\":1}}],[\"messageselector\",{\"1\":{\"762\":1}}],[\"messagefilter\",{\"1\":{\"778\":1}}],[\"messagequeue\",{\"1\":{\"776\":2,\"777\":1}}],[\"messagequeueselector\",{\"1\":{\"760\":1}}],[\"messagedelaylevel\",{\"1\":{\"763\":1}}],[\"messagelistenerconcurrently\",{\"1\":{\"762\":1}}],[\"messagelistenerorderly\",{\"1\":{\"760\":1}}],[\"message\",{\"1\":{\"608\":1,\"609\":1,\"744\":6,\"760\":3,\"763\":6,\"795\":4}}],[\"meet\",{\"1\":{\"697\":1}}],[\"mem\",{\"1\":{\"418\":2}}],[\"memory\",{\"1\":{\"317\":3,\"381\":1,\"475\":1,\"476\":1,\"651\":2}}],[\"memo\",{\"1\":{\"64\":1}}],[\"mexico\",{\"1\":{\"64\":1}}],[\"medium\",{\"1\":{\"64\":4}}],[\"medical\",{\"1\":{\"64\":1}}],[\"medal\",{\"1\":{\"64\":5}}],[\"mega\",{\"1\":{\"64\":1}}],[\"metrics\",{\"1\":{\"858\":1}}],[\"metro\",{\"1\":{\"64\":1}}],[\"metadata\",{\"1\":{\"792\":2,\"802\":3}}],[\"meta\",{\"1\":{\"381\":1,\"820\":1,\"821\":1}}],[\"metal\",{\"1\":{\"64\":1}}],[\"methods\",{\"1\":{\"813\":1}}],[\"method3\",{\"1\":{\"811\":1}}],[\"method2\",{\"1\":{\"811\":1}}],[\"methodx\",{\"1\":{\"811\":1}}],[\"methodproxy\",{\"1\":{\"806\":1}}],[\"methodinterceptor\",{\"1\":{\"806\":1}}],[\"method=\",{\"1\":{\"793\":2,\"795\":3}}],[\"method属性\",{\"1\":{\"793\":1}}],[\"method和destroy\",{\"1\":{\"793\":2}}],[\"methodcache\",{\"1\":{\"450\":1}}],[\"method1执行完成之后\",{\"1\":{\"389\":1}}],[\"method1\",{\"1\":{\"389\":1,\"811\":1}}],[\"method\",{\"1\":{\"72\":1,\"266\":4,\"267\":2,\"285\":3,\"324\":2,\"357\":1,\"379\":1,\"450\":14,\"453\":1,\"793\":1,\"805\":4,\"806\":6,\"813\":3,\"865\":1}}],[\"meat\",{\"1\":{\"64\":2}}],[\"melilla\",{\"1\":{\"64\":1}}],[\"melon\",{\"1\":{\"64\":1}}],[\"melting\",{\"1\":{\"64\":1}}],[\"menorah\",{\"1\":{\"64\":1}}],[\"mens\",{\"1\":{\"64\":1}}],[\"men\",{\"1\":{\"64\":3}}],[\"mending\",{\"1\":{\"64\":1}}],[\"merge\",{\"1\":{\"493\":3}}],[\"meridians\",{\"1\":{\"64\":1}}],[\"mermaid\",{\"1\":{\"64\":1}}],[\"merman\",{\"1\":{\"64\":1}}],[\"merperson\",{\"1\":{\"64\":1}}],[\"mechanic\",{\"1\":{\"64\":3}}],[\"mechanical\",{\"1\":{\"64\":2}}],[\"me\",{\"1\":{\"64\":1,\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"mozilla\",{\"1\":{\"556\":1}}],[\"mozambique\",{\"1\":{\"64\":1}}],[\"moved\",{\"1\":{\"181\":1}}],[\"movie\",{\"1\":{\"64\":1}}],[\"modifier\",{\"1\":{\"813\":1}}],[\"modified\",{\"1\":{\"556\":2}}],[\"modification\",{\"1\":{\"157\":3}}],[\"modify\",{\"1\":{\"466\":1}}],[\"modcount\",{\"1\":{\"157\":2}}],[\"modealandview\",{\"1\":{\"817\":1}}],[\"modelandview\",{\"1\":{\"815\":1,\"816\":2,\"817\":2}}],[\"model\",{\"1\":{\"317\":1,\"816\":1}}],[\"mode\",{\"1\":{\"64\":1}}],[\"moldova\",{\"1\":{\"64\":1}}],[\"morocco\",{\"1\":{\"64\":1}}],[\"mortar\",{\"1\":{\"64\":1}}],[\"mobile\",{\"1\":{\"64\":2}}],[\"moyai\",{\"1\":{\"64\":1}}],[\"motorway\",{\"1\":{\"64\":1}}],[\"motor\",{\"1\":{\"64\":2}}],[\"motorcycle\",{\"1\":{\"64\":1}}],[\"motorized\",{\"1\":{\"64\":4}}],[\"mosque\",{\"1\":{\"64\":1}}],[\"mosquito\",{\"1\":{\"64\":1}}],[\"moon\",{\"1\":{\"64\":15}}],[\"moose\",{\"1\":{\"64\":1}}],[\"mount\",{\"1\":{\"64\":1}}],[\"mountains\",{\"1\":{\"64\":1}}],[\"mountain\",{\"1\":{\"64\":7}}],[\"mouse2\",{\"1\":{\"64\":1}}],[\"mouse\",{\"1\":{\"64\":3}}],[\"mouth\",{\"1\":{\"64\":7}}],[\"monitor命令可以监控到redis执行的所有命令\",{\"1\":{\"710\":1}}],[\"monitoring\",{\"1\":{\"687\":1,\"858\":1}}],[\"monitor\",{\"1\":{\"325\":3}}],[\"monitor是由objectmonitor实现的\",{\"1\":{\"325\":1}}],[\"monitorexit或者acc\",{\"1\":{\"325\":1}}],[\"monitorexit\",{\"1\":{\"325\":2}}],[\"monitorexit两个指令来实现同步\",{\"1\":{\"325\":1}}],[\"monitorenter\",{\"1\":{\"325\":3}}],[\"month\",{\"1\":{\"489\":1}}],[\"montserrat\",{\"1\":{\"64\":1}}],[\"montenegro\",{\"1\":{\"64\":1}}],[\"mongolia\",{\"1\":{\"64\":1}}],[\"monaco\",{\"1\":{\"64\":1}}],[\"monolithic\",{\"1\":{\"828\":1}}],[\"monorail\",{\"1\":{\"64\":1}}],[\"monocle\",{\"1\":{\"64\":1}}],[\"monkey\",{\"1\":{\"64\":2}}],[\"moneybag\",{\"1\":{\"64\":1}}],[\"money\",{\"1\":{\"64\":2}}],[\"maven\",{\"1\":{\"819\":1,\"824\":1}}],[\"major\",{\"0\":{\"397\":1},\"1\":{\"397\":1}}],[\"maxmemory动态设置内存上限\",{\"1\":{\"715\":1}}],[\"maxmemory\",{\"1\":{\"715\":1}}],[\"maxgcpausemillis=n\",{\"1\":{\"412\":1}}],[\"maxtenuringthreshold\",{\"1\":{\"400\":2}}],[\"maxpermsize=n\",{\"1\":{\"412\":1}}],[\"maxpermsize\",{\"1\":{\"381\":1}}],[\"maximumpoolsize都不可用的时候执行的饱和策略\",{\"1\":{\"354\":1}}],[\"maximumpoolsize时候就会再次创建新的线程\",{\"1\":{\"354\":1}}],[\"maximumpoolsize表示允许的最大线程数\",{\"1\":{\"354\":1}}],[\"maximumpoolsize\",{\"1\":{\"352\":1,\"353\":3,\"354\":3}}],[\"maximum\",{\"1\":{\"169\":3,\"574\":1,\"576\":1}}],[\"max\",{\"1\":{\"137\":12,\"140\":12,\"147\":12,\"181\":1,\"270\":1,\"356\":1,\"364\":2,\"365\":2,\"523\":3,\"859\":1,\"879\":12}}],[\"main函数所在的线程就是一个用户线程\",{\"1\":{\"305\":1}}],[\"main\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"269\":1,\"276\":3,\"299\":2,\"300\":3,\"305\":1,\"315\":1,\"317\":1,\"345\":2,\"348\":1,\"349\":1,\"373\":1,\"388\":2,\"790\":1,\"791\":1,\"793\":2,\"806\":2,\"822\":1,\"879\":1}}],[\"mailbox\",{\"1\":{\"64\":4}}],[\"mail\",{\"1\":{\"64\":3,\"612\":6}}],[\"mayotte\",{\"1\":{\"64\":1}}],[\"mayen\",{\"1\":{\"64\":1}}],[\"maarten\",{\"1\":{\"64\":1}}],[\"mauritius\",{\"1\":{\"64\":1}}],[\"mauritania\",{\"1\":{\"64\":1}}],[\"malaysia\",{\"1\":{\"64\":1}}],[\"malawi\",{\"1\":{\"64\":1}}],[\"maldives\",{\"1\":{\"64\":1}}],[\"malta\",{\"1\":{\"64\":1}}],[\"mali\",{\"1\":{\"64\":1}}],[\"male\",{\"1\":{\"64\":2}}],[\"mac\",{\"0\":{\"607\":1},\"1\":{\"556\":1,\"605\":1,\"606\":8,\"607\":12,\"609\":4}}],[\"macintosh\",{\"1\":{\"556\":1}}],[\"macos\",{\"1\":{\"233\":1}}],[\"macau\",{\"1\":{\"64\":1}}],[\"macedonia\",{\"1\":{\"64\":1}}],[\"machine\",{\"1\":{\"64\":1,\"137\":1,\"140\":1,\"147\":1,\"233\":1,\"379\":1,\"879\":1}}],[\"madagascar\",{\"1\":{\"64\":1}}],[\"mahjong\",{\"1\":{\"64\":1}}],[\"magnet\",{\"1\":{\"64\":1}}],[\"mag\",{\"1\":{\"64\":2}}],[\"magic\",{\"1\":{\"64\":1}}],[\"mage\",{\"1\":{\"64\":3}}],[\"marino\",{\"1\":{\"64\":1}}],[\"mariana\",{\"1\":{\"64\":1}}],[\"marshall\",{\"1\":{\"64\":1}}],[\"martinique\",{\"1\":{\"64\":1}}],[\"martin\",{\"1\":{\"64\":1,\"824\":1}}],[\"martial\",{\"1\":{\"64\":1}}],[\"marked\",{\"1\":{\"813\":1}}],[\"marking\",{\"1\":{\"404\":1}}],[\"markword中锁标志是否为\",{\"1\":{\"328\":1}}],[\"mark\",{\"1\":{\"64\":5,\"325\":1,\"327\":2,\"329\":1,\"385\":1,\"390\":1,\"395\":2,\"401\":1,\"403\":3,\"404\":1,\"405\":1}}],[\"markdown\",{\"0\":{\"8\":1,\"9\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1},\"1\":{\"8\":1,\"9\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":2}}],[\"maracas\",{\"1\":{\"64\":1}}],[\"mat\",{\"1\":{\"411\":1,\"417\":1,\"418\":1}}],[\"match\",{\"1\":{\"294\":1}}],[\"mate\",{\"1\":{\"64\":1}}],[\"math\",{\"1\":{\"13\":1}}],[\"map的key就是参数名\",{\"1\":{\"445\":1}}],[\"map传参法\",{\"1\":{\"436\":1}}],[\"mappedbytebuffer\",{\"1\":{\"774\":1}}],[\"mappedstatement\",{\"1\":{\"448\":1,\"453\":1}}],[\"mappermethod里的excute方法\",{\"1\":{\"450\":1}}],[\"mappermethod\",{\"1\":{\"450\":1}}],[\"mapperinterface\",{\"1\":{\"450\":4}}],[\"mapper代理对象\",{\"1\":{\"450\":1}}],[\"mapper代理工厂\",{\"1\":{\"450\":1}}],[\"mapperregistry\",{\"1\":{\"450\":1}}],[\"mapperproxy里\",{\"1\":{\"450\":1}}],[\"mapperproxy\",{\"1\":{\"450\":6}}],[\"mapperproxy<t>\",{\"1\":{\"450\":2}}],[\"mapperproxyfactory的作用是生成mapperproxy\",{\"1\":{\"450\":1}}],[\"mapperproxyfactory\",{\"1\":{\"450\":5}}],[\"mapperproxyfactory<t>\",{\"1\":{\"450\":2}}],[\"mapperpublic\",{\"1\":{\"86\":1}}],[\"mapper映射其实是通过动态代理实现的\",{\"1\":{\"450\":1}}],[\"mapper>\",{\"1\":{\"445\":1}}],[\"mapper和mapper\",{\"1\":{\"445\":1}}],[\"mapper\",{\"1\":{\"87\":1,\"88\":1,\"435\":3,\"443\":1,\"445\":3,\"446\":1,\"450\":2}}],[\"mapper接口如下\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1}}],[\"mapping\",{\"1\":{\"186\":1,\"433\":1}}],[\"map中\",{\"1\":{\"160\":1}}],[\"map是另外的接口\",{\"1\":{\"152\":1}}],[\"map<string\",{\"1\":{\"86\":1,\"91\":1,\"95\":1,\"436\":1,\"788\":4,\"800\":3}}],[\"map\",{\"0\":{\"91\":1,\"160\":1},\"1\":{\"64\":1,\"91\":5,\"152\":1,\"178\":2,\"186\":1,\"294\":2,\"310\":3,\"436\":1}}],[\"maple\",{\"1\":{\"64\":1}}],[\"map集合在foreach由于没有默认键可用\",{\"1\":{\"86\":1}}],[\"map集合\",{\"0\":{\"85\":1,\"94\":1},\"1\":{\"49\":2}}],[\"mammoth\",{\"1\":{\"64\":1}}],[\"master会向slave同步消息\",{\"1\":{\"767\":1}}],[\"master角色的broker支持读和写\",{\"1\":{\"767\":1}}],[\"master和slave\",{\"1\":{\"767\":1}}],[\"master和slave异步复制模式\",{\"1\":{\"755\":1}}],[\"master<\",{\"1\":{\"720\":1}}],[\"master\",{\"1\":{\"527\":3,\"682\":1,\"684\":1,\"685\":1,\"688\":1,\"689\":2,\"720\":7,\"767\":6}}],[\"massage\",{\"1\":{\"64\":3}}],[\"mask\",{\"1\":{\"64\":2}}],[\"mao\",{\"1\":{\"64\":1}}],[\"manager\",{\"1\":{\"202\":2,\"208\":2,\"871\":4}}],[\"mans\",{\"1\":{\"64\":1}}],[\"mantelpiece\",{\"1\":{\"64\":1}}],[\"mango\",{\"1\":{\"64\":1}}],[\"mandarin\",{\"1\":{\"64\":1}}],[\"manual\",{\"1\":{\"64\":4}}],[\"man\",{\"1\":{\"64\":104,\"788\":3}}],[\"mrs\",{\"1\":{\"64\":1}}],[\"mr\",{\"1\":{\"5\":1}}],[\"hypertext\",{\"1\":{\"845\":1}}],[\"hyperloglog\",{\"1\":{\"668\":1}}],[\"hystrix将每个依赖服务的请求都放在独立的线程池中执行\",{\"1\":{\"858\":1}}],[\"hystrix提供了实时监控和度量功能\",{\"1\":{\"858\":1}}],[\"hystrix可以将多个并发的请求合并为一个批量请求\",{\"1\":{\"858\":1}}],[\"hystrix可以缓存对同一请求的响应结果\",{\"1\":{\"858\":1}}],[\"hystrix可以提供一个备用的降级方法或返回默认值\",{\"1\":{\"858\":1}}],[\"hystrixcommand\",{\"1\":{\"858\":2}}],[\"hystrix通过设置阈值来监控服务的错误率或响应时间\",{\"1\":{\"858\":1}}],[\"hystrix怎么实现服务容错\",{\"0\":{\"858\":1}}],[\"hystrix\",{\"1\":{\"830\":1,\"831\":2,\"832\":2,\"857\":1,\"858\":1}}],[\"hystrix等组件\",{\"1\":{\"830\":1}}],[\"hyacinth\",{\"1\":{\"64\":1}}],[\"href=\",{\"1\":{\"615\":1}}],[\"h1\",{\"1\":{\"564\":2}}],[\"h2\",{\"1\":{\"544\":1,\"564\":2}}],[\"h20\",{\"1\":{\"417\":1}}],[\"h4\",{\"1\":{\"544\":1}}],[\"h5\",{\"1\":{\"544\":1,\"548\":1}}],[\"hh\",{\"1\":{\"463\":1}}],[\"hql\",{\"1\":{\"434\":1}}],[\"hprof\",{\"1\":{\"415\":1}}],[\"hp\",{\"1\":{\"414\":1,\"418\":1}}],[\"h\",{\"1\":{\"164\":2,\"166\":3,\"167\":2,\"170\":1,\"718\":1,\"731\":1}}],[\"ht\",{\"1\":{\"729\":1,\"731\":1}}],[\"http方法\",{\"1\":{\"847\":1}}],[\"http|rpc|\",{\"1\":{\"845\":1}}],[\"http和不是一个层面的东西\",{\"1\":{\"845\":1}}],[\"httpmessageconverter\",{\"1\":{\"817\":1}}],[\"httpd\",{\"1\":{\"560\":1}}],[\"http\",{\"0\":{\"550\":1,\"551\":1,\"552\":1,\"555\":1,\"556\":1,\"558\":1,\"559\":1,\"560\":1,\"561\":1,\"565\":1},\"1\":{\"542\":1,\"546\":3,\"548\":1,\"551\":2,\"553\":2,\"554\":1,\"555\":2,\"556\":12,\"558\":8,\"559\":6,\"560\":7,\"561\":6,\"562\":2,\"565\":1,\"613\":3,\"793\":4,\"797\":4,\"805\":2,\"824\":2,\"830\":1,\"836\":4,\"845\":1}}],[\"httpservletrequest\",{\"1\":{\"805\":1}}],[\"https\",{\"0\":{\"561\":1,\"562\":1,\"563\":1},\"1\":{\"107\":1,\"115\":1,\"352\":1,\"559\":1,\"561\":4,\"562\":2,\"563\":2,\"564\":1,\"673\":1,\"847\":1}}],[\"html>\",{\"1\":{\"556\":1}}],[\"htmljavascript\",{\"1\":{\"134\":1}}],[\"html\",{\"0\":{\"912\":1},\"1\":{\"7\":1,\"27\":1,\"33\":1,\"557\":1,\"560\":1,\"615\":4},\"2\":{\"69\":1,\"136\":1}}],[\"hessian等\",{\"1\":{\"846\":1}}],[\"hessian\",{\"1\":{\"830\":1}}],[\"herzegovina\",{\"1\":{\"64\":1}}],[\"herb\",{\"1\":{\"64\":1}}],[\"helptransfer\",{\"1\":{\"181\":2}}],[\"hellotest\",{\"1\":{\"821\":1}}],[\"hellopropertiesconfigure\",{\"1\":{\"821\":3}}],[\"helloproperties\",{\"1\":{\"821\":4}}],[\"helloworldapp\",{\"1\":{\"790\":1,\"791\":1}}],[\"helloworld\",{\"1\":{\"428\":1,\"790\":3,\"791\":3}}],[\"hello\",{\"1\":{\"137\":9,\"140\":9,\"147\":9,\"266\":3,\"285\":2,\"300\":1,\"688\":1,\"763\":1,\"784\":1,\"805\":3,\"821\":3,\"879\":9}}],[\"helena\",{\"1\":{\"64\":1}}],[\"helmet\",{\"1\":{\"64\":2}}],[\"helicopter\",{\"1\":{\"64\":1}}],[\"heel\",{\"1\":{\"64\":1}}],[\"hedgehog\",{\"1\":{\"64\":1}}],[\"heapoom\",{\"1\":{\"388\":1}}],[\"heap\",{\"1\":{\"379\":2,\"418\":3}}],[\"health\",{\"1\":{\"64\":3}}],[\"heavy\",{\"1\":{\"64\":9}}],[\"heard\",{\"1\":{\"64\":1}}],[\"hearing\",{\"1\":{\"64\":1}}],[\"hear\",{\"1\":{\"64\":1}}],[\"heartbeat\",{\"1\":{\"64\":1,\"222\":1}}],[\"heartpulse\",{\"1\":{\"64\":1}}],[\"heart\",{\"1\":{\"64\":28}}],[\"hearts\",{\"1\":{\"64\":4}}],[\"header\",{\"1\":{\"325\":1,\"385\":1,\"560\":1,\"566\":1,\"849\":1,\"865\":1}}],[\"heading\",{\"1\":{\"64\":2}}],[\"headstone\",{\"1\":{\"64\":1}}],[\"headscarf\",{\"1\":{\"64\":1}}],[\"headphones\",{\"1\":{\"64\":1}}],[\"head\",{\"1\":{\"64\":3,\"331\":2,\"415\":1,\"417\":1}}],[\"higress\",{\"1\":{\"831\":1}}],[\"high\",{\"1\":{\"64\":2}}],[\"highlight\",{\"1\":{\"12\":1,\"25\":6,\"36\":1}}],[\"hierachicalbeanfactory\",{\"1\":{\"791\":1}}],[\"hibernate\",{\"0\":{\"434\":1},\"1\":{\"434\":4,\"526\":1,\"782\":1,\"783\":1}}],[\"hibernate属于全自动orm映射工具\",{\"1\":{\"433\":1}}],[\"hibiscus\",{\"1\":{\"64\":1}}],[\"histo\",{\"1\":{\"415\":1,\"417\":2,\"418\":1}}],[\"hiking\",{\"1\":{\"64\":1}}],[\"hindu\",{\"1\":{\"64\":1}}],[\"hippopotamus\",{\"1\":{\"64\":1}}],[\"hungary\",{\"1\":{\"64\":1}}],[\"hut\",{\"1\":{\"64\":1}}],[\"hugepages的\",{\"1\":{\"718\":1}}],[\"hugepage写操作阻塞\",{\"1\":{\"718\":1}}],[\"hugging\",{\"1\":{\"64\":1}}],[\"hugs\",{\"1\":{\"64\":1}}],[\"hushed\",{\"1\":{\"64\":1}}],[\"having\",{\"1\":{\"470\":2}}],[\"hasinstawarebpps\",{\"1\":{\"802\":1}}],[\"hasnext\",{\"1\":{\"788\":1,\"802\":1}}],[\"has\",{\"1\":{\"778\":1,\"813\":1}}],[\"hassuspendflag\",{\"1\":{\"778\":1}}],[\"hasresulthandler\",{\"1\":{\"450\":1}}],[\"hashicorp\",{\"1\":{\"835\":1}}],[\"hash表使⽤链地址法来解决键冲突\",{\"1\":{\"729\":1}}],[\"hash计算后应该落入第\",{\"1\":{\"313\":1}}],[\"hash分布非常均匀\",{\"1\":{\"312\":1}}],[\"hash增量为\",{\"1\":{\"312\":1}}],[\"hashset的add方法\",{\"1\":{\"186\":1}}],[\"hashset⾃⼰不得不实现之外\",{\"1\":{\"186\":1}}],[\"hashset\",{\"1\":{\"186\":2,\"389\":1}}],[\"hash一样就覆盖\",{\"1\":{\"181\":1}}],[\"hashentry本身就是一个链表的结构\",{\"1\":{\"180\":1}}],[\"hashtable\",{\"1\":{\"178\":2,\"731\":1}}],[\"hashcode\",{\"0\":{\"258\":1},\"1\":{\"164\":1,\"166\":1,\"167\":1,\"176\":1,\"257\":1,\"258\":16,\"272\":1,\"771\":1}}],[\"hashmap是无序的\",{\"1\":{\"182\":1}}],[\"hashmap是基于数组+链表和红黑树实现的\",{\"1\":{\"174\":1}}],[\"hashmap不是线程安全的\",{\"1\":{\"177\":1}}],[\"hashmap使用链表的原因为了处理哈希冲突\",{\"1\":{\"171\":1}}],[\"hashmap里哈希构造函数的方法叫\",{\"1\":{\"170\":1}}],[\"hashmap会向上寻找离得最近的2的倍数\",{\"1\":{\"169\":1}}],[\"hashmap大小时就会产生扩容\",{\"1\":{\"168\":1}}],[\"hashmap中的元素在超过负载因子\",{\"1\":{\"168\":1}}],[\"hashmap的散列构造方式是hash取余\",{\"1\":{\"173\":1}}],[\"hashmap的容量是2的n次幂时\",{\"1\":{\"168\":1}}],[\"hashmap的哈希函数是先拿到\",{\"1\":{\"166\":1}}],[\"hashmap的哈希\",{\"0\":{\"166\":1}}],[\"hashmap的查找就简单很多\",{\"1\":{\"165\":1}}],[\"hashmap的put流程知道吗\",{\"0\":{\"164\":1}}],[\"hashmap怎么查找元素的呢\",{\"0\":{\"165\":1}}],[\"hashmap\",{\"0\":{\"177\":1,\"182\":1},\"1\":{\"95\":1,\"97\":1,\"167\":2,\"169\":1,\"177\":1,\"183\":1,\"186\":2,\"258\":1,\"272\":1,\"389\":1,\"446\":2,\"731\":1,\"788\":1}}],[\"hashmap<>\",{\"0\":{\"169\":1},\"1\":{\"91\":1,\"788\":3}}],[\"hash\",{\"0\":{\"505\":1},\"1\":{\"64\":1,\"164\":2,\"166\":1,\"167\":1,\"175\":2,\"181\":1,\"182\":1,\"257\":1,\"312\":2,\"389\":3,\"464\":1,\"505\":5,\"529\":1,\"530\":1,\"531\":7,\"564\":6,\"668\":1,\"670\":1,\"693\":1,\"694\":3,\"719\":1,\"731\":1,\"851\":1}}],[\"hah\",{\"1\":{\"389\":1}}],[\"harreturnvaluetask\",{\"1\":{\"357\":1}}],[\"happens\",{\"0\":{\"320\":1},\"1\":{\"320\":10}}],[\"haiti\",{\"1\":{\"64\":1}}],[\"haircut\",{\"1\":{\"64\":3}}],[\"hair\",{\"1\":{\"64\":4}}],[\"haired\",{\"1\":{\"64\":9}}],[\"hamsa\",{\"1\":{\"64\":1}}],[\"hamster\",{\"1\":{\"64\":1}}],[\"hammer\",{\"1\":{\"64\":3}}],[\"hamburger\",{\"1\":{\"64\":1}}],[\"hankey\",{\"1\":{\"64\":1}}],[\"handleoutputparameters\",{\"1\":{\"448\":1}}],[\"handlecursorresultsets\",{\"1\":{\"448\":1}}],[\"handlermethodreturnvaluehandler\",{\"1\":{\"817\":1}}],[\"handlermapping\",{\"1\":{\"815\":2,\"816\":1,\"817\":1}}],[\"handlerapater\",{\"1\":{\"815\":1}}],[\"handleradapter\",{\"1\":{\"815\":2,\"816\":2,\"817\":3}}],[\"handlerexecutionchain\",{\"1\":{\"815\":1}}],[\"handleresultsets这个方法就是用来包装结果集的\",{\"1\":{\"448\":1}}],[\"handleresultsets\",{\"1\":{\"448\":2}}],[\"handlerinterceptor\",{\"1\":{\"815\":3}}],[\"handler\",{\"1\":{\"354\":1,\"448\":3,\"815\":6,\"816\":1,\"865\":1}}],[\"handler这四个\",{\"1\":{\"354\":1}}],[\"handbag\",{\"1\":{\"64\":1}}],[\"handball\",{\"1\":{\"64\":3}}],[\"handshake\",{\"1\":{\"64\":1}}],[\"hands\",{\"1\":{\"64\":6}}],[\"hand\",{\"1\":{\"64\":24}}],[\"hatched\",{\"1\":{\"64\":1}}],[\"hatching\",{\"1\":{\"64\":1}}],[\"hat\",{\"1\":{\"64\":2}}],[\"host\",{\"1\":{\"556\":1}}],[\"hospital\",{\"1\":{\"64\":1}}],[\"home\",{\"1\":{\"415\":1,\"771\":1}}],[\"honduras\",{\"1\":{\"64\":1}}],[\"hong\",{\"1\":{\"64\":1}}],[\"honey\",{\"1\":{\"64\":1}}],[\"honeybee\",{\"1\":{\"64\":1}}],[\"hook\",{\"1\":{\"64\":3}}],[\"horn\",{\"1\":{\"64\":1}}],[\"horse\",{\"1\":{\"64\":3}}],[\"hockey\",{\"1\":{\"64\":2}}],[\"hocho\",{\"1\":{\"64\":1}}],[\"hours\",{\"1\":{\"354\":1}}],[\"hourglass\",{\"1\":{\"64\":2}}],[\"house\",{\"1\":{\"64\":3}}],[\"houses\",{\"1\":{\"64\":1}}],[\"hold\",{\"1\":{\"778\":1,\"843\":1}}],[\"hold起来\",{\"1\":{\"778\":1}}],[\"holding\",{\"1\":{\"64\":4}}],[\"hollis\",{\"1\":{\"429\":2}}],[\"hole\",{\"1\":{\"64\":1}}],[\"hotspot虚拟机开发团队对java中的锁进行优化\",{\"1\":{\"327\":1}}],[\"hotspot\",{\"1\":{\"325\":1,\"381\":4,\"385\":1,\"386\":1,\"388\":1,\"400\":2,\"402\":2}}],[\"hotsprings\",{\"1\":{\"64\":1}}],[\"hotjava浏览器\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"hotel\",{\"1\":{\"64\":2}}],[\"hotdog\",{\"1\":{\"64\":1}}],[\"hot\",{\"1\":{\"64\":2,\"427\":2}}],[\"hope\",{\"1\":{\"5\":1}}],[\"h3\",{\"0\":{\"10\":1}}],[\"在预提交阶段成功后\",{\"1\":{\"871\":1}}],[\"在xa模式中\",{\"1\":{\"870\":1}}],[\"在at模式下\",{\"1\":{\"870\":1}}],[\"在saga模式中\",{\"1\":{\"870\":1}}],[\"在spring\",{\"1\":{\"865\":1}}],[\"在sentinel的配置文件中定义资源的限流规则\",{\"1\":{\"859\":1}}],[\"在sentinel中\",{\"1\":{\"859\":1}}],[\"在feign中\",{\"1\":{\"850\":1}}],[\"在拦截器里\",{\"1\":{\"849\":1}}],[\"在长轮询模式下\",{\"1\":{\"843\":1}}],[\"在长连接的业务里往往不需要考虑\",{\"1\":{\"579\":1}}],[\"在服务注册和发现上\",{\"1\":{\"837\":1}}],[\"在服务层进行语句的解析和执行\",{\"1\":{\"481\":1}}],[\"在面试中\",{\"1\":{\"831\":1}}],[\"在近两年\",{\"1\":{\"830\":1}}],[\"在微服务中\",{\"1\":{\"853\":1,\"867\":1}}],[\"在微服务体系里\",{\"1\":{\"845\":1}}],[\"在微服务的架构演进中\",{\"1\":{\"828\":1}}],[\"在微观上就能同时执行多条指令\",{\"1\":{\"635\":1}}],[\"在配置文件里添加配置\",{\"1\":{\"821\":1}}],[\"在目标方法执行前后进行拦截\",{\"1\":{\"813\":1}}],[\"在目前所有的版本中都是不可以的\",{\"1\":{\"242\":1}}],[\"在容器启动时需要生成代理实例\",{\"1\":{\"807\":1}}],[\"在性能上\",{\"1\":{\"807\":1}}],[\"在性能方面\",{\"1\":{\"726\":1}}],[\"在次过程\",{\"1\":{\"806\":1}}],[\"在切点之后织入\",{\"1\":{\"805\":1}}],[\"在切点之前织入\",{\"1\":{\"805\":2}}],[\"在切换的过程中\",{\"1\":{\"636\":1}}],[\"在织入切面时\",{\"1\":{\"804\":1}}],[\"在该方法中\",{\"1\":{\"802\":1}}],[\"在该方法中就会进行\",{\"1\":{\"802\":1}}],[\"在相应的地方使用注解修饰\",{\"1\":{\"794\":1}}],[\"在它初始化的时候\",{\"1\":{\"788\":1}}],[\"在它们结束后都可以执行特定动作\",{\"1\":{\"346\":1}}],[\"在要开启事务的方法上使用\",{\"1\":{\"784\":1}}],[\"在要进行\",{\"1\":{\"399\":1}}],[\"在方法调用上也会增加栈的深度\",{\"1\":{\"807\":1}}],[\"在方法执行之前与之后执行\",{\"1\":{\"784\":1}}],[\"在方法执行之前执行\",{\"1\":{\"784\":1}}],[\"在方法执行之后执行\",{\"1\":{\"784\":1}}],[\"在方法中分配后\",{\"1\":{\"408\":1}}],[\"在销毁之前执行\",{\"1\":{\"784\":1}}],[\"在构造之后执行\",{\"1\":{\"784\":1}}],[\"在pull模式的不用管\",{\"1\":{\"777\":1}}],[\"在page\",{\"1\":{\"772\":1}}],[\"在paxos中有这么几个角色\",{\"1\":{\"213\":1}}],[\"在随机递增取模的基础上\",{\"1\":{\"776\":1}}],[\"在获取了topicpublishinfo路由信息后\",{\"1\":{\"776\":1}}],[\"在获取到域名信息后\",{\"1\":{\"612\":1}}],[\"在broker把消息写到commitlog映射区后\",{\"1\":{\"774\":1}}],[\"在消息的存取时直接操作的是内存\",{\"1\":{\"774\":1}}],[\"在消息达到broker的内存之后\",{\"1\":{\"774\":1}}],[\"在消费过程中\",{\"1\":{\"760\":1}}],[\"在操作系统中\",{\"1\":{\"773\":1}}],[\"在创建代理对象时所花费的时间却比\",{\"1\":{\"806\":1}}],[\"在创建\",{\"1\":{\"767\":1,\"799\":1,\"802\":1}}],[\"在生产阶段\",{\"1\":{\"754\":1}}],[\"在启动时会向\",{\"1\":{\"748\":1}}],[\"在tcc模式中\",{\"1\":{\"870\":1}}],[\"在topic的消费过程中\",{\"1\":{\"744\":1}}],[\"在thread\",{\"1\":{\"315\":1}}],[\"在thread类里还有另外一个变量\",{\"1\":{\"315\":1}}],[\"在threadlocalmap\",{\"1\":{\"314\":1}}],[\"在rocketmq中\",{\"1\":{\"772\":1,\"777\":1}}],[\"在rocketmq的术语表中\",{\"1\":{\"744\":1}}],[\"在redis2\",{\"1\":{\"198\":1}}],[\"在大部分情况下\",{\"1\":{\"792\":1}}],[\"在大量交易涌入时\",{\"1\":{\"742\":1}}],[\"在大选期间\",{\"1\":{\"221\":1}}],[\"在客户端做一次去重就可以了\",{\"1\":{\"736\":1}}],[\"在客户端下次向同一服务器再发起请求时\",{\"1\":{\"566\":1}}],[\"在复杂度与红黑树相同的情况下\",{\"1\":{\"732\":1}}],[\"在复制的基础上\",{\"1\":{\"687\":1}}],[\"在高并发的情况下\",{\"1\":{\"732\":1}}],[\"在扩容的时候\",{\"1\":{\"731\":1}}],[\"在扩容时会保持链表元素原本的顺序\",{\"1\":{\"177\":1}}],[\"在缩容是也是先留着并不正式归还给\",{\"1\":{\"730\":1}}],[\"在同⼀个跳跃表中\",{\"1\":{\"729\":1}}],[\"在同一类内可见\",{\"1\":{\"250\":1}}],[\"在同一包内可见\",{\"1\":{\"250\":1}}],[\"在重写的时候会占大量的\",{\"1\":{\"720\":1}}],[\"在缓存失效的瞬间\",{\"1\":{\"712\":1}}],[\"在缓存中不存在对应的key\",{\"1\":{\"707\":1}}],[\"在日常的开发中\",{\"1\":{\"709\":1}}],[\"在业务系统内部暂时舍弃对一些非核心的接口和数据的请求\",{\"1\":{\"704\":1}}],[\"在投票选举的环节\",{\"1\":{\"698\":1}}],[\"在从节点列表中选出一个节点作为新的主节点\",{\"1\":{\"688\":1}}],[\"在从服务器上执行的时间稍长\",{\"1\":{\"528\":1}}],[\"在主从复制的基础上\",{\"1\":{\"682\":1}}],[\"在主线程的inheritablethreadlocal实例设置值\",{\"1\":{\"315\":1}}],[\"在linux\",{\"1\":{\"664\":1}}],[\"在发送消息前从\",{\"1\":{\"748\":1}}],[\"在发送确认报文的时候\",{\"1\":{\"583\":1}}],[\"在发布\",{\"1\":{\"743\":1}}],[\"在发⽣缺⻚中断时\",{\"1\":{\"658\":1}}],[\"在链表中找到⼀个⻚⾯\",{\"1\":{\"658\":1}}],[\"在每个微服务中配置日志输出\",{\"1\":{\"877\":1}}],[\"在每个volatile读操作的后面插入一个loadstore屏障\",{\"1\":{\"322\":1}}],[\"在每个volatile读操作的后面插入一个loadload屏障\",{\"1\":{\"322\":1}}],[\"在每个volatile写操作的后面插入一个storeload屏障\",{\"1\":{\"322\":1}}],[\"在每个volatile写操作的前面插入一个storestore屏障\",{\"1\":{\"322\":1}}],[\"在每次访问内存时都必须要更新整个链表\",{\"1\":{\"658\":1}}],[\"在理论上是可以实现的\",{\"1\":{\"658\":1}}],[\"在活锁状态下\",{\"1\":{\"649\":1}}],[\"在未改变这种状态之前都不能向前推进\",{\"1\":{\"646\":1}}],[\"在两种基于拉模式的消费方式\",{\"1\":{\"777\":1}}],[\"在两个或者多个并发线程中\",{\"1\":{\"646\":1}}],[\"在两张表进行连接查询时\",{\"1\":{\"459\":3}}],[\"在完成对临界资源的访问后再执⾏解锁操作\",{\"1\":{\"645\":1}}],[\"在⽤户空间实现线程\",{\"1\":{\"644\":1}}],[\"在内核⾥使⽤红⿊树来跟踪进程所有待检测的⽂件描述字\",{\"1\":{\"664\":1}}],[\"在内核空间实现的线程\",{\"1\":{\"644\":1}}],[\"在内存中生成一个代表这个类的\",{\"1\":{\"422\":1}}],[\"在内存中分配了不同大小的内存空间\",{\"1\":{\"238\":1}}],[\"在进程切换上就会花过多时间\",{\"1\":{\"640\":1}}],[\"在进行\",{\"1\":{\"280\":1}}],[\"在网络带宽得到保证的前提下\",{\"1\":{\"614\":1}}],[\"在有充足带宽的前提下\",{\"1\":{\"614\":1}}],[\"在有些业务逻辑下\",{\"1\":{\"759\":1}}],[\"在有些架构里面还有一个所有\",{\"1\":{\"317\":1}}],[\"在有些序列化场景会报错\",{\"1\":{\"282\":1}}],[\"在通常情况下\",{\"1\":{\"613\":1}}],[\"在银行的身份认证信息\",{\"1\":{\"613\":1}}],[\"在真正拥有者之前收到修改域名注册信息的相关确认信息\",{\"1\":{\"612\":1}}],[\"在修改完注册信息后\",{\"1\":{\"612\":1}}],[\"在达到目标主机后由目标主机完成重组工作\",{\"1\":{\"602\":1}}],[\"在不同的网络中数据报的最大长度限制是不同的\",{\"1\":{\"602\":1}}],[\"在不再需要一张表的时候\",{\"1\":{\"467\":1}}],[\"在数据的读取过程中\",{\"1\":{\"761\":1}}],[\"在数据尾部增加特殊字符进行分割\",{\"1\":{\"595\":1}}],[\"在数据量比较大\",{\"1\":{\"488\":1}}],[\"在快速重传的基础上\",{\"1\":{\"593\":1}}],[\"在上图\",{\"1\":{\"592\":1}}],[\"在其等待超时的过程中\",{\"1\":{\"591\":1}}],[\"在⽹络出现拥堵时\",{\"1\":{\"585\":1}}],[\"在建立\",{\"1\":{\"581\":1}}],[\"在收到\",{\"1\":{\"573\":1}}],[\"在被取走之前\",{\"1\":{\"573\":1}}],[\"在二十年前的农村\",{\"1\":{\"568\":1}}],[\"在多台服务器之间共享\",{\"1\":{\"566\":1}}],[\"在多线程的环境下\",{\"1\":{\"177\":1}}],[\"在什么时候会超时呢\",{\"1\":{\"560\":1}}],[\"在什么时候会超时\",{\"0\":{\"560\":1}}],[\"在传输数据之前不需要先建立连接\",{\"1\":{\"599\":1}}],[\"在传输前将进行拆包\",{\"1\":{\"595\":1}}],[\"在传输的过程中\",{\"1\":{\"569\":1}}],[\"在传输的过程中就完成了\",{\"1\":{\"559\":1}}],[\"在传送数据前必须建立连接\",{\"1\":{\"568\":1}}],[\"在传统的两阶段上进行改进\",{\"1\":{\"208\":1}}],[\"在浏览器和服务器之间的请求和响应的交互\",{\"1\":{\"555\":1}}],[\"在物理层提供比特流服务的基础上\",{\"1\":{\"542\":1}}],[\"在运行\",{\"1\":{\"538\":1}}],[\"在运行的时候是没有泛型的\",{\"1\":{\"285\":1}}],[\"在线版阅读\",{\"0\":{\"623\":1}}],[\"在线视频\",{\"1\":{\"597\":1}}],[\"在线双写\",{\"1\":{\"532\":2}}],[\"在线程栈信息中找到对应线程号的\",{\"1\":{\"418\":1}}],[\"在并发事务下可能会发生的问题\",{\"1\":{\"521\":1}}],[\"在申请行锁\",{\"1\":{\"514\":1}}],[\"在行上还存在插入意向锁\",{\"1\":{\"513\":1}}],[\"在已提交读\",{\"1\":{\"513\":1}}],[\"在右边\",{\"1\":{\"509\":1}}],[\"在左边\",{\"1\":{\"509\":1}}],[\"在辅助索引里面\",{\"1\":{\"508\":1}}],[\"在查找某个节点的过程中\",{\"1\":{\"732\":1}}],[\"在查找数据时一次页的查找代表一次\",{\"1\":{\"502\":1}}],[\"在查询时却看到了自我介绍还是旧的\",{\"1\":{\"528\":1}}],[\"在查询数据库时\",{\"1\":{\"496\":1}}],[\"在索引列上使用\",{\"1\":{\"498\":1}}],[\"在用户访问过程中\",{\"1\":{\"604\":1}}],[\"在用于\",{\"1\":{\"497\":1}}],[\"在用迭代器遍历一个集合对象时\",{\"1\":{\"157\":1}}],[\"在比较小的索引数据里查找\",{\"1\":{\"496\":1}}],[\"在我们删除数据库百万级别数据的时候\",{\"1\":{\"536\":1}}],[\"在我们添加完索引之后\",{\"1\":{\"496\":1}}],[\"在我们微服务的架构下\",{\"1\":{\"368\":1}}],[\"在where语句中使用\",{\"1\":{\"493\":1}}],[\"在设备还没有\",{\"1\":{\"607\":1}}],[\"在设计索引时\",{\"1\":{\"491\":1}}],[\"在设置\",{\"1\":{\"451\":1}}],[\"在将该表与原数据表关联\",{\"1\":{\"488\":1}}],[\"在事务提交的过程中\",{\"1\":{\"871\":1}}],[\"在事务提交时\",{\"1\":{\"483\":1}}],[\"在事务没有提交之前\",{\"1\":{\"445\":1}}],[\"在如下的一些情况中\",{\"1\":{\"483\":1}}],[\"在写入的过程中\",{\"1\":{\"817\":1}}],[\"在写完\",{\"1\":{\"482\":1}}],[\"在写代码的过程中\",{\"1\":{\"245\":1}}],[\"在对hash表进⾏扩容或者缩容的时候\",{\"1\":{\"729\":1}}],[\"在对\",{\"1\":{\"481\":1}}],[\"在对象的对象头信息中存储着对象的迭代年龄\",{\"1\":{\"400\":1}}],[\"在对象中添加一个引用计数器\",{\"1\":{\"390\":1}}],[\"在对象被移动\",{\"1\":{\"386\":1}}],[\"在引擎层进行数据的提取和存储\",{\"1\":{\"481\":1}}],[\"在引入虚拟机之后\",{\"1\":{\"232\":1}}],[\"在磁盘上存储成三个文件\",{\"1\":{\"477\":1}}],[\"在统计结果的时候\",{\"1\":{\"469\":3}}],[\"在保证可用性和分区容错性的前提下\",{\"1\":{\"706\":1}}],[\"在保留表而删除所有数据的时候用\",{\"1\":{\"467\":1}}],[\"在保存数据的接口中\",{\"1\":{\"225\":1}}],[\"在想删除部分数据行时候\",{\"1\":{\"467\":1}}],[\"在存取方面与\",{\"1\":{\"461\":1}}],[\"在第一次读取数据时生成一个\",{\"1\":{\"522\":1}}],[\"在第一范式的基础上\",{\"1\":{\"460\":1}}],[\"在第二阶段正准备提交的时候事务管理器宕机\",{\"1\":{\"202\":1}}],[\"在invoke方法中\",{\"1\":{\"453\":1}}],[\"在insert前\",{\"1\":{\"225\":1}}],[\"在某一时刻只能执行一条\",{\"1\":{\"636\":1}}],[\"在某些情况下不符合业务的需求\",{\"1\":{\"445\":1}}],[\"在某个延迟后执行\",{\"1\":{\"365\":1}}],[\"在mapper中如何传递多个参数\",{\"0\":{\"436\":1}}],[\"在mybatis里面也是会把它封装成一个map的\",{\"1\":{\"445\":1}}],[\"在mybatis配置文件中\",{\"1\":{\"442\":1,\"451\":1}}],[\"在mybatis\",{\"1\":{\"433\":1}}],[\"在核心包\",{\"1\":{\"427\":1}}],[\"在加载过程\",{\"1\":{\"422\":1}}],[\"在前端的导出订单按钮上加上了置灰状态\",{\"1\":{\"413\":1}}],[\"在前一个\",{\"1\":{\"7\":1}}],[\"在即时编译过程中\",{\"1\":{\"402\":1}}],[\"在人犯被处决之前\",{\"1\":{\"393\":1}}],[\"在系统崩溃后\",{\"1\":{\"519\":1}}],[\"在系统将要发生内存溢出异常前\",{\"1\":{\"392\":1}}],[\"在系统的运行中\",{\"1\":{\"224\":1}}],[\"在分布式事务的上下文中\",{\"1\":{\"872\":1}}],[\"在分布式系统里\",{\"1\":{\"224\":1}}],[\"在分页系统里\",{\"1\":{\"658\":1}}],[\"在分配的时候从列表中找到一块足够大的空间划分给对象实例\",{\"1\":{\"383\":1}}],[\"在虚拟机启动时创建\",{\"1\":{\"379\":1}}],[\"在代码中\",{\"1\":{\"348\":1}}],[\"在consumer实例的启动流程中的启动mqclientinstance实例部分\",{\"1\":{\"777\":1}}],[\"在consumer启动后\",{\"1\":{\"777\":1}}],[\"在countdownlatch中\",{\"1\":{\"347\":1}}],[\"在cyclicbarrier中\",{\"1\":{\"347\":1}}],[\"在此阶段\",{\"1\":{\"871\":1}}],[\"在此基础上\",{\"1\":{\"791\":1}}],[\"在此等待信号再继续\",{\"1\":{\"345\":1}}],[\"在此节点下建立子节点是可以保证先后顺序的\",{\"1\":{\"197\":1}}],[\"在信号未收到前\",{\"1\":{\"345\":1}}],[\"在这里既是一个动作\",{\"1\":{\"743\":1}}],[\"在这种情况下\",{\"1\":{\"678\":1}}],[\"在这张图里\",{\"1\":{\"501\":1}}],[\"在这个方法里可以看到\",{\"1\":{\"793\":1}}],[\"在这个方法里\",{\"1\":{\"373\":1}}],[\"在这个同步点\",{\"1\":{\"349\":1}}],[\"在这个场景中\",{\"1\":{\"345\":1}}],[\"在这个协议里\",{\"1\":{\"202\":1}}],[\"在这段代码中\",{\"1\":{\"345\":1}}],[\"在等待期间\",{\"1\":{\"843\":1}}],[\"在等待己被\",{\"1\":{\"342\":1,\"647\":1}}],[\"在等待超时之后\",{\"1\":{\"203\":1}}],[\"在无外力作用的情况下\",{\"1\":{\"342\":1}}],[\"在无竞争的情况下\",{\"1\":{\"327\":1}}],[\"在轻量级锁升级为重量级锁时\",{\"1\":{\"327\":1}}],[\"在没有多线程竞争时\",{\"1\":{\"327\":1}}],[\"在判断拥有同步标识\",{\"1\":{\"325\":1}}],[\"在子线程中就可以拿到了\",{\"1\":{\"315\":1}}],[\"在get的时候\",{\"1\":{\"313\":1}}],[\"在gitee中配置私人令牌\",{\"0\":{\"111\":1}}],[\"在gitee中创建仓库\",{\"0\":{\"110\":1}}],[\"在自我保护模式下\",{\"1\":{\"838\":1}}],[\"在自己的map里找对应的key\",{\"1\":{\"310\":1}}],[\"在自动装箱的时候会调用\",{\"1\":{\"269\":1}}],[\"在控制层拦截请求把用户信息存入threadlocal\",{\"1\":{\"309\":1}}],[\"在控制层可以根据这个token\",{\"1\":{\"309\":1}}],[\"在当前线程下再通过get\",{\"1\":{\"306\":1}}],[\"在object类中有一些函数可以用于线程的等待与通知\",{\"1\":{\"302\":1}}],[\"在类加载阶段丢弃\",{\"1\":{\"287\":1}}],[\"在编译期间\",{\"1\":{\"285\":1,\"408\":1,\"804\":1}}],[\"在实际运行之前就完成了织入\",{\"1\":{\"807\":1}}],[\"在实际中\",{\"1\":{\"213\":1}}],[\"在实现类中对拦截对象和方法进行处理\",{\"1\":{\"453\":1}}],[\"在实例化泛型类时\",{\"1\":{\"285\":1}}],[\"在反序列化之前把对象的类的结构改了\",{\"1\":{\"282\":1}}],[\"在各个通道上切换\",{\"1\":{\"280\":1}}],[\"在各大主流数据库都有自己实现\",{\"1\":{\"202\":1}}],[\"在执行目标方法时进行事务增强操作\",{\"1\":{\"812\":1}}],[\"在执行完目标方法之后根据执行情况提交或者回滚事务\",{\"1\":{\"809\":1}}],[\"在执行完对应的代码块之后\",{\"1\":{\"326\":1}}],[\"在执行更新语句的时候\",{\"1\":{\"481\":1}}],[\"在执行查询的时候\",{\"1\":{\"454\":1}}],[\"在执行程序时\",{\"1\":{\"319\":1}}],[\"在执行\",{\"1\":{\"276\":1,\"812\":1}}],[\"在静态块中会初始化好缓存值\",{\"1\":{\"269\":1}}],[\"在jvm中\",{\"1\":{\"311\":1}}],[\"在jvm\",{\"1\":{\"305\":1}}],[\"在java虚拟机\",{\"1\":{\"325\":1}}],[\"在java中\",{\"1\":{\"303\":1,\"337\":1}}],[\"在java8\",{\"1\":{\"266\":1}}],[\"在jdk1\",{\"1\":{\"178\":2,\"179\":1,\"266\":1,\"327\":1,\"330\":1}}],[\"在堆中\",{\"1\":{\"265\":1}}],[\"在堆里创建一个\",{\"1\":{\"265\":1}}],[\"在外部调⽤静态⽅法时\",{\"1\":{\"254\":1}}],[\"在接⼝中引⼊了私有⽅法和私有静态⽅法\",{\"1\":{\"252\":1}}],[\"在接下来的1s内\",{\"1\":{\"227\":1}}],[\"在\",{\"1\":{\"248\":1,\"252\":2,\"261\":1,\"275\":1,\"276\":2,\"333\":1,\"345\":1,\"380\":1,\"381\":1,\"382\":1,\"385\":1,\"388\":1,\"392\":3,\"402\":1,\"418\":1,\"427\":1,\"428\":1,\"481\":1,\"489\":1,\"507\":1,\"509\":1,\"519\":1,\"523\":1,\"559\":2,\"561\":2,\"562\":1,\"591\":1,\"602\":1,\"653\":1,\"662\":1,\"784\":1,\"788\":2,\"793\":1,\"797\":1,\"798\":1,\"802\":3,\"812\":1,\"821\":1}}],[\"在由操作系统执行\",{\"1\":{\"236\":1}}],[\"在更新前\",{\"1\":{\"225\":1}}],[\"在单提议者的前提下是没有问题的\",{\"1\":{\"217\":1}}],[\"在很多多大厂都得到了工程实践\",{\"1\":{\"210\":1}}],[\"在准备就绪之后\",{\"1\":{\"202\":1}}],[\"在锁表中增加一条记录即可\",{\"1\":{\"196\":1}}],[\"在一段时间后执行\",{\"1\":{\"843\":1}}],[\"在一次通信过程中\",{\"1\":{\"607\":1}}],[\"在一定时间内如果没有得到发送的数据报的\",{\"1\":{\"591\":1}}],[\"在一定时间内\",{\"1\":{\"512\":1}}],[\"在一定时间后\",{\"1\":{\"193\":1,\"765\":1}}],[\"在一个子网中的设备\",{\"1\":{\"607\":1}}],[\"在一个连接里\",{\"1\":{\"558\":1}}],[\"在一个库中的时候我们还可以利用\",{\"1\":{\"534\":1}}],[\"在一个事务范围内\",{\"1\":{\"521\":1}}],[\"在一个事务里提交\",{\"1\":{\"205\":1}}],[\"在一个\",{\"1\":{\"137\":1,\"140\":1,\"147\":1,\"879\":1}}],[\"在满足第二范式的基础上\",{\"1\":{\"460\":1}}],[\"在满足可用性的时候\",{\"1\":{\"191\":1}}],[\"在满足一致性\",{\"1\":{\"191\":1}}],[\"在插入时\",{\"1\":{\"175\":1}}],[\"在插件设置中搜索gitee插件并进行下载\",{\"0\":{\"113\":1}}],[\"在hashmap中有这样一段注释\",{\"1\":{\"173\":1}}],[\"在hashmap的初始化中\",{\"1\":{\"169\":1}}],[\"在冲突的位置拉一个链表\",{\"1\":{\"171\":1}}],[\"在使用了槽的一致性哈希分区中\",{\"1\":{\"695\":1}}],[\"在使用foreach的时候最关键的也是最容易出错的就是collection属性\",{\"1\":{\"445\":1}}],[\"在使用线程池处理任务的时候\",{\"1\":{\"366\":1}}],[\"在使用cyclicbarrier时\",{\"1\":{\"347\":1}}],[\"在使用\",{\"1\":{\"158\":1}}],[\"在拷贝的集合上进行遍历\",{\"1\":{\"157\":1}}],[\"在遍历期间原集合发生的修改迭代器是不知道的\",{\"1\":{\"157\":1}}],[\"在遍历时不是直接在集合内容上访问的\",{\"1\":{\"157\":1}}],[\"在遍历该属性的map时\",{\"1\":{\"91\":1}}],[\"在遍历该属性的array时\",{\"1\":{\"90\":1}}],[\"在遍历该属性的list集合时\",{\"1\":{\"89\":1}}],[\"在图片上右击直接上传到gitee仓库中\",{\"1\":{\"116\":1}}],[\"在你启用\",{\"1\":{\"12\":1,\"13\":1}}],[\"在幻灯片上添加属性\",{\"1\":{\"7\":1}}],[\"在水平幻灯片中使用\",{\"1\":{\"7\":1}}],[\">微服务\",{\"1\":{\"828\":1}}],[\">服务化\",{\"1\":{\"828\":1}}],[\"><\",{\"1\":{\"795\":7}}],[\">email=\",{\"1\":{\"444\":1}}],[\">password=\",{\"1\":{\"444\":1}}],[\">username=\",{\"1\":{\"444\":1}}],[\">a\",{\"1\":{\"336\":1}}],[\">重量级锁\",{\"1\":{\"327\":1}}],[\">偏向锁\",{\"1\":{\"327\":1}}],[\">对象指向分配的内存空间\",{\"1\":{\"319\":1}}],[\">初始化对象\",{\"1\":{\"319\":1}}],[\">>singletonfactories\",{\"1\":{\"800\":1}}],[\">>\",{\"1\":{\"310\":1}}],[\">>>\",{\"1\":{\"164\":1,\"166\":1,\"169\":5,\"181\":2}}],[\">bio=\",{\"1\":{\"444\":1}}],[\">b\",{\"1\":{\"294\":1,\"336\":1}}],[\">service3\",{\"1\":{\"811\":1}}],[\">service2\",{\"1\":{\"811\":1}}],[\">ssthresh\",{\"1\":{\"586\":1}}],[\">s1+\",{\"1\":{\"294\":1}}],[\">s\",{\"1\":{\"294\":6}}],[\">system\",{\"1\":{\"292\":1,\"293\":1}}],[\">=0\",{\"1\":{\"762\":1}}],[\">=\",{\"1\":{\"169\":1,\"314\":4,\"641\":1,\"725\":1}}],[\">\",{\"1\":{\"7\":2,\"27\":2,\"86\":2,\"87\":5,\"88\":6,\"89\":6,\"90\":7,\"91\":3,\"95\":1,\"96\":1,\"97\":1,\"137\":3,\"140\":3,\"147\":3,\"181\":2,\"272\":1,\"310\":1,\"327\":1,\"345\":6,\"418\":3,\"436\":4,\"437\":8,\"440\":2,\"441\":20,\"443\":1,\"444\":12,\"445\":8,\"453\":2,\"488\":1,\"493\":12,\"498\":1,\"513\":2,\"595\":1,\"641\":1,\"652\":2,\"727\":6,\"778\":1,\"793\":6,\"795\":8,\"813\":1,\"820\":1,\"879\":3}}],[\"<version>0\",{\"1\":{\"821\":1}}],[\"<groupid>cn\",{\"1\":{\"821\":1}}],[\"<groupid>org\",{\"1\":{\"805\":1,\"821\":2}}],[\"<optional>true<\",{\"1\":{\"821\":1}}],[\"<otherwise>\",{\"1\":{\"444\":1}}],[\"<dependency>\",{\"1\":{\"805\":1,\"821\":3}}],[\"<自动装配类型>\",{\"1\":{\"796\":1}}],[\"<quorum>个数\",{\"1\":{\"688\":1}}],[\"<主机号>\",{\"1\":{\"603\":1}}],[\"<网络号>\",{\"1\":{\"603\":1}}],[\"<html>\",{\"1\":{\"556\":1}}],[\"<>\",{\"1\":{\"489\":1}}],[\"<bean>元素提供了一个指定自动装配类型的属性\",{\"1\":{\"796\":1}}],[\"<bean\",{\"1\":{\"793\":2,\"795\":7}}],[\"<beans\",{\"1\":{\"793\":1}}],[\"<body>hello\",{\"1\":{\"556\":1}}],[\"<b\",{\"1\":{\"458\":3}}],[\"<bind\",{\"1\":{\"440\":1}}],[\"<artifactid>demo\",{\"1\":{\"821\":1}}],[\"<artifactid>spring\",{\"1\":{\"805\":1,\"821\":2}}],[\"<a\",{\"1\":{\"458\":3}}],[\"<association\",{\"1\":{\"441\":1}}],[\"<property\",{\"1\":{\"453\":1,\"793\":2,\"795\":3}}],[\"<plugin\",{\"1\":{\"453\":1}}],[\"<plugins>\",{\"1\":{\"453\":1}}],[\"<p>\",{\"1\":{\"267\":2}}],[\"<t>\",{\"1\":{\"450\":1}}],[\"<e>\",{\"1\":{\"448\":4}}],[\"<mapper\",{\"1\":{\"445\":1}}],[\"<update\",{\"1\":{\"444\":1}}],[\"<when\",{\"1\":{\"444\":2}}],[\"<where>可以用在所有的查询条件都是动态的情况\",{\"1\":{\"444\":1}}],[\"<where>\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"444\":2}}],[\"<constructor\",{\"1\":{\"795\":1}}],[\"<collection\",{\"1\":{\"441\":1}}],[\"<choose>\",{\"1\":{\"444\":1}}],[\"<result\",{\"1\":{\"437\":2,\"441\":5}}],[\"<resultmap\",{\"1\":{\"437\":1,\"441\":2}}],[\"<insert\",{\"1\":{\"443\":1,\"445\":3}}],[\"<init>\",{\"1\":{\"266\":1}}],[\"<id\",{\"1\":{\"437\":1,\"441\":4}}],[\"<if\",{\"1\":{\"87\":3,\"88\":4,\"89\":4,\"90\":5,\"91\":1,\"444\":8}}],[\"<=\",{\"1\":{\"181\":1,\"373\":2,\"493\":1,\"513\":1,\"641\":1,\"645\":1,\"762\":1}}],[\"<k\",{\"1\":{\"181\":1}}],[\"<<\",{\"1\":{\"169\":1,\"181\":1,\"244\":1,\"367\":5}}],[\"<foreach\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"444\":1,\"445\":2}}],[\"<set>\",{\"1\":{\"444\":2}}],[\"<select\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"95\":1,\"96\":1,\"97\":1,\"436\":4,\"437\":2,\"440\":1,\"441\":2,\"444\":4}}],[\"<style>\",{\"1\":{\"76\":1}}],[\"<\",{\"1\":{\"7\":2,\"76\":1,\"86\":3,\"87\":6,\"88\":7,\"89\":7,\"90\":8,\"91\":4,\"95\":1,\"96\":1,\"97\":1,\"169\":1,\"181\":2,\"269\":1,\"314\":1,\"348\":1,\"354\":1,\"399\":1,\"436\":4,\"437\":5,\"440\":1,\"441\":11,\"443\":1,\"444\":21,\"445\":10,\"453\":2,\"493\":1,\"498\":1,\"513\":1,\"556\":1,\"641\":1,\"645\":1,\"725\":1,\"763\":1,\"793\":3,\"795\":8,\"805\":1,\"821\":3}}],[\"女朋友\",{\"1\":{\"574\":2}}],[\"女朋友忍无可忍\",{\"1\":{\"574\":1}}],[\"女\",{\"1\":{\"0\":1}}],[\"介绍一下\",{\"0\":{\"819\":1}}],[\"介绍一下常用的通配符\",{\"0\":{\"285\":1}}],[\"介绍\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
